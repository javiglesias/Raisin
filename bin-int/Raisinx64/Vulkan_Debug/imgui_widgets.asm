; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31630.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_02HJNLAKPP@S8@				; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_02HNFGHGEN@U8@				; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_03KLLGJOHN@S16@				; `string'
PUBLIC	??_C@_03IONNMBKB@U16@				; `string'
PUBLIC	??_C@_03MMFOIPBH@S32@				; `string'
PUBLIC	??_C@_03OJDFNAML@U32@				; `string'
PUBLIC	??_C@_03JMMPOKHK@S64@				; `string'
PUBLIC	??_C@_05LLAMLEHD@?$CFI64d@			; `string'
PUBLIC	??_C@_03LJKELFKG@U64@				; `string'
PUBLIC	??_C@_05OINFJHGD@?$CFI64u@			; `string'
PUBLIC	??_C@_05KNFBNCOH@float@				; `string'
PUBLIC	??_C@_04GFJLOHHD@?$CF?43f@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_06BNJCAIGJ@double@			; `string'
PUBLIC	??_C@_03DLDNIBIK@?$CFlf@			; `string'
PUBLIC	??_C@_03CEFFAPNG@?$CD?$CDX@			; `string'
PUBLIC	??_C@_03DNEODOJH@?$CD?$CDY@			; `string'
PUBLIC	??_C@_03BGGDGNFE@?$CD?$CDZ@			; `string'
PUBLIC	??_C@_03KDMNBDBJ@?$CD?$CDW@			; `string'
PUBLIC	??_C@_03GOOLIKIF@?$CF3d@			; `string'
PUBLIC	??_C@_05FELKPNOB@R?3?$CF3d@			; `string'
PUBLIC	??_C@_05HKBGOMJ@G?3?$CF3d@			; `string'
PUBLIC	??_C@_05FHGMPPHK@B?3?$CF3d@			; `string'
PUBLIC	??_C@_05NBPIINNE@A?3?$CF3d@			; `string'
PUBLIC	??_C@_05PGPHNMBM@H?3?$CF3d@			; `string'
PUBLIC	??_C@_05JPOGCOEE@S?3?$CF3d@			; `string'
PUBLIC	??_C@_05MPCLLPPH@V?3?$CF3d@			; `string'
PUBLIC	??_C@_05ONBKDNLK@?$CF0?43f@			; `string'
PUBLIC	??_C@_07CCOKENNH@R?3?$CF0?43f@			; `string'
PUBLIC	??_C@_07BGLBHCJI@G?3?$CF0?43f@			; `string'
PUBLIC	??_C@_07FOFBHMPM@B?3?$CF0?43f@			; `string'
PUBLIC	??_C@_07NANOHLBP@A?3?$CF0?43f@			; `string'
PUBLIC	??_C@_07MPJBGADE@H?3?$CF0?43f@			; `string'
PUBLIC	??_C@_07OOEAENEJ@S?3?$CF0?43f@			; `string'
PUBLIC	??_C@_07KGKAEDCN@V?3?$CF0?43f@			; `string'
msvcjmc	SEGMENT
__A52B8F80_imconfig@h DB 01H
__529D0EAA_concurrencysal@h DB 01H
__7EC34687_sal@h DB 01H
__35A2D2DF_vadefs@h DB 01H
__5F022EB5_vcruntime@h DB 01H
__1B0272D9_corecrt@h DB 01H
__B9985323_float@h DB 01H
__79700276_stdarg@h DB 01H
__13F5961F_stddef@h DB 01H
__61CC25A1_errno@h DB 01H
__74AC4223_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__19139D6C_assert@h DB 01H
__21D911DF_imgui@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__F3D99286_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__F75BE1FA_mmintrin@h DB 01H
__FA77ED4C_malloc@h DB 01H
__DFD742E1_xmmintrin@h DB 01H
__BAB5CB2D_emmintrin@h DB 01H
__6514A3A4_pmmintrin@h DB 01H
__D5CDD026_tmmintrin@h DB 01H
__FCF6C5A5_smmintrin@h DB 01H
__99944C69_nmmintrin@h DB 01H
__4C2FB627_wmmintrin@h DB 01H
__87BBFB20_zmmintrin@h DB 01H
__B0AF59EA_immintrin@h DB 01H
__40756020_imstb_textedit@h DB 01H
__D68E48C9_imgui_internal@h DB 01H
__74484FB3_corecrt_wctype@h DB 01H
__1EC467ED_ctype@h DB 01H
__4DAFBCB9_stdint@h DB 01H
__938265FB_imgui_widgets@cpp DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_07KGKAEDCN@V?3?$CF0?43f@
CONST	SEGMENT
??_C@_07KGKAEDCN@V?3?$CF0?43f@ DB 'V:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOEAENEJ@S?3?$CF0?43f@
CONST	SEGMENT
??_C@_07OOEAENEJ@S?3?$CF0?43f@ DB 'S:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MPJBGADE@H?3?$CF0?43f@
CONST	SEGMENT
??_C@_07MPJBGADE@H?3?$CF0?43f@ DB 'H:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NANOHLBP@A?3?$CF0?43f@
CONST	SEGMENT
??_C@_07NANOHLBP@A?3?$CF0?43f@ DB 'A:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FOFBHMPM@B?3?$CF0?43f@
CONST	SEGMENT
??_C@_07FOFBHMPM@B?3?$CF0?43f@ DB 'B:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BGLBHCJI@G?3?$CF0?43f@
CONST	SEGMENT
??_C@_07BGLBHCJI@G?3?$CF0?43f@ DB 'G:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCOKENNH@R?3?$CF0?43f@
CONST	SEGMENT
??_C@_07CCOKENNH@R?3?$CF0?43f@ DB 'R:%0.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05ONBKDNLK@?$CF0?43f@
CONST	SEGMENT
??_C@_05ONBKDNLK@?$CF0?43f@ DB '%0.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPCLLPPH@V?3?$CF3d@
CONST	SEGMENT
??_C@_05MPCLLPPH@V?3?$CF3d@ DB 'V:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPOGCOEE@S?3?$CF3d@
CONST	SEGMENT
??_C@_05JPOGCOEE@S?3?$CF3d@ DB 'S:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PGPHNMBM@H?3?$CF3d@
CONST	SEGMENT
??_C@_05PGPHNMBM@H?3?$CF3d@ DB 'H:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBPIINNE@A?3?$CF3d@
CONST	SEGMENT
??_C@_05NBPIINNE@A?3?$CF3d@ DB 'A:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FHGMPPHK@B?3?$CF3d@
CONST	SEGMENT
??_C@_05FHGMPPHK@B?3?$CF3d@ DB 'B:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKBGOMJ@G?3?$CF3d@
CONST	SEGMENT
??_C@_05HKBGOMJ@G?3?$CF3d@ DB 'G:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FELKPNOB@R?3?$CF3d@
CONST	SEGMENT
??_C@_05FELKPNOB@R?3?$CF3d@ DB 'R:%3d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GOOLIKIF@?$CF3d@
CONST	SEGMENT
??_C@_03GOOLIKIF@?$CF3d@ DB '%3d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KDMNBDBJ@?$CD?$CDW@
CONST	SEGMENT
??_C@_03KDMNBDBJ@?$CD?$CDW@ DB '##W', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BGGDGNFE@?$CD?$CDZ@
CONST	SEGMENT
??_C@_03BGGDGNFE@?$CD?$CDZ@ DB '##Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DNEODOJH@?$CD?$CDY@
CONST	SEGMENT
??_C@_03DNEODOJH@?$CD?$CDY@ DB '##Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CEFFAPNG@?$CD?$CDX@
CONST	SEGMENT
??_C@_03CEFFAPNG@?$CD?$CDX@ DB '##X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DLDNIBIK@?$CFlf@
CONST	SEGMENT
??_C@_03DLDNIBIK@?$CFlf@ DB '%lf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNJCAIGJ@double@
CONST	SEGMENT
??_C@_06BNJCAIGJ@double@ DB 'double', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GFJLOHHD@?$CF?43f@
CONST	SEGMENT
??_C@_04GFJLOHHD@?$CF?43f@ DB '%.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNFBNCOH@float@
CONST	SEGMENT
??_C@_05KNFBNCOH@float@ DB 'float', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OINFJHGD@?$CFI64u@
CONST	SEGMENT
??_C@_05OINFJHGD@?$CFI64u@ DB '%I64u', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LJKELFKG@U64@
CONST	SEGMENT
??_C@_03LJKELFKG@U64@ DB 'U64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLAMLEHD@?$CFI64d@
CONST	SEGMENT
??_C@_05LLAMLEHD@?$CFI64d@ DB '%I64d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMMPOKHK@S64@
CONST	SEGMENT
??_C@_03JMMPOKHK@S64@ DB 'S64', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OJDFNAML@U32@
CONST	SEGMENT
??_C@_03OJDFNAML@U32@ DB 'U32', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MMFOIPBH@S32@
CONST	SEGMENT
??_C@_03MMFOIPBH@S32@ DB 'S32', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IONNMBKB@U16@
CONST	SEGMENT
??_C@_03IONNMBKB@U16@ DB 'U16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KLLGJOHN@S16@
CONST	SEGMENT
??_C@_03KLLGJOHN@S16@ DB 'S16', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HNFGHGEN@U8@
CONST	SEGMENT
??_C@_02HNFGHGEN@U8@ DB 'U8', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HJNLAKPP@S8@
CONST	SEGMENT
??_C@_02HJNLAKPP@S8@ DB 'S8', 00H			; `string'
CONST	ENDS
CONST	SEGMENT
?GDataTypeInfo@@3QBUImGuiDataTypeInfo@@B DQ 0000000000000001H ; GDataTypeInfo
	DQ	FLAT:??_C@_02HJNLAKPP@S8@
	DQ	FLAT:??_C@_02DPKJAMEF@?$CFd@
	DQ	FLAT:??_C@_02DPKJAMEF@?$CFd@
	DQ	0000000000000001H
	DQ	FLAT:??_C@_02HNFGHGEN@U8@
	DQ	FLAT:??_C@_02GMHACPFF@?$CFu@
	DQ	FLAT:??_C@_02GMHACPFF@?$CFu@
	DQ	0000000000000002H
	DQ	FLAT:??_C@_03KLLGJOHN@S16@
	DQ	FLAT:??_C@_02DPKJAMEF@?$CFd@
	DQ	FLAT:??_C@_02DPKJAMEF@?$CFd@
	DQ	0000000000000002H
	DQ	FLAT:??_C@_03IONNMBKB@U16@
	DQ	FLAT:??_C@_02GMHACPFF@?$CFu@
	DQ	FLAT:??_C@_02GMHACPFF@?$CFu@
	DQ	0000000000000004H
	DQ	FLAT:??_C@_03MMFOIPBH@S32@
	DQ	FLAT:??_C@_02DPKJAMEF@?$CFd@
	DQ	FLAT:??_C@_02DPKJAMEF@?$CFd@
	DQ	0000000000000004H
	DQ	FLAT:??_C@_03OJDFNAML@U32@
	DQ	FLAT:??_C@_02GMHACPFF@?$CFu@
	DQ	FLAT:??_C@_02GMHACPFF@?$CFu@
	DQ	0000000000000008H
	DQ	FLAT:??_C@_03JMMPOKHK@S64@
	DQ	FLAT:??_C@_05LLAMLEHD@?$CFI64d@
	DQ	FLAT:??_C@_05LLAMLEHD@?$CFI64d@
	DQ	0000000000000008H
	DQ	FLAT:??_C@_03LJKELFKG@U64@
	DQ	FLAT:??_C@_05OINFJHGD@?$CFI64u@
	DQ	FLAT:??_C@_05OINFJHGD@?$CFI64u@
	DQ	0000000000000004H
	DQ	FLAT:??_C@_05KNFBNCOH@float@
	DQ	FLAT:??_C@_04GFJLOHHD@?$CF?43f@
	DQ	FLAT:??_C@_02NJPGOMH@?$CFf@
	DQ	0000000000000008H
	DQ	FLAT:??_C@_06BNJCAIGJ@double@
	DQ	FLAT:??_C@_02NJPGOMH@?$CFf@
	DQ	FLAT:??_C@_03DLDNIBIK@?$CFlf@
?min_steps@?1??GetMinimumStepAtDecimalPrecision@@YAMH@Z@4QBMB DD 03f800000r ; 1 ; `GetMinimumStepAtDecimalPrecision'::`2'::min_steps
	DD	03dcccccdr			; 0.1
	DD	03c23d70ar			; 0.01
	DD	03a83126fr			; 0.001
	DD	038d1b717r			; 0.0001
	DD	03727c5acr			; 1e-05
	DD	0358637bdr			; 1e-06
	DD	033d6bf95r			; 1e-07
	DD	0322bcc77r			; 1e-08
	DD	03089705fr			; 1e-09
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0ImVec2@@QEAA@XZ				; ImVec2::ImVec2
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??AImVec2@@QEBAM_K@Z				; ImVec2::operator[]
PUBLIC	??AImVec2@@QEAAAEAM_K@Z				; ImVec2::operator[]
PUBLIC	??0ImVec4@@QEAA@XZ				; ImVec4::ImVec4
PUBLIC	??0ImVec4@@QEAA@MMMM@Z				; ImVec4::ImVec4
PUBLIC	?Separator@ImGui@@YAXXZ				; ImGui::Separator
PUBLIC	?NewLine@ImGui@@YAXXZ				; ImGui::NewLine
PUBLIC	?Spacing@ImGui@@YAXXZ				; ImGui::Spacing
PUBLIC	?Dummy@ImGui@@YAXAEBUImVec2@@@Z			; ImGui::Dummy
PUBLIC	?AlignTextToFramePadding@ImGui@@YAXXZ		; ImGui::AlignTextToFramePadding
PUBLIC	?TextUnformatted@ImGui@@YAXPEBD0@Z		; ImGui::TextUnformatted
PUBLIC	?Text@ImGui@@YAXPEBDZZ				; ImGui::Text
PUBLIC	?TextV@ImGui@@YAXPEBDPEAD@Z			; ImGui::TextV
PUBLIC	?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ	; ImGui::TextColored
PUBLIC	?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z	; ImGui::TextColoredV
PUBLIC	?TextDisabled@ImGui@@YAXPEBDZZ			; ImGui::TextDisabled
PUBLIC	?TextDisabledV@ImGui@@YAXPEBDPEAD@Z		; ImGui::TextDisabledV
PUBLIC	?TextWrapped@ImGui@@YAXPEBDZZ			; ImGui::TextWrapped
PUBLIC	?TextWrappedV@ImGui@@YAXPEBDPEAD@Z		; ImGui::TextWrappedV
PUBLIC	?LabelText@ImGui@@YAXPEBD0ZZ			; ImGui::LabelText
PUBLIC	?LabelTextV@ImGui@@YAXPEBD0PEAD@Z		; ImGui::LabelTextV
PUBLIC	?BulletText@ImGui@@YAXPEBDZZ			; ImGui::BulletText
PUBLIC	?BulletTextV@ImGui@@YAXPEBDPEAD@Z		; ImGui::BulletTextV
PUBLIC	?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z		; ImGui::Button
PUBLIC	?SmallButton@ImGui@@YA_NPEBD@Z			; ImGui::SmallButton
PUBLIC	?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z	; ImGui::InvisibleButton
PUBLIC	?ArrowButton@ImGui@@YA_NPEBDH@Z			; ImGui::ArrowButton
PUBLIC	?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z ; ImGui::Image
PUBLIC	?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z ; ImGui::ImageButton
PUBLIC	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z		; ImGui::Checkbox
PUBLIC	?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z		; ImGui::CheckboxFlags
PUBLIC	?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z		; ImGui::CheckboxFlags
PUBLIC	?RadioButton@ImGui@@YA_NPEBD_N@Z		; ImGui::RadioButton
PUBLIC	?RadioButton@ImGui@@YA_NPEBDPEAHH@Z		; ImGui::RadioButton
PUBLIC	?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z	; ImGui::ProgressBar
PUBLIC	?Bullet@ImGui@@YAXXZ				; ImGui::Bullet
PUBLIC	?BeginCombo@ImGui@@YA_NPEBD0H@Z			; ImGui::BeginCombo
PUBLIC	?EndCombo@ImGui@@YAXXZ				; ImGui::EndCombo
PUBLIC	?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z		; ImGui::Combo
PUBLIC	?Combo@ImGui@@YA_NPEBDPEAH0H@Z			; ImGui::Combo
PUBLIC	?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ; ImGui::Combo
PUBLIC	?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z		; ImGui::DragFloat
PUBLIC	?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z		; ImGui::DragFloat2
PUBLIC	?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z		; ImGui::DragFloat3
PUBLIC	?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z		; ImGui::DragFloat4
PUBLIC	?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z	; ImGui::DragFloatRange2
PUBLIC	?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z		; ImGui::DragInt
PUBLIC	?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z		; ImGui::DragInt2
PUBLIC	?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z		; ImGui::DragInt3
PUBLIC	?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z		; ImGui::DragInt4
PUBLIC	?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z	; ImGui::DragIntRange2
PUBLIC	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z	; ImGui::DragScalar
PUBLIC	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z	; ImGui::DragScalarN
PUBLIC	?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z		; ImGui::SliderFloat
PUBLIC	?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z		; ImGui::SliderFloat2
PUBLIC	?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z		; ImGui::SliderFloat3
PUBLIC	?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z		; ImGui::SliderFloat4
PUBLIC	?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z		; ImGui::SliderAngle
PUBLIC	?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z		; ImGui::SliderInt
PUBLIC	?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z		; ImGui::SliderInt2
PUBLIC	?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z		; ImGui::SliderInt3
PUBLIC	?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z		; ImGui::SliderInt4
PUBLIC	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z	; ImGui::SliderScalar
PUBLIC	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z	; ImGui::SliderScalarN
PUBLIC	?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z ; ImGui::VSliderFloat
PUBLIC	?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z ; ImGui::VSliderInt
PUBLIC	?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z ; ImGui::VSliderScalar
PUBLIC	?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
PUBLIC	?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextMultiline
PUBLIC	?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextWithHint
PUBLIC	?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z		; ImGui::InputFloat
PUBLIC	?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z		; ImGui::InputFloat2
PUBLIC	?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z		; ImGui::InputFloat3
PUBLIC	?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z		; ImGui::InputFloat4
PUBLIC	?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z		; ImGui::InputInt
PUBLIC	?InputInt2@ImGui@@YA_NPEBDQEAHH@Z		; ImGui::InputInt2
PUBLIC	?InputInt3@ImGui@@YA_NPEBDQEAHH@Z		; ImGui::InputInt3
PUBLIC	?InputInt4@ImGui@@YA_NPEBDQEAHH@Z		; ImGui::InputInt4
PUBLIC	?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z		; ImGui::InputDouble
PUBLIC	?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z	; ImGui::InputScalar
PUBLIC	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z	; ImGui::InputScalarN
PUBLIC	?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z		; ImGui::ColorEdit3
PUBLIC	?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z		; ImGui::ColorEdit4
PUBLIC	?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z		; ImGui::ColorPicker3
PUBLIC	?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z	; ImGui::ColorPicker4
PUBLIC	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
PUBLIC	?SetColorEditOptions@ImGui@@YAXH@Z		; ImGui::SetColorEditOptions
PUBLIC	?TreeNode@ImGui@@YA_NPEBD@Z			; ImGui::TreeNode
PUBLIC	?TreeNode@ImGui@@YA_NPEBD0ZZ			; ImGui::TreeNode
PUBLIC	?TreeNode@ImGui@@YA_NPEBXPEBDZZ			; ImGui::TreeNode
PUBLIC	?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z		; ImGui::TreeNodeV
PUBLIC	?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z		; ImGui::TreeNodeV
PUBLIC	?TreeNodeEx@ImGui@@YA_NPEBDH@Z			; ImGui::TreeNodeEx
PUBLIC	?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ			; ImGui::TreeNodeEx
PUBLIC	?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ		; ImGui::TreeNodeEx
PUBLIC	?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z		; ImGui::TreeNodeExV
PUBLIC	?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z		; ImGui::TreeNodeExV
PUBLIC	?TreePush@ImGui@@YAXPEBD@Z			; ImGui::TreePush
PUBLIC	?TreePush@ImGui@@YAXPEBX@Z			; ImGui::TreePush
PUBLIC	?TreePop@ImGui@@YAXXZ				; ImGui::TreePop
PUBLIC	?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ		; ImGui::GetTreeNodeToLabelSpacing
PUBLIC	?CollapsingHeader@ImGui@@YA_NPEBDH@Z		; ImGui::CollapsingHeader
PUBLIC	?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z	; ImGui::CollapsingHeader
PUBLIC	?SetNextItemOpen@ImGui@@YAX_NH@Z		; ImGui::SetNextItemOpen
PUBLIC	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z	; ImGui::Selectable
PUBLIC	?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z	; ImGui::Selectable
PUBLIC	?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z	; ImGui::BeginListBox
PUBLIC	?EndListBox@ImGui@@YAXXZ			; ImGui::EndListBox
PUBLIC	?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z		; ImGui::ListBox
PUBLIC	?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ; ImGui::ListBox
PUBLIC	?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z	; ImGui::PlotLines
PUBLIC	?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z ; ImGui::PlotLines
PUBLIC	?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ; ImGui::PlotHistogram
PUBLIC	?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z ; ImGui::PlotHistogram
PUBLIC	?Value@ImGui@@YAXPEBD_N@Z			; ImGui::Value
PUBLIC	?Value@ImGui@@YAXPEBDH@Z			; ImGui::Value
PUBLIC	?Value@ImGui@@YAXPEBDI@Z			; ImGui::Value
PUBLIC	?Value@ImGui@@YAXPEBDM0@Z			; ImGui::Value
PUBLIC	?BeginMenuBar@ImGui@@YA_NXZ			; ImGui::BeginMenuBar
PUBLIC	?EndMenuBar@ImGui@@YAXXZ			; ImGui::EndMenuBar
PUBLIC	?BeginMainMenuBar@ImGui@@YA_NXZ			; ImGui::BeginMainMenuBar
PUBLIC	?EndMainMenuBar@ImGui@@YAXXZ			; ImGui::EndMainMenuBar
PUBLIC	?BeginMenu@ImGui@@YA_NPEBD_N@Z			; ImGui::BeginMenu
PUBLIC	?EndMenu@ImGui@@YAXXZ				; ImGui::EndMenu
PUBLIC	?MenuItem@ImGui@@YA_NPEBD0_N1@Z			; ImGui::MenuItem
PUBLIC	?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z		; ImGui::MenuItem
PUBLIC	?BeginTabBar@ImGui@@YA_NPEBDH@Z			; ImGui::BeginTabBar
PUBLIC	?EndTabBar@ImGui@@YAXXZ				; ImGui::EndTabBar
PUBLIC	?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z		; ImGui::BeginTabItem
PUBLIC	?EndTabItem@ImGui@@YAXXZ			; ImGui::EndTabItem
PUBLIC	?TabItemButton@ImGui@@YA_NPEBDH@Z		; ImGui::TabItemButton
PUBLIC	?SetTabItemClosed@ImGui@@YAXPEBD@Z		; ImGui::SetTabItemClosed
PUBLIC	??2@YAPEAX_KUImNewWrapper@@PEAX@Z		; operator new
PUBLIC	??3@YAXPEAXUImNewWrapper@@0@Z			; operator delete
PUBLIC	??0?$ImVector@G@@QEAA@XZ			; ImVector<unsigned short>::ImVector<unsigned short>
PUBLIC	??1?$ImVector@G@@QEAA@XZ			; ImVector<unsigned short>::~ImVector<unsigned short>
PUBLIC	?empty@?$ImVector@G@@QEBA_NXZ			; ImVector<unsigned short>::empty
PUBLIC	??A?$ImVector@G@@QEAAAEAGH@Z			; ImVector<unsigned short>::operator[]
PUBLIC	??A?$ImVector@G@@QEBAAEBGH@Z			; ImVector<unsigned short>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@G@@QEBAHH@Z		; ImVector<unsigned short>::_grow_capacity
PUBLIC	?resize@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::resize
PUBLIC	?reserve@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::reserve
PUBLIC	?contains@?$ImVector@G@@QEBA_NAEBG@Z		; ImVector<unsigned short>::contains
PUBLIC	??0ImGuiInputTextCallbackData@@QEAA@XZ		; ImGuiInputTextCallbackData::ImGuiInputTextCallbackData
PUBLIC	?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ; ImGuiInputTextCallbackData::DeleteChars
PUBLIC	?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ; ImGuiInputTextCallbackData::InsertChars
PUBLIC	??0?$ImVector@D@@QEAA@XZ			; ImVector<char>::ImVector<char>
PUBLIC	?_grow_capacity@?$ImVector@D@@QEBAHH@Z		; ImVector<char>::_grow_capacity
PUBLIC	?resize@?$ImVector@D@@QEAAXH@Z			; ImVector<char>::resize
PUBLIC	?reserve@?$ImVector@D@@QEAAXH@Z			; ImVector<char>::reserve
PUBLIC	??0ImGuiTextBuffer@@QEAA@XZ			; ImGuiTextBuffer::ImGuiTextBuffer
PUBLIC	?size@ImGuiTextBuffer@@QEBAHXZ			; ImGuiTextBuffer::size
PUBLIC	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z	; ImVector<ImVec2>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::reserve
PUBLIC	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
PUBLIC	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z	; ImDrawList::PathLineTo
PUBLIC	?PathFillConvex@ImDrawList@@QEAAXI@Z		; ImDrawList::PathFillConvex
PUBLIC	?PathStroke@ImDrawList@@QEAAXIHM@Z		; ImDrawList::PathStroke
PUBLIC	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z	; ImDrawList::PrimWriteVtx
PUBLIC	?PrimWriteIdx@ImDrawList@@QEAAXG@Z		; ImDrawList::PrimWriteIdx
PUBLIC	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z	; ImDrawList::PrimVtx
PUBLIC	?back@?$ImVector@I@@QEAAAEAIXZ			; ImVector<unsigned int>::back
PUBLIC	?_grow_capacity@?$ImVector@I@@QEBAHH@Z		; ImVector<unsigned int>::_grow_capacity
PUBLIC	?reserve@?$ImVector@I@@QEAAXH@Z			; ImVector<unsigned int>::reserve
PUBLIC	?push_back@?$ImVector@I@@QEAAXAEBI@Z		; ImVector<unsigned int>::push_back
PUBLIC	?contains@?$ImVector@I@@QEBA_NAEBI@Z		; ImVector<unsigned int>::contains
PUBLIC	?empty@?$ImVector@M@@QEBA_NXZ			; ImVector<float>::empty
PUBLIC	??A?$ImVector@M@@QEBAAEBMH@Z			; ImVector<float>::operator[]
PUBLIC	?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ	; ImVector<ImFontGlyph>::empty
PUBLIC	?GetCharAdvance@ImFont@@QEBAMG@Z		; ImFont::GetCharAdvance
PUBLIC	?ListBoxHeader@ImGui@@YA_NPEBDHH@Z		; ImGui::ListBoxHeader
PUBLIC	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z	; ImGui::DragScalar
PUBLIC	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z	; ImGui::DragScalarN
PUBLIC	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z	; ImGui::SliderScalar
PUBLIC	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z	; ImGui::SliderScalarN
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	fabsf
PUBLIC	?ImParseFormatFindStart@@YAPEBDPEBD@Z		; ImParseFormatFindStart
PUBLIC	?ImParseFormatFindEnd@@YAPEBDPEBD@Z		; ImParseFormatFindEnd
PUBLIC	?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z ; ImParseFormatTrimDecorations
PUBLIC	?ImParseFormatPrecision@@YAHPEBDH@Z		; ImParseFormatPrecision
PUBLIC	??0ImRect@@QEAA@XZ				; ImRect::ImRect
PUBLIC	??0ImRect@@QEAA@AEBUImVec2@@0@Z			; ImRect::ImRect
PUBLIC	??0ImRect@@QEAA@AEBUImVec4@@@Z			; ImRect::ImRect
PUBLIC	??0ImRect@@QEAA@MMMM@Z				; ImRect::ImRect
PUBLIC	?GetCenter@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetCenter
PUBLIC	?GetSize@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetSize
PUBLIC	?GetWidth@ImRect@@QEBAMXZ			; ImRect::GetWidth
PUBLIC	?GetHeight@ImRect@@QEBAMXZ			; ImRect::GetHeight
PUBLIC	?GetArea@ImRect@@QEBAMXZ			; ImRect::GetArea
PUBLIC	?GetTL@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetTL
PUBLIC	?GetTR@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetTR
PUBLIC	?GetBL@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetBL
PUBLIC	?GetBR@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetBR
PUBLIC	?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z		; ImRect::Contains
PUBLIC	?Contains@ImRect@@QEBA_NAEBU1@@Z		; ImRect::Contains
PUBLIC	?Overlaps@ImRect@@QEBA_NAEBU1@@Z		; ImRect::Overlaps
PUBLIC	?Expand@ImRect@@QEAAXM@Z			; ImRect::Expand
PUBLIC	?Expand@ImRect@@QEAAXAEBUImVec2@@@Z		; ImRect::Expand
PUBLIC	?Translate@ImRect@@QEAAXAEBUImVec2@@@Z		; ImRect::Translate
PUBLIC	?ClipWith@ImRect@@QEAAXAEBU1@@Z			; ImRect::ClipWith
PUBLIC	?Update@ImGuiMenuColumns@@QEAAXHM_N@Z		; ImGuiMenuColumns::Update
PUBLIC	?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z	; ImGuiMenuColumns::DeclColumns
PUBLIC	?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z	; ImGuiMenuColumns::CalcExtraSpace
PUBLIC	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z	; ImGuiInputTextState::OnKeyPressed
PUBLIC	?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ	; ImGuiInputTextState::CursorAnimReset
PUBLIC	?CursorClamp@ImGuiInputTextState@@QEAAXXZ	; ImGuiInputTextState::CursorClamp
PUBLIC	?HasSelection@ImGuiInputTextState@@QEBA_NXZ	; ImGuiInputTextState::HasSelection
PUBLIC	?ClearSelection@ImGuiInputTextState@@QEAAXXZ	; ImGuiInputTextState::ClearSelection
PUBLIC	?SelectAll@ImGuiInputTextState@@QEAAXXZ		; ImGuiInputTextState::SelectAll
PUBLIC	?ClearFlags@ImGuiNextWindowData@@QEAAXXZ	; ImGuiNextWindowData::ClearFlags
PUBLIC	?ClearFlags@ImGuiNextItemData@@QEAAXXZ		; ImGuiNextItemData::ClearFlags
PUBLIC	??0ImGuiPtrOrIndex@@QEAA@PEAX@Z			; ImGuiPtrOrIndex::ImGuiPtrOrIndex
PUBLIC	??0ImGuiPtrOrIndex@@QEAA@H@Z			; ImGuiPtrOrIndex::ImGuiPtrOrIndex
PUBLIC	?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z ; ImGuiViewportP::CalcWorkRectPos
PUBLIC	?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z ; ImGuiViewportP::CalcWorkRectSize
PUBLIC	?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ ; ImGuiViewportP::GetBuildWorkRect
PUBLIC	?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ ; ImVector<ImGuiGroupData>::back
PUBLIC	??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z ; ImVector<ImGuiPopupData>::operator[]
PUBLIC	??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ; ImVector<ImGuiTabBar>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z ; ImVector<ImGuiTabBar>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z	; ImVector<ImGuiTabBar>::resize
PUBLIC	?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z	; ImVector<ImGuiTabBar>::reserve
PUBLIC	?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z ; ImPool<ImGuiTabBar>::GetByIndex
PUBLIC	?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z ; ImPool<ImGuiTabBar>::GetIndex
PUBLIC	?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z ; ImPool<ImGuiTabBar>::GetOrAddByKey
PUBLIC	?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z ; ImPool<ImGuiTabBar>::Contains
PUBLIC	?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ ; ImPool<ImGuiTabBar>::Add
PUBLIC	?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ	; ImVector<ImGuiPtrOrIndex>::empty
PUBLIC	?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ ; ImVector<ImGuiPtrOrIndex>::back
PUBLIC	?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z ; ImVector<ImGuiPtrOrIndex>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z ; ImVector<ImGuiPtrOrIndex>::reserve
PUBLIC	?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z ; ImVector<ImGuiPtrOrIndex>::push_back
PUBLIC	?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ ; ImVector<ImGuiPtrOrIndex>::pop_back
PUBLIC	??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z ; ImVector<ImGuiShrinkWidthItem>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z ; ImVector<ImGuiShrinkWidthItem>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z ; ImVector<ImGuiShrinkWidthItem>::resize
PUBLIC	?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z ; ImVector<ImGuiShrinkWidthItem>::reserve
PUBLIC	?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ		; ImGuiWindow::Rect
PUBLIC	?CalcFontSize@ImGuiWindow@@QEBAMXZ		; ImGuiWindow::CalcFontSize
PUBLIC	?TitleBarHeight@ImGuiWindow@@QEBAMXZ		; ImGuiWindow::TitleBarHeight
PUBLIC	?MenuBarHeight@ImGuiWindow@@QEBAMXZ		; ImGuiWindow::MenuBarHeight
PUBLIC	?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ	; ImGuiWindow::MenuBarRect
PUBLIC	??0ImGuiLastItemDataBackup@@QEAA@XZ		; ImGuiLastItemDataBackup::ImGuiLastItemDataBackup
PUBLIC	?Backup@ImGuiLastItemDataBackup@@QEAAXXZ	; ImGuiLastItemDataBackup::Backup
PUBLIC	?Restore@ImGuiLastItemDataBackup@@QEBAXXZ	; ImGuiLastItemDataBackup::Restore
PUBLIC	??0ImGuiTabItem@@QEAA@XZ			; ImGuiTabItem::ImGuiTabItem
PUBLIC	??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ		; ImVector<ImGuiTabItem>::ImVector<ImGuiTabItem>
PUBLIC	??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ		; ImVector<ImGuiTabItem>::~ImVector<ImGuiTabItem>
PUBLIC	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
PUBLIC	?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ ; ImVector<ImGuiTabItem>::back
PUBLIC	?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z ; ImVector<ImGuiTabItem>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z	; ImVector<ImGuiTabItem>::resize
PUBLIC	?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z	; ImVector<ImGuiTabItem>::reserve
PUBLIC	?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z ; ImVector<ImGuiTabItem>::push_back
PUBLIC	?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z ; ImVector<ImGuiTabItem>::erase
PUBLIC	?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z ; ImVector<ImGuiTabItem>::index_from_ptr
PUBLIC	??0ImGuiTabBar@@QEAA@XZ				; ImGuiTabBar::ImGuiTabBar
PUBLIC	?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabOrder
PUBLIC	?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabName
PUBLIC	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ	; ImGui::GetCurrentWindow
PUBLIC	?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z ; ImGui::ShrinkWidths
PUBLIC	?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z ; ImGui::BeginViewportSideBar
PUBLIC	?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z	; ImGui::BeginComboPopup
PUBLIC	?BeginComboPreview@ImGui@@YA_NXZ		; ImGui::BeginComboPreview
PUBLIC	?EndComboPreview@ImGui@@YAXXZ			; ImGui::EndComboPreview
PUBLIC	?IsKeyPressedMap@ImGui@@YA_NH_N@Z		; ImGui::IsKeyPressedMap
PUBLIC	?IsNavInputDown@ImGui@@YA_NH@Z			; ImGui::IsNavInputDown
PUBLIC	?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z ; ImGui::IsNavInputTest
PUBLIC	?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z ; ImGui::BeginTabBarEx
PUBLIC	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
PUBLIC	?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z	; ImGui::TabBarRemoveTab
PUBLIC	?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z ; ImGui::TabBarCloseTab
PUBLIC	?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z ; ImGui::TabBarQueueReorder
PUBLIC	?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z ; ImGui::TabBarQueueReorderFromMousePos
PUBLIC	?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z ; ImGui::TabBarProcessReorder
PUBLIC	?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z ; ImGui::TabItemEx
PUBLIC	?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z	; ImGui::TabItemCalcSize
PUBLIC	?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z ; ImGui::TabItemBackground
PUBLIC	?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z ; ImGui::TabItemLabelAndCloseButton
PUBLIC	?TextEx@ImGui@@YAXPEBD0H@Z			; ImGui::TextEx
PUBLIC	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z	; ImGui::ButtonEx
PUBLIC	?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z		; ImGui::CloseButton
PUBLIC	?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z	; ImGui::CollapseButton
PUBLIC	?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z	; ImGui::ArrowButtonEx
PUBLIC	?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z		; ImGui::Scrollbar
PUBLIC	?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z ; ImGui::ScrollbarEx
PUBLIC	?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z ; ImGui::ImageButtonEx
PUBLIC	?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z ; ImGui::GetWindowScrollbarRect
PUBLIC	?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z ; ImGui::GetWindowScrollbarID
PUBLIC	?SeparatorEx@ImGui@@YAXH@Z			; ImGui::SeparatorEx
PUBLIC	?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z		; ImGui::CheckboxFlags
PUBLIC	?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z		; ImGui::CheckboxFlags
PUBLIC	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
PUBLIC	?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z	; ImGui::DragBehavior
PUBLIC	?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z ; ImGui::SliderBehavior
PUBLIC	?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z ; ImGui::SplitterBehavior
PUBLIC	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z		; ImGui::TreeNodeBehavior
PUBLIC	?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z		; ImGui::TreeNodeBehaviorIsOpen
PUBLIC	?TreePushOverrideID@ImGui@@YAXI@Z		; ImGui::TreePushOverrideID
PUBLIC	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
PUBLIC	?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ; ImGui::DataTypeFormatString
PUBLIC	?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z	; ImGui::DataTypeApplyOp
PUBLIC	?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z ; ImGui::DataTypeApplyOpFromText
PUBLIC	?DataTypeCompare@ImGui@@YAHHPEBX0@Z		; ImGui::DataTypeCompare
PUBLIC	?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z		; ImGui::DataTypeClamp
PUBLIC	?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextEx
PUBLIC	?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z ; ImGui::TempInputText
PUBLIC	?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z ; ImGui::TempInputScalar
PUBLIC	?TempInputIsActive@ImGui@@YA_NI@Z		; ImGui::TempInputIsActive
PUBLIC	?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z ; ImGui::GetInputTextState
PUBLIC	?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z		; ImGui::ColorTooltip
PUBLIC	?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z	; ImGui::ColorEditOptionsPopup
PUBLIC	?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z	; ImGui::ColorPickerOptionsPopup
PUBLIC	?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z ; ImGui::PlotEx
PUBLIC	??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z	; ImGui::CheckboxFlagsT<int>
PUBLIC	??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z	; ImGui::CheckboxFlagsT<unsigned int>
PUBLIC	??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z	; ImGui::CheckboxFlagsT<__int64>
PUBLIC	??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z	; ImGui::CheckboxFlagsT<unsigned __int64>
PUBLIC	??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z	; ImGui::DragBehaviorT<int,int,float>
PUBLIC	??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z	; ImGui::DragBehaviorT<unsigned int,int,float>
PUBLIC	??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z ; ImGui::DragBehaviorT<__int64,__int64,double>
PUBLIC	??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z ; ImGui::DragBehaviorT<unsigned __int64,__int64,double>
PUBLIC	??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z	; ImGui::DragBehaviorT<float,float,float>
PUBLIC	??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z	; ImGui::DragBehaviorT<double,double,double>
PUBLIC	??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<int,int,float>
PUBLIC	??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<unsigned int,int,float>
PUBLIC	??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<__int64,__int64,double>
PUBLIC	??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>
PUBLIC	??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<float,float,float>
PUBLIC	??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<double,double,double>
PUBLIC	??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z	; ImGuiPlotArrayGetterData::ImGuiPlotArrayGetterData
PUBLIC	??0ImGuiTabBarSection@@QEAA@XZ			; ImGuiTabBarSection::ImGuiTabBarSection
PUBLIC	??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ; ImGui::ScaleRatioFromValueT<int,int,float>
PUBLIC	??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z ; ImGui::ScaleValueFromRatioT<int,int,float>
PUBLIC	??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z	; ImGui::RoundScalarWithFormatT<int,int>
PUBLIC	??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
PUBLIC	??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
PUBLIC	??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z	; ImGui::RoundScalarWithFormatT<unsigned int,int>
PUBLIC	??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
PUBLIC	??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
PUBLIC	??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z ; ImGui::RoundScalarWithFormatT<__int64,__int64>
PUBLIC	??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
PUBLIC	??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
PUBLIC	??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
PUBLIC	??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleRatioFromValueT<float,float,float>
PUBLIC	??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleValueFromRatioT<float,float,float>
PUBLIC	??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z	; ImGui::RoundScalarWithFormatT<float,float>
PUBLIC	??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ; ImGui::ScaleRatioFromValueT<double,double,double>
PUBLIC	??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z ; ImGui::ScaleValueFromRatioT<double,double,double>
PUBLIC	??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z	; ImGui::RoundScalarWithFormatT<double,double>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1BC@IIGHOJGM@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1@ ; `string'
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1HM@PJKJLKEH@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAN?$AAa?$AAm?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	?__LINE__Var@?0??TextEx@ImGui@@YAXPEBD0H@Z@4JA	; `ImGui::TextEx'::`1'::__LINE__Var
PUBLIC	??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1BE@HMGDGFIB@?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z@4JA ; `ImGui::ButtonBehavior'::`1'::__LINE__Var
PUBLIC	??_C@_1HG@LHACLJHI@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5?$AA?$DO?$AA?$DN@ ; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN@				; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL@				; `string'
PUBLIC	?__LINE__Var@?0??InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z@4JA ; `ImGui::InvisibleButton'::`1'::__LINE__Var
PUBLIC	??_C@_1FC@KJEAANOI@?$AAs?$AAi?$AAz?$AAe?$AA_?$AAa?$AAr?$AAg?$AA?4?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_08ENAFOMOP@?$CDSCROLLX@			; `string'
PUBLIC	??_C@_08FEBONNKO@?$CDSCROLLY@			; `string'
PUBLIC	?__LINE__Var@?0??GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z@4JA ; `ImGui::GetWindowScrollbarRect'::`1'::__LINE__Var
PUBLIC	??_C@_1CM@GFPJIOBE@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAb?$AAa?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z@4JA ; `ImGui::ScrollbarEx'::`1'::__LINE__Var
PUBLIC	??_C@_1FI@OFJDJLOI@?$AAI?$AAm?$AAM?$AAa?$AAx?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt@ ; `string'
PUBLIC	??_C@_06EBHDMMP@?$CDimage@			; `string'
PUBLIC	??_C@_03JDMNMOAD@?$FL?$HO?$FN@			; `string'
PUBLIC	??_C@_03JHEALCLB@?$FLx?$FN@			; `string'
PUBLIC	??_C@_03PFOPMNLJ@?$FL?5?$FN@			; `string'
PUBLIC	??_C@_03KFJJABDB@?$CIx?$CJ@			; `string'
PUBLIC	??_C@_03MHDGHODJ@?$CI?5?$CJ@			; `string'
PUBLIC	??_C@_06KLKJBGEJ@?$CF?40f?$CF?$CF@		; `string'
PUBLIC	?__LINE__Var@?0??SeparatorEx@ImGui@@YAXH@Z@4JA	; `ImGui::SeparatorEx'::`1'::__LINE__Var
PUBLIC	??_C@_1LA@FPPCKOP@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	??_C@_02LLHJFGPH@?5?$HM@			; `string'
PUBLIC	??_C@_0CC@IODDEFBI@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ ; `string'
PUBLIC	?__LINE__Var@?0??SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z@4JA ; `ImGui::SplitterBehavior'::`1'::__LINE__Var
PUBLIC	??_C@_1EE@HJGLFFIG@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA1?$AA?5?$AA?$CL?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_1EE@LBEKBPGJ@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA2?$AA?5?$AA?9?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@ ; `string'
PUBLIC	?__LINE__Var@?0??BeginCombo@ImGui@@YA_NPEBD0H@Z@4JA ; `ImGui::BeginCombo'::`1'::__LINE__Var
PUBLIC	??_C@_1BAK@ONBANIIG@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@ ; `string'
PUBLIC	??_C@_0N@LNBMNBNO@?$CD?$CDComboPopup@		; `string'
PUBLIC	??_C@_1FI@HOFLGIJG@?$AAp?$AAr?$AAe?$AAv?$AAi?$AAe?$AAw?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN@ ; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN@				; `string'
PUBLIC	??_C@_01HCONENDN@?$HL@				; `string'
PUBLIC	?__LINE__Var@?0??BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z@4JA ; `ImGui::BeginComboPopup'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@IOEAHNLK@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	??_C@_0N@JOGGDHMO@?$CD?$CDCombo_?$CF02d@	; `string'
PUBLIC	?__LINE__Var@?0??BeginComboPreview@ImGui@@YA_NXZ@4JA ; `ImGui::BeginComboPreview'::`1'::__LINE__Var
PUBLIC	??_C@_1BAK@KIIFLADI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAL?$AAa?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_0P@HFPOEILF@?$CKUnknown?5item?$CK@	; `string'
PUBLIC	??_C@_09JKJEEIJP@?$CF?4?$CKs?$CF?$CFd?$CFs@	; `string'
PUBLIC	?__LINE__Var@?0??DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z@4JA ; `ImGui::DataTypeGetInfo'::`1'::__LINE__Var
PUBLIC	??_C@_1GE@PMGCKKHF@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z@4JA ; `ImGui::DataTypeFormatString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z@4JA ; `ImGui::DataTypeApplyOp'::`1'::__LINE__Var
PUBLIC	??_C@_1CO@LEDHMGOL@?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?$CL?$AA?8?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AAp@ ; `string'
PUBLIC	?__LINE__Var@?0??DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z@4JA ; `ImGui::DataTypeApplyOpFromText'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DataTypeCompare@ImGui@@YAHHPEBX0@Z@4JA ; `ImGui::DataTypeCompare'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z@4JA ; `ImGui::DataTypeClamp'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SanitizeFormatString@@YAXPEBDPEAD_K@Z@4JA ; `SanitizeFormatString'::`1'::__LINE__Var
PUBLIC	??_C@_1FG@FPDFFFKE@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAf?$AAm?$AAt?$AA_?$AAe?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?0??DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z@4JA ; `ImGui::DragBehavior'::`1'::__LINE__Var
PUBLIC	??_C@_0JN@LHPDPGJG@Invalid?5ImGuiSliderFlags?5flags?$CB@ ; `string'
PUBLIC	??_C@_1BLO@GENGLDPL@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_05DMFAOFEI@?$CD?$CDmin@			; `string'
PUBLIC	??_C@_05CONLABCH@?$CD?$CDmax@			; `string'
PUBLIC	?__LINE__Var@?0??DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z@4JA ; `ImGui::DragScalar'::`1'::__LINE__Var
PUBLIC	??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@ ; `string'
PUBLIC	??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_1DC@IAANKGPJ@?$AAp?$AA_?$AAm?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@ ; `string'
PUBLIC	?__LINE__Var@?0??DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z@4JA ; `ImGui::DragScalarN'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA ; `ImGui::SliderBehavior'::`1'::__LINE__Var
PUBLIC	??_C@_0JN@OMBPOBCE@Invalid?5ImGuiSliderFlags?5flag?$CB?5@ ; `string'
PUBLIC	??_C@_1BLO@DBPGJKEK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ ; `string'
PUBLIC	??_C@_1KC@MGDFLCCP@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA3?$AA2?$AA?$CK?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1EO@DMFGPFFK@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA3?$AA2?$AA?$CK?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1KC@IBFLFJE@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA6?$AA4?$AA?$CK?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1EO@JNOADGHA@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA6?$AA4?$AA?$CK?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1MI@EKJKCIKJ@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$CK?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1OI@EDKIIBCG@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAd?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$CK@ ; `string'
PUBLIC	??_C@_08FKIHKODH@?$CF?40f?5deg@			; `string'
PUBLIC	?__LINE__Var@?0??SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z@4JA ; `ImGui::SliderScalar'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z@4JA ; `ImGui::SliderScalarN'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z@4JA ; `ImGui::TempInputText'::`1'::__LINE__Var
PUBLIC	??_C@_1CC@LLIJAMKA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL@				; `string'
PUBLIC	??_C@_04JIMNDDED@?$CF08X@			; `string'
PUBLIC	?__LINE__Var@?0??InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA ; `ImGui::InputText'::`1'::__LINE__Var
PUBLIC	??_C@_1FC@IFNBIILP@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA ; `ImGui::InputTextWithHint'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z@4JA ; `ImStb::STB_TEXTEDIT_INSERTCHARS'::`1'::__LINE__Var
PUBLIC	??_C@_1CA@MNHDBBDP@?$AAp?$AAo?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1DG@IEAPMEMO@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AA?9@ ; `string'
PUBLIC	?__LINE__Var@?0??stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@2@@Z@4JA ; `ImStb::stb_textedit_discard_redo'::`1'::__LINE__Var
PUBLIC	??_C@_1GO@MBLIEGNC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1HI@OHEJKGLD@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@ ; `string'
PUBLIC	??_C@_1JE@JEJNCKKO@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@ ; `string'
PUBLIC	?__LINE__Var@?0??stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@2@PEBGH@Z@4JA ; `ImStb::stb_textedit_replace'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z@4JA ; `ImGuiInputTextCallbackData::DeleteChars'::`1'::__LINE__Var
PUBLIC	??_C@_1EA@OOMMGKHM@?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAc?$AAo?$AAu@ ; `string'
PUBLIC	?__LINE__Var@?0??InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z@4JA ; `ImGuiInputTextCallbackData::InsertChars'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@EFFMAEBL@?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5@ ; `string'
PUBLIC	??_C@_1DM@LDGOBGNL@?$AAB?$AAu?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?0??InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z@4JA ; `InputTextFilterCharacter'::`1'::__LINE__Var
PUBLIC	??_C@_1LA@GNNDJIHJ@?$AAi?$AAn?$AAp?$AAu?$AAt?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA ; `ImGui::InputTextEx'::`1'::__LINE__Var
PUBLIC	??_C@_1DE@KCJLPEOI@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AAu?$AAf@ ; `string'
PUBLIC	??_C@_1LI@BDNHGOFF@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@ ; `string'
PUBLIC	??_C@_1MG@MGOPIKJM@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@ ; `string'
PUBLIC	??_C@_1BM@CBGPMFEC@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1DC@CMKEKNGP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@ ; `string'
PUBLIC	??_C@_1NI@EFFIGGBI@?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo?$AAr?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_0EH@IKLAPCIG@Mismatching?5io?4KeyCtrl?1io?4KeySh@ ; `string'
PUBLIC	??_C@_1OC@MAFKNLH@?$AAi?$AAo?$AA?4?$AAK?$AAe?$AAy?$AAM?$AAo?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG@ ; `string'
PUBLIC	??_C@_1EO@GEAEFBFI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@ ; `string'
PUBLIC	??_C@_1FK@GDPCIOA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@ ; `string'
PUBLIC	??_C@_1DK@HOPDKFNI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAF@ ; `string'
PUBLIC	??_C@_1HG@EHLBBEIB@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@ ; `string'
PUBLIC	??_C@_1DG@CHDFECEK@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@ ; `string'
PUBLIC	??_C@_1EE@MOOHJKEO@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@ ; `string'
PUBLIC	?__LINE__Var@?0??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4JA ; `ImGui::ColorEdit4'::`1'::__LINE__Var
PUBLIC	??_C@_1HC@IFIJNDDD@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	??_C@_1GO@CDHIBPHM@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	??_C@_07FFNLLALM@M?30?4000@			; `string'
PUBLIC	??_C@_05BNGMMMAL@M?3000@			; `string'
PUBLIC	??_C@_07JKKCBBMM@context@			; `string'
PUBLIC	??_C@_0BC@CKPCOFBK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X@ ; `string'
PUBLIC	??_C@_0O@MBPBDFLP@?$CD?$CF02X?$CF02X?$CF02X@	; `string'
PUBLIC	??_C@_06MNCEJPDI@?$CD?$CDText@			; `string'
PUBLIC	??_C@_0BB@DDMGLOLI@?$CF02X?$CF02X?$CF02X?$CF02X@ ; `string'
PUBLIC	??_C@_0N@KODLFHPJ@?$CF02X?$CF02X?$CF02X@	; `string'
PUBLIC	??_C@_0O@GLNBIEEK@?$CD?$CDColorButton@		; `string'
PUBLIC	??_C@_06MAKAMBBI@picker@			; `string'
PUBLIC	??_C@_08HHEANBBL@?$CD?$CDpicker@		; `string'
PUBLIC	??_C@_06LFKNFKEK@_COL3F@			; `string'
PUBLIC	??_C@_06LAOCEMMP@_COL4F@			; `string'
PUBLIC	?__LINE__Var@?0??ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z@4JA ; `ImGui::ColorPicker4'::`1'::__LINE__Var
PUBLIC	??_C@_1HA@IEGAFBEB@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	??_C@_03PPLPHHG@hsv@				; `string'
PUBLIC	??_C@_02CPGMCOJE@sv@				; `string'
PUBLIC	??_C@_03GKJJMKFG@hue@				; `string'
PUBLIC	??_C@_05IAEKHIAN@alpha@				; `string'
PUBLIC	??_C@_07EDIFFIJI@Current@			; `string'
PUBLIC	??_C@_09CDENILGE@?$CD?$CDcurrent@		; `string'
PUBLIC	??_C@_08DCPBJHAO@Original@			; `string'
PUBLIC	??_C@_0L@IGJKOBOK@?$CD?$CDoriginal@		; `string'
PUBLIC	??_C@_05JCABMAIH@?$CD?$CDrgb@			; `string'
PUBLIC	??_C@_05JICEKLIF@?$CD?$CDhsv@			; `string'
PUBLIC	??_C@_05BOAMFJMJ@?$CD?$CDhex@			; `string'
PUBLIC	??_C@_05PDOBBJNA@Color@				; `string'
PUBLIC	?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA ; `ImGui::SetColorEditOptions'::`1'::__LINE__Var
PUBLIC	??_C@_1HE@ECJOEGME@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	??_C@_09JCCDBEFL@?$CD?$CDpreview@		; `string'
PUBLIC	??_C@_0DF@FAPNKOHO@?$CD?$CF02X?$CF02X?$CF02X?6R?3?5?$CFd?0?5G?3?5?$CFd?0?5B?3?5@ ; `string'
PUBLIC	??_C@_0EC@EBPMGCGK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X?6R?3?$CFd?0?5G?3?$CFd?0?5B@ ; `string'
PUBLIC	??_C@_0BK@HKNBICJE@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f@ ; `string'
PUBLIC	??_C@_0CD@EEDEAEPG@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f?0?5A?3?5?$CF@ ; `string'
PUBLIC	??_C@_03ICFFBAI@RGB@				; `string'
PUBLIC	??_C@_03CAADKAK@HSV@				; `string'
PUBLIC	??_C@_03CJOBKKAE@Hex@				; `string'
PUBLIC	??_C@_06FDBEKFBH@0?4?4255@			; `string'
PUBLIC	??_C@_0L@MDNPBJBM@0?400?4?41?400@		; `string'
PUBLIC	??_C@_09NMCCFHEI@Copy?5as?4?4@			; `string'
PUBLIC	??_C@_04OPMHGHMB@Copy@				; `string'
PUBLIC	??_C@_0BN@GKCJMPCH@?$CI?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?$CJ@ ; `string'
PUBLIC	??_C@_0O@EJHNAHBL@?$CI?$CFd?0?$CFd?0?$CFd?0?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0N@KFBFGFJL@?$CD?$CDselectable@		; `string'
PUBLIC	??_C@_0BE@ENPGBMIC@?$CD?$CDpreviewing_picker@	; `string'
PUBLIC	??_C@_09KEDLMDJL@Alpha?5Bar@			; `string'
PUBLIC	?__LINE__Var@?0??TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z@4JA ; `ImGui::TreeNodeBehavior'::`1'::__LINE__Var
PUBLIC	??_C@_1GM@OMMPBCGC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_03OIJOKPOL@?$CD?$CD?$CD@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_09GHACPMKF@?$CDTreePush@			; `string'
PUBLIC	?__LINE__Var@?0??TreePop@ImGui@@YAXXZ@4JA	; `ImGui::TreePop'::`1'::__LINE__Var
PUBLIC	??_C@_1DC@KOOPJPAL@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAI?$AAD?$AAS?$AAt?$AAa?$AAc?$AAk@ ; `string'
PUBLIC	??_C@_06KIIKKNMI@?$CDCLOSE@			; `string'
PUBLIC	?__LINE__Var@?0??EndListBox@ImGui@@YAXXZ@4JA	; `ImGui::EndListBox'::`1'::__LINE__Var
PUBLIC	??_C@_0FJ@FLEOOEOG@Mismatched?5BeginListBox?1EndList@ ; `string'
PUBLIC	??_C@_1BBK@DDPDAAPA@?$AA?$CI?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z@4JA ; `ImGui::PlotEx'::`1'::__LINE__Var
PUBLIC	??_C@_1EG@HCGMCBDC@?$AAv?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAv@ ; `string'
PUBLIC	??_C@_0BE@OBCBLNMM@?$CFd?3?5?$CF8?44g?6?$CFd?3?5?$CF8?44g@ ; `string'
PUBLIC	??_C@_09OADNPGHP@?$CFd?3?5?$CF8?44g@		; `string'
PUBLIC	??_C@_1EK@JIGPMMPH@?$AAv?$AA1?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_05LAPONLG@false@				; `string'
PUBLIC	??_C@_06DJHOIPC@?$CFs?3?5?$CFs@			; `string'
PUBLIC	??_C@_06GBEGMGE@?$CFs?3?5?$CFd@			; `string'
PUBLIC	??_C@_07EKEPIENH@?$CF?$CFs?3?5?$CFs@		; `string'
PUBLIC	??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f@		; `string'
PUBLIC	?__LINE__Var@?0??Update@ImGuiMenuColumns@@QEAAXHM_N@Z@4JA ; `ImGuiMenuColumns::Update'::`1'::__LINE__Var
PUBLIC	??_C@_1FO@NFEGNMHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@ ; `string'
PUBLIC	?__LINE__Var@?0??BeginMenuBar@ImGui@@YA_NXZ@4JA	; `ImGui::BeginMenuBar'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@MIADNLCN@?$AA?$CB?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_09FHPMMDGK@?$CD?$CDmenubar@		; `string'
PUBLIC	?__LINE__Var@?0??EndMenuBar@ImGui@@YAXXZ@4JA	; `ImGui::EndMenuBar'::`1'::__LINE__Var
PUBLIC	??_C@_1GE@MKPILOEH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAN?$AAa?$AAv?$AAL@ ; `string'
PUBLIC	??_C@_1FC@MMAFNJJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_1DI@HJHPMKIH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn?$AAu@ ; `string'
PUBLIC	?__LINE__Var@?0??BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z@4JA ; `ImGui::BeginViewportSideBar'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@MCAEPPML@?$AAd?$AAi?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAD?$AAi?$AAr@ ; `string'
PUBLIC	??_C@_0O@BKOLOJFE@?$CD?$CDMainMenuBar@		; `string'
PUBLIC	?__LINE__Var@?0??EndTabBar@ImGui@@YAXXZ@4JA	; `ImGui::EndTabBar'::`1'::__LINE__Var
PUBLIC	??_C@_0CG@DPIPLNLI@Mismatched?5BeginTabBar?$CI?$CJ?1EndTab@ ; `string'
PUBLIC	??_C@_1HE@HMPOLDED@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z@4JA ; `ImGui::TabBarLayout'::`1'::__LINE__Var
PUBLIC	??_C@_1GG@ODBMJKON@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AAV@ ; `string'
PUBLIC	??_C@_1DC@IMDNAHCI@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?0??TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z@4JA ; `ImGui::TabBarCloseTab'::`1'::__LINE__Var
PUBLIC	??_C@_1FC@JMLJLLDN@?$AA?$CB?$AA?$CI?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z@4JA ; `ImGui::TabBarQueueReorder'::`1'::__LINE__Var
PUBLIC	??_C@_1BI@DOPCJBFN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1EE@NGAACFPK@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAR?$AAe?$AAo?$AAr?$AAd?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z@4JA ; `ImGui::TabBarQueueReorderFromMousePos'::`1'::__LINE__Var
PUBLIC	??_C@_03CFMEKBHF@?$CD?$CD?$DM@			; `string'
PUBLIC	??_C@_03BHPCMDPH@?$CD?$CD?$DO@			; `string'
PUBLIC	??_C@_03CPFCAGPK@?$CD?$CDv@			; `string'
PUBLIC	?__LINE__Var@?0??BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z@4JA ; `ImGui::BeginTabItem'::`1'::__LINE__Var
PUBLIC	??_C@_0DK@EHILAJFJ@Needs?5to?5be?5called?5between?5Begi@ ; `string'
PUBLIC	??_C@_1JC@EEMJDIKN@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN@ ; `string'
PUBLIC	??_C@_1EI@NKMOAMGI@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??EndTabItem@ImGui@@YAXXZ@4JA	; `ImGui::EndTabItem'::`1'::__LINE__Var
PUBLIC	??_C@_1JM@OHPMLLD@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	??_C@_1DK@HGEILAOB@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAT?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?0??TabItemButton@ImGui@@YA_NPEBDH@Z@4JA ; `ImGui::TabItemButton'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z@4JA ; `ImGui::TabItemEx'::`1'::__LINE__Var
PUBLIC	??_C@_1FO@JEBFCDGI@?$AA?$CB?$AAp?$AA_?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CB?$AA?$CI?$AAf?$AAl@ ; `string'
PUBLIC	??_C@_1PO@BEHLBGBB@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@ ; `string'
PUBLIC	??_C@_04EBNJJJJI@?$CF?4?$CKs@			; `string'
PUBLIC	??_C@_1JA@BHHCJLLE@?$AA?$CB?$AAi?$AAs?$AA_?$AAt?$AAa?$AAb?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z@4JA ; `ImGui::TabItemBackground'::`1'::__LINE__Var
PUBLIC	??_C@_1BK@HMBBPDPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf@ ; `string'
PUBLIC	??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@ ; `string'
PUBLIC	??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@00800000
PUBLIC	__real@358637bd
PUBLIC	__real@3727c5ac
PUBLIC	__real@38d1b717
PUBLIC	__real@3b808081
PUBLIC	__real@3c23d70a
PUBLIC	__real@3cdd2f1b
PUBLIC	__real@3da3d70a
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e09374c
PUBLIC	__real@3e19999a
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb0c6f7a0000000
PUBLIC	__real@3ecccccd
PUBLIC	__real@3f000000
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f19999a
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f350481
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f5db22d
PUBLIC	__real@3f5db3d0
PUBLIC	__real@3f7ff972
PUBLIC	__real@3f800000
PUBLIC	__real@3f99999a
PUBLIC	__real@3fb33333
PUBLIC	__real@3fc00000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@4024000000000000
PUBLIC	__real@403f5c29
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@4059000000000000
PUBLIC	__real@40666666
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e80000
PUBLIC	__real@41000000
PUBLIC	__real@41200000
PUBLIC	__real@41400000
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@428c0000
PUBLIC	__real@42c80000
PUBLIC	__real@437f0000
PUBLIC	__real@43b40000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@47efffffe0000000
PUBLIC	__real@5f000000
PUBLIC	__real@7effffff
PUBLIC	__real@7f7fffff
PUBLIC	__real@7fdfffffffffffff
PUBLIC	__real@7fefffffffffffff
PUBLIC	__real@be800000
PUBLIC	__real@be99999a
PUBLIC	__real@bf000000
PUBLIC	__real@bf400000
PUBLIC	__real@bf5db3d0
PUBLIC	__real@bf800000
PUBLIC	__real@bfe0000000000000
PUBLIC	__real@c059000000000000
PUBLIC	__real@c2c80000
PUBLIC	__real@feffffff
PUBLIC	__real@ff7fffff
PUBLIC	__real@ffdfffffffffffff
PUBLIC	__real@ffefffffffffffff
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__imp__wassert:PROC
EXTRN	?Begin@ImGui@@YA_NPEBDPEA_NH@Z:PROC		; ImGui::Begin
EXTRN	?End@ImGui@@YAXXZ:PROC				; ImGui::End
EXTRN	?EndChild@ImGui@@YAXXZ:PROC			; ImGui::EndChild
EXTRN	?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z:PROC ; ImGui::SetNextWindowPos
EXTRN	?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z:PROC ; ImGui::SetNextWindowSize
EXTRN	?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z:PROC ; ImGui::SetNextWindowSizeConstraints
EXTRN	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetContentRegionAvail
EXTRN	?GetScrollMaxY@ImGui@@YAMXZ:PROC		; ImGui::GetScrollMaxY
EXTRN	?PushFont@ImGui@@YAXPEAUImFont@@@Z:PROC		; ImGui::PushFont
EXTRN	?PopFont@ImGui@@YAXXZ:PROC			; ImGui::PopFont
EXTRN	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z:PROC	; ImGui::PushStyleColor
EXTRN	?PopStyleColor@ImGui@@YAXH@Z:PROC		; ImGui::PopStyleColor
EXTRN	?PushStyleVar@ImGui@@YAXHM@Z:PROC		; ImGui::PushStyleVar
EXTRN	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z:PROC	; ImGui::PushStyleVar
EXTRN	?PopStyleVar@ImGui@@YAXH@Z:PROC			; ImGui::PopStyleVar
EXTRN	?PushItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::PushItemWidth
EXTRN	?PopItemWidth@ImGui@@YAXXZ:PROC			; ImGui::PopItemWidth
EXTRN	?SetNextItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::SetNextItemWidth
EXTRN	?CalcItemWidth@ImGui@@YAMXZ:PROC		; ImGui::CalcItemWidth
EXTRN	?PushTextWrapPos@ImGui@@YAXM@Z:PROC		; ImGui::PushTextWrapPos
EXTRN	?PopTextWrapPos@ImGui@@YAXXZ:PROC		; ImGui::PopTextWrapPos
EXTRN	?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetFontTexUvWhitePixel
EXTRN	?GetColorU32@ImGui@@YAIHM@Z:PROC		; ImGui::GetColorU32
EXTRN	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z:PROC	; ImGui::GetColorU32
EXTRN	?SameLine@ImGui@@YAXMM@Z:PROC			; ImGui::SameLine
EXTRN	?Indent@ImGui@@YAXM@Z:PROC			; ImGui::Indent
EXTRN	?Unindent@ImGui@@YAXM@Z:PROC			; ImGui::Unindent
EXTRN	?BeginGroup@ImGui@@YAXXZ:PROC			; ImGui::BeginGroup
EXTRN	?EndGroup@ImGui@@YAXXZ:PROC			; ImGui::EndGroup
EXTRN	?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorScreenPos
EXTRN	?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z:PROC ; ImGui::SetCursorScreenPos
EXTRN	?GetTextLineHeight@ImGui@@YAMXZ:PROC		; ImGui::GetTextLineHeight
EXTRN	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetTextLineHeightWithSpacing
EXTRN	?GetFrameHeight@ImGui@@YAMXZ:PROC		; ImGui::GetFrameHeight
EXTRN	?PushID@ImGui@@YAXPEBD@Z:PROC			; ImGui::PushID
EXTRN	?PushID@ImGui@@YAXPEBX@Z:PROC			; ImGui::PushID
EXTRN	?PushID@ImGui@@YAXH@Z:PROC			; ImGui::PushID
EXTRN	?PopID@ImGui@@YAXXZ:PROC			; ImGui::PopID
EXTRN	?GetID@ImGui@@YAIPEBD@Z:PROC			; ImGui::GetID
EXTRN	?EndTooltip@ImGui@@YAXXZ:PROC			; ImGui::EndTooltip
EXTRN	?SetTooltip@ImGui@@YAXPEBDZZ:PROC		; ImGui::SetTooltip
EXTRN	?BeginPopup@ImGui@@YA_NPEBDH@Z:PROC		; ImGui::BeginPopup
EXTRN	?EndPopup@ImGui@@YAXXZ:PROC			; ImGui::EndPopup
EXTRN	?OpenPopup@ImGui@@YAXPEBDH@Z:PROC		; ImGui::OpenPopup
EXTRN	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z:PROC	; ImGui::OpenPopupOnItemClick
EXTRN	?CloseCurrentPopup@ImGui@@YAXXZ:PROC		; ImGui::CloseCurrentPopup
EXTRN	?LogText@ImGui@@YAXPEBDZZ:PROC			; ImGui::LogText
EXTRN	?BeginDragDropSource@ImGui@@YA_NH@Z:PROC	; ImGui::BeginDragDropSource
EXTRN	?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z:PROC ; ImGui::SetDragDropPayload
EXTRN	?EndDragDropSource@ImGui@@YAXXZ:PROC		; ImGui::EndDragDropSource
EXTRN	?BeginDragDropTarget@ImGui@@YA_NXZ:PROC		; ImGui::BeginDragDropTarget
EXTRN	?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z:PROC ; ImGui::AcceptDragDropPayload
EXTRN	?EndDragDropTarget@ImGui@@YAXXZ:PROC		; ImGui::EndDragDropTarget
EXTRN	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z:PROC	; ImGui::PushClipRect
EXTRN	?PopClipRect@ImGui@@YAXXZ:PROC			; ImGui::PopClipRect
EXTRN	?SetItemDefaultFocus@ImGui@@YAXXZ:PROC		; ImGui::SetItemDefaultFocus
EXTRN	?IsItemHovered@ImGui@@YA_NH@Z:PROC		; ImGui::IsItemHovered
EXTRN	?IsItemActive@ImGui@@YA_NXZ:PROC		; ImGui::IsItemActive
EXTRN	?SetItemAllowOverlap@ImGui@@YAXXZ:PROC		; ImGui::SetItemAllowOverlap
EXTRN	?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ:PROC ; ImGui::GetMainViewport
EXTRN	?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z:PROC	; ImGui::IsRectVisible
EXTRN	?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z:PROC ; ImGui::BeginChildFrame
EXTRN	?EndChildFrame@ImGui@@YAXXZ:PROC		; ImGui::EndChildFrame
EXTRN	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z:PROC ; ImGui::CalcTextSize
EXTRN	?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z:PROC ; ImGui::ColorConvertFloat4ToU32
EXTRN	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z:PROC ; ImGui::ColorConvertRGBtoHSV
EXTRN	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z:PROC ; ImGui::ColorConvertHSVtoRGB
EXTRN	?IsKeyPressed@ImGui@@YA_NH_N@Z:PROC		; ImGui::IsKeyPressed
EXTRN	?IsMouseClicked@ImGui@@YA_NH_N@Z:PROC		; ImGui::IsMouseClicked
EXTRN	?IsMouseReleased@ImGui@@YA_NH@Z:PROC		; ImGui::IsMouseReleased
EXTRN	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z:PROC	; ImGui::IsMousePosValid
EXTRN	?IsMouseDragging@ImGui@@YA_NHM@Z:PROC		; ImGui::IsMouseDragging
EXTRN	?SetMouseCursor@ImGui@@YAXH@Z:PROC		; ImGui::SetMouseCursor
EXTRN	?GetClipboardText@ImGui@@YAPEBDXZ:PROC		; ImGui::GetClipboardText
EXTRN	?SetClipboardText@ImGui@@YAXPEBD@Z:PROC		; ImGui::SetClipboardText
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	?append@ImGuiTextBuffer@@QEAAXPEBD0@Z:PROC	; ImGuiTextBuffer::append
EXTRN	?GetInt@ImGuiStorage@@QEBAHIH@Z:PROC		; ImGuiStorage::GetInt
EXTRN	?SetInt@ImGuiStorage@@QEAAXIH@Z:PROC		; ImGuiStorage::SetInt
EXTRN	?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z:PROC	; ImGuiStorage::GetIntRef
EXTRN	??0ImGuiListClipper@@QEAA@XZ:PROC		; ImGuiListClipper::ImGuiListClipper
EXTRN	??1ImGuiListClipper@@QEAA@XZ:PROC		; ImGuiListClipper::~ImGuiListClipper
EXTRN	?Begin@ImGuiListClipper@@QEAAXHM@Z:PROC		; ImGuiListClipper::Begin
EXTRN	?Step@ImGuiListClipper@@QEAA_NXZ:PROC		; ImGuiListClipper::Step
EXTRN	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z:PROC ; ImDrawList::AddLine
EXTRN	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z:PROC ; ImDrawList::AddRect
EXTRN	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z:PROC ; ImDrawList::AddRectFilled
EXTRN	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z:PROC ; ImDrawList::AddRectFilledMultiColor
EXTRN	?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z:PROC ; ImDrawList::AddTriangle
EXTRN	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z:PROC ; ImDrawList::AddCircle
EXTRN	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z:PROC ; ImDrawList::AddCircleFilled
EXTRN	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z:PROC ; ImDrawList::AddText
EXTRN	?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z:PROC ; ImDrawList::AddPolyline
EXTRN	?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z:PROC ; ImDrawList::AddConvexPolyFilled
EXTRN	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z:PROC ; ImDrawList::AddImage
EXTRN	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z:PROC ; ImDrawList::PathArcTo
EXTRN	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z:PROC ; ImDrawList::PathArcToFast
EXTRN	?PrimReserve@ImDrawList@@QEAAXHH@Z:PROC		; ImDrawList::PrimReserve
EXTRN	?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ:PROC	; ImDrawList::_TryMergeDrawCmds
EXTRN	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z:PROC ; ImFont::FindGlyph
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	__imp_qsort:PROC
EXTRN	__imp_atof:PROC
EXTRN	?ImHashStr@@YAIPEBD_KI@Z:PROC			; ImHashStr
EXTRN	?ImStrncpy@@YAXPEADPEBD_K@Z:PROC		; ImStrncpy
EXTRN	?ImStrbolW@@YAPEBGPEBG0@Z:PROC			; ImStrbolW
EXTRN	?ImStrTrimBlanks@@YAXPEAD@Z:PROC		; ImStrTrimBlanks
EXTRN	?ImFormatString@@YAHPEAD_KPEBDZZ:PROC		; ImFormatString
EXTRN	?ImFormatStringV@@YAHPEAD_KPEBD0@Z:PROC		; ImFormatStringV
EXTRN	?ImTextStrToUtf8@@YAHPEADHPEBG1@Z:PROC		; ImTextStrToUtf8
EXTRN	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z:PROC	; ImTextCharFromUtf8
EXTRN	?ImTextStrFromUtf8@@YAHPEAGHPEBD1PEAPEBD@Z:PROC	; ImTextStrFromUtf8
EXTRN	?ImTextCountCharsFromUtf8@@YAHPEBD0@Z:PROC	; ImTextCountCharsFromUtf8
EXTRN	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z:PROC	; ImTextCountUtf8BytesFromStr
EXTRN	?ImTriangleContainsPoint@@YA_NAEBUImVec2@@000@Z:PROC ; ImTriangleContainsPoint
EXTRN	?ImTriangleClosestPoint@@YA?AUImVec2@@AEBU1@000@Z:PROC ; ImTriangleClosestPoint
EXTRN	?ImTriangleBarycentricCoords@@YAXAEBUImVec2@@000AEAM11@Z:PROC ; ImTriangleBarycentricCoords
EXTRN	?GetID@ImGuiWindow@@QEAAIPEBD0@Z:PROC		; ImGuiWindow::GetID
EXTRN	?GetID@ImGuiWindow@@QEAAIPEBX@Z:PROC		; ImGuiWindow::GetID
EXTRN	?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBD0@Z:PROC ; ImGuiWindow::GetIDNoKeepAlive
EXTRN	?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z:PROC ; ImGui::FindWindowByName
EXTRN	?CalcWindowNextAutoFitSize@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z:PROC ; ImGui::CalcWindowNextAutoFitSize
EXTRN	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z:PROC	; ImGui::FocusWindow
EXTRN	?FocusTopMostWindowUnderOne@ImGui@@YAXPEAUImGuiWindow@@0@Z:PROC ; ImGui::FocusTopMostWindowUnderOne
EXTRN	?StartMouseMovingWindow@ImGui@@YAXPEAUImGuiWindow@@@Z:PROC ; ImGui::StartMouseMovingWindow
EXTRN	?MarkIniSettingsDirty@ImGui@@YAXXZ:PROC		; ImGui::MarkIniSettingsDirty
EXTRN	?SetScrollY@ImGui@@YAXPEAUImGuiWindow@@M@Z:PROC	; ImGui::SetScrollY
EXTRN	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z:PROC ; ImGui::SetActiveID
EXTRN	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z:PROC	; ImGui::SetFocusID
EXTRN	?ClearActiveID@ImGui@@YAXXZ:PROC		; ImGui::ClearActiveID
EXTRN	?SetHoveredID@ImGui@@YAXI@Z:PROC		; ImGui::SetHoveredID
EXTRN	?KeepAliveID@ImGui@@YAXI@Z:PROC			; ImGui::KeepAliveID
EXTRN	?MarkItemEdited@ImGui@@YAXI@Z:PROC		; ImGui::MarkItemEdited
EXTRN	?PushOverrideID@ImGui@@YAXI@Z:PROC		; ImGui::PushOverrideID
EXTRN	?GetIDWithSeed@ImGui@@YAIPEBD0I@Z:PROC		; ImGui::GetIDWithSeed
EXTRN	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z:PROC	; ImGui::ItemSize
EXTRN	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z:PROC	; ImGui::ItemSize
EXTRN	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z:PROC	; ImGui::ItemAdd
EXTRN	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z:PROC	; ImGui::ItemHoverable
EXTRN	?IsClippedEx@ImGui@@YA_NAEBUImRect@@I_N@Z:PROC	; ImGui::IsClippedEx
EXTRN	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z:PROC	; ImGui::CalcItemSize
EXTRN	?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z:PROC ; ImGui::CalcWrapWidthForPos
EXTRN	?PushMultiItemsWidths@ImGui@@YAXHM@Z:PROC	; ImGui::PushMultiItemsWidths
EXTRN	?PushItemFlag@ImGui@@YAXH_N@Z:PROC		; ImGui::PushItemFlag
EXTRN	?PopItemFlag@ImGui@@YAXXZ:PROC			; ImGui::PopItemFlag
EXTRN	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z:PROC ; ImGui::LogRenderedText
EXTRN	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z:PROC ; ImGui::LogSetNextTextDecoration
EXTRN	?BeginChildEx@ImGui@@YA_NPEBDIAEBUImVec2@@_NH@Z:PROC ; ImGui::BeginChildEx
EXTRN	?OpenPopupEx@ImGui@@YAXIH@Z:PROC		; ImGui::OpenPopupEx
EXTRN	?ClosePopupToLevel@ImGui@@YAXH_N@Z:PROC		; ImGui::ClosePopupToLevel
EXTRN	?IsPopupOpen@ImGui@@YA_NIH@Z:PROC		; ImGui::IsPopupOpen
EXTRN	?BeginPopupEx@ImGui@@YA_NIH@Z:PROC		; ImGui::BeginPopupEx
EXTRN	?BeginTooltipEx@ImGui@@YAXHH@Z:PROC		; ImGui::BeginTooltipEx
EXTRN	?GetPopupAllowedExtentRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@@Z:PROC ; ImGui::GetPopupAllowedExtentRect
EXTRN	?FindBestWindowPosForPopupEx@ImGui@@YA?AUImVec2@@AEBU2@0PEAHAEBUImRect@@2W4ImGuiPopupPositionPolicy@@@Z:PROC ; ImGui::FindBestWindowPosForPopupEx
EXTRN	?NavMoveRequestButNoResultYet@ImGui@@YA_NXZ:PROC ; ImGui::NavMoveRequestButNoResultYet
EXTRN	?NavMoveRequestCancel@ImGui@@YAXXZ:PROC		; ImGui::NavMoveRequestCancel
EXTRN	?GetNavInputAmount@ImGui@@YAMHW4ImGuiInputReadMode@@@Z:PROC ; ImGui::GetNavInputAmount
EXTRN	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z:PROC ; ImGui::GetNavInputAmount2d
EXTRN	?CalcTypematicRepeatAmount@ImGui@@YAHMMMM@Z:PROC ; ImGui::CalcTypematicRepeatAmount
EXTRN	?SetNavID@ImGui@@YAXIW4ImGuiNavLayer@@IAEBUImRect@@@Z:PROC ; ImGui::SetNavID
EXTRN	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z:PROC	; ImGui::IsMouseDragPastThreshold
EXTRN	?GetMergedKeyModFlags@ImGui@@YAHXZ:PROC		; ImGui::GetMergedKeyModFlags
EXTRN	?PushColumnsBackground@ImGui@@YAXXZ:PROC	; ImGui::PushColumnsBackground
EXTRN	?PopColumnsBackground@ImGui@@YAXXZ:PROC		; ImGui::PopColumnsBackground
EXTRN	?TablePushBackgroundChannel@ImGui@@YAXXZ:PROC	; ImGui::TablePushBackgroundChannel
EXTRN	?TablePopBackgroundChannel@ImGui@@YAXXZ:PROC	; ImGui::TablePopBackgroundChannel
EXTRN	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z:PROC	; ImGui::RenderText
EXTRN	?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z:PROC ; ImGui::RenderTextWrapped
EXTRN	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z:PROC ; ImGui::RenderTextClipped
EXTRN	?RenderTextEllipsis@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1MMPEBD2PEBU3@@Z:PROC ; ImGui::RenderTextEllipsis
EXTRN	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z:PROC	; ImGui::RenderFrame
EXTRN	?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z:PROC	; ImGui::RenderFrameBorder
EXTRN	?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z:PROC ; ImGui::RenderColorRectWithAlphaCheckerboard
EXTRN	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z:PROC ; ImGui::RenderNavHighlight
EXTRN	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z:PROC	; ImGui::FindRenderedTextEnd
EXTRN	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z:PROC ; ImGui::RenderArrow
EXTRN	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z:PROC ; ImGui::RenderBullet
EXTRN	?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z:PROC ; ImGui::RenderCheckMark
EXTRN	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z:PROC ; ImGui::RenderArrowPointingAt
EXTRN	?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z:PROC ; ImGui::RenderRectFilledRangeH
EXTRN	?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z:PROC ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	atan2f:PROC
EXTRN	cosf:PROC
EXTRN	fmodf:PROC
EXTRN	log:PROC
EXTRN	logf:PROC
EXTRN	memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memmove:PROC
EXTRN	pow:PROC
EXTRN	powf:PROC
EXTRN	sinf:PROC
EXTRN	?GImGui@@3PEAUImGuiContext@@EA:QWORD		; GImGui
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+172
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0ImVec2@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AImVec2@@QEBAM_K@Z DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$??AImVec2@@QEBAM_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??AImVec2@@QEAAAEAM_K@Z DD imagerel $LN4
	DD	imagerel $LN4+85
	DD	imagerel $unwind$??AImVec2@@QEAAAEAM_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0ImVec4@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??0ImVec4@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Separator@ImGui@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+141
	DD	imagerel $unwind$?Separator@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NewLine@ImGui@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+217
	DD	imagerel $unwind$?NewLine@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Spacing@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$?Spacing@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Dummy@ImGui@@YAXAEBUImVec2@@@Z DD imagerel $LN4
	DD	imagerel $LN4+235
	DD	imagerel $unwind$?Dummy@ImGui@@YAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AlignTextToFramePadding@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+186
	DD	imagerel $unwind$?AlignTextToFramePadding@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextUnformatted@ImGui@@YAXPEBD0@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?TextUnformatted@ImGui@@YAXPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Text@ImGui@@YAXPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$?Text@ImGui@@YAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextV@ImGui@@YAXPEBDPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+166
	DD	imagerel $unwind$?TextV@ImGui@@YAXPEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+281
	DD	imagerel $unwind$?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextDisabled@ImGui@@YAXPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$?TextDisabled@ImGui@@YAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextDisabledV@ImGui@@YAXPEBDPEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+304
	DD	imagerel $unwind$?TextDisabledV@ImGui@@YAXPEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextWrapped@ImGui@@YAXPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$?TextWrapped@ImGui@@YAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextWrappedV@ImGui@@YAXPEBDPEAD@Z DD imagerel $LN11
	DD	imagerel $LN11+347
	DD	imagerel $unwind$?TextWrappedV@ImGui@@YAXPEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LabelText@ImGui@@YAXPEBD0ZZ DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$?LabelText@ImGui@@YAXPEBD0ZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LabelTextV@ImGui@@YAXPEBD0PEAD@Z DD imagerel $LN8
	DD	imagerel $LN8+937
	DD	imagerel $unwind$?LabelTextV@ImGui@@YAXPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BulletText@ImGui@@YAXPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+164
	DD	imagerel $unwind$?BulletText@ImGui@@YAXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BulletTextV@ImGui@@YAXPEBDPEAD@Z DD imagerel $LN7
	DD	imagerel $LN7+819
	DD	imagerel $unwind$?BulletTextV@ImGui@@YAXPEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SmallButton@ImGui@@YA_NPEBD@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?SmallButton@ImGui@@YA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z DD imagerel $LN8
	DD	imagerel $LN8+437
	DD	imagerel $unwind$?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ArrowButton@ImGui@@YA_NPEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+101
	DD	imagerel $unwind$?ArrowButton@ImGui@@YA_NPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z DD imagerel $LN8
	DD	imagerel $LN8+752
	DD	imagerel $unwind$?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z DD imagerel $LN6
	DD	imagerel $LN6+405
	DD	imagerel $unwind$?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Checkbox@ImGui@@YA_NPEBDPEA_N@Z DD imagerel $LN25
	DD	imagerel $LN25+1678
	DD	imagerel $unwind$?Checkbox@ImGui@@YA_NPEBDPEA_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RadioButton@ImGui@@YA_NPEBD_N@Z DD imagerel $LN18
	DD	imagerel $LN18+1583
	DD	imagerel $unwind$?RadioButton@ImGui@@YA_NPEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RadioButton@ImGui@@YA_NPEBDPEAHH@Z DD imagerel $LN6
	DD	imagerel $LN6+133
	DD	imagerel $unwind$?RadioButton@ImGui@@YA_NPEBDPEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+1082
	DD	imagerel $unwind$?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Bullet@ImGui@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+625
	DD	imagerel $unwind$?Bullet@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginCombo@ImGui@@YA_NPEBD0H@Z DD imagerel $LN31
	DD	imagerel $LN31+2189
	DD	imagerel $unwind$?BeginCombo@ImGui@@YA_NPEBD0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndCombo@ImGui@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$?EndCombo@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Combo@ImGui@@YA_NPEBDPEAH0H@Z DD imagerel $LN6
	DD	imagerel $LN6+221
	DD	imagerel $unwind$?Combo@ImGui@@YA_NPEBDPEAH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DD imagerel $LN15
	DD	imagerel $LN15+678
	DD	imagerel $unwind$?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z DD imagerel $LN18
	DD	imagerel $LN18+972
	DD	imagerel $unwind$?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z DD imagerel $LN18
	DD	imagerel $LN18+791
	DD	imagerel $unwind$?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z DD imagerel $LN48
	DD	imagerel $LN48+2173
	DD	imagerel $unwind$?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z DD imagerel $LN9
	DD	imagerel $LN9+484
	DD	imagerel $unwind$?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z DD imagerel $LN4
	DD	imagerel $LN4+284
	DD	imagerel $unwind$?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z DD imagerel $LN46
	DD	imagerel $LN46+2099
	DD	imagerel $unwind$?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z DD imagerel $LN9
	DD	imagerel $LN9+471
	DD	imagerel $unwind$?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z DD imagerel $LN25
	DD	imagerel $LN25+1505
	DD	imagerel $unwind$?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+189
	DD	imagerel $unwind$?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+134
	DD	imagerel $unwind$?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+194
	DD	imagerel $unwind$?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z DD imagerel $LN7
	DD	imagerel $LN7+241
	DD	imagerel $unwind$?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z DD imagerel $LN9
	DD	imagerel $LN9+258
	DD	imagerel $unwind$?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputInt2@ImGui@@YA_NPEBDQEAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?InputInt2@ImGui@@YA_NPEBDQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputInt3@ImGui@@YA_NPEBDQEAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?InputInt3@ImGui@@YA_NPEBDQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputInt4@ImGui@@YA_NPEBDQEAHH@Z DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$?InputInt4@ImGui@@YA_NPEBDQEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z DD imagerel $LN7
	DD	imagerel $LN7+243
	DD	imagerel $unwind$?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z DD imagerel $LN19
	DD	imagerel $LN19+1207
	DD	imagerel $unwind$?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z DD imagerel $LN9
	DD	imagerel $LN9+471
	DD	imagerel $unwind$?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z DD imagerel $LN98
	DD	imagerel $LN98+6311
	DD	imagerel $unwind$?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z DD imagerel $LN4
	DD	imagerel $LN4+373
	DD	imagerel $unwind$?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z DD imagerel $LN109
	DD	imagerel $LN109+10686
	DD	imagerel $unwind$?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z DD imagerel $LN25
	DD	imagerel $LN25+2179
	DD	imagerel $unwind$?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetColorEditOptions@ImGui@@YAXH@Z DD imagerel $LN11
	DD	imagerel $LN11+427
	DD	imagerel $unwind$?SetColorEditOptions@ImGui@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNode@ImGui@@YA_NPEBD@Z DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$?TreeNode@ImGui@@YA_NPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNode@ImGui@@YA_NPEBD0ZZ DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$?TreeNode@ImGui@@YA_NPEBD0ZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNode@ImGui@@YA_NPEBXPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$?TreeNode@ImGui@@YA_NPEBXPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeEx@ImGui@@YA_NPEBDH@Z DD imagerel $LN4
	DD	imagerel $LN4+115
	DD	imagerel $unwind$?TreeNodeEx@ImGui@@YA_NPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ DD imagerel $LN3
	DD	imagerel $LN3+187
	DD	imagerel $unwind$?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+215
	DD	imagerel $unwind$?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreePush@ImGui@@YAXPEBD@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?TreePush@ImGui@@YAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreePush@ImGui@@YAXPEBX@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?TreePush@ImGui@@YAXPEBX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreePop@ImGui@@YAXXZ DD imagerel $LN6
	DD	imagerel $LN6+386
	DD	imagerel $unwind$?TreePop@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CollapsingHeader@ImGui@@YA_NPEBDH@Z DD imagerel $LN4
	DD	imagerel $LN4+132
	DD	imagerel $unwind$?CollapsingHeader@ImGui@@YA_NPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z DD imagerel $LN8
	DD	imagerel $LN8+534
	DD	imagerel $unwind$?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetNextItemOpen@ImGui@@YAX_NH@Z DD imagerel $LN6
	DD	imagerel $LN6+168
	DD	imagerel $unwind$?SetNextItemOpen@ImGui@@YAX_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z DD imagerel $LN58
	DD	imagerel $LN58+2669
	DD	imagerel $unwind$?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z DD imagerel $LN8
	DD	imagerel $LN8+940
	DD	imagerel $unwind$?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndListBox@ImGui@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$?EndListBox@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DD imagerel $LN17
	DD	imagerel $LN17+701
	DD	imagerel $unwind$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA DD imagerel ?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA
	DD	imagerel ?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+249
	DD	imagerel $unwind$?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+156
	DD	imagerel $unwind$?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+252
	DD	imagerel $unwind$?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+159
	DD	imagerel $unwind$?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Value@ImGui@@YAXPEBD_N@Z DD imagerel $LN5
	DD	imagerel $LN5+112
	DD	imagerel $unwind$?Value@ImGui@@YAXPEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Value@ImGui@@YAXPEBDH@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?Value@ImGui@@YAXPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Value@ImGui@@YAXPEBDI@Z DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$?Value@ImGui@@YAXPEBDI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Value@ImGui@@YAXPEBDM0@Z DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$?Value@ImGui@@YAXPEBDM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginMenuBar@ImGui@@YA_NXZ DD imagerel $LN6
	DD	imagerel $LN6+618
	DD	imagerel $unwind$?BeginMenuBar@ImGui@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndMenuBar@ImGui@@YAXXZ DD imagerel $LN12
	DD	imagerel $LN12+659
	DD	imagerel $unwind$?EndMenuBar@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginMainMenuBar@ImGui@@YA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+278
	DD	imagerel $unwind$?BeginMainMenuBar@ImGui@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndMainMenuBar@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+128
	DD	imagerel $unwind$?EndMainMenuBar@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginMenu@ImGui@@YA_NPEBD_N@Z DD imagerel $LN53
	DD	imagerel $LN53+3291
	DD	imagerel $unwind$?BeginMenu@ImGui@@YA_NPEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndMenu@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+166
	DD	imagerel $unwind$?EndMenu@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MenuItem@ImGui@@YA_NPEBD0_N1@Z DD imagerel $LN14
	DD	imagerel $LN14+1307
	DD	imagerel $unwind$?MenuItem@ImGui@@YA_NPEBD0_N1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z DD imagerel $LN9
	DD	imagerel $LN9+214
	DD	imagerel $unwind$?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginTabBar@ImGui@@YA_NPEBDH@Z DD imagerel $LN4
	DD	imagerel $LN4+371
	DD	imagerel $unwind$?BeginTabBar@ImGui@@YA_NPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndTabBar@ImGui@@YAXXZ DD imagerel $LN17
	DD	imagerel $LN17+530
	DD	imagerel $unwind$?EndTabBar@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z DD imagerel $LN9
	DD	imagerel $LN9+342
	DD	imagerel $unwind$?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndTabItem@ImGui@@YAXXZ DD imagerel $LN9
	DD	imagerel $LN9+262
	DD	imagerel $unwind$?EndTabItem@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemButton@ImGui@@YA_NPEBDH@Z DD imagerel $LN7
	DD	imagerel $LN7+204
	DD	imagerel $unwind$?TabItemButton@ImGui@@YA_NPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetTabItemClosed@ImGui@@YAXPEBD@Z DD imagerel $LN7
	DD	imagerel $LN7+203
	DD	imagerel $unwind$?SetTabItemClosed@ImGui@@YAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??3@YAXPEAXUImNewWrapper@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??3@YAXPEAXUImNewWrapper@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@G@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@G@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@G@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@G@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@G@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@G@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@G@@QEAAAEAGH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@G@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@G@@QEBAAEBGH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@G@@QEBAAEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@G@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@G@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@G@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@G@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+183
	DD	imagerel $unwind$?reserve@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?contains@?$ImVector@G@@QEBA_NAEBG@Z DD imagerel $LN8
	DD	imagerel $LN8+194
	DD	imagerel $unwind$?contains@?$ImVector@G@@QEBA_NAEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiInputTextCallbackData@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0ImGuiInputTextCallbackData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z DD imagerel $LN9
	DD	imagerel $LN9+414
	DD	imagerel $unwind$?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z DD imagerel $LN15
	DD	imagerel $LN15+835
	DD	imagerel $unwind$?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@D@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@D@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@D@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@D@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@D@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@D@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@D@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+177
	DD	imagerel $unwind$?reserve@?$ImVector@D@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTextBuffer@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??0ImGuiTextBuffer@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@ImGuiTextBuffer@@QEBAHXZ DD imagerel $LN5
	DD	imagerel $LN5+88
	DD	imagerel $unwind$?size@ImGuiTextBuffer@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD imagerel $LN4
	DD	imagerel $LN4+161
	DD	imagerel $unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathFillConvex@ImDrawList@@QEAAXI@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathStroke@ImDrawList@@QEAAXIHM@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?PathStroke@ImDrawList@@QEAAXIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimWriteIdx@ImDrawList@@QEAAXG@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?PrimWriteIdx@ImDrawList@@QEAAXG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@I@@QEAAAEAIXZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@I@@QEAAAEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@I@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@I@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@I@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@I@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@I@@QEAAXAEBI@Z DD imagerel $LN4
	DD	imagerel $LN4+159
	DD	imagerel $unwind$?push_back@?$ImVector@I@@QEAAXAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?contains@?$ImVector@I@@QEBA_NAEBI@Z DD imagerel $LN8
	DD	imagerel $LN8+192
	DD	imagerel $unwind$?contains@?$ImVector@I@@QEBA_NAEBI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@M@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@M@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@M@@QEBAAEBMH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@M@@QEBAAEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCharAdvance@ImFont@@QEBAMG@Z DD imagerel $LN5
	DD	imagerel $LN5+141
	DD	imagerel $unwind$?GetCharAdvance@ImFont@@QEBAMG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ListBoxHeader@ImGui@@YA_NPEBDHH@Z DD imagerel $LN5
	DD	imagerel $LN5+278
	DD	imagerel $unwind$?ListBoxHeader@ImGui@@YA_NPEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z DD imagerel $LN9
	DD	imagerel $LN9+290
	DD	imagerel $unwind$?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z DD imagerel $LN9
	DD	imagerel $LN9+302
	DD	imagerel $unwind$?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z DD imagerel $LN7
	DD	imagerel $LN7+218
	DD	imagerel $unwind$?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z DD imagerel $LN7
	DD	imagerel $LN7+230
	DD	imagerel $unwind$?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_scanf_options DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$__local_stdio_scanf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsf DD	imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$fabsf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImIsPowerOfTwo@@YA_NH@Z DD imagerel ?ImIsPowerOfTwo@@YA_NH@Z
	DD	imagerel ?ImIsPowerOfTwo@@YA_NH@Z+100
	DD	imagerel $unwind$?ImIsPowerOfTwo@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImParseFormatFindStart@@YAPEBDPEBD@Z DD imagerel $LN8
	DD	imagerel $LN8+169
	DD	imagerel $unwind$?ImParseFormatFindStart@@YAPEBDPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImParseFormatFindEnd@@YAPEBDPEBD@Z DD imagerel $LN9
	DD	imagerel $LN9+284
	DD	imagerel $unwind$?ImParseFormatFindEnd@@YAPEBDPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z DD imagerel $LN5
	DD	imagerel $LN5+196
	DD	imagerel $unwind$?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImParseFormatPrecision@@YAHPEBDH@Z DD imagerel $LN15
	DD	imagerel $LN15+438
	DD	imagerel $unwind$?ImParseFormatPrecision@@YAHPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImCharIsBlankA@@YA_ND@Z DD imagerel ?ImCharIsBlankA@@YA_ND@Z
	DD	imagerel ?ImCharIsBlankA@@YA_ND@Z+93
	DD	imagerel $unwind$?ImCharIsBlankA@@YA_ND@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImCharIsBlankW@@YA_NI@Z DD imagerel ?ImCharIsBlankW@@YA_NI@Z
	DD	imagerel ?ImCharIsBlankW@@YA_NI@Z+99
	DD	imagerel $unwind$?ImCharIsBlankW@@YA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AUImVec2@@AEBU0@M@Z DD imagerel ??D@YA?AUImVec2@@AEBU0@M@Z
	DD	imagerel ??D@YA?AUImVec2@@AEBU0@M@Z+87
	DD	imagerel $unwind$??D@YA?AUImVec2@@AEBU0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??H@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??H@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??H@YA?AUImVec2@@AEBU0@0@Z+93
	DD	imagerel $unwind$??H@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??G@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??G@YA?AUImVec2@@AEBU0@0@Z+93
	DD	imagerel $unwind$??G@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD imagerel ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
	DD	imagerel ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z+93
	DD	imagerel $unwind$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD imagerel ??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z
	DD	imagerel ??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z+93
	DD	imagerel $unwind$??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImPow@@YAMMM@Z DD imagerel ?ImPow@@YAMMM@Z
	DD	imagerel ?ImPow@@YAMMM@Z+55
	DD	imagerel $unwind$?ImPow@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImPow@@YANNN@Z DD imagerel ?ImPow@@YANNN@Z
	DD	imagerel ?ImPow@@YANNN@Z+55
	DD	imagerel $unwind$?ImPow@@YANNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLog@@YAMM@Z DD imagerel ?ImLog@@YAMM@Z
	DD	imagerel ?ImLog@@YAMM@Z+44
	DD	imagerel $unwind$?ImLog@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLog@@YANN@Z DD imagerel ?ImLog@@YANN@Z
	DD	imagerel ?ImLog@@YANN@Z+44
	DD	imagerel $unwind$?ImLog@@YANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAbs@@YAMM@Z DD imagerel ?ImAbs@@YAMM@Z
	DD	imagerel ?ImAbs@@YAMM@Z+44
	DD	imagerel $unwind$?ImAbs@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAbs@@YANN@Z DD imagerel ?ImAbs@@YANN@Z
	DD	imagerel ?ImAbs@@YANN@Z+46
	DD	imagerel $unwind$?ImAbs@@YANN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z+160
	DD	imagerel $unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z+160
	DD	imagerel $unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z DD imagerel ?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z
	DD	imagerel ?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z+140
	DD	imagerel $unwind$?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLerp@@YA?AUImVec2@@AEBU1@00@Z DD imagerel ?ImLerp@@YA?AUImVec2@@AEBU1@00@Z
	DD	imagerel ?ImLerp@@YA?AUImVec2@@AEBU1@00@Z+146
	DD	imagerel $unwind$?ImLerp@@YA?AUImVec2@@AEBU1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImSaturate@@YAMM@Z DD imagerel ?ImSaturate@@YAMM@Z
	DD	imagerel ?ImSaturate@@YAMM@Z+107
	DD	imagerel $unwind$?ImSaturate@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLengthSqr@@YAMAEBUImVec2@@@Z DD imagerel ?ImLengthSqr@@YAMAEBUImVec2@@@Z
	DD	imagerel ?ImLengthSqr@@YAMAEBUImVec2@@@Z+71
	DD	imagerel $unwind$?ImLengthSqr@@YAMAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloor@@YAMM@Z DD imagerel ?ImFloor@@YAMM@Z
	DD	imagerel ?ImFloor@@YAMM@Z+43
	DD	imagerel $unwind$?ImFloor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloor@@YA?AUImVec2@@AEBU1@@Z DD imagerel ?ImFloor@@YA?AUImVec2@@AEBU1@@Z
	DD	imagerel ?ImFloor@@YA?AUImVec2@@AEBU1@@Z+79
	DD	imagerel $unwind$?ImFloor@@YA?AUImVec2@@AEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z DD imagerel ?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z
	DD	imagerel ?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z+128
	DD	imagerel $unwind$?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLinearSweep@@YAMMMM@Z DD imagerel ?ImLinearSweep@@YAMMMM@Z
	DD	imagerel ?ImLinearSweep@@YAMMMM@Z+117
	DD	imagerel $unwind$?ImLinearSweep@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@M@@YAMMM@Z DD imagerel ??$ImMin@M@@YAMMM@Z
	DD	imagerel ??$ImMin@M@@YAMMM@Z+107
	DD	imagerel $unwind$??$ImMin@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@M@@YAMMM@Z DD imagerel ??$ImMax@M@@YAMMM@Z
	DD	imagerel ??$ImMax@M@@YAMMM@Z+107
	DD	imagerel $unwind$??$ImMax@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??0ImRect@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@AEBUImVec2@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0ImRect@@QEAA@AEBUImVec2@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@AEBUImVec4@@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??0ImRect@@QEAA@AEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0ImRect@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCenter@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?GetCenter@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetSize@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?GetSize@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetWidth@ImRect@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?GetWidth@ImRect@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetHeight@ImRect@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?GetHeight@ImRect@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetArea@ImRect@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$?GetArea@ImRect@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTL@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?GetTL@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTR@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$?GetTR@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetBL@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?GetBL@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetBR@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$?GetBR@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Contains@ImRect@@QEBA_NAEBU1@@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?Contains@ImRect@@QEBA_NAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Overlaps@ImRect@@QEBA_NAEBU1@@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?Overlaps@ImRect@@QEBA_NAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Expand@ImRect@@QEAAXM@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$?Expand@ImRect@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Expand@ImRect@@QEAAXAEBUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$?Expand@ImRect@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Translate@ImRect@@QEAAXAEBUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$?Translate@ImRect@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClipWith@ImRect@@QEAAXAEBU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?ClipWith@ImRect@@QEAAXAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Update@ImGuiMenuColumns@@QEAAXHM_N@Z DD imagerel $LN9
	DD	imagerel $LN9+374
	DD	imagerel $unwind$?Update@ImGuiMenuColumns@@QEAAXHM_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z DD imagerel $LN8
	DD	imagerel $LN8+422
	DD	imagerel $unwind$?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+104
	DD	imagerel $unwind$?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CursorClamp@ImGuiInputTextState@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$?CursorClamp@ImGuiInputTextState@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HasSelection@ImGuiInputTextState@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+92
	DD	imagerel $unwind$?HasSelection@ImGuiInputTextState@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearSelection@ImGuiInputTextState@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$?ClearSelection@ImGuiInputTextState@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SelectAll@ImGuiInputTextState@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$?SelectAll@ImGuiInputTextState@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@H@@YAHHH@Z DD imagerel ??$ImMin@H@@YAHHH@Z
	DD	imagerel ??$ImMin@H@@YAHHH@Z+90
	DD	imagerel $unwind$??$ImMin@H@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearFlags@ImGuiNextWindowData@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?ClearFlags@ImGuiNextWindowData@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearFlags@ImGuiNextItemData@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?ClearFlags@ImGuiNextItemData@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiPtrOrIndex@@QEAA@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0ImGuiPtrOrIndex@@QEAA@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiPtrOrIndex@@QEAA@H@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$??0ImGuiPtrOrIndex@@QEAA@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z DD imagerel $LN3
	DD	imagerel $LN3+199
	DD	imagerel $unwind$?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ DD imagerel $LN3
	DD	imagerel $LN3+264
	DD	imagerel $unwind$?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z DD imagerel $LN5
	DD	imagerel $LN5+165
	DD	imagerel $unwind$?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z DD imagerel $LN4
	DD	imagerel $LN4+162
	DD	imagerel $unwind$?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ DD imagerel $LN8
	DD	imagerel $LN8+363
	DD	imagerel $unwind$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA DD imagerel ?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA
	DD	imagerel ?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcFontSize@ImGuiWindow@@QEBAMXZ DD imagerel $LN4
	DD	imagerel $LN4+138
	DD	imagerel $unwind$?CalcFontSize@ImGuiWindow@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TitleBarHeight@ImGuiWindow@@QEBAMXZ DD imagerel $LN5
	DD	imagerel $LN5+134
	DD	imagerel $unwind$?TitleBarHeight@ImGuiWindow@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MenuBarHeight@ImGuiWindow@@QEBAMXZ DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$?MenuBarHeight@ImGuiWindow@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ DD imagerel $LN3
	DD	imagerel $LN3+220
	DD	imagerel $unwind$?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiLastItemDataBackup@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+98
	DD	imagerel $unwind$??0ImGuiLastItemDataBackup@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Backup@ImGuiLastItemDataBackup@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$?Backup@ImGuiLastItemDataBackup@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Restore@ImGuiLastItemDataBackup@@QEBAXXZ DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$?Restore@ImGuiLastItemDataBackup@@QEBAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTabItem@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$??0ImGuiTabItem@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z DD imagerel $LN5
	DD	imagerel $LN5+288
	DD	imagerel $unwind$?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z DD imagerel $LN5
	DD	imagerel $LN5+169
	DD	imagerel $unwind$?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTabBar@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+204
	DD	imagerel $unwind$??0ImGuiTabBar@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z DD imagerel $LN5
	DD	imagerel $LN5+137
	DD	imagerel $unwind$?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z DD imagerel $LN23
	DD	imagerel $LN23+918
	DD	imagerel $unwind$?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z DD imagerel $LN17
	DD	imagerel $LN17+808
	DD	imagerel $unwind$?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z DD imagerel $LN19
	DD	imagerel $LN19+972
	DD	imagerel $unwind$?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginComboPreview@ImGui@@YA_NXZ DD imagerel $LN9
	DD	imagerel $LN9+481
	DD	imagerel $unwind$?BeginComboPreview@ImGui@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndComboPreview@ImGui@@YAXXZ DD imagerel $LN5
	DD	imagerel $LN5+469
	DD	imagerel $unwind$?EndComboPreview@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsKeyPressedMap@ImGui@@YA_NH_N@Z DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$?IsKeyPressedMap@ImGui@@YA_NH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsNavInputDown@ImGui@@YA_NH@Z DD imagerel $LN5
	DD	imagerel $LN5+109
	DD	imagerel $unwind$?IsNavInputDown@ImGui@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z DD imagerel $LN5
	DD	imagerel $LN5+99
	DD	imagerel $unwind$?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z DD imagerel $LN12
	DD	imagerel $LN12+1074
	DD	imagerel $unwind$?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z DD imagerel $LN8
	DD	imagerel $LN8+159
	DD	imagerel $unwind$?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z DD imagerel $LN8
	DD	imagerel $LN8+231
	DD	imagerel $unwind$?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+177
	DD	imagerel $unwind$?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z DD imagerel $LN20
	DD	imagerel $LN20+721
	DD	imagerel $unwind$?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z DD imagerel $LN16
	DD	imagerel $LN16+599
	DD	imagerel $unwind$?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z DD imagerel $LN80
	DD	imagerel $LN80+3712
	DD	imagerel $unwind$?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z DD imagerel $LN5
	DD	imagerel $LN5+393
	DD	imagerel $unwind$?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z DD imagerel $LN7
	DD	imagerel $LN7+966
	DD	imagerel $unwind$?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z DD imagerel $LN30
	DD	imagerel $LN30+1562
	DD	imagerel $unwind$?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TextEx@ImGui@@YAXPEBD0H@Z DD imagerel $LN29
	DD	imagerel $LN29+1876
	DD	imagerel $unwind$?TextEx@ImGui@@YAXPEBD0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z DD imagerel $LN12
	DD	imagerel $LN12+972
	DD	imagerel $unwind$?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z DD imagerel $LN10
	DD	imagerel $LN10+1299
	DD	imagerel $unwind$?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z DD imagerel $LN12
	DD	imagerel $LN12+786
	DD	imagerel $unwind$?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z DD imagerel $LN12
	DD	imagerel $LN12+858
	DD	imagerel $unwind$?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z DD imagerel $LN8
	DD	imagerel $LN8+650
	DD	imagerel $unwind$?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z DD imagerel $LN26
	DD	imagerel $LN26+2328
	DD	imagerel $unwind$?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z DD imagerel $LN10
	DD	imagerel $LN10+961
	DD	imagerel $unwind$?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z DD imagerel $LN6
	DD	imagerel $LN6+463
	DD	imagerel $unwind$?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SeparatorEx@ImGui@@YAXH@Z DD imagerel $LN17
	DD	imagerel $LN17+1262
	DD	imagerel $unwind$?SeparatorEx@ImGui@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z DD imagerel $LN84
	DD	imagerel $LN84+2729
	DD	imagerel $unwind$?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z DD imagerel $LN72
	DD	imagerel $LN72+2448
	DD	imagerel $unwind$?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z DD imagerel $LN37
	DD	imagerel $LN37+1980
	DD	imagerel $unwind$?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z DD imagerel $LN29
	DD	imagerel $LN29+1443
	DD	imagerel $unwind$?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z DD imagerel $LN80
	DD	imagerel $LN80+4090
	DD	imagerel $unwind$?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z DD imagerel $LN17
	DD	imagerel $LN17+463
	DD	imagerel $unwind$?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TreePushOverrideID@ImGui@@YAXI@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?TreePushOverrideID@ImGui@@YAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+115
	DD	imagerel $unwind$?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z DD imagerel $LN14
	DD	imagerel $LN14+560
	DD	imagerel $unwind$?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z DD imagerel $LN39
	DD	imagerel $LN39+1300
	DD	imagerel $unwind$?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z DD imagerel $LN66
	DD	imagerel $LN66+1758
	DD	imagerel $unwind$?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DataTypeCompare@ImGui@@YAHHPEBX0@Z DD imagerel $LN18
	DD	imagerel $LN18+408
	DD	imagerel $unwind$?DataTypeCompare@ImGui@@YAHHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z DD imagerel $LN18
	DD	imagerel $LN18+488
	DD	imagerel $unwind$?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD imagerel $LN403
	DD	imagerel $LN403+17825
	DD	imagerel $unwind$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA DD imagerel ?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA
	DD	imagerel ?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z DD imagerel $LN8
	DD	imagerel $LN8+334
	DD	imagerel $unwind$?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z DD imagerel $LN12
	DD	imagerel $LN12+664
	DD	imagerel $unwind$?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TempInputIsActive@ImGui@@YA_NI@Z DD imagerel $LN5
	DD	imagerel $LN5+116
	DD	imagerel $unwind$?TempInputIsActive@ImGui@@YA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z DD imagerel $LN5
	DD	imagerel $LN5+106
	DD	imagerel $unwind$?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z DD imagerel $LN18
	DD	imagerel $LN18+1477
	DD	imagerel $unwind$?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z DD imagerel $LN41
	DD	imagerel $LN41+1625
	DD	imagerel $unwind$?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z DD imagerel $LN22
	DD	imagerel $LN22+842
	DD	imagerel $unwind$?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z DD imagerel $LN59
	DD	imagerel $LN59+3250
	DD	imagerel $unwind$?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z DD imagerel ?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z
	DD	imagerel ?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z+889
	DD	imagerel $unwind$?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z DD imagerel ?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z
	DD	imagerel ?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z+205
	DD	imagerel $unwind$?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z DD imagerel ?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z
	DD	imagerel ?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z+666
	DD	imagerel $unwind$?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@M@@YAMMMM@Z DD imagerel ??$ImClamp@M@@YAMMMM@Z
	DD	imagerel ??$ImClamp@M@@YAMMMM@Z+164
	DD	imagerel $unwind$??$ImClamp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@M@@YAMMMM@Z DD imagerel ??$ImLerp@M@@YAMMMM@Z
	DD	imagerel ??$ImLerp@M@@YAMMMM@Z+93
	DD	imagerel $unwind$??$ImLerp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z DD imagerel $LN12
	DD	imagerel $LN12+438
	DD	imagerel $unwind$??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z DD imagerel $LN12
	DD	imagerel $LN12+438
	DD	imagerel $unwind$??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z DD imagerel $LN12
	DD	imagerel $LN12+456
	DD	imagerel $unwind$??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z DD imagerel $LN12
	DD	imagerel $LN12+456
	DD	imagerel $unwind$??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShrinkWidthItemComparer@@YAHPEBX0@Z DD imagerel ?ShrinkWidthItemComparer@@YAHPEBX0@Z
	DD	imagerel ?ShrinkWidthItemComparer@@YAHPEBX0@Z+118
	DD	imagerel $unwind$?ShrinkWidthItemComparer@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcMaxPopupHeightFromItemCount@@YAMH@Z DD imagerel ?CalcMaxPopupHeightFromItemCount@@YAMH@Z
	DD	imagerel ?CalcMaxPopupHeightFromItemCount@@YAMH@Z+142
	DD	imagerel $unwind$?CalcMaxPopupHeightFromItemCount@@YAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z DD imagerel ?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z
	DD	imagerel ?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z+98
	DD	imagerel $unwind$?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z DD imagerel ?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z
	DD	imagerel ?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z+220
	DD	imagerel $unwind$?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z DD imagerel ?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z
	DD	imagerel ?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z+388
	DD	imagerel $unwind$?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@C@@YACCCCC@Z DD imagerel ??$ImAddClampOverflow@C@@YACCCCC@Z
	DD	imagerel ??$ImAddClampOverflow@C@@YACCCCC@Z+164
	DD	imagerel $unwind$??$ImAddClampOverflow@C@@YACCCCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@C@@YACCCCC@Z DD imagerel ??$ImSubClampOverflow@C@@YACCCCC@Z
	DD	imagerel ??$ImSubClampOverflow@C@@YACCCCC@Z+164
	DD	imagerel $unwind$??$ImSubClampOverflow@C@@YACCCCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@E@@YAEEEEE@Z DD imagerel ??$ImAddClampOverflow@E@@YAEEEEE@Z
	DD	imagerel ??$ImAddClampOverflow@E@@YAEEEEE@Z+164
	DD	imagerel $unwind$??$ImAddClampOverflow@E@@YAEEEEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@E@@YAEEEEE@Z DD imagerel ??$ImSubClampOverflow@E@@YAEEEEE@Z
	DD	imagerel ??$ImSubClampOverflow@E@@YAEEEEE@Z+164
	DD	imagerel $unwind$??$ImSubClampOverflow@E@@YAEEEEE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@F@@YAFFFFF@Z DD imagerel ??$ImAddClampOverflow@F@@YAFFFFF@Z
	DD	imagerel ??$ImAddClampOverflow@F@@YAFFFFF@Z+168
	DD	imagerel $unwind$??$ImAddClampOverflow@F@@YAFFFFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@F@@YAFFFFF@Z DD imagerel ??$ImSubClampOverflow@F@@YAFFFFF@Z
	DD	imagerel ??$ImSubClampOverflow@F@@YAFFFFF@Z+168
	DD	imagerel $unwind$??$ImSubClampOverflow@F@@YAFFFFF@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@G@@YAGGGGG@Z DD imagerel ??$ImAddClampOverflow@G@@YAGGGGG@Z
	DD	imagerel ??$ImAddClampOverflow@G@@YAGGGGG@Z+168
	DD	imagerel $unwind$??$ImAddClampOverflow@G@@YAGGGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@G@@YAGGGGG@Z DD imagerel ??$ImSubClampOverflow@G@@YAGGGGG@Z
	DD	imagerel ??$ImSubClampOverflow@G@@YAGGGGG@Z+168
	DD	imagerel $unwind$??$ImSubClampOverflow@G@@YAGGGGG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@H@@YAHHHHH@Z DD imagerel ??$ImAddClampOverflow@H@@YAHHHHH@Z
	DD	imagerel ??$ImAddClampOverflow@H@@YAHHHHH@Z+152
	DD	imagerel $unwind$??$ImAddClampOverflow@H@@YAHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@H@@YAHHHHH@Z DD imagerel ??$ImSubClampOverflow@H@@YAHHHHH@Z
	DD	imagerel ??$ImSubClampOverflow@H@@YAHHHHH@Z+152
	DD	imagerel $unwind$??$ImSubClampOverflow@H@@YAHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@I@@YAIIIII@Z DD imagerel ??$ImAddClampOverflow@I@@YAIIIII@Z
	DD	imagerel ??$ImAddClampOverflow@I@@YAIIIII@Z+152
	DD	imagerel $unwind$??$ImAddClampOverflow@I@@YAIIIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@I@@YAIIIII@Z DD imagerel ??$ImSubClampOverflow@I@@YAIIIII@Z
	DD	imagerel ??$ImSubClampOverflow@I@@YAIIIII@Z+152
	DD	imagerel $unwind$??$ImSubClampOverflow@I@@YAIIIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@_J@@YA_J_J000@Z DD imagerel ??$ImAddClampOverflow@_J@@YA_J_J000@Z
	DD	imagerel ??$ImAddClampOverflow@_J@@YA_J_J000@Z+172
	DD	imagerel $unwind$??$ImAddClampOverflow@_J@@YA_J_J000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@_J@@YA_J_J000@Z DD imagerel ??$ImSubClampOverflow@_J@@YA_J_J000@Z
	DD	imagerel ??$ImSubClampOverflow@_J@@YA_J_J000@Z+172
	DD	imagerel $unwind$??$ImSubClampOverflow@_J@@YA_J_J000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAddClampOverflow@_K@@YA_K_K000@Z DD imagerel ??$ImAddClampOverflow@_K@@YA_K_K000@Z
	DD	imagerel ??$ImAddClampOverflow@_K@@YA_K_K000@Z+172
	DD	imagerel $unwind$??$ImAddClampOverflow@_K@@YA_K_K000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSubClampOverflow@_K@@YA_K_K000@Z DD imagerel ??$ImSubClampOverflow@_K@@YA_K_K000@Z
	DD	imagerel ??$ImSubClampOverflow@_K@@YA_K_K000@Z+172
	DD	imagerel $unwind$??$ImSubClampOverflow@_K@@YA_K_K000@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@H@@YAHHHH@Z DD imagerel ??$ImClamp@H@@YAHHHH@Z
	DD	imagerel ??$ImClamp@H@@YAHHHH@Z+135
	DD	imagerel $unwind$??$ImClamp@H@@YAHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@C@@YAHPEBC0@Z DD imagerel ??$DataTypeCompareT@C@@YAHPEBC0@Z
	DD	imagerel ??$DataTypeCompareT@C@@YAHPEBC0@Z+110
	DD	imagerel $unwind$??$DataTypeCompareT@C@@YAHPEBC0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@E@@YAHPEBE0@Z DD imagerel ??$DataTypeCompareT@E@@YAHPEBE0@Z
	DD	imagerel ??$DataTypeCompareT@E@@YAHPEBE0@Z+110
	DD	imagerel $unwind$??$DataTypeCompareT@E@@YAHPEBE0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@F@@YAHPEBF0@Z DD imagerel ??$DataTypeCompareT@F@@YAHPEBF0@Z
	DD	imagerel ??$DataTypeCompareT@F@@YAHPEBF0@Z+110
	DD	imagerel $unwind$??$DataTypeCompareT@F@@YAHPEBF0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@G@@YAHPEBG0@Z DD imagerel ??$DataTypeCompareT@G@@YAHPEBG0@Z
	DD	imagerel ??$DataTypeCompareT@G@@YAHPEBG0@Z+110
	DD	imagerel $unwind$??$DataTypeCompareT@G@@YAHPEBG0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@H@@YAHPEBH0@Z DD imagerel ??$DataTypeCompareT@H@@YAHPEBH0@Z
	DD	imagerel ??$DataTypeCompareT@H@@YAHPEBH0@Z+102
	DD	imagerel $unwind$??$DataTypeCompareT@H@@YAHPEBH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@I@@YAHPEBI0@Z DD imagerel ??$DataTypeCompareT@I@@YAHPEBI0@Z
	DD	imagerel ??$DataTypeCompareT@I@@YAHPEBI0@Z+102
	DD	imagerel $unwind$??$DataTypeCompareT@I@@YAHPEBI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@_J@@YAHPEB_J0@Z DD imagerel ??$DataTypeCompareT@_J@@YAHPEB_J0@Z
	DD	imagerel ??$DataTypeCompareT@_J@@YAHPEB_J0@Z+106
	DD	imagerel $unwind$??$DataTypeCompareT@_J@@YAHPEB_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@_K@@YAHPEB_K0@Z DD imagerel ??$DataTypeCompareT@_K@@YAHPEB_K0@Z
	DD	imagerel ??$DataTypeCompareT@_K@@YAHPEB_K0@Z+106
	DD	imagerel $unwind$??$DataTypeCompareT@_K@@YAHPEB_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@M@@YAHPEBM0@Z DD imagerel ??$DataTypeCompareT@M@@YAHPEBM0@Z
	DD	imagerel ??$DataTypeCompareT@M@@YAHPEBM0@Z+108
	DD	imagerel $unwind$??$DataTypeCompareT@M@@YAHPEBM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeCompareT@N@@YAHPEBN0@Z DD imagerel ??$DataTypeCompareT@N@@YAHPEBN0@Z
	DD	imagerel ??$DataTypeCompareT@N@@YAHPEBN0@Z+110
	DD	imagerel $unwind$??$DataTypeCompareT@N@@YAHPEBN0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@C@@YA_NPEACPEBC1@Z DD imagerel ??$DataTypeClampT@C@@YA_NPEACPEBC1@Z
	DD	imagerel ??$DataTypeClampT@C@@YA_NPEACPEBC1@Z+167
	DD	imagerel $unwind$??$DataTypeClampT@C@@YA_NPEACPEBC1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z DD imagerel ??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z
	DD	imagerel ??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z+167
	DD	imagerel $unwind$??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z DD imagerel ??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z
	DD	imagerel ??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z+169
	DD	imagerel $unwind$??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z DD imagerel ??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z
	DD	imagerel ??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z+169
	DD	imagerel $unwind$??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z DD imagerel ??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z
	DD	imagerel ??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z+157
	DD	imagerel $unwind$??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z DD imagerel ??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z
	DD	imagerel ??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z+157
	DD	imagerel $unwind$??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z DD imagerel ??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z
	DD	imagerel ??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z+165
	DD	imagerel $unwind$??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z DD imagerel ??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z
	DD	imagerel ??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z+165
	DD	imagerel $unwind$??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z DD imagerel ??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z
	DD	imagerel ??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z+171
	DD	imagerel $unwind$??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DataTypeClampT@N@@YA_NPEANPEBN1@Z DD imagerel ??$DataTypeClampT@N@@YA_NPEANPEBN1@Z
	DD	imagerel ??$DataTypeClampT@N@@YA_NPEANPEBN1@Z+173
	DD	imagerel $unwind$??$DataTypeClampT@N@@YA_NPEANPEBN1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetMinimumStepAtDecimalPrecision@@YAMH@Z DD imagerel ?GetMinimumStepAtDecimalPrecision@@YAMH@Z
	DD	imagerel ?GetMinimumStepAtDecimalPrecision@@YAMH@Z+141
	DD	imagerel $unwind$?GetMinimumStepAtDecimalPrecision@@YAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SanitizeFormatString@@YAXPEBDPEAD_K@Z DD imagerel ?SanitizeFormatString@@YAXPEBDPEAD_K@Z
	DD	imagerel ?SanitizeFormatString@@YAXPEBDPEAD_K@Z+255
	DD	imagerel $unwind$?SanitizeFormatString@@YAXPEBDPEAD_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z DD imagerel $LN46
	DD	imagerel $LN46+1997
	DD	imagerel $unwind$??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z DD imagerel $LN46
	DD	imagerel $LN46+2012
	DD	imagerel $unwind$??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z DD imagerel $LN46
	DD	imagerel $LN46+2068
	DD	imagerel $unwind$??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z DD imagerel $LN56
	DD	imagerel $LN56+2248
	DD	imagerel $unwind$??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z DD imagerel $LN47
	DD	imagerel $LN47+2047
	DD	imagerel $unwind$??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z DD imagerel $LN47
	DD	imagerel $LN47+2087
	DD	imagerel $unwind$??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@H@@YAHHH@Z DD imagerel ??$ImMax@H@@YAHHH@Z
	DD	imagerel ??$ImMax@H@@YAHHH@Z+90
	DD	imagerel $unwind$??$ImMax@H@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z DD imagerel $LN59
	DD	imagerel $LN59+3222
	DD	imagerel $unwind$??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z DD imagerel $LN59
	DD	imagerel $LN59+3222
	DD	imagerel $unwind$??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z DD imagerel $LN59
	DD	imagerel $LN59+3254
	DD	imagerel $unwind$??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z DD imagerel $LN59
	DD	imagerel $LN59+3254
	DD	imagerel $unwind$??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z DD imagerel $LN60
	DD	imagerel $LN60+3269
	DD	imagerel $unwind$??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z DD imagerel $LN60
	DD	imagerel $LN60+3282
	DD	imagerel $unwind$??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@_K@@YA_K_K0@Z DD imagerel ??$ImMin@_K@@YA_K_K0@Z
	DD	imagerel ??$ImMin@_K@@YA_K_K0@Z+99
	DD	imagerel $unwind$??$ImMin@_K@@YA_K_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAtoi@H@@YAPEBDPEBDPEAH@Z DD imagerel ??$ImAtoi@H@@YAPEBDPEBDPEAH@Z
	DD	imagerel ??$ImAtoi@H@@YAPEBDPEBDPEAH@Z+263
	DD	imagerel $unwind$??$ImAtoi@H@@YAPEBDPEBDPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@PEBX@@YAXAEAPEBX0@Z DD imagerel ??$ImSwap@PEBX@@YAXAEAPEBX0@Z
	DD	imagerel ??$ImSwap@PEBX@@YAXAEAPEBX0@Z+94
	DD	imagerel $unwind$??$ImSwap@PEBX@@YAXAEAPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z DD imagerel ?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z
	DD	imagerel ?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z+51
	DD	imagerel $unwind$?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z DD imagerel ?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z
	DD	imagerel ?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z+84
	DD	imagerel $unwind$?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z DD imagerel ?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z
	DD	imagerel ?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z+201
	DD	imagerel $unwind$?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z DD imagerel ?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z
	DD	imagerel ?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z+82
	DD	imagerel $unwind$?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z DD imagerel ?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z
	DD	imagerel ?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z+332
	DD	imagerel $unwind$?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?is_separator@ImStb@@YA_NI@Z DD imagerel ?is_separator@ImStb@@YA_NI@Z
	DD	imagerel ?is_separator@ImStb@@YA_NI@Z+168
	DD	imagerel $unwind$?is_separator@ImStb@@YA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z DD imagerel ?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
	DD	imagerel ?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z+249
	DD	imagerel $unwind$?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z DD imagerel ?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
	DD	imagerel ?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z+145
	DD	imagerel $unwind$?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z DD imagerel ?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
	DD	imagerel ?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z+161
	DD	imagerel $unwind$?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z DD imagerel ?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z
	DD	imagerel ?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z+309
	DD	imagerel $unwind$?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z DD imagerel ?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z
	DD	imagerel ?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z+676
	DD	imagerel $unwind$?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z DD imagerel ?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z
	DD	imagerel ?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z+692
	DD	imagerel $unwind$?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z DD imagerel ?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z
	DD	imagerel ?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z+264
	DD	imagerel $unwind$?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z DD imagerel ?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z
	DD	imagerel ?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z+282
	DD	imagerel $unwind$?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD imagerel ?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z+667
	DD	imagerel $unwind$?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD imagerel ?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z+590
	DD	imagerel $unwind$?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z DD imagerel ?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z
	DD	imagerel ?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z+171
	DD	imagerel $unwind$?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z DD imagerel ?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z
	DD	imagerel ?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z+85
	DD	imagerel $unwind$?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z DD imagerel ?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z
	DD	imagerel ?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z+175
	DD	imagerel $unwind$?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z DD imagerel ?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z
	DD	imagerel ?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z+739
	DD	imagerel $unwind$?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z+206
	DD	imagerel $unwind$?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z DD imagerel ?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z
	DD	imagerel ?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z+125
	DD	imagerel $unwind$?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z+312
	DD	imagerel $unwind$?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z+109
	DD	imagerel $unwind$?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z+125
	DD	imagerel $unwind$?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z+149
	DD	imagerel $unwind$?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z+123
	DD	imagerel $unwind$?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD imagerel ?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
	DD	imagerel ?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z+107
	DD	imagerel $unwind$?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z DD imagerel ?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z
	DD	imagerel ?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z+208
	DD	imagerel $unwind$?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z DD imagerel ?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z
	DD	imagerel ?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z+4556
	DD	imagerel $unwind$?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z DD imagerel ?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z
	DD	imagerel ?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z+77
	DD	imagerel $unwind$?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z DD imagerel ?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z
	DD	imagerel ?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z+421
	DD	imagerel $unwind$?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z DD imagerel ?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z
	DD	imagerel ?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z+703
	DD	imagerel $unwind$?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z DD imagerel ?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z
	DD	imagerel ?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z+254
	DD	imagerel $unwind$?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z DD imagerel ?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z
	DD	imagerel ?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z+230
	DD	imagerel $unwind$?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z DD imagerel ?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z
	DD	imagerel ?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z+245
	DD	imagerel $unwind$?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z DD imagerel ?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z
	DD	imagerel ?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z+63
	DD	imagerel $unwind$?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z DD imagerel ?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z
	DD	imagerel ?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z+89
	DD	imagerel $unwind$?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z DD imagerel ?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z
	DD	imagerel ?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z+238
	DD	imagerel $unwind$?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z DD imagerel ?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z
	DD	imagerel ?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z+623
	DD	imagerel $unwind$?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Plot_ArrayGetter@@YAMPEAXH@Z DD imagerel ?Plot_ArrayGetter@@YAMPEAXH@Z
	DD	imagerel ?Plot_ArrayGetter@@YAMPEAXH@Z+97
	DD	imagerel $unwind$?Plot_ArrayGetter@@YAMPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTabBarSection@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0ImGuiTabBarSection@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z DD imagerel ?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z
	DD	imagerel ?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z+4960
	DD	imagerel $unwind$?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z DD imagerel ?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z
	DD	imagerel ?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z+137
	DD	imagerel $unwind$?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarCalcMaxTabWidth@ImGui@@YAMXZ DD imagerel ?TabBarCalcMaxTabWidth@ImGui@@YAMXZ
	DD	imagerel ?TabBarCalcMaxTabWidth@ImGui@@YAMXZ+68
	DD	imagerel $unwind$?TabBarCalcMaxTabWidth@ImGui@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z DD imagerel ?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z
	DD	imagerel ?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z+125
	DD	imagerel $unwind$?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z DD imagerel ?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z
	DD	imagerel ?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z+716
	DD	imagerel $unwind$?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z DD imagerel ?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z
	DD	imagerel ?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z+1167
	DD	imagerel $unwind$?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z DD imagerel ?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z
	DD	imagerel ?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z+744
	DD	imagerel $unwind$?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z DD imagerel ?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z
	DD	imagerel ?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z+129
	DD	imagerel $unwind$?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemComparerBySection@@YAHPEBX0@Z DD imagerel ?TabItemComparerBySection@@YAHPEBX0@Z
	DD	imagerel ?TabItemComparerBySection@@YAHPEBX0@Z+130
	DD	imagerel $unwind$?TabItemComparerBySection@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TabItemComparerByBeginOrder@@YAHPEBX0@Z DD imagerel ?TabItemComparerByBeginOrder@@YAHPEBX0@Z
	DD	imagerel ?TabItemComparerByBeginOrder@@YAHPEBX0@Z+86
	DD	imagerel $unwind$?TabItemComparerByBeginOrder@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z DD imagerel ?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z
	DD	imagerel ?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z+137
	DD	imagerel $unwind$?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z DD imagerel ?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z
	DD	imagerel ?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z+185
	DD	imagerel $unwind$?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z DD imagerel $LN36
	DD	imagerel $LN36+1397
	DD	imagerel $unwind$??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z DD imagerel $LN41
	DD	imagerel $LN41+1560
	DD	imagerel $unwind$??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z DD imagerel $LN10
	DD	imagerel $LN10+365
	DD	imagerel $unwind$??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z DD imagerel $LN36
	DD	imagerel $LN36+1469
	DD	imagerel $unwind$??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z DD imagerel $LN41
	DD	imagerel $LN41+1606
	DD	imagerel $unwind$??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z DD imagerel $LN10
	DD	imagerel $LN10+366
	DD	imagerel $unwind$??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z DD imagerel $LN36
	DD	imagerel $LN36+1499
	DD	imagerel $unwind$??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z DD imagerel $LN41
	DD	imagerel $LN41+1663
	DD	imagerel $unwind$??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z DD imagerel $LN10
	DD	imagerel $LN10+369
	DD	imagerel $unwind$??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z DD imagerel $LN84
	DD	imagerel $LN84+2350
	DD	imagerel $unwind$??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z DD imagerel $LN73
	DD	imagerel $LN73+2354
	DD	imagerel $unwind$??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z DD imagerel $LN11
	DD	imagerel $LN11+418
	DD	imagerel $unwind$??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z DD imagerel $LN36
	DD	imagerel $LN36+1385
	DD	imagerel $unwind$??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z DD imagerel $LN41
	DD	imagerel $LN41+1572
	DD	imagerel $unwind$??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z DD imagerel $LN10
	DD	imagerel $LN10+387
	DD	imagerel $unwind$??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z DD imagerel $LN36
	DD	imagerel $LN36+1457
	DD	imagerel $unwind$??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z DD imagerel $LN41
	DD	imagerel $LN41+1631
	DD	imagerel $unwind$??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z DD imagerel $LN10
	DD	imagerel $LN10+380
	DD	imagerel $unwind$??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@H@@YAXAEAH0@Z DD imagerel ??$ImSwap@H@@YAXAEAH0@Z
	DD	imagerel ??$ImSwap@H@@YAXAEAH0@Z+88
	DD	imagerel $unwind$??$ImSwap@H@@YAXAEAH0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@M@@YAXAEAM0@Z DD imagerel ??$ImSwap@M@@YAXAEAM0@Z
	DD	imagerel ??$ImSwap@M@@YAXAEAM0@Z+100
	DD	imagerel $unwind$??$ImSwap@M@@YAXAEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@H@@YAHHHM@Z DD imagerel ??$ImLerp@H@@YAHHHM@Z
	DD	imagerel ??$ImLerp@H@@YAHHHM@Z+94
	DD	imagerel $unwind$??$ImLerp@H@@YAHHHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@I@@YAIIII@Z DD imagerel ??$ImClamp@I@@YAIIII@Z
	DD	imagerel ??$ImClamp@I@@YAIIII@Z+135
	DD	imagerel $unwind$??$ImClamp@I@@YAIIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@I@@YAXAEAI0@Z DD imagerel ??$ImSwap@I@@YAXAEAI0@Z
	DD	imagerel ??$ImSwap@I@@YAXAEAI0@Z+88
	DD	imagerel $unwind$??$ImSwap@I@@YAXAEAI0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@I@@YAIII@Z DD imagerel ??$ImMin@I@@YAIII@Z
	DD	imagerel ??$ImMin@I@@YAIII@Z+90
	DD	imagerel $unwind$??$ImMin@I@@YAIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@I@@YAIIIM@Z DD imagerel ??$ImLerp@I@@YAIIIM@Z
	DD	imagerel ??$ImLerp@I@@YAIIIM@Z+101
	DD	imagerel $unwind$??$ImLerp@I@@YAIIIM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@_J@@YA_J_J00@Z DD imagerel ??$ImClamp@_J@@YA_J_J00@Z
	DD	imagerel ??$ImClamp@_J@@YA_J_J00@Z+150
	DD	imagerel $unwind$??$ImClamp@_J@@YA_J_J00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@_J@@YAXAEA_J0@Z DD imagerel ??$ImSwap@_J@@YAXAEA_J0@Z
	DD	imagerel ??$ImSwap@_J@@YAXAEA_J0@Z+94
	DD	imagerel $unwind$??$ImSwap@_J@@YAXAEA_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@N@@YAXAEAN0@Z DD imagerel ??$ImSwap@N@@YAXAEAN0@Z
	DD	imagerel ??$ImSwap@N@@YAXAEAN0@Z+100
	DD	imagerel $unwind$??$ImSwap@N@@YAXAEAN0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@_J@@YA_J_J0@Z DD imagerel ??$ImMin@_J@@YA_J_J0@Z
	DD	imagerel ??$ImMin@_J@@YA_J_J0@Z+99
	DD	imagerel $unwind$??$ImMin@_J@@YA_J_J0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@_J@@YA_J_J0M@Z DD imagerel ??$ImLerp@_J@@YA_J_J0M@Z
	DD	imagerel ??$ImLerp@_J@@YA_J_J0M@Z+103
	DD	imagerel $unwind$??$ImLerp@_J@@YA_J_J0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z DD imagerel ??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z
	DD	imagerel ??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z+280
	DD	imagerel $unwind$??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@_K@@YA_K_K00@Z DD imagerel ??$ImClamp@_K@@YA_K_K00@Z
	DD	imagerel ??$ImClamp@_K@@YA_K_K00@Z+150
	DD	imagerel $unwind$??$ImClamp@_K@@YA_K_K00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@_K@@YAXAEA_K0@Z DD imagerel ??$ImSwap@_K@@YAXAEA_K0@Z
	DD	imagerel ??$ImSwap@_K@@YAXAEA_K0@Z+94
	DD	imagerel $unwind$??$ImSwap@_K@@YAXAEA_K0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@_K@@YA_K_K0M@Z DD imagerel ??$ImLerp@_K@@YA_K_K0M@Z
	DD	imagerel ??$ImLerp@_K@@YA_K_K0M@Z+217
	DD	imagerel $unwind$??$ImLerp@_K@@YA_K_K0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAtoi@M@@YAPEBDPEBDPEAM@Z DD imagerel ??$ImAtoi@M@@YAPEBDPEBDPEAM@Z
	DD	imagerel ??$ImAtoi@M@@YAPEBDPEBDPEAM@Z+303
	DD	imagerel $unwind$??$ImAtoi@M@@YAPEBDPEBDPEAM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@N@@YANNNN@Z DD imagerel ??$ImClamp@N@@YANNNN@Z
	DD	imagerel ??$ImClamp@N@@YANNNN@Z+166
	DD	imagerel $unwind$??$ImClamp@N@@YANNNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@N@@YANNN@Z DD imagerel ??$ImMin@N@@YANNN@Z
	DD	imagerel ??$ImMin@N@@YANNN@Z+108
	DD	imagerel $unwind$??$ImMin@N@@YANNN@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@N@@YANNNM@Z DD imagerel ??$ImLerp@N@@YANNNM@Z
	DD	imagerel ??$ImLerp@N@@YANNNM@Z+97
	DD	imagerel $unwind$??$ImLerp@N@@YANNNM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImAtoi@N@@YAPEBDPEBDPEAN@Z DD imagerel ??$ImAtoi@N@@YAPEBDPEBDPEAN@Z
	DD	imagerel ??$ImAtoi@N@@YAPEBDPEBDPEAN@Z+303
	DD	imagerel $unwind$??$ImAtoi@N@@YAPEBDPEBDPEAN@Z
pdata	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@ffefffffffffffff
CONST	SEGMENT
__real@ffefffffffffffff DQ 0ffefffffffffffffr	; -1.79769e+308
CONST	ENDS
;	COMDAT __real@ffdfffffffffffff
CONST	SEGMENT
__real@ffdfffffffffffff DQ 0ffdfffffffffffffr	; -8.98847e+307
CONST	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT __real@feffffff
CONST	SEGMENT
__real@feffffff DD 0feffffffr			; -1.70141e+38
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@c059000000000000
CONST	SEGMENT
__real@c059000000000000 DQ 0c059000000000000r	; -100
CONST	ENDS
;	COMDAT __real@bfe0000000000000
CONST	SEGMENT
__real@bfe0000000000000 DQ 0bfe0000000000000r	; -0.5
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf5db3d0
CONST	SEGMENT
__real@bf5db3d0 DD 0bf5db3d0r			; -0.866025
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be99999a
CONST	SEGMENT
__real@be99999a DD 0be99999ar			; -0.3
CONST	ENDS
;	COMDAT __real@be800000
CONST	SEGMENT
__real@be800000 DD 0be800000r			; -0.25
CONST	ENDS
;	COMDAT __real@7fefffffffffffff
CONST	SEGMENT
__real@7fefffffffffffff DQ 07fefffffffffffffr	; 1.79769e+308
CONST	ENDS
;	COMDAT __real@7fdfffffffffffff
CONST	SEGMENT
__real@7fdfffffffffffff DQ 07fdfffffffffffffr	; 8.98847e+307
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@7effffff
CONST	SEGMENT
__real@7effffff DD 07effffffr			; 1.70141e+38
CONST	ENDS
;	COMDAT __real@5f000000
CONST	SEGMENT
__real@5f000000 DD 05f000000r			; 9.22337e+18
CONST	ENDS
;	COMDAT __real@47efffffe0000000
CONST	SEGMENT
__real@47efffffe0000000 DQ 047efffffe0000000r	; 3.40282e+38
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+18
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@428c0000
CONST	SEGMENT
__real@428c0000 DD 0428c0000r			; 70
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e80000
CONST	SEGMENT
__real@40e80000 DD 040e80000r			; 7.25
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40666666
CONST	SEGMENT
__real@40666666 DD 040666666r			; 3.6
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@403f5c29
CONST	SEGMENT
__real@403f5c29 DD 0403f5c29r			; 2.99
CONST	ENDS
;	COMDAT __real@4024000000000000
CONST	SEGMENT
__real@4024000000000000 DQ 04024000000000000r	; 10
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fc00000
CONST	SEGMENT
__real@3fc00000 DD 03fc00000r			; 1.5
CONST	ENDS
;	COMDAT __real@3fb33333
CONST	SEGMENT
__real@3fb33333 DD 03fb33333r			; 1.4
CONST	ENDS
;	COMDAT __real@3f99999a
CONST	SEGMENT
__real@3f99999a DD 03f99999ar			; 1.2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7ff972
CONST	SEGMENT
__real@3f7ff972 DD 03f7ff972r			; 0.9999
CONST	ENDS
;	COMDAT __real@3f5db3d0
CONST	SEGMENT
__real@3f5db3d0 DD 03f5db3d0r			; 0.866025
CONST	ENDS
;	COMDAT __real@3f5db22d
CONST	SEGMENT
__real@3f5db22d DD 03f5db22dr			; 0.866
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f350481
CONST	SEGMENT
__real@3f350481 DD 03f350481r			; 0.7071
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb0c6f7a0000000
CONST	SEGMENT
__real@3eb0c6f7a0000000 DQ 03eb0c6f7a0000000r	; 1e-06
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e19999a
CONST	SEGMENT
__real@3e19999a DD 03e19999ar			; 0.15
CONST	ENDS
;	COMDAT __real@3e09374c
CONST	SEGMENT
__real@3e09374c DD 03e09374cr			; 0.134
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3cdd2f1b
CONST	SEGMENT
__real@3cdd2f1b DD 03cdd2f1br			; 0.027
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-06
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@ DB 'p'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'B', 00H, 'u', 00H
	DB	'f', 00H, '.', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'p', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'B', 00H, 'u', 00H, 'f', 00H, '.', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
CONST	SEGMENT
??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@HMBBPDPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf@
CONST	SEGMENT
??_C@_1BK@HMBBPDPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z@4JA DD 01f60H ; `ImGui::TabItemBackground'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JA@BHHCJLLE@?$AA?$CB?$AAi?$AAs?$AA_?$AAt?$AAa?$AAb?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5@
CONST	SEGMENT
??_C@_1JA@BHHCJLLE@?$AA?$CB?$AAi?$AAs?$AA_?$AAt?$AAa?$AAb?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5@ DB '!'
	DB	00H, 'i', 00H, 's', 00H, '_', 00H, 't', 00H, 'a', 00H, 'b', 00H
	DB	'_', 00H, 'b', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '!', 00H, '(', 00H
	DB	't', 00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'r'
	DB	00H, '-', 00H, '>', 00H, 'S', 00H, 'e', 00H, 'l', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'T', 00H, 'a', 00H, 'b'
	DB	00H, 'I', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	't', 00H, 'a', 00H, 'b', 00H, '-', 00H, '>', 00H, 'I', 00H, 'D'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, 's', 00H
	DB	'_', 00H, 't', 00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBNJJJJI@?$CF?4?$CKs@
CONST	SEGMENT
??_C@_04EBNJJJJI@?$CF?4?$CKs@ DB '%.*s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1PO@BEHLBGBB@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@
CONST	SEGMENT
??_C@_1PO@BEHLBGBB@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, '(', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'I', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '_', 00H, 'L', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, '|', 00H, ' ', 00H, 'I', 00H, 'm'
	DB	00H, 'G', 00H, 'u', 00H, 'i', 00H, 'T', 00H, 'a', 00H, 'b', 00H
	DB	'I', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, '_', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ')', 00H, ')'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '(', 00H, 'I', 00H
	DB	'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'T', 00H, 'a', 00H, 'b'
	DB	00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'F', 00H, 'l', 00H
	DB	'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'L', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '|', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'T'
	DB	00H, 'a', 00H, 'b', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'T'
	DB	00H, 'r', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@JEBFCDGI@?$AA?$CB?$AAp?$AA_?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CB?$AA?$CI?$AAf?$AAl@
CONST	SEGMENT
??_C@_1FO@JEBFCDGI@?$AA?$CB?$AAp?$AA_?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CB?$AA?$CI?$AAf?$AAl@ DB '!'
	DB	00H, 'p', 00H, '_', 00H, 'o', 00H, 'p', 00H, 'e', 00H, 'n', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '!', 00H, '(', 00H, 'f'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'T'
	DB	00H, 'a', 00H, 'b', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'B'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z@4JA DD 01e6fH ; `ImGui::TabItemEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??TabItemButton@ImGui@@YA_NPEBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabItemButton@ImGui@@YA_NPEBDH@Z@4JA DD 01e5fH ; `ImGui::TabItemButton'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DK@HGEILAOB@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAT?$AAa@
CONST	SEGMENT
??_C@_1DK@HGEILAOB@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAT?$AAa@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, '>', 00H, 'L', 00H, 'a', 00H, 's', 00H, 't', 00H, 'T'
	DB	00H, 'a', 00H, 'b', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'I', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JM@OHPMLLD@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1JM@OHPMLLD@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@ DB '('
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'N', 00H
	DB	'e', 00H, 'e', 00H, 'd', 00H, 's', 00H, ' ', 00H, 't', 00H, 'o'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'b', 00H, 'e'
	DB	00H, 't', 00H, 'w', 00H, 'e', 00H, 'e', 00H, 'n', 00H, ' ', 00H
	DB	'B', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'T', 00H, 'a'
	DB	00H, 'b', 00H, 'B', 00H, 'a', 00H, 'r', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'E', 00H, 'n'
	DB	00H, 'd', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'B', 00H, 'a', 00H
	DB	'r', 00H, '(', 00H, ')', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??EndTabItem@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EndTabItem@ImGui@@YAXXZ@4JA DD 01e4cH	; `ImGui::EndTabItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@NKMOAMGI@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
CONST	SEGMENT
??_C@_1EI@NKMOAMGI@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@ DB '!'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'I', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '_', 00H, 'B', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H
	DB	'n', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JC@EEMJDIKN@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN@
CONST	SEGMENT
??_C@_1JC@EEMJDIKN@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN@ DB '('
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'r', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"'
	DB	00H, 'N', 00H, 'e', 00H, 'e', 00H, 'd', 00H, 's', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'b', 00H, 'e', 00H, 't', 00H, 'w', 00H, 'e', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, 'B', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'B', 00H, 'a', 00H, 'r', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H
	DB	'E', 00H, 'n', 00H, 'd', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'B'
	DB	00H, 'a', 00H, 'r', 00H, '(', 00H, ')', 00H, '!', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@EHILAJFJ@Needs?5to?5be?5called?5between?5Begi@
CONST	SEGMENT
??_C@_0DK@EHILAJFJ@Needs?5to?5be?5called?5between?5Begi@ DB 'Needs to be '
	DB	'called between BeginTabBar() and EndTabBar()!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z@4JA DD 01e34H ; `ImGui::BeginTabItem'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_03CPFCAGPK@?$CD?$CDv@
CONST	SEGMENT
??_C@_03CPFCAGPK@?$CD?$CDv@ DB '##v', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03BHPCMDPH@?$CD?$CD?$DO@
CONST	SEGMENT
??_C@_03BHPCMDPH@?$CD?$CD?$DO@ DB '##>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFMEKBHF@?$CD?$CD?$DM@
CONST	SEGMENT
??_C@_03CFMEKBHF@?$CD?$CD?$DM@ DB '##<', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z@4JA DD 01d81H ; `ImGui::TabBarQueueReorderFromMousePos'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@NGAACFPK@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAR?$AAe?$AAo?$AAr?$AAd?$AAe@
CONST	SEGMENT
??_C@_1EE@NGAACFPK@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAR?$AAe?$AAo?$AAr?$AAd?$AAe@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'r', 00H
	DB	'-', 00H, '>', 00H, 'R', 00H, 'e', 00H, 'o', 00H, 'r', 00H, 'd'
	DB	00H, 'e', 00H, 'r', 00H, 'R', 00H, 'e', 00H, 'q', 00H, 'u', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'I'
	DB	00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@DOPCJBFN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BI@DOPCJBFN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z@4JA DD 01d79H ; `ImGui::TabBarQueueReorder'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@JMLJLLDN@?$AA?$CB?$AA?$CI?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1FC@JMLJLLDN@?$AA?$CB?$AA?$CI?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ DB '!'
	DB	00H, '(', 00H, 't', 00H, 'a', 00H, 'b', 00H, '-', 00H, '>', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm'
	DB	00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H
	DB	'B', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z@4JA DD 01d3aH ; `ImGui::TabBarCloseTab'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@IMDNAHCI@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd@
CONST	SEGMENT
??_C@_1DC@IMDNAHCI@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H, 'i'
	DB	00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GG@ODBMJKON@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AAV@
CONST	SEGMENT
??_C@_1GG@ODBMJKON@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AAV@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, '-', 00H, '>', 00H, 'L', 00H, 'a', 00H
	DB	's', 00H, 't', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, 'V', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H, 'r', 00H, '-', 00H
	DB	'>', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'F', 00H, 'r'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, 'V', 00H, 'i', 00H, 's', 00H
	DB	'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z@4JA DD 01c2bH ; `ImGui::TabBarLayout'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HE@HMPOLDED@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1HE@HMPOLDED@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@ DB '('
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'M', 00H
	DB	'i', 00H, 's', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'B', 00H, 'e', 00H, 'g', 00H
	DB	'i', 00H, 'n', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'B', 00H, 'a'
	DB	00H, 'r', 00H, '(', 00H, ')', 00H, '/', 00H, 'E', 00H, 'n', 00H
	DB	'd', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'B', 00H, 'a', 00H, 'r'
	DB	00H, '(', 00H, ')', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@DPIPLNLI@Mismatched?5BeginTabBar?$CI?$CJ?1EndTab@
CONST	SEGMENT
??_C@_0CG@DPIPLNLI@Mismatched?5BeginTabBar?$CI?$CJ?1EndTab@ DB 'Mismatche'
	DB	'd BeginTabBar()/EndTabBar()!', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??EndTabBar@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EndTabBar@ImGui@@YAXXZ@4JA DD 01c02H	; `ImGui::EndTabBar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@BKOLOJFE@?$CD?$CDMainMenuBar@
CONST	SEGMENT
??_C@_0O@BKOLOJFE@?$CD?$CDMainMenuBar@ DB '##MainMenuBar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@MCAEPPML@?$AAd?$AAi?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAD?$AAi?$AAr@
CONST	SEGMENT
??_C@_1CK@MCAEPPML@?$AAd?$AAi?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAD?$AAi?$AAr@ DB 'd'
	DB	00H, 'i', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, '_', 00H, 'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z@4JA DD 01a31H ; `ImGui::BeginViewportSideBar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DI@HJHPMKIH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn?$AAu@
CONST	SEGMENT
??_C@_1DI@HJHPMKIH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn?$AAu@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H
	DB	'>', 00H, 'D', 00H, 'C', 00H, '.', 00H, 'M', 00H, 'e', 00H, 'n'
	DB	00H, 'u', 00H, 'B', 00H, 'a', 00H, 'r', 00H, 'A', 00H, 'p', 00H
	DB	'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@MMAFNJJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1FC@MMAFNJJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H
	DB	'>', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' '
	DB	00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H
	DB	'i', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w'
	DB	00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H
	DB	'M', 00H, 'e', 00H, 'n', 00H, 'u', 00H, 'B', 00H, 'a', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@MKPILOEH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAN?$AAa?$AAv?$AAL@
CONST	SEGMENT
??_C@_1GE@MKPILOEH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAN?$AAa?$AAv?$AAL@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H
	DB	'>', 00H, 'D', 00H, 'C', 00H, '.', 00H, 'N', 00H, 'a', 00H, 'v'
	DB	00H, 'L', 00H, 'a', 00H, 'y', 00H, 'e', 00H, 'r', 00H, 's', 00H
	DB	'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'M'
	DB	00H, 'a', 00H, 's', 00H, 'k', 00H, 'N', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, ' ', 00H, '&', 00H, ' ', 00H, '(', 00H, '1', 00H, ' '
	DB	00H, '<', 00H, '<', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 'y', 00H
	DB	'e', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??EndMenuBar@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EndMenuBar@ImGui@@YAXXZ@4JA DD 01a05H	; `ImGui::EndMenuBar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09FHPMMDGK@?$CD?$CDmenubar@
CONST	SEGMENT
??_C@_09FHPMMDGK@?$CD?$CDmenubar@ DB '##menubar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MIADNLCN@?$AA?$CB?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn@
CONST	SEGMENT
??_C@_1DK@MIADNLCN@?$AA?$CB?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn@ DB '!'
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'-', 00H, '>', 00H, 'D', 00H, 'C', 00H, '.', 00H, 'M', 00H, 'e'
	DB	00H, 'n', 00H, 'u', 00H, 'B', 00H, 'a', 00H, 'r', 00H, 'A', 00H
	DB	'p', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginMenuBar@ImGui@@YA_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginMenuBar@ImGui@@YA_NXZ@4JA DD 019e9H ; `ImGui::BeginMenuBar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FO@NFEGNMHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@
CONST	SEGMENT
??_C@_1FO@NFEGNMHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@ DB 'c'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '(', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ')', 00H, '(', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	'o', 00H, 'f', 00H, '(', 00H, 'P', 00H, 'o', 00H, 's', 00H, ')'
	DB	00H, ' ', 00H, '/', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, '*', 00H, '(', 00H, 'P'
	DB	00H, 'o', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Update@ImGuiMenuColumns@@QEAAXHM_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Update@ImGuiMenuColumns@@QEAAXHM_N@Z@4JA DD 019c3H ; `ImGuiMenuColumns::Update'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f@
CONST	SEGMENT
??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f@ DB '%s: %.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EKEPIENH@?$CF?$CFs?3?5?$CFs@
CONST	SEGMENT
??_C@_07EKEPIENH@?$CF?$CFs?3?5?$CFs@ DB '%%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
CONST	SEGMENT
??_C@_06GBEGMGE@?$CFs?3?5?$CFd@ DB '%s: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
CONST	SEGMENT
??_C@_06DJHOIPC@?$CFs?3?5?$CFs@ DB '%s: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false@
CONST	SEGMENT
??_C@_05LAPONLG@false@ DB 'false', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@JIGPMMPH@?$AAv?$AA1?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1EK@JIGPMMPH@?$AAv?$AA1?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB 'v'
	DB	00H, '1', 00H, '_', 00H, 'i', 00H, 'd', 00H, 'x', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'v', 00H, '1', 00H, '_', 00H, 'i', 00H, 'd', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'u', 00H, 'e', 00H, 's', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OADNPGHP@?$CFd?3?5?$CF8?44g@
CONST	SEGMENT
??_C@_09OADNPGHP@?$CFd?3?5?$CF8?44g@ DB '%d: %8.4g', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OBCBLNMM@?$CFd?3?5?$CF8?44g?6?$CFd?3?5?$CF8?44g@
CONST	SEGMENT
??_C@_0BE@OBCBLNMM@?$CFd?3?5?$CF8?44g?6?$CFd?3?5?$CF8?44g@ DB '%d: %8.4g', 0aH
	DB	'%d: %8.4g', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@HCGMCBDC@?$AAv?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAv@
CONST	SEGMENT
??_C@_1EG@HCGMCBDC@?$AAv?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAv@ DB 'v'
	DB	00H, '_', 00H, 'i', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'v', 00H, '_', 00H, 'i', 00H, 'd', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e'
	DB	00H, 's', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z@4JA DD 018f6H ; `ImGui::PlotEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BBK@DDPDAAPA@?$AA?$CI?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5@
CONST	SEGMENT
??_C@_1BBK@DDPDAAPA@?$AA?$CI?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5@ DB '('
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'-', 00H, '>', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H
	DB	'u', 00H, 'i', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'i', 00H, 'l', 00H, 'd', 00H, 'W'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ')', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'M', 00H, 'i'
	DB	00H, 's', 00H, 'm', 00H, 'a', 00H, 't', 00H, 'c', 00H, 'h', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, 'B', 00H, 'e', 00H, 'g', 00H, 'i'
	DB	00H, 'n', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'B', 00H
	DB	'o', 00H, 'x', 00H, '/', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'L'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'B', 00H, 'o', 00H, 'x', 00H
	DB	' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 's', 00H, '.'
	DB	00H, ' ', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'y', 00H
	DB	'o', 00H, 'u', 00H, ' ', 00H, 't', 00H, 'e', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'n', 00H, ' ', 00H, 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, 'o', 00H
	DB	'f', 00H, ' ', 00H, 'B', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n'
	DB	00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, 'B', 00H, 'o', 00H
	DB	'x', 00H, '?', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FJ@FLEOOEOG@Mismatched?5BeginListBox?1EndList@
CONST	SEGMENT
??_C@_0FJ@FLEOOEOG@Mismatched?5BeginListBox?1EndList@ DB 'Mismatched Begi'
	DB	'nListBox/EndListBox calls. Did you test the return value of B'
	DB	'eginListBox?', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??EndListBox@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EndListBox@ImGui@@YAXXZ@4JA DD 018abH	; `ImGui::EndListBox'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06KIIKKNMI@?$CDCLOSE@
CONST	SEGMENT
??_C@_06KIIKKNMI@?$CDCLOSE@ DB '#CLOSE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@KOOPJPAL@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAI?$AAD?$AAS?$AAt?$AAa?$AAc?$AAk@
CONST	SEGMENT
??_C@_1DC@KOOPJPAL@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAI?$AAD?$AAS?$AAt?$AAa?$AAc?$AAk@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H
	DB	'>', 00H, 'I', 00H, 'D', 00H, 'S', 00H, 't', 00H, 'a', 00H, 'c'
	DB	00H, 'k', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TreePop@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TreePop@ImGui@@YAXXZ@4JA DD 01765H	; `ImGui::TreePop'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09GHACPMKF@?$CDTreePush@
CONST	SEGMENT
??_C@_09GHACPMKF@?$CDTreePush@ DB '#TreePush', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OIJOKPOL@?$CD?$CD?$CD@
CONST	SEGMENT
??_C@_03OIJOKPOL@?$CD?$CD?$CD@ DB '###', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@OMMPBCGC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1GM@OMMPBCGC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ DB 'b'
	DB	00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, '_', 00H
	DB	'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'B', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, 'F'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'P', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 's', 00H, 'e', 00H, 'd', 00H, 'O'
	DB	00H, 'n', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'g', 00H, 'D', 00H
	DB	'r', 00H, 'o', 00H, 'p', 00H, 'H', 00H, 'o', 00H, 'l', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z@4JA DD 01691H ; `ImGui::TreeNodeBehavior'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09KEDLMDJL@Alpha?5Bar@
CONST	SEGMENT
??_C@_09KEDLMDJL@Alpha?5Bar@ DB 'Alpha Bar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@ENPGBMIC@?$CD?$CDpreviewing_picker@
CONST	SEGMENT
??_C@_0BE@ENPGBMIC@?$CD?$CDpreviewing_picker@ DB '##previewing_picker', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KFBFGFJL@?$CD?$CDselectable@
CONST	SEGMENT
??_C@_0N@KFBFGFJL@?$CD?$CDselectable@ DB '##selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EJHNAHBL@?$CI?$CFd?0?$CFd?0?$CFd?0?$CFd?$CJ@
CONST	SEGMENT
??_C@_0O@EJHNAHBL@?$CI?$CFd?0?$CFd?0?$CFd?0?$CFd?$CJ@ DB '(%d,%d,%d,%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GKCJMPCH@?$CI?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?$CJ@
CONST	SEGMENT
??_C@_0BN@GKCJMPCH@?$CI?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?$CJ@ DB '('
	DB	'%.3ff, %.3ff, %.3ff, %.3ff)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OPMHGHMB@Copy@
CONST	SEGMENT
??_C@_04OPMHGHMB@Copy@ DB 'Copy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09NMCCFHEI@Copy?5as?4?4@
CONST	SEGMENT
??_C@_09NMCCFHEI@Copy?5as?4?4@ DB 'Copy as..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MDNPBJBM@0?400?4?41?400@
CONST	SEGMENT
??_C@_0L@MDNPBJBM@0?400?4?41?400@ DB '0.00..1.00', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDBEKFBH@0?4?4255@
CONST	SEGMENT
??_C@_06FDBEKFBH@0?4?4255@ DB '0..255', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJOBKKAE@Hex@
CONST	SEGMENT
??_C@_03CJOBKKAE@Hex@ DB 'Hex', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CAADKAK@HSV@
CONST	SEGMENT
??_C@_03CAADKAK@HSV@ DB 'HSV', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICFFBAI@RGB@
CONST	SEGMENT
??_C@_03ICFFBAI@RGB@ DB 'RGB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@EEDEAEPG@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f?0?5A?3?5?$CF@
CONST	SEGMENT
??_C@_0CD@EEDEAEPG@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f?0?5A?3?5?$CF@ DB 'H'
	DB	': %.3f, S: %.3f, V: %.3f, A: %.3f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HKNBICJE@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f@
CONST	SEGMENT
??_C@_0BK@HKNBICJE@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f@ DB 'H'
	DB	': %.3f, S: %.3f, V: %.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@EBPMGCGK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X?6R?3?$CFd?0?5G?3?$CFd?0?5B@
CONST	SEGMENT
??_C@_0EC@EBPMGCGK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X?6R?3?$CFd?0?5G?3?$CFd?0?5B@ DB '#'
	DB	'%02X%02X%02X%02X', 0aH, 'R:%d, G:%d, B:%d, A:%d', 0aH, '(%.3f'
	DB	', %.3f, %.3f, %.3f)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FAPNKOHO@?$CD?$CF02X?$CF02X?$CF02X?6R?3?5?$CFd?0?5G?3?5?$CFd?0?5B?3?5@
CONST	SEGMENT
??_C@_0DF@FAPNKOHO@?$CD?$CF02X?$CF02X?$CF02X?6R?3?5?$CFd?0?5G?3?5?$CFd?0?5B?3?5@ DB '#'
	DB	'%02X%02X%02X', 0aH, 'R: %d, G: %d, B: %d', 0aH, '(%.3f, %.3f,'
	DB	' %.3f)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09JCCDBEFL@?$CD?$CDpreview@
CONST	SEGMENT
??_C@_09JCCDBEFL@?$CD?$CDpreview@ DB '##preview', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HE@ECJOEGME@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1HE@ECJOEGME@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	'E', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, '_', 00H, '_', 00H, 'D', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 'M'
	DB	00H, 'a', 00H, 's', 00H, 'k', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA DD 01571H ; `ImGui::SetColorEditOptions'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05PDOBBJNA@Color@
CONST	SEGMENT
??_C@_05PDOBBJNA@Color@ DB 'Color', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BOAMFJMJ@?$CD?$CDhex@
CONST	SEGMENT
??_C@_05BOAMFJMJ@?$CD?$CDhex@ DB '##hex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JICEKLIF@?$CD?$CDhsv@
CONST	SEGMENT
??_C@_05JICEKLIF@?$CD?$CDhsv@ DB '##hsv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JCABMAIH@?$CD?$CDrgb@
CONST	SEGMENT
??_C@_05JCABMAIH@?$CD?$CDrgb@ DB '##rgb', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGJKOBOK@?$CD?$CDoriginal@
CONST	SEGMENT
??_C@_0L@IGJKOBOK@?$CD?$CDoriginal@ DB '##original', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCPBJHAO@Original@
CONST	SEGMENT
??_C@_08DCPBJHAO@Original@ DB 'Original', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CDENILGE@?$CD?$CDcurrent@
CONST	SEGMENT
??_C@_09CDENILGE@?$CD?$CDcurrent@ DB '##current', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDIFFIJI@Current@
CONST	SEGMENT
??_C@_07EDIFFIJI@Current@ DB 'Current', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IAEKHIAN@alpha@
CONST	SEGMENT
??_C@_05IAEKHIAN@alpha@ DB 'alpha', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GKJJMKFG@hue@
CONST	SEGMENT
??_C@_03GKJJMKFG@hue@ DB 'hue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02CPGMCOJE@sv@
CONST	SEGMENT
??_C@_02CPGMCOJE@sv@ DB 'sv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PPLPHHG@hsv@
CONST	SEGMENT
??_C@_03PPLPHHG@hsv@ DB 'hsv', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@IEGAFBEB@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1HA@IEGAFBEB@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	'E', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, '_', 00H, '_', 00H, 'P', 00H, 'i', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 'r', 00H, 'M', 00H, 'a', 00H, 's'
	DB	00H, 'k', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z@4JA DD 013a2H ; `ImGui::ColorPicker4'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06LAOCEMMP@_COL4F@
CONST	SEGMENT
??_C@_06LAOCEMMP@_COL4F@ DB '_COL4F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFKNFKEK@_COL3F@
CONST	SEGMENT
??_C@_06LFKNFKEK@_COL3F@ DB '_COL3F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHEANBBL@?$CD?$CDpicker@
CONST	SEGMENT
??_C@_08HHEANBBL@?$CD?$CDpicker@ DB '##picker', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAKAMBBI@picker@
CONST	SEGMENT
??_C@_06MAKAMBBI@picker@ DB 'picker', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GLNBIEEK@?$CD?$CDColorButton@
CONST	SEGMENT
??_C@_0O@GLNBIEEK@?$CD?$CDColorButton@ DB '##ColorButton', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KODLFHPJ@?$CF02X?$CF02X?$CF02X@
CONST	SEGMENT
??_C@_0N@KODLFHPJ@?$CF02X?$CF02X?$CF02X@ DB '%02X%02X%02X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DDMGLOLI@?$CF02X?$CF02X?$CF02X?$CF02X@
CONST	SEGMENT
??_C@_0BB@DDMGLOLI@?$CF02X?$CF02X?$CF02X?$CF02X@ DB '%02X%02X%02X%02X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNCEJPDI@?$CD?$CDText@
CONST	SEGMENT
??_C@_06MNCEJPDI@?$CD?$CDText@ DB '##Text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBPBDFLP@?$CD?$CF02X?$CF02X?$CF02X@
CONST	SEGMENT
??_C@_0O@MBPBDFLP@?$CD?$CF02X?$CF02X?$CF02X@ DB '#%02X%02X%02X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CKPCOFBK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X@
CONST	SEGMENT
??_C@_0BC@CKPCOFBK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X@ DB '#%02X%02X%02X%02'
	DB	'X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKKCBBMM@context@
CONST	SEGMENT
??_C@_07JKKCBBMM@context@ DB 'context', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNGMMMAL@M?3000@
CONST	SEGMENT
??_C@_05BNGMMMAL@M?3000@ DB 'M:000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FFNLLALM@M?30?4000@
CONST	SEGMENT
??_C@_07FFNLLALM@M?30?4000@ DB 'M:0.000', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@CDHIBPHM@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1GO@CDHIBPHM@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	'E', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, '_', 00H, '_', 00H, 'I', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, 'M', 00H, 'a', 00H, 's', 00H, 'k'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@IFIJNDDD@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1HC@IFIJNDDD@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'o', 00H, 'r', 00H
	DB	'E', 00H, 'd', 00H, 'i', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, '_', 00H, '_', 00H, 'D', 00H, 'i', 00H
	DB	's', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'M', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4JA DD 0129bH ; `ImGui::ColorEdit4'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@MOOHJKEO@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@
CONST	SEGMENT
??_C@_1EE@MOOHJKEO@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@ DB 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'n', 00H
	DB	'e', 00H, 'w', 00H, '_', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@CHDFECEK@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@
CONST	SEGMENT
??_C@_1DG@CHDFECEK@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@ DB 'a'
	DB	00H, 'p', 00H, 'p', 00H, 'l', 00H, 'y', 00H, '_', 00H, 'n', 00H
	DB	'e', 00H, 'w', 00H, '_', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@EHLBBEIB@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@
CONST	SEGMENT
??_C@_1HG@EHLBBEIB@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'T', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 'L', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'l', 00H, 'e', 00H, 'n', 00H, '('
	DB	00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a'
	DB	00H, '.', 00H, 'B', 00H, 'u', 00H, 'f', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@HOPDKFNI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAF@
CONST	SEGMENT
??_C@_1DK@HOPDKFNI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAF@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.'
	DB	00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@GDPCIOA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@
CONST	SEGMENT
??_C@_1FK@GDPCIOA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'C', 00H, 'a', 00H, 'p', 00H, 'a', 00H, 'c'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, 'A', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@GEAEFBFI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@
CONST	SEGMENT
??_C@_1EO@GEAEFBFI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'A', 00H
	DB	'.', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1OC@MAFKNLH@?$AAi?$AAo?$AA?4?$AAK?$AAe?$AAy?$AAM?$AAo?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG@
CONST	SEGMENT
??_C@_1OC@MAFKNLH@?$AAi?$AAo?$AA?4?$AAK?$AAe?$AAy?$AAM?$AAo?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG@ DB 'i'
	DB	00H, 'o', 00H, '.', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 'M', 00H
	DB	'o', 00H, 'd', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'G', 00H, 'e', 00H, 't', 00H, 'M', 00H, 'e', 00H, 'r', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 'M'
	DB	00H, 'o', 00H, 'd', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H
	DB	's', 00H, '(', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '"', 00H, 'M', 00H, 'i', 00H, 's', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 'c', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'i', 00H, 'o', 00H, '.', 00H, 'K', 00H, 'e', 00H, 'y', 00H
	DB	'C', 00H, 't', 00H, 'r', 00H, 'l', 00H, '/', 00H, 'i', 00H, 'o'
	DB	00H, '.', 00H, 'K', 00H, 'e', 00H, 'y', 00H, 'S', 00H, 'h', 00H
	DB	'i', 00H, 'f', 00H, 't', 00H, '/', 00H, 'i', 00H, 'o', 00H, '.'
	DB	00H, 'K', 00H, 'e', 00H, 'y', 00H, 'A', 00H, 'l', 00H, 't', 00H
	DB	'/', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'K', 00H, 'e', 00H, 'y'
	DB	00H, 'S', 00H, 'u', 00H, 'p', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'v', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'K'
	DB	00H, 'e', 00H, 'y', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 's', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@IKLAPCIG@Mismatching?5io?4KeyCtrl?1io?4KeySh@
CONST	SEGMENT
??_C@_0EH@IKLAPCIG@Mismatching?5io?4KeyCtrl?1io?4KeySh@ DB 'Mismatching i'
	DB	'o.KeyCtrl/io.KeyShift/io.KeyAlt/io.KeySuper vs io.KeyMods', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NI@EFFIGGBI@?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo?$AAr?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1NI@EFFIGGBI@?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo?$AAr?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO@ DB 'p'
	DB	00H, 'a', 00H, 's', 00H, 's', 00H, 'w', 00H, 'o', 00H, 'r', 00H
	DB	'd', 00H, '_', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 'G', 00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H
	DB	's', 00H, '.', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y'
	DB	00H, '(', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 's', 00H, 's', 00H, 'w', 00H, 'o', 00H, 'r'
	DB	00H, 'd', 00H, '_', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x'
	DB	00H, 'A', 00H, 'd', 00H, 'v', 00H, 'a', 00H, 'n', 00H, 'c', 00H
	DB	'e', 00H, 'X', 00H, '.', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't'
	DB	00H, 'y', 00H, '(', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 's', 00H, 's', 00H, 'w', 00H, 'o'
	DB	00H, 'r', 00H, 'd', 00H, '_', 00H, 'f', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, '-', 00H, '>', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, 'L', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'u', 00H
	DB	'p', 00H, '.', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CMKEKNGP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@
CONST	SEGMENT
??_C@_1DC@CMKEKNGP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@ DB 's'
	DB	00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '-', 00H, '>', 00H, 'I', 00H, 'D', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'i', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CBGPMFEC@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BM@CBGPMFEC@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@MGOPIKJM@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@
CONST	SEGMENT
??_C@_1MG@MGOPIKJM@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@ DB '!'
	DB	00H, '(', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H
	DB	's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'C', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ')', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H
	DB	's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'A', 00H, 'l', 00H
	DB	'l', 00H, 'o', 00H, 'w', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'I'
	DB	00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LI@BDNHGOFF@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@
CONST	SEGMENT
??_C@_1LI@BDNHGOFF@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@ DB '!'
	DB	00H, '(', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H
	DB	's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'C', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'H'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'y', 00H
	DB	')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H, 'f'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'I'
	DB	00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '_', 00H, 'M', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'i', 00H
	DB	'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ')', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@KCJLPEOI@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AAu?$AAf@
CONST	SEGMENT
??_C@_1DE@KCJLPEOI@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AAu?$AAf@ DB 'b'
	DB	00H, 'u', 00H, 'f', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA DD 0f60H ; `ImGui::InputTextEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LA@GNNDJIHJ@?$AAi?$AAn?$AAp?$AAu?$AAt?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1LA@GNNDJIHJ@?$AAi?$AAn?$AAp?$AAu?$AAt?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?5?$AA?$DN?$AA?$DN@ DB 'i'
	DB	00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 's', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H
	DB	'i', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'S'
	DB	00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '_', 00H
	DB	'K', 00H, 'e', 00H, 'y', 00H, 'b', 00H, 'o', 00H, 'a', 00H, 'r'
	DB	00H, 'd', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H, 's', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'S', 00H
	DB	'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H, '_', 00H, 'C'
	DB	00H, 'l', 00H, 'i', 00H, 'p', 00H, 'b', 00H, 'o', 00H, 'a', 00H
	DB	'r', 00H, 'd', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z@4JA DD 0f03H ; `InputTextFilterCharacter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@LDGOBGNL@?$AAB?$AAu?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa@
CONST	SEGMENT
??_C@_1DM@LDGOBGNL@?$AAB?$AAu?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa@ DB 'B'
	DB	00H, 'u', 00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'e', 00H, 'd', 00H, 'i', 00H, 't', 00H, '_', 00H, 's', 00H, 't'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'A', 00H, '.', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@EFFMAEBL@?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5@
CONST	SEGMENT
??_C@_1GI@EFFMAEBL@?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5@ DB 'e'
	DB	00H, 'd', 00H, 'i', 00H, 't', 00H, '_', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'I', 00H, 'D'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'g', 00H, '.', 00H, 'A', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'I', 00H, 'd', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'e', 00H, 'd', 00H, 'i'
	DB	00H, 't', 00H, '_', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, '-', 00H, '>', 00H, 'I', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z@4JA DD 0ee2H ; `ImGuiInputTextCallbackData::InsertChars'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EA@OOMMGKHM@?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAc?$AAo?$AAu@
CONST	SEGMENT
??_C@_1EA@OOMMGKHM@?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAc?$AAo?$AAu@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'b', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'T', 00H, 'e', 00H, 'x'
	DB	00H, 't', 00H, 'L', 00H, 'e', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z@4JA DD 0ed0H ; `ImGuiInputTextCallbackData::DeleteChars'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@2@PEBGH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@2@PEBGH@Z@4JA DD 0eb0H ; `ImStb::stb_textedit_replace'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JE@JEJNCKKO@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@
CONST	SEGMENT
??_C@_1JE@JEJNCKKO@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@ DB '('
	DB	00H, '(', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '*', 00H
	DB	')', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '-', 00H, '>', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'o', 00H, '_', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ' ', 00H, '+', 00H
	DB	' ', 00H, '1', 00H, ')', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'm'
	DB	00H, 'o', 00H, 'v', 00H, 'e', 00H, '_', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ')', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HI@OHEJKGLD@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@
CONST	SEGMENT
??_C@_1HI@OHEJKGLD@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@ DB '('
	DB	00H, '(', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'r', 00H, '*', 00H
	DB	')', 00H, '(', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '-', 00H, '>', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 'c', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'e', 00H, 'd', 00H, 'o', 00H, '_', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, ')', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, '_', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@MBLIEGNC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@MBLIEGNC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 't', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 't', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@2@@Z@4JA DD 0480H ; `ImStb::stb_textedit_discard_redo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DG@IEAPMEMO@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AA?9@
CONST	SEGMENT
??_C@_1DG@IEAPMEMO@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AA?9@ DB 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, '-', 00H, '>', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'W', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@MNHDBBDP@?$AAp?$AAo?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn@
CONST	SEGMENT
??_C@_1CA@MNHDBBDP@?$AAp?$AAo?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn@ DB 'p'
	DB	00H, 'o', 00H, 's', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e'
	DB	00H, 'n', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z@4JA DD 0e78H ; `ImStb::STB_TEXTEDIT_INSERTCHARS'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?STB_TEXTEDIT_NEWLINE@ImStb@@3GA DW 0aH			; ImStb::STB_TEXTEDIT_NEWLINE
	ORG $+6
?ids@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAPEBDA DQ FLAT:??_C@_03CEFFAPNG@?$CD?$CDX@ ; `ImGui::ColorEdit4'::`32'::ids
	DQ	FLAT:??_C@_03DNEODOJH@?$CD?$CDY@
	DQ	FLAT:??_C@_03BGGDGNFE@?$CD?$CDZ@
	DQ	FLAT:??_C@_03KDMNBDBJ@?$CD?$CDW@
	ORG $+8
?fmt_table_int@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAY03PEBDA DQ FLAT:??_C@_03GOOLIKIF@?$CF3d@ ; `ImGui::ColorEdit4'::`32'::fmt_table_int
	DQ	FLAT:??_C@_03GOOLIKIF@?$CF3d@
	DQ	FLAT:??_C@_03GOOLIKIF@?$CF3d@
	DQ	FLAT:??_C@_03GOOLIKIF@?$CF3d@
	DQ	FLAT:??_C@_05FELKPNOB@R?3?$CF3d@
	DQ	FLAT:??_C@_05HKBGOMJ@G?3?$CF3d@
	DQ	FLAT:??_C@_05FHGMPPHK@B?3?$CF3d@
	DQ	FLAT:??_C@_05NBPIINNE@A?3?$CF3d@
	DQ	FLAT:??_C@_05PGPHNMBM@H?3?$CF3d@
	DQ	FLAT:??_C@_05JPOGCOEE@S?3?$CF3d@
	DQ	FLAT:??_C@_05MPCLLPPH@V?3?$CF3d@
	DQ	FLAT:??_C@_05NBPIINNE@A?3?$CF3d@
?fmt_table_float@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAY03PEBDA DQ FLAT:??_C@_05ONBKDNLK@?$CF0?43f@ ; `ImGui::ColorEdit4'::`32'::fmt_table_float
	DQ	FLAT:??_C@_05ONBKDNLK@?$CF0?43f@
	DQ	FLAT:??_C@_05ONBKDNLK@?$CF0?43f@
	DQ	FLAT:??_C@_05ONBKDNLK@?$CF0?43f@
	DQ	FLAT:??_C@_07CCOKENNH@R?3?$CF0?43f@
	DQ	FLAT:??_C@_07BGLBHCJI@G?3?$CF0?43f@
	DQ	FLAT:??_C@_07FOFBHMPM@B?3?$CF0?43f@
	DQ	FLAT:??_C@_07NANOHLBP@A?3?$CF0?43f@
	DQ	FLAT:??_C@_07MPJBGADE@H?3?$CF0?43f@
	DQ	FLAT:??_C@_07OOEAENEJ@S?3?$CF0?43f@
	DQ	FLAT:??_C@_07KGKAEDCN@V?3?$CF0?43f@
	DQ	FLAT:??_C@_07NANOHLBP@A?3?$CF0?43f@
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA DD 0e04H ; `ImGui::InputTextWithHint'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@IFNBIILP@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
CONST	SEGMENT
??_C@_1FC@IFNBIILP@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@ DB '!'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, '_', 00H, 'M', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, 'i', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA DD 0df9H ; `ImGui::InputText'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X@ DB '%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LLIJAMKA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1CC@LLIJAMKA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi@ DB 'g'
	DB	00H, '.', 00H, 'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'I', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'i', 00H, 'd', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z@4JA DD 0d16H ; `ImGui::TempInputText'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z@4JA DD 0caaH ; `ImGui::SliderScalarN'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z@4JA DD 0c9fH ; `ImGui::SliderScalar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08FKIHKODH@?$CF?40f?5deg@
CONST	SEGMENT
??_C@_08FKIHKODH@?$CF?40f?5deg@ DB '%.0f deg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1OI@EDKIIBCG@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAd?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$CK@
CONST	SEGMENT
??_C@_1OI@EDKIIBCG@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAd?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$CK@ DB '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'd', 00H, 'o', 00H, 'u', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, '*', 00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'i', 00H
	DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '-', 00H, '1'
	DB	00H, '.', 00H, '7', 00H, '9', 00H, '7', 00H, '6', 00H, '9', 00H
	DB	'3', 00H, '1', 00H, '3', 00H, '4', 00H, '8', 00H, '6', 00H, '2'
	DB	00H, '3', 00H, '1', 00H, '5', 00H, '8', 00H, 'e', 00H, '+', 00H
	DB	'3', 00H, '0', 00H, '8', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2'
	DB	00H, '.', 00H, '0', 00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '*', 00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's'
	DB	00H, 't', 00H, ' ', 00H, 'd', 00H, 'o', 00H, 'u', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, '*', 00H, ')', 00H, 'p', 00H, '_', 00H, 'm'
	DB	00H, 'a', 00H, 'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'1', 00H, '.', 00H, '7', 00H, '9', 00H, '7', 00H, '6', 00H, '9'
	DB	00H, '3', 00H, '1', 00H, '3', 00H, '4', 00H, '8', 00H, '6', 00H
	DB	'2', 00H, '3', 00H, '1', 00H, '5', 00H, '8', 00H, 'e', 00H, '+'
	DB	00H, '3', 00H, '0', 00H, '8', 00H, ' ', 00H, '/', 00H, ' ', 00H
	DB	'2', 00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MI@EKJKCIKJ@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$CK?$AA?$CJ@
CONST	SEGMENT
??_C@_1MI@EKJKCIKJ@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$CK?$AA?$CJ@ DB '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H, '*'
	DB	00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '-', 00H, '3', 00H, '.'
	DB	00H, '4', 00H, '0', 00H, '2', 00H, '8', 00H, '2', 00H, '3', 00H
	DB	'4', 00H, '6', 00H, '6', 00H, 'e', 00H, '+', 00H, '3', 00H, '8'
	DB	00H, 'F', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, '.', 00H
	DB	'0', 00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H, '*'
	DB	00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H, '.', 00H, '4'
	DB	00H, '0', 00H, '2', 00H, '8', 00H, '2', 00H, '3', 00H, '4', 00H
	DB	'6', 00H, '6', 00H, 'e', 00H, '+', 00H, '3', 00H, '8', 00H, 'F'
	DB	00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@JNOADGHA@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA6?$AA4?$AA?$CK?$AA?$CJ@
CONST	SEGMENT
??_C@_1EO@JNOADGHA@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA6?$AA4?$AA?$CK?$AA?$CJ@ DB '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'U', 00H, '6', 00H, '4', 00H, '*'
	DB	00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'M', 00H, '_'
	DB	00H, 'U', 00H, '6', 00H, '4', 00H, '_', 00H, 'M', 00H, 'A', 00H
	DB	'X', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KC@IBFLFJE@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA6?$AA4?$AA?$CK?$AA?$CJ@
CONST	SEGMENT
??_C@_1KC@IBFLFJE@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA6?$AA4?$AA?$CK?$AA?$CJ@ DB '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'S', 00H, '6', 00H, '4', 00H, '*'
	DB	00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'M', 00H, '_'
	DB	00H, 'S', 00H, '6', 00H, '4', 00H, '_', 00H, 'M', 00H, 'I', 00H
	DB	'N', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '*', 00H, '(', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'S'
	DB	00H, '6', 00H, '4', 00H, '*', 00H, ')', 00H, 'p', 00H, '_', 00H
	DB	'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 'I', 00H, 'M', 00H, '_', 00H, 'S', 00H, '6', 00H, '4', 00H
	DB	'_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H, '/', 00H, ' '
	DB	00H, '2', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@DMFGPFFK@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA3?$AA2?$AA?$CK?$AA?$CJ@
CONST	SEGMENT
??_C@_1EO@DMFGPFFK@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA3?$AA2?$AA?$CK?$AA?$CJ@ DB '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'U', 00H, '3', 00H, '2', 00H, '*'
	DB	00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'M', 00H, '_'
	DB	00H, 'U', 00H, '3', 00H, '2', 00H, '_', 00H, 'M', 00H, 'A', 00H
	DB	'X', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KC@MGDFLCCP@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA3?$AA2?$AA?$CK?$AA?$CJ@
CONST	SEGMENT
??_C@_1KC@MGDFLCCP@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA3?$AA2?$AA?$CK?$AA?$CJ@ DB '*'
	DB	00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'S', 00H, '3', 00H, '2', 00H, '*'
	DB	00H, ')', 00H, 'p', 00H, '_', 00H, 'm', 00H, 'i', 00H, 'n', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'M', 00H, '_'
	DB	00H, 'S', 00H, '3', 00H, '2', 00H, '_', 00H, 'M', 00H, 'I', 00H
	DB	'N', 00H, ' ', 00H, '/', 00H, ' ', 00H, '2', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '*', 00H, '(', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'S'
	DB	00H, '3', 00H, '2', 00H, '*', 00H, ')', 00H, 'p', 00H, '_', 00H
	DB	'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 'I', 00H, 'M', 00H, '_', 00H, 'S', 00H, '3', 00H, '2', 00H
	DB	'_', 00H, 'M', 00H, 'A', 00H, 'X', 00H, ' ', 00H, '/', 00H, ' '
	DB	00H, '2', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BLO@DBPGJKEK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
CONST	SEGMENT
??_C@_1BLO@DBPGJKEK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H
	DB	's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'S', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '_', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, 'M', 00H, 'a', 00H, 's', 00H, 'k', 00H, '_'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'I'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'S'
	DB	00H, 'l', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, '!', 00H, ' ', 00H, ' ', 00H, 'H', 00H
	DB	'a', 00H, 's', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, '''', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, ''''
	DB	00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'k', 00H, 'e', 00H, 'n', 00H, 'l', 00H, 'y', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '?', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'S', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'L'
	DB	00H, 'o', 00H, 'g', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, 'm', 00H, 'i', 00H, 'c', 00H, ' ', 00H, 'f', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '.', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0JN@OMBPOBCE@Invalid?5ImGuiSliderFlags?5flag?$CB?5@
CONST	SEGMENT
??_C@_0JN@OMBPOBCE@Invalid?5ImGuiSliderFlags?5flag?$CB?5@ DB 'Invalid ImG'
	DB	'uiSliderFlags flag!  Has the ''float power'' argument been mi'
	DB	'stakenly cast to flags? Call function with ImGuiSliderFlags_L'
	DB	'ogarithmic flags instead.', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA DD 0b88H ; `ImGui::SliderBehavior'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z@4JA DD 0a3aH ; `ImGui::DragScalarN'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@IAANKGPJ@?$AAp?$AA_?$AAm?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
CONST	SEGMENT
??_C@_1DC@IAANKGPJ@?$AAp?$AA_?$AAm?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@ DB 'p'
	DB	00H, '_', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'p', 00H, '_', 00H, 'm', 00H, 'a', 00H, 'x', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@ DB 'p'
	DB	00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, 'f', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'C', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, ' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H
	DB	'i', 00H, 't', 00H, 'h', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'S', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '_', 00H, 'L', 00H, 'o', 00H, 'g', 00H, 'a', 00H, 'r', 00H
	DB	'i', 00H, 't', 00H, 'h', 00H, 'm', 00H, 'i', 00H, 'c', 00H, ' '
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e'
	DB	00H, ' ', 00H, 'o', 00H, 'l', 00H, 'd', 00H, ' ', 00H, '''', 00H
	DB	'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, '''', 00H, ' ', 00H
	DB	'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '!', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@
CONST	SEGMENT
??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@ DB 'Call function '
	DB	'with ImGuiSliderFlags_Logarithmic flags instead of using the '
	DB	'old ''float power'' function!', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z@4JA DD 0a2eH ; `ImGui::DragScalar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05CONLABCH@?$CD?$CDmax@
CONST	SEGMENT
??_C@_05CONLABCH@?$CD?$CDmax@ DB '##max', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DMFAOFEI@?$CD?$CDmin@
CONST	SEGMENT
??_C@_05DMFAOFEI@?$CD?$CDmin@ DB '##min', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BLO@GENGLDPL@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
CONST	SEGMENT
??_C@_1BLO@GENGLDPL@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H
	DB	's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'S', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '_', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'i', 00H, 'd', 00H, 'M', 00H, 'a', 00H, 's', 00H, 'k', 00H, '_'
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'I'
	DB	00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'd', 00H
	DB	' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, 'S'
	DB	00H, 'l', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, 'f', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '!', 00H, ' ', 00H, 'H', 00H
	DB	'a', 00H, 's', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' '
	DB	00H, '''', 00H, 'f', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'r', 00H, ''''
	DB	00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'u', 00H, 'm', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'k', 00H, 'e', 00H, 'n', 00H, 'l', 00H, 'y', 00H, ' '
	DB	00H, 'c', 00H, 'a', 00H, 's', 00H, 't', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, ' ', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, '?', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	' ', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'o', 00H, 'n', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'S', 00H, 'l', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'L'
	DB	00H, 'o', 00H, 'g', 00H, 'a', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, 'm', 00H, 'i', 00H, 'c', 00H, ' ', 00H, 'f', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '.', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0JN@LHPDPGJG@Invalid?5ImGuiSliderFlags?5flags?$CB@
CONST	SEGMENT
??_C@_0JN@LHPDPGJG@Invalid?5ImGuiSliderFlags?5flags?$CB@ DB 'Invalid ImGu'
	DB	'iSliderFlags flags! Has the ''float power'' argument been mis'
	DB	'takenly cast to flags? Call function with ImGuiSliderFlags_Lo'
	DB	'garithmic flags instead.', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z@4JA DD 0924H ; `ImGui::DragBehavior'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FG@FPDFFFKE@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAf?$AAm?$AAt?$AA_?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FG@FPDFFFKE@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAf?$AAm?$AAt?$AA_?$AAe?$AAn@ DB '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	')', 00H, '(', 00H, 'f', 00H, 'm', 00H, 't', 00H, '_', 00H, 'e'
	DB	00H, 'n', 00H, 'd', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'f', 00H
	DB	'm', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '1', 00H, ')'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'f', 00H, 'm', 00H, 't', 00H
	DB	'_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SanitizeFormatString@@YAXPEBDPEAD_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SanitizeFormatString@@YAXPEBDPEAD_K@Z@4JA DD 0875H ; `SanitizeFormatString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z@4JA DD 0849H ; `ImGui::DataTypeClamp'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DataTypeCompare@ImGui@@YAHHPEBX0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DataTypeCompare@ImGui@@YAHHPEBX0@Z@4JA DD 082cH ; `ImGui::DataTypeCompare'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z@4JA DD 07bfH ; `ImGui::DataTypeApplyOpFromText'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@LEDHMGOL@?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?$CL?$AA?8?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AAp@
CONST	SEGMENT
??_C@_1CO@LEDHMGOL@?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?$CL?$AA?8?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AAp@ DB 'o'
	DB	00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H
	DB	'+', 00H, '''', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'o'
	DB	00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '''', 00H
	DB	'-', 00H, '''', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z@4JA DD 078bH ; `ImGui::DataTypeApplyOp'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z@4JA DD 0774H ; `ImGui::DataTypeFormatString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GE@PMGCKKHF@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5@
CONST	SEGMENT
??_C@_1GE@PMGCKKHF@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5@ DB 'd'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '_', 00H, 't', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H
	DB	'u', 00H, 'i', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'T'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'O', 00H
	DB	'U', 00H, 'N', 00H, 'T', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z@4JA DD 076eH ; `ImGui::DataTypeGetInfo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09JKJEEIJP@?$CF?4?$CKs?$CF?$CFd?$CFs@
CONST	SEGMENT
??_C@_09JKJEEIJP@?$CF?4?$CKs?$CF?$CFd?$CFs@ DB '%.*s%%d%s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HFPOEILF@?$CKUnknown?5item?$CK@
CONST	SEGMENT
??_C@_0P@HFPOEILF@?$CKUnknown?5item?$CK@ DB '*Unknown item*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAK@KIIFLADI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAL?$AAa?$AAs?$AAt@
CONST	SEGMENT
??_C@_1BAK@KIIFLADI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAL?$AAa?$AAs?$AAt@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H
	DB	'>', 00H, 'D', 00H, 'C', 00H, '.', 00H, 'L', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'R', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'M', 00H, 'i', 00H, 'n'
	DB	00H, '.', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w'
	DB	00H, '_', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H
	DB	'>', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'e'
	DB	00H, 'w', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H
	DB	'M', 00H, 'i', 00H, 'n', 00H, '.', 00H, 'x', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, '-', 00H, '>', 00H, 'D', 00H, 'C', 00H, '.'
	DB	00H, 'L', 00H, 'a', 00H, 's', 00H, 't', 00H, 'I', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.'
	DB	00H, 'M', 00H, 'i', 00H, 'n', 00H, '.', 00H, 'y', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, 'i', 00H, 'e', 00H, 'w', 00H, '_', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'P', 00H, 'r', 00H, 'e'
	DB	00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 'R', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'M', 00H, 'i', 00H, 'n', 00H, '.'
	DB	00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginComboPreview@ImGui@@YA_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginComboPreview@ImGui@@YA_NXZ@4JA DD 06a5H ; `ImGui::BeginComboPreview'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0N@JOGGDHMO@?$CD?$CDCombo_?$CF02d@
CONST	SEGMENT
??_C@_0N@JOGGDHMO@?$CD?$CDCombo_?$CF02d@ DB '##Combo_%02d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@IOEAHNLK@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1GI@IOEAHNLK@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'H'
	DB	00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'M', 00H
	DB	'a', 00H, 's', 00H, 'k', 00H, '_', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z@4JA DD 0663H ; `ImGui::BeginComboPopup'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@HOFLGIJG@?$AAp?$AAr?$AAe?$AAv?$AAi?$AAe?$AAw?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1FI@HOFLGIJG@?$AAp?$AAr?$AAe?$AAv?$AAi?$AAe?$AAw?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN@ DB 'p'
	DB	00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, '[', 00H, '0', 00H, ']', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LNBMNBNO@?$CD?$CDComboPopup@
CONST	SEGMENT
??_C@_0N@LNBMNBNO@?$CD?$CDComboPopup@ DB '##ComboPopup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BAK@ONBANIIG@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@
CONST	SEGMENT
??_C@_1BAK@ONBANIIG@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, '(', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'N'
	DB	00H, 'o', 00H, 'A', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'w', 00H
	DB	'B', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ' '
	DB	00H, '|', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H
	DB	'i', 00H, 'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'F'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'N', 00H
	DB	'o', 00H, 'P', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'e'
	DB	00H, 'w', 00H, ')', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'N', 00H, 'o'
	DB	00H, 'A', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'w', 00H, 'B', 00H
	DB	'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '|'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'C', 00H, 'o', 00H, 'm', 00H, 'b', 00H, 'o', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'N', 00H, 'o', 00H
	DB	'P', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginCombo@ImGui@@YA_NPEBD0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginCombo@ImGui@@YA_NPEBD0H@Z@4JA DD 0618H ; `ImGui::BeginCombo'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EE@LBEKBPGJ@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA2?$AA?5?$AA?9?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EE@LBEKBPGJ@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA2?$AA?5?$AA?9?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@ DB '*'
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '2', 00H, ' ', 00H
	DB	'-', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e'
	DB	00H, '_', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '2', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@HJGLFFIG@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA1?$AA?5?$AA?$CL?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EE@HJGLFFIG@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA1?$AA?5?$AA?$CL?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@ DB '*'
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '1', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e'
	DB	00H, '_', 00H, 'd', 00H, 'e', 00H, 'l', 00H, 't', 00H, 'a', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'm', 00H, 'i', 00H, 'n'
	DB	00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z@4JA DD 0598H ; `ImGui::SplitterBehavior'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0CC@IODDEFBI@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
CONST	SEGMENT
??_C@_0CC@IODDEFBI@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@ DB '-'
	DB	'-------------------------------', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02LLHJFGPH@?5?$HM@
CONST	SEGMENT
??_C@_02LLHJFGPH@?5?$HM@ DB ' |', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@FPPCKOP@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1LA@FPPCKOP@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, '(', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, 'S', 00H, 'e', 00H, 'p', 00H, 'a', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'H', 00H, 'o', 00H
	DB	'r', 00H, 'i', 00H, 'z', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a'
	DB	00H, 'l', 00H, ' ', 00H, '|', 00H, ' ', 00H, 'I', 00H, 'm', 00H
	DB	'G', 00H, 'u', 00H, 'i', 00H, 'S', 00H, 'e', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 'F', 00H
	DB	'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'V', 00H, 'e'
	DB	00H, 'r', 00H, 't', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SeparatorEx@ImGui@@YAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SeparatorEx@ImGui@@YAXH@Z@4JA DD 054eH	; `ImGui::SeparatorEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_06KLKJBGEJ@?$CF?40f?$CF?$CF@
CONST	SEGMENT
??_C@_06KLKJBGEJ@?$CF?40f?$CF?$CF@ DB '%.0f%%', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MHDGHODJ@?$CI?5?$CJ@
CONST	SEGMENT
??_C@_03MHDGHODJ@?$CI?5?$CJ@ DB '( )', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KFJJABDB@?$CIx?$CJ@
CONST	SEGMENT
??_C@_03KFJJABDB@?$CIx?$CJ@ DB '(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PFOPMNLJ@?$FL?5?$FN@
CONST	SEGMENT
??_C@_03PFOPMNLJ@?$FL?5?$FN@ DB '[ ]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JHEALCLB@?$FLx?$FN@
CONST	SEGMENT
??_C@_03JHEALCLB@?$FLx?$FN@ DB '[x]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03JDMNMOAD@?$FL?$HO?$FN@
CONST	SEGMENT
??_C@_03JDMNMOAD@?$FL?$HO?$FN@ DB '[~]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBHDMMP@?$CDimage@
CONST	SEGMENT
??_C@_06EBHDMMP@?$CDimage@ DB '#image', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@OFJDJLOI@?$AAI?$AAm?$AAM?$AAa?$AAx?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt@
CONST	SEGMENT
??_C@_1FI@OFJDJLOI@?$AAI?$AAm?$AAM?$AAa?$AAx?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt@ DB 'I'
	DB	00H, 'm', 00H, 'M', 00H, 'a', 00H, 'x', 00H, '(', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '_', 00H
	DB	'v', 00H, ',', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, '_', 00H, 'a', 00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H
	DB	'_', 00H, 'v', 00H, ')', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z@4JA DD 038cH ; `ImGui::ScrollbarEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CM@GFPJIOBE@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAb?$AAa?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5@
CONST	SEGMENT
??_C@_1CM@GFPJIOBE@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAb?$AAa?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5@ DB 's'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'b', 00H
	DB	'a', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z@4JA DD 035cH ; `ImGui::GetWindowScrollbarRect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_08FEBONNKO@?$CDSCROLLY@
CONST	SEGMENT
??_C@_08FEBONNKO@?$CDSCROLLY@ DB '#SCROLLY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENAFOMOP@?$CDSCROLLX@
CONST	SEGMENT
??_C@_08ENAFOMOP@?$CDSCROLLX@ DB '#SCROLLX', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@KJEAANOI@?$AAs?$AAi?$AAz?$AAe?$AA_?$AAa?$AAr?$AAg?$AA?4?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1FC@KJEAANOI@?$AAs?$AAi?$AAz?$AAe?$AA_?$AAa?$AAr?$AAg?$AA?4?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H, 'a', 00H, 'r', 00H
	DB	'g', 00H, '.', 00H, 'x', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, '.', 00H, 'y', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z@4JA DD 02dcH ; `ImGui::InvisibleButton'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL@ DB '[', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@LHACLJHI@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5?$AA?$DO?$AA?$DN@
CONST	SEGMENT
??_C@_1HG@LHACLJHI@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5?$AA?$DO?$AA?$DN@ DB 'm'
	DB	00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'b', 00H
	DB	'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, ' ', 00H, '>'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'm', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_'
	DB	00H, 'b', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'M', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H
	DB	'B', 00H, 'u', 00H, 't', 00H, 't', 00H, 'o', 00H, 'n', 00H, '_'
	DB	00H, 'C', 00H, 'O', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z@4JA DD 01e7H ; `ImGui::ButtonBehavior'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@HMGDGFIB@?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BE@HMGDGFIB@?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 't'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 'g', 00H, 'e', 00H, 't', 00H, 's', 00H, '.', 00H, 'c'
	DB	00H, 'p', 00H, 'p', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TextEx@ImGui@@YAXPEBD0H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TextEx@ImGui@@YAXPEBD0H@Z@4JA DD 097H	; `ImGui::TextEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1HM@PJKJLKEH@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAN?$AAa?$AAm?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt@
CONST	SEGMENT
??_C@_1HM@PJKJLKEH@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAN?$AAa?$AAm?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, '-', 00H, '>', 00H, 'N', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e'
	DB	00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '-', 00H
	DB	'1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, '-', 00H, '>', 00H, 'N', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 'O', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'T', 00H, 'a', 00H, 'b', 00H
	DB	's', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 's', 00H, '.'
	DB	00H, 'B', 00H, 'u', 00H, 'f', 00H, '.', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@IIGHOJGM@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1@
CONST	SEGMENT
??_C@_1BC@IIGHOJGM@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1@ DB 'i'
	DB	00H, 'd', 00H, 'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAtoi@N@@YAPEBDPEBDPEAN@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@N@@YANNNM@Z DD 035052001H
	DD	011b3320H
	DD	07014001fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@N@@YANNN@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@N@@YANNNN@Z DD 035052001H
	DD	011b3320H
	DD	070140021H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAtoi@M@@YAPEBDPEBDPEAM@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@_K@@YA_K_K0M@Z DD 025051e01H
	DD	0119231eH
	DD	07012001dH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@_K@@YAXAEA_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@_K@@YA_K_K00@Z DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@_J@@YA_J_J0M@Z DD 025051e01H
	DD	0119231eH
	DD	07012001dH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@_J@@YA_J_J0@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@N@@YAXAEAN0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@_J@@YAXAEA_J0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@_J@@YA_J_J00@Z DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@I@@YAIIIM@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@I@@YAIII@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@I@@YAXAEAI0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@I@@YAIIII@Z DD 025051b01H
	DD	0116231bH
	DD	0700f001fH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@H@@YAHHHM@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@M@@YAXAEAM0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@H@@YAXAEAH0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0163H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z DD 035054719H
	DD	0118331dH
	DD	07011003bH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcName$0 DB 066H ; ImGui::RoundScalarWithFormatT<double,double>
	DB	06dH
	DB	074H
	DB	05fH
	DB	073H
	DB	061H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	07aH
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcName$1 DB 076H ; ImGui::RoundScalarWithFormatT<double,double>
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcVarDesc DD 0a0H ; ImGui::RoundScalarWithFormatT<double,double>
	DD	040H
	DQ	FLAT:??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcName$0
	ORG $+96
??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcFrameData DD 02H ; ImGui::RoundScalarWithFormatT<double,double>
	DD	00H
	DQ	FLAT:??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0646H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z DD 035054d19H
	DD	011f3324H
	DD	070180049H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0230H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcName$0 DB 076H ; ImGui::ScaleValueFromRatioT<double,double,double>
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcName$1 DB 076H ; ImGui::ScaleValueFromRatioT<double,double,double>
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcVarDesc DD 0b8H ; ImGui::ScaleValueFromRatioT<double,double,double>
	DD	08H
	DQ	FLAT:??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcName$0
	ORG $+96
??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcFrameData DD 02H ; ImGui::ScaleValueFromRatioT<double,double,double>
	DD	00H
	DQ	FLAT:??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z DD 035052401H
	DD	011f3324H
	DD	07018003fH
	DD	05017H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	016aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z DD 035054719H
	DD	0118331dH
	DD	07011003bH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcName$0 DB 066H ; ImGui::RoundScalarWithFormatT<float,float>
	DB	06dH
	DB	074H
	DB	05fH
	DB	073H
	DB	061H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	07aH
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcName$1 DB 076H ; ImGui::RoundScalarWithFormatT<float,float>
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcVarDesc DD 0a0H ; ImGui::RoundScalarWithFormatT<float,float>
	DD	040H
	DQ	FLAT:??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcName$0
	ORG $+96
??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcFrameData DD 02H ; ImGui::RoundScalarWithFormatT<float,float>
	DD	00H
	DQ	FLAT:??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	060bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z DD 035054d19H
	DD	011f3324H
	DD	070180049H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0230H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcName$0 DB 076H ; ImGui::ScaleValueFromRatioT<float,float,float>
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcName$1 DB 076H ; ImGui::ScaleValueFromRatioT<float,float,float>
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcVarDesc DD 0b4H ; ImGui::ScaleValueFromRatioT<float,float,float>
	DD	04H
	DQ	FLAT:??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcName$0
	ORG $+96
??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcFrameData DD 02H ; ImGui::ScaleValueFromRatioT<float,float,float>
	DD	00H
	DQ	FLAT:??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z DD 035052401H
	DD	011f3324H
	DD	07018003fH
	DD	05017H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	0189H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z DD 025054619H
	DD	0117231cH
	DD	070100039H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcName$0 DB 066H ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	DB	06dH
	DB	074H
	DB	05fH
	DB	073H
	DB	061H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	07aH
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcName$1 DB 076H ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcVarDesc DD 090H ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	DD	040H
	DQ	FLAT:??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcName$0
	ORG $+96
??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcFrameData DD 02H ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	DD	00H
	DQ	FLAT:??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	0919H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z DD 025054b19H
	DD	011d2322H
	DD	070160047H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcName$0 DB 076H ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcName$1 DB 076H ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcVarDesc DD 0a8H ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	DD	08H
	DQ	FLAT:??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcName$0
	ORG $+96
??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcFrameData DD 02H ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	DD	00H
	DQ	FLAT:??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z DD 035052101H
	DD	011c3321H
	DD	07015003fH
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	0158H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z DD 025054619H
	DD	0117231cH
	DD	070100039H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcName$0 DB 066H ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	DB	06dH
	DB	074H
	DB	05fH
	DB	073H
	DB	061H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	07aH
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcName$1 DB 076H ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcVarDesc DD 090H ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	DD	040H
	DQ	FLAT:??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcName$0
	ORG $+96
??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcFrameData DD 02H ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	DD	00H
	DQ	FLAT:??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	0666H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z DD 025054b19H
	DD	011d2322H
	DD	070160047H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcName$0 DB 076H ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcName$1 DB 076H ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcVarDesc DD 0a8H ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	DD	08H
	DQ	FLAT:??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcName$0
	ORG $+96
??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcFrameData DD 02H ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	DD	00H
	DQ	FLAT:??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z DD 035052101H
	DD	011c3321H
	DD	07015003fH
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	0155H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z DD 025054619H
	DD	0117231cH
	DD	070100039H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcName$0 DB 066H ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	DB	06dH
	DB	074H
	DB	05fH
	DB	073H
	DB	061H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	07aH
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcName$1 DB 076H ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcVarDesc DD 090H ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	DD	040H
	DQ	FLAT:??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcName$0
	ORG $+96
??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcFrameData DD 02H ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	DD	00H
	DQ	FLAT:??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	062dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z DD 025054b19H
	DD	011d2322H
	DD	070160047H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcName$0 DB 076H ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcName$1 DB 076H ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcVarDesc DD 0a4H ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	DD	04H
	DQ	FLAT:??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcName$1
	DD	084H
	DD	04H
	DQ	FLAT:??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcName$0
	ORG $+96
??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcFrameData DD 02H ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	DD	00H
	DQ	FLAT:??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z DD 035052001H
	DD	011b3320H
	DD	07014003fH
	DD	05013H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	0154H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z DD 025054619H
	DD	0117231cH
	DD	070100039H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	01b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcName$0 DB 066H ; ImGui::RoundScalarWithFormatT<int,int>
	DB	06dH
	DB	074H
	DB	05fH
	DB	073H
	DB	061H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	07aH
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcName$1 DB 076H ; ImGui::RoundScalarWithFormatT<int,int>
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	00H
	ORG $+10
??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcVarDesc DD 090H ; ImGui::RoundScalarWithFormatT<int,int>
	DD	040H
	DQ	FLAT:??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcName$1
	DD	048H
	DD	020H
	DQ	FLAT:??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcName$0
	ORG $+96
??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcFrameData DD 02H ; ImGui::RoundScalarWithFormatT<int,int>
	DD	00H
	DQ	FLAT:??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	05ffH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z DD 025054b19H
	DD	011d2322H
	DD	070160047H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcName$0 DB 076H ; ImGui::ScaleValueFromRatioT<int,int,float>
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcName$1 DB 076H ; ImGui::ScaleValueFromRatioT<int,int,float>
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	066H
	DB	075H
	DB	064H
	DB	067H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcVarDesc DD 0a4H ; ImGui::ScaleValueFromRatioT<int,int,float>
	DD	04H
	DQ	FLAT:??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcName$1
	DD	084H
	DD	04H
	DQ	FLAT:??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcName$0
	ORG $+96
??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcFrameData DD 02H ; ImGui::ScaleValueFromRatioT<int,int,float>
	DD	00H
	DQ	FLAT:??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z DD 035052001H
	DD	011b3320H
	DD	07014003fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z DD 025051301H
	DD	010e2313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemComparerByBeginOrder@@YAHPEBX0@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemComparerBySection@@YAHPEBX0@Z DD 025051801H
	DD	01132318H
	DD	0700c002dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	02ceH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z DD 035063e19H
	DD	010f3314H
	DD	070080058H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	02b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$0 DB 062H ; ImGui::TabBarTabListPopupButton
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$1 DB 061H ; ImGui::TabBarTabListPopupButton
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+14
?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcVarDesc DD 0b8H ; ImGui::TabBarTabListPopupButton
	DD	010H
	DQ	FLAT:?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$0
	ORG $+96
?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcFrameData DD 02H ; ImGui::TabBarTabListPopupButton
	DD	00H
	DQ	FLAT:?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0475H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z DD 035063e19H
	DD	010f3314H
	DD	070080080H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	03f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$0 DB 061H ; ImGui::TabBarScrollingButtons
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	05fH
	DB	062H
	DB	075H
	DB	074H
	DB	074H
	DB	06fH
	DB	06eH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$1 DB 062H ; ImGui::TabBarScrollingButtons
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$2 DB 061H ; ImGui::TabBarScrollingButtons
	DB	072H
	DB	072H
	DB	06fH
	DB	077H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+6
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcVarDesc DD 0f8H ; ImGui::TabBarScrollingButtons
	DD	010H
	DQ	FLAT:?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcName$0
	ORG $+144
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcFrameData DD 03H ; ImGui::TabBarScrollingButtons
	DD	00H
	DQ	FLAT:?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z DD 025051c01H
	DD	0117231cH
	DD	070100039H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z DD 035051901H
	DD	01143319H
	DD	0700d001fH
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarCalcMaxTabWidth@ImGui@@YAMXZ DD 035050f01H
	DD	010a330fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	01346H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z DD 025063e19H
	DD	010f2314H
	DD	07008012cH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0958H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcName$0 DB 073H ; ImGui::TabBarLayout
	DB	065H
	DB	063H
	DB	074H
	DB	069H
	DB	06fH
	DB	06eH
	DB	073H
	DB	00H
	ORG $+7
?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcName$1 DB 073H ; ImGui::TabBarLayout
	DB	068H
	DB	072H
	DB	069H
	DB	06eH
	DB	06bH
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	05fH
	DB	069H
	DB	06eH
	DB	064H
	DB	065H
	DB	078H
	DB	065H
	DB	073H
	DB	00H
	ORG $+10
?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcVarDesc DD 01c8H ; ImGui::TabBarLayout
	DD	0cH
	DQ	FLAT:?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcName$1
	DD	088H
	DD	024H
	DQ	FLAT:?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcName$0
	ORG $+96
?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcFrameData DD 02H ; ImGui::TabBarLayout
	DD	00H
	DQ	FLAT:?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTabBarSection@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Plot_ArrayGetter@@YAMPEAXH@Z DD 035051701H
	DD	01123317H
	DD	0700b0027H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z DD 035052301H
	DD	011e3323H
	DD	07017004bH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z DD 025051301H
	DD	010e2313H
	DD	070070035H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01134H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z DD 035054719H
	DD	0118331dH
	DD	0701100abH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0548H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$0 DB 063H ; ImStb::stb_textedit_key
	DB	068H
	DB	00H
	ORG $+1
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$1 DB 066H ; ImStb::stb_textedit_key
	DB	069H
	DB	06eH
	DB	064H
	DB	00H
	ORG $+3
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$2 DB 072H ; ImStb::stb_textedit_key
	DB	06fH
	DB	077H
	DB	00H
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$3 DB 066H ; ImStb::stb_textedit_key
	DB	069H
	DB	06eH
	DB	064H
	DB	00H
	ORG $+3
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$4 DB 072H ; ImStb::stb_textedit_key
	DB	06fH
	DB	077H
	DB	00H
	ORG $+4
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcVarDesc DD 0228H ; ImStb::stb_textedit_key
	DD	018H
	DQ	FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$4
	DD	01f8H
	DD	018H
	DQ	FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$3
	DD	0a8H
	DD	018H
	DQ	FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$2
	DD	078H
	DD	018H
	DQ	FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$1
	DD	054H
	DD	02H
	DQ	FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcName$0
	ORG $+240
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcFrameData DD 05H ; ImStb::stb_textedit_key
	DD	00H
	DQ	FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	02caH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z DD 025054c19H
	DD	011d2322H
	DD	070160035H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z$rtcName$0 DB 072H ; ImStb::stb_textedit_find_charpos
	DB	00H
	ORG $+14
?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z$rtcVarDesc DD 028H ; ImStb::stb_textedit_find_charpos
	DD	018H
	DQ	FLAT:?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z$rtcName$0
	ORG $+48
?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z$rtcFrameData DD 01H ; ImStb::stb_textedit_find_charpos
	DD	00H
	DQ	FLAT:?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z DD 025052201H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z DD 025052201H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD 025063201H
	DD	01142319H
	DD	0700d002eH
	DD	0500b600cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcName$0 DB 072H ; ImStb::stb_text_redo
	DB	00H
	ORG $+14
?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcVarDesc DD 068H ; ImStb::stb_text_redo
	DD	010H
	DQ	FLAT:?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcName$0
	ORG $+48
?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcFrameData DD 01H ; ImStb::stb_text_redo
	DD	00H
	DQ	FLAT:?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z DD 025063201H
	DD	01142319H
	DD	0700d002eH
	DD	0500b600cH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcName$0 DB 075H ; ImStb::stb_text_undo
	DB	00H
	ORG $+14
?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcVarDesc DD 048H ; ImStb::stb_text_undo
	DD	010H
	DQ	FLAT:?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcName$0
	ORG $+48
?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcFrameData DD 01H ; ImStb::stb_text_undo
	DD	00H
	DQ	FLAT:?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	0101H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z DD 025054e19H
	DD	011f2324H
	DD	070180027H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0128H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcName$0 DB 072H ; ImStb::stb_textedit_drag
	DB	00H
	ORG $+14
?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcVarDesc DD 048H ; ImStb::stb_textedit_drag
	DD	018H
	DQ	FLAT:?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcName$0
	ORG $+48
?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcFrameData DD 01H ; ImStb::stb_textedit_drag
	DD	00H
	DQ	FLAT:?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	047H
	DB	0efH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z DD 025054e19H
	DD	011f2324H
	DD	070180023H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcName$0 DB 072H ; ImStb::stb_textedit_click
	DB	00H
	ORG $+14
?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcVarDesc DD 028H ; ImStb::stb_textedit_click
	DD	018H
	DQ	FLAT:?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcName$0
	ORG $+48
?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcFrameData DD 01H ; ImStb::stb_textedit_click
	DD	00H
	DQ	FLAT:?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	042H
	DW	029bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z DD 025054919H
	DD	011a231fH
	DD	07013003bH
	DD	05012H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z$rtcName$0 DB 072H ; ImStb::stb_text_locate_coord
	DB	00H
	ORG $+14
?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z$rtcVarDesc DD 028H ; ImStb::stb_text_locate_coord
	DD	018H
	DQ	FLAT:?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z$rtcName$0
	ORG $+48
?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z$rtcFrameData DD 01H ; ImStb::stb_text_locate_coord
	DD	00H
	DQ	FLAT:?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z DD 025062201H
	DD	011d2322H
	DD	07016002cH
	DD	050146015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z DD 025051c01H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?is_separator@ImStb@@YA_NI@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0133H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z DD 035054719H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcName$0 DB 074H ; ImStb::STB_TEXTEDIT_LAYOUTROW
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	072H
	DB	065H
	DB	06dH
	DB	061H
	DB	069H
	DB	06eH
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
	ORG $+1
?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcName$1 DB 073H ; ImStb::STB_TEXTEDIT_LAYOUTROW
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+11
?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcVarDesc DD 078H ; ImStb::STB_TEXTEDIT_LAYOUTROW
	DD	08H
	DQ	FLAT:?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcName$0
	ORG $+96
?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcFrameData DD 02H ; ImStb::STB_TEXTEDIT_LAYOUTROW
	DD	00H
	DQ	FLAT:?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z DD 035051c01H
	DD	0117331cH
	DD	070100027H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@PEBX@@YAXAEAPEBX0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAtoi@H@@YAPEBDPEBDPEAH@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@_K@@YA_K_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0cb8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z DD 045064c19H
	DD	011d4322H
	DD	0701600daH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z$rtcName$0 DB 069H ; ImGui::SliderBehaviorT<double,double,double>
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	032H
	DB	00H
	ORG $+3
??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z$rtcVarDesc DD 02a8H ; ImGui::SliderBehaviorT<double,double,double>
	DD	08H
	DQ	FLAT:??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z$rtcName$0
	ORG $+48
??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z$rtcFrameData DD 01H ; ImGui::SliderBehaviorT<double,double,double>
	DD	00H
	DQ	FLAT:??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0cabH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z DD 045064c19H
	DD	011d4322H
	DD	0701600daH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z$rtcName$0 DB 069H ; ImGui::SliderBehaviorT<float,float,float>
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	032H
	DB	00H
	ORG $+3
??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z$rtcVarDesc DD 02a8H ; ImGui::SliderBehaviorT<float,float,float>
	DD	08H
	DQ	FLAT:??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z$rtcName$0
	ORG $+48
??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z$rtcFrameData DD 01H ; ImGui::SliderBehaviorT<float,float,float>
	DD	00H
	DQ	FLAT:??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0c9cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z DD 045064c19H
	DD	011d4322H
	DD	0701600daH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z$rtcName$0 DB 069H ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	032H
	DB	00H
	ORG $+3
??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z$rtcVarDesc DD 02a8H ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>
	DD	08H
	DQ	FLAT:??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z$rtcName$0
	ORG $+48
??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z$rtcFrameData DD 01H ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>
	DD	00H
	DQ	FLAT:??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0c9cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z DD 045064c19H
	DD	011d4322H
	DD	0701600daH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z$rtcName$0 DB 069H ; ImGui::SliderBehaviorT<__int64,__int64,double>
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	032H
	DB	00H
	ORG $+3
??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z$rtcVarDesc DD 02a8H ; ImGui::SliderBehaviorT<__int64,__int64,double>
	DD	08H
	DQ	FLAT:??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z$rtcName$0
	ORG $+48
??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z$rtcFrameData DD 01H ; ImGui::SliderBehaviorT<__int64,__int64,double>
	DD	00H
	DQ	FLAT:??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0c7cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z DD 045064c19H
	DD	011d4322H
	DD	0701600daH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z$rtcName$0 DB 069H ; ImGui::SliderBehaviorT<unsigned int,int,float>
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	032H
	DB	00H
	ORG $+3
??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z$rtcVarDesc DD 02a8H ; ImGui::SliderBehaviorT<unsigned int,int,float>
	DD	08H
	DQ	FLAT:??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z$rtcName$0
	ORG $+48
??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z$rtcFrameData DD 01H ; ImGui::SliderBehaviorT<unsigned int,int,float>
	DD	00H
	DQ	FLAT:??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0c7cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z DD 045064c19H
	DD	011d4322H
	DD	0701600daH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z$rtcName$0 DB 069H ; ImGui::SliderBehaviorT<int,int,float>
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	032H
	DB	00H
	ORG $+3
??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z$rtcVarDesc DD 02a8H ; ImGui::SliderBehaviorT<int,int,float>
	DD	08H
	DQ	FLAT:??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z$rtcName$0
	ORG $+48
??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z$rtcFrameData DD 01H ; ImGui::SliderBehaviorT<int,int,float>
	DD	00H
	DQ	FLAT:??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@H@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z DD 045052301H
	DD	011e4323H
	DD	070170081H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z DD 045052301H
	DD	011e4323H
	DD	070170081H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z DD 045052201H
	DD	011d4322H
	DD	070160081H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z DD 045052201H
	DD	011d4322H
	DD	070160081H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z DD 045052201H
	DD	011d4322H
	DD	070160081H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z DD 045052201H
	DD	011d4322H
	DD	070160081H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SanitizeFormatString@@YAXPEBDPEAD_K@Z DD 025051d01H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetMinimumStepAtDecimalPrecision@@YAMH@Z DD 035051201H
	DD	010d3312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@N@@YA_NPEANPEBN1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeClampT@C@@YA_NPEACPEBC1@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@N@@YAHPEBN0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@M@@YAHPEBM0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@_K@@YAHPEB_K0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@_J@@YAHPEB_J0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@I@@YAHPEBI0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@H@@YAHPEBH0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@G@@YAHPEBG0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@F@@YAHPEBF0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@E@@YAHPEBE0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$DataTypeCompareT@C@@YAHPEBC0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@H@@YAHHHH@Z DD 025051b01H
	DD	0116231bH
	DD	0700f001fH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@_K@@YA_K_K000@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@_K@@YA_K_K000@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@_J@@YA_J_J000@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@_J@@YA_J_J000@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@I@@YAIIIII@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@I@@YAIIIII@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@H@@YAHHHHH@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@H@@YAHHHHH@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@G@@YAGGGGG@Z DD 025052401H
	DD	011f2324H
	DD	07018001dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@G@@YAGGGGG@Z DD 025052401H
	DD	011f2324H
	DD	07018001dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@F@@YAFFFFF@Z DD 025052401H
	DD	011f2324H
	DD	07018001dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@F@@YAFFFFF@Z DD 025052401H
	DD	011f2324H
	DD	07018001dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@E@@YAEEEEE@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@E@@YAEEEEE@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSubClampOverflow@C@@YACCCCC@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImAddClampOverflow@C@@YACCCCC@Z DD 025052001H
	DD	011b2320H
	DD	07014001dH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z DD 035051301H
	DD	010e3313H
	DD	07007002bH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z DD 025051c01H
	DD	0117231cH
	DD	07010002bH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z DD 025051c01H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcMaxPopupHeightFromItemCount@@YAMH@Z DD 035051201H
	DD	010d3312H
	DD	070060023H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShrinkWidthItemComparer@@YAHPEBX0@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01afH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z DD 025054719H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z$rtcName$0 DB 061H ; ImGui::CheckboxFlagsT<unsigned __int64>
	DB	06cH
	DB	06cH
	DB	05fH
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+9
??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z$rtcVarDesc DD 024H ; ImGui::CheckboxFlagsT<unsigned __int64>
	DD	01H
	DQ	FLAT:??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z$rtcName$0
	ORG $+48
??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z$rtcFrameData DD 01H ; ImGui::CheckboxFlagsT<unsigned __int64>
	DD	00H
	DQ	FLAT:??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01afH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z DD 025054719H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z$rtcName$0 DB 061H ; ImGui::CheckboxFlagsT<__int64>
	DB	06cH
	DB	06cH
	DB	05fH
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+9
??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z$rtcVarDesc DD 024H ; ImGui::CheckboxFlagsT<__int64>
	DD	01H
	DQ	FLAT:??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z$rtcName$0
	ORG $+48
??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z$rtcFrameData DD 01H ; ImGui::CheckboxFlagsT<__int64>
	DD	00H
	DQ	FLAT:??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	019dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z DD 025054719H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z$rtcName$0 DB 061H ; ImGui::CheckboxFlagsT<unsigned int>
	DB	06cH
	DB	06cH
	DB	05fH
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+9
??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z$rtcVarDesc DD 024H ; ImGui::CheckboxFlagsT<unsigned int>
	DD	01H
	DQ	FLAT:??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z$rtcName$0
	ORG $+48
??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z$rtcFrameData DD 01H ; ImGui::CheckboxFlagsT<unsigned int>
	DD	00H
	DQ	FLAT:??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	019dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z DD 025054719H
	DD	0118231dH
	DD	070110031H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z$rtcName$0 DB 061H ; ImGui::CheckboxFlagsT<int>
	DB	06cH
	DB	06cH
	DB	05fH
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+9
??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z$rtcVarDesc DD 024H ; ImGui::CheckboxFlagsT<int>
	DD	01H
	DQ	FLAT:??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z$rtcName$0
	ORG $+48
??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z$rtcFrameData DD 01H ; ImGui::CheckboxFlagsT<int>
	DD	00H
	DQ	FLAT:??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@M@@YAMMMM@Z DD 035052001H
	DD	011b3320H
	DD	07014001fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@M@@YAMMMM@Z DD 035052001H
	DD	011b3320H
	DD	070140021H
	DD	05013H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0281H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z DD 025054c19H
	DD	011d2322H
	DD	070160045H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0218H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z$rtcName$0 DB 074H ; InputTextCalcTextSizeW
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z$rtcVarDesc DD 0a8H ; InputTextCalcTextSizeW
	DD	08H
	DQ	FLAT:?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z$rtcName$0
	ORG $+48
?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z$rtcFrameData DD 01H ; InputTextCalcTextSizeW
	DD	00H
	DQ	FLAT:?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	0360H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z DD 025054b19H
	DD	011c2321H
	DD	070150039H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z$rtcName$0 DB 063H ; InputTextFilterCharacter
	DB	061H
	DB	06cH
	DB	06cH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z$rtcVarDesc DD 0a8H ; InputTextFilterCharacter
	DD	038H
	DQ	FLAT:?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z$rtcName$0
	ORG $+48
?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z$rtcFrameData DD 01H ; InputTextFilterCharacter
	DD	00H
	DQ	FLAT:?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	043H
	DW	0c99H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z DD 045054a19H
	DD	011c4321H
	DD	07015012dH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0958H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$0 DB 06cH ; ImGui::PlotEx
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$1 DB 066H ; ImGui::PlotEx
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$4 DB 074H ; ImGui::PlotEx
	DB	070H
	DB	030H
	DB	00H
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$2 DB 069H ; ImGui::PlotEx
	DB	06eH
	DB	06eH
	DB	065H
	DB	072H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$5 DB 074H ; ImGui::PlotEx
	DB	070H
	DB	031H
	DB	00H
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$3 DB 074H ; ImGui::PlotEx
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$6 DB 070H ; ImGui::PlotEx
	DB	06fH
	DB	073H
	DB	030H
	DB	00H
	ORG $+3
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$7 DB 070H ; ImGui::PlotEx
	DB	06fH
	DB	073H
	DB	031H
	DB	00H
	ORG $+7
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcVarDesc DD 04d8H ; ImGui::PlotEx
	DD	08H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$7
	DD	04b8H
	DD	08H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$6
	DD	0498H
	DD	08H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$5
	DD	0398H
	DD	08H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$4
	DD	0148H
	DD	010H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$3
	DD	0118H
	DD	010H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$2
	DD	0e8H
	DD	010H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$1
	DD	0c8H
	DD	08H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcName$0
	ORG $+384
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcFrameData DD 08H ; ImGui::PlotEx
	DD	00H
	DQ	FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0330H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z DD 025064219H
	DD	01132318H
	DD	0700c0040H
	DD	0500a600bH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$0 DB 070H ; ImGui::ColorPickerOptionsPopup
	DB	069H
	DB	063H
	DB	06bH
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+4
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$1 DB 062H ; ImGui::ColorPickerOptionsPopup
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$2 DB 070H ; ImGui::ColorPickerOptionsPopup
	DB	072H
	DB	065H
	DB	076H
	DB	069H
	DB	065H
	DB	077H
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	072H
	DB	065H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+13
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcVarDesc DD 0108H ; ImGui::ColorPickerOptionsPopup
	DD	010H
	DQ	FLAT:?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$1
	DD	088H
	DD	08H
	DQ	FLAT:?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$0
	ORG $+144
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcFrameData DD 03H ; ImGui::ColorPickerOptionsPopup
	DD	00H
	DQ	FLAT:?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	0640H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z DD 045054119H
	DD	01124317H
	DD	0700b0061H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	02f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$0 DB 062H ; ImGui::ColorEditOptionsPopup
	DB	075H
	DB	066H
	DB	00H
	ORG $+12
?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z$rtcVarDesc DD 0150H ; ImGui::ColorEditOptionsPopup
	DD	040H
	DQ	FLAT:?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z$rtcName$0
	ORG $+48
?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z$rtcFrameData DD 01H ; ImGui::ColorEditOptionsPopup
	DD	00H
	DQ	FLAT:?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	05acH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z DD 075054719H
	DD	0118731dH
	DD	07011004bH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0240H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcName$0 DB 073H	; ImGui::ColorTooltip
	DB	07aH
	DB	00H
	ORG $+1
?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcName$1 DB 063H	; ImGui::ColorTooltip
	DB	066H
	DB	00H
	ORG $+9
?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcVarDesc DD 0d8H	; ImGui::ColorTooltip
	DD	010H
	DQ	FLAT:?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcName$1
	DD	0b8H
	DD	08H
	DQ	FLAT:?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcName$0
	ORG $+96
?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcFrameData DD 02H	; ImGui::ColorTooltip
	DD	00H
	DQ	FLAT:?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TempInputIsActive@ImGui@@YA_NI@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	027eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z DD 035064c19H
	DD	011d3322H
	DD	070160042H
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcName$0 DB 066H ; ImGui::TempInputScalar
	DB	06dH
	DB	074H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcName$1 DB 064H ; ImGui::TempInputScalar
	DB	061H
	DB	074H
	DB	061H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+7
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcName$2 DB 064H ; ImGui::TempInputScalar
	DB	061H
	DB	074H
	DB	061H
	DB	05fH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	00H
	ORG $+12
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcVarDesc DD 0138H ; ImGui::TempInputScalar
	DD	08H
	DQ	FLAT:?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcName$2
	DD	098H
	DD	020H
	DQ	FLAT:?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcName$0
	ORG $+144
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcFrameData DD 03H ; ImGui::TempInputScalar
	DD	00H
	DQ	FLAT:?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z DD 045052101H
	DD	011c4321H
	DD	070150031H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	04cH
	DW	04587H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DB 06H
	DB	00H
	DB	00H
	DB	'%', 0a1H
	DB	02H
	DB	05H, 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DB 028H
	DD	imagerel $stateUnwindMap$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
	DD	imagerel $ip2state$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD 055065319H
	DD	01245329H
	DD	070170354H
	DD	050156016H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
	DD	01a9aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$0 DB 06cH ; ImGui::InputTextEx
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$1 DB 066H ; ImGui::InputTextEx
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$8 DB 063H ; ImGui::InputTextEx
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$2 DB 074H ; ImGui::InputTextEx
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$9 DB 063H ; ImGui::InputTextEx
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$3 DB 066H ; ImGui::InputTextEx
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$10 DB 063H ; ImGui::InputTextEx
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$4 DB 074H ; ImGui::InputTextEx
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$11 DB 063H ; ImGui::InputTextEx
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$5 DB 069H ; ImGui::InputTextEx
	DB	06eH
	DB	06eH
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$25 DB 070H ; ImGui::InputTextEx
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$6 DB 062H ; ImGui::InputTextEx
	DB	075H
	DB	066H
	DB	05fH
	DB	065H
	DB	06eH
	DB	064H
	DB	00H
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$7 DB 062H ; ImGui::InputTextEx
	DB	075H
	DB	066H
	DB	05fH
	DB	065H
	DB	06eH
	DB	064H
	DB	00H
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$12 DB 077H ; ImGui::InputTextEx
	DB	05fH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+1
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$13 DB 063H ; ImGui::InputTextEx
	DB	061H
	DB	06cH
	DB	06cH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$14 DB 063H ; ImGui::InputTextEx
	DB	061H
	DB	06cH
	DB	06cH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$15 DB 063H ; ImGui::InputTextEx
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$16 DB 064H ; ImGui::InputTextEx
	DB	072H
	DB	061H
	DB	077H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+7
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$17 DB 074H ; ImGui::InputTextEx
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$18 DB 062H ; ImGui::InputTextEx
	DB	075H
	DB	066H
	DB	05fH
	DB	064H
	DB	069H
	DB	073H
	DB	070H
	DB	06cH
	DB	061H
	DB	079H
	DB	05fH
	DB	065H
	DB	06eH
	DB	064H
	DB	00H
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$19 DB 063H ; ImGui::InputTextEx
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	06fH
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$20 DB 073H ; ImGui::InputTextEx
	DB	065H
	DB	06cH
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	073H
	DB	074H
	DB	061H
	DB	072H
	DB	074H
	DB	05fH
	DB	06fH
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	00H
	ORG $+4
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$21 DB 073H ; ImGui::InputTextEx
	DB	065H
	DB	061H
	DB	072H
	DB	063H
	DB	068H
	DB	065H
	DB	073H
	DB	05fH
	DB	069H
	DB	06eH
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	070H
	DB	074H
	DB	072H
	DB	00H
	ORG $+5
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$22 DB 073H ; ImGui::InputTextEx
	DB	065H
	DB	061H
	DB	072H
	DB	063H
	DB	068H
	DB	065H
	DB	073H
	DB	05fH
	DB	072H
	DB	065H
	DB	073H
	DB	075H
	DB	06cH
	DB	074H
	DB	05fH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	05fH
	DB	06eH
	DB	06fH
	DB	00H
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$23 DB 064H ; ImGui::InputTextEx
	DB	072H
	DB	061H
	DB	077H
	DB	05fH
	DB	073H
	DB	063H
	DB	072H
	DB	06fH
	DB	06cH
	DB	06cH
	DB	00H
	ORG $+4
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$24 DB 072H ; ImGui::InputTextEx
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+7
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$26 DB 072H ; ImGui::InputTextEx
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$27 DB 072H ; ImGui::InputTextEx
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+7
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$28 DB 063H ; ImGui::InputTextEx
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	073H
	DB	063H
	DB	072H
	DB	065H
	DB	065H
	DB	06eH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$29 DB 063H ; ImGui::InputTextEx
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	073H
	DB	063H
	DB	072H
	DB	065H
	DB	065H
	DB	06eH
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+5
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcFrameData DD 01eH ; ImGui::InputTextEx
	DD	00H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcVarDesc
	ORG $+8
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcVarDesc DD 01078H ; ImGui::InputTextEx
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$29
	DD	01058H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$28
	DD	0fe8H
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$27
	DD	0fc8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$26
	DD	0fa8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$25
	DD	0f88H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$24
	DD	0ec8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$23
	DD	0de8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$22
	DD	0db8H
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$21
	DD	0d98H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$20
	DD	0d78H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$19
	DD	0d38H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$18
	DD	0cd8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$17
	DD	0cb8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$16
	DD	0c88H
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$15
	DD	0c38H
	DD	038H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$14
	DD	0b48H
	DD	038H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$13
	DD	0ab8H
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$12
	DD	0a54H
	DD	04H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$11
	DD	0914H
	DD	04H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$10
	DD	06f4H
	DD	04H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$9
	DD	06b4H
	DD	04H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$8
	DD	0578H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$7
	DD	04b8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$6
	DD	0298H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$5
	DD	0248H
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$4
	DD	0218H
	DD	010H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$3
	DD	01f8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$2
	DD	01d8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$1
	DD	01b8H
	DD	08H
	DQ	FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z DD 025052101H
	DD	011c2321H
	DD	07015001fH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DataTypeCompare@ImGui@@YAHHPEBX0@Z DD 025051c01H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	06c4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z DD 025064d19H
	DD	011e2323H
	DD	070170054H
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0298H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$0 DB 064H ; ImGui::DataTypeApplyOpFromText
	DB	061H
	DB	074H
	DB	061H
	DB	05fH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	00H
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$1 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	031H
	DB	069H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$2 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	030H
	DB	069H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$3 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	031H
	DB	066H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$4 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	030H
	DB	066H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$5 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	031H
	DB	066H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$6 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	030H
	DB	066H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$7 DB 061H ; ImGui::DataTypeApplyOpFromText
	DB	072H
	DB	067H
	DB	031H
	DB	066H
	DB	00H
	ORG $+2
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$8 DB 076H ; ImGui::DataTypeApplyOpFromText
	DB	033H
	DB	032H
	DB	00H
	ORG $+8
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcVarDesc DD 01c4H ; ImGui::DataTypeApplyOpFromText
	DD	04H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$8
	DD	01a8H
	DD	08H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$7
	DD	0188H
	DD	08H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$6
	DD	0144H
	DD	04H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$5
	DD	0124H
	DD	04H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$4
	DD	0e4H
	DD	04H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$3
	DD	0c4H
	DD	04H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcName$0
	ORG $+432
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcFrameData DD 09H ; ImGui::DataTypeApplyOpFromText
	DD	00H
	DQ	FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z DD 025052001H
	DD	011b2320H
	DD	07014001fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z DD 025052101H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreePushOverrideID@ImGui@@YAXI@Z DD 025051201H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z DD 025051601H
	DD	01112316H
	DD	0700a0031H
	DD	05009H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	043H
	DW	0fe0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z DD 045064a19H
	DD	011c4321H
	DD	070150102H
	DD	050136014H
	DD	imagerel __GSHandlerCheck
	DD	0808H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$0 DB 070H ; ImGui::TreeNodeBehavior
	DB	061H
	DB	064H
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$1 DB 06cH ; ImGui::TreeNodeBehavior
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$2 DB 066H ; ImGui::TreeNodeBehavior
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$3 DB 074H ; ImGui::TreeNodeBehavior
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+7
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$4 DB 069H ; ImGui::TreeNodeBehavior
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	061H
	DB	063H
	DB	074H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+4
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$5 DB 068H ; ImGui::TreeNodeBehavior
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$6 DB 068H ; ImGui::TreeNodeBehavior
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcFrameData DD 07H ; ImGui::TreeNodeBehavior
	DD	00H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcVarDesc
	ORG $+8
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcVarDesc DD 0344H ; ImGui::TreeNodeBehavior
	DD	01H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$6
	DD	0324H
	DD	01H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$5
	DD	01d8H
	DD	010H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$4
	DD	01b8H
	DD	08H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$3
	DD	0128H
	DD	010H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$1
	DD	0c8H
	DD	08H
	DQ	FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0589H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z DD 035064c19H
	DD	011d3322H
	DD	07016008cH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	0450H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$0 DB 068H ; ImGui::SplitterBehavior
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$1 DB 068H ; ImGui::SplitterBehavior
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$2 DB 062H ; ImGui::SplitterBehavior
	DB	062H
	DB	05fH
	DB	069H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	061H
	DB	063H
	DB	074H
	DB	00H
	ORG $+4
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$3 DB 062H ; ImGui::SplitterBehavior
	DB	062H
	DB	05fH
	DB	072H
	DB	065H
	DB	06eH
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+6
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$4 DB 06dH ; ImGui::SplitterBehavior
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	064H
	DB	065H
	DB	06cH
	DB	074H
	DB	061H
	DB	05fH
	DB	032H
	DB	064H
	DB	00H
	ORG $+1
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcVarDesc DD 0158H ; ImGui::SplitterBehavior
	DD	08H
	DQ	FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$4
	DD	0128H
	DD	010H
	DQ	FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$3
	DD	0f8H
	DD	010H
	DQ	FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$2
	DD	0d4H
	DD	01H
	DQ	FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$1
	DD	0b4H
	DD	01H
	DQ	FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcName$0
	ORG $+240
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcFrameData DD 05H ; ImGui::SplitterBehavior
	DD	00H
	DQ	FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	077bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z DD 055054b19H
	DD	011c5321H
	DD	070150047H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$0 DB 076H ; ImGui::SliderBehavior
	DB	033H
	DB	032H
	DB	00H
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$1 DB 076H ; ImGui::SliderBehavior
	DB	033H
	DB	032H
	DB	00H
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$2 DB 076H ; ImGui::SliderBehavior
	DB	033H
	DB	032H
	DB	00H
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$3 DB 076H ; ImGui::SliderBehavior
	DB	033H
	DB	032H
	DB	00H
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcVarDesc DD 0134H ; ImGui::SliderBehavior
	DD	04H
	DQ	FLAT:?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$3
	DD	0f4H
	DD	04H
	DQ	FLAT:?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$2
	DD	0b4H
	DD	04H
	DQ	FLAT:?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$1
	DD	074H
	DD	04H
	DQ	FLAT:?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcName$0
	ORG $+192
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcFrameData DD 04H ; ImGui::SliderBehavior
	DD	00H
	DQ	FLAT:?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	043H
	DW	094dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z DD 045054a19H
	DD	011c4321H
	DD	070150049H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0230H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$0 DB 076H ; ImGui::DragBehavior
	DB	033H
	DB	032H
	DB	00H
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$1 DB 076H ; ImGui::DragBehavior
	DB	033H
	DB	032H
	DB	00H
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$2 DB 076H ; ImGui::DragBehavior
	DB	033H
	DB	032H
	DB	00H
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$3 DB 076H ; ImGui::DragBehavior
	DB	033H
	DB	032H
	DB	00H
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcVarDesc DD 0124H ; ImGui::DragBehavior
	DD	04H
	DQ	FLAT:?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$3
	DD	0e4H
	DD	04H
	DQ	FLAT:?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$2
	DD	0a4H
	DD	04H
	DQ	FLAT:?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcName$0
	ORG $+192
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcFrameData DD 04H ; ImGui::DragBehavior
	DD	00H
	DQ	FLAT:?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z DD 025052101H
	DD	011c2321H
	DD	07015007dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	04d5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SeparatorEx@ImGui@@YAXH@Z DD 035053b19H
	DD	010d3312H
	DD	070060093H
	DD	05005H
	DD	imagerel __GSHandlerCheck
	DD	0488H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SeparatorEx@ImGui@@YAXH@Z$rtcName$0 DB 062H		; ImGui::SeparatorEx
	DB	062H
	DB	00H
	ORG $+1
?SeparatorEx@ImGui@@YAXH@Z$rtcName$1 DB 062H		; ImGui::SeparatorEx
	DB	062H
	DB	00H
	ORG $+9
?SeparatorEx@ImGui@@YAXH@Z$rtcVarDesc DD 0188H		; ImGui::SeparatorEx
	DD	010H
	DQ	FLAT:?SeparatorEx@ImGui@@YAXH@Z$rtcName$1
	DD	0f8H
	DD	010H
	DQ	FLAT:?SeparatorEx@ImGui@@YAXH@Z$rtcName$0
	ORG $+96
?SeparatorEx@ImGui@@YAXH@Z$rtcFrameData DD 02H		; ImGui::SeparatorEx
	DD	00H
	DQ	FLAT:?SeparatorEx@ImGui@@YAXH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	01b5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z DD 035064819H
	DD	0119331eH
	DD	070120034H
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcName$0 DB 06fH ; ImGui::GetWindowScrollbarRect
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+5
?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcName$1 DB 069H ; ImGui::GetWindowScrollbarRect
	DB	06eH
	DB	06eH
	DB	065H
	DB	072H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+5
?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcVarDesc DD 068H ; ImGui::GetWindowScrollbarRect
	DD	010H
	DQ	FLAT:?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcName$0
	ORG $+96
?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcFrameData DD 02H ; ImGui::GetWindowScrollbarRect
	DD	00H
	DQ	FLAT:?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	043H
	DW	03a8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z DD 045054a19H
	DD	011c4321H
	DD	07015005fH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	02e8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcName$0 DB 062H ; ImGui::ImageButtonEx
	DB	062H
	DB	00H
	ORG $+5
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcName$1 DB 068H ; ImGui::ImageButtonEx
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcName$2 DB 068H ; ImGui::ImageButtonEx
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcFrameData DD 03H ; ImGui::ImageButtonEx
	DD	00H
	DQ	FLAT:?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcVarDesc
	ORG $+8
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcVarDesc DD 0d4H ; ImGui::ImageButtonEx
	DD	01H
	DQ	FLAT:?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcName$2
	DD	0b4H
	DD	01H
	DQ	FLAT:?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcName$1
	DD	088H
	DD	010H
	DQ	FLAT:?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	08feH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z DD 035064c19H
	DD	011d3322H
	DD	0701600b0H
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	0570H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$0 DB 062H ; ImGui::ScrollbarEx
	DB	062H
	DB	00H
	ORG $+1
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$1 DB 068H ; ImGui::ScrollbarEx
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+7
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$2 DB 068H ; ImGui::ScrollbarEx
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$3 DB 067H ; ImGui::ScrollbarEx
	DB	072H
	DB	061H
	DB	062H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcFrameData DD 04H ; ImGui::ScrollbarEx
	DD	00H
	DQ	FLAT:?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcVarDesc
	ORG $+8
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcVarDesc DD 0348H ; ImGui::ScrollbarEx
	DD	010H
	DQ	FLAT:?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$3
	DD	01e4H
	DD	01H
	DQ	FLAT:?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$2
	DD	01c4H
	DD	01H
	DQ	FLAT:?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$1
	DD	0118H
	DD	010H
	DQ	FLAT:?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	034H
	DW	0271H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z DD 045053b19H
	DD	010d4312H
	DD	070060043H
	DD	05005H
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z$rtcName$0 DB 062H	; ImGui::Scrollbar
	DB	062H
	DB	00H
	ORG $+13
?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z$rtcVarDesc DD 0a8H	; ImGui::Scrollbar
	DD	010H
	DQ	FLAT:?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z$rtcName$0
	ORG $+48
?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z$rtcFrameData DD 01H ; ImGui::Scrollbar
	DD	00H
	DQ	FLAT:?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	0341H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z DD 035054b19H
	DD	011c3321H
	DD	07015005bH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	02c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcName$0 DB 062H ; ImGui::ArrowButtonEx
	DB	062H
	DB	00H
	ORG $+5
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcName$1 DB 068H ; ImGui::ArrowButtonEx
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcName$2 DB 068H ; ImGui::ArrowButtonEx
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcFrameData DD 03H ; ImGui::ArrowButtonEx
	DD	00H
	DQ	FLAT:?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcVarDesc
	ORG $+8
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcVarDesc DD 0104H ; ImGui::ArrowButtonEx
	DD	01H
	DQ	FLAT:?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcName$2
	DD	0e4H
	DD	01H
	DQ	FLAT:?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcName$1
	DD	098H
	DD	010H
	DQ	FLAT:?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	039H
	DW	02f9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z DD 035054019H
	DD	01123317H
	DD	0700b005fH
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	02e8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$0 DB 062H ; ImGui::CollapseButton
	DB	062H
	DB	00H
	ORG $+5
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$1 DB 068H ; ImGui::CollapseButton
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$2 DB 068H ; ImGui::CollapseButton
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$3 DB 063H ; ImGui::CollapseButton
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcVarDesc DD 0148H ; ImGui::CollapseButton
	DD	08H
	DQ	FLAT:?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$3
	DD	0c4H
	DD	01H
	DQ	FLAT:?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$2
	DD	0a4H
	DD	01H
	DQ	FLAT:?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$1
	DD	078H
	DD	010H
	DQ	FLAT:?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$0
	ORG $+192
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcFrameData DD 04H ; ImGui::CollapseButton
	DD	00H
	DQ	FLAT:?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	04f9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z DD 035064119H
	DD	01133318H
	DD	0700c00b2H
	DD	0500a600bH
	DD	imagerel __GSHandlerCheck
	DD	0580H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$0 DB 062H ; ImGui::CloseButton
	DB	062H
	DB	00H
	ORG $+5
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$1 DB 062H ; ImGui::CloseButton
	DB	062H
	DB	05fH
	DB	069H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	061H
	DB	063H
	DB	074H
	DB	00H
	ORG $+4
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$2 DB 068H ; ImGui::CloseButton
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$3 DB 068H ; ImGui::CloseButton
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$4 DB 063H ; ImGui::CloseButton
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcVarDesc DD 0198H ; ImGui::CloseButton
	DD	08H
	DQ	FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$4
	DD	0134H
	DD	01H
	DQ	FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$3
	DD	0114H
	DD	01H
	DQ	FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$2
	DD	0a8H
	DD	010H
	DQ	FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$1
	DD	078H
	DD	010H
	DQ	FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcName$0
	ORG $+240
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcFrameData DD 05H ; ImGui::CloseButton
	DD	00H
	DQ	FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	03b3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z DD 045054719H
	DD	0118431dH
	DD	070110061H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	02f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$0 DB 06cH ; ImGui::ButtonEx
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$1 DB 070H ; ImGui::ButtonEx
	DB	06fH
	DB	073H
	DB	00H
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$2 DB 073H ; ImGui::ButtonEx
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$3 DB 062H ; ImGui::ButtonEx
	DB	062H
	DB	00H
	ORG $+5
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$4 DB 068H ; ImGui::ButtonEx
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$5 DB 068H ; ImGui::ButtonEx
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcVarDesc DD 0174H ; ImGui::ButtonEx
	DD	01H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$5
	DD	0154H
	DD	01H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$4
	DD	0128H
	DD	010H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$3
	DD	0108H
	DD	08H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$1
	DD	0c8H
	DD	08H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$0
	ORG $+288
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcFrameData DD 06H ; ImGui::ButtonEx
	DD	00H
	DQ	FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	073bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextEx@ImGui@@YAXPEBD0H@Z DD 035054719H
	DD	0118331dH
	DD	0701100b3H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0588H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$0 DB 074H		; ImGui::TextEx
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+7
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$1 DB 074H		; ImGui::TextEx
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$2 DB 070H		; ImGui::TextEx
	DB	06fH
	DB	073H
	DB	00H
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$3 DB 06cH		; ImGui::TextEx
	DB	069H
	DB	06eH
	DB	065H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+2
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$4 DB 062H		; ImGui::TextEx
	DB	062H
	DB	00H
	ORG $+1
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$5 DB 074H		; ImGui::TextEx
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$6 DB 062H		; ImGui::TextEx
	DB	062H
	DB	00H
	ORG $+1
?TextEx@ImGui@@YAXPEBD0H@Z$rtcVarDesc DD 02d8H		; ImGui::TextEx
	DD	010H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$6
	DD	02b8H
	DD	08H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$5
	DD	0268H
	DD	010H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$4
	DD	01d8H
	DD	010H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$3
	DD	0158H
	DD	08H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$2
	DD	0138H
	DD	08H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcName$0
	ORG $+336
?TextEx@ImGui@@YAXPEBD0H@Z$rtcFrameData DD 07H		; ImGui::TextEx
	DD	00H
	DQ	FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0600H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z DD 045064d19H
	DD	011e4323H
	DD	07017008cH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0458H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$0 DB 06cH ; ImGui::TabItemLabelAndCloseButton
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$1 DB 074H ; ImGui::TabItemLabelAndCloseButton
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	070H
	DB	069H
	DB	078H
	DB	065H
	DB	06cH
	DB	05fH
	DB	063H
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+5
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$2 DB 074H ; ImGui::TabItemLabelAndCloseButton
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	065H
	DB	06cH
	DB	06cH
	DB	069H
	DB	070H
	DB	073H
	DB	069H
	DB	073H
	DB	05fH
	DB	063H
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+2
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$3 DB 062H ; ImGui::TabItemLabelAndCloseButton
	DB	075H
	DB	074H
	DB	074H
	DB	06fH
	DB	06eH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$4 DB 06cH ; ImGui::TabItemLabelAndCloseButton
	DB	061H
	DB	073H
	DB	074H
	DB	05fH
	DB	069H
	DB	074H
	DB	065H
	DB	06dH
	DB	05fH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	00H
	ORG $+7
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$5 DB 062H ; ImGui::TabItemLabelAndCloseButton
	DB	075H
	DB	06cH
	DB	06cH
	DB	065H
	DB	074H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+14
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcVarDesc DD 01c8H ; ImGui::TabItemLabelAndCloseButton
	DD	010H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$5
	DD	0188H
	DD	028H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$4
	DD	0108H
	DD	08H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$3
	DD	0b8H
	DD	010H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$2
	DD	088H
	DD	010H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcName$0
	ORG $+288
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcFrameData DD 06H ; ImGui::TabItemLabelAndCloseButton
	DD	00H
	DQ	FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z DD 035052201H
	DD	011d3322H
	DD	070160053H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0170H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z DD 035054719H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcName$0 DB 06cH ; ImGui::TabItemCalcSize
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcName$1 DB 073H ; ImGui::TabItemCalcSize
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+15
?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcVarDesc DD 078H ; ImGui::TabItemCalcSize
	DD	08H
	DQ	FLAT:?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcName$1
	DD	058H
	DD	08H
	DQ	FLAT:?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcName$0
	ORG $+96
?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcFrameData DD 02H ; ImGui::TabItemCalcSize
	DD	00H
	DQ	FLAT:?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0e67H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z DD 055054c19H
	DD	011d5322H
	DD	0701600fdH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	07d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$0 DB 073H ; ImGui::TabItemEx
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$1 DB 062H ; ImGui::TabItemEx
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	06dH
	DB	061H
	DB	069H
	DB	06eH
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+1
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$2 DB 070H ; ImGui::TabItemEx
	DB	06fH
	DB	073H
	DB	00H
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$3 DB 062H ; ImGui::TabItemEx
	DB	062H
	DB	00H
	ORG $+1
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$4 DB 062H ; ImGui::TabItemEx
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+2
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$5 DB 068H ; ImGui::TabItemEx
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$6 DB 068H ; ImGui::TabItemEx
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$7 DB 06aH ; ImGui::TabItemEx
	DB	075H
	DB	073H
	DB	074H
	DB	05fH
	DB	063H
	DB	06cH
	DB	06fH
	DB	073H
	DB	065H
	DB	064H
	DB	00H
	ORG $+4
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$8 DB 074H ; ImGui::TabItemEx
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	063H
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	064H
	DB	00H
	ORG $+3
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcVarDesc DD 03c4H ; ImGui::TabItemEx
	DD	01H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$8
	DD	03a4H
	DD	01H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$7
	DD	02e4H
	DD	01H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$6
	DD	02c4H
	DD	01H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$5
	DD	0288H
	DD	08H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$4
	DD	0238H
	DD	010H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$3
	DD	0218H
	DD	08H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$2
	DD	01d8H
	DD	08H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$1
	DD	0d8H
	DD	08H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcName$0
	ORG $+432
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcFrameData DD 09H ; ImGui::TabItemEx
	DD	00H
	DQ	FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	023dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z DD 025063e19H
	DD	010f2314H
	DD	07008003eH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z$rtcName$0 DB 069H ; ImGui::TabBarProcessReorder
	DB	074H
	DB	065H
	DB	06dH
	DB	05fH
	DB	074H
	DB	06dH
	DB	070H
	DB	00H
	ORG $+7
?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z$rtcVarDesc DD 088H ; ImGui::TabBarProcessReorder
	DD	028H
	DQ	FLAT:?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z$rtcName$0
	ORG $+48
?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z$rtcFrameData DD 01H ; ImGui::TabBarProcessReorder
	DD	00H
	DQ	FLAT:?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z DD 025051d01H
	DD	0118231dH
	DD	070110045H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z DD 035061e01H
	DD	0119331eH
	DD	07012004eH
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsNavInputDown@ImGui@@YA_NH@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsKeyPressedMap@ImGui@@YA_NH_N@Z DD 025051601H
	DD	01112316H
	DD	0700a0025H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndComboPreview@ImGui@@YAXXZ DD 025061001H
	DD	010b2310H
	DD	070040042H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginComboPreview@ImGui@@YA_NXZ DD 025050f01H
	DD	010a230fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03eH
	DW	03b3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z DD 045054519H
	DD	0117431cH
	DD	07010007bH
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	03c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$0 DB 06eH ; ImGui::BeginComboPopup
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+3
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$1 DB 073H ; ImGui::BeginComboPopup
	DB	069H
	DB	07aH
	DB	065H
	DB	05fH
	DB	065H
	DB	078H
	DB	070H
	DB	065H
	DB	063H
	DB	074H
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$2 DB 072H ; ImGui::BeginComboPopup
	DB	05fH
	DB	06fH
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	00H
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$3 DB 070H ; ImGui::BeginComboPopup
	DB	06fH
	DB	073H
	DB	00H
	ORG $+12
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcVarDesc DD 0148H ; ImGui::BeginComboPopup
	DD	08H
	DQ	FLAT:?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$3
	DD	0118H
	DD	010H
	DQ	FLAT:?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$1
	DD	0a8H
	DD	010H
	DQ	FLAT:?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcName$0
	ORG $+192
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcFrameData DD 04H ; ImGui::BeginComboPopup
	DD	00H
	DQ	FLAT:?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	030fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z DD 025054d19H
	DD	011e2323H
	DD	070170045H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0218H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcName$0 DB 061H ; ImGui::BeginViewportSideBar
	DB	076H
	DB	061H
	DB	069H
	DB	06cH
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+1
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcName$1 DB 070H ; ImGui::BeginViewportSideBar
	DB	06fH
	DB	073H
	DB	00H
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcName$2 DB 073H ; ImGui::BeginViewportSideBar
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcFrameData DD 03H ; ImGui::BeginViewportSideBar
	DD	00H
	DQ	FLAT:?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcVarDesc
	ORG $+8
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcVarDesc DD 0d8H ; ImGui::BeginViewportSideBar
	DD	08H
	DQ	FLAT:?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcName$1
	DD	068H
	DD	010H
	DQ	FLAT:?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z DD 025051d01H
	DD	0118231dH
	DD	070110039H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImGuiTabBar@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'^'
	DB	02H
	DB	'1', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImGuiTabBar@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImGuiTabBar@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImGuiTabBar@@QEAA@XZ
	DD	imagerel $ip2state$??0ImGuiTabBar@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTabBar@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImGuiTabBar@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTabItem@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Restore@ImGuiLastItemDataBackup@@QEBAXXZ DD 025061401H
	DD	010f2314H
	DD	070080020H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Backup@ImGuiLastItemDataBackup@@QEAAXXZ DD 025061401H
	DD	010f2314H
	DD	070080020H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiLastItemDataBackup@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ DD 035051801H
	DD	01133318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MenuBarHeight@ImGuiWindow@@QEBAMXZ DD 035051301H
	DD	010e3313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TitleBarHeight@ImGuiWindow@@QEBAMXZ DD 035051301H
	DD	010e3313H
	DD	070070023H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcFontSize@ImGuiWindow@@QEBAMXZ DD 035051301H
	DD	010e3313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ DD 035051801H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ DB 06H
	DB	00H
	DB	00H
	DB	0d9H, 03H
	DB	02H
	DB	'p'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ DB 028H
	DD	imagerel $stateUnwindMap$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ
	DD	imagerel $ip2state$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ DD 025051311H
	DD	010e2313H
	DD	070070037H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03bH
	DB	0efH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ DD 035054219H
	DD	01133318H
	DD	0700c0027H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0128H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcName$0 DB 070H ; ImGuiViewportP::GetBuildWorkRect
	DB	06fH
	DB	073H
	DB	00H
?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcName$1 DB 073H ; ImGuiViewportP::GetBuildWorkRect
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+7
?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcVarDesc DD 058H ; ImGuiViewportP::GetBuildWorkRect
	DD	08H
	DQ	FLAT:?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcName$0
	ORG $+96
?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcFrameData DD 02H ; ImGuiViewportP::GetBuildWorkRect
	DD	00H
	DQ	FLAT:?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiPtrOrIndex@@QEAA@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiPtrOrIndex@@QEAA@PEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearFlags@ImGuiNextItemData@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearFlags@ImGuiNextWindowData@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@H@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SelectAll@ImGuiInputTextState@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearSelection@ImGuiInputTextState@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HasSelection@ImGuiInputTextState@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CursorClamp@ImGuiInputTextState@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z DD 035051901H
	DD	01143319H
	DD	0700d001fH
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z DD 035052501H
	DD	01203325H
	DD	070190023H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Update@ImGuiMenuColumns@@QEAAXHM_N@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClipWith@ImRect@@QEAAXAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Translate@ImRect@@QEAAXAEBUImVec2@@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Expand@ImRect@@QEAAXAEBUImVec2@@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Expand@ImRect@@QEAAXM@Z DD 025031501H
	DD	0b2102315H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Overlaps@ImRect@@QEBA_NAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Contains@ImRect@@QEBA_NAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetBR@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetBL@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTR@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTL@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetArea@ImRect@@QEBAMXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetHeight@ImRect@@QEBAMXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetWidth@ImRect@@QEBAMXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetSize@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCenter@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@MMMM@Z DD 025032101H
	DD	0d21c2321H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@AEBUImVec4@@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@AEBUImVec2@@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@XZ DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@M@@YAMMM@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@M@@YAMMM@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLinearSweep@@YAMMMM@Z DD 025031c01H
	DD	0b217231cH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z DD 025032001H
	DD	0b21b2320H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloor@@YA?AUImVec2@@AEBU1@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloor@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLengthSqr@@YAMAEBUImVec2@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImSaturate@@YAMM@Z DD 025031001H
	DD	0d20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLerp@@YA?AUImVec2@@AEBU1@00@Z DD 025031e01H
	DD	0b219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z DD 025031f01H
	DD	0b21a231fH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAbs@@YANN@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAbs@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLog@@YANN@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLog@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImPow@@YANNN@Z DD 025031601H
	DD	0b2112316H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImPow@@YAMMM@Z DD 025031601H
	DD	0b2112316H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??H@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AUImVec2@@AEBU0@M@Z DD 025031a01H
	DD	0b215231aH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImCharIsBlankW@@YA_NI@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImCharIsBlankA@@YA_ND@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	019dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImParseFormatPrecision@@YAHPEBDH@Z DD 025054119H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	0f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImParseFormatPrecision@@YAHPEBDH@Z$rtcName$0 DB 070H	; ImParseFormatPrecision
	DB	072H
	DB	065H
	DB	063H
	DB	069H
	DB	073H
	DB	069H
	DB	06fH
	DB	06eH
	DB	00H
	ORG $+6
?ImParseFormatPrecision@@YAHPEBDH@Z$rtcVarDesc DD 024H	; ImParseFormatPrecision
	DD	04H
	DQ	FLAT:?ImParseFormatPrecision@@YAHPEBDH@Z$rtcName$0
	ORG $+48
?ImParseFormatPrecision@@YAHPEBDH@Z$rtcFrameData DD 01H	; ImParseFormatPrecision
	DD	00H
	DQ	FLAT:?ImParseFormatPrecision@@YAHPEBDH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z DD 025051d01H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImParseFormatFindEnd@@YAPEBDPEBD@Z DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImParseFormatFindStart@@YAPEBDPEBD@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImIsPowerOfTwo@@YA_NH@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsf DD 035051401H
	DD	010f3314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	09fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 025054c19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sscanf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sscanf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:sscanf$rtcName$0
	ORG $+48
sscanf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sscanf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_scanf_options DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z DD 045052101H
	DD	011c4321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z DD 045052101H
	DD	011c4321H
	DD	070150025H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z DD 055052101H
	DD	011c5321H
	DD	070150027H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z DD 045052201H
	DD	011d4322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03fH
	DB	0fdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ListBoxHeader@ImGui@@YA_NPEBDHH@Z DD 025054619H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ListBoxHeader@ImGui@@YA_NPEBDHH@Z$rtcName$0 DB 073H	; ImGui::ListBoxHeader
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+11
?ListBoxHeader@ImGui@@YA_NPEBDHH@Z$rtcVarDesc DD 068H	; ImGui::ListBoxHeader
	DD	08H
	DQ	FLAT:?ListBoxHeader@ImGui@@YA_NPEBDHH@Z$rtcName$0
	ORG $+48
?ListBoxHeader@ImGui@@YA_NPEBDHH@Z$rtcFrameData DD 01H	; ImGui::ListBoxHeader
	DD	00H
	DQ	FLAT:?ListBoxHeader@ImGui@@YA_NPEBDHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCharAdvance@ImFont@@QEBAMG@Z DD 035051801H
	DD	01133318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@M@@QEBAAEBMH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@M@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?contains@?$ImVector@I@@QEBA_NAEBI@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@I@@QEAAXAEBI@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@I@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@I@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@I@@QEAAAEAIXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimWriteIdx@ImDrawList@@QEAAXG@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathStroke@ImDrawList@@QEAAXIHM@Z DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@ImGuiTextBuffer@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTextBuffer@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@D@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@D@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@D@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@D@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z DD 025062201H
	DD	011d2322H
	DD	070160032H
	DD	050146015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z DD 025051c01H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiInputTextCallbackData@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?contains@?$ImVector@G@@QEBA_NAEBG@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@G@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@G@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@G@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@G@@QEBAAEBGH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@G@@QEAAAEAGH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@G@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@G@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@G@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@G@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@G@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@G@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@G@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??3@YAXPEAXUImNewWrapper@@0@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetTabItemClosed@ImGui@@YAXPEBD@Z DD 025051301H
	DD	010e2313H
	DD	070070031H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TabItemButton@ImGui@@YA_NPEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b0029H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndTabItem@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z DD 025051d01H
	DD	0118231dH
	DD	070110031H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndTabBar@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	015aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginTabBar@ImGui@@YA_NPEBDH@Z DD 035054119H
	DD	01123317H
	DD	0700b0037H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginTabBar@ImGui@@YA_NPEBDH@Z$rtcName$0 DB 074H	; ImGui::BeginTabBar
	DB	061H
	DB	062H
	DB	05fH
	DB	062H
	DB	061H
	DB	072H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+5
?BeginTabBar@ImGui@@YA_NPEBDH@Z$rtcVarDesc DD 0b8H	; ImGui::BeginTabBar
	DD	010H
	DQ	FLAT:?BeginTabBar@ImGui@@YA_NPEBDH@Z$rtcName$0
	ORG $+48
?BeginTabBar@ImGui@@YA_NPEBDH@Z$rtcFrameData DD 01H	; ImGui::BeginTabBar
	DD	00H
	DQ	FLAT:?BeginTabBar@ImGui@@YA_NPEBDH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0502H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MenuItem@ImGui@@YA_NPEBD0_N1@Z DD 035054c19H
	DD	011d3322H
	DD	070160095H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0498H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcName$0 DB 070H	; ImGui::MenuItem
	DB	06fH
	DB	073H
	DB	00H
	ORG $+4
?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcName$1 DB 06cH	; ImGui::MenuItem
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+13
?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcVarDesc DD 0b8H	; ImGui::MenuItem
	DD	08H
	DQ	FLAT:?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcName$0
	ORG $+96
?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcFrameData DD 02H	; ImGui::MenuItem
	DD	00H
	DQ	FLAT:?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndMenu@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	0cc2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginMenu@ImGui@@YA_NPEBD_N@Z DD 035054119H
	DD	01123317H
	DD	0700b00fdH
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	07d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$0 DB 069H	; ImGui::BeginMenu
	DB	064H
	DB	00H
	ORG $+5
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$1 DB 06cH	; ImGui::BeginMenu
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$3 DB 070H	; ImGui::BeginMenu
	DB	06fH
	DB	073H
	DB	00H
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$2 DB 070H	; ImGui::BeginMenu
	DB	06fH
	DB	070H
	DB	075H
	DB	070H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+2
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$5 DB 074H	; ImGui::BeginMenu
	DB	061H
	DB	00H
	ORG $+1
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$4 DB 06eH	; ImGui::BeginMenu
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	077H
	DB	069H
	DB	06eH
	DB	064H
	DB	06fH
	DB	077H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+3
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$6 DB 074H	; ImGui::BeginMenu
	DB	062H
	DB	00H
	ORG $+1
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$7 DB 074H	; ImGui::BeginMenu
	DB	063H
	DB	00H
	ORG $+5
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcFrameData DD 08H	; ImGui::BeginMenu
	DD	00H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcVarDesc
	ORG $+8
?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcVarDesc DD 0348H	; ImGui::BeginMenu
	DD	08H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$7
	DD	0328H
	DD	08H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$6
	DD	0308H
	DD	08H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$5
	DD	02d8H
	DD	010H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$4
	DD	0198H
	DD	08H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$3
	DD	0178H
	DD	08H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$1
	DD	094H
	DD	04H
	DQ	FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndMainMenuBar@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginMainMenuBar@ImGui@@YA_NXZ DD 035050f01H
	DD	010a330fH
	DD	07003003bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndMenuBar@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0251H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginMenuBar@ImGui@@YA_NXZ DD 035053119H
	DD	010a330fH
	DD	070030035H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginMenuBar@ImGui@@YA_NXZ$rtcName$0 DB 062H		; ImGui::BeginMenuBar
	DB	061H
	DB	072H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+7
?BeginMenuBar@ImGui@@YA_NXZ$rtcName$1 DB 063H		; ImGui::BeginMenuBar
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?BeginMenuBar@ImGui@@YA_NXZ$rtcVarDesc DD 088H		; ImGui::BeginMenuBar
	DD	010H
	DQ	FLAT:?BeginMenuBar@ImGui@@YA_NXZ$rtcName$1
	DD	058H
	DD	010H
	DQ	FLAT:?BeginMenuBar@ImGui@@YA_NXZ$rtcName$0
	ORG $+96
?BeginMenuBar@ImGui@@YA_NXZ$rtcFrameData DD 02H		; ImGui::BeginMenuBar
	DD	00H
	DQ	FLAT:?BeginMenuBar@ImGui@@YA_NXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	041H
	DB	0cfH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Value@ImGui@@YAXPEBDM0@Z DD 025054819H
	DD	0119231eH
	DD	070120029H
	DD	05011H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Value@ImGui@@YAXPEBDM0@Z$rtcName$0 DB 066H		; ImGui::Value
	DB	06dH
	DB	074H
	DB	00H
	ORG $+12
?Value@ImGui@@YAXPEBDM0@Z$rtcVarDesc DD 030H		; ImGui::Value
	DD	040H
	DQ	FLAT:?Value@ImGui@@YAXPEBDM0@Z$rtcName$0
	ORG $+48
?Value@ImGui@@YAXPEBDM0@Z$rtcFrameData DD 01H		; ImGui::Value
	DD	00H
	DQ	FLAT:?Value@ImGui@@YAXPEBDM0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Value@ImGui@@YAXPEBDI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Value@ImGui@@YAXPEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Value@ImGui@@YAXPEBD_N@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z DD 055052201H
	DD	011d5322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	0e3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z DD 055054c19H
	DD	011d5322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcName$0 DB 064H ; ImGui::PlotHistogram
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+11
?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcVarDesc DD 058H ; ImGui::PlotHistogram
	DD	010H
	DQ	FLAT:?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcName$0
	ORG $+48
?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcFrameData DD 01H ; ImGui::PlotHistogram
	DD	00H
	DQ	FLAT:?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z DD 055052201H
	DD	011d5322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	0e0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z DD 055054c19H
	DD	011d5322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcName$0 DB 064H ; ImGui::PlotLines
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+11
?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcVarDesc DD 058H ; ImGui::PlotLines
	DD	010H
	DQ	FLAT:?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcName$0
	ORG $+48
?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcFrameData DD 01H ; ImGui::PlotLines
	DD	00H
	DQ	FLAT:?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	02a4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DB 06H
	DB	00H
	DB	00H
	DB	0f1H, 03H
	DB	02H
	DB	0fdH, 05H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DB 028H
	DD	imagerel $stateUnwindMap$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
	DD	imagerel $ip2state$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DD 025054c19H
	DD	011d2322H
	DD	07016004bH
	DD	05015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
	DD	024aH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$0 DB 073H ; ImGui::ListBox
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$1 DB 063H ; ImGui::ListBox
	DB	06cH
	DB	069H
	DB	070H
	DB	070H
	DB	065H
	DB	072H
	DB	00H
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$2 DB 069H ; ImGui::ListBox
	DB	074H
	DB	065H
	DB	06dH
	DB	05fH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+6
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcVarDesc DD 0108H ; ImGui::ListBox
	DD	08H
	DQ	FLAT:?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$2
	DD	0a8H
	DD	01cH
	DQ	FLAT:?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$0
	ORG $+144
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcFrameData DD 03H ; ImGui::ListBox
	DD	00H
	DQ	FLAT:?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndListBox@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0393H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z DD 035054219H
	DD	01133318H
	DD	0700c008dH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0450H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$0 DB 06cH ; ImGui::BeginListBox
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$1 DB 073H ; ImGui::BeginListBox
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$4 DB 062H ; ImGui::BeginListBox
	DB	062H
	DB	00H
	ORG $+1
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$2 DB 066H ; ImGui::BeginListBox
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$3 DB 066H ; ImGui::BeginListBox
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$5 DB 06cH ; ImGui::BeginListBox
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+14
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcVarDesc DD 0178H ; ImGui::BeginListBox
	DD	08H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$5
	DD	0148H
	DD	010H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$4
	DD	0118H
	DD	010H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$3
	DD	0f8H
	DD	08H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$2
	DD	0d8H
	DD	08H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$1
	DD	0b8H
	DD	08H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcName$0
	ORG $+288
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcFrameData DD 06H ; ImGui::BeginListBox
	DD	00H
	DQ	FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	0a54H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z DD 045054b19H
	DD	011c4321H
	DD	0701500b9H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	05b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$0 DB 06cH ; ImGui::Selectable
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$1 DB 073H ; ImGui::Selectable
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$2 DB 070H ; ImGui::Selectable
	DB	06fH
	DB	073H
	DB	00H
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$3 DB 074H ; ImGui::Selectable
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
	ORG $+3
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$5 DB 062H ; ImGui::Selectable
	DB	062H
	DB	00H
	ORG $+1
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$4 DB 074H ; ImGui::Selectable
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
	ORG $+7
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$6 DB 068H ; ImGui::Selectable
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$7 DB 068H ; ImGui::Selectable
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcFrameData DD 08H ; ImGui::Selectable
	DD	00H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcVarDesc
	ORG $+8
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcVarDesc DD 0354H ; ImGui::Selectable
	DD	01H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$7
	DD	0334H
	DD	01H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$6
	DD	01c8H
	DD	010H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$5
	DD	01a8H
	DD	08H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$4
	DD	0188H
	DD	08H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$3
	DD	0108H
	DD	08H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$2
	DD	0e8H
	DD	08H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$1
	DD	0c8H
	DD	08H
	DQ	FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetNextItemOpen@ImGui@@YAX_NH@Z DD 025051601H
	DD	01112316H
	DD	0700a0021H
	DD	05009H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01fdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z DD 025054719H
	DD	0118231dH
	DD	070110049H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z$rtcName$0 DB 06cH ; ImGui::CollapsingHeader
	DB	061H
	DB	073H
	DB	074H
	DB	05fH
	DB	069H
	DB	074H
	DB	065H
	DB	06dH
	DB	05fH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	00H
	ORG $+15
?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z$rtcVarDesc DD 0a8H ; ImGui::CollapsingHeader
	DD	028H
	DQ	FLAT:?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z$rtcName$0
	ORG $+48
?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z$rtcFrameData DD 01H ; ImGui::CollapsingHeader
	DD	00H
	DQ	FLAT:?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CollapsingHeader@ImGui@@YA_NPEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ DD 035050f01H
	DD	010a330fH
	DD	070030023H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreePop@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030031H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreePush@ImGui@@YAXPEBX@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreePush@ImGui@@YAXPEBD@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z DD 025052101H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z DD 025052101H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	044H
	DB	0a2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ DD 025054b19H
	DD	011c2321H
	DD	070150029H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ$rtcName$0 DB 061H	; ImGui::TreeNodeEx
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ$rtcVarDesc DD 028H	; ImGui::TreeNodeEx
	DD	08H
	DQ	FLAT:?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ$rtcName$0
	ORG $+48
?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ$rtcFrameData DD 01H	; ImGui::TreeNodeEx
	DD	00H
	DQ	FLAT:?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	044H
	DB	0a2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ DD 025054b19H
	DD	011c2321H
	DD	070150029H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ$rtcName$0 DB 061H	; ImGui::TreeNodeEx
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ$rtcVarDesc DD 028H	; ImGui::TreeNodeEx
	DD	08H
	DQ	FLAT:?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ$rtcName$0
	ORG $+48
?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ$rtcFrameData DD 01H	; ImGui::TreeNodeEx
	DD	00H
	DQ	FLAT:?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeEx@ImGui@@YA_NPEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	09fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNode@ImGui@@YA_NPEBXPEBDZZ DD 025054c19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TreeNode@ImGui@@YA_NPEBXPEBDZZ$rtcName$0 DB 061H	; ImGui::TreeNode
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TreeNode@ImGui@@YA_NPEBXPEBDZZ$rtcVarDesc DD 028H	; ImGui::TreeNode
	DD	08H
	DQ	FLAT:?TreeNode@ImGui@@YA_NPEBXPEBDZZ$rtcName$0
	ORG $+48
?TreeNode@ImGui@@YA_NPEBXPEBDZZ$rtcFrameData DD 01H	; ImGui::TreeNode
	DD	00H
	DQ	FLAT:?TreeNode@ImGui@@YA_NPEBXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	09fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNode@ImGui@@YA_NPEBD0ZZ DD 025054c19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TreeNode@ImGui@@YA_NPEBD0ZZ$rtcName$0 DB 061H		; ImGui::TreeNode
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TreeNode@ImGui@@YA_NPEBD0ZZ$rtcVarDesc DD 028H		; ImGui::TreeNode
	DD	08H
	DQ	FLAT:?TreeNode@ImGui@@YA_NPEBD0ZZ$rtcName$0
	ORG $+48
?TreeNode@ImGui@@YA_NPEBD0ZZ$rtcFrameData DD 01H	; ImGui::TreeNode
	DD	00H
	DQ	FLAT:?TreeNode@ImGui@@YA_NPEBD0ZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TreeNode@ImGui@@YA_NPEBD@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetColorEditOptions@ImGui@@YAXH@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0869H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z DD 045064d19H
	DD	011e4323H
	DD	0701700daH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$0 DB 062H ; ImGui::ColorButton
	DB	062H
	DB	00H
	ORG $+5
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$1 DB 068H ; ImGui::ColorButton
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$2 DB 068H ; ImGui::ColorButton
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$3 DB 063H ; ImGui::ColorButton
	DB	06fH
	DB	06cH
	DB	05fH
	DB	072H
	DB	067H
	DB	062H
	DB	00H
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$4 DB 063H ; ImGui::ColorButton
	DB	06fH
	DB	06cH
	DB	05fH
	DB	072H
	DB	067H
	DB	062H
	DB	05fH
	DB	077H
	DB	069H
	DB	074H
	DB	068H
	DB	06fH
	DB	075H
	DB	074H
	DB	05fH
	DB	061H
	DB	06cH
	DB	070H
	DB	068H
	DB	061H
	DB	00H
	ORG $+2
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$5 DB 062H ; ImGui::ColorButton
	DB	062H
	DB	05fH
	DB	069H
	DB	06eH
	DB	06eH
	DB	065H
	DB	072H
	DB	00H
	ORG $+7
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$6 DB 063H ; ImGui::ColorButton
	DB	06fH
	DB	06cH
	DB	05fH
	DB	073H
	DB	06fH
	DB	075H
	DB	072H
	DB	063H
	DB	065H
	DB	00H
	ORG $+5
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcFrameData DD 07H ; ImGui::ColorButton
	DD	00H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcVarDesc
	ORG $+8
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcVarDesc DD 0268H ; ImGui::ColorButton
	DD	010H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$6
	DD	01f8H
	DD	010H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$5
	DD	0188H
	DD	010H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$4
	DD	0158H
	DD	010H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$3
	DD	0114H
	DD	01H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$2
	DD	0f4H
	DD	01H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$1
	DD	0c8H
	DD	010H
	DQ	FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	04cH
	DW	029a4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z DD 045065319H
	DD	01244329H
	DD	0701702e2H
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	01700H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$0 DB 070H ; ImGui::ColorPicker4
	DB	069H
	DB	063H
	DB	06bH
	DB	065H
	DB	072H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+5
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$1 DB 062H ; ImGui::ColorPicker4
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	069H
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	061H
	DB	06cH
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$6 DB 048H ; ImGui::ColorPicker4
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$2 DB 077H ; ImGui::ColorPicker4
	DB	068H
	DB	065H
	DB	065H
	DB	06cH
	DB	05fH
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+3
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$3 DB 074H ; ImGui::ColorPicker4
	DB	072H
	DB	069H
	DB	061H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05fH
	DB	070H
	DB	061H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$7 DB 053H ; ImGui::ColorPicker4
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$4 DB 074H ; ImGui::ColorPicker4
	DB	072H
	DB	069H
	DB	061H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05fH
	DB	070H
	DB	062H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$8 DB 056H ; ImGui::ColorPicker4
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$5 DB 074H ; ImGui::ColorPicker4
	DB	072H
	DB	069H
	DB	061H
	DB	06eH
	DB	067H
	DB	06cH
	DB	065H
	DB	05fH
	DB	070H
	DB	063H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$9 DB 052H ; ImGui::ColorPicker4
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$10 DB 047H ; ImGui::ColorPicker4
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$11 DB 042H ; ImGui::ColorPicker4
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$12 DB 069H ; ImGui::ColorPicker4
	DB	06eH
	DB	069H
	DB	074H
	DB	069H
	DB	061H
	DB	06cH
	DB	05fH
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$15 DB 075H ; ImGui::ColorPicker4
	DB	075H
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$13 DB 063H ; ImGui::ColorPicker4
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$16 DB 076H ; ImGui::ColorPicker4
	DB	076H
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$14 DB 063H ; ImGui::ColorPicker4
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	06fH
	DB	066H
	DB	066H
	DB	05fH
	DB	075H
	DB	06eH
	DB	072H
	DB	06fH
	DB	074H
	DB	061H
	DB	074H
	DB	065H
	DB	064H
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$17 DB 077H ; ImGui::ColorPicker4
	DB	077H
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$18 DB 063H ; ImGui::ColorPicker4
	DB	06fH
	DB	06cH
	DB	05fH
	DB	076H
	DB	034H
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$29 DB 074H ; ImGui::ColorPicker4
	DB	072H
	DB	061H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$19 DB 072H ; ImGui::ColorPicker4
	DB	065H
	DB	066H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	05fH
	DB	076H
	DB	034H
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$20 DB 06eH ; ImGui::ColorPicker4
	DB	065H
	DB	077H
	DB	05fH
	DB	048H
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$21 DB 06eH ; ImGui::ColorPicker4
	DB	065H
	DB	077H
	DB	05fH
	DB	053H
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$22 DB 06eH ; ImGui::ColorPicker4
	DB	065H
	DB	077H
	DB	05fH
	DB	056H
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$30 DB 074H ; ImGui::ColorPicker4
	DB	072H
	DB	062H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$23 DB 063H ; ImGui::ColorPicker4
	DB	06fH
	DB	06cH
	DB	05fH
	DB	068H
	DB	075H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$31 DB 074H ; ImGui::ColorPicker4
	DB	072H
	DB	063H
	DB	00H
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$24 DB 068H ; ImGui::ColorPicker4
	DB	075H
	DB	065H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06cH
	DB	06fH
	DB	072H
	DB	05fH
	DB	066H
	DB	00H
	ORG $+4
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$25 DB 073H ; ImGui::ColorPicker4
	DB	076H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+2
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$26 DB 067H ; ImGui::ColorPicker4
	DB	072H
	DB	061H
	DB	064H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	070H
	DB	030H
	DB	00H
	ORG $+4
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$27 DB 067H ; ImGui::ColorPicker4
	DB	072H
	DB	061H
	DB	064H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	070H
	DB	031H
	DB	00H
	ORG $+4
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$28 DB 068H ; ImGui::ColorPicker4
	DB	075H
	DB	065H
	DB	05fH
	DB	063H
	DB	075H
	DB	072H
	DB	073H
	DB	06fH
	DB	072H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+1
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$32 DB 075H ; ImGui::ColorPicker4
	DB	076H
	DB	05fH
	DB	077H
	DB	068H
	DB	069H
	DB	074H
	DB	065H
	DB	00H
	ORG $+7
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$33 DB 062H ; ImGui::ColorPicker4
	DB	061H
	DB	072H
	DB	031H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+8
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcVarDesc DD 0b08H ; ImGui::ColorPicker4
	DD	010H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$33
	DD	0a68H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$32
	DD	0a48H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$31
	DD	0a28H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$30
	DD	0a08H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$29
	DD	09a8H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$28
	DD	0948H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$27
	DD	0928H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$26
	DD	0828H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$25
	DD	07b8H
	DD	010H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$24
	DD	0778H
	DD	01cH
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$23
	DD	06d4H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$22
	DD	06b4H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$21
	DD	0694H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$20
	DD	0608H
	DD	010H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$19
	DD	05b8H
	DD	010H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$18
	DD	0574H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$17
	DD	0554H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$16
	DD	0534H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$15
	DD	0518H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$14
	DD	0498H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$13
	DD	0478H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$12
	DD	03f4H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$11
	DD	03d4H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$10
	DD	03b4H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$9
	DD	0394H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$8
	DD	0374H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$7
	DD	0354H
	DD	04H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$6
	DD	0338H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$5
	DD	0318H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$4
	DD	02f8H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$3
	DD	02b8H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$2
	DD	0228H
	DD	010H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$1
	DD	0148H
	DD	08H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcName$0
	ORG $+1632
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcFrameData DD 022H ; ImGui::ColorPicker4
	DD	00H
	DQ	FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	015cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z DD 025054719H
	DD	0118231dH
	DD	070110023H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z$rtcName$0 DB 063H	; ImGui::ColorPicker3
	DB	06fH
	DB	06cH
	DB	034H
	DB	00H
	ORG $+11
?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z$rtcVarDesc DD 028H	; ImGui::ColorPicker3
	DD	010H
	DQ	FLAT:?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z$rtcName$0
	ORG $+48
?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z$rtcFrameData DD 01H ; ImGui::ColorPicker3
	DD	00H
	DQ	FLAT:?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	0188dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z DD 045064819H
	DD	0119431eH
	DD	07012012cH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0950H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$0 DB 066H	; ImGui::ColorEdit4
	DB	00H
	ORG $+2
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$1 DB 069H	; ImGui::ColorEdit4
	DB	00H
	ORG $+2
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$2 DB 070H	; ImGui::ColorEdit4
	DB	06fH
	DB	073H
	DB	00H
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$3 DB 062H	; ImGui::ColorEdit4
	DB	075H
	DB	066H
	DB	00H
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$4 DB 063H	; ImGui::ColorEdit4
	DB	06fH
	DB	06cH
	DB	05fH
	DB	076H
	DB	034H
	DB	00H
	ORG $+1
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcFrameData DD 05H	; ImGui::ColorEdit4
	DD	00H
	DQ	FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcVarDesc
	ORG $+8
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcVarDesc DD 0428H	; ImGui::ColorEdit4
	DD	010H
	DQ	FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$4
	DD	0350H
	DD	040H
	DQ	FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$3
	DD	0268H
	DD	08H
	DQ	FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$2
	DD	01f8H
	DD	010H
	DQ	FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$1
	DD	01c8H
	DD	010H
	DQ	FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z DD 045052101H
	DD	011c4321H
	DD	070150039H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	049eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z DD 035054b19H
	DD	011c3321H
	DD	070150055H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0290H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$0 DB 062H ; ImGui::InputScalar
	DB	075H
	DB	066H
	DB	00H
	ORG $+4
?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$1 DB 062H ; ImGui::InputScalar
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	066H
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	070H
	DB	061H
	DB	064H
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
	ORG $+3
?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcVarDesc DD 0138H ; ImGui::InputScalar
	DD	08H
	DQ	FLAT:?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$1
	DD	0a0H
	DD	040H
	DQ	FLAT:?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$0
	ORG $+96
?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcFrameData DD 02H ; ImGui::InputScalar
	DD	00H
	DQ	FLAT:?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z DD 045052401H
	DD	011f4324H
	DD	070180025H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputInt4@ImGui@@YA_NPEBDQEAHH@Z DD 045051d01H
	DD	0118431dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputInt3@ImGui@@YA_NPEBDQEAHH@Z DD 045051d01H
	DD	0118431dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputInt2@ImGui@@YA_NPEBDQEAHH@Z DD 045051d01H
	DD	0118431dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z DD 045052201H
	DD	011d4322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z DD 045052401H
	DD	011f4324H
	DD	070180025H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD 045052201H
	DD	011d4322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z DD 045052201H
	DD	011d4322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	05c8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z DD 055054c19H
	DD	011d5322H
	DD	070160099H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	04b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$0 DB 06cH ; ImGui::VSliderScalar
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$1 DB 066H ; ImGui::VSliderScalar
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$2 DB 062H ; ImGui::VSliderScalar
	DB	062H
	DB	00H
	ORG $+1
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$3 DB 067H ; ImGui::VSliderScalar
	DB	072H
	DB	061H
	DB	062H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$4 DB 076H ; ImGui::VSliderScalar
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcFrameData DD 05H ; ImGui::VSliderScalar
	DD	00H
	DQ	FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcVarDesc
	ORG $+8
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcVarDesc DD 01f0H ; ImGui::VSliderScalar
	DD	040H
	DQ	FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$4
	DD	0198H
	DD	010H
	DQ	FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$3
	DD	0128H
	DD	010H
	DQ	FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$2
	DD	0f8H
	DD	010H
	DQ	FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$1
	DD	0d8H
	DD	08H
	DQ	FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z DD 045052301H
	DD	011e4323H
	DD	070170021H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z DD 045052101H
	DD	011c4321H
	DD	070150039H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	081aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z DD 055054b19H
	DD	011c5321H
	DD	0701500b1H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0570H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$0 DB 06cH ; ImGui::SliderScalar
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$1 DB 066H ; ImGui::SliderScalar
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$2 DB 074H ; ImGui::SliderScalar
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$3 DB 067H ; ImGui::SliderScalar
	DB	072H
	DB	061H
	DB	062H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$4 DB 076H ; ImGui::SliderScalar
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcFrameData DD 05H ; ImGui::SliderScalar
	DD	00H
	DQ	FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcVarDesc
	ORG $+8
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcVarDesc DD 02b0H ; ImGui::SliderScalar
	DD	040H
	DQ	FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$4
	DD	0258H
	DD	010H
	DQ	FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$3
	DD	0148H
	DD	010H
	DQ	FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$2
	DD	0118H
	DD	010H
	DQ	FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$1
	DD	0f8H
	DD	08H
	DQ	FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z DD 045052201H
	DD	011d4322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	0103H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z DD 035054e19H
	DD	011f3324H
	DD	070180027H
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0128H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z$rtcName$0 DB 076H ; ImGui::SliderAngle
	DB	05fH
	DB	064H
	DB	065H
	DB	067H
	DB	00H
	ORG $+10
?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z$rtcVarDesc DD 034H ; ImGui::SliderAngle
	DD	04H
	DQ	FLAT:?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z$rtcName$0
	ORG $+48
?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z$rtcFrameData DD 01H ; ImGui::SliderAngle
	DD	00H
	DQ	FLAT:?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z DD 045052401H
	DD	011f4324H
	DD	070180021H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z DD 045052401H
	DD	011f4324H
	DD	070180021H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z DD 045052401H
	DD	011f4324H
	DD	070180021H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z DD 045052401H
	DD	011f4324H
	DD	070180021H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z DD 045052101H
	DD	011c4321H
	DD	070150039H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0864H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z DD 045054c19H
	DD	011d4322H
	DD	0701600abH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0548H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$0 DB 06cH ; ImGui::DragScalar
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$1 DB 066H ; ImGui::DragScalar
	DB	072H
	DB	061H
	DB	06dH
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$2 DB 074H ; ImGui::DragScalar
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$3 DB 076H ; ImGui::DragScalar
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+6
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcVarDesc DD 0290H ; ImGui::DragScalar
	DD	040H
	DQ	FLAT:?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$3
	DD	0138H
	DD	010H
	DQ	FLAT:?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$2
	DD	0108H
	DD	010H
	DQ	FLAT:?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$1
	DD	0e8H
	DD	08H
	DQ	FLAT:?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcName$0
	ORG $+192
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcFrameData DD 04H ; ImGui::DragScalar
	DD	00H
	DQ	FLAT:?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z DD 045052301H
	DD	011e4323H
	DD	070170047H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z DD 055052301H
	DD	011e5323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z DD 055052301H
	DD	011e5323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z DD 055052301H
	DD	011e5323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z DD 045052301H
	DD	011e4323H
	DD	070170021H
	DD	05016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	03b3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z DD 045054d19H
	DD	011e4323H
	DD	070170047H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$0 DB 06dH ; ImGui::DragFloatRange2
	DB	069H
	DB	06eH
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$1 DB 06dH ; ImGui::DragFloatRange2
	DB	069H
	DB	06eH
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$2 DB 06dH ; ImGui::DragFloatRange2
	DB	061H
	DB	078H
	DB	05fH
	DB	06dH
	DB	069H
	DB	06eH
	DB	00H
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$3 DB 06dH ; ImGui::DragFloatRange2
	DB	061H
	DB	078H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	00H
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcVarDesc DD 0124H ; ImGui::DragFloatRange2
	DD	04H
	DQ	FLAT:?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$3
	DD	0104H
	DD	04H
	DQ	FLAT:?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$2
	DD	0a4H
	DD	04H
	DQ	FLAT:?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$1
	DD	084H
	DD	04H
	DQ	FLAT:?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcName$0
	ORG $+192
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcFrameData DD 04H ; ImGui::DragFloatRange2
	DD	00H
	DQ	FLAT:?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z DD 055052401H
	DD	011f5324H
	DD	070180023H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z DD 055052401H
	DD	011f5324H
	DD	070180023H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z DD 055052401H
	DD	011f5324H
	DD	070180023H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z DD 045052401H
	DD	011f4324H
	DD	070180021H
	DD	05017H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	028dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z DD 025054c19H
	DD	011d2322H
	DD	070160043H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0208H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$0 DB 070H ; ImGui::Combo
	DB	072H
	DB	065H
	DB	076H
	DB	069H
	DB	065H
	DB	077H
	DB	05fH
	DB	076H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	00H
	ORG $+2
?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$1 DB 069H ; ImGui::Combo
	DB	074H
	DB	065H
	DB	06dH
	DB	05fH
	DB	074H
	DB	065H
	DB	078H
	DB	074H
	DB	00H
	ORG $+6
?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcVarDesc DD 0c8H ; ImGui::Combo
	DD	08H
	DQ	FLAT:?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcName$0
	ORG $+96
?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcFrameData DD 02H ; ImGui::Combo
	DD	00H
	DQ	FLAT:?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Combo@ImGui@@YA_NPEBDPEAH0H@Z DD 035052201H
	DD	011d3322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndCombo@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	0873H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginCombo@ImGui@@YA_NPEBD0H@Z DD 045064819H
	DD	0119431eH
	DD	0701200daH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$0 DB 06cH	; ImGui::BeginCombo
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$1 DB 062H	; ImGui::BeginCombo
	DB	062H
	DB	00H
	ORG $+1
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$2 DB 074H	; ImGui::BeginCombo
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$3 DB 068H	; ImGui::BeginCombo
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$4 DB 068H	; ImGui::BeginCombo
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcVarDesc DD 01c4H	; ImGui::BeginCombo
	DD	01H
	DQ	FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$4
	DD	01a4H
	DD	01H
	DQ	FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$3
	DD	0178H
	DD	010H
	DQ	FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$2
	DD	0148H
	DD	010H
	DQ	FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$1
	DD	0108H
	DD	08H
	DQ	FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcName$0
	ORG $+240
?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcFrameData DD 05H	; ImGui::BeginCombo
	DD	00H
	DQ	FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0258H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Bullet@ImGui@@YAXXZ DD 025053119H
	DD	010a230fH
	DD	07003004dH
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0250H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Bullet@ImGui@@YAXXZ$rtcName$0 DB 062H			; ImGui::Bullet
	DB	062H
	DB	00H
	ORG $+13
?Bullet@ImGui@@YAXXZ$rtcVarDesc DD 0a8H			; ImGui::Bullet
	DD	010H
	DQ	FLAT:?Bullet@ImGui@@YAXXZ$rtcName$0
	ORG $+48
?Bullet@ImGui@@YAXXZ$rtcFrameData DD 01H		; ImGui::Bullet
	DD	00H
	DQ	FLAT:?Bullet@ImGui@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	039H
	DW	0421H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z DD 045054019H
	DD	0119431eH
	DD	07012007fH
	DD	05011H
	DD	imagerel __GSHandlerCheck
	DD	03e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$0 DB 070H ; ImGui::ProgressBar
	DB	06fH
	DB	073H
	DB	00H
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$1 DB 073H ; ImGui::ProgressBar
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$2 DB 062H ; ImGui::ProgressBar
	DB	062H
	DB	00H
	ORG $+1
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$3 DB 066H ; ImGui::ProgressBar
	DB	069H
	DB	06cH
	DB	06cH
	DB	05fH
	DB	062H
	DB	072H
	DB	00H
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$4 DB 06fH ; ImGui::ProgressBar
	DB	076H
	DB	065H
	DB	072H
	DB	06cH
	DB	061H
	DB	079H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	00H
	ORG $+4
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$5 DB 06fH ; ImGui::ProgressBar
	DB	076H
	DB	065H
	DB	072H
	DB	06cH
	DB	061H
	DB	079H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcFrameData DD 06H ; ImGui::ProgressBar
	DD	00H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcVarDesc
	ORG $+8
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcVarDesc DD 0178H ; ImGui::ProgressBar
	DD	08H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$5
	DD	0138H
	DD	020H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$4
	DD	0118H
	DD	08H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$3
	DD	0e8H
	DD	010H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$2
	DD	0c8H
	DD	08H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$1
	DD	0a8H
	DD	08H
	DQ	FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RadioButton@ImGui@@YA_NPEBDPEAHH@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	0616H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RadioButton@ImGui@@YA_NPEBD_N@Z DD 035054119H
	DD	01123317H
	DD	0700b0097H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	04a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$0 DB 06cH	; ImGui::RadioButton
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$1 DB 070H	; ImGui::RadioButton
	DB	06fH
	DB	073H
	DB	00H
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$2 DB 063H	; ImGui::RadioButton
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$3 DB 074H	; ImGui::RadioButton
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$4 DB 063H	; ImGui::RadioButton
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$5 DB 068H	; ImGui::RadioButton
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$6 DB 068H	; ImGui::RadioButton
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$7 DB 06cH	; ImGui::RadioButton
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcFrameData DD 08H	; ImGui::RadioButton
	DD	00H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcVarDesc
	ORG $+8
?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcVarDesc DD 0238H	; ImGui::RadioButton
	DD	08H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$7
	DD	01d4H
	DD	01H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$6
	DD	01b4H
	DD	01H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$5
	DD	0178H
	DD	08H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$4
	DD	0148H
	DD	010H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$3
	DD	0118H
	DD	010H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$1
	DD	0b8H
	DD	08H
	DQ	FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0675H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Checkbox@ImGui@@YA_NPEBDPEA_N@Z DD 035054219H
	DD	01133318H
	DD	0700c00a7H
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	0528H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$0 DB 06cH	; ImGui::Checkbox
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$1 DB 070H	; ImGui::Checkbox
	DB	06fH
	DB	073H
	DB	00H
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$2 DB 074H	; ImGui::Checkbox
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+3
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$6 DB 070H	; ImGui::Checkbox
	DB	061H
	DB	064H
	DB	00H
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$3 DB 068H	; ImGui::Checkbox
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$4 DB 068H	; ImGui::Checkbox
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$5 DB 063H	; ImGui::Checkbox
	DB	068H
	DB	065H
	DB	063H
	DB	06bH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$7 DB 06cH	; ImGui::Checkbox
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcVarDesc DD 0258H	; ImGui::Checkbox
	DD	08H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$7
	DD	0218H
	DD	08H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$6
	DD	01a8H
	DD	010H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$5
	DD	0164H
	DD	01H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$4
	DD	0144H
	DD	01H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$3
	DD	0118H
	DD	010H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$1
	DD	0b8H
	DD	08H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcName$0
	ORG $+384
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcFrameData DD 08H	; ImGui::Checkbox
	DD	00H
	DQ	FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	017cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z DD 045054c19H
	DD	011d4322H
	DD	07016003fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z$rtcName$0 DB 070H ; ImGui::ImageButton
	DB	061H
	DB	064H
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	00H
	ORG $+8
?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z$rtcVarDesc DD 0a8H ; ImGui::ImageButton
	DD	08H
	DQ	FLAT:?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z$rtcName$0
	ORG $+48
?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z$rtcFrameData DD 01H ; ImGui::ImageButton
	DD	00H
	DQ	FLAT:?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	02d7H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z DD 045054c19H
	DD	011d4322H
	DD	070160047H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0228H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z$rtcName$0 DB 062H ; ImGui::Image
	DB	062H
	DB	00H
	ORG $+13
?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z$rtcVarDesc DD 068H ; ImGui::Image
	DD	010H
	DQ	FLAT:?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z$rtcName$0
	ORG $+48
?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z$rtcFrameData DD 01H ; ImGui::Image
	DD	00H
	DQ	FLAT:?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ArrowButton@ImGui@@YA_NPEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	019cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z DD 035054719H
	DD	0118331dH
	DD	070110041H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	01f8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$0 DB 073H ; ImGui::InvisibleButton
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$1 DB 062H ; ImGui::InvisibleButton
	DB	062H
	DB	00H
	ORG $+5
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$2 DB 068H ; ImGui::InvisibleButton
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$3 DB 068H ; ImGui::InvisibleButton
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcVarDesc DD 0e4H ; ImGui::InvisibleButton
	DD	01H
	DQ	FLAT:?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$3
	DD	0c4H
	DD	01H
	DQ	FLAT:?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$2
	DD	098H
	DD	010H
	DQ	FLAT:?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcName$0
	ORG $+192
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcFrameData DD 04H ; ImGui::InvisibleButton
	DD	00H
	DQ	FLAT:?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SmallButton@ImGui@@YA_NPEBD@Z DD 025051301H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	031aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BulletTextV@ImGui@@YAXPEBDPEAD@Z DD 035054219H
	DD	01133318H
	DD	0700c007bH
	DD	0500bH
	DD	imagerel __GSHandlerCheck
	DD	03c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$0 DB 06cH	; ImGui::BulletTextV
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$1 DB 074H	; ImGui::BulletTextV
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$2 DB 070H	; ImGui::BulletTextV
	DB	06fH
	DB	073H
	DB	00H
?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$3 DB 062H	; ImGui::BulletTextV
	DB	062H
	DB	00H
	ORG $+5
?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcFrameData DD 04H	; ImGui::BulletTextV
	DD	00H
	DQ	FLAT:?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcVarDesc
	ORG $+8
?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcVarDesc DD 0138H	; ImGui::BulletTextV
	DD	010H
	DQ	FLAT:?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$3
	DD	0118H
	DD	08H
	DQ	FLAT:?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$2
	DD	0f8H
	DD	08H
	DQ	FLAT:?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$1
	DD	0d8H
	DD	08H
	DQ	FLAT:?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	08bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BulletText@ImGui@@YAXPEBDZZ DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BulletText@ImGui@@YAXPEBDZZ$rtcName$0 DB 061H		; ImGui::BulletText
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?BulletText@ImGui@@YAXPEBDZZ$rtcVarDesc DD 028H		; ImGui::BulletText
	DD	08H
	DQ	FLAT:?BulletText@ImGui@@YAXPEBDZZ$rtcName$0
	ORG $+48
?BulletText@ImGui@@YAXPEBDZZ$rtcFrameData DD 01H	; ImGui::BulletText
	DD	00H
	DQ	FLAT:?BulletText@ImGui@@YAXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0390H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LabelTextV@ImGui@@YAXPEBD0PEAD@Z DD 045054719H
	DD	0118431dH
	DD	070110087H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0428H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$0 DB 076H	; ImGui::LabelTextV
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$1 DB 06cH	; ImGui::LabelTextV
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+1
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$2 DB 070H	; ImGui::LabelTextV
	DB	06fH
	DB	073H
	DB	00H
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$3 DB 076H	; ImGui::LabelTextV
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$4 DB 074H	; ImGui::LabelTextV
	DB	06fH
	DB	074H
	DB	061H
	DB	06cH
	DB	05fH
	DB	062H
	DB	062H
	DB	00H
	ORG $+7
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcVarDesc DD 0198H	; ImGui::LabelTextV
	DD	010H
	DQ	FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$4
	DD	0168H
	DD	010H
	DQ	FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$3
	DD	0148H
	DD	08H
	DQ	FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$2
	DD	0128H
	DD	08H
	DQ	FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$1
	DD	0108H
	DD	08H
	DQ	FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcName$0
	ORG $+240
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcFrameData DD 05H	; ImGui::LabelTextV
	DD	00H
	DQ	FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	092H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LabelText@ImGui@@YAXPEBD0ZZ DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?LabelText@ImGui@@YAXPEBD0ZZ$rtcName$0 DB 061H		; ImGui::LabelText
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?LabelText@ImGui@@YAXPEBD0ZZ$rtcVarDesc DD 028H		; ImGui::LabelText
	DD	08H
	DQ	FLAT:?LabelText@ImGui@@YAXPEBD0ZZ$rtcName$0
	ORG $+48
?LabelText@ImGui@@YAXPEBD0ZZ$rtcFrameData DD 01H	; ImGui::LabelText
	DD	00H
	DQ	FLAT:?LabelText@ImGui@@YAXPEBD0ZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextWrappedV@ImGui@@YAXPEBDPEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	08bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextWrapped@ImGui@@YAXPEBDZZ DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TextWrapped@ImGui@@YAXPEBDZZ$rtcName$0 DB 061H		; ImGui::TextWrapped
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TextWrapped@ImGui@@YAXPEBDZZ$rtcVarDesc DD 028H	; ImGui::TextWrapped
	DD	08H
	DQ	FLAT:?TextWrapped@ImGui@@YAXPEBDZZ$rtcName$0
	ORG $+48
?TextWrapped@ImGui@@YAXPEBDZZ$rtcFrameData DD 01H	; ImGui::TextWrapped
	DD	00H
	DQ	FLAT:?TextWrapped@ImGui@@YAXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextDisabledV@ImGui@@YAXPEBDPEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	08bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextDisabled@ImGui@@YAXPEBDZZ DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TextDisabled@ImGui@@YAXPEBDZZ$rtcName$0 DB 061H	; ImGui::TextDisabled
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TextDisabled@ImGui@@YAXPEBDZZ$rtcVarDesc DD 028H	; ImGui::TextDisabled
	DD	08H
	DQ	FLAT:?TextDisabled@ImGui@@YAXPEBDZZ$rtcName$0
	ORG $+48
?TextDisabled@ImGui@@YAXPEBDZZ$rtcFrameData DD 01H	; ImGui::TextDisabled
	DD	00H
	DQ	FLAT:?TextDisabled@ImGui@@YAXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z DD 025051d01H
	DD	0118231dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	092H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ$rtcName$0 DB 061H ; ImGui::TextColored
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ$rtcVarDesc DD 028H ; ImGui::TextColored
	DD	08H
	DQ	FLAT:?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ$rtcName$0
	ORG $+48
?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ$rtcFrameData DD 01H ; ImGui::TextColored
	DD	00H
	DQ	FLAT:?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextV@ImGui@@YAXPEBDPEAD@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	08bH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Text@ImGui@@YAXPEBDZZ DD 025054c19H
	DD	011d2322H
	DD	070160025H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Text@ImGui@@YAXPEBDZZ$rtcName$0 DB 061H		; ImGui::Text
	DB	072H
	DB	067H
	DB	073H
	DB	00H
	ORG $+11
?Text@ImGui@@YAXPEBDZZ$rtcVarDesc DD 028H		; ImGui::Text
	DD	08H
	DQ	FLAT:?Text@ImGui@@YAXPEBDZZ$rtcName$0
	ORG $+48
?Text@ImGui@@YAXPEBDZZ$rtcFrameData DD 01H		; ImGui::Text
	DD	00H
	DQ	FLAT:?Text@ImGui@@YAXPEBDZZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TextUnformatted@ImGui@@YAXPEBD0@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AlignTextToFramePadding@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0d2H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Dummy@ImGui@@YAXAEBUImVec2@@@Z DD 025053d19H
	DD	010e2313H
	DD	07007002bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?Dummy@ImGui@@YAXAEBUImVec2@@@Z$rtcName$0 DB 062H	; ImGui::Dummy
	DB	062H
	DB	00H
	ORG $+13
?Dummy@ImGui@@YAXAEBUImVec2@@@Z$rtcVarDesc DD 048H	; ImGui::Dummy
	DD	010H
	DQ	FLAT:?Dummy@ImGui@@YAXAEBUImVec2@@@Z$rtcName$0
	ORG $+48
?Dummy@ImGui@@YAXAEBUImVec2@@@Z$rtcFrameData DD 01H	; ImGui::Dummy
	DD	00H
	DQ	FLAT:?Dummy@ImGui@@YAXAEBUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Spacing@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NewLine@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030031H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Separator@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030029H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@MMMM@Z DD 025032101H
	DD	0b21c2321H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AImVec2@@QEAAAEAM_K@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??AImVec2@@QEBAM_K@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 025031b01H
	DD	0b216231bH
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAtoi@N@@YAPEBDPEBDPEAN@Z
_TEXT	SEGMENT
negative$ = 4
v$ = 40
tv84 = 248
tv81 = 248
src$ = 288
output$ = 296
??$ImAtoi@N@@YAPEBDPEBDPEAN@Z PROC			; ImAtoi<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2150
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2151
	mov	DWORD PTR negative$[rbp], 0
; Line 2152
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN4@ImAtoi
	mov	DWORD PTR negative$[rbp], 1
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN4@ImAtoi:
; Line 2153
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN5@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN5@ImAtoi:
; Line 2154
	xorps	xmm0, xmm0
	movsd	QWORD PTR v$[rbp], xmm0
$LN2@ImAtoi:
; Line 2155
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@ImAtoi
; Line 2156
	movsd	xmm0, QWORD PTR v$[rbp]
	mulsd	xmm0, QWORD PTR __real@4024000000000000
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	sub	eax, 48					; 00000030H
	cvtsi2sd xmm1, eax
	addsd	xmm0, xmm1
	movsd	QWORD PTR tv81[rbp], xmm0
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
	movsd	xmm0, QWORD PTR tv81[rbp]
	movsd	QWORD PTR v$[rbp], xmm0
	jmp	SHORT $LN2@ImAtoi
$LN3@ImAtoi:
; Line 2157
	cmp	DWORD PTR negative$[rbp], 0
	je	SHORT $LN7@ImAtoi
	movsd	xmm0, QWORD PTR v$[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN8@ImAtoi
$LN7@ImAtoi:
	movsd	xmm0, QWORD PTR v$[rbp]
	movsd	QWORD PTR tv84[rbp], xmm0
$LN8@ImAtoi:
	mov	rax, QWORD PTR output$[rbp]
	movsd	xmm0, QWORD PTR tv84[rbp]
	movsd	QWORD PTR [rax], xmm0
; Line 2158
	mov	rax, QWORD PTR src$[rbp]
; Line 2159
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
??$ImAtoi@N@@YAPEBDPEBDPEAN@Z ENDP			; ImAtoi<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@N@@YANNNM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@N@@YANNNM@Z PROC				; ImLerp<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsd	xmm0, QWORD PTR b$[rbp]
	subsd	xmm0, QWORD PTR a$[rbp]
	cvtss2sd xmm1, DWORD PTR t$[rbp]
	mulsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR a$[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@N@@YANNNM@Z ENDP				; ImLerp<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@N@@YANNN@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@N@@YANNN@Z PROC				; ImMin<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsd	xmm0, QWORD PTR rhs$[rbp]
	comisd	xmm0, QWORD PTR lhs$[rbp]
	jbe	SHORT $LN3@ImMin
	movsd	xmm0, QWORD PTR lhs$[rbp]
	movsd	QWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	movsd	xmm0, QWORD PTR rhs$[rbp]
	movsd	QWORD PTR tv65[rbp], xmm0
$LN4@ImMin:
	movsd	xmm0, QWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@N@@YANNN@Z ENDP				; ImMin<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@N@@YANNNN@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 200
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@N@@YANNNN@Z PROC				; ImClamp<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsd	xmm0, QWORD PTR mn$[rbp]
	comisd	xmm0, QWORD PTR v$[rbp]
	jbe	SHORT $LN5@ImClamp
	movsd	xmm0, QWORD PTR mn$[rbp]
	movsd	QWORD PTR tv67[rbp], xmm0
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	movsd	xmm0, QWORD PTR v$[rbp]
	comisd	xmm0, QWORD PTR mx$[rbp]
	jbe	SHORT $LN3@ImClamp
	movsd	xmm0, QWORD PTR mx$[rbp]
	movsd	QWORD PTR tv66[rbp], xmm0
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	movsd	xmm0, QWORD PTR v$[rbp]
	movsd	QWORD PTR tv66[rbp], xmm0
$LN4@ImClamp:
	movsd	xmm0, QWORD PTR tv66[rbp]
	movsd	QWORD PTR tv67[rbp], xmm0
$LN6@ImClamp:
	movsd	xmm0, QWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@N@@YANNNN@Z ENDP				; ImClamp<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAtoi@M@@YAPEBDPEBDPEAM@Z
_TEXT	SEGMENT
negative$ = 4
v$ = 36
tv84 = 244
tv81 = 244
src$ = 288
output$ = 296
??$ImAtoi@M@@YAPEBDPEBDPEAM@Z PROC			; ImAtoi<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2150
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2151
	mov	DWORD PTR negative$[rbp], 0
; Line 2152
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN4@ImAtoi
	mov	DWORD PTR negative$[rbp], 1
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN4@ImAtoi:
; Line 2153
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN5@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN5@ImAtoi:
; Line 2154
	xorps	xmm0, xmm0
	movss	DWORD PTR v$[rbp], xmm0
$LN2@ImAtoi:
; Line 2155
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@ImAtoi
; Line 2156
	movss	xmm0, DWORD PTR v$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	sub	eax, 48					; 00000030H
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	movss	DWORD PTR tv81[rbp], xmm0
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
	movss	xmm0, DWORD PTR tv81[rbp]
	movss	DWORD PTR v$[rbp], xmm0
	jmp	SHORT $LN2@ImAtoi
$LN3@ImAtoi:
; Line 2157
	cmp	DWORD PTR negative$[rbp], 0
	je	SHORT $LN7@ImAtoi
	movss	xmm0, DWORD PTR v$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN8@ImAtoi
$LN7@ImAtoi:
	movss	xmm0, DWORD PTR v$[rbp]
	movss	DWORD PTR tv84[rbp], xmm0
$LN8@ImAtoi:
	mov	rax, QWORD PTR output$[rbp]
	movss	xmm0, DWORD PTR tv84[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 2158
	mov	rax, QWORD PTR src$[rbp]
; Line 2159
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
??$ImAtoi@M@@YAPEBDPEBDPEAM@Z ENDP			; ImAtoi<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@_K@@YA_K_K0M@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@_K@@YA_K_K0M@Z PROC				; ImLerp<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	test	rax, rax
	jl	SHORT $LN6@ImLerp
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN7@ImLerp
$LN6@ImLerp:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN7@ImLerp:
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN4@ImLerp
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN5@ImLerp
$LN4@ImLerp:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN5@ImLerp:
	mulss	xmm1, DWORD PTR t$[rbp]
	addss	xmm0, xmm1
	xor	eax, eax
	comiss	xmm0, DWORD PTR __real@5f000000
	jb	SHORT $LN3@ImLerp
	subss	xmm0, DWORD PTR __real@5f000000
	comiss	xmm0, DWORD PTR __real@5f000000
	jae	SHORT $LN3@ImLerp
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN3@ImLerp:
	cvttss2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@_K@@YA_K_K0M@Z ENDP				; ImLerp<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@_K@@YAXAEA_K0@Z
_TEXT	SEGMENT
tmp$ = 8
a$ = 256
b$ = 264
??$ImSwap@_K@@YAXAEA_K0@Z PROC				; ImSwap<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tmp$[rbp], rax
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR tmp$[rbp]
	mov	QWORD PTR [rax], rcx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@_K@@YAXAEA_K0@Z ENDP				; ImSwap<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@_K@@YA_K_K00@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 200
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@_K@@YA_K_K00@Z PROC				; ImClamp<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR mn$[rbp]
	cmp	QWORD PTR v$[rbp], rax
	jae	SHORT $LN5@ImClamp
	mov	rax, QWORD PTR mn$[rbp]
	mov	QWORD PTR tv67[rbp], rax
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	rax, QWORD PTR mx$[rbp]
	cmp	QWORD PTR v$[rbp], rax
	jbe	SHORT $LN3@ImClamp
	mov	rax, QWORD PTR mx$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR tv66[rbp], rax
$LN4@ImClamp:
	mov	rax, QWORD PTR tv66[rbp]
	mov	QWORD PTR tv67[rbp], rax
$LN6@ImClamp:
	mov	rax, QWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@_K@@YA_K_K00@Z ENDP				; ImClamp<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z
_TEXT	SEGMENT
negative$ = 4
v$ = 40
tv84 = 248
tv81 = 248
src$ = 288
output$ = 296
??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z PROC			; ImAtoi<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2150
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2151
	mov	DWORD PTR negative$[rbp], 0
; Line 2152
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN4@ImAtoi
	mov	DWORD PTR negative$[rbp], 1
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN4@ImAtoi:
; Line 2153
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN5@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN5@ImAtoi:
; Line 2154
	mov	QWORD PTR v$[rbp], 0
$LN2@ImAtoi:
; Line 2155
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@ImAtoi
; Line 2156
	imul	rax, QWORD PTR v$[rbp], 10
	mov	rcx, QWORD PTR src$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	sub	ecx, 48					; 00000030H
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR tv81[rbp], rax
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
	mov	rax, QWORD PTR tv81[rbp]
	mov	QWORD PTR v$[rbp], rax
	jmp	SHORT $LN2@ImAtoi
$LN3@ImAtoi:
; Line 2157
	cmp	DWORD PTR negative$[rbp], 0
	je	SHORT $LN7@ImAtoi
	mov	rax, QWORD PTR v$[rbp]
	neg	rax
	mov	QWORD PTR tv84[rbp], rax
	jmp	SHORT $LN8@ImAtoi
$LN7@ImAtoi:
	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR tv84[rbp], rax
$LN8@ImAtoi:
	mov	rax, QWORD PTR output$[rbp]
	mov	rcx, QWORD PTR tv84[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2158
	mov	rax, QWORD PTR src$[rbp]
; Line 2159
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z ENDP			; ImAtoi<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@_J@@YA_J_J0M@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@_J@@YA_J_J0M@Z PROC				; ImLerp<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cvtsi2ss xmm0, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm1, rax
	mulss	xmm1, DWORD PTR t$[rbp]
	addss	xmm0, xmm1
	cvttss2si rax, xmm0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@_J@@YA_J_J0M@Z ENDP				; ImLerp<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@_J@@YA_J_J0@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@_J@@YA_J_J0@Z PROC				; ImMin<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	cmp	QWORD PTR lhs$[rbp], rax
	jge	SHORT $LN3@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	mov	QWORD PTR tv65[rbp], rax
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	mov	QWORD PTR tv65[rbp], rax
$LN4@ImMin:
	mov	rax, QWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@_J@@YA_J_J0@Z ENDP				; ImMin<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@N@@YAXAEAN0@Z
_TEXT	SEGMENT
tmp$ = 8
a$ = 256
b$ = 264
??$ImSwap@N@@YAXAEAN0@Z PROC				; ImSwap<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tmp$[rbp], xmm0
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	rax, QWORD PTR b$[rbp]
	movsd	xmm0, QWORD PTR tmp$[rbp]
	movsd	QWORD PTR [rax], xmm0
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@N@@YAXAEAN0@Z ENDP				; ImSwap<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@_J@@YAXAEA_J0@Z
_TEXT	SEGMENT
tmp$ = 8
a$ = 256
b$ = 264
??$ImSwap@_J@@YAXAEA_J0@Z PROC				; ImSwap<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tmp$[rbp], rax
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR tmp$[rbp]
	mov	QWORD PTR [rax], rcx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@_J@@YAXAEA_J0@Z ENDP				; ImSwap<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@_J@@YA_J_J00@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 200
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@_J@@YA_J_J00@Z PROC				; ImClamp<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR mn$[rbp]
	cmp	QWORD PTR v$[rbp], rax
	jge	SHORT $LN5@ImClamp
	mov	rax, QWORD PTR mn$[rbp]
	mov	QWORD PTR tv67[rbp], rax
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	rax, QWORD PTR mx$[rbp]
	cmp	QWORD PTR v$[rbp], rax
	jle	SHORT $LN3@ImClamp
	mov	rax, QWORD PTR mx$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	mov	QWORD PTR tv66[rbp], rax
$LN4@ImClamp:
	mov	rax, QWORD PTR tv66[rbp]
	mov	QWORD PTR tv67[rbp], rax
$LN6@ImClamp:
	mov	rax, QWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@_J@@YA_J_J00@Z ENDP				; ImClamp<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@I@@YAIIIM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@I@@YAIIIM@Z PROC				; ImLerp<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR a$[rbp]
	cvtsi2ss xmm0, rax
	mov	eax, DWORD PTR a$[rbp]
	mov	ecx, DWORD PTR b$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm1, rax
	mulss	xmm1, DWORD PTR t$[rbp]
	addss	xmm0, xmm1
	cvttss2si rax, xmm0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@I@@YAIIIM@Z ENDP				; ImLerp<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@I@@YAIII@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@I@@YAIII@Z PROC				; ImMin<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR rhs$[rbp]
	cmp	DWORD PTR lhs$[rbp], eax
	jae	SHORT $LN3@ImMin
	mov	eax, DWORD PTR lhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	eax, DWORD PTR rhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
$LN4@ImMin:
	mov	eax, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@I@@YAIII@Z ENDP				; ImMin<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@I@@YAXAEAI0@Z
_TEXT	SEGMENT
tmp$ = 4
a$ = 256
b$ = 264
??$ImSwap@I@@YAXAEAI0@Z PROC				; ImSwap<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tmp$[rbp], eax
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR tmp$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@I@@YAXAEAI0@Z ENDP				; ImSwap<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@I@@YAIIII@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@I@@YAIIII@Z PROC				; ImClamp<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR mn$[rbp]
	cmp	DWORD PTR v$[rbp], eax
	jae	SHORT $LN5@ImClamp
	mov	eax, DWORD PTR mn$[rbp]
	mov	DWORD PTR tv67[rbp], eax
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	eax, DWORD PTR mx$[rbp]
	cmp	DWORD PTR v$[rbp], eax
	jbe	SHORT $LN3@ImClamp
	mov	eax, DWORD PTR mx$[rbp]
	mov	DWORD PTR tv66[rbp], eax
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	eax, DWORD PTR v$[rbp]
	mov	DWORD PTR tv66[rbp], eax
$LN4@ImClamp:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR tv67[rbp], eax
$LN6@ImClamp:
	mov	eax, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@I@@YAIIII@Z ENDP				; ImClamp<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@H@@YAHHHM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@H@@YAHHHM@Z PROC				; ImLerp<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cvtsi2ss xmm0, DWORD PTR a$[rbp]
	mov	eax, DWORD PTR a$[rbp]
	mov	ecx, DWORD PTR b$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR t$[rbp]
	addss	xmm0, xmm1
	cvttss2si eax, xmm0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@H@@YAHHHM@Z ENDP				; ImLerp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@M@@YAXAEAM0@Z
_TEXT	SEGMENT
tmp$ = 4
a$ = 256
b$ = 264
??$ImSwap@M@@YAXAEAM0@Z PROC				; ImSwap<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tmp$[rbp], xmm0
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR tmp$[rbp]
	movss	DWORD PTR [rax], xmm0
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@M@@YAXAEAM0@Z ENDP				; ImSwap<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@H@@YAXAEAH0@Z
_TEXT	SEGMENT
tmp$ = 4
a$ = 256
b$ = 264
??$ImSwap@H@@YAXAEAH0@Z PROC				; ImSwap<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tmp$[rbp], eax
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR tmp$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@H@@YAXAEAH0@Z ENDP				; ImSwap<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_sanitized$ = 40
v_str$ = 112
p$ = 200
__$ArrayPad$ = 408
format$ = 448
data_type$ = 456
v$ = 464
??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z PROC	; ImGui::RoundScalarWithFormatT<double,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2180
$LN10:
	movsd	QWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2181
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2182
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@RoundScala
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@RoundScala
$LN5@RoundScala:
; Line 2183
	movsd	xmm0, QWORD PTR v$[rbp]
	jmp	$LN1@RoundScala
$LN4@RoundScala:
; Line 2187
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_sanitized$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?SanitizeFormatString@@YAXPEBDPEAD_K@Z	; SanitizeFormatString
; Line 2188
	lea	rax, QWORD PTR fmt_sanitized$[rbp]
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2192
	movsd	xmm3, QWORD PTR v$[rbp]
	movq	r9, xmm3
	mov	r8, QWORD PTR fmt_start$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR v_str$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2193
	lea	rax, QWORD PTR v_str$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@RoundScala:
; Line 2194
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@RoundScala
; Line 2195
	mov	rax, QWORD PTR p$[rbp]
	inc	rax
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN2@RoundScala
$LN3@RoundScala:
; Line 2196
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@RoundScala
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN6@RoundScala
$LN8@RoundScala:
; Line 2197
	mov	rcx, QWORD PTR p$[rbp]
	call	QWORD PTR __imp_atof
	movsd	QWORD PTR v$[rbp], xmm0
	jmp	SHORT $LN7@RoundScala
$LN6@RoundScala:
; Line 2199
	lea	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	??$ImAtoi@N@@YAPEBDPEBDPEAN@Z		; ImAtoi<double>
$LN7@RoundScala:
; Line 2200
	movsd	xmm0, QWORD PTR v$[rbp]
$LN1@RoundScala:
; Line 2201
	movdqu	XMMWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z ENDP	; ImGui::RoundScalarWithFormatT<double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z
_TEXT	SEGMENT
is_floating_point$ = 4
result$ = 40
flipped$5 = 68
v_min_fudged$6 = 104
v_max_fudged$7 = 136
t_with_flip$8 = 164
zero_point_center$9 = 196
zero_point_snap_L$10 = 228
zero_point_snap_R$11 = 260
v_new_off_f$12 = 296
tv143 = 500
tv136 = 500
tv90 = 500
tv81 = 500
tv73 = 500
tv67 = 500
tv217 = 504
tv200 = 504
tv184 = 504
tv169 = 504
tv155 = 504
tv92 = 504
tv83 = 504
__$ArrayPad$ = 512
data_type$ = 560
t$ = 568
v_min$ = 576
v_max$ = 584
is_logarithmic$ = 592
logarithmic_zero_epsilon$ = 600
zero_deadzone_halfsize$ = 608
??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z PROC	; ImGui::ScaleValueFromRatioT<double,double,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2713
$LN41:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 584				; 00000248H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+616]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2714
	movsd	xmm0, QWORD PTR v_min$[rbp]
	ucomisd	xmm0, QWORD PTR v_max$[rbp]
	jp	SHORT $LN2@ScaleValue
	jne	SHORT $LN2@ScaleValue
; Line 2715
	movsd	xmm0, QWORD PTR v_min$[rbp]
	jmp	$LN1@ScaleValue
$LN2@ScaleValue:
; Line 2716
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN25@ScaleValue
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN25@ScaleValue
	mov	BYTE PTR tv67[rbp], 0
	jmp	SHORT $LN26@ScaleValue
$LN25@ScaleValue:
	mov	BYTE PTR tv67[rbp], 1
$LN26@ScaleValue:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2719
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleValue
; Line 2722
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR t$[rbp]
	jb	SHORT $LN5@ScaleValue
; Line 2723
	movsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR result$[rbp], xmm0
	jmp	$LN6@ScaleValue
$LN5@ScaleValue:
; Line 2724
	movss	xmm0, DWORD PTR t$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN7@ScaleValue
; Line 2725
	movsd	xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR result$[rbp], xmm0
	jmp	$LN8@ScaleValue
$LN7@ScaleValue:
; Line 2728
	movsd	xmm0, QWORD PTR v_min$[rbp]
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN27@ScaleValue
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN28@ScaleValue
$LN27@ScaleValue:
	mov	DWORD PTR tv73[rbp], 0
$LN28@ScaleValue:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR flipped$5[rbp], al
; Line 2731
	movsd	xmm0, QWORD PTR v_min$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN31@ScaleValue
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN29@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv81[rbp], xmm0
	jmp	SHORT $LN30@ScaleValue
$LN29@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv81[rbp], xmm0
$LN30@ScaleValue:
	cvtss2sd xmm0, DWORD PTR tv81[rbp]
	movsd	QWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN32@ScaleValue
$LN31@ScaleValue:
	movsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR tv83[rbp], xmm0
$LN32@ScaleValue:
	movsd	xmm0, QWORD PTR tv83[rbp]
	movsd	QWORD PTR v_min_fudged$6[rbp], xmm0
; Line 2732
	movsd	xmm0, QWORD PTR v_max$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN35@ScaleValue
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN33@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv90[rbp], xmm0
	jmp	SHORT $LN34@ScaleValue
$LN33@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv90[rbp], xmm0
$LN34@ScaleValue:
	cvtss2sd xmm0, DWORD PTR tv90[rbp]
	movsd	QWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN36@ScaleValue
$LN35@ScaleValue:
	movsd	xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR tv92[rbp], xmm0
$LN36@ScaleValue:
	movsd	xmm0, QWORD PTR tv92[rbp]
	movsd	QWORD PTR v_max_fudged$7[rbp], xmm0
; Line 2734
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN9@ScaleValue
; Line 2735
	lea	rdx, QWORD PTR v_max_fudged$7[rbp]
	lea	rcx, QWORD PTR v_min_fudged$6[rbp]
	call	??$ImSwap@N@@YAXAEAN0@Z			; ImSwap<double>
$LN9@ScaleValue:
; Line 2738
	movsd	xmm0, QWORD PTR v_max$[rbp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN10@ScaleValue
	jne	SHORT $LN10@ScaleValue
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN10@ScaleValue
; Line 2739
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_max_fudged$7[rbp], xmm0
$LN10@ScaleValue:
; Line 2741
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN37@ScaleValue
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv136[rbp], xmm0
	jmp	SHORT $LN38@ScaleValue
$LN37@ScaleValue:
	movss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv136[rbp], xmm0
$LN38@ScaleValue:
	movss	xmm0, DWORD PTR tv136[rbp]
	movss	DWORD PTR t_with_flip$8[rbp], xmm0
; Line 2743
	movsd	xmm0, QWORD PTR v_min$[rbp]
	mulsd	xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	jbe	$LN11@ScaleValue
; Line 2745
	movsd	xmm1, QWORD PTR v_max$[rbp]
	movsd	xmm0, QWORD PTR v_min$[rbp]
	call	??$ImMin@N@@YANNN@Z			; ImMin<double>
	cvtsd2ss xmm0, xmm0
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv143[rbp], xmm0
	cvtsd2ss xmm1, QWORD PTR v_max$[rbp]
	cvtsd2ss xmm2, QWORD PTR v_min$[rbp]
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR tv143[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_point_center$9[rbp], xmm0
; Line 2746
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$10[rbp], xmm0
; Line 2747
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$11[rbp], xmm0
; Line 2748
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	comiss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	jb	SHORT $LN13@ScaleValue
	movss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jb	SHORT $LN13@ScaleValue
; Line 2749
	xorps	xmm0, xmm0
	movsd	QWORD PTR result$[rbp], xmm0
	jmp	$LN14@ScaleValue
$LN13@ScaleValue:
; Line 2750
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jbe	SHORT $LN15@ScaleValue
; Line 2751
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	QWORD PTR tv155[rbp], xmm0
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	divss	xmm1, DWORD PTR zero_point_snap_L$10[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movsd	xmm2, QWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm3, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv155[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR result$[rbp], xmm0
	jmp	SHORT $LN16@ScaleValue
$LN15@ScaleValue:
; Line 2753
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	QWORD PTR tv169[rbp], xmm0
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	subss	xmm1, DWORD PTR zero_point_snap_R$11[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, DWORD PTR zero_point_snap_R$11[rbp]
	divss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm2, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm3, QWORD PTR v_max_fudged$7[rbp]
	divsd	xmm3, xmm2
	movaps	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv169[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR result$[rbp], xmm0
$LN16@ScaleValue:
$LN14@ScaleValue:
; Line 2754
	jmp	$LN12@ScaleValue
$LN11@ScaleValue:
; Line 2755
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_min$[rbp]
	ja	SHORT $LN19@ScaleValue
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN17@ScaleValue
$LN19@ScaleValue:
; Line 2756
	movsd	xmm0, QWORD PTR v_max_fudged$7[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv184[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR t_with_flip$8[rbp]
	cvtss2sd xmm1, xmm1
	movsd	xmm2, QWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm3, QWORD PTR v_max_fudged$7[rbp]
	xorps	xmm3, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv184[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR result$[rbp], xmm0
	jmp	SHORT $LN18@ScaleValue
$LN17@ScaleValue:
; Line 2758
	cvtss2sd xmm0, DWORD PTR t_with_flip$8[rbp]
	movsd	xmm1, QWORD PTR v_max_fudged$7[rbp]
	divsd	xmm1, QWORD PTR v_min_fudged$6[rbp]
	movsd	QWORD PTR tv200[rbp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv200[rbp]
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR v_min_fudged$6[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR result$[rbp], xmm0
$LN18@ScaleValue:
$LN12@ScaleValue:
$LN8@ScaleValue:
$LN6@ScaleValue:
; Line 2760
	jmp	$LN4@ScaleValue
$LN3@ScaleValue:
; Line 2764
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN20@ScaleValue
; Line 2766
	movss	xmm2, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR v_max$[rbp]
	movsd	xmm0, QWORD PTR v_min$[rbp]
	call	??$ImLerp@N@@YANNNM@Z			; ImLerp<double>
	movsd	QWORD PTR result$[rbp], xmm0
; Line 2767
	jmp	$LN21@ScaleValue
$LN20@ScaleValue:
; Line 2774
	cvtss2sd xmm0, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN22@ScaleValue
; Line 2776
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	cvtss2sd xmm1, DWORD PTR t$[rbp]
	mulsd	xmm0, xmm1
	movsd	QWORD PTR v_new_off_f$12[rbp], xmm0
; Line 2777
	movsd	xmm0, QWORD PTR v_min$[rbp]
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN39@ScaleValue
	movsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR tv217[rbp], xmm0
	jmp	SHORT $LN40@ScaleValue
$LN39@ScaleValue:
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv217[rbp], xmm0
$LN40@ScaleValue:
	movsd	xmm0, QWORD PTR v_new_off_f$12[rbp]
	addsd	xmm0, QWORD PTR tv217[rbp]
	movsd	xmm1, QWORD PTR v_min$[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR result$[rbp], xmm0
; Line 2778
	jmp	SHORT $LN23@ScaleValue
$LN22@ScaleValue:
; Line 2781
	movsd	xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR result$[rbp], xmm0
$LN23@ScaleValue:
$LN21@ScaleValue:
$LN4@ScaleValue:
; Line 2786
	movsd	xmm0, QWORD PTR result$[rbp]
$LN1@ScaleValue:
; Line 2787
	movdqu	XMMWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z ENDP	; ImGui::ScaleValueFromRatioT<double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z
_TEXT	SEGMENT
v_clamped$ = 8
flipped$1 = 36
v_min_fudged$2 = 72
v_max_fudged$3 = 104
result$4 = 132
zero_point_center$5 = 164
zero_point_snap_L$6 = 196
zero_point_snap_R$7 = 228
tv213 = 436
tv131 = 436
tv90 = 436
tv78 = 436
tv201 = 440
tv187 = 440
tv171 = 440
tv156 = 440
tv133 = 440
tv92 = 440
tv74 = 440
data_type$ = 480
v$ = 488
v_min$ = 496
v_max$ = 504
is_logarithmic$ = 512
logarithmic_zero_epsilon$ = 520
zero_deadzone_halfsize$ = 528
??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z PROC	; ImGui::ScaleRatioFromValueT<double,double,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2657
$LN36:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2658
	movsd	xmm0, QWORD PTR v_min$[rbp]
	ucomisd	xmm0, QWORD PTR v_max$[rbp]
	jp	SHORT $LN2@ScaleRatio
	jne	SHORT $LN2@ScaleRatio
; Line 2659
	xorps	xmm0, xmm0
	jmp	$LN1@ScaleRatio
$LN2@ScaleRatio:
; Line 2662
	movsd	xmm0, QWORD PTR v_max$[rbp]
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN22@ScaleRatio
	movsd	xmm2, QWORD PTR v_max$[rbp]
	movsd	xmm1, QWORD PTR v_min$[rbp]
	movsd	xmm0, QWORD PTR v$[rbp]
	call	??$ImClamp@N@@YANNNN@Z			; ImClamp<double>
	movsd	QWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN23@ScaleRatio
$LN22@ScaleRatio:
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR v_max$[rbp]
	movsd	xmm0, QWORD PTR v$[rbp]
	call	??$ImClamp@N@@YANNNN@Z			; ImClamp<double>
	movsd	QWORD PTR tv74[rbp], xmm0
$LN23@ScaleRatio:
	movsd	xmm0, QWORD PTR tv74[rbp]
	movsd	QWORD PTR v_clamped$[rbp], xmm0
; Line 2663
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleRatio
; Line 2665
	movsd	xmm0, QWORD PTR v_min$[rbp]
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN24@ScaleRatio
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN25@ScaleRatio
$LN24@ScaleRatio:
	mov	DWORD PTR tv78[rbp], 0
$LN25@ScaleRatio:
	movzx	eax, BYTE PTR tv78[rbp]
	mov	BYTE PTR flipped$1[rbp], al
; Line 2667
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN4@ScaleRatio
; Line 2668
	lea	rdx, QWORD PTR v_max$[rbp]
	lea	rcx, QWORD PTR v_min$[rbp]
	call	??$ImSwap@N@@YAXAEAN0@Z			; ImSwap<double>
$LN4@ScaleRatio:
; Line 2671
	movsd	xmm0, QWORD PTR v_min$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN28@ScaleRatio
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN26@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv90[rbp], xmm0
	jmp	SHORT $LN27@ScaleRatio
$LN26@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv90[rbp], xmm0
$LN27@ScaleRatio:
	cvtss2sd xmm0, DWORD PTR tv90[rbp]
	movsd	QWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN29@ScaleRatio
$LN28@ScaleRatio:
	movsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR tv92[rbp], xmm0
$LN29@ScaleRatio:
	movsd	xmm0, QWORD PTR tv92[rbp]
	movsd	QWORD PTR v_min_fudged$2[rbp], xmm0
; Line 2672
	movsd	xmm0, QWORD PTR v_max$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN32@ScaleRatio
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN30@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv131[rbp], xmm0
	jmp	SHORT $LN31@ScaleRatio
$LN30@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv131[rbp], xmm0
$LN31@ScaleRatio:
	cvtss2sd xmm0, DWORD PTR tv131[rbp]
	movsd	QWORD PTR tv133[rbp], xmm0
	jmp	SHORT $LN33@ScaleRatio
$LN32@ScaleRatio:
	movsd	xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR tv133[rbp], xmm0
$LN33@ScaleRatio:
	movsd	xmm0, QWORD PTR tv133[rbp]
	movsd	QWORD PTR v_max_fudged$3[rbp], xmm0
; Line 2675
	movsd	xmm0, QWORD PTR v_min$[rbp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN5@ScaleRatio
	jne	SHORT $LN5@ScaleRatio
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN5@ScaleRatio
; Line 2676
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_min_fudged$2[rbp], xmm0
	jmp	SHORT $LN6@ScaleRatio
$LN5@ScaleRatio:
; Line 2677
	movsd	xmm0, QWORD PTR v_max$[rbp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN7@ScaleRatio
	jne	SHORT $LN7@ScaleRatio
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN7@ScaleRatio
; Line 2678
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_max_fudged$3[rbp], xmm0
$LN7@ScaleRatio:
$LN6@ScaleRatio:
; Line 2682
	movsd	xmm0, QWORD PTR v_min_fudged$2[rbp]
	comisd	xmm0, QWORD PTR v_clamped$[rbp]
	jb	SHORT $LN8@ScaleRatio
; Line 2683
	xorps	xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN9@ScaleRatio
$LN8@ScaleRatio:
; Line 2684
	movsd	xmm0, QWORD PTR v_clamped$[rbp]
	comisd	xmm0, QWORD PTR v_max_fudged$3[rbp]
	jb	SHORT $LN10@ScaleRatio
; Line 2685
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN11@ScaleRatio
$LN10@ScaleRatio:
; Line 2686
	movsd	xmm0, QWORD PTR v_min$[rbp]
	mulsd	xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comisd	xmm1, xmm0
	jbe	$LN12@ScaleRatio
; Line 2688
	cvtsd2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtsd2ss xmm1, QWORD PTR v_max$[rbp]
	cvtsd2ss xmm2, QWORD PTR v_min$[rbp]
	subss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR zero_point_center$5[rbp], xmm0
; Line 2689
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$6[rbp], xmm0
; Line 2690
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$7[rbp], xmm0
; Line 2691
	movsd	xmm0, QWORD PTR v$[rbp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN14@ScaleRatio
	jne	SHORT $LN14@ScaleRatio
; Line 2692
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN15@ScaleRatio
$LN14@ScaleRatio:
; Line 2693
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v$[rbp]
	jbe	SHORT $LN16@ScaleRatio
; Line 2694
	movsd	xmm0, QWORD PTR v_clamped$[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv156[rbp], xmm0
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm2, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv156[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR zero_point_snap_L$6[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN17@ScaleRatio
$LN16@ScaleRatio:
; Line 2696
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm1, QWORD PTR v_clamped$[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv171[rbp], xmm0
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm2, QWORD PTR v_max_fudged$3[rbp]
	divsd	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv171[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN17@ScaleRatio:
$LN15@ScaleRatio:
; Line 2697
	jmp	$LN13@ScaleRatio
$LN12@ScaleRatio:
; Line 2698
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_min$[rbp]
	ja	SHORT $LN20@ScaleRatio
	xorps	xmm0, xmm0
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jbe	SHORT $LN18@ScaleRatio
$LN20@ScaleRatio:
; Line 2699
	movsd	xmm0, QWORD PTR v_clamped$[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR v_max_fudged$3[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv187[rbp], xmm0
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm2, QWORD PTR v_max_fudged$3[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv187[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN19@ScaleRatio
$LN18@ScaleRatio:
; Line 2701
	movsd	xmm0, QWORD PTR v_clamped$[rbp]
	divsd	xmm0, QWORD PTR v_min_fudged$2[rbp]
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv201[rbp], xmm0
	movsd	xmm1, QWORD PTR v_max_fudged$3[rbp]
	divsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv201[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
$LN19@ScaleRatio:
$LN13@ScaleRatio:
$LN11@ScaleRatio:
$LN9@ScaleRatio:
; Line 2703
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN34@ScaleRatio
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv213[rbp], xmm0
	jmp	SHORT $LN35@ScaleRatio
$LN34@ScaleRatio:
	movss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv213[rbp], xmm0
$LN35@ScaleRatio:
	movss	xmm0, DWORD PTR tv213[rbp]
	jmp	SHORT $LN1@ScaleRatio
$LN3@ScaleRatio:
; Line 2707
	movsd	xmm0, QWORD PTR v_clamped$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR v_max$[rbp]
	subsd	xmm1, QWORD PTR v_min$[rbp]
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
$LN1@ScaleRatio:
; Line 2708
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ENDP	; ImGui::ScaleRatioFromValueT<double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_sanitized$ = 40
v_str$ = 112
p$ = 200
__$ArrayPad$ = 408
format$ = 448
data_type$ = 456
v$ = 464
??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z PROC	; ImGui::RoundScalarWithFormatT<float,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2180
$LN10:
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2181
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2182
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@RoundScala
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@RoundScala
$LN5@RoundScala:
; Line 2183
	movss	xmm0, DWORD PTR v$[rbp]
	jmp	$LN1@RoundScala
$LN4@RoundScala:
; Line 2187
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_sanitized$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?SanitizeFormatString@@YAXPEBDPEAD_K@Z	; SanitizeFormatString
; Line 2188
	lea	rax, QWORD PTR fmt_sanitized$[rbp]
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2192
	cvtss2sd xmm0, DWORD PTR v$[rbp]
	movaps	xmm3, xmm0
	movq	r9, xmm3
	mov	r8, QWORD PTR fmt_start$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR v_str$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2193
	lea	rax, QWORD PTR v_str$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@RoundScala:
; Line 2194
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@RoundScala
; Line 2195
	mov	rax, QWORD PTR p$[rbp]
	inc	rax
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN2@RoundScala
$LN3@RoundScala:
; Line 2196
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@RoundScala
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN6@RoundScala
$LN8@RoundScala:
; Line 2197
	mov	rcx, QWORD PTR p$[rbp]
	call	QWORD PTR __imp_atof
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR v$[rbp], xmm0
	jmp	SHORT $LN7@RoundScala
$LN6@RoundScala:
; Line 2199
	lea	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	??$ImAtoi@M@@YAPEBDPEBDPEAM@Z		; ImAtoi<float>
$LN7@RoundScala:
; Line 2200
	movss	xmm0, DWORD PTR v$[rbp]
$LN1@RoundScala:
; Line 2201
	movdqu	XMMWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z ENDP	; ImGui::RoundScalarWithFormatT<float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z
_TEXT	SEGMENT
is_floating_point$ = 4
result$ = 36
flipped$5 = 68
v_min_fudged$6 = 100
v_max_fudged$7 = 132
t_with_flip$8 = 164
zero_point_center$9 = 196
zero_point_snap_L$10 = 228
zero_point_snap_R$11 = 260
v_new_off_f$12 = 292
tv170 = 500
tv164 = 500
tv153 = 500
tv137 = 500
tv131 = 500
tv87 = 500
tv80 = 500
tv73 = 500
tv67 = 500
tv200 = 504
tv88 = 504
tv81 = 504
__$ArrayPad$ = 512
data_type$ = 560
t$ = 568
v_min$ = 576
v_max$ = 584
is_logarithmic$ = 592
logarithmic_zero_epsilon$ = 600
zero_deadzone_halfsize$ = 608
??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z PROC	; ImGui::ScaleValueFromRatioT<float,float,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2713
$LN41:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 584				; 00000248H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+616]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2714
	movss	xmm0, DWORD PTR v_min$[rbp]
	ucomiss	xmm0, DWORD PTR v_max$[rbp]
	jp	SHORT $LN2@ScaleValue
	jne	SHORT $LN2@ScaleValue
; Line 2715
	movss	xmm0, DWORD PTR v_min$[rbp]
	jmp	$LN1@ScaleValue
$LN2@ScaleValue:
; Line 2716
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN25@ScaleValue
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN25@ScaleValue
	mov	BYTE PTR tv67[rbp], 0
	jmp	SHORT $LN26@ScaleValue
$LN25@ScaleValue:
	mov	BYTE PTR tv67[rbp], 1
$LN26@ScaleValue:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2719
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleValue
; Line 2722
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR t$[rbp]
	jb	SHORT $LN5@ScaleValue
; Line 2723
	movss	xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR result$[rbp], xmm0
	jmp	$LN6@ScaleValue
$LN5@ScaleValue:
; Line 2724
	movss	xmm0, DWORD PTR t$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN7@ScaleValue
; Line 2725
	movss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR result$[rbp], xmm0
	jmp	$LN8@ScaleValue
$LN7@ScaleValue:
; Line 2728
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN27@ScaleValue
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN28@ScaleValue
$LN27@ScaleValue:
	mov	DWORD PTR tv73[rbp], 0
$LN28@ScaleValue:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR flipped$5[rbp], al
; Line 2731
	movss	xmm0, DWORD PTR v_min$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN31@ScaleValue
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN29@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv80[rbp], xmm0
	jmp	SHORT $LN30@ScaleValue
$LN29@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv80[rbp], xmm0
$LN30@ScaleValue:
	movss	xmm0, DWORD PTR tv80[rbp]
	movss	DWORD PTR tv81[rbp], xmm0
	jmp	SHORT $LN32@ScaleValue
$LN31@ScaleValue:
	movss	xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR tv81[rbp], xmm0
$LN32@ScaleValue:
	movss	xmm0, DWORD PTR tv81[rbp]
	movss	DWORD PTR v_min_fudged$6[rbp], xmm0
; Line 2732
	movss	xmm0, DWORD PTR v_max$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN35@ScaleValue
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN33@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv87[rbp], xmm0
	jmp	SHORT $LN34@ScaleValue
$LN33@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv87[rbp], xmm0
$LN34@ScaleValue:
	movss	xmm0, DWORD PTR tv87[rbp]
	movss	DWORD PTR tv88[rbp], xmm0
	jmp	SHORT $LN36@ScaleValue
$LN35@ScaleValue:
	movss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR tv88[rbp], xmm0
$LN36@ScaleValue:
	movss	xmm0, DWORD PTR tv88[rbp]
	movss	DWORD PTR v_max_fudged$7[rbp], xmm0
; Line 2734
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN9@ScaleValue
; Line 2735
	lea	rdx, QWORD PTR v_max_fudged$7[rbp]
	lea	rcx, QWORD PTR v_min_fudged$6[rbp]
	call	??$ImSwap@M@@YAXAEAM0@Z			; ImSwap<float>
$LN9@ScaleValue:
; Line 2738
	movss	xmm0, DWORD PTR v_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN10@ScaleValue
	jne	SHORT $LN10@ScaleValue
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN10@ScaleValue
; Line 2739
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_max_fudged$7[rbp], xmm0
$LN10@ScaleValue:
; Line 2741
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN37@ScaleValue
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv131[rbp], xmm0
	jmp	SHORT $LN38@ScaleValue
$LN37@ScaleValue:
	movss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv131[rbp], xmm0
$LN38@ScaleValue:
	movss	xmm0, DWORD PTR tv131[rbp]
	movss	DWORD PTR t_with_flip$8[rbp], xmm0
; Line 2743
	movss	xmm0, DWORD PTR v_min$[rbp]
	mulss	xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN11@ScaleValue
; Line 2745
	movss	xmm1, DWORD PTR v_max$[rbp]
	movss	xmm0, DWORD PTR v_min$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv137[rbp], xmm0
	movss	xmm1, DWORD PTR v_max$[rbp]
	subss	xmm1, DWORD PTR v_min$[rbp]
	movaps	xmm0, xmm1
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR tv137[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_point_center$9[rbp], xmm0
; Line 2746
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$10[rbp], xmm0
; Line 2747
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$11[rbp], xmm0
; Line 2748
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	comiss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	jb	SHORT $LN13@ScaleValue
	movss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jb	SHORT $LN13@ScaleValue
; Line 2749
	xorps	xmm0, xmm0
	movss	DWORD PTR result$[rbp], xmm0
	jmp	$LN14@ScaleValue
$LN13@ScaleValue:
; Line 2750
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jbe	SHORT $LN15@ScaleValue
; Line 2751
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	divss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR v_min_fudged$6[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv153[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv153[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR result$[rbp], xmm0
	jmp	SHORT $LN16@ScaleValue
$LN15@ScaleValue:
; Line 2753
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	subss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$11[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR v_max_fudged$7[rbp]
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv164[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv164[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$[rbp], xmm0
$LN16@ScaleValue:
$LN14@ScaleValue:
; Line 2754
	jmp	$LN12@ScaleValue
$LN11@ScaleValue:
; Line 2755
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_min$[rbp]
	ja	SHORT $LN19@ScaleValue
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN17@ScaleValue
$LN19@ScaleValue:
; Line 2756
	movss	xmm0, DWORD PTR v_max_fudged$7[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv170[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR t_with_flip$8[rbp]
	movss	xmm2, DWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm3, DWORD PTR v_max_fudged$7[rbp]
	xorps	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR tv170[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR result$[rbp], xmm0
	jmp	SHORT $LN18@ScaleValue
$LN17@ScaleValue:
; Line 2758
	movss	xmm0, DWORD PTR v_max_fudged$7[rbp]
	divss	xmm0, DWORD PTR v_min_fudged$6[rbp]
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR v_min_fudged$6[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$[rbp], xmm0
$LN18@ScaleValue:
$LN12@ScaleValue:
$LN8@ScaleValue:
$LN6@ScaleValue:
; Line 2760
	jmp	$LN4@ScaleValue
$LN3@ScaleValue:
; Line 2764
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN20@ScaleValue
; Line 2766
	movss	xmm2, DWORD PTR t$[rbp]
	movss	xmm1, DWORD PTR v_max$[rbp]
	movss	xmm0, DWORD PTR v_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR result$[rbp], xmm0
; Line 2767
	jmp	$LN21@ScaleValue
$LN20@ScaleValue:
; Line 2774
	cvtss2sd xmm0, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	$LN22@ScaleValue
; Line 2776
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR v_new_off_f$12[rbp], xmm0
; Line 2777
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN39@ScaleValue
	movsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR tv200[rbp], xmm0
	jmp	SHORT $LN40@ScaleValue
$LN39@ScaleValue:
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv200[rbp], xmm0
$LN40@ScaleValue:
	cvtsd2ss xmm0, QWORD PTR tv200[rbp]
	movss	xmm1, DWORD PTR v_new_off_f$12[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR v_min$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$[rbp], xmm0
; Line 2778
	jmp	SHORT $LN23@ScaleValue
$LN22@ScaleValue:
; Line 2781
	movss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR result$[rbp], xmm0
$LN23@ScaleValue:
$LN21@ScaleValue:
$LN4@ScaleValue:
; Line 2786
	movss	xmm0, DWORD PTR result$[rbp]
$LN1@ScaleValue:
; Line 2787
	movdqu	XMMWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	movdqu	xmm0, XMMWORD PTR [rsp+32]
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z ENDP	; ImGui::ScaleValueFromRatioT<float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z
_TEXT	SEGMENT
v_clamped$ = 4
flipped$1 = 36
v_min_fudged$2 = 68
v_max_fudged$3 = 100
result$4 = 132
zero_point_center$5 = 164
zero_point_snap_L$6 = 196
zero_point_snap_R$7 = 228
tv196 = 436
tv185 = 436
tv172 = 436
tv159 = 436
tv147 = 436
tv128 = 436
tv89 = 436
tv78 = 436
tv74 = 436
tv129 = 440
tv90 = 440
data_type$ = 480
v$ = 488
v_min$ = 496
v_max$ = 504
is_logarithmic$ = 512
logarithmic_zero_epsilon$ = 520
zero_deadzone_halfsize$ = 528
??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z PROC	; ImGui::ScaleRatioFromValueT<float,float,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2657
$LN36:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2658
	movss	xmm0, DWORD PTR v_min$[rbp]
	ucomiss	xmm0, DWORD PTR v_max$[rbp]
	jp	SHORT $LN2@ScaleRatio
	jne	SHORT $LN2@ScaleRatio
; Line 2659
	xorps	xmm0, xmm0
	jmp	$LN1@ScaleRatio
$LN2@ScaleRatio:
; Line 2662
	movss	xmm0, DWORD PTR v_max$[rbp]
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN22@ScaleRatio
	movss	xmm2, DWORD PTR v_max$[rbp]
	movss	xmm1, DWORD PTR v_min$[rbp]
	movss	xmm0, DWORD PTR v$[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN23@ScaleRatio
$LN22@ScaleRatio:
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_max$[rbp]
	movss	xmm0, DWORD PTR v$[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv74[rbp], xmm0
$LN23@ScaleRatio:
	movss	xmm0, DWORD PTR tv74[rbp]
	movss	DWORD PTR v_clamped$[rbp], xmm0
; Line 2663
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleRatio
; Line 2665
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN24@ScaleRatio
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN25@ScaleRatio
$LN24@ScaleRatio:
	mov	DWORD PTR tv78[rbp], 0
$LN25@ScaleRatio:
	movzx	eax, BYTE PTR tv78[rbp]
	mov	BYTE PTR flipped$1[rbp], al
; Line 2667
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN4@ScaleRatio
; Line 2668
	lea	rdx, QWORD PTR v_max$[rbp]
	lea	rcx, QWORD PTR v_min$[rbp]
	call	??$ImSwap@M@@YAXAEAM0@Z			; ImSwap<float>
$LN4@ScaleRatio:
; Line 2671
	movss	xmm0, DWORD PTR v_min$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@ScaleRatio
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN26@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv89[rbp], xmm0
	jmp	SHORT $LN27@ScaleRatio
$LN26@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv89[rbp], xmm0
$LN27@ScaleRatio:
	movss	xmm0, DWORD PTR tv89[rbp]
	movss	DWORD PTR tv90[rbp], xmm0
	jmp	SHORT $LN29@ScaleRatio
$LN28@ScaleRatio:
	movss	xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR tv90[rbp], xmm0
$LN29@ScaleRatio:
	movss	xmm0, DWORD PTR tv90[rbp]
	movss	DWORD PTR v_min_fudged$2[rbp], xmm0
; Line 2672
	movss	xmm0, DWORD PTR v_max$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN32@ScaleRatio
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN30@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv128[rbp], xmm0
	jmp	SHORT $LN31@ScaleRatio
$LN30@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv128[rbp], xmm0
$LN31@ScaleRatio:
	movss	xmm0, DWORD PTR tv128[rbp]
	movss	DWORD PTR tv129[rbp], xmm0
	jmp	SHORT $LN33@ScaleRatio
$LN32@ScaleRatio:
	movss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR tv129[rbp], xmm0
$LN33@ScaleRatio:
	movss	xmm0, DWORD PTR tv129[rbp]
	movss	DWORD PTR v_max_fudged$3[rbp], xmm0
; Line 2675
	movss	xmm0, DWORD PTR v_min$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@ScaleRatio
	jne	SHORT $LN5@ScaleRatio
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN5@ScaleRatio
; Line 2676
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_min_fudged$2[rbp], xmm0
	jmp	SHORT $LN6@ScaleRatio
$LN5@ScaleRatio:
; Line 2677
	movss	xmm0, DWORD PTR v_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN7@ScaleRatio
	jne	SHORT $LN7@ScaleRatio
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN7@ScaleRatio
; Line 2678
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_max_fudged$3[rbp], xmm0
$LN7@ScaleRatio:
$LN6@ScaleRatio:
; Line 2682
	movss	xmm0, DWORD PTR v_min_fudged$2[rbp]
	comiss	xmm0, DWORD PTR v_clamped$[rbp]
	jb	SHORT $LN8@ScaleRatio
; Line 2683
	xorps	xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN9@ScaleRatio
$LN8@ScaleRatio:
; Line 2684
	movss	xmm0, DWORD PTR v_clamped$[rbp]
	comiss	xmm0, DWORD PTR v_max_fudged$3[rbp]
	jb	SHORT $LN10@ScaleRatio
; Line 2685
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN11@ScaleRatio
$LN10@ScaleRatio:
; Line 2686
	movss	xmm0, DWORD PTR v_min$[rbp]
	mulss	xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN12@ScaleRatio
; Line 2688
	movss	xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR v_max$[rbp]
	subss	xmm1, DWORD PTR v_min$[rbp]
	divss	xmm0, xmm1
	movss	DWORD PTR zero_point_center$5[rbp], xmm0
; Line 2689
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$6[rbp], xmm0
; Line 2690
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$7[rbp], xmm0
; Line 2691
	movss	xmm0, DWORD PTR v$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@ScaleRatio
	jne	SHORT $LN14@ScaleRatio
; Line 2692
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN15@ScaleRatio
$LN14@ScaleRatio:
; Line 2693
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v$[rbp]
	jbe	SHORT $LN16@ScaleRatio
; Line 2694
	movss	xmm0, DWORD PTR v_clamped$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv147[rbp], xmm0
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv147[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR zero_point_snap_L$6[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN17@ScaleRatio
$LN16@ScaleRatio:
; Line 2696
	movss	xmm0, DWORD PTR v_clamped$[rbp]
	divss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv159[rbp], xmm0
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv159[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN17@ScaleRatio:
$LN15@ScaleRatio:
; Line 2697
	jmp	$LN13@ScaleRatio
$LN12@ScaleRatio:
; Line 2698
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_min$[rbp]
	ja	SHORT $LN20@ScaleRatio
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jbe	SHORT $LN18@ScaleRatio
$LN20@ScaleRatio:
; Line 2699
	movss	xmm0, DWORD PTR v_clamped$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv172[rbp], xmm0
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR v_max_fudged$3[rbp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv172[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN19@ScaleRatio
$LN18@ScaleRatio:
; Line 2701
	movss	xmm0, DWORD PTR v_clamped$[rbp]
	divss	xmm0, DWORD PTR v_min_fudged$2[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv185[rbp], xmm0
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	divss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv185[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN19@ScaleRatio:
$LN13@ScaleRatio:
$LN11@ScaleRatio:
$LN9@ScaleRatio:
; Line 2703
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN34@ScaleRatio
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv196[rbp], xmm0
	jmp	SHORT $LN35@ScaleRatio
$LN34@ScaleRatio:
	movss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv196[rbp], xmm0
$LN35@ScaleRatio:
	movss	xmm0, DWORD PTR tv196[rbp]
	jmp	SHORT $LN1@ScaleRatio
$LN3@ScaleRatio:
; Line 2707
	movss	xmm0, DWORD PTR v_clamped$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_max$[rbp]
	subss	xmm1, DWORD PTR v_min$[rbp]
	divss	xmm0, xmm1
$LN1@ScaleRatio:
; Line 2708
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ENDP	; ImGui::ScaleRatioFromValueT<float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_sanitized$ = 40
v_str$ = 112
p$ = 200
__$ArrayPad$ = 408
format$ = 448
data_type$ = 456
v$ = 464
??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z PROC ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2180
$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2181
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2182
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@RoundScala
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@RoundScala
$LN5@RoundScala:
; Line 2183
	mov	rax, QWORD PTR v$[rbp]
	jmp	$LN1@RoundScala
$LN4@RoundScala:
; Line 2187
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_sanitized$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?SanitizeFormatString@@YAXPEBDPEAD_K@Z	; SanitizeFormatString
; Line 2188
	lea	rax, QWORD PTR fmt_sanitized$[rbp]
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2192
	mov	r9, QWORD PTR v$[rbp]
	mov	r8, QWORD PTR fmt_start$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR v_str$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2193
	lea	rax, QWORD PTR v_str$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@RoundScala:
; Line 2194
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@RoundScala
; Line 2195
	mov	rax, QWORD PTR p$[rbp]
	inc	rax
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN2@RoundScala
$LN3@RoundScala:
; Line 2196
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@RoundScala
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN6@RoundScala
$LN8@RoundScala:
; Line 2197
	mov	rcx, QWORD PTR p$[rbp]
	call	QWORD PTR __imp_atof
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN10@RoundScala
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN10@RoundScala
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN10@RoundScala:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$[rbp], rax
	jmp	SHORT $LN7@RoundScala
$LN6@RoundScala:
; Line 2199
	lea	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z		; ImAtoi<__int64>
$LN7@RoundScala:
; Line 2200
	mov	rax, QWORD PTR v$[rbp]
$LN1@RoundScala:
; Line 2201
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z ENDP ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z
_TEXT	SEGMENT
is_floating_point$ = 4
result$ = 40
flipped$5 = 68
v_min_fudged$6 = 104
v_max_fudged$7 = 136
t_with_flip$8 = 164
zero_point_center$9 = 196
zero_point_snap_L$10 = 228
zero_point_snap_R$11 = 260
v_new_off_f$12 = 296
tv152 = 500
tv144 = 500
tv95 = 500
tv83 = 500
tv73 = 500
tv67 = 500
tv232 = 504
tv214 = 504
tv197 = 504
tv179 = 504
tv164 = 504
tv130 = 504
tv86 = 504
__$ArrayPad$ = 512
data_type$ = 560
t$ = 568
v_min$ = 576
v_max$ = 584
is_logarithmic$ = 592
logarithmic_zero_epsilon$ = 600
zero_deadzone_halfsize$ = 608
??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z PROC ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2713
$LN73:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2714
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jne	SHORT $LN2@ScaleValue
; Line 2715
	mov	rax, QWORD PTR v_min$[rbp]
	jmp	$LN1@ScaleValue
$LN2@ScaleValue:
; Line 2716
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN25@ScaleValue
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN25@ScaleValue
	mov	BYTE PTR tv67[rbp], 0
	jmp	SHORT $LN26@ScaleValue
$LN25@ScaleValue:
	mov	BYTE PTR tv67[rbp], 1
$LN26@ScaleValue:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2719
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleValue
; Line 2722
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR t$[rbp]
	jb	SHORT $LN5@ScaleValue
; Line 2723
	mov	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR result$[rbp], rax
	jmp	$LN6@ScaleValue
$LN5@ScaleValue:
; Line 2724
	movss	xmm0, DWORD PTR t$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN7@ScaleValue
; Line 2725
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR result$[rbp], rax
	jmp	$LN8@ScaleValue
$LN7@ScaleValue:
; Line 2728
	mov	rax, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR v_max$[rbp], rax
	jae	SHORT $LN27@ScaleValue
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN28@ScaleValue
$LN27@ScaleValue:
	mov	DWORD PTR tv73[rbp], 0
$LN28@ScaleValue:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR flipped$5[rbp], al
; Line 2731
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN71@ScaleValue
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN72@ScaleValue
$LN71@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN72@ScaleValue:
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN31@ScaleValue
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN69@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN70@ScaleValue
$LN69@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN70@ScaleValue:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN30@ScaleValue
$LN29@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv83[rbp], xmm0
$LN30@ScaleValue:
	cvtss2sd xmm0, DWORD PTR tv83[rbp]
	movsd	QWORD PTR tv86[rbp], xmm0
	jmp	SHORT $LN32@ScaleValue
$LN31@ScaleValue:
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN67@ScaleValue
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN68@ScaleValue
$LN67@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN68@ScaleValue:
	movsd	QWORD PTR tv86[rbp], xmm0
$LN32@ScaleValue:
	movsd	xmm0, QWORD PTR tv86[rbp]
	movsd	QWORD PTR v_min_fudged$6[rbp], xmm0
; Line 2732
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN65@ScaleValue
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN66@ScaleValue
$LN65@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN66@ScaleValue:
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN35@ScaleValue
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN63@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN64@ScaleValue
$LN63@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN64@ScaleValue:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN33@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv95[rbp], xmm0
	jmp	SHORT $LN34@ScaleValue
$LN33@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv95[rbp], xmm0
$LN34@ScaleValue:
	cvtss2sd xmm0, DWORD PTR tv95[rbp]
	movsd	QWORD PTR tv130[rbp], xmm0
	jmp	SHORT $LN36@ScaleValue
$LN35@ScaleValue:
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN61@ScaleValue
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN62@ScaleValue
$LN61@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN62@ScaleValue:
	movsd	QWORD PTR tv130[rbp], xmm0
$LN36@ScaleValue:
	movsd	xmm0, QWORD PTR tv130[rbp]
	movsd	QWORD PTR v_max_fudged$7[rbp], xmm0
; Line 2734
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN9@ScaleValue
; Line 2735
	lea	rdx, QWORD PTR v_max_fudged$7[rbp]
	lea	rcx, QWORD PTR v_min_fudged$6[rbp]
	call	??$ImSwap@N@@YAXAEAN0@Z			; ImSwap<double>
$LN9@ScaleValue:
; Line 2738
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN59@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN60@ScaleValue
$LN59@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN60@ScaleValue:
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN10@ScaleValue
	jne	SHORT $LN10@ScaleValue
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN57@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN58@ScaleValue
$LN57@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN58@ScaleValue:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@ScaleValue
; Line 2739
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_max_fudged$7[rbp], xmm0
$LN10@ScaleValue:
; Line 2741
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN37@ScaleValue
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv144[rbp], xmm0
	jmp	SHORT $LN38@ScaleValue
$LN37@ScaleValue:
	movss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv144[rbp], xmm0
$LN38@ScaleValue:
	movss	xmm0, DWORD PTR tv144[rbp]
	movss	DWORD PTR t_with_flip$8[rbp], xmm0
; Line 2743
	mov	rax, QWORD PTR v_min$[rbp]
	imul	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN55@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN56@ScaleValue
$LN55@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN56@ScaleValue:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN11@ScaleValue
; Line 2745
	mov	rdx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	call	??$ImMin@_K@@YA_K_K0@Z			; ImMin<unsigned __int64>
	test	rax, rax
	jl	SHORT $LN53@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN54@ScaleValue
$LN53@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN54@ScaleValue:
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv152[rbp], xmm0
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN51@ScaleValue
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN52@ScaleValue
$LN51@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN52@ScaleValue:
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN49@ScaleValue
	cvtsi2ss xmm2, rax
	jmp	SHORT $LN50@ScaleValue
$LN49@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm3, rcx
	addss	xmm3, xmm3
	movaps	xmm2, xmm3
$LN50@ScaleValue:
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR tv152[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_point_center$9[rbp], xmm0
; Line 2746
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$10[rbp], xmm0
; Line 2747
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$11[rbp], xmm0
; Line 2748
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	comiss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	jb	SHORT $LN13@ScaleValue
	movss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jb	SHORT $LN13@ScaleValue
; Line 2749
	mov	QWORD PTR result$[rbp], 0
	jmp	$LN14@ScaleValue
$LN13@ScaleValue:
; Line 2750
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jbe	$LN15@ScaleValue
; Line 2751
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	QWORD PTR tv164[rbp], xmm0
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	divss	xmm1, DWORD PTR zero_point_snap_L$10[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movsd	xmm2, QWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm3, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv164[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN48@ScaleValue
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN48@ScaleValue
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN48@ScaleValue:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR result$[rbp], rax
	jmp	$LN16@ScaleValue
$LN15@ScaleValue:
; Line 2753
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	QWORD PTR tv179[rbp], xmm0
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	subss	xmm1, DWORD PTR zero_point_snap_R$11[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, DWORD PTR zero_point_snap_R$11[rbp]
	divss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm2, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm3, QWORD PTR v_max_fudged$7[rbp]
	divsd	xmm3, xmm2
	movaps	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv179[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN47@ScaleValue
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN47@ScaleValue
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN47@ScaleValue:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR result$[rbp], rax
$LN16@ScaleValue:
$LN14@ScaleValue:
; Line 2754
	jmp	$LN12@ScaleValue
$LN11@ScaleValue:
; Line 2755
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN45@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN46@ScaleValue
$LN45@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN46@ScaleValue:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN19@ScaleValue
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN43@ScaleValue
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN44@ScaleValue
$LN43@ScaleValue:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN44@ScaleValue:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN17@ScaleValue
$LN19@ScaleValue:
; Line 2756
	movsd	xmm0, QWORD PTR v_max_fudged$7[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv197[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR t_with_flip$8[rbp]
	cvtss2sd xmm1, xmm1
	movsd	xmm2, QWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm3, QWORD PTR v_max_fudged$7[rbp]
	xorps	xmm3, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv197[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN42@ScaleValue
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN42@ScaleValue
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN42@ScaleValue:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR result$[rbp], rax
	jmp	SHORT $LN18@ScaleValue
$LN17@ScaleValue:
; Line 2758
	cvtss2sd xmm0, DWORD PTR t_with_flip$8[rbp]
	movsd	xmm1, QWORD PTR v_max_fudged$7[rbp]
	divsd	xmm1, QWORD PTR v_min_fudged$6[rbp]
	movsd	QWORD PTR tv214[rbp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv214[rbp]
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR v_min_fudged$6[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xor	eax, eax
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jb	SHORT $LN41@ScaleValue
	subsd	xmm0, QWORD PTR __real@43e0000000000000
	comisd	xmm0, QWORD PTR __real@43e0000000000000
	jae	SHORT $LN41@ScaleValue
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN41@ScaleValue:
	cvttsd2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR result$[rbp], rax
$LN18@ScaleValue:
$LN12@ScaleValue:
$LN8@ScaleValue:
$LN6@ScaleValue:
; Line 2760
	jmp	$LN4@ScaleValue
$LN3@ScaleValue:
; Line 2764
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN20@ScaleValue
; Line 2766
	movss	xmm2, DWORD PTR t$[rbp]
	mov	rdx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	call	??$ImLerp@_K@@YA_K_K0M@Z		; ImLerp<unsigned __int64>
	mov	QWORD PTR result$[rbp], rax
; Line 2767
	jmp	$LN21@ScaleValue
$LN20@ScaleValue:
; Line 2774
	cvtss2sd xmm0, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	$LN22@ScaleValue
; Line 2776
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	mulss	xmm0, DWORD PTR t$[rbp]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_new_off_f$12[rbp], xmm0
; Line 2777
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jbe	SHORT $LN39@ScaleValue
	movsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR tv232[rbp], xmm0
	jmp	SHORT $LN40@ScaleValue
$LN39@ScaleValue:
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv232[rbp], xmm0
$LN40@ScaleValue:
	movsd	xmm0, QWORD PTR v_new_off_f$12[rbp]
	addsd	xmm0, QWORD PTR tv232[rbp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR v_min$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR result$[rbp], rax
; Line 2778
	jmp	SHORT $LN23@ScaleValue
$LN22@ScaleValue:
; Line 2781
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR result$[rbp], rax
$LN23@ScaleValue:
$LN21@ScaleValue:
$LN4@ScaleValue:
; Line 2786
	mov	rax, QWORD PTR result$[rbp]
$LN1@ScaleValue:
; Line 2787
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z ENDP ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z
_TEXT	SEGMENT
v_clamped$ = 8
flipped$1 = 36
v_min_fudged$2 = 72
v_max_fudged$3 = 104
result$4 = 132
zero_point_center$5 = 164
zero_point_snap_L$6 = 196
zero_point_snap_R$7 = 228
tv234 = 436
tv136 = 436
tv92 = 436
tv78 = 436
tv221 = 440
tv206 = 440
tv187 = 440
tv171 = 440
tv139 = 440
tv95 = 440
tv74 = 440
data_type$ = 480
v$ = 488
v_min$ = 496
v_max$ = 504
is_logarithmic$ = 512
logarithmic_zero_epsilon$ = 520
zero_deadzone_halfsize$ = 528
??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z PROC ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2657
$LN84:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2658
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jne	SHORT $LN2@ScaleRatio
; Line 2659
	xorps	xmm0, xmm0
	jmp	$LN1@ScaleRatio
$LN2@ScaleRatio:
; Line 2662
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jae	SHORT $LN22@ScaleRatio
	mov	r8, QWORD PTR v_max$[rbp]
	mov	rdx, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	??$ImClamp@_K@@YA_K_K00@Z		; ImClamp<unsigned __int64>
	mov	QWORD PTR tv74[rbp], rax
	jmp	SHORT $LN23@ScaleRatio
$LN22@ScaleRatio:
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	??$ImClamp@_K@@YA_K_K00@Z		; ImClamp<unsigned __int64>
	mov	QWORD PTR tv74[rbp], rax
$LN23@ScaleRatio:
	mov	rax, QWORD PTR tv74[rbp]
	mov	QWORD PTR v_clamped$[rbp], rax
; Line 2663
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleRatio
; Line 2665
	mov	rax, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR v_max$[rbp], rax
	jae	SHORT $LN24@ScaleRatio
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN25@ScaleRatio
$LN24@ScaleRatio:
	mov	DWORD PTR tv78[rbp], 0
$LN25@ScaleRatio:
	movzx	eax, BYTE PTR tv78[rbp]
	mov	BYTE PTR flipped$1[rbp], al
; Line 2667
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN4@ScaleRatio
; Line 2668
	lea	rdx, QWORD PTR v_max$[rbp]
	lea	rcx, QWORD PTR v_min$[rbp]
	call	??$ImSwap@_K@@YAXAEA_K0@Z		; ImSwap<unsigned __int64>
$LN4@ScaleRatio:
; Line 2671
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN82@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN83@ScaleRatio
$LN82@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN83@ScaleRatio:
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN28@ScaleRatio
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN80@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN81@ScaleRatio
$LN80@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN81@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN27@ScaleRatio
$LN26@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv92[rbp], xmm0
$LN27@ScaleRatio:
	cvtss2sd xmm0, DWORD PTR tv92[rbp]
	movsd	QWORD PTR tv95[rbp], xmm0
	jmp	SHORT $LN29@ScaleRatio
$LN28@ScaleRatio:
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN78@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN79@ScaleRatio
$LN78@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN79@ScaleRatio:
	movsd	QWORD PTR tv95[rbp], xmm0
$LN29@ScaleRatio:
	movsd	xmm0, QWORD PTR tv95[rbp]
	movsd	QWORD PTR v_min_fudged$2[rbp], xmm0
; Line 2672
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN76@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN77@ScaleRatio
$LN76@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN77@ScaleRatio:
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN32@ScaleRatio
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN74@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN75@ScaleRatio
$LN74@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN75@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv136[rbp], xmm0
	jmp	SHORT $LN31@ScaleRatio
$LN30@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv136[rbp], xmm0
$LN31@ScaleRatio:
	cvtss2sd xmm0, DWORD PTR tv136[rbp]
	movsd	QWORD PTR tv139[rbp], xmm0
	jmp	SHORT $LN33@ScaleRatio
$LN32@ScaleRatio:
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN72@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN73@ScaleRatio
$LN72@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN73@ScaleRatio:
	movsd	QWORD PTR tv139[rbp], xmm0
$LN33@ScaleRatio:
	movsd	xmm0, QWORD PTR tv139[rbp]
	movsd	QWORD PTR v_max_fudged$3[rbp], xmm0
; Line 2675
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN70@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN71@ScaleRatio
$LN70@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN71@ScaleRatio:
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@ScaleRatio
	jne	SHORT $LN5@ScaleRatio
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN68@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN69@ScaleRatio
$LN68@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN69@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ScaleRatio
; Line 2676
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_min_fudged$2[rbp], xmm0
	jmp	$LN6@ScaleRatio
$LN5@ScaleRatio:
; Line 2677
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN66@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN67@ScaleRatio
$LN66@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN67@ScaleRatio:
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN7@ScaleRatio
	jne	SHORT $LN7@ScaleRatio
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN64@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN65@ScaleRatio
$LN64@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN65@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@ScaleRatio
; Line 2678
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_max_fudged$3[rbp], xmm0
$LN7@ScaleRatio:
$LN6@ScaleRatio:
; Line 2682
	mov	rax, QWORD PTR v_clamped$[rbp]
	test	rax, rax
	jl	SHORT $LN62@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN63@ScaleRatio
$LN62@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN63@ScaleRatio:
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	comisd	xmm1, xmm0
	jb	SHORT $LN8@ScaleRatio
; Line 2683
	xorps	xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN9@ScaleRatio
$LN8@ScaleRatio:
; Line 2684
	mov	rax, QWORD PTR v_clamped$[rbp]
	test	rax, rax
	jl	SHORT $LN60@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN61@ScaleRatio
$LN60@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN61@ScaleRatio:
	comisd	xmm0, QWORD PTR v_max_fudged$3[rbp]
	jb	SHORT $LN10@ScaleRatio
; Line 2685
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN11@ScaleRatio
$LN10@ScaleRatio:
; Line 2686
	mov	rax, QWORD PTR v_min$[rbp]
	imul	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN58@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN59@ScaleRatio
$LN58@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN59@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN12@ScaleRatio
; Line 2688
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN56@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN57@ScaleRatio
$LN56@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN57@ScaleRatio:
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN54@ScaleRatio
	cvtsi2ss xmm1, rax
	jmp	SHORT $LN55@ScaleRatio
$LN54@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm2, rcx
	addss	xmm2, xmm2
	movaps	xmm1, xmm2
$LN55@ScaleRatio:
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN52@ScaleRatio
	cvtsi2ss xmm2, rax
	jmp	SHORT $LN53@ScaleRatio
$LN52@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm3, rcx
	addss	xmm3, xmm3
	movaps	xmm2, xmm3
$LN53@ScaleRatio:
	subss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR zero_point_center$5[rbp], xmm0
; Line 2689
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$6[rbp], xmm0
; Line 2690
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$7[rbp], xmm0
; Line 2691
	mov	rax, QWORD PTR v$[rbp]
	test	rax, rax
	jl	SHORT $LN50@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN51@ScaleRatio
$LN50@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN51@ScaleRatio:
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@ScaleRatio
	jne	SHORT $LN14@ScaleRatio
; Line 2692
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN15@ScaleRatio
$LN14@ScaleRatio:
; Line 2693
	mov	rax, QWORD PTR v$[rbp]
	test	rax, rax
	jl	SHORT $LN48@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN49@ScaleRatio
$LN48@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN49@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN16@ScaleRatio
; Line 2694
	mov	rax, QWORD PTR v_clamped$[rbp]
	test	rax, rax
	jl	SHORT $LN46@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN47@ScaleRatio
$LN46@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN47@ScaleRatio:
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv171[rbp], xmm0
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm2, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv171[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR zero_point_snap_L$6[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN17@ScaleRatio
$LN16@ScaleRatio:
; Line 2696
	mov	rax, QWORD PTR v_clamped$[rbp]
	test	rax, rax
	jl	SHORT $LN44@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN45@ScaleRatio
$LN44@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN45@ScaleRatio:
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv187[rbp], xmm0
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm2, QWORD PTR v_max_fudged$3[rbp]
	divsd	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv187[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN17@ScaleRatio:
$LN15@ScaleRatio:
; Line 2697
	jmp	$LN13@ScaleRatio
$LN12@ScaleRatio:
; Line 2698
	mov	rax, QWORD PTR v_min$[rbp]
	test	rax, rax
	jl	SHORT $LN42@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN43@ScaleRatio
$LN42@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN43@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN20@ScaleRatio
	mov	rax, QWORD PTR v_max$[rbp]
	test	rax, rax
	jl	SHORT $LN40@ScaleRatio
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN41@ScaleRatio
$LN40@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN41@ScaleRatio:
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN18@ScaleRatio
$LN20@ScaleRatio:
; Line 2699
	mov	rax, QWORD PTR v_clamped$[rbp]
	test	rax, rax
	jl	SHORT $LN38@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN39@ScaleRatio
$LN38@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN39@ScaleRatio:
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR v_max_fudged$3[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv206[rbp], xmm0
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm2, QWORD PTR v_max_fudged$3[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv206[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN19@ScaleRatio
$LN18@ScaleRatio:
; Line 2701
	mov	rax, QWORD PTR v_clamped$[rbp]
	test	rax, rax
	jl	SHORT $LN36@ScaleRatio
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN37@ScaleRatio
$LN36@ScaleRatio:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN37@ScaleRatio:
	divsd	xmm0, QWORD PTR v_min_fudged$2[rbp]
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv221[rbp], xmm0
	movsd	xmm1, QWORD PTR v_max_fudged$3[rbp]
	divsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv221[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
$LN19@ScaleRatio:
$LN13@ScaleRatio:
$LN11@ScaleRatio:
$LN9@ScaleRatio:
; Line 2703
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN34@ScaleRatio
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv234[rbp], xmm0
	jmp	SHORT $LN35@ScaleRatio
$LN34@ScaleRatio:
	movss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv234[rbp], xmm0
$LN35@ScaleRatio:
	movss	xmm0, DWORD PTR tv234[rbp]
	jmp	SHORT $LN1@ScaleRatio
$LN3@ScaleRatio:
; Line 2707
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_clamped$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2sd xmm0, rax
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2sd xmm1, rax
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
$LN1@ScaleRatio:
; Line 2708
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ENDP ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_sanitized$ = 40
v_str$ = 112
p$ = 200
__$ArrayPad$ = 408
format$ = 448
data_type$ = 456
v$ = 464
??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z PROC ; ImGui::RoundScalarWithFormatT<__int64,__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2180
$LN10:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2181
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2182
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@RoundScala
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@RoundScala
$LN5@RoundScala:
; Line 2183
	mov	rax, QWORD PTR v$[rbp]
	jmp	$LN1@RoundScala
$LN4@RoundScala:
; Line 2187
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_sanitized$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?SanitizeFormatString@@YAXPEBDPEAD_K@Z	; SanitizeFormatString
; Line 2188
	lea	rax, QWORD PTR fmt_sanitized$[rbp]
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2192
	mov	r9, QWORD PTR v$[rbp]
	mov	r8, QWORD PTR fmt_start$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR v_str$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2193
	lea	rax, QWORD PTR v_str$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@RoundScala:
; Line 2194
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@RoundScala
; Line 2195
	mov	rax, QWORD PTR p$[rbp]
	inc	rax
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN2@RoundScala
$LN3@RoundScala:
; Line 2196
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@RoundScala
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN6@RoundScala
$LN8@RoundScala:
; Line 2197
	mov	rcx, QWORD PTR p$[rbp]
	call	QWORD PTR __imp_atof
	cvttsd2si rax, xmm0
	mov	QWORD PTR v$[rbp], rax
	jmp	SHORT $LN7@RoundScala
$LN6@RoundScala:
; Line 2199
	lea	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	??$ImAtoi@_J@@YAPEBDPEBDPEA_J@Z		; ImAtoi<__int64>
$LN7@RoundScala:
; Line 2200
	mov	rax, QWORD PTR v$[rbp]
$LN1@RoundScala:
; Line 2201
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z ENDP ; ImGui::RoundScalarWithFormatT<__int64,__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z
_TEXT	SEGMENT
is_floating_point$ = 4
result$ = 40
flipped$5 = 68
v_min_fudged$6 = 104
v_max_fudged$7 = 136
t_with_flip$8 = 164
zero_point_center$9 = 196
zero_point_snap_L$10 = 228
zero_point_snap_R$11 = 260
v_new_off_f$12 = 296
tv152 = 500
tv144 = 500
tv95 = 500
tv83 = 500
tv73 = 500
tv67 = 500
tv232 = 504
tv214 = 504
tv197 = 504
tv179 = 504
tv164 = 504
tv130 = 504
tv86 = 504
__$ArrayPad$ = 512
data_type$ = 560
t$ = 568
v_min$ = 576
v_max$ = 584
is_logarithmic$ = 592
logarithmic_zero_epsilon$ = 600
zero_deadzone_halfsize$ = 608
??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z PROC ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2713
$LN41:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2714
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jne	SHORT $LN2@ScaleValue
; Line 2715
	mov	rax, QWORD PTR v_min$[rbp]
	jmp	$LN1@ScaleValue
$LN2@ScaleValue:
; Line 2716
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN25@ScaleValue
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN25@ScaleValue
	mov	BYTE PTR tv67[rbp], 0
	jmp	SHORT $LN26@ScaleValue
$LN25@ScaleValue:
	mov	BYTE PTR tv67[rbp], 1
$LN26@ScaleValue:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2719
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleValue
; Line 2722
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR t$[rbp]
	jb	SHORT $LN5@ScaleValue
; Line 2723
	mov	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR result$[rbp], rax
	jmp	$LN6@ScaleValue
$LN5@ScaleValue:
; Line 2724
	movss	xmm0, DWORD PTR t$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN7@ScaleValue
; Line 2725
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR result$[rbp], rax
	jmp	$LN8@ScaleValue
$LN7@ScaleValue:
; Line 2728
	mov	rax, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR v_max$[rbp], rax
	jge	SHORT $LN27@ScaleValue
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN28@ScaleValue
$LN27@ScaleValue:
	mov	DWORD PTR tv73[rbp], 0
$LN28@ScaleValue:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR flipped$5[rbp], al
; Line 2731
	cvtsi2sd xmm0, QWORD PTR v_min$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN31@ScaleValue
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN30@ScaleValue
$LN29@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv83[rbp], xmm0
$LN30@ScaleValue:
	cvtss2sd xmm0, DWORD PTR tv83[rbp]
	movsd	QWORD PTR tv86[rbp], xmm0
	jmp	SHORT $LN32@ScaleValue
$LN31@ScaleValue:
	cvtsi2sd xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR tv86[rbp], xmm0
$LN32@ScaleValue:
	movsd	xmm0, QWORD PTR tv86[rbp]
	movsd	QWORD PTR v_min_fudged$6[rbp], xmm0
; Line 2732
	cvtsi2sd xmm0, QWORD PTR v_max$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN35@ScaleValue
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN33@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv95[rbp], xmm0
	jmp	SHORT $LN34@ScaleValue
$LN33@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv95[rbp], xmm0
$LN34@ScaleValue:
	cvtss2sd xmm0, DWORD PTR tv95[rbp]
	movsd	QWORD PTR tv130[rbp], xmm0
	jmp	SHORT $LN36@ScaleValue
$LN35@ScaleValue:
	cvtsi2sd xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR tv130[rbp], xmm0
$LN36@ScaleValue:
	movsd	xmm0, QWORD PTR tv130[rbp]
	movsd	QWORD PTR v_max_fudged$7[rbp], xmm0
; Line 2734
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN9@ScaleValue
; Line 2735
	lea	rdx, QWORD PTR v_max_fudged$7[rbp]
	lea	rcx, QWORD PTR v_min_fudged$6[rbp]
	call	??$ImSwap@N@@YAXAEAN0@Z			; ImSwap<double>
$LN9@ScaleValue:
; Line 2738
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN10@ScaleValue
	jne	SHORT $LN10@ScaleValue
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@ScaleValue
; Line 2739
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_max_fudged$7[rbp], xmm0
$LN10@ScaleValue:
; Line 2741
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN37@ScaleValue
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv144[rbp], xmm0
	jmp	SHORT $LN38@ScaleValue
$LN37@ScaleValue:
	movss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv144[rbp], xmm0
$LN38@ScaleValue:
	movss	xmm0, DWORD PTR tv144[rbp]
	movss	DWORD PTR t_with_flip$8[rbp], xmm0
; Line 2743
	mov	rax, QWORD PTR v_min$[rbp]
	imul	rax, QWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN11@ScaleValue
; Line 2745
	mov	rdx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	call	??$ImMin@_J@@YA_J_J0@Z			; ImMin<__int64>
	cvtsi2ss xmm0, rax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv152[rbp], xmm0
	cvtsi2ss xmm1, QWORD PTR v_max$[rbp]
	cvtsi2ss xmm2, QWORD PTR v_min$[rbp]
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR tv152[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_point_center$9[rbp], xmm0
; Line 2746
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$10[rbp], xmm0
; Line 2747
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$11[rbp], xmm0
; Line 2748
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	comiss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	jb	SHORT $LN13@ScaleValue
	movss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jb	SHORT $LN13@ScaleValue
; Line 2749
	mov	QWORD PTR result$[rbp], 0
	jmp	$LN14@ScaleValue
$LN13@ScaleValue:
; Line 2750
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jbe	SHORT $LN15@ScaleValue
; Line 2751
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	QWORD PTR tv164[rbp], xmm0
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	divss	xmm1, DWORD PTR zero_point_snap_L$10[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	movsd	xmm2, QWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm3, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv164[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvttsd2si rax, xmm0
	mov	QWORD PTR result$[rbp], rax
	jmp	SHORT $LN16@ScaleValue
$LN15@ScaleValue:
; Line 2753
	cvtss2sd xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	QWORD PTR tv179[rbp], xmm0
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	subss	xmm1, DWORD PTR zero_point_snap_R$11[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, DWORD PTR zero_point_snap_R$11[rbp]
	divss	xmm1, xmm2
	cvtss2sd xmm1, xmm1
	cvtss2sd xmm2, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm3, QWORD PTR v_max_fudged$7[rbp]
	divsd	xmm3, xmm2
	movaps	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv179[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttsd2si rax, xmm0
	mov	QWORD PTR result$[rbp], rax
$LN16@ScaleValue:
$LN14@ScaleValue:
; Line 2754
	jmp	$LN12@ScaleValue
$LN11@ScaleValue:
; Line 2755
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN19@ScaleValue
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN17@ScaleValue
$LN19@ScaleValue:
; Line 2756
	movsd	xmm0, QWORD PTR v_max_fudged$7[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR tv197[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR t_with_flip$8[rbp]
	cvtss2sd xmm1, xmm1
	movsd	xmm2, QWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm3, QWORD PTR v_max_fudged$7[rbp]
	xorps	xmm3, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR tv197[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvttsd2si rax, xmm0
	mov	QWORD PTR result$[rbp], rax
	jmp	SHORT $LN18@ScaleValue
$LN17@ScaleValue:
; Line 2758
	cvtss2sd xmm0, DWORD PTR t_with_flip$8[rbp]
	movsd	xmm1, QWORD PTR v_max_fudged$7[rbp]
	divsd	xmm1, QWORD PTR v_min_fudged$6[rbp]
	movsd	QWORD PTR tv214[rbp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv214[rbp]
	call	?ImPow@@YANNN@Z				; ImPow
	movsd	xmm1, QWORD PTR v_min_fudged$6[rbp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttsd2si rax, xmm0
	mov	QWORD PTR result$[rbp], rax
$LN18@ScaleValue:
$LN12@ScaleValue:
$LN8@ScaleValue:
$LN6@ScaleValue:
; Line 2760
	jmp	$LN4@ScaleValue
$LN3@ScaleValue:
; Line 2764
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN20@ScaleValue
; Line 2766
	movss	xmm2, DWORD PTR t$[rbp]
	mov	rdx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	call	??$ImLerp@_J@@YA_J_J0M@Z		; ImLerp<__int64>
	mov	QWORD PTR result$[rbp], rax
; Line 2767
	jmp	$LN21@ScaleValue
$LN20@ScaleValue:
; Line 2774
	cvtss2sd xmm0, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	$LN22@ScaleValue
; Line 2776
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	mulss	xmm0, DWORD PTR t$[rbp]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_new_off_f$12[rbp], xmm0
; Line 2777
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jle	SHORT $LN39@ScaleValue
	movsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR tv232[rbp], xmm0
	jmp	SHORT $LN40@ScaleValue
$LN39@ScaleValue:
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv232[rbp], xmm0
$LN40@ScaleValue:
	movsd	xmm0, QWORD PTR v_new_off_f$12[rbp]
	addsd	xmm0, QWORD PTR tv232[rbp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR v_min$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR result$[rbp], rax
; Line 2778
	jmp	SHORT $LN23@ScaleValue
$LN22@ScaleValue:
; Line 2781
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR result$[rbp], rax
$LN23@ScaleValue:
$LN21@ScaleValue:
$LN4@ScaleValue:
; Line 2786
	mov	rax, QWORD PTR result$[rbp]
$LN1@ScaleValue:
; Line 2787
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z ENDP ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z
_TEXT	SEGMENT
v_clamped$ = 8
flipped$1 = 36
v_min_fudged$2 = 72
v_max_fudged$3 = 104
result$4 = 132
zero_point_center$5 = 164
zero_point_snap_L$6 = 196
zero_point_snap_R$7 = 228
tv234 = 436
tv136 = 436
tv92 = 436
tv78 = 436
tv221 = 440
tv206 = 440
tv187 = 440
tv171 = 440
tv139 = 440
tv95 = 440
tv74 = 440
data_type$ = 480
v$ = 488
v_min$ = 496
v_max$ = 504
is_logarithmic$ = 512
logarithmic_zero_epsilon$ = 520
zero_deadzone_halfsize$ = 528
??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z PROC ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2657
$LN36:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2658
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jne	SHORT $LN2@ScaleRatio
; Line 2659
	xorps	xmm0, xmm0
	jmp	$LN1@ScaleRatio
$LN2@ScaleRatio:
; Line 2662
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jge	SHORT $LN22@ScaleRatio
	mov	r8, QWORD PTR v_max$[rbp]
	mov	rdx, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	??$ImClamp@_J@@YA_J_J00@Z		; ImClamp<__int64>
	mov	QWORD PTR tv74[rbp], rax
	jmp	SHORT $LN23@ScaleRatio
$LN22@ScaleRatio:
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	call	??$ImClamp@_J@@YA_J_J00@Z		; ImClamp<__int64>
	mov	QWORD PTR tv74[rbp], rax
$LN23@ScaleRatio:
	mov	rax, QWORD PTR tv74[rbp]
	mov	QWORD PTR v_clamped$[rbp], rax
; Line 2663
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleRatio
; Line 2665
	mov	rax, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR v_max$[rbp], rax
	jge	SHORT $LN24@ScaleRatio
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN25@ScaleRatio
$LN24@ScaleRatio:
	mov	DWORD PTR tv78[rbp], 0
$LN25@ScaleRatio:
	movzx	eax, BYTE PTR tv78[rbp]
	mov	BYTE PTR flipped$1[rbp], al
; Line 2667
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN4@ScaleRatio
; Line 2668
	lea	rdx, QWORD PTR v_max$[rbp]
	lea	rcx, QWORD PTR v_min$[rbp]
	call	??$ImSwap@_J@@YAXAEA_J0@Z		; ImSwap<__int64>
$LN4@ScaleRatio:
; Line 2671
	cvtsi2sd xmm0, QWORD PTR v_min$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN28@ScaleRatio
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN27@ScaleRatio
$LN26@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv92[rbp], xmm0
$LN27@ScaleRatio:
	cvtss2sd xmm0, DWORD PTR tv92[rbp]
	movsd	QWORD PTR tv95[rbp], xmm0
	jmp	SHORT $LN29@ScaleRatio
$LN28@ScaleRatio:
	cvtsi2sd xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR tv95[rbp], xmm0
$LN29@ScaleRatio:
	movsd	xmm0, QWORD PTR tv95[rbp]
	movsd	QWORD PTR v_min_fudged$2[rbp], xmm0
; Line 2672
	cvtsi2sd xmm0, QWORD PTR v_max$[rbp]
	call	?ImAbs@@YANN@Z				; ImAbs
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN32@ScaleRatio
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv136[rbp], xmm0
	jmp	SHORT $LN31@ScaleRatio
$LN30@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv136[rbp], xmm0
$LN31@ScaleRatio:
	cvtss2sd xmm0, DWORD PTR tv136[rbp]
	movsd	QWORD PTR tv139[rbp], xmm0
	jmp	SHORT $LN33@ScaleRatio
$LN32@ScaleRatio:
	cvtsi2sd xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR tv139[rbp], xmm0
$LN33@ScaleRatio:
	movsd	xmm0, QWORD PTR tv139[rbp]
	movsd	QWORD PTR v_max_fudged$3[rbp], xmm0
; Line 2675
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@ScaleRatio
	jne	SHORT $LN5@ScaleRatio
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ScaleRatio
; Line 2676
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_min_fudged$2[rbp], xmm0
	jmp	SHORT $LN6@ScaleRatio
$LN5@ScaleRatio:
; Line 2677
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN7@ScaleRatio
	jne	SHORT $LN7@ScaleRatio
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@ScaleRatio
; Line 2678
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR v_max_fudged$3[rbp], xmm0
$LN7@ScaleRatio:
$LN6@ScaleRatio:
; Line 2682
	cvtsi2sd xmm0, QWORD PTR v_clamped$[rbp]
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	comisd	xmm1, xmm0
	jb	SHORT $LN8@ScaleRatio
; Line 2683
	xorps	xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN9@ScaleRatio
$LN8@ScaleRatio:
; Line 2684
	cvtsi2sd xmm0, QWORD PTR v_clamped$[rbp]
	comisd	xmm0, QWORD PTR v_max_fudged$3[rbp]
	jb	SHORT $LN10@ScaleRatio
; Line 2685
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN11@ScaleRatio
$LN10@ScaleRatio:
; Line 2686
	mov	rax, QWORD PTR v_min$[rbp]
	imul	rax, QWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN12@ScaleRatio
; Line 2688
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtsi2ss xmm1, QWORD PTR v_max$[rbp]
	cvtsi2ss xmm2, QWORD PTR v_min$[rbp]
	subss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR zero_point_center$5[rbp], xmm0
; Line 2689
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$6[rbp], xmm0
; Line 2690
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$7[rbp], xmm0
; Line 2691
	cvtsi2ss xmm0, QWORD PTR v$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@ScaleRatio
	jne	SHORT $LN14@ScaleRatio
; Line 2692
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN15@ScaleRatio
$LN14@ScaleRatio:
; Line 2693
	cvtsi2ss xmm0, QWORD PTR v$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN16@ScaleRatio
; Line 2694
	cvtsi2sd xmm0, QWORD PTR v_clamped$[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv171[rbp], xmm0
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	cvtss2sd xmm2, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv171[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR zero_point_snap_L$6[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN17@ScaleRatio
$LN16@ScaleRatio:
; Line 2696
	cvtsi2sd xmm0, QWORD PTR v_clamped$[rbp]
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv187[rbp], xmm0
	cvtss2sd xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movsd	xmm2, QWORD PTR v_max_fudged$3[rbp]
	divsd	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv187[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN17@ScaleRatio:
$LN15@ScaleRatio:
; Line 2697
	jmp	$LN13@ScaleRatio
$LN12@ScaleRatio:
; Line 2698
	cvtsi2ss xmm0, QWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN20@ScaleRatio
	cvtsi2ss xmm0, QWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@ScaleRatio
$LN20@ScaleRatio:
; Line 2699
	cvtsi2sd xmm0, QWORD PTR v_clamped$[rbp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR v_max_fudged$3[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv206[rbp], xmm0
	movsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm2, QWORD PTR v_max_fudged$3[rbp]
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
	divsd	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv206[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN19@ScaleRatio
$LN18@ScaleRatio:
; Line 2701
	cvtsi2sd xmm0, QWORD PTR v_clamped$[rbp]
	divsd	xmm0, QWORD PTR v_min_fudged$2[rbp]
	call	?ImLog@@YANN@Z				; ImLog
	movsd	QWORD PTR tv221[rbp], xmm0
	movsd	xmm1, QWORD PTR v_max_fudged$3[rbp]
	divsd	xmm1, QWORD PTR v_min_fudged$2[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YANN@Z				; ImLog
	movsd	xmm1, QWORD PTR tv221[rbp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
$LN19@ScaleRatio:
$LN13@ScaleRatio:
$LN11@ScaleRatio:
$LN9@ScaleRatio:
; Line 2703
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN34@ScaleRatio
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv234[rbp], xmm0
	jmp	SHORT $LN35@ScaleRatio
$LN34@ScaleRatio:
	movss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv234[rbp], xmm0
$LN35@ScaleRatio:
	movss	xmm0, DWORD PTR tv234[rbp]
	jmp	SHORT $LN1@ScaleRatio
$LN3@ScaleRatio:
; Line 2707
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_clamped$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2sd xmm0, rax
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2sd xmm1, rax
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
$LN1@ScaleRatio:
; Line 2708
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ENDP ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_sanitized$ = 40
v_str$ = 112
p$ = 200
__$ArrayPad$ = 408
format$ = 448
data_type$ = 456
v$ = 464
??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z PROC	; ImGui::RoundScalarWithFormatT<unsigned int,int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2180
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2181
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2182
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@RoundScala
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@RoundScala
$LN5@RoundScala:
; Line 2183
	mov	eax, DWORD PTR v$[rbp]
	jmp	$LN1@RoundScala
$LN4@RoundScala:
; Line 2187
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_sanitized$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?SanitizeFormatString@@YAXPEBDPEAD_K@Z	; SanitizeFormatString
; Line 2188
	lea	rax, QWORD PTR fmt_sanitized$[rbp]
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2192
	mov	r9d, DWORD PTR v$[rbp]
	mov	r8, QWORD PTR fmt_start$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR v_str$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2193
	lea	rax, QWORD PTR v_str$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@RoundScala:
; Line 2194
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@RoundScala
; Line 2195
	mov	rax, QWORD PTR p$[rbp]
	inc	rax
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN2@RoundScala
$LN3@RoundScala:
; Line 2196
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@RoundScala
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN6@RoundScala
$LN8@RoundScala:
; Line 2197
	mov	rcx, QWORD PTR p$[rbp]
	call	QWORD PTR __imp_atof
	cvttsd2si rax, xmm0
	mov	DWORD PTR v$[rbp], eax
	jmp	SHORT $LN7@RoundScala
$LN6@RoundScala:
; Line 2199
	lea	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	??$ImAtoi@H@@YAPEBDPEBDPEAH@Z		; ImAtoi<int>
$LN7@RoundScala:
; Line 2200
	mov	eax, DWORD PTR v$[rbp]
$LN1@RoundScala:
; Line 2201
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z ENDP	; ImGui::RoundScalarWithFormatT<unsigned int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z
_TEXT	SEGMENT
is_floating_point$ = 4
result$ = 36
flipped$5 = 68
v_min_fudged$6 = 100
v_max_fudged$7 = 132
t_with_flip$8 = 164
zero_point_center$9 = 196
zero_point_snap_L$10 = 228
zero_point_snap_R$11 = 260
v_new_off_f$12 = 292
tv186 = 500
tv177 = 500
tv165 = 500
tv147 = 500
tv139 = 500
tv92 = 500
tv82 = 500
tv73 = 500
tv67 = 500
tv218 = 504
tv94 = 504
tv84 = 504
__$ArrayPad$ = 512
data_type$ = 560
t$ = 568
v_min$ = 576
v_max$ = 584
is_logarithmic$ = 592
logarithmic_zero_epsilon$ = 600
zero_deadzone_halfsize$ = 608
??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z PROC	; ImGui::ScaleValueFromRatioT<unsigned int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2713
$LN41:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2714
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jne	SHORT $LN2@ScaleValue
; Line 2715
	mov	eax, DWORD PTR v_min$[rbp]
	jmp	$LN1@ScaleValue
$LN2@ScaleValue:
; Line 2716
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN25@ScaleValue
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN25@ScaleValue
	mov	BYTE PTR tv67[rbp], 0
	jmp	SHORT $LN26@ScaleValue
$LN25@ScaleValue:
	mov	BYTE PTR tv67[rbp], 1
$LN26@ScaleValue:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2719
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleValue
; Line 2722
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR t$[rbp]
	jb	SHORT $LN5@ScaleValue
; Line 2723
	mov	eax, DWORD PTR v_min$[rbp]
	mov	DWORD PTR result$[rbp], eax
	jmp	$LN6@ScaleValue
$LN5@ScaleValue:
; Line 2724
	movss	xmm0, DWORD PTR t$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN7@ScaleValue
; Line 2725
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR result$[rbp], eax
	jmp	$LN8@ScaleValue
$LN7@ScaleValue:
; Line 2728
	mov	eax, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR v_max$[rbp], eax
	jae	SHORT $LN27@ScaleValue
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN28@ScaleValue
$LN27@ScaleValue:
	mov	DWORD PTR tv73[rbp], 0
$LN28@ScaleValue:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR flipped$5[rbp], al
; Line 2731
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN31@ScaleValue
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv82[rbp], xmm0
	jmp	SHORT $LN30@ScaleValue
$LN29@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv82[rbp], xmm0
$LN30@ScaleValue:
	movss	xmm0, DWORD PTR tv82[rbp]
	movss	DWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN32@ScaleValue
$LN31@ScaleValue:
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv84[rbp], xmm0
$LN32@ScaleValue:
	movss	xmm0, DWORD PTR tv84[rbp]
	movss	DWORD PTR v_min_fudged$6[rbp], xmm0
; Line 2732
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN35@ScaleValue
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN33@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN34@ScaleValue
$LN33@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv92[rbp], xmm0
$LN34@ScaleValue:
	movss	xmm0, DWORD PTR tv92[rbp]
	movss	DWORD PTR tv94[rbp], xmm0
	jmp	SHORT $LN36@ScaleValue
$LN35@ScaleValue:
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv94[rbp], xmm0
$LN36@ScaleValue:
	movss	xmm0, DWORD PTR tv94[rbp]
	movss	DWORD PTR v_max_fudged$7[rbp], xmm0
; Line 2734
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN9@ScaleValue
; Line 2735
	lea	rdx, QWORD PTR v_max_fudged$7[rbp]
	lea	rcx, QWORD PTR v_min_fudged$6[rbp]
	call	??$ImSwap@M@@YAXAEAM0@Z			; ImSwap<float>
$LN9@ScaleValue:
; Line 2738
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN10@ScaleValue
	jne	SHORT $LN10@ScaleValue
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@ScaleValue
; Line 2739
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_max_fudged$7[rbp], xmm0
$LN10@ScaleValue:
; Line 2741
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN37@ScaleValue
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv139[rbp], xmm0
	jmp	SHORT $LN38@ScaleValue
$LN37@ScaleValue:
	movss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv139[rbp], xmm0
$LN38@ScaleValue:
	movss	xmm0, DWORD PTR tv139[rbp]
	movss	DWORD PTR t_with_flip$8[rbp], xmm0
; Line 2743
	mov	eax, DWORD PTR v_min$[rbp]
	imul	eax, DWORD PTR v_max$[rbp]
	mov	eax, eax
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN11@ScaleValue
; Line 2745
	mov	edx, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	call	??$ImMin@I@@YAIII@Z			; ImMin<unsigned int>
	mov	eax, eax
	cvtsi2ss xmm0, rax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv147[rbp], xmm0
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm1, rax
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm2, rax
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR tv147[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_point_center$9[rbp], xmm0
; Line 2746
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$10[rbp], xmm0
; Line 2747
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$11[rbp], xmm0
; Line 2748
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	comiss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	jb	SHORT $LN13@ScaleValue
	movss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jb	SHORT $LN13@ScaleValue
; Line 2749
	mov	DWORD PTR result$[rbp], 0
	jmp	$LN14@ScaleValue
$LN13@ScaleValue:
; Line 2750
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jbe	SHORT $LN15@ScaleValue
; Line 2751
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	divss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR v_min_fudged$6[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv165[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv165[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si rax, xmm0
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN16@ScaleValue
$LN15@ScaleValue:
; Line 2753
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	subss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$11[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR v_max_fudged$7[rbp]
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv177[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv177[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si rax, xmm0
	mov	DWORD PTR result$[rbp], eax
$LN16@ScaleValue:
$LN14@ScaleValue:
; Line 2754
	jmp	$LN12@ScaleValue
$LN11@ScaleValue:
; Line 2755
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN19@ScaleValue
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN17@ScaleValue
$LN19@ScaleValue:
; Line 2756
	movss	xmm0, DWORD PTR v_max_fudged$7[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv186[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR t_with_flip$8[rbp]
	movss	xmm2, DWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm3, DWORD PTR v_max_fudged$7[rbp]
	xorps	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR tv186[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si rax, xmm0
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN18@ScaleValue
$LN17@ScaleValue:
; Line 2758
	movss	xmm0, DWORD PTR v_max_fudged$7[rbp]
	divss	xmm0, DWORD PTR v_min_fudged$6[rbp]
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR v_min_fudged$6[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si rax, xmm0
	mov	DWORD PTR result$[rbp], eax
$LN18@ScaleValue:
$LN12@ScaleValue:
$LN8@ScaleValue:
$LN6@ScaleValue:
; Line 2760
	jmp	$LN4@ScaleValue
$LN3@ScaleValue:
; Line 2764
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN20@ScaleValue
; Line 2766
	movss	xmm2, DWORD PTR t$[rbp]
	mov	edx, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	call	??$ImLerp@I@@YAIIIM@Z			; ImLerp<unsigned int>
	mov	DWORD PTR result$[rbp], eax
; Line 2767
	jmp	$LN21@ScaleValue
$LN20@ScaleValue:
; Line 2774
	cvtss2sd xmm0, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN22@ScaleValue
; Line 2776
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR v_new_off_f$12[rbp], xmm0
; Line 2777
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jbe	SHORT $LN39@ScaleValue
	movsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR tv218[rbp], xmm0
	jmp	SHORT $LN40@ScaleValue
$LN39@ScaleValue:
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv218[rbp], xmm0
$LN40@ScaleValue:
	cvtsd2ss xmm0, QWORD PTR tv218[rbp]
	movss	xmm1, DWORD PTR v_new_off_f$12[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR v_min$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR result$[rbp], eax
; Line 2778
	jmp	SHORT $LN23@ScaleValue
$LN22@ScaleValue:
; Line 2781
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR result$[rbp], eax
$LN23@ScaleValue:
$LN21@ScaleValue:
$LN4@ScaleValue:
; Line 2786
	mov	eax, DWORD PTR result$[rbp]
$LN1@ScaleValue:
; Line 2787
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z ENDP	; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z
_TEXT	SEGMENT
v_clamped$ = 4
flipped$1 = 36
v_min_fudged$2 = 68
v_max_fudged$3 = 100
result$4 = 132
zero_point_center$5 = 164
zero_point_snap_L$6 = 196
zero_point_snap_R$7 = 228
tv220 = 436
tv208 = 436
tv194 = 436
tv178 = 436
tv165 = 436
tv133 = 436
tv91 = 436
tv78 = 436
tv74 = 436
tv135 = 440
tv93 = 440
data_type$ = 480
v$ = 488
v_min$ = 496
v_max$ = 504
is_logarithmic$ = 512
logarithmic_zero_epsilon$ = 520
zero_deadzone_halfsize$ = 528
??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z PROC	; ImGui::ScaleRatioFromValueT<unsigned int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2657
$LN36:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2658
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jne	SHORT $LN2@ScaleRatio
; Line 2659
	xorps	xmm0, xmm0
	jmp	$LN1@ScaleRatio
$LN2@ScaleRatio:
; Line 2662
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jae	SHORT $LN22@ScaleRatio
	mov	r8d, DWORD PTR v_max$[rbp]
	mov	edx, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	??$ImClamp@I@@YAIIII@Z			; ImClamp<unsigned int>
	mov	DWORD PTR tv74[rbp], eax
	jmp	SHORT $LN23@ScaleRatio
$LN22@ScaleRatio:
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	??$ImClamp@I@@YAIIII@Z			; ImClamp<unsigned int>
	mov	DWORD PTR tv74[rbp], eax
$LN23@ScaleRatio:
	mov	eax, DWORD PTR tv74[rbp]
	mov	DWORD PTR v_clamped$[rbp], eax
; Line 2663
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleRatio
; Line 2665
	mov	eax, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR v_max$[rbp], eax
	jae	SHORT $LN24@ScaleRatio
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN25@ScaleRatio
$LN24@ScaleRatio:
	mov	DWORD PTR tv78[rbp], 0
$LN25@ScaleRatio:
	movzx	eax, BYTE PTR tv78[rbp]
	mov	BYTE PTR flipped$1[rbp], al
; Line 2667
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN4@ScaleRatio
; Line 2668
	lea	rdx, QWORD PTR v_max$[rbp]
	lea	rcx, QWORD PTR v_min$[rbp]
	call	??$ImSwap@I@@YAXAEAI0@Z			; ImSwap<unsigned int>
$LN4@ScaleRatio:
; Line 2671
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@ScaleRatio
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv91[rbp], xmm0
	jmp	SHORT $LN27@ScaleRatio
$LN26@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv91[rbp], xmm0
$LN27@ScaleRatio:
	movss	xmm0, DWORD PTR tv91[rbp]
	movss	DWORD PTR tv93[rbp], xmm0
	jmp	SHORT $LN29@ScaleRatio
$LN28@ScaleRatio:
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv93[rbp], xmm0
$LN29@ScaleRatio:
	movss	xmm0, DWORD PTR tv93[rbp]
	movss	DWORD PTR v_min_fudged$2[rbp], xmm0
; Line 2672
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN32@ScaleRatio
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv133[rbp], xmm0
	jmp	SHORT $LN31@ScaleRatio
$LN30@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv133[rbp], xmm0
$LN31@ScaleRatio:
	movss	xmm0, DWORD PTR tv133[rbp]
	movss	DWORD PTR tv135[rbp], xmm0
	jmp	SHORT $LN33@ScaleRatio
$LN32@ScaleRatio:
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	movss	DWORD PTR tv135[rbp], xmm0
$LN33@ScaleRatio:
	movss	xmm0, DWORD PTR tv135[rbp]
	movss	DWORD PTR v_max_fudged$3[rbp], xmm0
; Line 2675
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@ScaleRatio
	jne	SHORT $LN5@ScaleRatio
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ScaleRatio
; Line 2676
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_min_fudged$2[rbp], xmm0
	jmp	SHORT $LN6@ScaleRatio
$LN5@ScaleRatio:
; Line 2677
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN7@ScaleRatio
	jne	SHORT $LN7@ScaleRatio
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@ScaleRatio
; Line 2678
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_max_fudged$3[rbp], xmm0
$LN7@ScaleRatio:
$LN6@ScaleRatio:
; Line 2682
	mov	eax, DWORD PTR v_clamped$[rbp]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN8@ScaleRatio
; Line 2683
	xorps	xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN9@ScaleRatio
$LN8@ScaleRatio:
; Line 2684
	mov	eax, DWORD PTR v_clamped$[rbp]
	cvtsi2ss xmm0, rax
	comiss	xmm0, DWORD PTR v_max_fudged$3[rbp]
	jb	SHORT $LN10@ScaleRatio
; Line 2685
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN11@ScaleRatio
$LN10@ScaleRatio:
; Line 2686
	mov	eax, DWORD PTR v_min$[rbp]
	imul	eax, DWORD PTR v_max$[rbp]
	mov	eax, eax
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN12@ScaleRatio
; Line 2688
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm1, rax
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm2, rax
	subss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR zero_point_center$5[rbp], xmm0
; Line 2689
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$6[rbp], xmm0
; Line 2690
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$7[rbp], xmm0
; Line 2691
	mov	eax, DWORD PTR v$[rbp]
	cvtsi2ss xmm0, rax
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@ScaleRatio
	jne	SHORT $LN14@ScaleRatio
; Line 2692
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN15@ScaleRatio
$LN14@ScaleRatio:
; Line 2693
	mov	eax, DWORD PTR v$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN16@ScaleRatio
; Line 2694
	mov	eax, DWORD PTR v_clamped$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv165[rbp], xmm0
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv165[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR zero_point_snap_L$6[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN17@ScaleRatio
$LN16@ScaleRatio:
; Line 2696
	mov	eax, DWORD PTR v_clamped$[rbp]
	cvtsi2ss xmm0, rax
	divss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv178[rbp], xmm0
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv178[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN17@ScaleRatio:
$LN15@ScaleRatio:
; Line 2697
	jmp	$LN13@ScaleRatio
$LN12@ScaleRatio:
; Line 2698
	mov	eax, DWORD PTR v_min$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN20@ScaleRatio
	mov	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@ScaleRatio
$LN20@ScaleRatio:
; Line 2699
	mov	eax, DWORD PTR v_clamped$[rbp]
	cvtsi2ss xmm0, rax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv194[rbp], xmm0
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR v_max_fudged$3[rbp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv194[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN19@ScaleRatio
$LN18@ScaleRatio:
; Line 2701
	mov	eax, DWORD PTR v_clamped$[rbp]
	cvtsi2ss xmm0, rax
	divss	xmm0, DWORD PTR v_min_fudged$2[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv208[rbp], xmm0
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	divss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv208[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN19@ScaleRatio:
$LN13@ScaleRatio:
$LN11@ScaleRatio:
$LN9@ScaleRatio:
; Line 2703
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN34@ScaleRatio
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv220[rbp], xmm0
	jmp	SHORT $LN35@ScaleRatio
$LN34@ScaleRatio:
	movss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv220[rbp], xmm0
$LN35@ScaleRatio:
	movss	xmm0, DWORD PTR tv220[rbp]
	jmp	SHORT $LN1@ScaleRatio
$LN3@ScaleRatio:
; Line 2707
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_clamped$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
$LN1@ScaleRatio:
; Line 2708
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ENDP	; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_sanitized$ = 40
v_str$ = 112
p$ = 200
__$ArrayPad$ = 408
format$ = 448
data_type$ = 456
v$ = 464
??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z PROC	; ImGui::RoundScalarWithFormatT<int,int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2180
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2181
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2182
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN5@RoundScala
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@RoundScala
$LN5@RoundScala:
; Line 2183
	mov	eax, DWORD PTR v$[rbp]
	jmp	$LN1@RoundScala
$LN4@RoundScala:
; Line 2187
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_sanitized$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?SanitizeFormatString@@YAXPEBDPEAD_K@Z	; SanitizeFormatString
; Line 2188
	lea	rax, QWORD PTR fmt_sanitized$[rbp]
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 2192
	mov	r9d, DWORD PTR v$[rbp]
	mov	r8, QWORD PTR fmt_start$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR v_str$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2193
	lea	rax, QWORD PTR v_str$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@RoundScala:
; Line 2194
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@RoundScala
; Line 2195
	mov	rax, QWORD PTR p$[rbp]
	inc	rax
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN2@RoundScala
$LN3@RoundScala:
; Line 2196
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@RoundScala
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN6@RoundScala
$LN8@RoundScala:
; Line 2197
	mov	rcx, QWORD PTR p$[rbp]
	call	QWORD PTR __imp_atof
	cvttsd2si eax, xmm0
	mov	DWORD PTR v$[rbp], eax
	jmp	SHORT $LN7@RoundScala
$LN6@RoundScala:
; Line 2199
	lea	rdx, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	??$ImAtoi@H@@YAPEBDPEBDPEAH@Z		; ImAtoi<int>
$LN7@RoundScala:
; Line 2200
	mov	eax, DWORD PTR v$[rbp]
$LN1@RoundScala:
; Line 2201
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z ENDP	; ImGui::RoundScalarWithFormatT<int,int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z
_TEXT	SEGMENT
is_floating_point$ = 4
result$ = 36
flipped$5 = 68
v_min_fudged$6 = 100
v_max_fudged$7 = 132
t_with_flip$8 = 164
zero_point_center$9 = 196
zero_point_snap_L$10 = 228
zero_point_snap_R$11 = 260
v_new_off_f$12 = 292
tv186 = 500
tv177 = 500
tv165 = 500
tv147 = 500
tv139 = 500
tv92 = 500
tv82 = 500
tv73 = 500
tv67 = 500
tv218 = 504
tv94 = 504
tv84 = 504
__$ArrayPad$ = 512
data_type$ = 560
t$ = 568
v_min$ = 576
v_max$ = 584
is_logarithmic$ = 592
logarithmic_zero_epsilon$ = 600
zero_deadzone_halfsize$ = 608
??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z PROC	; ImGui::ScaleValueFromRatioT<int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2713
$LN41:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2714
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jne	SHORT $LN2@ScaleValue
; Line 2715
	mov	eax, DWORD PTR v_min$[rbp]
	jmp	$LN1@ScaleValue
$LN2@ScaleValue:
; Line 2716
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN25@ScaleValue
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN25@ScaleValue
	mov	BYTE PTR tv67[rbp], 0
	jmp	SHORT $LN26@ScaleValue
$LN25@ScaleValue:
	mov	BYTE PTR tv67[rbp], 1
$LN26@ScaleValue:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2719
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleValue
; Line 2722
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR t$[rbp]
	jb	SHORT $LN5@ScaleValue
; Line 2723
	mov	eax, DWORD PTR v_min$[rbp]
	mov	DWORD PTR result$[rbp], eax
	jmp	$LN6@ScaleValue
$LN5@ScaleValue:
; Line 2724
	movss	xmm0, DWORD PTR t$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN7@ScaleValue
; Line 2725
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR result$[rbp], eax
	jmp	$LN8@ScaleValue
$LN7@ScaleValue:
; Line 2728
	mov	eax, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR v_max$[rbp], eax
	jge	SHORT $LN27@ScaleValue
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN28@ScaleValue
$LN27@ScaleValue:
	mov	DWORD PTR tv73[rbp], 0
$LN28@ScaleValue:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR flipped$5[rbp], al
; Line 2731
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN31@ScaleValue
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN29@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv82[rbp], xmm0
	jmp	SHORT $LN30@ScaleValue
$LN29@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv82[rbp], xmm0
$LN30@ScaleValue:
	movss	xmm0, DWORD PTR tv82[rbp]
	movss	DWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN32@ScaleValue
$LN31@ScaleValue:
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR tv84[rbp], xmm0
$LN32@ScaleValue:
	movss	xmm0, DWORD PTR tv84[rbp]
	movss	DWORD PTR v_min_fudged$6[rbp], xmm0
; Line 2732
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN35@ScaleValue
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN33@ScaleValue
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN34@ScaleValue
$LN33@ScaleValue:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv92[rbp], xmm0
$LN34@ScaleValue:
	movss	xmm0, DWORD PTR tv92[rbp]
	movss	DWORD PTR tv94[rbp], xmm0
	jmp	SHORT $LN36@ScaleValue
$LN35@ScaleValue:
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR tv94[rbp], xmm0
$LN36@ScaleValue:
	movss	xmm0, DWORD PTR tv94[rbp]
	movss	DWORD PTR v_max_fudged$7[rbp], xmm0
; Line 2734
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN9@ScaleValue
; Line 2735
	lea	rdx, QWORD PTR v_max_fudged$7[rbp]
	lea	rcx, QWORD PTR v_min_fudged$6[rbp]
	call	??$ImSwap@M@@YAXAEAM0@Z			; ImSwap<float>
$LN9@ScaleValue:
; Line 2738
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN10@ScaleValue
	jne	SHORT $LN10@ScaleValue
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN10@ScaleValue
; Line 2739
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_max_fudged$7[rbp], xmm0
$LN10@ScaleValue:
; Line 2741
	movzx	eax, BYTE PTR flipped$5[rbp]
	test	eax, eax
	je	SHORT $LN37@ScaleValue
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv139[rbp], xmm0
	jmp	SHORT $LN38@ScaleValue
$LN37@ScaleValue:
	movss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR tv139[rbp], xmm0
$LN38@ScaleValue:
	movss	xmm0, DWORD PTR tv139[rbp]
	movss	DWORD PTR t_with_flip$8[rbp], xmm0
; Line 2743
	mov	eax, DWORD PTR v_min$[rbp]
	imul	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, eax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN11@ScaleValue
; Line 2745
	mov	edx, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	cvtsi2ss xmm0, eax
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv147[rbp], xmm0
	cvtsi2ss xmm1, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm2, DWORD PTR v_min$[rbp]
	subss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR tv147[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_point_center$9[rbp], xmm0
; Line 2746
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$10[rbp], xmm0
; Line 2747
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$11[rbp], xmm0
; Line 2748
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	comiss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	jb	SHORT $LN13@ScaleValue
	movss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jb	SHORT $LN13@ScaleValue
; Line 2749
	mov	DWORD PTR result$[rbp], 0
	jmp	$LN14@ScaleValue
$LN13@ScaleValue:
; Line 2750
	movss	xmm0, DWORD PTR zero_point_center$9[rbp]
	comiss	xmm0, DWORD PTR t_with_flip$8[rbp]
	jbe	SHORT $LN15@ScaleValue
; Line 2751
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	divss	xmm0, DWORD PTR zero_point_snap_L$10[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR v_min_fudged$6[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv165[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv165[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si eax, xmm0
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN16@ScaleValue
$LN15@ScaleValue:
; Line 2753
	movss	xmm0, DWORD PTR t_with_flip$8[rbp]
	subss	xmm0, DWORD PTR zero_point_snap_R$11[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$11[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR v_max_fudged$7[rbp]
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv177[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv177[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR result$[rbp], eax
$LN16@ScaleValue:
$LN14@ScaleValue:
; Line 2754
	jmp	$LN12@ScaleValue
$LN11@ScaleValue:
; Line 2755
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN19@ScaleValue
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN17@ScaleValue
$LN19@ScaleValue:
; Line 2756
	movss	xmm0, DWORD PTR v_max_fudged$7[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv186[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR t_with_flip$8[rbp]
	movss	xmm2, DWORD PTR v_min_fudged$6[rbp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm3, DWORD PTR v_max_fudged$7[rbp]
	xorps	xmm3, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm2, xmm3
	movaps	xmm0, xmm2
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR tv186[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvttss2si eax, xmm0
	mov	DWORD PTR result$[rbp], eax
	jmp	SHORT $LN18@ScaleValue
$LN17@ScaleValue:
; Line 2758
	movss	xmm0, DWORD PTR v_max_fudged$7[rbp]
	divss	xmm0, DWORD PTR v_min_fudged$6[rbp]
	movss	xmm1, DWORD PTR t_with_flip$8[rbp]
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	xmm1, DWORD PTR v_min_fudged$6[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR result$[rbp], eax
$LN18@ScaleValue:
$LN12@ScaleValue:
$LN8@ScaleValue:
$LN6@ScaleValue:
; Line 2760
	jmp	$LN4@ScaleValue
$LN3@ScaleValue:
; Line 2764
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN20@ScaleValue
; Line 2766
	movss	xmm2, DWORD PTR t$[rbp]
	mov	edx, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	call	??$ImLerp@H@@YAHHHM@Z			; ImLerp<int>
	mov	DWORD PTR result$[rbp], eax
; Line 2767
	jmp	$LN21@ScaleValue
$LN20@ScaleValue:
; Line 2774
	cvtss2sd xmm0, DWORD PTR t$[rbp]
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN22@ScaleValue
; Line 2776
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR v_new_off_f$12[rbp], xmm0
; Line 2777
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jle	SHORT $LN39@ScaleValue
	movsd	xmm0, QWORD PTR __real@bfe0000000000000
	movsd	QWORD PTR tv218[rbp], xmm0
	jmp	SHORT $LN40@ScaleValue
$LN39@ScaleValue:
	movsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	QWORD PTR tv218[rbp], xmm0
$LN40@ScaleValue:
	cvtsd2ss xmm0, QWORD PTR tv218[rbp]
	movss	xmm1, DWORD PTR v_new_off_f$12[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR v_min$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR result$[rbp], eax
; Line 2778
	jmp	SHORT $LN23@ScaleValue
$LN22@ScaleValue:
; Line 2781
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR result$[rbp], eax
$LN23@ScaleValue:
$LN21@ScaleValue:
$LN4@ScaleValue:
; Line 2786
	mov	eax, DWORD PTR result$[rbp]
$LN1@ScaleValue:
; Line 2787
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z ENDP	; ImGui::ScaleValueFromRatioT<int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z
_TEXT	SEGMENT
v_clamped$ = 4
flipped$1 = 36
v_min_fudged$2 = 68
v_max_fudged$3 = 100
result$4 = 132
zero_point_center$5 = 164
zero_point_snap_L$6 = 196
zero_point_snap_R$7 = 228
tv220 = 436
tv208 = 436
tv194 = 436
tv178 = 436
tv165 = 436
tv133 = 436
tv91 = 436
tv78 = 436
tv74 = 436
tv135 = 440
tv93 = 440
data_type$ = 480
v$ = 488
v_min$ = 496
v_max$ = 504
is_logarithmic$ = 512
logarithmic_zero_epsilon$ = 520
zero_deadzone_halfsize$ = 528
??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z PROC	; ImGui::ScaleRatioFromValueT<int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2657
$LN36:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2658
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jne	SHORT $LN2@ScaleRatio
; Line 2659
	xorps	xmm0, xmm0
	jmp	$LN1@ScaleRatio
$LN2@ScaleRatio:
; Line 2662
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jge	SHORT $LN22@ScaleRatio
	mov	r8d, DWORD PTR v_max$[rbp]
	mov	edx, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv74[rbp], eax
	jmp	SHORT $LN23@ScaleRatio
$LN22@ScaleRatio:
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v$[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv74[rbp], eax
$LN23@ScaleRatio:
	mov	eax, DWORD PTR tv74[rbp]
	mov	DWORD PTR v_clamped$[rbp], eax
; Line 2663
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@ScaleRatio
; Line 2665
	mov	eax, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR v_max$[rbp], eax
	jge	SHORT $LN24@ScaleRatio
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN25@ScaleRatio
$LN24@ScaleRatio:
	mov	DWORD PTR tv78[rbp], 0
$LN25@ScaleRatio:
	movzx	eax, BYTE PTR tv78[rbp]
	mov	BYTE PTR flipped$1[rbp], al
; Line 2667
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN4@ScaleRatio
; Line 2668
	lea	rdx, QWORD PTR v_max$[rbp]
	lea	rcx, QWORD PTR v_min$[rbp]
	call	??$ImSwap@H@@YAXAEAH0@Z			; ImSwap<int>
$LN4@ScaleRatio:
; Line 2671
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN28@ScaleRatio
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN26@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv91[rbp], xmm0
	jmp	SHORT $LN27@ScaleRatio
$LN26@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv91[rbp], xmm0
$LN27@ScaleRatio:
	movss	xmm0, DWORD PTR tv91[rbp]
	movss	DWORD PTR tv93[rbp], xmm0
	jmp	SHORT $LN29@ScaleRatio
$LN28@ScaleRatio:
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR tv93[rbp], xmm0
$LN29@ScaleRatio:
	movss	xmm0, DWORD PTR tv93[rbp]
	movss	DWORD PTR v_min_fudged$2[rbp], xmm0
; Line 2672
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN32@ScaleRatio
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN30@ScaleRatio
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv133[rbp], xmm0
	jmp	SHORT $LN31@ScaleRatio
$LN30@ScaleRatio:
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR tv133[rbp], xmm0
$LN31@ScaleRatio:
	movss	xmm0, DWORD PTR tv133[rbp]
	movss	DWORD PTR tv135[rbp], xmm0
	jmp	SHORT $LN33@ScaleRatio
$LN32@ScaleRatio:
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR tv135[rbp], xmm0
$LN33@ScaleRatio:
	movss	xmm0, DWORD PTR tv135[rbp]
	movss	DWORD PTR v_max_fudged$3[rbp], xmm0
; Line 2675
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@ScaleRatio
	jne	SHORT $LN5@ScaleRatio
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN5@ScaleRatio
; Line 2676
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_min_fudged$2[rbp], xmm0
	jmp	SHORT $LN6@ScaleRatio
$LN5@ScaleRatio:
; Line 2677
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN7@ScaleRatio
	jne	SHORT $LN7@ScaleRatio
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN7@ScaleRatio
; Line 2678
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR v_max_fudged$3[rbp], xmm0
$LN7@ScaleRatio:
$LN6@ScaleRatio:
; Line 2682
	cvtsi2ss xmm0, DWORD PTR v_clamped$[rbp]
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN8@ScaleRatio
; Line 2683
	xorps	xmm0, xmm0
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN9@ScaleRatio
$LN8@ScaleRatio:
; Line 2684
	cvtsi2ss xmm0, DWORD PTR v_clamped$[rbp]
	comiss	xmm0, DWORD PTR v_max_fudged$3[rbp]
	jb	SHORT $LN10@ScaleRatio
; Line 2685
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN11@ScaleRatio
$LN10@ScaleRatio:
; Line 2686
	mov	eax, DWORD PTR v_min$[rbp]
	imul	eax, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm0, eax
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	$LN12@ScaleRatio
; Line 2688
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	cvtsi2ss xmm1, DWORD PTR v_max$[rbp]
	cvtsi2ss xmm2, DWORD PTR v_min$[rbp]
	subss	xmm1, xmm2
	divss	xmm0, xmm1
	movss	DWORD PTR zero_point_center$5[rbp], xmm0
; Line 2689
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	subss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_L$6[rbp], xmm0
; Line 2690
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	addss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR zero_point_snap_R$7[rbp], xmm0
; Line 2691
	cvtsi2ss xmm0, DWORD PTR v$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@ScaleRatio
	jne	SHORT $LN14@ScaleRatio
; Line 2692
	movss	xmm0, DWORD PTR zero_point_center$5[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	$LN15@ScaleRatio
$LN14@ScaleRatio:
; Line 2693
	cvtsi2ss xmm0, DWORD PTR v$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN16@ScaleRatio
; Line 2694
	cvtsi2ss xmm0, DWORD PTR v_clamped$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv165[rbp], xmm0
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv165[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR zero_point_snap_L$6[rbp]
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN17@ScaleRatio
$LN16@ScaleRatio:
; Line 2696
	cvtsi2ss xmm0, DWORD PTR v_clamped$[rbp]
	divss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv178[rbp], xmm0
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	divss	xmm1, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv178[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR zero_point_snap_R$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN17@ScaleRatio:
$LN15@ScaleRatio:
; Line 2697
	jmp	$LN13@ScaleRatio
$LN12@ScaleRatio:
; Line 2698
	cvtsi2ss xmm0, DWORD PTR v_min$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	ja	SHORT $LN20@ScaleRatio
	cvtsi2ss xmm0, DWORD PTR v_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN18@ScaleRatio
$LN20@ScaleRatio:
; Line 2699
	cvtsi2ss xmm0, DWORD PTR v_clamped$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv194[rbp], xmm0
	movss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR v_max_fudged$3[rbp]
	xorps	xmm2, DWORD PTR __xmm@80000000800000008000000080000000
	divss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv194[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
	jmp	SHORT $LN19@ScaleRatio
$LN18@ScaleRatio:
; Line 2701
	cvtsi2ss xmm0, DWORD PTR v_clamped$[rbp]
	divss	xmm0, DWORD PTR v_min_fudged$2[rbp]
	call	?ImLog@@YAMM@Z				; ImLog
	movss	DWORD PTR tv208[rbp], xmm0
	movss	xmm1, DWORD PTR v_max_fudged$3[rbp]
	divss	xmm1, DWORD PTR v_min_fudged$2[rbp]
	movaps	xmm0, xmm1
	call	?ImLog@@YAMM@Z				; ImLog
	movss	xmm1, DWORD PTR tv208[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$4[rbp], xmm0
$LN19@ScaleRatio:
$LN13@ScaleRatio:
$LN11@ScaleRatio:
$LN9@ScaleRatio:
; Line 2703
	movzx	eax, BYTE PTR flipped$1[rbp]
	test	eax, eax
	je	SHORT $LN34@ScaleRatio
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv220[rbp], xmm0
	jmp	SHORT $LN35@ScaleRatio
$LN34@ScaleRatio:
	movss	xmm0, DWORD PTR result$4[rbp]
	movss	DWORD PTR tv220[rbp], xmm0
$LN35@ScaleRatio:
	movss	xmm0, DWORD PTR tv220[rbp]
	jmp	SHORT $LN1@ScaleRatio
$LN3@ScaleRatio:
; Line 2707
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_clamped$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm1, eax
	divss	xmm0, xmm1
$LN1@ScaleRatio:
; Line 2708
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ENDP	; ImGui::ScaleRatioFromValueT<int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z
_TEXT	SEGMENT
g$ = 8
tv79 = 216
tv69 = 216
__$ReturnUdt$ = 256
tab_bar$ = 264
?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z PROC ; GetTabBarRefFromTabBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7089
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7090
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7091
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8288				; 00002060H
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z ; ImPool<ImGuiTabBar>::Contains
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@GetTabBarR
; Line 7092
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8288				; 00002060H
	mov	QWORD PTR tv79[rbp], rax
	mov	rdx, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tv79[rbp]
	call	?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z ; ImPool<ImGuiTabBar>::GetIndex
	mov	edx, eax
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImGuiPtrOrIndex@@QEAA@H@Z		; ImGuiPtrOrIndex::ImGuiPtrOrIndex
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	jmp	SHORT $LN1@GetTabBarR
$LN2@GetTabBarR:
; Line 7093
	mov	rdx, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImGuiPtrOrIndex@@QEAA@PEAX@Z		; ImGuiPtrOrIndex::ImGuiPtrOrIndex
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
$LN1@GetTabBarR:
; Line 7094
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z ENDP ; GetTabBarRefFromTabBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z
_TEXT	SEGMENT
g$ = 8
tv74 = 216
tv72 = 224
ref$ = 272
?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z PROC ; GetTabBarFromTabBarRef, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7083
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7084
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7085
	mov	rax, QWORD PTR ref$[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@GetTabBarF
	mov	rax, QWORD PTR ref$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv74[rbp], rax
	jmp	SHORT $LN4@GetTabBarF
$LN3@GetTabBarF:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8288				; 00002060H
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR ref$[rbp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR tv72[rbp]
	call	?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z ; ImPool<ImGuiTabBar>::GetByIndex
	mov	QWORD PTR tv74[rbp], rax
$LN4@GetTabBarF:
	mov	rax, QWORD PTR tv74[rbp]
; Line 7086
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z ENDP ; GetTabBarFromTabBarRef
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemComparerByBeginOrder@@YAHPEBX0@Z
_TEXT	SEGMENT
a$ = 8
b$ = 40
lhs$ = 288
rhs$ = 296
?TabItemComparerByBeginOrder@@YAHPEBX0@Z PROC		; TabItemComparerByBeginOrder, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7076
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7077
	mov	rax, QWORD PTR lhs$[rbp]
	mov	QWORD PTR a$[rbp], rax
; Line 7078
	mov	rax, QWORD PTR rhs$[rbp]
	mov	QWORD PTR b$[rbp], rax
; Line 7079
	mov	rax, QWORD PTR a$[rbp]
	movsx	eax, WORD PTR [rax+32]
	mov	rcx, QWORD PTR b$[rbp]
	movsx	ecx, WORD PTR [rcx+32]
	sub	eax, ecx
; Line 7080
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TabItemComparerByBeginOrder@@YAHPEBX0@Z ENDP		; TabItemComparerByBeginOrder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemComparerBySection@@YAHPEBX0@Z
_TEXT	SEGMENT
a$ = 8
b$ = 40
a_section$ = 68
b_section$ = 100
lhs$ = 352
rhs$ = 360
?TabItemComparerBySection@@YAHPEBX0@Z PROC		; TabItemComparerBySection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7065
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7066
	mov	rax, QWORD PTR lhs$[rbp]
	mov	QWORD PTR a$[rbp], rax
; Line 7067
	mov	rax, QWORD PTR rhs$[rbp]
	mov	QWORD PTR b$[rbp], rax
; Line 7068
	mov	rcx, QWORD PTR a$[rbp]
	call	?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ; TabItemGetSectionIdx
	mov	DWORD PTR a_section$[rbp], eax
; Line 7069
	mov	rcx, QWORD PTR b$[rbp]
	call	?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ; TabItemGetSectionIdx
	mov	DWORD PTR b_section$[rbp], eax
; Line 7070
	mov	eax, DWORD PTR b_section$[rbp]
	cmp	DWORD PTR a_section$[rbp], eax
	je	SHORT $LN2@TabItemCom
; Line 7071
	mov	eax, DWORD PTR b_section$[rbp]
	mov	ecx, DWORD PTR a_section$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN1@TabItemCom
$LN2@TabItemCom:
; Line 7072
	mov	rax, QWORD PTR a$[rbp]
	movsx	eax, WORD PTR [rax+34]
	mov	rcx, QWORD PTR b$[rbp]
	movsx	ecx, WORD PTR [rcx+34]
	sub	eax, ecx
$LN1@TabItemCom:
; Line 7073
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?TabItemComparerBySection@@YAHPEBX0@Z ENDP		; TabItemComparerBySection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z
_TEXT	SEGMENT
tv71 = 192
tv69 = 196
tab$ = 240
?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z PROC	; TabItemGetSectionIdx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7060
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7061
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN5@TabItemGet
	mov	DWORD PTR tv71[rbp], 0
	jmp	SHORT $LN6@TabItemGet
$LN5@TabItemGet:
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN3@TabItemGet
	mov	DWORD PTR tv69[rbp], 2
	jmp	SHORT $LN4@TabItemGet
$LN3@TabItemGet:
	mov	DWORD PTR tv69[rbp], 1
$LN4@TabItemGet:
	mov	eax, DWORD PTR tv69[rbp]
	mov	DWORD PTR tv71[rbp], eax
$LN6@TabItemGet:
	mov	eax, DWORD PTR tv71[rbp]
; Line 7062
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ENDP	; TabItemGetSectionIdx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
tab_list_popup_button_width$ = 68
backup_cursor_pos$ = 104
arrow_col$ = 136
open$ = 180
tab_to_select$ = 216
tab_n$5 = 244
tab$6 = 280
tab_name$7 = 312
$T8 = 532
$T9 = 564
$T10 = 612
tv182 = 632
tv161 = 632
tv178 = 640
__$ArrayPad$ = 648
tab_bar$ = 688
?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z PROC ; ImGui::TabBarTabListPopupButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7681
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 704				; 000002c0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 116				; 00000074H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+744]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7682
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7683
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7686
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	addss	xmm0, DWORD PTR [rcx+5532]
	movss	DWORD PTR tab_list_popup_button_width$[rbp], xmm0
; Line 7687
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR backup_cursor_pos$[rbp], rax
; Line 7688
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+44]
	subss	xmm0, DWORD PTR [rcx+5532]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm2, DWORD PTR [rax+48]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 7689
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+44]
	addss	xmm0, DWORD PTR tab_list_popup_button_width$[rbp]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+44], xmm0
; Line 7691
	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, QWORD PTR arrow_col$[rbp]
	mov	rdx, QWORD PTR g$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax+5668]
	mov	ecx, 16
	rep movsb
; Line 7692
	movss	xmm0, DWORD PTR arrow_col$[rbp+12]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR arrow_col$[rbp+12], xmm0
; Line 7693
	lea	rdx, QWORD PTR arrow_col$[rbp]
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 7694
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	rdx, rax
	mov	ecx, 21
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 7695
	mov	r8d, 80					; 00000050H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_03CPFCAGPK@?$CD?$CDv@
	call	?BeginCombo@ImGui@@YA_NPEBD0H@Z		; ImGui::BeginCombo
	mov	BYTE PTR open$[rbp], al
; Line 7696
	mov	ecx, 2
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
; Line 7698
	mov	QWORD PTR tab_to_select$[rbp], 0
; Line 7699
	movzx	eax, BYTE PTR open$[rbp]
	test	eax, eax
	je	$LN5@TabBarTabL
; Line 7701
	mov	DWORD PTR tab_n$5[rbp], 0
	jmp	SHORT $LN4@TabBarTabL
$LN2@TabBarTabL:
	mov	eax, DWORD PTR tab_n$5[rbp]
	inc	eax
	mov	DWORD PTR tab_n$5[rbp], eax
$LN4@TabBarTabL:
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR tab_n$5[rbp], eax
	jge	$LN3@TabBarTabL
; Line 7703
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv161[rbp], rax
	mov	edx, DWORD PTR tab_n$5[rbp]
	mov	rcx, QWORD PTR tv161[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$6[rbp], rax
; Line 7704
	mov	rax, QWORD PTR tab$6[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN6@TabBarTabL
; Line 7705
	jmp	SHORT $LN2@TabBarTabL
$LN6@TabBarTabL:
; Line 7707
	mov	rdx, QWORD PTR tab$6[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabName
	mov	QWORD PTR tab_name$7[rbp], rax
; Line 7708
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv182[rbp], rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$6[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+24], ecx
	jne	SHORT $LN9@TabBarTabL
	mov	BYTE PTR tv178[rbp], 1
	jmp	SHORT $LN10@TabBarTabL
$LN9@TabBarTabL:
	mov	BYTE PTR tv178[rbp], 0
$LN10@TabBarTabL:
	mov	r9, QWORD PTR tv182[rbp]
	xor	r8d, r8d
	movzx	edx, BYTE PTR tv178[rbp]
	mov	rcx, QWORD PTR tab_name$7[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@TabBarTabL
; Line 7709
	mov	rax, QWORD PTR tab$6[rbp]
	mov	QWORD PTR tab_to_select$[rbp], rax
$LN7@TabBarTabL:
; Line 7710
	jmp	$LN2@TabBarTabL
$LN3@TabBarTabL:
; Line 7711
	call	?EndCombo@ImGui@@YAXXZ			; ImGui::EndCombo
$LN5@TabBarTabL:
; Line 7714
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR backup_cursor_pos$[rbp]
	mov	QWORD PTR [rax+216], rcx
; Line 7715
	mov	rax, QWORD PTR tab_to_select$[rbp]
; Line 7716
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+656]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z ENDP ; ImGui::TabBarTabListPopupButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
arrow_button_size$ = 72
scrolling_buttons_width$ = 100
backup_cursor_pos$ = 136
select_dir$ = 164
arrow_col$ = 200
backup_repeat_delay$ = 244
backup_repeat_rate$ = 276
x$ = 308
tab_to_scroll_to$ = 344
tab_item$6 = 376
selected_order$7 = 404
target_order$8 = 436
$T9 = 852
$T10 = 900
$T11 = 932
tv217 = 952
tv207 = 952
tv204 = 960
__$ArrayPad$ = 968
tab_bar$ = 1008
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z PROC ; ImGui::TabBarScrollingButtons, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7620
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1024				; 00000400H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1064]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7621
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7622
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7624
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	subss	xmm1, DWORD PTR __real@40000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR arrow_button_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 7625
	movss	xmm0, DWORD PTR arrow_button_size$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR scrolling_buttons_width$[rbp], xmm0
; Line 7627
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR backup_cursor_pos$[rbp], rax
; Line 7630
	mov	DWORD PTR select_dir$[rbp], 0
; Line 7631
	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, QWORD PTR arrow_col$[rbp]
	mov	rdx, QWORD PTR g$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax+5668]
	mov	ecx, 16
	rep movsb
; Line 7632
	movss	xmm0, DWORD PTR arrow_col$[rbp+12]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR arrow_col$[rbp+12], xmm0
; Line 7634
	lea	rdx, QWORD PTR arrow_col$[rbp]
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 7635
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	rdx, rax
	mov	ecx, 21
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 7636
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+148]
	movss	DWORD PTR backup_repeat_delay$[rbp], xmm0
; Line 7637
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+152]
	movss	DWORD PTR backup_repeat_rate$[rbp], xmm0
; Line 7638
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR [rax+148], xmm0
; Line 7639
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rax+152], xmm0
; Line 7640
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+52]
	subss	xmm0, DWORD PTR scrolling_buttons_width$[rbp]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+44]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR x$[rbp], xmm0
; Line 7641
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm2, DWORD PTR [rax+48]
	movss	xmm1, DWORD PTR x$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 7642
	mov	r9d, 1040				; 00000410H
	mov	r8, QWORD PTR arrow_button_size$[rbp]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_03CFMEKBHF@?$CD?$CD?$DM@
	call	?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z ; ImGui::ArrowButtonEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@TabBarScro
; Line 7643
	mov	DWORD PTR select_dir$[rbp], -1
$LN4@TabBarScro:
; Line 7644
	movss	xmm0, DWORD PTR x$[rbp]
	addss	xmm0, DWORD PTR arrow_button_size$[rbp]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm2, DWORD PTR [rax+48]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 7645
	mov	r9d, 1040				; 00000410H
	mov	r8, QWORD PTR arrow_button_size$[rbp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:??_C@_03BHPCMDPH@?$CD?$CD?$DO@
	call	?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z ; ImGui::ArrowButtonEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@TabBarScro
; Line 7646
	mov	DWORD PTR select_dir$[rbp], 1
$LN5@TabBarScro:
; Line 7647
	mov	ecx, 2
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
; Line 7648
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR backup_repeat_rate$[rbp]
	movss	DWORD PTR [rax+152], xmm0
; Line 7649
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR backup_repeat_delay$[rbp]
	movss	DWORD PTR [rax+148], xmm0
; Line 7651
	mov	QWORD PTR tab_to_scroll_to$[rbp], 0
; Line 7652
	cmp	DWORD PTR select_dir$[rbp], 0
	je	$LN6@TabBarScro
; Line 7653
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	edx, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
	mov	QWORD PTR tab_item$6[rbp], rax
	cmp	QWORD PTR tab_item$6[rbp], 0
	je	$LN7@TabBarScro
; Line 7655
	mov	rdx, QWORD PTR tab_item$6[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabOrder
	mov	DWORD PTR selected_order$7[rbp], eax
; Line 7656
	mov	eax, DWORD PTR select_dir$[rbp]
	mov	ecx, DWORD PTR selected_order$7[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR target_order$8[rbp], eax
$LN2@TabBarScro:
; Line 7659
	cmp	QWORD PTR tab_to_scroll_to$[rbp], 0
	jne	$LN3@TabBarScro
; Line 7662
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv207[rbp], rax
	cmp	DWORD PTR target_order$8[rbp], 0
	jl	SHORT $LN10@TabBarScro
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR target_order$8[rbp], eax
	jge	SHORT $LN10@TabBarScro
	mov	eax, DWORD PTR target_order$8[rbp]
	mov	DWORD PTR tv204[rbp], eax
	jmp	SHORT $LN11@TabBarScro
$LN10@TabBarScro:
	mov	eax, DWORD PTR selected_order$7[rbp]
	mov	DWORD PTR tv204[rbp], eax
$LN11@TabBarScro:
	mov	edx, DWORD PTR tv204[rbp]
	mov	rcx, QWORD PTR tv207[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab_to_scroll_to$[rbp], rax
; Line 7666
	mov	rax, QWORD PTR tab_to_scroll_to$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN8@TabBarScro
; Line 7668
	mov	eax, DWORD PTR select_dir$[rbp]
	mov	ecx, DWORD PTR target_order$8[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR target_order$8[rbp], eax
; Line 7669
	mov	eax, DWORD PTR select_dir$[rbp]
	mov	ecx, DWORD PTR selected_order$7[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR selected_order$7[rbp], eax
; Line 7670
	cmp	DWORD PTR target_order$8[rbp], 0
	jl	SHORT $LN12@TabBarScro
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR target_order$8[rbp], eax
	jge	SHORT $LN12@TabBarScro
	mov	QWORD PTR tv217[rbp], 0
	jmp	SHORT $LN13@TabBarScro
$LN12@TabBarScro:
	mov	rax, QWORD PTR tab_to_scroll_to$[rbp]
	mov	QWORD PTR tv217[rbp], rax
$LN13@TabBarScro:
	mov	rax, QWORD PTR tv217[rbp]
	mov	QWORD PTR tab_to_scroll_to$[rbp], rax
$LN8@TabBarScro:
; Line 7672
	jmp	$LN2@TabBarScro
$LN3@TabBarScro:
$LN7@TabBarScro:
$LN6@TabBarScro:
; Line 7674
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR backup_cursor_pos$[rbp]
	mov	QWORD PTR [rax+216], rcx
; Line 7675
	movss	xmm0, DWORD PTR scrolling_buttons_width$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+52]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+52], xmm0
; Line 7677
	mov	rax, QWORD PTR tab_to_scroll_to$[rbp]
; Line 7678
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+976]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z ENDP ; ImGui::TabBarScrollingButtons
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z
_TEXT	SEGMENT
tab$ = 8
g$ = 40
margin$ = 68
order$ = 100
scrollable_width$ = 132
tab_x1$ = 164
tab_x2$ = 196
tv151 = 404
tv134 = 404
tab_bar$ = 448
tab_id$ = 456
sections$ = 464
?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z PROC ; ImGui::TabBarScrollToTab, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7511
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7512
	mov	edx, DWORD PTR tab_id$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
	mov	QWORD PTR tab$[rbp], rax
; Line 7513
	cmp	QWORD PTR tab$[rbp], 0
	jne	SHORT $LN2@TabBarScro
; Line 7514
	jmp	$LN1@TabBarScro
$LN2@TabBarScro:
; Line 7515
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 192				; 000000c0H
	test	eax, eax
	je	SHORT $LN3@TabBarScro
; Line 7516
	jmp	$LN1@TabBarScro
$LN3@TabBarScro:
; Line 7518
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7519
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR margin$[rbp], xmm0
; Line 7520
	mov	rdx, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabOrder
	mov	DWORD PTR order$[rbp], eax
; Line 7524
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sections$[rbp]
	subss	xmm0, DWORD PTR [rcx+rax+4]
	mov	eax, 12
	imul	rax, rax, 2
	mov	rcx, QWORD PTR sections$[rbp]
	subss	xmm0, DWORD PTR [rcx+rax+4]
	mov	eax, 12
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sections$[rbp]
	subss	xmm0, DWORD PTR [rcx+rax+8]
	movss	DWORD PTR scrollable_width$[rbp], xmm0
; Line 7527
	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sections$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	dec	eax
	cmp	DWORD PTR order$[rbp], eax
	jle	SHORT $LN9@TabBarScro
	movss	xmm0, DWORD PTR margin$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv134[rbp], xmm0
	jmp	SHORT $LN10@TabBarScro
$LN9@TabBarScro:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv134[rbp], xmm0
$LN10@TabBarScro:
	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tab$[rbp]
	mov	rdx, QWORD PTR sections$[rbp]
	movss	xmm0, DWORD PTR [rcx+16]
	subss	xmm0, DWORD PTR [rdx+rax+4]
	addss	xmm0, DWORD PTR tv134[rbp]
	movss	DWORD PTR tab_x1$[rbp], xmm0
; Line 7528
	mov	eax, DWORD PTR order$[rbp]
	inc	eax
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tab_bar$[rbp]
	mov	r8, QWORD PTR sections$[rbp]
	mov	ecx, DWORD PTR [r8+rcx]
	mov	edx, DWORD PTR [rdx]
	sub	edx, ecx
	mov	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN11@TabBarScro
	movss	xmm0, DWORD PTR margin$[rbp]
	movss	DWORD PTR tv151[rbp], xmm0
	jmp	SHORT $LN12@TabBarScro
$LN11@TabBarScro:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv151[rbp], xmm0
$LN12@TabBarScro:
	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tab$[rbp]
	mov	rdx, QWORD PTR sections$[rbp]
	movss	xmm0, DWORD PTR [rcx+16]
	subss	xmm0, DWORD PTR [rdx+rax+4]
	mov	rax, QWORD PTR tab$[rbp]
	addss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR tv151[rbp]
	movss	DWORD PTR tab_x2$[rbp], xmm0
; Line 7529
	mov	rax, QWORD PTR tab_bar$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+84], xmm0
; Line 7530
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	comiss	xmm0, DWORD PTR tab_x1$[rbp]
	ja	SHORT $LN6@TabBarScro
	movss	xmm0, DWORD PTR tab_x2$[rbp]
	subss	xmm0, DWORD PTR tab_x1$[rbp]
	comiss	xmm0, DWORD PTR scrollable_width$[rbp]
	jb	SHORT $LN4@TabBarScro
$LN6@TabBarScro:
; Line 7533
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	subss	xmm0, DWORD PTR tab_x2$[rbp]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+84], xmm0
; Line 7534
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR tab_x1$[rbp]
	movss	DWORD PTR [rax+80], xmm0
; Line 7535
	jmp	SHORT $LN5@TabBarScro
$LN4@TabBarScro:
; Line 7536
	movss	xmm0, DWORD PTR tab_x2$[rbp]
	subss	xmm0, DWORD PTR scrollable_width$[rbp]
	mov	rax, QWORD PTR tab_bar$[rbp]
	comiss	xmm0, DWORD PTR [rax+80]
	jbe	SHORT $LN7@TabBarScro
; Line 7539
	movss	xmm0, DWORD PTR tab_x1$[rbp]
	subss	xmm0, DWORD PTR scrollable_width$[rbp]
	mov	rax, QWORD PTR tab_bar$[rbp]
	subss	xmm0, DWORD PTR [rax+76]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+84], xmm0
; Line 7540
	movss	xmm0, DWORD PTR tab_x2$[rbp]
	subss	xmm0, DWORD PTR scrollable_width$[rbp]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+80], xmm0
$LN7@TabBarScro:
$LN5@TabBarScro:
$LN1@TabBarScro:
; Line 7542
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z ENDP ; ImGui::TabBarScrollToTab
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z
_TEXT	SEGMENT
tab_bar$ = 224
scrolling$ = 232
?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z PROC	; ImGui::TabBarScrollClamp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7504
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7505
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+68]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR scrolling$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR scrolling$[rbp], xmm0
; Line 7506
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR scrolling$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
; Line 7507
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z ENDP	; ImGui::TabBarScrollClamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarCalcMaxTabWidth@ImGui@@YAMXZ
_TEXT	SEGMENT
g$ = 8
?TabBarCalcMaxTabWidth@ImGui@@YAMXZ PROC		; ImGui::TabBarCalcMaxTabWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7456
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7457
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7458
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@41a00000
; Line 7459
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TabBarCalcMaxTabWidth@ImGui@@YAMXZ ENDP		; ImGui::TabBarCalcMaxTabWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z
_TEXT	SEGMENT
id$1 = 4
window$2 = 40
tab_bar$ = 288
label$ = 296
?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z PROC	; ImGui::TabBarCalcTabID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7441
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7442
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN2@TabBarCalc
; Line 7444
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?ImHashStr@@YAIPEBD_KI@Z		; ImHashStr
	mov	DWORD PTR id$1[rbp], eax
; Line 7445
	mov	ecx, DWORD PTR id$1[rbp]
	call	?KeepAliveID@ImGui@@YAXI@Z		; ImGui::KeepAliveID
; Line 7446
	mov	eax, DWORD PTR id$1[rbp]
	jmp	SHORT $LN1@TabBarCalc
; Line 7447
	jmp	SHORT $LN3@TabBarCalc
$LN2@TabBarCalc:
; Line 7450
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$2[rbp], rax
; Line 7451
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$2[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
$LN3@TabBarCalc:
$LN1@TabBarCalc:
; Line 7453
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z ENDP	; ImGui::TabBarCalcTabID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z
_TEXT	SEGMENT
g$ = 8
tab_dst_n$ = 36
need_sort_by_section$ = 68
sections$ = 104
tab_src_n$5 = 164
tab$6 = 200
curr_tab_section_n$7 = 228
prev_tab$8 = 264
prev_tab_section_n$9 = 292
scroll_to_tab_id$ = 324
tab_list_popup_button$ = 356
tab_to_select$10 = 392
shrink_buffer_indexes$ = 424
most_recently_selected_tab$ = 472
curr_section_n$ = 500
found_selected_tab_id$ = 532
tab_n$11 = 564
tab$12 = 600
tab_name$13 = 632
has_close_button$14 = 660
section_n$15 = 692
section$16 = 728
shrink_buffer_index$17 = 756
section_n$18 = 788
scroll_and_select_tab$19 = 824
section_0_w$ = 852
section_1_w$ = 884
section_2_w$ = 916
central_section_is_visible$ = 948
width_excess$ = 980
shrink_data_count$20 = 1012
shrink_data_offset$21 = 1044
tab_n$22 = 1076
tab$23 = 1112
shrinked_width$24 = 1140
section_n$25 = 1172
section_tab_index$ = 1204
tab_offset$ = 1236
section_n$26 = 1268
section$27 = 1304
tab_n$28 = 1332
tab$29 = 1368
teleport$30 = 1396
window$ = 1432
$T31 = 2232
$T32 = 2292
$T33 = 2324
tv762 = 2340
tv702 = 2340
tv687 = 2340
tv678 = 2340
tv620 = 2340
tv606 = 2340
tv520 = 2340
tv510 = 2340
tv487 = 2340
tv469 = 2340
tv401 = 2340
tv384 = 2340
tv337 = 2340
tv319 = 2340
tv254 = 2340
tv233 = 2340
tv218 = 2340
tv757 = 2344
tv736 = 2344
tv676 = 2344
tv618 = 2344
tv597 = 2344
tv550 = 2344
tv544 = 2344
tv474 = 2344
tv397 = 2344
tv390 = 2344
tv289 = 2344
tv279 = 2344
tv188 = 2344
tv160 = 2344
tv149 = 2344
tv141 = 2344
tv78 = 2344
tv755 = 2348
tv760 = 2352
tv540 = 2352
tv135 = 2352
__$ArrayPad$ = 2360
tab_bar$ = 2400
?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z PROC	; ImGui::TabBarLayout, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7211
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2400				; 00000960H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 400				; 00000190H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2440]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7212
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7213
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+107], 0
; Line 7217
	mov	DWORD PTR tab_dst_n$[rbp], 0
; Line 7218
	mov	BYTE PTR need_sort_by_section$[rbp], 0
; Line 7219
	lea	r9, OFFSET FLAT:??0ImGuiTabBarSection@@QEAA@XZ ; ImGuiTabBarSection::ImGuiTabBarSection
	mov	r8d, 3
	mov	edx, 12
	lea	rcx, QWORD PTR sections$[rbp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
; Line 7220
	mov	DWORD PTR tab_src_n$5[rbp], 0
	jmp	SHORT $LN4@TabBarLayo
$LN2@TabBarLayo:
	mov	eax, DWORD PTR tab_src_n$5[rbp]
	inc	eax
	mov	DWORD PTR tab_src_n$5[rbp], eax
$LN4@TabBarLayo:
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR tab_src_n$5[rbp], eax
	jge	$LN3@TabBarLayo
; Line 7222
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv78[rbp], rax
	mov	edx, DWORD PTR tab_src_n$5[rbp]
	mov	rcx, QWORD PTR tv78[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$6[rbp], rax
; Line 7223
	mov	rax, QWORD PTR tab$6[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+40]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN21@TabBarLayo
	mov	rax, QWORD PTR tab$6[rbp]
	movzx	eax, BYTE PTR [rax+36]
	test	eax, eax
	je	SHORT $LN20@TabBarLayo
$LN21@TabBarLayo:
; Line 7226
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$6[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+32], ecx
	jne	SHORT $LN22@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+32], 0
$LN22@TabBarLayo:
; Line 7227
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$6[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+24], ecx
	jne	SHORT $LN23@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+24], 0
$LN23@TabBarLayo:
; Line 7228
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$6[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+28], ecx
	jne	SHORT $LN24@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+28], 0
$LN24@TabBarLayo:
; Line 7229
	jmp	$LN2@TabBarLayo
$LN20@TabBarLayo:
; Line 7231
	mov	eax, DWORD PTR tab_src_n$5[rbp]
	cmp	DWORD PTR tab_dst_n$[rbp], eax
	je	SHORT $LN25@TabBarLayo
; Line 7232
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv141[rbp], rax
	mov	edx, DWORD PTR tab_src_n$5[rbp]
	mov	rcx, QWORD PTR tv141[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	lea	rcx, QWORD PTR $T31[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 40					; 00000028H
	rep movsb
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv135[rbp], rax
	mov	edx, DWORD PTR tab_dst_n$[rbp]
	mov	rcx, QWORD PTR tv135[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	lea	rcx, QWORD PTR $T31[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 40					; 00000028H
	rep movsb
$LN25@TabBarLayo:
; Line 7234
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv149[rbp], rax
	mov	edx, DWORD PTR tab_dst_n$[rbp]
	mov	rcx, QWORD PTR tv149[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$6[rbp], rax
; Line 7235
	mov	rax, QWORD PTR tab$6[rbp]
	movzx	ecx, WORD PTR tab_dst_n$[rbp]
	mov	WORD PTR [rax+34], cx
; Line 7238
	mov	rcx, QWORD PTR tab$6[rbp]
	call	?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ; TabItemGetSectionIdx
	mov	DWORD PTR curr_tab_section_n$7[rbp], eax
; Line 7239
	cmp	DWORD PTR tab_dst_n$[rbp], 0
	jle	SHORT $LN26@TabBarLayo
; Line 7241
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv160[rbp], rax
	mov	eax, DWORD PTR tab_dst_n$[rbp]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv160[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR prev_tab$8[rbp], rax
; Line 7242
	mov	rcx, QWORD PTR prev_tab$8[rbp]
	call	?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ; TabItemGetSectionIdx
	mov	DWORD PTR prev_tab_section_n$9[rbp], eax
; Line 7243
	cmp	DWORD PTR curr_tab_section_n$7[rbp], 0
	jne	SHORT $LN27@TabBarLayo
	cmp	DWORD PTR prev_tab_section_n$9[rbp], 0
	je	SHORT $LN27@TabBarLayo
; Line 7244
	mov	BYTE PTR need_sort_by_section$[rbp], 1
$LN27@TabBarLayo:
; Line 7245
	cmp	DWORD PTR prev_tab_section_n$9[rbp], 2
	jne	SHORT $LN28@TabBarLayo
	cmp	DWORD PTR curr_tab_section_n$7[rbp], 2
	je	SHORT $LN28@TabBarLayo
; Line 7246
	mov	BYTE PTR need_sort_by_section$[rbp], 1
$LN28@TabBarLayo:
$LN26@TabBarLayo:
; Line 7249
	movsxd	rax, DWORD PTR curr_tab_section_n$7[rbp]
	imul	rax, rax, 12
	mov	eax, DWORD PTR sections$[rbp+rax]
	inc	eax
	movsxd	rcx, DWORD PTR curr_tab_section_n$7[rbp]
	imul	rcx, rcx, 12
	mov	DWORD PTR sections$[rbp+rcx], eax
; Line 7250
	mov	eax, DWORD PTR tab_dst_n$[rbp]
	inc	eax
	mov	DWORD PTR tab_dst_n$[rbp], eax
; Line 7251
	jmp	$LN2@TabBarLayo
$LN3@TabBarLayo:
; Line 7252
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR tab_dst_n$[rbp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN29@TabBarLayo
; Line 7253
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv188[rbp], rax
	mov	edx, DWORD PTR tab_dst_n$[rbp]
	mov	rcx, QWORD PTR tv188[rbp]
	call	?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z ; ImVector<ImGuiTabItem>::resize
$LN29@TabBarLayo:
; Line 7255
	movzx	eax, BYTE PTR need_sort_by_section$[rbp]
	test	eax, eax
	je	SHORT $LN30@TabBarLayo
; Line 7256
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsxd	rax, DWORD PTR [rax]
	lea	r9, OFFSET FLAT:?TabItemComparerBySection@@YAHPEBX0@Z ; TabItemComparerBySection
	mov	r8d, 40					; 00000028H
	mov	rdx, rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_qsort
$LN30@TabBarLayo:
; Line 7259
	mov	eax, 12
	imul	rax, rax, 0
	cmp	DWORD PTR sections$[rbp+rax], 0
	jle	SHORT $LN57@TabBarLayo
	mov	eax, 12
	imul	rax, rax, 1
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	eax, DWORD PTR sections$[rbp+rax]
	add	eax, DWORD PTR sections$[rbp+rcx]
	test	eax, eax
	jle	SHORT $LN57@TabBarLayo
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5552]
	movss	DWORD PTR tv218[rbp], xmm0
	jmp	SHORT $LN58@TabBarLayo
$LN57@TabBarLayo:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv218[rbp], xmm0
$LN58@TabBarLayo:
	mov	eax, 12
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR tv218[rbp]
	movss	DWORD PTR sections$[rbp+rax+8], xmm0
; Line 7260
	mov	eax, 12
	imul	rax, rax, 1
	cmp	DWORD PTR sections$[rbp+rax], 0
	jle	SHORT $LN59@TabBarLayo
	mov	eax, 12
	imul	rax, rax, 2
	cmp	DWORD PTR sections$[rbp+rax], 0
	jle	SHORT $LN59@TabBarLayo
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5552]
	movss	DWORD PTR tv233[rbp], xmm0
	jmp	SHORT $LN60@TabBarLayo
$LN59@TabBarLayo:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv233[rbp], xmm0
$LN60@TabBarLayo:
	mov	eax, 12
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR tv233[rbp]
	movss	DWORD PTR sections$[rbp+rax+8], xmm0
; Line 7263
	mov	DWORD PTR scroll_to_tab_id$[rbp], 0
; Line 7264
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN31@TabBarLayo
; Line 7266
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+28]
	mov	DWORD PTR [rax+24], ecx
; Line 7267
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+28], 0
; Line 7268
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR scroll_to_tab_id$[rbp], eax
$LN31@TabBarLayo:
; Line 7272
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+100], 0
	je	SHORT $LN32@TabBarLayo
; Line 7274
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z ; ImGui::TabBarProcessReorder
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@TabBarLayo
; Line 7275
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+24]
	cmp	DWORD PTR [rax+100], ecx
	jne	SHORT $LN34@TabBarLayo
; Line 7276
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+100]
	mov	DWORD PTR scroll_to_tab_id$[rbp], eax
$LN34@TabBarLayo:
$LN33@TabBarLayo:
; Line 7277
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+100], 0
$LN32@TabBarLayo:
; Line 7281
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN61@TabBarLayo
	mov	BYTE PTR tv254[rbp], 1
	jmp	SHORT $LN62@TabBarLayo
$LN61@TabBarLayo:
	mov	BYTE PTR tv254[rbp], 0
$LN62@TabBarLayo:
	movzx	eax, BYTE PTR tv254[rbp]
	mov	BYTE PTR tab_list_popup_button$[rbp], al
; Line 7282
	movzx	eax, BYTE PTR tab_list_popup_button$[rbp]
	test	eax, eax
	je	SHORT $LN35@TabBarLayo
; Line 7283
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarTabListPopupButton@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z ; ImGui::TabBarTabListPopupButton
	mov	QWORD PTR tab_to_select$10[rbp], rax
	cmp	QWORD PTR tab_to_select$10[rbp], 0
	je	SHORT $LN36@TabBarLayo
; Line 7284
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_to_select$10[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR scroll_to_tab_id$[rbp], eax
$LN36@TabBarLayo:
$LN35@TabBarLayo:
; Line 7288
	mov	DWORD PTR shrink_buffer_indexes$[rbp], 0
	mov	eax, 12
	imul	rax, rax, 0
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	eax, DWORD PTR sections$[rbp+rax]
	add	eax, DWORD PTR sections$[rbp+rcx]
	mov	DWORD PTR shrink_buffer_indexes$[rbp+4], eax
	mov	eax, 12
	imul	rax, rax, 0
	mov	eax, DWORD PTR sections$[rbp+rax]
	mov	DWORD PTR shrink_buffer_indexes$[rbp+8], eax
; Line 7289
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8344				; 00002098H
	mov	QWORD PTR tv279[rbp], rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv279[rbp]
	call	?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z ; ImVector<ImGuiShrinkWidthItem>::resize
; Line 7292
	mov	QWORD PTR most_recently_selected_tab$[rbp], 0
; Line 7293
	mov	DWORD PTR curr_section_n$[rbp], -1
; Line 7294
	mov	BYTE PTR found_selected_tab_id$[rbp], 0
; Line 7295
	mov	DWORD PTR tab_n$11[rbp], 0
	jmp	SHORT $LN7@TabBarLayo
$LN5@TabBarLayo:
	mov	eax, DWORD PTR tab_n$11[rbp]
	inc	eax
	mov	DWORD PTR tab_n$11[rbp], eax
$LN7@TabBarLayo:
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR tab_n$11[rbp], eax
	jge	$LN6@TabBarLayo
; Line 7297
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv289[rbp], rax
	mov	edx, DWORD PTR tab_n$11[rbp]
	mov	rcx, QWORD PTR tv289[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$12[rbp], rax
; Line 7298
	mov	rax, QWORD PTR tab$12[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+40]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN63@TabBarLayo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z@4JA
	add	eax, 87					; 00000057H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GG@ODBMJKON@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAF?$AAr?$AAa?$AAm?$AAe?$AAV@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN63@TabBarLayo:
; Line 7300
	cmp	QWORD PTR most_recently_selected_tab$[rbp], 0
	je	SHORT $LN38@TabBarLayo
	mov	rax, QWORD PTR most_recently_selected_tab$[rbp]
	mov	rcx, QWORD PTR tab$12[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+12], ecx
	jge	SHORT $LN37@TabBarLayo
$LN38@TabBarLayo:
	mov	rax, QWORD PTR tab$12[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	jne	SHORT $LN37@TabBarLayo
; Line 7301
	mov	rax, QWORD PTR tab$12[rbp]
	mov	QWORD PTR most_recently_selected_tab$[rbp], rax
$LN37@TabBarLayo:
; Line 7302
	mov	rax, QWORD PTR tab$12[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+24]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN39@TabBarLayo
; Line 7303
	mov	BYTE PTR found_selected_tab_id$[rbp], 1
$LN39@TabBarLayo:
; Line 7304
	cmp	DWORD PTR scroll_to_tab_id$[rbp], 0
	jne	SHORT $LN40@TabBarLayo
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR tab$12[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+7660], ecx
	jne	SHORT $LN40@TabBarLayo
; Line 7305
	mov	rax, QWORD PTR tab$12[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR scroll_to_tab_id$[rbp], eax
$LN40@TabBarLayo:
; Line 7310
	mov	rdx, QWORD PTR tab$12[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabName
	mov	QWORD PTR tab_name$13[rbp], rax
; Line 7311
	mov	rax, QWORD PTR tab$12[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN64@TabBarLayo
	mov	BYTE PTR tv319[rbp], 0
	jmp	SHORT $LN65@TabBarLayo
$LN64@TabBarLayo:
	mov	BYTE PTR tv319[rbp], 1
$LN65@TabBarLayo:
	movzx	eax, BYTE PTR tv319[rbp]
	mov	BYTE PTR has_close_button$14[rbp], al
; Line 7312
	movzx	r8d, BYTE PTR has_close_button$14[rbp]
	mov	rdx, QWORD PTR tab_name$13[rbp]
	lea	rcx, QWORD PTR $T32[rbp]
	call	?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z ; ImGui::TabItemCalcSize
	mov	rcx, QWORD PTR tab$12[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rcx+24], xmm0
; Line 7314
	mov	rcx, QWORD PTR tab$12[rbp]
	call	?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ; TabItemGetSectionIdx
	mov	DWORD PTR section_n$15[rbp], eax
; Line 7315
	movsxd	rax, DWORD PTR section_n$15[rbp]
	imul	rax, rax, 12
	lea	rax, QWORD PTR sections$[rbp+rax]
	mov	QWORD PTR section$16[rbp], rax
; Line 7316
	mov	eax, DWORD PTR curr_section_n$[rbp]
	cmp	DWORD PTR section_n$15[rbp], eax
	jne	SHORT $LN66@TabBarLayo
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5552]
	movss	DWORD PTR tv337[rbp], xmm0
	jmp	SHORT $LN67@TabBarLayo
$LN66@TabBarLayo:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv337[rbp], xmm0
$LN67@TabBarLayo:
	mov	rax, QWORD PTR tab$12[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	addss	xmm0, DWORD PTR tv337[rbp]
	mov	rax, QWORD PTR section$16[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR section$16[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 7317
	mov	eax, DWORD PTR section_n$15[rbp]
	mov	DWORD PTR curr_section_n$[rbp], eax
; Line 7321
	movsxd	rax, DWORD PTR section_n$15[rbp]
	mov	eax, DWORD PTR shrink_buffer_indexes$[rbp+rax*4]
	mov	DWORD PTR tv384[rbp], eax
	movsxd	rax, DWORD PTR section_n$15[rbp]
	mov	eax, DWORD PTR shrink_buffer_indexes$[rbp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR section_n$15[rbp]
	mov	DWORD PTR shrink_buffer_indexes$[rbp+rcx*4], eax
	mov	eax, DWORD PTR tv384[rbp]
	mov	DWORD PTR shrink_buffer_index$17[rbp], eax
; Line 7322
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8344				; 00002098H
	mov	QWORD PTR tv390[rbp], rax
	mov	edx, DWORD PTR shrink_buffer_index$17[rbp]
	mov	rcx, QWORD PTR tv390[rbp]
	call	??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z ; ImVector<ImGuiShrinkWidthItem>::operator[]
	mov	ecx, DWORD PTR tab_n$11[rbp]
	mov	DWORD PTR [rax], ecx
; Line 7323
	mov	rax, QWORD PTR tab$12[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR tv401[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8344				; 00002098H
	mov	QWORD PTR tv397[rbp], rax
	mov	edx, DWORD PTR shrink_buffer_index$17[rbp]
	mov	rcx, QWORD PTR tv397[rbp]
	call	??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z ; ImVector<ImGuiShrinkWidthItem>::operator[]
	movss	xmm0, DWORD PTR tv401[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 7325
	mov	rax, QWORD PTR tab$12[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN68@TabBarLayo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z@4JA
	add	eax, 114				; 00000072H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@IMDNAHCI@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAe?$AAn?$AAt?$AAW?$AAi?$AAd@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN68@TabBarLayo:
; Line 7326
	mov	rax, QWORD PTR tab$12[rbp]
	mov	rcx, QWORD PTR tab$12[rbp]
	movss	xmm0, DWORD PTR [rcx+24]
	movss	DWORD PTR [rax+20], xmm0
; Line 7327
	jmp	$LN5@TabBarLayo
$LN6@TabBarLayo:
; Line 7330
	mov	rax, QWORD PTR tab_bar$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+72], xmm0
; Line 7331
	mov	DWORD PTR section_n$18[rbp], 0
	jmp	SHORT $LN10@TabBarLayo
$LN8@TabBarLayo:
	mov	eax, DWORD PTR section_n$18[rbp]
	inc	eax
	mov	DWORD PTR section_n$18[rbp], eax
$LN10@TabBarLayo:
	cmp	DWORD PTR section_n$18[rbp], 3
	jge	SHORT $LN9@TabBarLayo
; Line 7332
	movsxd	rax, DWORD PTR section_n$18[rbp]
	imul	rax, rax, 12
	movsxd	rcx, DWORD PTR section_n$18[rbp]
	imul	rcx, rcx, 12
	movss	xmm0, DWORD PTR sections$[rbp+rax+4]
	addss	xmm0, DWORD PTR sections$[rbp+rcx+8]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+72], xmm0
	jmp	SHORT $LN8@TabBarLayo
$LN9@TabBarLayo:
; Line 7336
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	comiss	xmm1, xmm0
	jbe	SHORT $LN41@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax], 1
	jle	SHORT $LN41@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN41@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN41@TabBarLayo
; Line 7337
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarScrollingButtons@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@@Z ; ImGui::TabBarScrollingButtons
	mov	QWORD PTR scroll_and_select_tab$19[rbp], rax
	cmp	QWORD PTR scroll_and_select_tab$19[rbp], 0
	je	SHORT $LN42@TabBarLayo
; Line 7339
	mov	rax, QWORD PTR scroll_and_select_tab$19[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR scroll_to_tab_id$[rbp], eax
; Line 7340
	mov	rax, QWORD PTR scroll_and_select_tab$19[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	jne	SHORT $LN43@TabBarLayo
; Line 7341
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR scroll_to_tab_id$[rbp]
	mov	DWORD PTR [rax+24], ecx
$LN43@TabBarLayo:
$LN42@TabBarLayo:
$LN41@TabBarLayo:
; Line 7345
	mov	eax, 12
	imul	rax, rax, 0
	mov	ecx, 12
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR sections$[rbp+rax+4]
	addss	xmm0, DWORD PTR sections$[rbp+rcx+8]
	movss	DWORD PTR section_0_w$[rbp], xmm0
; Line 7346
	mov	eax, 12
	imul	rax, rax, 1
	mov	ecx, 12
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR sections$[rbp+rax+4]
	addss	xmm0, DWORD PTR sections$[rbp+rcx+8]
	movss	DWORD PTR section_1_w$[rbp], xmm0
; Line 7347
	mov	eax, 12
	imul	rax, rax, 2
	mov	ecx, 12
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR sections$[rbp+rax+4]
	addss	xmm0, DWORD PTR sections$[rbp+rcx+8]
	movss	DWORD PTR section_2_w$[rbp], xmm0
; Line 7348
	movss	xmm0, DWORD PTR section_0_w$[rbp]
	addss	xmm0, DWORD PTR section_2_w$[rbp]
	movss	DWORD PTR tv469[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	xmm1, DWORD PTR tv469[rbp]
	comiss	xmm0, xmm1
	jbe	SHORT $LN69@TabBarLayo
	mov	DWORD PTR tv474[rbp], 1
	jmp	SHORT $LN70@TabBarLayo
$LN69@TabBarLayo:
	mov	DWORD PTR tv474[rbp], 0
$LN70@TabBarLayo:
	movzx	eax, BYTE PTR tv474[rbp]
	mov	BYTE PTR central_section_is_visible$[rbp], al
; Line 7350
	movzx	eax, BYTE PTR central_section_is_visible$[rbp]
	test	eax, eax
	je	SHORT $LN44@TabBarLayo
; Line 7351
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	subss	xmm0, DWORD PTR section_0_w$[rbp]
	subss	xmm0, DWORD PTR section_2_w$[rbp]
	movss	xmm1, DWORD PTR section_1_w$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR width_excess$[rbp], xmm0
	jmp	SHORT $LN45@TabBarLayo
$LN44@TabBarLayo:
; Line 7353
	movss	xmm0, DWORD PTR section_0_w$[rbp]
	addss	xmm0, DWORD PTR section_2_w$[rbp]
	movss	DWORD PTR tv487[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	xmm1, DWORD PTR tv487[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR width_excess$[rbp], xmm0
$LN45@TabBarLayo:
; Line 7356
	movss	xmm0, DWORD PTR width_excess$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN46@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN47@TabBarLayo
	movzx	eax, BYTE PTR central_section_is_visible$[rbp]
	test	eax, eax
	jne	$LN46@TabBarLayo
$LN47@TabBarLayo:
; Line 7358
	movzx	eax, BYTE PTR central_section_is_visible$[rbp]
	test	eax, eax
	je	SHORT $LN71@TabBarLayo
	mov	eax, 12
	imul	rax, rax, 1
	mov	eax, DWORD PTR sections$[rbp+rax]
	mov	DWORD PTR tv510[rbp], eax
	jmp	SHORT $LN72@TabBarLayo
$LN71@TabBarLayo:
	mov	eax, 12
	imul	rax, rax, 0
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	eax, DWORD PTR sections$[rbp+rax]
	add	eax, DWORD PTR sections$[rbp+rcx]
	mov	DWORD PTR tv510[rbp], eax
$LN72@TabBarLayo:
	mov	eax, DWORD PTR tv510[rbp]
	mov	DWORD PTR shrink_data_count$20[rbp], eax
; Line 7359
	movzx	eax, BYTE PTR central_section_is_visible$[rbp]
	test	eax, eax
	je	SHORT $LN73@TabBarLayo
	mov	eax, 12
	imul	rax, rax, 0
	mov	ecx, 12
	imul	rcx, rcx, 2
	mov	eax, DWORD PTR sections$[rbp+rax]
	add	eax, DWORD PTR sections$[rbp+rcx]
	mov	DWORD PTR tv520[rbp], eax
	jmp	SHORT $LN74@TabBarLayo
$LN73@TabBarLayo:
	mov	DWORD PTR tv520[rbp], 0
$LN74@TabBarLayo:
	mov	eax, DWORD PTR tv520[rbp]
	mov	DWORD PTR shrink_data_offset$21[rbp], eax
; Line 7360
	movsxd	rax, DWORD PTR shrink_data_offset$21[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR [rcx+8352]
	lea	rax, QWORD PTR [rcx+rax*8]
	movss	xmm2, DWORD PTR width_excess$[rbp]
	mov	edx, DWORD PTR shrink_data_count$20[rbp]
	mov	rcx, rax
	call	?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z ; ImGui::ShrinkWidths
; Line 7363
	mov	eax, DWORD PTR shrink_data_offset$21[rbp]
	mov	DWORD PTR tab_n$22[rbp], eax
	jmp	SHORT $LN13@TabBarLayo
$LN11@TabBarLayo:
	mov	eax, DWORD PTR tab_n$22[rbp]
	inc	eax
	mov	DWORD PTR tab_n$22[rbp], eax
$LN13@TabBarLayo:
	mov	eax, DWORD PTR shrink_data_count$20[rbp]
	mov	ecx, DWORD PTR shrink_data_offset$21[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR tab_n$22[rbp], eax
	jge	$LN12@TabBarLayo
; Line 7365
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv544[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8344				; 00002098H
	mov	QWORD PTR tv540[rbp], rax
	mov	edx, DWORD PTR tab_n$22[rbp]
	mov	rcx, QWORD PTR tv540[rbp]
	call	??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z ; ImVector<ImGuiShrinkWidthItem>::operator[]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv544[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$23[rbp], rax
; Line 7366
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8344				; 00002098H
	mov	QWORD PTR tv550[rbp], rax
	mov	edx, DWORD PTR tab_n$22[rbp]
	mov	rcx, QWORD PTR tv550[rbp]
	call	??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z ; ImVector<ImGuiShrinkWidthItem>::operator[]
	cvttss2si eax, DWORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR shrinked_width$24[rbp], xmm0
; Line 7367
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR shrinked_width$24[rbp]
	jbe	SHORT $LN48@TabBarLayo
; Line 7368
	jmp	$LN11@TabBarLayo
$LN48@TabBarLayo:
; Line 7370
	mov	rcx, QWORD PTR tab$23[rbp]
	call	?TabItemGetSectionIdx@@YAHPEBUImGuiTabItem@@@Z ; TabItemGetSectionIdx
	mov	DWORD PTR section_n$25[rbp], eax
; Line 7371
	mov	rax, QWORD PTR tab$23[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	subss	xmm0, DWORD PTR shrinked_width$24[rbp]
	movsxd	rax, DWORD PTR section_n$25[rbp]
	imul	rax, rax, 12
	movss	xmm1, DWORD PTR sections$[rbp+rax+4]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR section_n$25[rbp]
	imul	rax, rax, 12
	movss	DWORD PTR sections$[rbp+rax+4], xmm0
; Line 7372
	mov	rax, QWORD PTR tab$23[rbp]
	movss	xmm0, DWORD PTR shrinked_width$24[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 7373
	jmp	$LN11@TabBarLayo
$LN12@TabBarLayo:
$LN46@TabBarLayo:
; Line 7377
	mov	DWORD PTR section_tab_index$[rbp], 0
; Line 7378
	xorps	xmm0, xmm0
	movss	DWORD PTR tab_offset$[rbp], xmm0
; Line 7379
	mov	rax, QWORD PTR tab_bar$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+68], xmm0
; Line 7380
	mov	DWORD PTR section_n$26[rbp], 0
	jmp	SHORT $LN16@TabBarLayo
$LN14@TabBarLayo:
	mov	eax, DWORD PTR section_n$26[rbp]
	inc	eax
	mov	DWORD PTR section_n$26[rbp], eax
$LN16@TabBarLayo:
	cmp	DWORD PTR section_n$26[rbp], 3
	jge	$LN15@TabBarLayo
; Line 7382
	movsxd	rax, DWORD PTR section_n$26[rbp]
	imul	rax, rax, 12
	lea	rax, QWORD PTR sections$[rbp+rax]
	mov	QWORD PTR section$27[rbp], rax
; Line 7383
	cmp	DWORD PTR section_n$26[rbp], 2
	jne	SHORT $LN49@TabBarLayo
; Line 7384
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	mov	rax, QWORD PTR section$27[rbp]
	subss	xmm0, DWORD PTR [rax+4]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tab_offset$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tab_offset$[rbp], xmm0
$LN49@TabBarLayo:
; Line 7386
	mov	DWORD PTR tab_n$28[rbp], 0
	jmp	SHORT $LN19@TabBarLayo
$LN17@TabBarLayo:
	mov	eax, DWORD PTR tab_n$28[rbp]
	inc	eax
	mov	DWORD PTR tab_n$28[rbp], eax
$LN19@TabBarLayo:
	mov	rax, QWORD PTR section$27[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR tab_n$28[rbp], eax
	jge	$LN18@TabBarLayo
; Line 7388
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv597[rbp], rax
	mov	eax, DWORD PTR tab_n$28[rbp]
	mov	ecx, DWORD PTR section_tab_index$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv597[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$29[rbp], rax
; Line 7389
	mov	rax, QWORD PTR tab$29[rbp]
	movss	xmm0, DWORD PTR tab_offset$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 7390
	mov	rax, QWORD PTR section$27[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cmp	DWORD PTR tab_n$28[rbp], eax
	jge	SHORT $LN75@TabBarLayo
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5552]
	movss	DWORD PTR tv606[rbp], xmm0
	jmp	SHORT $LN76@TabBarLayo
$LN75@TabBarLayo:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv606[rbp], xmm0
$LN76@TabBarLayo:
	mov	rax, QWORD PTR tab$29[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR tv606[rbp]
	movss	xmm1, DWORD PTR tab_offset$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tab_offset$[rbp], xmm0
; Line 7391
	jmp	$LN17@TabBarLayo
$LN18@TabBarLayo:
; Line 7392
	mov	rax, QWORD PTR section$27[rbp]
	mov	rcx, QWORD PTR section$27[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+8]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv620[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	movss	DWORD PTR tv618[rbp], xmm0
	movss	xmm0, DWORD PTR tv618[rbp]
	addss	xmm0, DWORD PTR tv620[rbp]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+68], xmm0
; Line 7393
	mov	rax, QWORD PTR section$27[rbp]
	movss	xmm0, DWORD PTR tab_offset$[rbp]
	addss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR tab_offset$[rbp], xmm0
; Line 7394
	mov	rax, QWORD PTR section$27[rbp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR section_tab_index$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR section_tab_index$[rbp], eax
; Line 7395
	jmp	$LN14@TabBarLayo
$LN15@TabBarLayo:
; Line 7398
	movzx	eax, BYTE PTR found_selected_tab_id$[rbp]
	test	eax, eax
	jne	SHORT $LN50@TabBarLayo
; Line 7399
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+24], 0
$LN50@TabBarLayo:
; Line 7400
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN51@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+28], 0
	jne	SHORT $LN51@TabBarLayo
	cmp	QWORD PTR most_recently_selected_tab$[rbp], 0
	je	SHORT $LN51@TabBarLayo
; Line 7401
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR most_recently_selected_tab$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR scroll_to_tab_id$[rbp], eax
$LN51@TabBarLayo:
; Line 7404
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rax+32], ecx
; Line 7405
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+108], 0
; Line 7408
	cmp	DWORD PTR scroll_to_tab_id$[rbp], 0
	je	SHORT $LN52@TabBarLayo
; Line 7409
	lea	r8, QWORD PTR sections$[rbp]
	mov	edx, DWORD PTR scroll_to_tab_id$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarScrollToTab@ImGui@@YAXPEAUImGuiTabBar@@IPEAUImGuiTabBarSection@@@Z ; ImGui::TabBarScrollToTab
$LN52@TabBarLayo:
; Line 7410
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+76]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z ; ImGui::TabBarScrollClamp
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+76], xmm0
; Line 7411
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarScrollClamp@ImGui@@YAMPEAUImGuiTabBar@@M@Z ; ImGui::TabBarScrollClamp
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+80], xmm0
; Line 7412
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	ucomiss	xmm0, DWORD PTR [rcx+80]
	jp	SHORT $LN81@TabBarLayo
	je	$LN53@TabBarLayo
$LN81@TabBarLayo:
; Line 7416
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR __real@428c0000
	mulss	xmm0, DWORD PTR [rax+6528]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+88]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+88], xmm0
; Line 7417
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	subss	xmm0, DWORD PTR [rcx+76]
	call	fabsf
	divss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR tv678[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+88]
	movss	DWORD PTR tv676[rbp], xmm0
	movss	xmm1, DWORD PTR tv678[rbp]
	movss	xmm0, DWORD PTR tv676[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+88], xmm0
; Line 7418
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	rcx, QWORD PTR g$[rbp]
	cmp	eax, DWORD PTR [rcx+7056]
	jl	SHORT $LN77@TabBarLayo
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR __real@41200000
	mulss	xmm0, DWORD PTR [rax+6528]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+84]
	comiss	xmm1, xmm0
	ja	SHORT $LN77@TabBarLayo
	mov	BYTE PTR tv687[rbp], 0
	jmp	SHORT $LN78@TabBarLayo
$LN77@TabBarLayo:
	mov	BYTE PTR tv687[rbp], 1
$LN78@TabBarLayo:
	movzx	eax, BYTE PTR tv687[rbp]
	mov	BYTE PTR teleport$30[rbp], al
; Line 7419
	movzx	eax, BYTE PTR teleport$30[rbp]
	test	eax, eax
	je	SHORT $LN79@TabBarLayo
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR tv702[rbp], xmm0
	jmp	SHORT $LN80@TabBarLayo
$LN79@TabBarLayo:
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	mulss	xmm0, DWORD PTR [rcx+88]
	movaps	xmm2, xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	call	?ImLinearSweep@@YAMMMM@Z		; ImLinearSweep
	movss	DWORD PTR tv702[rbp], xmm0
$LN80@TabBarLayo:
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR tv702[rbp]
	movss	DWORD PTR [rax+76], xmm0
; Line 7420
	jmp	SHORT $LN54@TabBarLayo
$LN53@TabBarLayo:
; Line 7423
	mov	rax, QWORD PTR tab_bar$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+88], xmm0
$LN54@TabBarLayo:
; Line 7425
	mov	eax, 12
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rcx+44]
	addss	xmm0, DWORD PTR sections$[rbp+rax+4]
	mov	eax, 12
	imul	rax, rax, 0
	addss	xmm0, DWORD PTR sections$[rbp+rax+8]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+92], xmm0
; Line 7426
	mov	eax, 12
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rcx+52]
	subss	xmm0, DWORD PTR sections$[rbp+rax+4]
	mov	eax, 12
	imul	rax, rax, 1
	subss	xmm0, DWORD PTR sections$[rbp+rax+8]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+96], xmm0
; Line 7429
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN55@TabBarLayo
; Line 7430
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 136				; 00000088H
	mov	QWORD PTR tv736[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv736[rbp]
	call	?resize@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::resize
$LN55@TabBarLayo:
; Line 7433
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7434
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rax, QWORD PTR [rax+44]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 7435
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+124]
	movss	DWORD PTR tv762[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	?GetHeight@ImRect@@QEBAMXZ		; ImRect::GetHeight
	movss	DWORD PTR tv757[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	movss	DWORD PTR tv755[rbp], xmm0
	movss	xmm2, DWORD PTR tv757[rbp]
	movss	xmm1, DWORD PTR tv755[rbp]
	lea	rcx, QWORD PTR $T33[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv760[rbp], rax
	movss	xmm1, DWORD PTR tv762[rbp]
	mov	rcx, QWORD PTR tv760[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 7436
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+44]
	addss	xmm0, DWORD PTR [rcx+72]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+248]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+248], xmm0
; Line 7437
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2368]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z ENDP	; ImGui::TabBarLayout
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTabBarSection@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTabBarSection@@QEAA@XZ PROC			; ImGuiTabBarSection::ImGuiTabBarSection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7038
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 12
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTabBarSection@@QEAA@XZ ENDP			; ImGuiTabBarSection::ImGuiTabBarSection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Plot_ArrayGetter@@YAMPEAXH@Z
_TEXT	SEGMENT
plot_data$ = 8
v$ = 36
data$ = 288
idx$ = 296
?Plot_ArrayGetter@@YAMPEAXH@Z PROC			; Plot_ArrayGetter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6516
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6517
	mov	rax, QWORD PTR data$[rbp]
	mov	QWORD PTR plot_data$[rbp], rax
; Line 6518
	movsxd	rax, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR plot_data$[rbp]
	movsxd	rcx, DWORD PTR [rcx+8]
	imul	rax, rcx
	mov	rcx, QWORD PTR plot_data$[rbp]
	mov	rcx, QWORD PTR [rcx]
	movss	xmm0, DWORD PTR [rax+rcx]
	movss	DWORD PTR v$[rbp], xmm0
; Line 6519
	movss	xmm0, DWORD PTR v$[rbp]
; Line 6520
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?Plot_ArrayGetter@@YAMPEAXH@Z ENDP			; Plot_ArrayGetter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z
_TEXT	SEGMENT
this$ = 224
values$ = 232
stride$ = 240
??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z PROC		; ImGuiPlotArrayGetterData::ImGuiPlotArrayGetterData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6512
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR values$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR stride$[rbp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z ENDP		; ImGuiPlotArrayGetterData::ImGuiPlotArrayGetterData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z
_TEXT	SEGMENT
alpha8$ = 4
$T1 = 228
$T2 = 260
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 388
$T7 = 420
$T8 = 456
$T9 = 488
$T10 = 516
tv160 = 532
tv93 = 532
draw_list$ = 576
pos$ = 584
half_sz$ = 592
bar_w$ = 600
alpha$ = 608
?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z PROC ; RenderArrowsForVerticalBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5013
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5014
	movss	xmm0, DWORD PTR alpha$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR alpha8$[rbp], eax
; Line 5015
	movss	xmm0, DWORD PTR half_sz$[rbp+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR half_sz$[rbp]
	addss	xmm1, DWORD PTR __real@40000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T4[rbp], rax
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR half_sz$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T3[rbp], rax
	mov	eax, DWORD PTR alpha8$[rbp]
	shl	eax, 24
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 1
	mov	r8, QWORD PTR $T4[rbp]
	mov	rdx, QWORD PTR $T3[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ; ImGui::RenderArrowPointingAt
; Line 5016
	mov	eax, DWORD PTR alpha8$[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	or	eax, 65280				; 0000ff00H
	or	eax, 255				; 000000ffH
	mov	DWORD PTR tv93[rbp], eax
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR half_sz$[rbp]
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	ecx, DWORD PTR tv93[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, 1
	mov	r8, QWORD PTR half_sz$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ; ImGui::RenderArrowPointingAt
; Line 5017
	movss	xmm0, DWORD PTR half_sz$[rbp+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR half_sz$[rbp]
	addss	xmm1, DWORD PTR __real@40000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T9[rbp], rax
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR bar_w$[rbp]
	subss	xmm0, DWORD PTR half_sz$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T8[rbp], rax
	mov	eax, DWORD PTR alpha8$[rbp]
	shl	eax, 24
	mov	DWORD PTR [rsp+32], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR $T9[rbp]
	mov	rdx, QWORD PTR $T8[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ; ImGui::RenderArrowPointingAt
; Line 5018
	mov	eax, DWORD PTR alpha8$[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	or	eax, 65280				; 0000ff00H
	or	eax, 255				; 000000ffH
	mov	DWORD PTR tv160[rbp], eax
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR bar_w$[rbp]
	subss	xmm0, DWORD PTR half_sz$[rbp]
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	ecx, DWORD PTR tv160[rbp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	mov	r8, QWORD PTR half_sz$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ; ImGui::RenderArrowPointingAt
; Line 5019
	lea	rsp, QWORD PTR [rbp+552]
	pop	rdi
	pop	rbp
	ret	0
?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z ENDP ; RenderArrowsForVerticalBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
text$ = 240
text_len$ = 248
?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z PROC ; ImStb::stb_textedit_replace, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3760
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3761
	mov	eax, DWORD PTR text_len$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR str$[rbp]
	mov	r9d, DWORD PTR [rax+4]
	xor	r8d, r8d
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z ; ImStb::stb_text_makeundo_replace
; Line 3762
	mov	rax, QWORD PTR str$[rbp]
	mov	r8d, DWORD PTR [rax+4]
	xor	edx, edx
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_DELETECHARS
; Line 3763
	cmp	DWORD PTR text_len$[rbp], 0
	jg	SHORT $LN2@stb_texted
; Line 3764
	jmp	SHORT $LN1@stb_texted
$LN2@stb_texted:
; Line 3765
	mov	r9d, DWORD PTR text_len$[rbp]
	mov	r8, QWORD PTR text$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ; ImStb::STB_TEXTEDIT_INSERTCHARS
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@stb_texted
; Line 3767
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR text_len$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 3768
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 3769
	jmp	SHORT $LN1@stb_texted
$LN3@stb_texted:
; Line 3771
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN5@stb_texted
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@2@PEBGH@Z@4JA
	add	eax, 11
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stb_texted:
$LN1@stb_texted:
; Line 3772
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z ENDP ; ImStb::stb_textedit_replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
ctext$ = 240
len$ = 248
?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z PROC ; ImStb::stb_textedit_paste, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1399
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1400
	mov	r9d, DWORD PTR len$[rbp]
	mov	r8, QWORD PTR ctext$[rbp]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z ; ImStb::stb_textedit_paste_internal
; Line 1401
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z ENDP ; ImStb::stb_textedit_paste
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z
_TEXT	SEGMENT
state$ = 224
is_single_line$ = 232
?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z PROC ; ImStb::stb_textedit_initialize_state, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1389
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1390
	mov	edx, DWORD PTR is_single_line$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z ; ImStb::stb_textedit_clear_state
; Line 1391
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z ENDP ; ImStb::stb_textedit_initialize_state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z
_TEXT	SEGMENT
state$ = 224
is_single_line$ = 232
?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z PROC ; ImStb::stb_textedit_clear_state, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1371
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1372
	xor	eax, eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3614], ax
; Line 1373
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+3620], 0
; Line 1374
	mov	eax, 99					; 00000063H
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3616], ax
; Line 1375
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+3624], 999		; 000003e7H
; Line 1376
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+8], 0
; Line 1377
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax], 0
; Line 1378
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1379
	mov	rax, QWORD PTR state$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+28], xmm0
; Line 1380
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+20], 0
; Line 1381
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+21], 1
; Line 1382
	mov	rax, QWORD PTR state$[rbp]
	movzx	ecx, BYTE PTR is_single_line$[rbp]
	mov	BYTE PTR [rax+23], cl
; Line 1383
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+12], 0
; Line 1384
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+16], 0
; Line 1385
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_clear_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z ENDP ; ImStb::stb_textedit_clear_state
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z
_TEXT	SEGMENT
r$ = 8
state$ = 256
pos$ = 264
insert_len$ = 272
delete_len$ = 280
?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z PROC ; ImStb::stb_text_createundo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1206
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1207
	mov	edx, DWORD PTR insert_len$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z ; ImStb::stb_text_create_undo_record
	mov	QWORD PTR r$[rbp], rax
; Line 1208
	cmp	QWORD PTR r$[rbp], 0
	jne	SHORT $LN2@stb_text_c
; Line 1209
	xor	eax, eax
	jmp	$LN1@stb_text_c
$LN2@stb_text_c:
; Line 1211
	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 1212
	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR insert_len$[rbp]
	mov	DWORD PTR [rax+4], ecx
; Line 1213
	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR delete_len$[rbp]
	mov	DWORD PTR [rax+8], ecx
; Line 1215
	cmp	DWORD PTR insert_len$[rbp], 0
	jne	SHORT $LN3@stb_text_c
; Line 1216
	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax+12], -1
; Line 1217
	xor	eax, eax
	jmp	SHORT $LN1@stb_text_c
; Line 1218
	jmp	SHORT $LN4@stb_text_c
$LN3@stb_text_c:
; Line 1219
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+3588]
	mov	DWORD PTR [rax+12], ecx
; Line 1220
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+3588]
	add	eax, DWORD PTR insert_len$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+3588], eax
; Line 1221
	mov	rax, QWORD PTR r$[rbp]
	movsxd	rax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2+1584]
$LN4@stb_text_c:
$LN1@stb_text_c:
; Line 1223
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z ENDP ; ImStb::stb_text_createundo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z
_TEXT	SEGMENT
tv84 = 192
state$ = 240
numchars$ = 248
?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z PROC ; ImStb::stb_text_create_undo_record, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1182
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1184
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z ; ImStb::stb_textedit_flush_redo
; Line 1188
	mov	rax, QWORD PTR state$[rbp]
	movsx	eax, WORD PTR [rax+3582]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN4@stb_text_c
; Line 1189
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z ; ImStb::stb_textedit_discard_undo
$LN4@stb_text_c:
; Line 1192
	cmp	DWORD PTR numchars$[rbp], 999		; 000003e7H
	jle	SHORT $LN5@stb_text_c
; Line 1193
	xor	eax, eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3582], ax
; Line 1194
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+3588], 0
; Line 1195
	xor	eax, eax
	jmp	SHORT $LN1@stb_text_c
$LN5@stb_text_c:
$LN2@stb_text_c:
; Line 1199
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+3588]
	add	eax, DWORD PTR numchars$[rbp]
	cmp	eax, 999				; 000003e7H
	jle	SHORT $LN3@stb_text_c
; Line 1200
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z ; ImStb::stb_textedit_discard_undo
	jmp	SHORT $LN2@stb_text_c
$LN3@stb_text_c:
; Line 1202
	mov	rax, QWORD PTR state$[rbp]
	movsx	rax, WORD PTR [rax+3582]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv84[rbp], rax
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax+3582]
	inc	ax
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3582], ax
	mov	rax, QWORD PTR tv84[rbp]
$LN1@stb_text_c:
; Line 1203
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?stb_text_create_undo_record@ImStb@@YAPEAUStbUndoRecord@1@PEAUStbUndoState@1@H@Z ENDP ; ImStb::stb_text_create_undo_record
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z
_TEXT	SEGMENT
k$ = 4
n$1 = 36
i$2 = 68
move_size$3 = 104
buf_begin$4 = 136
buf_end$5 = 168
tv134 = 376
state$ = 416
?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z PROC ; ImStb::stb_textedit_discard_redo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1152
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1153
	mov	DWORD PTR k$[rbp], 98			; 00000062H
; Line 1155
	mov	rax, QWORD PTR state$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	cmp	eax, DWORD PTR k$[rbp]
	jg	$LN5@stb_texted
; Line 1157
	movsxd	rax, DWORD PTR k$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rcx+rax+12], 0
	jl	$LN6@stb_texted
; Line 1158
	movsxd	rax, DWORD PTR k$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rcx+rax+4]
	mov	DWORD PTR n$1[rbp], eax
; Line 1160
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+3592]
	add	eax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+3592], eax
; Line 1161
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, 999				; 000003e7H
	sub	ecx, DWORD PTR [rax+3592]
	mov	eax, ecx
	cdqe
	shl	rax, 1
	mov	rcx, QWORD PTR state$[rbp]
	movsxd	rcx, DWORD PTR [rcx+3592]
	mov	rdx, QWORD PTR state$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*2+1584]
	movsxd	rdx, DWORD PTR n$1[rbp]
	shl	rdx, 1
	sub	rcx, rdx
	mov	rdx, QWORD PTR state$[rbp]
	movsxd	rdx, DWORD PTR [rdx+3592]
	mov	r8, QWORD PTR state$[rbp]
	lea	rdx, QWORD PTR [r8+rdx*2+1584]
	mov	QWORD PTR tv134[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv134[rbp]
	mov	rcx, rax
	call	memmove
; Line 1163
	mov	rax, QWORD PTR state$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	mov	DWORD PTR i$2[rbp], eax
	jmp	SHORT $LN4@stb_texted
$LN2@stb_texted:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN4@stb_texted:
	mov	eax, DWORD PTR k$[rbp]
	cmp	DWORD PTR i$2[rbp], eax
	jge	SHORT $LN3@stb_texted
; Line 1164
	movsxd	rax, DWORD PTR i$2[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rcx+rax+12], 0
	jl	SHORT $LN7@stb_texted
; Line 1165
	movsxd	rax, DWORD PTR i$2[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rcx+rax+12]
	add	eax, DWORD PTR n$1[rbp]
	movsxd	rcx, DWORD PTR i$2[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rdx+rcx+12], eax
$LN7@stb_texted:
	jmp	SHORT $LN2@stb_texted
$LN3@stb_texted:
$LN6@stb_texted:
; Line 1169
	mov	rax, QWORD PTR state$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	mov	ecx, 99					; 00000063H
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	QWORD PTR move_size$3[rbp], rax
; Line 1170
	mov	rax, QWORD PTR state$[rbp]
	mov	QWORD PTR buf_begin$4[rbp], rax
; Line 1171
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 1584				; 00000630H
	mov	QWORD PTR buf_end$5[rbp], rax
; Line 1172
	mov	rax, QWORD PTR state$[rbp]
	movsx	rax, WORD PTR [rax+3584]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR buf_begin$4[rbp]
	jae	SHORT $LN9@stb_texted
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@2@@Z@4JA
	add	eax, 20
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@MBLIEGNC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HI@OHEJKGLD@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stb_texted:
; Line 1173
	mov	rax, QWORD PTR state$[rbp]
	movsx	rax, WORD PTR [rax+3584]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR move_size$3[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR state$[rbp]
	lea	rax, QWORD PTR [rcx+rax+16]
	cmp	rax, QWORD PTR buf_end$5[rbp]
	jbe	SHORT $LN10@stb_texted
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@2@@Z@4JA
	add	eax, 21
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@MBLIEGNC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JE@JEJNCKKO@?$AA?$CI?$AA?$CI?$AAc?$AAh?$AAa?$AAr?$AA?$CK?$AA?$CJ?$AA?$CI?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stb_texted:
; Line 1174
	mov	rax, QWORD PTR state$[rbp]
	movsx	rax, WORD PTR [rax+3584]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR state$[rbp]
	movsx	rcx, WORD PTR [rcx+3584]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR state$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx+16]
	mov	r8, QWORD PTR move_size$3[rbp]
	mov	rdx, rax
	call	memmove
; Line 1177
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax+3584]
	inc	ax
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3584], ax
$LN5@stb_texted:
; Line 1179
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z ENDP ; ImStb::stb_textedit_discard_redo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z
_TEXT	SEGMENT
n$1 = 4
i$2 = 36
tv158 = 248
tv91 = 248
state$ = 288
?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z PROC ; ImStb::stb_textedit_discard_undo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1130
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1131
	mov	rax, QWORD PTR state$[rbp]
	movsx	eax, WORD PTR [rax+3582]
	test	eax, eax
	jle	$LN5@stb_texted
; Line 1133
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rcx+rax+12], 0
	jl	$LN6@stb_texted
; Line 1134
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rcx+rax+4]
	mov	DWORD PTR n$1[rbp], eax
; Line 1136
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$1[rbp]
	mov	eax, DWORD PTR [rax+3588]
	sub	eax, ecx
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+3588], eax
; Line 1137
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+3588]
	shl	rax, 1
	movsxd	rcx, DWORD PTR n$1[rbp]
	mov	rdx, QWORD PTR state$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*2+1584]
	mov	rdx, QWORD PTR state$[rbp]
	add	rdx, 1584				; 00000630H
	mov	QWORD PTR tv91[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv91[rbp]
	mov	rcx, rax
	call	memmove
; Line 1138
	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN4@stb_texted
$LN2@stb_texted:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN4@stb_texted:
	mov	rax, QWORD PTR state$[rbp]
	movsx	eax, WORD PTR [rax+3582]
	cmp	DWORD PTR i$2[rbp], eax
	jge	SHORT $LN3@stb_texted
; Line 1139
	movsxd	rax, DWORD PTR i$2[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rcx+rax+12], 0
	jl	SHORT $LN7@stb_texted
; Line 1140
	movsxd	rax, DWORD PTR i$2[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR n$1[rbp]
	mov	eax, DWORD PTR [rcx+rax+12]
	sub	eax, edx
	movsxd	rcx, DWORD PTR i$2[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rdx+rcx+12], eax
$LN7@stb_texted:
	jmp	SHORT $LN2@stb_texted
$LN3@stb_texted:
$LN6@stb_texted:
; Line 1142
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, WORD PTR [rax+3582]
	dec	ax
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3582], ax
; Line 1143
	mov	rax, QWORD PTR state$[rbp]
	movsx	rax, WORD PTR [rax+3582]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR state$[rbp]
	add	rcx, 16
	mov	rdx, QWORD PTR state$[rbp]
	mov	QWORD PTR tv158[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv158[rbp]
	mov	rcx, rax
	call	memmove
$LN5@stb_texted:
; Line 1145
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_discard_undo@ImStb@@YAXPEAUStbUndoState@1@@Z ENDP ; ImStb::stb_textedit_discard_undo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z
_TEXT	SEGMENT
state$ = 224
?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z PROC ; ImStb::stb_textedit_flush_redo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1123
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1124
	mov	eax, 99					; 00000063H
	mov	rcx, QWORD PTR state$[rbp]
	mov	WORD PTR [rcx+3584], ax
; Line 1125
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+3592], 999		; 000003e7H
; Line 1126
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_flush_redo@ImStb@@YAXPEAUStbUndoState@1@@Z ENDP ; ImStb::stb_textedit_flush_redo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z
_TEXT	SEGMENT
c$8 = 4
ch$9 = 36
find$10 = 72
row$11 = 120
i$12 = 164
j$13 = 196
sel$14 = 228
is_page$15 = 260
row_count$16 = 292
x$17 = 324
goal_x$18 = 356
start$19 = 388
dx$20 = 420
find$21 = 456
row$22 = 504
i$23 = 548
j$24 = 580
prev_scan$25 = 612
sel$26 = 644
is_page$27 = 676
row_count$28 = 708
x$29 = 740
goal_x$30 = 772
dx$31 = 804
n$32 = 836
n$33 = 868
n$34 = 900
tv480 = 1300
tv419 = 1300
tv359 = 1300
tv331 = 1300
tv328 = 1300
tv325 = 1300
tv287 = 1300
tv258 = 1300
tv255 = 1300
tv252 = 1300
tv64 = 1300
__$ArrayPad$ = 1304
str$ = 1344
state$ = 1352
key$ = 1360
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z PROC ; ImStb::stb_textedit_key, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 733
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1368				; 00000558H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 234				; 000000eaH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1400]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
$LN126@stb_texted:
$retry$129:
; Line 735
	mov	eax, DWORD PTR key$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 6291456		; 00600000H
	jg	SHORT $LN125@stb_texted
	cmp	DWORD PTR tv64[rbp], 6291456		; 00600000H
	je	$LN42@stb_texted
	mov	eax, DWORD PTR tv64[rbp]
	sub	eax, 2097152				; 00200000H
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 15
	ja	SHORT $LN26@stb_texted
	movsxd	rax, DWORD PTR tv64[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN128@stb_texted[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN125@stb_texted:
	mov	eax, DWORD PTR tv64[rbp]
	sub	eax, 6291457				; 00600001H
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 14
	ja	SHORT $LN26@stb_texted
	movsxd	rax, DWORD PTR tv64[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN127@stb_texted[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN26@stb_texted:
; Line 737
	mov	ecx, DWORD PTR key$[rbp]
	call	?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z	; ImStb::STB_TEXTEDIT_KEYTOTEXT
	mov	DWORD PTR c$8[rbp], eax
; Line 738
	cmp	DWORD PTR c$8[rbp], 0
	jle	$LN27@stb_texted
; Line 739
	movzx	eax, WORD PTR c$8[rbp]
	mov	WORD PTR ch$9[rbp], ax
; Line 742
	cmp	DWORD PTR c$8[rbp], 10
	jne	SHORT $LN28@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN28@stb_texted
; Line 743
	jmp	$LN2@stb_texted
$LN28@stb_texted:
; Line 745
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+12]
	test	eax, eax
	je	$LN29@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jne	$LN29@stb_texted
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	rcx, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rcx], eax
	jge	$LN29@stb_texted
; Line 746
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z ; ImStb::stb_text_makeundo_replace
; Line 747
	mov	r8d, 1
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_DELETECHARS
; Line 748
	mov	r9d, 1
	lea	r8, QWORD PTR ch$9[rbp]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ; ImStb::STB_TEXTEDIT_INSERTCHARS
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@stb_texted
; Line 749
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 750
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
$LN31@stb_texted:
; Line 752
	jmp	SHORT $LN30@stb_texted
$LN29@stb_texted:
; Line 753
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_delete_selection
; Line 754
	mov	r9d, 1
	lea	r8, QWORD PTR ch$9[rbp]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ; ImStb::STB_TEXTEDIT_INSERTCHARS
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN32@stb_texted
; Line 755
	mov	r8d, 1
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_text_makeundo_insert
; Line 756
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 757
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
$LN32@stb_texted:
$LN30@stb_texted:
$LN27@stb_texted:
; Line 761
	jmp	$LN2@stb_texted
$LN33@stb_texted:
; Line 771
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_text_undo
; Line 772
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 773
	jmp	$LN2@stb_texted
$LN34@stb_texted:
; Line 776
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_text_redo
; Line 777
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 778
	jmp	$LN2@stb_texted
$LN35@stb_texted:
; Line 782
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN36@stb_texted
; Line 783
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_first
	jmp	SHORT $LN37@stb_texted
$LN36@stb_texted:
; Line 785
	mov	rax, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN38@stb_texted
; Line 786
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
$LN38@stb_texted:
$LN37@stb_texted:
; Line 787
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 788
	jmp	$LN2@stb_texted
$LN39@stb_texted:
; Line 792
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN40@stb_texted
; Line 793
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_last
	jmp	SHORT $LN41@stb_texted
$LN40@stb_texted:
; Line 795
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
$LN41@stb_texted:
; Line 796
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 797
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 798
	jmp	$LN2@stb_texted
$LN42@stb_texted:
; Line 801
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 802
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
; Line 804
	mov	rax, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rax+8], 0
	jle	SHORT $LN43@stb_texted
; Line 805
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	dec	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+8], eax
$LN43@stb_texted:
; Line 806
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
; Line 807
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 808
	jmp	$LN2@stb_texted
$LN44@stb_texted:
; Line 812
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN45@stb_texted
; Line 813
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_first
	jmp	SHORT $LN46@stb_texted
$LN45@stb_texted:
; Line 815
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_MOVEWORDLEFT_IMPL
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 816
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
$LN46@stb_texted:
; Line 818
	jmp	$LN2@stb_texted
$LN47@stb_texted:
; Line 821
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN48@stb_texted
; Line 822
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
$LN48@stb_texted:
; Line 824
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_MOVEWORDLEFT_IMPL
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 825
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
; Line 827
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 828
	jmp	$LN2@stb_texted
$LN49@stb_texted:
; Line 833
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN50@stb_texted
; Line 834
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_last
	jmp	SHORT $LN51@stb_texted
$LN50@stb_texted:
; Line 836
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_MOVEWORDRIGHT_IMPL
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 837
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
$LN51@stb_texted:
; Line 839
	jmp	$LN2@stb_texted
$LN52@stb_texted:
; Line 842
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN53@stb_texted
; Line 843
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
$LN53@stb_texted:
; Line 845
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_MOVEWORDRIGHT_IMPL
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 846
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
; Line 848
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 849
	jmp	$LN2@stb_texted
$LN54@stb_texted:
; Line 853
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
; Line 855
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 856
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 857
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
; Line 858
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 859
	jmp	$LN2@stb_texted
$LN55@stb_texted:
$LN56@stb_texted:
$LN57@stb_texted:
$LN58@stb_texted:
; Line 867
	mov	eax, DWORD PTR key$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	SHORT $LN107@stb_texted
	mov	DWORD PTR tv252[rbp], 1
	jmp	SHORT $LN108@stb_texted
$LN107@stb_texted:
	mov	DWORD PTR tv252[rbp], 0
$LN108@stb_texted:
	mov	eax, DWORD PTR tv252[rbp]
	mov	DWORD PTR sel$14[rbp], eax
; Line 868
	mov	eax, DWORD PTR key$[rbp]
	btr	eax, 22
	cmp	eax, 2097167				; 0020000fH
	jne	SHORT $LN109@stb_texted
	mov	DWORD PTR tv255[rbp], 1
	jmp	SHORT $LN110@stb_texted
$LN109@stb_texted:
	mov	DWORD PTR tv255[rbp], 0
$LN110@stb_texted:
	mov	eax, DWORD PTR tv255[rbp]
	mov	DWORD PTR is_page$15[rbp], eax
; Line 869
	cmp	DWORD PTR is_page$15[rbp], 0
	je	SHORT $LN111@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv258[rbp], eax
	jmp	SHORT $LN112@stb_texted
$LN111@stb_texted:
	mov	DWORD PTR tv258[rbp], 1
$LN112@stb_texted:
	mov	eax, DWORD PTR tv258[rbp]
	mov	DWORD PTR row_count$16[rbp], eax
; Line 871
	cmp	DWORD PTR is_page$15[rbp], 0
	jne	SHORT $LN59@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN59@stb_texted
; Line 873
	mov	eax, DWORD PTR key$[rbp]
	and	eax, 4194304				; 00400000H
	or	eax, 2097153				; 00200001H
	mov	DWORD PTR key$[rbp], eax
; Line 874
	jmp	$retry$129
$LN59@stb_texted:
; Line 877
	cmp	DWORD PTR sel$14[rbp], 0
	je	SHORT $LN60@stb_texted
; Line 878
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
	jmp	SHORT $LN61@stb_texted
$LN60@stb_texted:
; Line 879
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN62@stb_texted
; Line 880
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_last
$LN62@stb_texted:
$LN61@stb_texted:
; Line 883
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 884
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	mov	r9d, eax
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR find$10[rbp]
	call	?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z ; ImStb::stb_textedit_find_charpos
; Line 886
	mov	DWORD PTR j$13[rbp], 0
	jmp	SHORT $LN6@stb_texted
$LN4@stb_texted:
	mov	eax, DWORD PTR j$13[rbp]
	inc	eax
	mov	DWORD PTR j$13[rbp], eax
$LN6@stb_texted:
	mov	eax, DWORD PTR row_count$16[rbp]
	cmp	DWORD PTR j$13[rbp], eax
	jge	$LN5@stb_texted
; Line 887
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+22]
	test	eax, eax
	je	SHORT $LN113@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR tv287[rbp], xmm0
	jmp	SHORT $LN114@stb_texted
$LN113@stb_texted:
	movss	xmm0, DWORD PTR find$10[rbp]
	movss	DWORD PTR tv287[rbp], xmm0
$LN114@stb_texted:
	movss	xmm0, DWORD PTR tv287[rbp]
	movss	DWORD PTR goal_x$18[rbp], xmm0
; Line 888
	mov	eax, DWORD PTR find$10[rbp+16]
	mov	ecx, DWORD PTR find$10[rbp+12]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR start$19[rbp], eax
; Line 890
	cmp	DWORD PTR find$10[rbp+16], 0
	jne	SHORT $LN63@stb_texted
; Line 891
	jmp	$LN5@stb_texted
$LN63@stb_texted:
; Line 895
	mov	eax, DWORD PTR find$10[rbp+12]
	mov	ecx, DWORD PTR find$10[rbp+16]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	je	SHORT $LN64@stb_texted
; Line 896
	jmp	$LN5@stb_texted
$LN64@stb_texted:
; Line 899
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR start$19[rbp]
	mov	DWORD PTR [rax], ecx
; Line 900
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR row$11[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 901
	movss	xmm0, DWORD PTR row$11[rbp]
	movss	DWORD PTR x$17[rbp], xmm0
; Line 902
	mov	DWORD PTR i$12[rbp], 0
	jmp	SHORT $LN9@stb_texted
$LN7@stb_texted:
	mov	eax, DWORD PTR i$12[rbp]
	inc	eax
	mov	DWORD PTR i$12[rbp], eax
$LN9@stb_texted:
	mov	eax, DWORD PTR row$11[rbp+20]
	cmp	DWORD PTR i$12[rbp], eax
	jge	SHORT $LN8@stb_texted
; Line 903
	mov	r8d, DWORD PTR i$12[rbp]
	mov	edx, DWORD PTR start$19[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_GETWIDTH
	movss	DWORD PTR dx$20[rbp], xmm0
; Line 905
	movss	xmm0, DWORD PTR dx$20[rbp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN65@stb_texted
	jne	SHORT $LN65@stb_texted
; Line 906
	jmp	SHORT $LN8@stb_texted
$LN65@stb_texted:
; Line 908
	movss	xmm0, DWORD PTR x$17[rbp]
	addss	xmm0, DWORD PTR dx$20[rbp]
	movss	DWORD PTR x$17[rbp], xmm0
; Line 909
	movss	xmm0, DWORD PTR x$17[rbp]
	comiss	xmm0, DWORD PTR goal_x$18[rbp]
	jbe	SHORT $LN66@stb_texted
; Line 910
	jmp	SHORT $LN8@stb_texted
$LN66@stb_texted:
; Line 911
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 912
	jmp	$LN7@stb_texted
$LN8@stb_texted:
; Line 913
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 915
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 1
; Line 916
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm0, DWORD PTR goal_x$18[rbp]
	movss	DWORD PTR [rax+28], xmm0
; Line 918
	cmp	DWORD PTR sel$14[rbp], 0
	je	SHORT $LN67@stb_texted
; Line 919
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
$LN67@stb_texted:
; Line 922
	mov	eax, DWORD PTR find$10[rbp+16]
	mov	ecx, DWORD PTR find$10[rbp+12]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR find$10[rbp+12], eax
; Line 923
	mov	eax, DWORD PTR row$11[rbp+20]
	mov	DWORD PTR find$10[rbp+16], eax
; Line 924
	jmp	$LN4@stb_texted
$LN5@stb_texted:
; Line 925
	jmp	$LN2@stb_texted
$LN68@stb_texted:
$LN69@stb_texted:
$LN70@stb_texted:
$LN71@stb_texted:
; Line 934
	mov	eax, DWORD PTR key$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	SHORT $LN115@stb_texted
	mov	DWORD PTR tv325[rbp], 1
	jmp	SHORT $LN116@stb_texted
$LN115@stb_texted:
	mov	DWORD PTR tv325[rbp], 0
$LN116@stb_texted:
	mov	eax, DWORD PTR tv325[rbp]
	mov	DWORD PTR sel$26[rbp], eax
; Line 935
	mov	eax, DWORD PTR key$[rbp]
	btr	eax, 22
	cmp	eax, 2097166				; 0020000eH
	jne	SHORT $LN117@stb_texted
	mov	DWORD PTR tv328[rbp], 1
	jmp	SHORT $LN118@stb_texted
$LN117@stb_texted:
	mov	DWORD PTR tv328[rbp], 0
$LN118@stb_texted:
	mov	eax, DWORD PTR tv328[rbp]
	mov	DWORD PTR is_page$27[rbp], eax
; Line 936
	cmp	DWORD PTR is_page$27[rbp], 0
	je	SHORT $LN119@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv331[rbp], eax
	jmp	SHORT $LN120@stb_texted
$LN119@stb_texted:
	mov	DWORD PTR tv331[rbp], 1
$LN120@stb_texted:
	mov	eax, DWORD PTR tv331[rbp]
	mov	DWORD PTR row_count$28[rbp], eax
; Line 938
	cmp	DWORD PTR is_page$27[rbp], 0
	jne	SHORT $LN72@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN72@stb_texted
; Line 940
	mov	eax, DWORD PTR key$[rbp]
	and	eax, 4194304				; 00400000H
	bts	eax, 21
	mov	DWORD PTR key$[rbp], eax
; Line 941
	jmp	$LN126@stb_texted
$LN72@stb_texted:
; Line 944
	cmp	DWORD PTR sel$26[rbp], 0
	je	SHORT $LN73@stb_texted
; Line 945
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
	jmp	SHORT $LN74@stb_texted
$LN73@stb_texted:
; Line 946
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN75@stb_texted
; Line 947
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_first
$LN75@stb_texted:
$LN74@stb_texted:
; Line 950
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 951
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	mov	r9d, eax
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR find$21[rbp]
	call	?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z ; ImStb::stb_textedit_find_charpos
; Line 953
	mov	DWORD PTR j$24[rbp], 0
	jmp	SHORT $LN12@stb_texted
$LN10@stb_texted:
	mov	eax, DWORD PTR j$24[rbp]
	inc	eax
	mov	DWORD PTR j$24[rbp], eax
$LN12@stb_texted:
	mov	eax, DWORD PTR row_count$28[rbp]
	cmp	DWORD PTR j$24[rbp], eax
	jge	$LN11@stb_texted
; Line 954
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+22]
	test	eax, eax
	je	SHORT $LN121@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR tv359[rbp], xmm0
	jmp	SHORT $LN122@stb_texted
$LN121@stb_texted:
	movss	xmm0, DWORD PTR find$21[rbp]
	movss	DWORD PTR tv359[rbp], xmm0
$LN122@stb_texted:
	movss	xmm0, DWORD PTR tv359[rbp]
	movss	DWORD PTR goal_x$30[rbp], xmm0
; Line 957
	mov	eax, DWORD PTR find$21[rbp+12]
	cmp	DWORD PTR find$21[rbp+20], eax
	jne	SHORT $LN76@stb_texted
; Line 958
	jmp	$LN11@stb_texted
$LN76@stb_texted:
; Line 961
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR find$21[rbp+20]
	mov	DWORD PTR [rax], ecx
; Line 962
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR row$22[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 963
	movss	xmm0, DWORD PTR row$22[rbp]
	movss	DWORD PTR x$29[rbp], xmm0
; Line 964
	mov	DWORD PTR i$23[rbp], 0
	jmp	SHORT $LN15@stb_texted
$LN13@stb_texted:
	mov	eax, DWORD PTR i$23[rbp]
	inc	eax
	mov	DWORD PTR i$23[rbp], eax
$LN15@stb_texted:
	mov	eax, DWORD PTR row$22[rbp+20]
	cmp	DWORD PTR i$23[rbp], eax
	jge	SHORT $LN14@stb_texted
; Line 965
	mov	r8d, DWORD PTR i$23[rbp]
	mov	edx, DWORD PTR find$21[rbp+20]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_GETWIDTH
	movss	DWORD PTR dx$31[rbp], xmm0
; Line 967
	movss	xmm0, DWORD PTR dx$31[rbp]
	ucomiss	xmm0, DWORD PTR __real@bf800000
	jp	SHORT $LN77@stb_texted
	jne	SHORT $LN77@stb_texted
; Line 968
	jmp	SHORT $LN14@stb_texted
$LN77@stb_texted:
; Line 970
	movss	xmm0, DWORD PTR x$29[rbp]
	addss	xmm0, DWORD PTR dx$31[rbp]
	movss	DWORD PTR x$29[rbp], xmm0
; Line 971
	movss	xmm0, DWORD PTR x$29[rbp]
	comiss	xmm0, DWORD PTR goal_x$30[rbp]
	jbe	SHORT $LN78@stb_texted
; Line 972
	jmp	SHORT $LN14@stb_texted
$LN78@stb_texted:
; Line 973
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 974
	jmp	$LN13@stb_texted
$LN14@stb_texted:
; Line 975
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 977
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 1
; Line 978
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm0, DWORD PTR goal_x$30[rbp]
	movss	DWORD PTR [rax+28], xmm0
; Line 980
	cmp	DWORD PTR sel$26[rbp], 0
	je	SHORT $LN79@stb_texted
; Line 981
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
$LN79@stb_texted:
; Line 985
	cmp	DWORD PTR find$21[rbp+20], 0
	jle	SHORT $LN123@stb_texted
	mov	eax, DWORD PTR find$21[rbp+20]
	dec	eax
	mov	DWORD PTR tv419[rbp], eax
	jmp	SHORT $LN124@stb_texted
$LN123@stb_texted:
	mov	DWORD PTR tv419[rbp], 0
$LN124@stb_texted:
	mov	eax, DWORD PTR tv419[rbp]
	mov	DWORD PTR prev_scan$25[rbp], eax
$LN16@stb_texted:
; Line 986
	cmp	DWORD PTR prev_scan$25[rbp], 0
	jle	SHORT $LN17@stb_texted
	mov	eax, DWORD PTR prev_scan$25[rbp]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	je	SHORT $LN17@stb_texted
; Line 987
	mov	eax, DWORD PTR prev_scan$25[rbp]
	dec	eax
	mov	DWORD PTR prev_scan$25[rbp], eax
	jmp	SHORT $LN16@stb_texted
$LN17@stb_texted:
; Line 988
	mov	eax, DWORD PTR find$21[rbp+20]
	mov	DWORD PTR find$21[rbp+12], eax
; Line 989
	mov	eax, DWORD PTR prev_scan$25[rbp]
	mov	DWORD PTR find$21[rbp+20], eax
; Line 990
	jmp	$LN10@stb_texted
$LN11@stb_texted:
; Line 991
	jmp	$LN2@stb_texted
$LN80@stb_texted:
$LN81@stb_texted:
; Line 996
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN82@stb_texted
; Line 997
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_delete_selection
	jmp	SHORT $LN83@stb_texted
$LN82@stb_texted:
; Line 999
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR n$32[rbp], eax
; Line 1000
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$32[rbp]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN84@stb_texted
; Line 1001
	mov	r9d, 1
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_textedit_delete
$LN84@stb_texted:
$LN83@stb_texted:
; Line 1003
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1004
	jmp	$LN2@stb_texted
$LN85@stb_texted:
$LN86@stb_texted:
; Line 1008
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN87@stb_texted
; Line 1009
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_delete_selection
	jmp	SHORT $LN88@stb_texted
$LN87@stb_texted:
; Line 1011
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 1012
	mov	rax, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN89@stb_texted
; Line 1013
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	r9d, 1
	mov	r8d, eax
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_textedit_delete
; Line 1014
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
$LN89@stb_texted:
$LN88@stb_texted:
; Line 1017
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1018
	jmp	$LN2@stb_texted
$LN90@stb_texted:
; Line 1024
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax], 0
; Line 1025
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1026
	jmp	$LN2@stb_texted
$LN91@stb_texted:
; Line 1032
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 1033
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+4], 0
; Line 1034
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1035
	jmp	$LN2@stb_texted
$LN92@stb_texted:
; Line 1041
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
; Line 1042
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax], 0
; Line 1043
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1044
	jmp	$LN2@stb_texted
$LN93@stb_texted:
; Line 1050
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
; Line 1051
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR tv480[rbp], eax
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR tv480[rbp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR tv480[rbp]
	mov	DWORD PTR [rax], ecx
; Line 1052
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1053
	jmp	$LN2@stb_texted
$LN94@stb_texted:
; Line 1060
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 1061
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_first
; Line 1062
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN95@stb_texted
; Line 1063
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN96@stb_texted
$LN95@stb_texted:
$LN18@stb_texted:
; Line 1064
	mov	rax, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN19@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	je	SHORT $LN19@stb_texted
; Line 1065
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN18@stb_texted
$LN19@stb_texted:
$LN96@stb_texted:
; Line 1066
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1067
	jmp	$LN2@stb_texted
$LN97@stb_texted:
; Line 1073
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR n$33[rbp], eax
; Line 1074
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 1075
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_move_to_first
; Line 1076
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN98@stb_texted
; Line 1077
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$33[rbp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN99@stb_texted
$LN98@stb_texted:
$LN20@stb_texted:
; Line 1078
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$33[rbp]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN21@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	je	SHORT $LN21@stb_texted
; Line 1079
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN20@stb_texted
$LN21@stb_texted:
$LN99@stb_texted:
; Line 1080
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1081
	jmp	$LN2@stb_texted
$LN100@stb_texted:
; Line 1088
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 1089
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
; Line 1090
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN101@stb_texted
; Line 1091
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax], 0
	jmp	SHORT $LN102@stb_texted
$LN101@stb_texted:
$LN22@stb_texted:
; Line 1092
	mov	rax, QWORD PTR state$[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN23@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	je	SHORT $LN23@stb_texted
; Line 1093
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN22@stb_texted
$LN23@stb_texted:
$LN102@stb_texted:
; Line 1094
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
; Line 1095
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 1096
	jmp	$LN2@stb_texted
$LN103@stb_texted:
; Line 1102
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR n$34[rbp], eax
; Line 1103
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 1104
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_prep_selection_at_cursor
; Line 1105
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN104@stb_texted
; Line 1106
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$34[rbp]
	mov	DWORD PTR [rax], ecx
	jmp	SHORT $LN105@stb_texted
$LN104@stb_texted:
$LN24@stb_texted:
; Line 1107
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$34[rbp]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN25@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	je	SHORT $LN25@stb_texted
; Line 1108
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN24@stb_texted
$LN25@stb_texted:
$LN105@stb_texted:
; Line 1109
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
; Line 1110
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
$LN2@stb_texted:
; Line 1114
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1320]
	pop	rdi
	pop	rbp
	ret	0
	npad	3
$LN128@stb_texted:
	DD	$LN35@stb_texted
	DD	$LN39@stb_texted
	DD	$LN68@stb_texted
	DD	$LN55@stb_texted
	DD	$LN94@stb_texted
	DD	$LN97@stb_texted
	DD	$LN90@stb_texted
	DD	$LN91@stb_texted
	DD	$LN80@stb_texted
	DD	$LN85@stb_texted
	DD	$LN33@stb_texted
	DD	$LN34@stb_texted
	DD	$LN44@stb_texted
	DD	$LN49@stb_texted
	DD	$LN70@stb_texted
	DD	$LN57@stb_texted
$LN127@stb_texted:
	DD	$LN54@stb_texted
	DD	$LN69@stb_texted
	DD	$LN56@stb_texted
	DD	$LN100@stb_texted
	DD	$LN103@stb_texted
	DD	$LN92@stb_texted
	DD	$LN93@stb_texted
	DD	$LN81@stb_texted
	DD	$LN86@stb_texted
	DD	$LN26@stb_texted
	DD	$LN26@stb_texted
	DD	$LN47@stb_texted
	DD	$LN52@stb_texted
	DD	$LN71@stb_texted
	DD	$LN58@stb_texted
?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z ENDP ; ImStb::stb_textedit_key
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
text$ = 240
len$ = 248
?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z PROC ; ImStb::stb_textedit_paste_internal, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 708
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 710
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 711
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_delete_selection
; Line 713
	mov	r9d, DWORD PTR len$[rbp]
	mov	r8, QWORD PTR text$[rbp]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ; ImStb::STB_TEXTEDIT_INSERTCHARS
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@stb_texted
; Line 714
	mov	r8d, DWORD PTR len$[rbp]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_text_makeundo_insert
; Line 715
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR len$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 716
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 717
	mov	eax, 1
	jmp	SHORT $LN1@stb_texted
$LN2@stb_texted:
; Line 724
	xor	eax, eax
$LN1@stb_texted:
; Line 725
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_paste_internal@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEAGH@Z ENDP ; ImStb::stb_textedit_paste_internal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_cut, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 697
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 698
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN2@stb_texted
; Line 699
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_delete_selection
; Line 700
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 701
	mov	eax, 1
	jmp	SHORT $LN1@stb_texted
$LN2@stb_texted:
; Line 703
	xor	eax, eax
$LN1@stb_texted:
; Line 704
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_cut
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
state$ = 224
?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_prep_selection_at_cursor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 688
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 689
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN2@stb_texted
; Line 690
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx
	jmp	SHORT $LN3@stb_texted
$LN2@stb_texted:
; Line 692
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN3@stb_texted:
; Line 693
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_prep_selection_at_cursor@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_prep_selection_at_cursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_move_to_last, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 637
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 638
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN2@stb_texted
; Line 639
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_sortselection
; Line 640
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 641
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
; Line 642
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+4], ecx
; Line 643
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
$LN2@stb_texted:
; Line 645
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_move_to_last@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_move_to_last
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
state$ = 224
?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_move_to_first, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 626
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 627
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN2@stb_texted
; Line 628
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_sortselection
; Line 629
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 630
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+8], ecx
; Line 631
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
$LN2@stb_texted:
; Line 633
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_move_to_first@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_move_to_first
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
temp$1 = 4
state$ = 256
?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_sortselection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 616
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 617
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN2@stb_texted
; Line 618
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR temp$1[rbp], eax
; Line 619
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+8], ecx
; Line 620
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR temp$1[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN2@stb_texted:
; Line 622
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_sortselection@ImStb@@YAXPEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_sortselection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_delete_selection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 600
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 601
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_clamp
; Line 602
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	$LN2@stb_texted
; Line 603
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jge	SHORT $LN3@stb_texted
; Line 604
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	r9d, eax
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_textedit_delete
; Line 605
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
; Line 606
	jmp	SHORT $LN4@stb_texted
$LN3@stb_texted:
; Line 607
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	r9d, eax
	mov	rax, QWORD PTR state$[rbp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_textedit_delete
; Line 608
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+4], ecx
$LN4@stb_texted:
; Line 610
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
$LN2@stb_texted:
; Line 612
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_delete_selection@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_delete_selection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z
_TEXT	SEGMENT
str$ = 224
state$ = 232
where$ = 240
len$ = 248
?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z PROC ; ImStb::stb_textedit_delete, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 592
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 593
	mov	r9d, DWORD PTR len$[rbp]
	mov	r8d, DWORD PTR where$[rbp]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ; ImStb::stb_text_makeundo_delete
; Line 594
	mov	r8d, DWORD PTR len$[rbp]
	mov	edx, DWORD PTR where$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_DELETECHARS
; Line 595
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 596
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ENDP ; ImStb::stb_textedit_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
n$ = 4
str$ = 256
state$ = 264
?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_textedit_clamp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 578
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 579
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR n$[rbp], eax
; Line 580
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	je	SHORT $LN2@stb_texted
; Line 581
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	cmp	DWORD PTR [rax+4], ecx
	jle	SHORT $LN3@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN3@stb_texted:
; Line 582
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	cmp	DWORD PTR [rax+8], ecx
	jle	SHORT $LN4@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	mov	DWORD PTR [rax+8], ecx
$LN4@stb_texted:
; Line 584
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN5@stb_texted
; Line 585
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN5@stb_texted:
$LN2@stb_texted:
; Line 587
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	cmp	DWORD PTR [rax], ecx
	jle	SHORT $LN6@stb_texted
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	mov	DWORD PTR [rax], ecx
$LN6@stb_texted:
; Line 588
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_clamp@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_textedit_clamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z
_TEXT	SEGMENT
r$ = 8
prev_start$ = 52
z$ = 84
i$ = 116
first$ = 148
tv148 = 356
tv146 = 360
__$ArrayPad$ = 368
find$ = 416
str$ = 424
n$ = 432
single_line$ = 440
?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z PROC ; ImStb::stb_textedit_find_charpos, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 519
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 521
	mov	DWORD PTR prev_start$[rbp], 0
; Line 522
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR z$[rbp], eax
; Line 523
	mov	DWORD PTR i$[rbp], 0
; Line 525
	mov	eax, DWORD PTR z$[rbp]
	cmp	DWORD PTR n$[rbp], eax
	jne	$LN10@stb_texted
; Line 528
	cmp	DWORD PTR single_line$[rbp], 0
	je	SHORT $LN11@stb_texted
; Line 529
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR r$[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 530
	mov	rax, QWORD PTR find$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
; Line 531
	mov	rax, QWORD PTR find$[rbp]
	mov	DWORD PTR [rax+12], 0
; Line 532
	mov	rax, QWORD PTR find$[rbp]
	mov	ecx, DWORD PTR z$[rbp]
	mov	DWORD PTR [rax+16], ecx
; Line 533
	movss	xmm0, DWORD PTR r$[rbp+16]
	subss	xmm0, DWORD PTR r$[rbp+12]
	mov	rax, QWORD PTR find$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 534
	mov	rax, QWORD PTR find$[rbp]
	movss	xmm0, DWORD PTR r$[rbp+4]
	movss	DWORD PTR [rax], xmm0
; Line 535
	jmp	$LN12@stb_texted
$LN11@stb_texted:
; Line 536
	mov	rax, QWORD PTR find$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
; Line 537
	mov	rax, QWORD PTR find$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
; Line 538
	mov	rax, QWORD PTR find$[rbp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+8], xmm0
$LN2@stb_texted:
; Line 539
	mov	eax, DWORD PTR z$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stb_texted
; Line 540
	mov	r8d, DWORD PTR i$[rbp]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR r$[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 541
	mov	eax, DWORD PTR i$[rbp]
	mov	DWORD PTR prev_start$[rbp], eax
; Line 542
	mov	eax, DWORD PTR r$[rbp+20]
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rbp], eax
; Line 543
	jmp	SHORT $LN2@stb_texted
$LN3@stb_texted:
; Line 544
	mov	rax, QWORD PTR find$[rbp]
	mov	ecx, DWORD PTR i$[rbp]
	mov	DWORD PTR [rax+12], ecx
; Line 545
	mov	rax, QWORD PTR find$[rbp]
	mov	DWORD PTR [rax+16], 0
; Line 546
	mov	rax, QWORD PTR find$[rbp]
	mov	ecx, DWORD PTR prev_start$[rbp]
	mov	DWORD PTR [rax+20], ecx
$LN12@stb_texted:
; Line 548
	jmp	$LN1@stb_texted
$LN10@stb_texted:
; Line 552
	mov	rax, QWORD PTR find$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
$LN4@stb_texted:
; Line 555
	mov	r8d, DWORD PTR i$[rbp]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR r$[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 556
	mov	eax, DWORD PTR r$[rbp+20]
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR n$[rbp], eax
	jge	SHORT $LN13@stb_texted
; Line 557
	jmp	SHORT $LN5@stb_texted
$LN13@stb_texted:
; Line 558
	mov	eax, DWORD PTR i$[rbp]
	mov	DWORD PTR prev_start$[rbp], eax
; Line 559
	mov	eax, DWORD PTR r$[rbp+20]
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rbp], eax
; Line 560
	mov	rax, QWORD PTR find$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR r$[rbp+8]
	mov	rax, QWORD PTR find$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 561
	jmp	SHORT $LN4@stb_texted
$LN5@stb_texted:
; Line 563
	mov	eax, DWORD PTR i$[rbp]
	mov	DWORD PTR first$[rbp], eax
	mov	rax, QWORD PTR find$[rbp]
	mov	ecx, DWORD PTR first$[rbp]
	mov	DWORD PTR [rax+12], ecx
; Line 564
	mov	rax, QWORD PTR find$[rbp]
	mov	ecx, DWORD PTR r$[rbp+20]
	mov	DWORD PTR [rax+16], ecx
; Line 565
	movss	xmm0, DWORD PTR r$[rbp+16]
	subss	xmm0, DWORD PTR r$[rbp+12]
	mov	rax, QWORD PTR find$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 566
	mov	rax, QWORD PTR find$[rbp]
	mov	ecx, DWORD PTR prev_start$[rbp]
	mov	DWORD PTR [rax+20], ecx
; Line 569
	mov	rax, QWORD PTR find$[rbp]
	movss	xmm0, DWORD PTR r$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 570
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN9@stb_texted
$LN7@stb_texted:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN9@stb_texted:
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR first$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR n$[rbp]
	jge	SHORT $LN8@stb_texted
; Line 571
	mov	r8d, DWORD PTR i$[rbp]
	mov	edx, DWORD PTR first$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_GETWIDTH
	movss	DWORD PTR tv148[rbp], xmm0
	mov	rax, QWORD PTR find$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv146[rbp], xmm0
	movss	xmm0, DWORD PTR tv146[rbp]
	addss	xmm0, DWORD PTR tv148[rbp]
	mov	rax, QWORD PTR find$[rbp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN7@stb_texted
$LN8@stb_texted:
$LN1@stb_texted:
; Line 572
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_find_charpos@ImStb@@YAXPEAUStbFindState@1@PEAUImGuiInputTextState@@HH@Z ENDP ; ImStb::stb_textedit_find_charpos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z
_TEXT	SEGMENT
i$ = 4
p$ = 40
str$ = 288
state$ = 296
where$ = 304
old_length$ = 312
new_length$ = 320
?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z PROC ; ImStb::stb_text_makeundo_replace, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1360
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1362
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	mov	r9d, DWORD PTR new_length$[rbp]
	mov	r8d, DWORD PTR old_length$[rbp]
	mov	edx, DWORD PTR where$[rbp]
	mov	rcx, rax
	call	?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z ; ImStb::stb_text_createundo
	mov	QWORD PTR p$[rbp], rax
; Line 1363
	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN5@stb_text_m
; Line 1364
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stb_text_m
$LN2@stb_text_m:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stb_text_m:
	mov	eax, DWORD PTR old_length$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stb_text_m
; Line 1365
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR where$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movsxd	rcx, DWORD PTR i$[rbp]
	mov	rdx, QWORD PTR p$[rbp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stb_text_m
$LN3@stb_text_m:
$LN5@stb_text_m:
; Line 1367
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stb_text_makeundo_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HHH@Z ENDP ; ImStb::stb_text_makeundo_replace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z
_TEXT	SEGMENT
state$ = 224
where$ = 232
length$ = 240
?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z PROC ; ImStb::stb_text_makeundo_insert, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1345
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1346
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	mov	r9d, DWORD PTR length$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR where$[rbp]
	mov	rcx, rax
	call	?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z ; ImStb::stb_text_createundo
; Line 1347
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_text_makeundo_insert@ImStb@@YAXPEAUSTB_TexteditState@1@HH@Z ENDP ; ImStb::stb_text_makeundo_insert
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z
_TEXT	SEGMENT
i$ = 4
p$ = 40
str$ = 288
state$ = 296
where$ = 304
length$ = 312
?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z PROC ; ImStb::stb_text_makeundo_delete, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1350
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1352
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	xor	r9d, r9d
	mov	r8d, DWORD PTR length$[rbp]
	mov	edx, DWORD PTR where$[rbp]
	mov	rcx, rax
	call	?stb_text_createundo@ImStb@@YAPEAGPEAUStbUndoState@1@HHH@Z ; ImStb::stb_text_createundo
	mov	QWORD PTR p$[rbp], rax
; Line 1353
	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN5@stb_text_m
; Line 1354
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stb_text_m
$LN2@stb_text_m:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stb_text_m:
	mov	eax, DWORD PTR length$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stb_text_m
; Line 1355
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR where$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movsxd	rcx, DWORD PTR i$[rbp]
	mov	rdx, QWORD PTR p$[rbp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stb_text_m
$LN3@stb_text_m:
$LN5@stb_text_m:
; Line 1357
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stb_text_makeundo_delete@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@HH@Z ENDP ; ImStb::stb_text_makeundo_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
s$ = 8
u$ = 40
r$ = 72
i$4 = 116
tv144 = 324
str$ = 368
state$ = 376
?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_text_redo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1294
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 368				; 00000170H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1295
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR s$[rbp], rax
; Line 1297
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN5@stb_text_r
; Line 1298
	jmp	$LN1@stb_text_r
$LN5@stb_text_r:
; Line 1301
	mov	rax, QWORD PTR s$[rbp]
	movsx	rax, WORD PTR [rax+3582]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR s$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR u$[rbp], rax
; Line 1302
	mov	rax, QWORD PTR s$[rbp]
	movsx	rax, WORD PTR [rax+3584]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR r$[rbp]
	mov	rdx, QWORD PTR s$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 16
	rep movsb
; Line 1307
	mov	rax, QWORD PTR u$[rbp]
	mov	ecx, DWORD PTR r$[rbp+4]
	mov	DWORD PTR [rax+8], ecx
; Line 1308
	mov	rax, QWORD PTR u$[rbp]
	mov	ecx, DWORD PTR r$[rbp+8]
	mov	DWORD PTR [rax+4], ecx
; Line 1309
	mov	rax, QWORD PTR u$[rbp]
	mov	ecx, DWORD PTR r$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 1310
	mov	rax, QWORD PTR u$[rbp]
	mov	DWORD PTR [rax+12], -1
; Line 1312
	cmp	DWORD PTR r$[rbp+8], 0
	je	$LN6@stb_text_r
; Line 1316
	mov	rax, QWORD PTR s$[rbp]
	mov	eax, DWORD PTR [rax+3588]
	mov	rcx, QWORD PTR u$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR s$[rbp]
	cmp	eax, DWORD PTR [rcx+3592]
	jle	SHORT $LN7@stb_text_r
; Line 1317
	mov	rax, QWORD PTR u$[rbp]
	mov	DWORD PTR [rax+4], 0
; Line 1318
	mov	rax, QWORD PTR u$[rbp]
	mov	DWORD PTR [rax+8], 0
; Line 1319
	jmp	$LN8@stb_text_r
$LN7@stb_text_r:
; Line 1321
	mov	rax, QWORD PTR u$[rbp]
	mov	rcx, QWORD PTR s$[rbp]
	mov	ecx, DWORD PTR [rcx+3588]
	mov	DWORD PTR [rax+12], ecx
; Line 1322
	mov	rax, QWORD PTR s$[rbp]
	mov	eax, DWORD PTR [rax+3588]
	mov	rcx, QWORD PTR u$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	rcx, QWORD PTR s$[rbp]
	mov	DWORD PTR [rcx+3588], eax
; Line 1325
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN4@stb_text_r
$LN2@stb_text_r:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN4@stb_text_r:
	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR i$4[rbp], eax
	jge	SHORT $LN3@stb_text_r
; Line 1326
	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR i$4[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	mov	WORD PTR tv144[rbp], ax
	mov	rax, QWORD PTR u$[rbp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR i$4[rbp]
	cdqe
	mov	rcx, QWORD PTR s$[rbp]
	movzx	edx, WORD PTR tv144[rbp]
	mov	WORD PTR [rcx+rax*2+1584], dx
	jmp	SHORT $LN2@stb_text_r
$LN3@stb_text_r:
$LN8@stb_text_r:
; Line 1329
	mov	r8d, DWORD PTR r$[rbp+8]
	mov	edx, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_DELETECHARS
$LN6@stb_text_r:
; Line 1332
	cmp	DWORD PTR r$[rbp+4], 0
	je	SHORT $LN9@stb_text_r
; Line 1334
	movsxd	rax, DWORD PTR r$[rbp+12]
	mov	rcx, QWORD PTR s$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2+1584]
	mov	r9d, DWORD PTR r$[rbp+4]
	mov	r8, rax
	mov	edx, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ; ImStb::STB_TEXTEDIT_INSERTCHARS
; Line 1335
	mov	rax, QWORD PTR s$[rbp]
	mov	eax, DWORD PTR [rax+3592]
	add	eax, DWORD PTR r$[rbp+4]
	mov	rcx, QWORD PTR s$[rbp]
	mov	DWORD PTR [rcx+3592], eax
$LN9@stb_text_r:
; Line 1338
	mov	eax, DWORD PTR r$[rbp+4]
	mov	ecx, DWORD PTR r$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 1340
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, WORD PTR [rax+3582]
	inc	ax
	mov	rcx, QWORD PTR s$[rbp]
	mov	WORD PTR [rcx+3582], ax
; Line 1341
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, WORD PTR [rax+3584]
	inc	ax
	mov	rcx, QWORD PTR s$[rbp]
	mov	WORD PTR [rcx+3584], ax
$LN1@stb_text_r:
; Line 1342
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+336]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stb_text_redo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_text_redo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z
_TEXT	SEGMENT
s$ = 8
u$ = 40
r$ = 88
i$4 = 116
tv158 = 324
str$ = 368
state$ = 376
?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z PROC ; ImStb::stb_text_undo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 1226
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 368				; 00000170H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 1227
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR s$[rbp], rax
; Line 1229
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, WORD PTR [rax+3582]
	test	eax, eax
	jne	SHORT $LN7@stb_text_u
; Line 1230
	jmp	$LN1@stb_text_u
$LN7@stb_text_u:
; Line 1233
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, WORD PTR [rax+3582]
	dec	eax
	cdqe
	imul	rax, rax, 16
	lea	rcx, QWORD PTR u$[rbp]
	mov	rdx, QWORD PTR s$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 16
	rep movsb
; Line 1234
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR s$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$[rbp], rax
; Line 1235
	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax+12], -1
; Line 1237
	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR u$[rbp+8]
	mov	DWORD PTR [rax+4], ecx
; Line 1238
	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR u$[rbp+4]
	mov	DWORD PTR [rax+8], ecx
; Line 1239
	mov	rax, QWORD PTR r$[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 1241
	cmp	DWORD PTR u$[rbp+8], 0
	je	$LN8@stb_text_u
; Line 1252
	mov	rax, QWORD PTR s$[rbp]
	mov	eax, DWORD PTR [rax+3588]
	add	eax, DWORD PTR u$[rbp+8]
	cmp	eax, 999				; 000003e7H
	jl	SHORT $LN9@stb_text_u
; Line 1254
	mov	rax, QWORD PTR r$[rbp]
	mov	DWORD PTR [rax+4], 0
; Line 1255
	jmp	$LN10@stb_text_u
$LN9@stb_text_u:
$LN2@stb_text_u:
; Line 1259
	mov	rax, QWORD PTR s$[rbp]
	mov	eax, DWORD PTR [rax+3588]
	add	eax, DWORD PTR u$[rbp+8]
	mov	rcx, QWORD PTR s$[rbp]
	cmp	eax, DWORD PTR [rcx+3592]
	jle	SHORT $LN3@stb_text_u
; Line 1261
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN11@stb_text_u
; Line 1262
	jmp	$LN1@stb_text_u
$LN11@stb_text_u:
; Line 1264
	mov	rcx, QWORD PTR s$[rbp]
	call	?stb_textedit_discard_redo@ImStb@@YAXPEAUStbUndoState@1@@Z ; ImStb::stb_textedit_discard_redo
; Line 1265
	jmp	SHORT $LN2@stb_text_u
$LN3@stb_text_u:
; Line 1266
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, WORD PTR [rax+3584]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR s$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$[rbp], rax
; Line 1268
	mov	rax, QWORD PTR s$[rbp]
	mov	ecx, DWORD PTR u$[rbp+8]
	mov	eax, DWORD PTR [rax+3592]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$[rbp]
	mov	DWORD PTR [rcx+12], eax
; Line 1269
	mov	rax, QWORD PTR s$[rbp]
	mov	ecx, DWORD PTR u$[rbp+8]
	mov	eax, DWORD PTR [rax+3592]
	sub	eax, ecx
	mov	rcx, QWORD PTR s$[rbp]
	mov	DWORD PTR [rcx+3592], eax
; Line 1272
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN6@stb_text_u
$LN4@stb_text_u:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN6@stb_text_u:
	mov	eax, DWORD PTR u$[rbp+8]
	cmp	DWORD PTR i$4[rbp], eax
	jge	SHORT $LN5@stb_text_u
; Line 1273
	mov	eax, DWORD PTR i$4[rbp]
	mov	ecx, DWORD PTR u$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	mov	WORD PTR tv158[rbp], ax
	mov	rax, QWORD PTR r$[rbp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR i$4[rbp]
	cdqe
	mov	rcx, QWORD PTR s$[rbp]
	movzx	edx, WORD PTR tv158[rbp]
	mov	WORD PTR [rcx+rax*2+1584], dx
	jmp	SHORT $LN4@stb_text_u
$LN5@stb_text_u:
$LN10@stb_text_u:
; Line 1277
	mov	r8d, DWORD PTR u$[rbp+8]
	mov	edx, DWORD PTR u$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_DELETECHARS
$LN8@stb_text_u:
; Line 1281
	cmp	DWORD PTR u$[rbp+4], 0
	je	SHORT $LN12@stb_text_u
; Line 1283
	movsxd	rax, DWORD PTR u$[rbp+12]
	mov	rcx, QWORD PTR s$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2+1584]
	mov	r9d, DWORD PTR u$[rbp+4]
	mov	r8, rax
	mov	edx, DWORD PTR u$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ; ImStb::STB_TEXTEDIT_INSERTCHARS
; Line 1284
	mov	rax, QWORD PTR s$[rbp]
	mov	ecx, DWORD PTR u$[rbp+4]
	mov	eax, DWORD PTR [rax+3588]
	sub	eax, ecx
	mov	rcx, QWORD PTR s$[rbp]
	mov	DWORD PTR [rcx+3588], eax
$LN12@stb_text_u:
; Line 1287
	mov	eax, DWORD PTR u$[rbp+4]
	mov	ecx, DWORD PTR u$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 1289
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, WORD PTR [rax+3582]
	dec	ax
	mov	rcx, QWORD PTR s$[rbp]
	mov	WORD PTR [rcx+3582], ax
; Line 1290
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, WORD PTR [rax+3584]
	dec	ax
	mov	rcx, QWORD PTR s$[rbp]
	mov	WORD PTR [rcx+3584], ax
$LN1@stb_text_u:
; Line 1291
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+336]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stb_text_undo@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ENDP ; ImStb::stb_text_undo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z
_TEXT	SEGMENT
p$ = 4
r$4 = 40
__$ArrayPad$ = 264
str$ = 304
state$ = 312
x$ = 320
y$ = 328
?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z PROC ; ImStb::stb_textedit_drag, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 477
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 478
	mov	DWORD PTR p$[rbp], 0
; Line 482
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN2@stb_texted
; Line 485
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR r$4[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 486
	movss	xmm0, DWORD PTR r$4[rbp+12]
	movss	DWORD PTR y$[rbp], xmm0
$LN2@stb_texted:
; Line 489
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN3@stb_texted
; Line 490
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+4], ecx
$LN3@stb_texted:
; Line 492
	movss	xmm2, DWORD PTR y$[rbp]
	movss	xmm1, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z ; ImStb::stb_text_locate_coord
	mov	DWORD PTR p$[rbp], eax
; Line 493
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR p$[rbp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR p$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 494
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z ENDP ; ImStb::stb_textedit_drag
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z
_TEXT	SEGMENT
r$4 = 8
__$ArrayPad$ = 232
str$ = 272
state$ = 280
x$ = 288
y$ = 296
?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z PROC ; ImStb::stb_textedit_click, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 459
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 462
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+23]
	test	eax, eax
	je	SHORT $LN2@stb_texted
; Line 465
	xor	r8d, r8d
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR r$4[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 466
	movss	xmm0, DWORD PTR r$4[rbp+12]
	movss	DWORD PTR y$[rbp], xmm0
$LN2@stb_texted:
; Line 469
	movss	xmm2, DWORD PTR y$[rbp]
	movss	xmm1, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z ; ImStb::stb_text_locate_coord
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 470
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+4], ecx
; Line 471
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+8], ecx
; Line 472
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+22], 0
; Line 473
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z ENDP ; ImStb::stb_textedit_click
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z
_TEXT	SEGMENT
r$ = 8
n$ = 52
base_y$ = 84
prev_x$ = 116
i$ = 148
k$ = 180
w$4 = 212
__$ArrayPad$ = 424
str$ = 464
x$ = 472
y$ = 480
?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z PROC ; ImStb::stb_text_locate_coord, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_textedit.h
; Line 399
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__40756020_imstb_textedit@h
	call	__CheckForDebuggerJustMyCode
; Line 401
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ; ImStb::STB_TEXTEDIT_STRINGLEN
	mov	DWORD PTR n$[rbp], eax
; Line 402
	xorps	xmm0, xmm0
	movss	DWORD PTR base_y$[rbp], xmm0
; Line 403
	mov	DWORD PTR i$[rbp], 0
; Line 405
	xorps	xmm0, xmm0
	movss	DWORD PTR r$[rbp+4], xmm0
	movss	xmm0, DWORD PTR r$[rbp+4]
	movss	DWORD PTR r$[rbp], xmm0
; Line 406
	xorps	xmm0, xmm0
	movss	DWORD PTR r$[rbp+16], xmm0
	movss	xmm0, DWORD PTR r$[rbp+16]
	movss	DWORD PTR r$[rbp+12], xmm0
; Line 407
	mov	DWORD PTR r$[rbp+20], 0
$LN2@stb_text_l:
; Line 410
	mov	eax, DWORD PTR n$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN3@stb_text_l
; Line 411
	mov	r8d, DWORD PTR i$[rbp]
	mov	rdx, QWORD PTR str$[rbp]
	lea	rcx, QWORD PTR r$[rbp]
	call	?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_LAYOUTROW
; Line 412
	cmp	DWORD PTR r$[rbp+20], 0
	jg	SHORT $LN7@stb_text_l
; Line 413
	mov	eax, DWORD PTR n$[rbp]
	jmp	$LN1@stb_text_l
$LN7@stb_text_l:
; Line 415
	cmp	DWORD PTR i$[rbp], 0
	jne	SHORT $LN8@stb_text_l
	movss	xmm0, DWORD PTR base_y$[rbp]
	addss	xmm0, DWORD PTR r$[rbp+12]
	comiss	xmm0, DWORD PTR y$[rbp]
	jbe	SHORT $LN8@stb_text_l
; Line 416
	xor	eax, eax
	jmp	$LN1@stb_text_l
$LN8@stb_text_l:
; Line 418
	movss	xmm0, DWORD PTR base_y$[rbp]
	addss	xmm0, DWORD PTR r$[rbp+16]
	comiss	xmm0, DWORD PTR y$[rbp]
	jbe	SHORT $LN9@stb_text_l
; Line 419
	jmp	SHORT $LN3@stb_text_l
$LN9@stb_text_l:
; Line 421
	mov	eax, DWORD PTR r$[rbp+20]
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rbp], eax
; Line 422
	movss	xmm0, DWORD PTR base_y$[rbp]
	addss	xmm0, DWORD PTR r$[rbp+8]
	movss	DWORD PTR base_y$[rbp], xmm0
; Line 423
	jmp	$LN2@stb_text_l
$LN3@stb_text_l:
; Line 426
	mov	eax, DWORD PTR n$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN10@stb_text_l
; Line 427
	mov	eax, DWORD PTR n$[rbp]
	jmp	$LN1@stb_text_l
$LN10@stb_text_l:
; Line 430
	movss	xmm0, DWORD PTR r$[rbp]
	comiss	xmm0, DWORD PTR x$[rbp]
	jbe	SHORT $LN11@stb_text_l
; Line 431
	mov	eax, DWORD PTR i$[rbp]
	jmp	$LN1@stb_text_l
$LN11@stb_text_l:
; Line 434
	movss	xmm0, DWORD PTR r$[rbp+4]
	comiss	xmm0, DWORD PTR x$[rbp]
	jbe	$LN12@stb_text_l
; Line 436
	movss	xmm0, DWORD PTR r$[rbp]
	movss	DWORD PTR prev_x$[rbp], xmm0
; Line 437
	mov	DWORD PTR k$[rbp], 0
	jmp	SHORT $LN6@stb_text_l
$LN4@stb_text_l:
	mov	eax, DWORD PTR k$[rbp]
	inc	eax
	mov	DWORD PTR k$[rbp], eax
$LN6@stb_text_l:
	mov	eax, DWORD PTR r$[rbp+20]
	cmp	DWORD PTR k$[rbp], eax
	jge	$LN5@stb_text_l
; Line 438
	mov	r8d, DWORD PTR k$[rbp]
	mov	edx, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z ; ImStb::STB_TEXTEDIT_GETWIDTH
	movss	DWORD PTR w$4[rbp], xmm0
; Line 439
	movss	xmm0, DWORD PTR prev_x$[rbp]
	addss	xmm0, DWORD PTR w$4[rbp]
	comiss	xmm0, DWORD PTR x$[rbp]
	jbe	SHORT $LN13@stb_text_l
; Line 440
	movss	xmm0, DWORD PTR w$4[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR prev_x$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	comiss	xmm0, DWORD PTR x$[rbp]
	jbe	SHORT $LN14@stb_text_l
; Line 441
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR k$[rbp]
	add	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN1@stb_text_l
	jmp	SHORT $LN15@stb_text_l
$LN14@stb_text_l:
; Line 443
	mov	eax, DWORD PTR k$[rbp]
	mov	ecx, DWORD PTR i$[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	jmp	SHORT $LN1@stb_text_l
$LN15@stb_text_l:
$LN13@stb_text_l:
; Line 445
	movss	xmm0, DWORD PTR prev_x$[rbp]
	addss	xmm0, DWORD PTR w$4[rbp]
	movss	DWORD PTR prev_x$[rbp], xmm0
; Line 446
	jmp	$LN4@stb_text_l
$LN5@stb_text_l:
$LN12@stb_text_l:
; Line 451
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR r$[rbp+20]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	edx, eax
	mov	rcx, QWORD PTR str$[rbp]
	call	?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ; ImStb::STB_TEXTEDIT_GETCHAR
	movzx	eax, ax
	movzx	ecx, WORD PTR ?STB_TEXTEDIT_NEWLINE@ImStb@@3GA
	cmp	eax, ecx
	jne	SHORT $LN16@stb_text_l
; Line 452
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR r$[rbp+20]
	lea	eax, DWORD PTR [rax+rcx-1]
	jmp	SHORT $LN1@stb_text_l
	jmp	SHORT $LN17@stb_text_l
$LN16@stb_text_l:
; Line 454
	mov	eax, DWORD PTR r$[rbp+20]
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, eax
	mov	eax, ecx
$LN17@stb_text_l:
$LN1@stb_text_l:
; Line 455
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+440]
	pop	rdi
	pop	rbp
	ret	0
?stb_text_locate_coord@ImStb@@YAHPEAUImGuiInputTextState@@MM@Z ENDP ; ImStb::stb_text_locate_coord
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z
_TEXT	SEGMENT
is_resizable$ = 4
text_len$ = 36
new_text_len_utf8$ = 68
text$ = 104
tv67 = 308
tv193 = 312
tv169 = 312
tv149 = 312
obj$ = 352
pos$ = 360
new_text$ = 368
new_text_len$ = 376
?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z PROC ; ImStb::STB_TEXTEDIT_INSERTCHARS, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3704
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3705
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+3712]
	and	eax, 262144				; 00040000H
	test	eax, eax
	je	SHORT $LN7@STB_TEXTED
	mov	BYTE PTR tv67[rbp], 1
	jmp	SHORT $LN8@STB_TEXTED
$LN7@STB_TEXTED:
	mov	BYTE PTR tv67[rbp], 0
$LN8@STB_TEXTED:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_resizable$[rbp], al
; Line 3706
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR text_len$[rbp], eax
; Line 3707
	mov	eax, DWORD PTR text_len$[rbp]
	cmp	DWORD PTR pos$[rbp], eax
	jle	SHORT $LN9@STB_TEXTED
	mov	eax, DWORD PTR ?__LINE__Var@?0??STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CA@MNHDBBDP@?$AAp?$AAo?$AAs?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@STB_TEXTED:
; Line 3709
	movsxd	rax, DWORD PTR new_text_len$[rbp]
	mov	rcx, QWORD PTR new_text$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rdx, rax
	mov	rcx, QWORD PTR new_text$[rbp]
	call	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z ; ImTextCountUtf8BytesFromStr
	mov	DWORD PTR new_text_len_utf8$[rbp], eax
; Line 3710
	movzx	eax, BYTE PTR is_resizable$[rbp]
	test	eax, eax
	jne	SHORT $LN2@STB_TEXTED
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR new_text_len_utf8$[rbp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	rcx, QWORD PTR obj$[rbp]
	cmp	eax, DWORD PTR [rcx+68]
	jle	SHORT $LN2@STB_TEXTED
; Line 3711
	xor	al, al
	jmp	$LN1@STB_TEXTED
$LN2@STB_TEXTED:
; Line 3714
	mov	eax, DWORD PTR new_text_len$[rbp]
	mov	ecx, DWORD PTR text_len$[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	rcx, QWORD PTR obj$[rbp]
	cmp	eax, DWORD PTR [rcx+16]
	jle	$LN3@STB_TEXTED
; Line 3716
	movzx	eax, BYTE PTR is_resizable$[rbp]
	test	eax, eax
	jne	SHORT $LN4@STB_TEXTED
; Line 3717
	xor	al, al
	jmp	$LN1@STB_TEXTED
$LN4@STB_TEXTED:
; Line 3718
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR text_len$[rbp], eax
	jl	SHORT $LN10@STB_TEXTED
	mov	eax, DWORD PTR ?__LINE__Var@?0??STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z@4JA
	add	eax, 14
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@IEAPMEMO@?$AAt?$AAe?$AAx?$AAt?$AA_?$AAl?$AAe?$AAn?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AA?9@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@STB_TEXTED:
; Line 3719
	mov	rax, QWORD PTR obj$[rbp]
	add	rax, 16
	mov	QWORD PTR tv149[rbp], rax
	mov	edx, DWORD PTR new_text_len$[rbp]
	mov	ecx, 256				; 00000100H
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	ecx, DWORD PTR new_text_len$[rbp]
	shl	ecx, 2
	mov	r8d, eax
	mov	edx, 32					; 00000020H
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	ecx, DWORD PTR text_len$[rbp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	edx, eax
	mov	rcx, QWORD PTR tv149[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
$LN3@STB_TEXTED:
; Line 3722
	mov	rax, QWORD PTR obj$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR text$[rbp], rax
; Line 3723
	mov	eax, DWORD PTR text_len$[rbp]
	cmp	DWORD PTR pos$[rbp], eax
	je	SHORT $LN5@STB_TEXTED
; Line 3724
	mov	eax, DWORD PTR pos$[rbp]
	mov	ecx, DWORD PTR text_len$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cdqe
	shl	rax, 1
	movsxd	rcx, DWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR text$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*2]
	movsxd	rdx, DWORD PTR pos$[rbp]
	mov	r8, QWORD PTR text$[rbp]
	lea	rdx, QWORD PTR [r8+rdx*2]
	movsxd	r8, DWORD PTR new_text_len$[rbp]
	lea	rdx, QWORD PTR [rdx+r8*2]
	mov	QWORD PTR tv169[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv169[rbp]
	mov	rcx, rax
	call	memmove
$LN5@STB_TEXTED:
; Line 3725
	movsxd	rax, DWORD PTR new_text_len$[rbp]
	shl	rax, 1
	movsxd	rcx, DWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR text$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*2]
	mov	rdi, rcx
	mov	rsi, QWORD PTR new_text$[rbp]
	mov	rcx, rax
	rep movsb
; Line 3727
	mov	rax, QWORD PTR obj$[rbp]
	mov	BYTE PTR [rax+3710], 1
; Line 3728
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR new_text_len$[rbp]
	mov	rcx, QWORD PTR obj$[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 3729
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR new_text_len_utf8$[rbp]
	mov	rcx, QWORD PTR obj$[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 3730
	mov	rax, QWORD PTR obj$[rbp]
	add	rax, 16
	mov	QWORD PTR tv193[rbp], rax
	mov	rax, QWORD PTR obj$[rbp]
	mov	edx, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR tv193[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	xor	ecx, ecx
	mov	WORD PTR [rax], cx
; Line 3732
	mov	al, 1
$LN1@STB_TEXTED:
; Line 3733
	lea	rsp, QWORD PTR [rbp+320]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?STB_TEXTEDIT_INSERTCHARS@ImStb@@YA_NPEAUImGuiInputTextState@@HPEBGH@Z ENDP ; ImStb::STB_TEXTEDIT_INSERTCHARS
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z
_TEXT	SEGMENT
dst$ = 8
src$ = 40
c$1 = 68
tv128 = 276
tv81 = 276
tv79 = 280
obj$ = 320
pos$ = 328
n$ = 336
?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z PROC ; ImStb::STB_TEXTEDIT_DELETECHARS, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3688
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3689
	movsxd	rax, DWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR obj$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR dst$[rbp], rax
; Line 3692
	mov	rax, QWORD PTR obj$[rbp]
	mov	BYTE PTR [rax+3710], 1
; Line 3693
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR dst$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rdx, rax
	mov	rcx, QWORD PTR dst$[rbp]
	call	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z ; ImTextCountUtf8BytesFromStr
	mov	DWORD PTR tv81[rbp], eax
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv79[rbp], eax
	mov	eax, DWORD PTR tv81[rbp]
	mov	ecx, DWORD PTR tv79[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR obj$[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 3694
	mov	rax, QWORD PTR obj$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	rcx, QWORD PTR obj$[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 3697
	movsxd	rax, DWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR obj$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR n$[rbp]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR src$[rbp], rax
$LN2@STB_TEXTED:
; Line 3698
	mov	rax, QWORD PTR src$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv128[rbp], ax
	mov	rax, QWORD PTR src$[rbp]
	add	rax, 2
	mov	QWORD PTR src$[rbp], rax
	movzx	eax, WORD PTR tv128[rbp]
	mov	WORD PTR c$1[rbp], ax
	movzx	eax, WORD PTR c$1[rbp]
	test	eax, eax
	je	SHORT $LN3@STB_TEXTED
; Line 3699
	mov	rax, QWORD PTR dst$[rbp]
	movzx	ecx, WORD PTR c$1[rbp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR dst$[rbp]
	add	rax, 2
	mov	QWORD PTR dst$[rbp], rax
	jmp	SHORT $LN2@STB_TEXTED
$LN3@STB_TEXTED:
; Line 3700
	xor	eax, eax
	mov	rcx, QWORD PTR dst$[rbp]
	mov	WORD PTR [rcx], ax
; Line 3701
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_DELETECHARS@ImStb@@YAXPEAUImGuiInputTextState@@HH@Z ENDP ; ImStb::STB_TEXTEDIT_DELETECHARS
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
_TEXT	SEGMENT
len$ = 4
tv73 = 212
obj$ = 256
idx$ = 264
?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z PROC ; ImStb::STB_TEXTEDIT_MOVEWORDRIGHT_IMPL, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3682
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR idx$[rbp]
	inc	eax
	mov	DWORD PTR idx$[rbp], eax
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR len$[rbp], eax
$LN2@STB_TEXTED:
	mov	eax, DWORD PTR len$[rbp]
	cmp	DWORD PTR idx$[rbp], eax
	jge	SHORT $LN3@STB_TEXTED
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR obj$[rbp]
	call	?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ; ImStb::is_word_boundary_from_right
	test	eax, eax
	jne	SHORT $LN3@STB_TEXTED
	mov	eax, DWORD PTR idx$[rbp]
	inc	eax
	mov	DWORD PTR idx$[rbp], eax
	jmp	SHORT $LN2@STB_TEXTED
$LN3@STB_TEXTED:
	mov	eax, DWORD PTR len$[rbp]
	cmp	DWORD PTR idx$[rbp], eax
	jle	SHORT $LN5@STB_TEXTED
	mov	eax, DWORD PTR len$[rbp]
	mov	DWORD PTR tv73[rbp], eax
	jmp	SHORT $LN6@STB_TEXTED
$LN5@STB_TEXTED:
	mov	eax, DWORD PTR idx$[rbp]
	mov	DWORD PTR tv73[rbp], eax
$LN6@STB_TEXTED:
	mov	eax, DWORD PTR tv73[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_MOVEWORDRIGHT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ENDP ; ImStb::STB_TEXTEDIT_MOVEWORDRIGHT_IMPL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
_TEXT	SEGMENT
tv72 = 192
obj$ = 240
idx$ = 248
?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z PROC ; ImStb::STB_TEXTEDIT_MOVEWORDLEFT_IMPL, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3677
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR idx$[rbp]
	dec	eax
	mov	DWORD PTR idx$[rbp], eax
$LN2@STB_TEXTED:
	cmp	DWORD PTR idx$[rbp], 0
	jl	SHORT $LN3@STB_TEXTED
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR obj$[rbp]
	call	?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ; ImStb::is_word_boundary_from_right
	test	eax, eax
	jne	SHORT $LN3@STB_TEXTED
	mov	eax, DWORD PTR idx$[rbp]
	dec	eax
	mov	DWORD PTR idx$[rbp], eax
	jmp	SHORT $LN2@STB_TEXTED
$LN3@STB_TEXTED:
	cmp	DWORD PTR idx$[rbp], 0
	jge	SHORT $LN5@STB_TEXTED
	mov	DWORD PTR tv72[rbp], 0
	jmp	SHORT $LN6@STB_TEXTED
$LN5@STB_TEXTED:
	mov	eax, DWORD PTR idx$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@STB_TEXTED:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_MOVEWORDLEFT_IMPL@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ENDP ; ImStb::STB_TEXTEDIT_MOVEWORDLEFT_IMPL
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z
_TEXT	SEGMENT
tv75 = 192
tv84 = 200
tv91 = 208
tv92 = 212
obj$ = 256
idx$ = 264
?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z PROC ; ImStb::is_word_boundary_from_right, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3676
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+3712]
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN2@is_word_bo
	xor	eax, eax
	jmp	$LN1@is_word_bo
$LN2@is_word_bo:
	cmp	DWORD PTR idx$[rbp], 0
	jle	$LN6@is_word_bo
	mov	rax, QWORD PTR obj$[rbp]
	add	rax, 16
	mov	QWORD PTR tv75[rbp], rax
	mov	eax, DWORD PTR idx$[rbp]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv75[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, eax
	call	?is_separator@ImStb@@YA_NI@Z		; ImStb::is_separator
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@is_word_bo
	mov	rax, QWORD PTR obj$[rbp]
	add	rax, 16
	mov	QWORD PTR tv84[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv84[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, eax
	call	?is_separator@ImStb@@YA_NI@Z		; ImStb::is_separator
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@is_word_bo
	mov	DWORD PTR tv91[rbp], 1
	jmp	SHORT $LN5@is_word_bo
$LN4@is_word_bo:
	mov	DWORD PTR tv91[rbp], 0
$LN5@is_word_bo:
	mov	eax, DWORD PTR tv91[rbp]
	mov	DWORD PTR tv92[rbp], eax
	jmp	SHORT $LN7@is_word_bo
$LN6@is_word_bo:
	mov	DWORD PTR tv92[rbp], 1
$LN7@is_word_bo:
	mov	eax, DWORD PTR tv92[rbp]
$LN1@is_word_bo:
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?is_word_boundary_from_right@ImStb@@YAHPEAUImGuiInputTextState@@H@Z ENDP ; ImStb::is_word_boundary_from_right
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?is_separator@ImStb@@YA_NI@Z
_TEXT	SEGMENT
tv77 = 192
c$ = 240
?is_separator@ImStb@@YA_NI@Z PROC			; ImStb::is_separator, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3675
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	ecx, DWORD PTR c$[rbp]
	call	?ImCharIsBlankW@@YA_NI@Z		; ImCharIsBlankW
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 44			; 0000002cH
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 59			; 0000003bH
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 40			; 00000028H
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 41			; 00000029H
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 123			; 0000007bH
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 125			; 0000007dH
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 91			; 0000005bH
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 93			; 0000005dH
	je	SHORT $LN3@is_separat
	cmp	DWORD PTR c$[rbp], 124			; 0000007cH
	je	SHORT $LN3@is_separat
	mov	DWORD PTR tv77[rbp], 0
	jmp	SHORT $LN4@is_separat
$LN3@is_separat:
	mov	DWORD PTR tv77[rbp], 1
$LN4@is_separat:
	movzx	eax, BYTE PTR tv77[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?is_separator@ImStb@@YA_NI@Z ENDP			; ImStb::is_separator
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z
_TEXT	SEGMENT
text$ = 8
text_remaining$ = 40
size$ = 72
__$ArrayPad$ = 280
r$ = 320
obj$ = 328
line_start_idx$ = 336
?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z PROC ; ImStb::STB_TEXTEDIT_LAYOUTROW, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3662
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+376]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3663
	mov	rax, QWORD PTR obj$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR text$[rbp], rax
; Line 3664
	mov	QWORD PTR text_remaining$[rbp], 0
; Line 3665
	mov	rax, QWORD PTR obj$[rbp]
	movsxd	rax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR text$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR line_start_idx$[rbp]
	mov	rdx, QWORD PTR text$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*2]
	mov	BYTE PTR [rsp+40], 1
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR text_remaining$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR size$[rbp]
	call	?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z ; InputTextCalcTextSizeW
; Line 3666
	mov	rax, QWORD PTR r$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
; Line 3667
	mov	rax, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 3668
	mov	rax, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR size$[rbp+4]
	movss	DWORD PTR [rax+8], xmm0
; Line 3669
	mov	rax, QWORD PTR r$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0
; Line 3670
	mov	rax, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR size$[rbp+4]
	movss	DWORD PTR [rax+16], xmm0
; Line 3671
	movsxd	rax, DWORD PTR line_start_idx$[rbp]
	mov	rcx, QWORD PTR text$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR text_remaining$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 1
	mov	rcx, QWORD PTR r$[rbp]
	mov	DWORD PTR [rcx+20], eax
; Line 3672
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_LAYOUTROW@ImStb@@YAXPEAUStbTexteditRow@1@PEAUImGuiInputTextState@@H@Z ENDP ; ImStb::STB_TEXTEDIT_LAYOUTROW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z
_TEXT	SEGMENT
tv65 = 192
key$ = 240
?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z PROC		; ImStb::STB_TEXTEDIT_KEYTOTEXT, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3659
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR key$[rbp], 2097152		; 00200000H
	jl	SHORT $LN3@STB_TEXTED
	mov	DWORD PTR tv65[rbp], 0
	jmp	SHORT $LN4@STB_TEXTED
$LN3@STB_TEXTED:
	mov	eax, DWORD PTR key$[rbp]
	mov	DWORD PTR tv65[rbp], eax
$LN4@STB_TEXTED:
	mov	eax, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_KEYTOTEXT@ImStb@@YAHH@Z ENDP		; ImStb::STB_TEXTEDIT_KEYTOTEXT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z
_TEXT	SEGMENT
c$ = 4
g$ = 40
tv78 = 248
tv70 = 248
obj$ = 288
line_start_idx$ = 296
char_idx$ = 304
?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z PROC ; ImStb::STB_TEXTEDIT_GETWIDTH, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3658
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR obj$[rbp]
	add	rax, 16
	mov	QWORD PTR tv70[rbp], rax
	mov	eax, DWORD PTR char_idx$[rbp]
	mov	ecx, DWORD PTR line_start_idx$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv70[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR c$[rbp], ax
	movzx	eax, WORD PTR c$[rbp]
	cmp	eax, 10
	jne	SHORT $LN2@STB_TEXTED
	movss	xmm0, DWORD PTR __real@bf800000
	jmp	SHORT $LN1@STB_TEXTED
$LN2@STB_TEXTED:
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	QWORD PTR tv78[rbp], rax
	movzx	edx, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR tv78[rbp]
	call	?GetCharAdvance@ImFont@@QEBAMG@Z	; ImFont::GetCharAdvance
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rcx+6528]
	divss	xmm1, DWORD PTR [rax+20]
	mulss	xmm0, xmm1
$LN1@STB_TEXTED:
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_GETWIDTH@ImStb@@YAMPEAUImGuiInputTextState@@HH@Z ENDP ; ImStb::STB_TEXTEDIT_GETWIDTH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z
_TEXT	SEGMENT
tv69 = 192
obj$ = 240
idx$ = 248
?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z PROC ; ImStb::STB_TEXTEDIT_GETCHAR, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3657
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR obj$[rbp]
	add	rax, 16
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImVector@G@@QEBAAEBGH@Z		; ImVector<unsigned short>::operator[]
	movzx	eax, WORD PTR [rax]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_GETCHAR@ImStb@@YAGPEBUImGuiInputTextState@@H@Z ENDP ; ImStb::STB_TEXTEDIT_GETCHAR
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z
_TEXT	SEGMENT
obj$ = 224
?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z PROC ; ImStb::STB_TEXTEDIT_STRINGLEN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3656
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR obj$[rbp]
	mov	eax, DWORD PTR [rax+4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?STB_TEXTEDIT_STRINGLEN@ImStb@@YAHPEBUImGuiInputTextState@@@Z ENDP ; ImStb::STB_TEXTEDIT_STRINGLEN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@PEBX@@YAXAEAPEBX0@Z
_TEXT	SEGMENT
tmp$ = 8
a$ = 256
b$ = 264
??$ImSwap@PEBX@@YAXAEAPEBX0@Z PROC			; ImSwap<void const *>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tmp$[rbp], rax
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR tmp$[rbp]
	mov	QWORD PTR [rax], rcx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@PEBX@@YAXAEAPEBX0@Z ENDP			; ImSwap<void const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAtoi@H@@YAPEBDPEBDPEAH@Z
_TEXT	SEGMENT
negative$ = 4
v$ = 36
tv83 = 244
tv80 = 244
src$ = 288
output$ = 296
??$ImAtoi@H@@YAPEBDPEBDPEAH@Z PROC			; ImAtoi<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2150
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2151
	mov	DWORD PTR negative$[rbp], 0
; Line 2152
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN4@ImAtoi
	mov	DWORD PTR negative$[rbp], 1
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN4@ImAtoi:
; Line 2153
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN5@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
$LN5@ImAtoi:
; Line 2154
	mov	DWORD PTR v$[rbp], 0
$LN2@ImAtoi:
; Line 2155
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@ImAtoi
	mov	rax, QWORD PTR src$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@ImAtoi
; Line 2156
	imul	eax, DWORD PTR v$[rbp], 10
	mov	rcx, QWORD PTR src$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR tv80[rbp], eax
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
	mov	eax, DWORD PTR tv80[rbp]
	mov	DWORD PTR v$[rbp], eax
	jmp	SHORT $LN2@ImAtoi
$LN3@ImAtoi:
; Line 2157
	cmp	DWORD PTR negative$[rbp], 0
	je	SHORT $LN7@ImAtoi
	mov	eax, DWORD PTR v$[rbp]
	neg	eax
	mov	DWORD PTR tv83[rbp], eax
	jmp	SHORT $LN8@ImAtoi
$LN7@ImAtoi:
	mov	eax, DWORD PTR v$[rbp]
	mov	DWORD PTR tv83[rbp], eax
$LN8@ImAtoi:
	mov	rax, QWORD PTR output$[rbp]
	mov	ecx, DWORD PTR tv83[rbp]
	mov	DWORD PTR [rax], ecx
; Line 2158
	mov	rax, QWORD PTR src$[rbp]
; Line 2159
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
??$ImAtoi@H@@YAPEBDPEBDPEAH@Z ENDP			; ImAtoi<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@_K@@YA_K_K0@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@_K@@YA_K_K0@Z PROC				; ImMin<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	cmp	QWORD PTR lhs$[rbp], rax
	jae	SHORT $LN3@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	mov	QWORD PTR tv65[rbp], rax
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	mov	QWORD PTR tv65[rbp], rax
$LN4@ImMin:
	mov	rax, QWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@_K@@YA_K_K0@Z ENDP				; ImMin<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z
_TEXT	SEGMENT
g$ = 8
style$ = 40
axis$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
grab_padding$ = 164
slider_sz$ = 196
grab_sz$ = 228
v_range$ = 264
slider_usable_sz$ = 292
slider_usable_pos_min$ = 324
slider_usable_pos_max$ = 356
logarithmic_zero_epsilon$ = 388
zero_deadzone_halfsize$ = 420
decimal_precision$4 = 452
value_changed$ = 484
set_new_value$5 = 516
clicked_t$6 = 548
mouse_abs_pos$7 = 580
input_delta2$8 = 616
input_delta$9 = 644
decimal_precision$10 = 676
delta$11 = 708
old_clicked_t$12 = 740
v_new$13 = 776
new_clicked_t$14 = 804
v_new$15 = 840
grab_t$16 = 868
grab_pos$17 = 900
$T18 = 1508
$T19 = 1556
$T20 = 1604
tv432 = 1636
tv415 = 1636
tv358 = 1636
tv347 = 1636
tv277 = 1636
tv262 = 1636
tv223 = 1636
tv206 = 1636
tv176 = 1636
tv170 = 1636
tv73 = 1636
tv70 = 1636
tv67 = 1636
tv356 = 1640
tv345 = 1640
tv198 = 1640
tv159 = 1640
tv149 = 1640
tv94 = 1640
tv80 = 1640
tv87 = 1648
tv83 = 1656
__$ArrayPad$ = 1664
bb$ = 1712
id$ = 1720
data_type$ = 1728
v$ = 1736
v_min$ = 1744
v_max$ = 1752
format$ = 1760
flags$ = 1768
out_grab_bb$ = 1776
??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z PROC ; ImGui::SliderBehaviorT<double,double,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2792
$LN60:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2794
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN40@SliderBeha
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN41@SliderBeha
$LN40@SliderBeha:
	mov	DWORD PTR tv67[rbp], 0
$LN41@SliderBeha:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2797
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN42@SliderBeha
	mov	BYTE PTR tv70[rbp], 1
	jmp	SHORT $LN43@SliderBeha
$LN42@SliderBeha:
	mov	BYTE PTR tv70[rbp], 0
$LN43@SliderBeha:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2798
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN44@SliderBeha
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN44@SliderBeha
	mov	BYTE PTR tv73[rbp], 0
	jmp	SHORT $LN45@SliderBeha
$LN44@SliderBeha:
	mov	BYTE PTR tv73[rbp], 1
$LN45@SliderBeha:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2800
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR grab_padding$[rbp], xmm0
; Line 2801
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	DWORD PTR tv83[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv80[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	xmm1, DWORD PTR tv83[rbp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR slider_sz$[rbp], xmm0
; Line 2802
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+120]
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2803
	movsd	xmm0, QWORD PTR v_max$[rbp]
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN46@SliderBeha
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR tv94[rbp], xmm0
	jmp	SHORT $LN47@SliderBeha
$LN46@SliderBeha:
	movsd	xmm0, QWORD PTR v_min$[rbp]
	subsd	xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR tv94[rbp], xmm0
$LN47@SliderBeha:
	movsd	xmm0, QWORD PTR tv94[rbp]
	movsd	QWORD PTR v_range$[rbp], xmm0
; Line 2804
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SliderBeha
	movsd	xmm0, QWORD PTR v_range$[rbp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN2@SliderBeha
; Line 2805
	cvtss2sd xmm0, DWORD PTR slider_sz$[rbp]
	movsd	xmm1, QWORD PTR v_range$[rbp]
	addsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
$LN2@SliderBeha:
; Line 2806
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2807
	movss	xmm0, DWORD PTR slider_sz$[rbp]
	subss	xmm0, DWORD PTR grab_sz$[rbp]
	movss	DWORD PTR slider_usable_sz$[rbp], xmm0
; Line 2808
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv149[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv149[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_min$[rbp], xmm0
; Line 2809
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv159[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv159[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_max$[rbp], xmm0
; Line 2811
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2812
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2813
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@SliderBeha
; Line 2816
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN48@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv170[rbp], eax
	jmp	SHORT $LN49@SliderBeha
$LN48@SliderBeha:
	mov	DWORD PTR tv170[rbp], 1
$LN49@SliderBeha:
	mov	eax, DWORD PTR tv170[rbp]
	mov	DWORD PTR decimal_precision$4[rbp], eax
; Line 2817
	cvtsi2ss xmm0, DWORD PTR decimal_precision$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2818
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+128]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv176[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv176[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
$LN3@SliderBeha:
; Line 2822
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2823
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN4@SliderBeha
; Line 2825
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2826
	xorps	xmm0, xmm0
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2827
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN5@SliderBeha
; Line 2829
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN7@SliderBeha
; Line 2831
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2832
	jmp	$LN8@SliderBeha
$LN7@SliderBeha:
; Line 2835
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv198[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv198[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_abs_pos$7[rbp], xmm0
; Line 2836
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN50@SliderBeha
	movss	xmm0, DWORD PTR mouse_abs_pos$7[rbp]
	subss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	divss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv206[rbp], xmm0
	jmp	SHORT $LN51@SliderBeha
$LN50@SliderBeha:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv206[rbp], xmm0
$LN51@SliderBeha:
	movss	xmm0, DWORD PTR tv206[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2837
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN9@SliderBeha
; Line 2838
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
$LN9@SliderBeha:
; Line 2839
	mov	BYTE PTR set_new_value$5[rbp], 1
$LN8@SliderBeha:
; Line 2841
	jmp	$LN6@SliderBeha
$LN5@SliderBeha:
; Line 2842
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN10@SliderBeha
; Line 2844
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
; Line 2846
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2847
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN11@SliderBeha:
; Line 2850
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR input_delta2$8[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
; Line 2851
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN52@SliderBeha
	movss	xmm0, DWORD PTR input_delta2$8[rbp]
	movss	DWORD PTR tv223[rbp], xmm0
	jmp	SHORT $LN53@SliderBeha
$LN52@SliderBeha:
	movss	xmm0, DWORD PTR input_delta2$8[rbp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv223[rbp], xmm0
$LN53@SliderBeha:
	movss	xmm0, DWORD PTR tv223[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2852
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN59@SliderBeha
	je	$LN12@SliderBeha
$LN59@SliderBeha:
; Line 2854
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN54@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv262[rbp], eax
	jmp	SHORT $LN55@SliderBeha
$LN54@SliderBeha:
	mov	DWORD PTR tv262[rbp], 0
$LN55@SliderBeha:
	mov	eax, DWORD PTR tv262[rbp]
	mov	DWORD PTR decimal_precision$10[rbp], eax
; Line 2855
	cmp	DWORD PTR decimal_precision$10[rbp], 0
	jle	SHORT $LN13@SliderBeha
; Line 2857
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2858
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SliderBeha
; Line 2859
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN15@SliderBeha:
; Line 2860
	jmp	$LN14@SliderBeha
$LN13@SliderBeha:
; Line 2863
	movsd	xmm0, QWORD PTR v_range$[rbp]
	comisd	xmm0, QWORD PTR __real@c059000000000000
	jb	SHORT $LN19@SliderBeha
	movsd	xmm0, QWORD PTR __real@4059000000000000
	comisd	xmm0, QWORD PTR v_range$[rbp]
	jae	SHORT $LN18@SliderBeha
$LN19@SliderBeha:
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@SliderBeha
$LN18@SliderBeha:
; Line 2864
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR input_delta$9[rbp]
	jbe	SHORT $LN56@SliderBeha
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv277[rbp], xmm0
	jmp	SHORT $LN57@SliderBeha
$LN56@SliderBeha:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv277[rbp], xmm0
$LN57@SliderBeha:
	cvtsd2ss xmm0, QWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR tv277[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR input_delta$9[rbp], xmm0
	jmp	SHORT $LN17@SliderBeha
$LN16@SliderBeha:
; Line 2866
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN17@SliderBeha:
$LN14@SliderBeha:
; Line 2868
	mov	ecx, 15
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SliderBeha
; Line 2869
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN20@SliderBeha:
; Line 2871
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	addss	xmm0, DWORD PTR input_delta$9[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
; Line 2872
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 1
$LN12@SliderBeha:
; Line 2875
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR delta$11[rbp], xmm0
; Line 2876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN21@SliderBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN21@SliderBeha
; Line 2878
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2879
	jmp	$LN22@SliderBeha
$LN21@SliderBeha:
; Line 2880
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12312]
	test	eax, eax
	je	$LN23@SliderBeha
; Line 2882
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm1, QWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ; ImGui::ScaleRatioFromValueT<double,double,double>
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2884
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN27@SliderBeha
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN26@SliderBeha
$LN27@SliderBeha:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR clicked_t$6[rbp]
	jb	SHORT $LN24@SliderBeha
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR delta$11[rbp]
	jbe	SHORT $LN24@SliderBeha
$LN26@SliderBeha:
; Line 2886
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2887
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2888
	jmp	$LN25@SliderBeha
$LN24@SliderBeha:
; Line 2891
	mov	BYTE PTR set_new_value$5[rbp], 1
; Line 2892
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR old_clicked_t$12[rbp], xmm0
; Line 2893
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	addss	xmm0, DWORD PTR delta$11[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2896
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z ; ImGui::ScaleValueFromRatioT<double,double,double>
	movsd	QWORD PTR v_new$13[rbp], xmm0
; Line 2897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN28@SliderBeha
; Line 2898
	movsd	xmm2, QWORD PTR v_new$13[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z ; ImGui::RoundScalarWithFormatT<double,double>
	movsd	QWORD PTR v_new$13[rbp], xmm0
$LN28@SliderBeha:
; Line 2899
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR v_new$13[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ; ImGui::ScaleRatioFromValueT<double,double,double>
	movss	DWORD PTR new_clicked_t$14[rbp], xmm0
; Line 2901
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@SliderBeha
; Line 2902
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv347[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv345[rbp], xmm0
	movss	xmm0, DWORD PTR tv345[rbp]
	subss	xmm0, DWORD PTR tv347[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
	jmp	SHORT $LN30@SliderBeha
$LN29@SliderBeha:
; Line 2904
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv358[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv356[rbp], xmm0
	movss	xmm0, DWORD PTR tv356[rbp]
	subss	xmm0, DWORD PTR tv358[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
$LN30@SliderBeha:
$LN25@SliderBeha:
; Line 2907
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN23@SliderBeha:
$LN22@SliderBeha:
$LN10@SliderBeha:
$LN6@SliderBeha:
; Line 2911
	movzx	eax, BYTE PTR set_new_value$5[rbp]
	test	eax, eax
	je	$LN31@SliderBeha
; Line 2913
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z ; ImGui::ScaleValueFromRatioT<double,double,double>
	movsd	QWORD PTR v_new$15[rbp], xmm0
; Line 2916
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN32@SliderBeha
; Line 2917
	movsd	xmm2, QWORD PTR v_new$15[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z ; ImGui::RoundScalarWithFormatT<double,double>
	movsd	QWORD PTR v_new$15[rbp], xmm0
$LN32@SliderBeha:
; Line 2920
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR v_new$15[rbp]
	jp	SHORT $LN58@SliderBeha
	je	SHORT $LN33@SliderBeha
$LN58@SliderBeha:
; Line 2922
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR v_new$15[rbp]
	movsd	QWORD PTR [rax], xmm0
; Line 2923
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@SliderBeha:
$LN31@SliderBeha:
$LN4@SliderBeha:
; Line 2928
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR slider_sz$[rbp]
	jbe	SHORT $LN34@SliderBeha
; Line 2930
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2931
	jmp	$LN35@SliderBeha
$LN34@SliderBeha:
; Line 2935
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm1, QWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ; ImGui::ScaleRatioFromValueT<double,double,double>
	movss	DWORD PTR grab_t$16[rbp], xmm0
; Line 2936
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN36@SliderBeha
; Line 2937
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR grab_t$16[rbp]
	movss	DWORD PTR grab_t$16[rbp], xmm0
$LN36@SliderBeha:
; Line 2938
	movss	xmm2, DWORD PTR grab_t$16[rbp]
	movss	xmm1, DWORD PTR slider_usable_pos_max$[rbp]
	movss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR grab_pos$17[rbp], xmm0
; Line 2939
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN37@SliderBeha
; Line 2940
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR grab_pos$17[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR __real@40000000
	movss	xmm3, DWORD PTR grab_sz$[rbp]
	mulss	xmm3, DWORD PTR __real@3f000000
	movss	xmm4, DWORD PTR grab_pos$17[rbp]
	subss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv415[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv415[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN38@SliderBeha
$LN37@SliderBeha:
; Line 2942
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR grab_pos$17[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR grab_sz$[rbp]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR grab_pos$17[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR __real@40000000
	movss	DWORD PTR tv432[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv432[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN38@SliderBeha:
$LN35@SliderBeha:
; Line 2945
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 2946
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z ENDP ; ImGui::SliderBehaviorT<double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z
_TEXT	SEGMENT
g$ = 8
style$ = 40
axis$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
grab_padding$ = 164
slider_sz$ = 196
grab_sz$ = 228
v_range$ = 260
slider_usable_sz$ = 292
slider_usable_pos_min$ = 324
slider_usable_pos_max$ = 356
logarithmic_zero_epsilon$ = 388
zero_deadzone_halfsize$ = 420
decimal_precision$4 = 452
value_changed$ = 484
set_new_value$5 = 516
clicked_t$6 = 548
mouse_abs_pos$7 = 580
input_delta2$8 = 616
input_delta$9 = 644
decimal_precision$10 = 676
delta$11 = 708
old_clicked_t$12 = 740
v_new$13 = 772
new_clicked_t$14 = 804
v_new$15 = 836
grab_t$16 = 868
grab_pos$17 = 900
$T18 = 1508
$T19 = 1556
$T20 = 1604
tv429 = 1636
tv412 = 1636
tv355 = 1636
tv344 = 1636
tv275 = 1636
tv260 = 1636
tv221 = 1636
tv204 = 1636
tv174 = 1636
tv168 = 1636
tv94 = 1636
tv73 = 1636
tv70 = 1636
tv67 = 1636
tv353 = 1640
tv342 = 1640
tv196 = 1640
tv157 = 1640
tv147 = 1640
tv80 = 1640
tv87 = 1648
tv83 = 1656
__$ArrayPad$ = 1664
bb$ = 1712
id$ = 1720
data_type$ = 1728
v$ = 1736
v_min$ = 1744
v_max$ = 1752
format$ = 1760
flags$ = 1768
out_grab_bb$ = 1776
??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z PROC ; ImGui::SliderBehaviorT<float,float,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2792
$LN60:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2794
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN40@SliderBeha
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN41@SliderBeha
$LN40@SliderBeha:
	mov	DWORD PTR tv67[rbp], 0
$LN41@SliderBeha:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2797
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN42@SliderBeha
	mov	BYTE PTR tv70[rbp], 1
	jmp	SHORT $LN43@SliderBeha
$LN42@SliderBeha:
	mov	BYTE PTR tv70[rbp], 0
$LN43@SliderBeha:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2798
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN44@SliderBeha
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN44@SliderBeha
	mov	BYTE PTR tv73[rbp], 0
	jmp	SHORT $LN45@SliderBeha
$LN44@SliderBeha:
	mov	BYTE PTR tv73[rbp], 1
$LN45@SliderBeha:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2800
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR grab_padding$[rbp], xmm0
; Line 2801
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	DWORD PTR tv83[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv80[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	xmm1, DWORD PTR tv83[rbp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR slider_sz$[rbp], xmm0
; Line 2802
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+120]
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2803
	movss	xmm0, DWORD PTR v_max$[rbp]
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN46@SliderBeha
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR tv94[rbp], xmm0
	jmp	SHORT $LN47@SliderBeha
$LN46@SliderBeha:
	movss	xmm0, DWORD PTR v_min$[rbp]
	subss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR tv94[rbp], xmm0
$LN47@SliderBeha:
	movss	xmm0, DWORD PTR tv94[rbp]
	movss	DWORD PTR v_range$[rbp], xmm0
; Line 2804
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SliderBeha
	movss	xmm0, DWORD PTR v_range$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN2@SliderBeha
; Line 2805
	movss	xmm0, DWORD PTR v_range$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
$LN2@SliderBeha:
; Line 2806
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2807
	movss	xmm0, DWORD PTR slider_sz$[rbp]
	subss	xmm0, DWORD PTR grab_sz$[rbp]
	movss	DWORD PTR slider_usable_sz$[rbp], xmm0
; Line 2808
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv147[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv147[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_min$[rbp], xmm0
; Line 2809
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv157[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv157[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_max$[rbp], xmm0
; Line 2811
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2812
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2813
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@SliderBeha
; Line 2816
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN48@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv168[rbp], eax
	jmp	SHORT $LN49@SliderBeha
$LN48@SliderBeha:
	mov	DWORD PTR tv168[rbp], 1
$LN49@SliderBeha:
	mov	eax, DWORD PTR tv168[rbp]
	mov	DWORD PTR decimal_precision$4[rbp], eax
; Line 2817
	cvtsi2ss xmm0, DWORD PTR decimal_precision$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2818
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+128]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv174[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv174[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
$LN3@SliderBeha:
; Line 2822
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2823
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN4@SliderBeha
; Line 2825
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2826
	xorps	xmm0, xmm0
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2827
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN5@SliderBeha
; Line 2829
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN7@SliderBeha
; Line 2831
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2832
	jmp	$LN8@SliderBeha
$LN7@SliderBeha:
; Line 2835
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv196[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv196[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_abs_pos$7[rbp], xmm0
; Line 2836
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN50@SliderBeha
	movss	xmm0, DWORD PTR mouse_abs_pos$7[rbp]
	subss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	divss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv204[rbp], xmm0
	jmp	SHORT $LN51@SliderBeha
$LN50@SliderBeha:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv204[rbp], xmm0
$LN51@SliderBeha:
	movss	xmm0, DWORD PTR tv204[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2837
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN9@SliderBeha
; Line 2838
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
$LN9@SliderBeha:
; Line 2839
	mov	BYTE PTR set_new_value$5[rbp], 1
$LN8@SliderBeha:
; Line 2841
	jmp	$LN6@SliderBeha
$LN5@SliderBeha:
; Line 2842
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN10@SliderBeha
; Line 2844
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
; Line 2846
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2847
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN11@SliderBeha:
; Line 2850
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR input_delta2$8[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
; Line 2851
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN52@SliderBeha
	movss	xmm0, DWORD PTR input_delta2$8[rbp]
	movss	DWORD PTR tv221[rbp], xmm0
	jmp	SHORT $LN53@SliderBeha
$LN52@SliderBeha:
	movss	xmm0, DWORD PTR input_delta2$8[rbp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv221[rbp], xmm0
$LN53@SliderBeha:
	movss	xmm0, DWORD PTR tv221[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2852
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN59@SliderBeha
	je	$LN12@SliderBeha
$LN59@SliderBeha:
; Line 2854
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN54@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv260[rbp], eax
	jmp	SHORT $LN55@SliderBeha
$LN54@SliderBeha:
	mov	DWORD PTR tv260[rbp], 0
$LN55@SliderBeha:
	mov	eax, DWORD PTR tv260[rbp]
	mov	DWORD PTR decimal_precision$10[rbp], eax
; Line 2855
	cmp	DWORD PTR decimal_precision$10[rbp], 0
	jle	SHORT $LN13@SliderBeha
; Line 2857
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2858
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SliderBeha
; Line 2859
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN15@SliderBeha:
; Line 2860
	jmp	$LN14@SliderBeha
$LN13@SliderBeha:
; Line 2863
	movss	xmm0, DWORD PTR v_range$[rbp]
	comiss	xmm0, DWORD PTR __real@c2c80000
	jb	SHORT $LN19@SliderBeha
	movss	xmm0, DWORD PTR __real@42c80000
	comiss	xmm0, DWORD PTR v_range$[rbp]
	jae	SHORT $LN18@SliderBeha
$LN19@SliderBeha:
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@SliderBeha
$LN18@SliderBeha:
; Line 2864
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR input_delta$9[rbp]
	jbe	SHORT $LN56@SliderBeha
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv275[rbp], xmm0
	jmp	SHORT $LN57@SliderBeha
$LN56@SliderBeha:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv275[rbp], xmm0
$LN57@SliderBeha:
	movss	xmm0, DWORD PTR tv275[rbp]
	divss	xmm0, DWORD PTR v_range$[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
	jmp	SHORT $LN17@SliderBeha
$LN16@SliderBeha:
; Line 2866
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN17@SliderBeha:
$LN14@SliderBeha:
; Line 2868
	mov	ecx, 15
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SliderBeha
; Line 2869
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN20@SliderBeha:
; Line 2871
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	addss	xmm0, DWORD PTR input_delta$9[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
; Line 2872
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 1
$LN12@SliderBeha:
; Line 2875
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR delta$11[rbp], xmm0
; Line 2876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN21@SliderBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN21@SliderBeha
; Line 2878
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2879
	jmp	$LN22@SliderBeha
$LN21@SliderBeha:
; Line 2880
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12312]
	test	eax, eax
	je	$LN23@SliderBeha
; Line 2882
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleRatioFromValueT<float,float,float>
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2884
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN27@SliderBeha
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN26@SliderBeha
$LN27@SliderBeha:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR clicked_t$6[rbp]
	jb	SHORT $LN24@SliderBeha
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR delta$11[rbp]
	jbe	SHORT $LN24@SliderBeha
$LN26@SliderBeha:
; Line 2886
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2887
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2888
	jmp	$LN25@SliderBeha
$LN24@SliderBeha:
; Line 2891
	mov	BYTE PTR set_new_value$5[rbp], 1
; Line 2892
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR old_clicked_t$12[rbp], xmm0
; Line 2893
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	addss	xmm0, DWORD PTR delta$11[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2896
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleValueFromRatioT<float,float,float>
	movss	DWORD PTR v_new$13[rbp], xmm0
; Line 2897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN28@SliderBeha
; Line 2898
	movss	xmm2, DWORD PTR v_new$13[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z ; ImGui::RoundScalarWithFormatT<float,float>
	movss	DWORD PTR v_new$13[rbp], xmm0
$LN28@SliderBeha:
; Line 2899
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new$13[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleRatioFromValueT<float,float,float>
	movss	DWORD PTR new_clicked_t$14[rbp], xmm0
; Line 2901
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@SliderBeha
; Line 2902
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv344[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv342[rbp], xmm0
	movss	xmm0, DWORD PTR tv342[rbp]
	subss	xmm0, DWORD PTR tv344[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
	jmp	SHORT $LN30@SliderBeha
$LN29@SliderBeha:
; Line 2904
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv355[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv353[rbp], xmm0
	movss	xmm0, DWORD PTR tv353[rbp]
	subss	xmm0, DWORD PTR tv355[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
$LN30@SliderBeha:
$LN25@SliderBeha:
; Line 2907
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN23@SliderBeha:
$LN22@SliderBeha:
$LN10@SliderBeha:
$LN6@SliderBeha:
; Line 2911
	movzx	eax, BYTE PTR set_new_value$5[rbp]
	test	eax, eax
	je	$LN31@SliderBeha
; Line 2913
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleValueFromRatioT<float,float,float>
	movss	DWORD PTR v_new$15[rbp], xmm0
; Line 2916
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN32@SliderBeha
; Line 2917
	movss	xmm2, DWORD PTR v_new$15[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z ; ImGui::RoundScalarWithFormatT<float,float>
	movss	DWORD PTR v_new$15[rbp], xmm0
$LN32@SliderBeha:
; Line 2920
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR v_new$15[rbp]
	jp	SHORT $LN58@SliderBeha
	je	SHORT $LN33@SliderBeha
$LN58@SliderBeha:
; Line 2922
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR v_new$15[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 2923
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@SliderBeha:
$LN31@SliderBeha:
$LN4@SliderBeha:
; Line 2928
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR slider_sz$[rbp]
	jbe	SHORT $LN34@SliderBeha
; Line 2930
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2931
	jmp	$LN35@SliderBeha
$LN34@SliderBeha:
; Line 2935
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleRatioFromValueT<float,float,float>
	movss	DWORD PTR grab_t$16[rbp], xmm0
; Line 2936
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN36@SliderBeha
; Line 2937
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR grab_t$16[rbp]
	movss	DWORD PTR grab_t$16[rbp], xmm0
$LN36@SliderBeha:
; Line 2938
	movss	xmm2, DWORD PTR grab_t$16[rbp]
	movss	xmm1, DWORD PTR slider_usable_pos_max$[rbp]
	movss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR grab_pos$17[rbp], xmm0
; Line 2939
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN37@SliderBeha
; Line 2940
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR grab_pos$17[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR __real@40000000
	movss	xmm3, DWORD PTR grab_sz$[rbp]
	mulss	xmm3, DWORD PTR __real@3f000000
	movss	xmm4, DWORD PTR grab_pos$17[rbp]
	subss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv412[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv412[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN38@SliderBeha
$LN37@SliderBeha:
; Line 2942
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR grab_pos$17[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR grab_sz$[rbp]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR grab_pos$17[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR __real@40000000
	movss	DWORD PTR tv429[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv429[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN38@SliderBeha:
$LN35@SliderBeha:
; Line 2945
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 2946
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z ENDP ; ImGui::SliderBehaviorT<float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z
_TEXT	SEGMENT
g$ = 8
style$ = 40
axis$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
grab_padding$ = 164
slider_sz$ = 196
grab_sz$ = 228
v_range$ = 264
slider_usable_sz$ = 292
slider_usable_pos_min$ = 324
slider_usable_pos_max$ = 356
logarithmic_zero_epsilon$ = 388
zero_deadzone_halfsize$ = 420
decimal_precision$4 = 452
value_changed$ = 484
set_new_value$5 = 516
clicked_t$6 = 548
mouse_abs_pos$7 = 580
input_delta2$8 = 616
input_delta$9 = 644
decimal_precision$10 = 676
delta$11 = 708
old_clicked_t$12 = 740
v_new$13 = 776
new_clicked_t$14 = 804
v_new$15 = 840
grab_t$16 = 868
grab_pos$17 = 900
$T18 = 1508
$T19 = 1556
$T20 = 1604
tv433 = 1636
tv416 = 1636
tv359 = 1636
tv348 = 1636
tv278 = 1636
tv261 = 1636
tv222 = 1636
tv205 = 1636
tv175 = 1636
tv169 = 1636
tv73 = 1636
tv70 = 1636
tv67 = 1636
tv357 = 1640
tv346 = 1640
tv197 = 1640
tv158 = 1640
tv148 = 1640
tv94 = 1640
tv80 = 1640
tv87 = 1648
tv83 = 1656
__$ArrayPad$ = 1664
bb$ = 1712
id$ = 1720
data_type$ = 1728
v$ = 1736
v_min$ = 1744
v_max$ = 1752
format$ = 1760
flags$ = 1768
out_grab_bb$ = 1776
??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z PROC ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2792
$LN59:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2794
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN40@SliderBeha
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN41@SliderBeha
$LN40@SliderBeha:
	mov	DWORD PTR tv67[rbp], 0
$LN41@SliderBeha:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2797
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN42@SliderBeha
	mov	BYTE PTR tv70[rbp], 1
	jmp	SHORT $LN43@SliderBeha
$LN42@SliderBeha:
	mov	BYTE PTR tv70[rbp], 0
$LN43@SliderBeha:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2798
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN44@SliderBeha
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN44@SliderBeha
	mov	BYTE PTR tv73[rbp], 0
	jmp	SHORT $LN45@SliderBeha
$LN44@SliderBeha:
	mov	BYTE PTR tv73[rbp], 1
$LN45@SliderBeha:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2800
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR grab_padding$[rbp], xmm0
; Line 2801
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	DWORD PTR tv83[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv80[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	xmm1, DWORD PTR tv83[rbp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR slider_sz$[rbp], xmm0
; Line 2802
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+120]
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2803
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jae	SHORT $LN46@SliderBeha
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv94[rbp], rax
	jmp	SHORT $LN47@SliderBeha
$LN46@SliderBeha:
	mov	rax, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv94[rbp], rax
$LN47@SliderBeha:
	mov	rax, QWORD PTR tv94[rbp]
	mov	QWORD PTR v_range$[rbp], rax
; Line 2804
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SliderBeha
	cmp	QWORD PTR v_range$[rbp], 0
	jl	SHORT $LN2@SliderBeha
; Line 2805
	mov	rax, QWORD PTR v_range$[rbp]
	inc	rax
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
$LN2@SliderBeha:
; Line 2806
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2807
	movss	xmm0, DWORD PTR slider_sz$[rbp]
	subss	xmm0, DWORD PTR grab_sz$[rbp]
	movss	DWORD PTR slider_usable_sz$[rbp], xmm0
; Line 2808
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv148[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_min$[rbp], xmm0
; Line 2809
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv158[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv158[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_max$[rbp], xmm0
; Line 2811
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2812
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2813
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@SliderBeha
; Line 2816
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN48@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv169[rbp], eax
	jmp	SHORT $LN49@SliderBeha
$LN48@SliderBeha:
	mov	DWORD PTR tv169[rbp], 1
$LN49@SliderBeha:
	mov	eax, DWORD PTR tv169[rbp]
	mov	DWORD PTR decimal_precision$4[rbp], eax
; Line 2817
	cvtsi2ss xmm0, DWORD PTR decimal_precision$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2818
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+128]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv175[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv175[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
$LN3@SliderBeha:
; Line 2822
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2823
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN4@SliderBeha
; Line 2825
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2826
	xorps	xmm0, xmm0
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2827
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN5@SliderBeha
; Line 2829
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN7@SliderBeha
; Line 2831
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2832
	jmp	$LN8@SliderBeha
$LN7@SliderBeha:
; Line 2835
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv197[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv197[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_abs_pos$7[rbp], xmm0
; Line 2836
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN50@SliderBeha
	movss	xmm0, DWORD PTR mouse_abs_pos$7[rbp]
	subss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	divss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv205[rbp], xmm0
	jmp	SHORT $LN51@SliderBeha
$LN50@SliderBeha:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv205[rbp], xmm0
$LN51@SliderBeha:
	movss	xmm0, DWORD PTR tv205[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2837
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN9@SliderBeha
; Line 2838
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
$LN9@SliderBeha:
; Line 2839
	mov	BYTE PTR set_new_value$5[rbp], 1
$LN8@SliderBeha:
; Line 2841
	jmp	$LN6@SliderBeha
$LN5@SliderBeha:
; Line 2842
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN10@SliderBeha
; Line 2844
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
; Line 2846
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2847
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN11@SliderBeha:
; Line 2850
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR input_delta2$8[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
; Line 2851
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN52@SliderBeha
	movss	xmm0, DWORD PTR input_delta2$8[rbp]
	movss	DWORD PTR tv222[rbp], xmm0
	jmp	SHORT $LN53@SliderBeha
$LN52@SliderBeha:
	movss	xmm0, DWORD PTR input_delta2$8[rbp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv222[rbp], xmm0
$LN53@SliderBeha:
	movss	xmm0, DWORD PTR tv222[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2852
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN58@SliderBeha
	je	$LN12@SliderBeha
$LN58@SliderBeha:
; Line 2854
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN54@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv261[rbp], eax
	jmp	SHORT $LN55@SliderBeha
$LN54@SliderBeha:
	mov	DWORD PTR tv261[rbp], 0
$LN55@SliderBeha:
	mov	eax, DWORD PTR tv261[rbp]
	mov	DWORD PTR decimal_precision$10[rbp], eax
; Line 2855
	cmp	DWORD PTR decimal_precision$10[rbp], 0
	jle	SHORT $LN13@SliderBeha
; Line 2857
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2858
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SliderBeha
; Line 2859
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN15@SliderBeha:
; Line 2860
	jmp	$LN14@SliderBeha
$LN13@SliderBeha:
; Line 2863
	cvtsi2ss xmm0, QWORD PTR v_range$[rbp]
	comiss	xmm0, DWORD PTR __real@c2c80000
	jb	SHORT $LN19@SliderBeha
	cvtsi2ss xmm0, QWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm1, xmm0
	jae	SHORT $LN18@SliderBeha
$LN19@SliderBeha:
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@SliderBeha
$LN18@SliderBeha:
; Line 2864
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR input_delta$9[rbp]
	jbe	SHORT $LN56@SliderBeha
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv278[rbp], xmm0
	jmp	SHORT $LN57@SliderBeha
$LN56@SliderBeha:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv278[rbp], xmm0
$LN57@SliderBeha:
	cvtsi2ss xmm0, QWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR tv278[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR input_delta$9[rbp], xmm0
	jmp	SHORT $LN17@SliderBeha
$LN16@SliderBeha:
; Line 2866
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN17@SliderBeha:
$LN14@SliderBeha:
; Line 2868
	mov	ecx, 15
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SliderBeha
; Line 2869
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN20@SliderBeha:
; Line 2871
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	addss	xmm0, DWORD PTR input_delta$9[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
; Line 2872
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 1
$LN12@SliderBeha:
; Line 2875
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR delta$11[rbp], xmm0
; Line 2876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN21@SliderBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN21@SliderBeha
; Line 2878
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2879
	jmp	$LN22@SliderBeha
$LN21@SliderBeha:
; Line 2880
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12312]
	test	eax, eax
	je	$LN23@SliderBeha
; Line 2882
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2884
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN27@SliderBeha
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN26@SliderBeha
$LN27@SliderBeha:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR clicked_t$6[rbp]
	jb	SHORT $LN24@SliderBeha
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR delta$11[rbp]
	jbe	SHORT $LN24@SliderBeha
$LN26@SliderBeha:
; Line 2886
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2887
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2888
	jmp	$LN25@SliderBeha
$LN24@SliderBeha:
; Line 2891
	mov	BYTE PTR set_new_value$5[rbp], 1
; Line 2892
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR old_clicked_t$12[rbp], xmm0
; Line 2893
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	addss	xmm0, DWORD PTR delta$11[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2896
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	mov	QWORD PTR v_new$13[rbp], rax
; Line 2897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN28@SliderBeha
; Line 2898
	mov	r8, QWORD PTR v_new$13[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	mov	QWORD PTR v_new$13[rbp], rax
$LN28@SliderBeha:
; Line 2899
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_new$13[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
	movss	DWORD PTR new_clicked_t$14[rbp], xmm0
; Line 2901
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@SliderBeha
; Line 2902
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv348[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv346[rbp], xmm0
	movss	xmm0, DWORD PTR tv346[rbp]
	subss	xmm0, DWORD PTR tv348[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
	jmp	SHORT $LN30@SliderBeha
$LN29@SliderBeha:
; Line 2904
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv359[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv357[rbp], xmm0
	movss	xmm0, DWORD PTR tv357[rbp]
	subss	xmm0, DWORD PTR tv359[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
$LN30@SliderBeha:
$LN25@SliderBeha:
; Line 2907
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN23@SliderBeha:
$LN22@SliderBeha:
$LN10@SliderBeha:
$LN6@SliderBeha:
; Line 2911
	movzx	eax, BYTE PTR set_new_value$5[rbp]
	test	eax, eax
	je	$LN31@SliderBeha
; Line 2913
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	mov	QWORD PTR v_new$15[rbp], rax
; Line 2916
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN32@SliderBeha
; Line 2917
	mov	r8, QWORD PTR v_new$15[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	mov	QWORD PTR v_new$15[rbp], rax
$LN32@SliderBeha:
; Line 2920
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_new$15[rbp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN33@SliderBeha
; Line 2922
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_new$15[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2923
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@SliderBeha:
$LN31@SliderBeha:
$LN4@SliderBeha:
; Line 2928
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR slider_sz$[rbp]
	jbe	SHORT $LN34@SliderBeha
; Line 2930
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2931
	jmp	$LN35@SliderBeha
$LN34@SliderBeha:
; Line 2935
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
	movss	DWORD PTR grab_t$16[rbp], xmm0
; Line 2936
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN36@SliderBeha
; Line 2937
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR grab_t$16[rbp]
	movss	DWORD PTR grab_t$16[rbp], xmm0
$LN36@SliderBeha:
; Line 2938
	movss	xmm2, DWORD PTR grab_t$16[rbp]
	movss	xmm1, DWORD PTR slider_usable_pos_max$[rbp]
	movss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR grab_pos$17[rbp], xmm0
; Line 2939
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN37@SliderBeha
; Line 2940
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR grab_pos$17[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR __real@40000000
	movss	xmm3, DWORD PTR grab_sz$[rbp]
	mulss	xmm3, DWORD PTR __real@3f000000
	movss	xmm4, DWORD PTR grab_pos$17[rbp]
	subss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv416[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv416[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN38@SliderBeha
$LN37@SliderBeha:
; Line 2942
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR grab_pos$17[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR grab_sz$[rbp]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR grab_pos$17[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR __real@40000000
	movss	DWORD PTR tv433[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv433[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN38@SliderBeha:
$LN35@SliderBeha:
; Line 2945
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 2946
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z ENDP ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z
_TEXT	SEGMENT
g$ = 8
style$ = 40
axis$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
grab_padding$ = 164
slider_sz$ = 196
grab_sz$ = 228
v_range$ = 264
slider_usable_sz$ = 292
slider_usable_pos_min$ = 324
slider_usable_pos_max$ = 356
logarithmic_zero_epsilon$ = 388
zero_deadzone_halfsize$ = 420
decimal_precision$4 = 452
value_changed$ = 484
set_new_value$5 = 516
clicked_t$6 = 548
mouse_abs_pos$7 = 580
input_delta2$8 = 616
input_delta$9 = 644
decimal_precision$10 = 676
delta$11 = 708
old_clicked_t$12 = 740
v_new$13 = 776
new_clicked_t$14 = 804
v_new$15 = 840
grab_t$16 = 868
grab_pos$17 = 900
$T18 = 1508
$T19 = 1556
$T20 = 1604
tv433 = 1636
tv416 = 1636
tv359 = 1636
tv348 = 1636
tv278 = 1636
tv261 = 1636
tv222 = 1636
tv205 = 1636
tv175 = 1636
tv169 = 1636
tv73 = 1636
tv70 = 1636
tv67 = 1636
tv357 = 1640
tv346 = 1640
tv197 = 1640
tv158 = 1640
tv148 = 1640
tv94 = 1640
tv80 = 1640
tv87 = 1648
tv83 = 1656
__$ArrayPad$ = 1664
bb$ = 1712
id$ = 1720
data_type$ = 1728
v$ = 1736
v_min$ = 1744
v_max$ = 1752
format$ = 1760
flags$ = 1768
out_grab_bb$ = 1776
??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z PROC ; ImGui::SliderBehaviorT<__int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2792
$LN59:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2794
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN40@SliderBeha
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN41@SliderBeha
$LN40@SliderBeha:
	mov	DWORD PTR tv67[rbp], 0
$LN41@SliderBeha:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2797
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN42@SliderBeha
	mov	BYTE PTR tv70[rbp], 1
	jmp	SHORT $LN43@SliderBeha
$LN42@SliderBeha:
	mov	BYTE PTR tv70[rbp], 0
$LN43@SliderBeha:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2798
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN44@SliderBeha
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN44@SliderBeha
	mov	BYTE PTR tv73[rbp], 0
	jmp	SHORT $LN45@SliderBeha
$LN44@SliderBeha:
	mov	BYTE PTR tv73[rbp], 1
$LN45@SliderBeha:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2800
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR grab_padding$[rbp], xmm0
; Line 2801
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	DWORD PTR tv83[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv80[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	xmm1, DWORD PTR tv83[rbp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR slider_sz$[rbp], xmm0
; Line 2802
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+120]
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2803
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jge	SHORT $LN46@SliderBeha
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv94[rbp], rax
	jmp	SHORT $LN47@SliderBeha
$LN46@SliderBeha:
	mov	rax, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv94[rbp], rax
$LN47@SliderBeha:
	mov	rax, QWORD PTR tv94[rbp]
	mov	QWORD PTR v_range$[rbp], rax
; Line 2804
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SliderBeha
	cmp	QWORD PTR v_range$[rbp], 0
	jl	SHORT $LN2@SliderBeha
; Line 2805
	mov	rax, QWORD PTR v_range$[rbp]
	inc	rax
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
$LN2@SliderBeha:
; Line 2806
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2807
	movss	xmm0, DWORD PTR slider_sz$[rbp]
	subss	xmm0, DWORD PTR grab_sz$[rbp]
	movss	DWORD PTR slider_usable_sz$[rbp], xmm0
; Line 2808
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv148[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_min$[rbp], xmm0
; Line 2809
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv158[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv158[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_max$[rbp], xmm0
; Line 2811
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2812
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2813
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@SliderBeha
; Line 2816
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN48@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv169[rbp], eax
	jmp	SHORT $LN49@SliderBeha
$LN48@SliderBeha:
	mov	DWORD PTR tv169[rbp], 1
$LN49@SliderBeha:
	mov	eax, DWORD PTR tv169[rbp]
	mov	DWORD PTR decimal_precision$4[rbp], eax
; Line 2817
	cvtsi2ss xmm0, DWORD PTR decimal_precision$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2818
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+128]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv175[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv175[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
$LN3@SliderBeha:
; Line 2822
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2823
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN4@SliderBeha
; Line 2825
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2826
	xorps	xmm0, xmm0
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2827
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN5@SliderBeha
; Line 2829
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN7@SliderBeha
; Line 2831
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2832
	jmp	$LN8@SliderBeha
$LN7@SliderBeha:
; Line 2835
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv197[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv197[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_abs_pos$7[rbp], xmm0
; Line 2836
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN50@SliderBeha
	movss	xmm0, DWORD PTR mouse_abs_pos$7[rbp]
	subss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	divss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv205[rbp], xmm0
	jmp	SHORT $LN51@SliderBeha
$LN50@SliderBeha:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv205[rbp], xmm0
$LN51@SliderBeha:
	movss	xmm0, DWORD PTR tv205[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2837
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN9@SliderBeha
; Line 2838
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
$LN9@SliderBeha:
; Line 2839
	mov	BYTE PTR set_new_value$5[rbp], 1
$LN8@SliderBeha:
; Line 2841
	jmp	$LN6@SliderBeha
$LN5@SliderBeha:
; Line 2842
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN10@SliderBeha
; Line 2844
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
; Line 2846
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2847
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN11@SliderBeha:
; Line 2850
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR input_delta2$8[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
; Line 2851
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN52@SliderBeha
	movss	xmm0, DWORD PTR input_delta2$8[rbp]
	movss	DWORD PTR tv222[rbp], xmm0
	jmp	SHORT $LN53@SliderBeha
$LN52@SliderBeha:
	movss	xmm0, DWORD PTR input_delta2$8[rbp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv222[rbp], xmm0
$LN53@SliderBeha:
	movss	xmm0, DWORD PTR tv222[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2852
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN58@SliderBeha
	je	$LN12@SliderBeha
$LN58@SliderBeha:
; Line 2854
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN54@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv261[rbp], eax
	jmp	SHORT $LN55@SliderBeha
$LN54@SliderBeha:
	mov	DWORD PTR tv261[rbp], 0
$LN55@SliderBeha:
	mov	eax, DWORD PTR tv261[rbp]
	mov	DWORD PTR decimal_precision$10[rbp], eax
; Line 2855
	cmp	DWORD PTR decimal_precision$10[rbp], 0
	jle	SHORT $LN13@SliderBeha
; Line 2857
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2858
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SliderBeha
; Line 2859
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN15@SliderBeha:
; Line 2860
	jmp	$LN14@SliderBeha
$LN13@SliderBeha:
; Line 2863
	cvtsi2ss xmm0, QWORD PTR v_range$[rbp]
	comiss	xmm0, DWORD PTR __real@c2c80000
	jb	SHORT $LN19@SliderBeha
	cvtsi2ss xmm0, QWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm1, xmm0
	jae	SHORT $LN18@SliderBeha
$LN19@SliderBeha:
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@SliderBeha
$LN18@SliderBeha:
; Line 2864
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR input_delta$9[rbp]
	jbe	SHORT $LN56@SliderBeha
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv278[rbp], xmm0
	jmp	SHORT $LN57@SliderBeha
$LN56@SliderBeha:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv278[rbp], xmm0
$LN57@SliderBeha:
	cvtsi2ss xmm0, QWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR tv278[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR input_delta$9[rbp], xmm0
	jmp	SHORT $LN17@SliderBeha
$LN16@SliderBeha:
; Line 2866
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN17@SliderBeha:
$LN14@SliderBeha:
; Line 2868
	mov	ecx, 15
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SliderBeha
; Line 2869
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN20@SliderBeha:
; Line 2871
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	addss	xmm0, DWORD PTR input_delta$9[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
; Line 2872
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 1
$LN12@SliderBeha:
; Line 2875
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR delta$11[rbp], xmm0
; Line 2876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN21@SliderBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN21@SliderBeha
; Line 2878
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2879
	jmp	$LN22@SliderBeha
$LN21@SliderBeha:
; Line 2880
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12312]
	test	eax, eax
	je	$LN23@SliderBeha
; Line 2882
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2884
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN27@SliderBeha
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN26@SliderBeha
$LN27@SliderBeha:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR clicked_t$6[rbp]
	jb	SHORT $LN24@SliderBeha
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR delta$11[rbp]
	jbe	SHORT $LN24@SliderBeha
$LN26@SliderBeha:
; Line 2886
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2887
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2888
	jmp	$LN25@SliderBeha
$LN24@SliderBeha:
; Line 2891
	mov	BYTE PTR set_new_value$5[rbp], 1
; Line 2892
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR old_clicked_t$12[rbp], xmm0
; Line 2893
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	addss	xmm0, DWORD PTR delta$11[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2896
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	mov	QWORD PTR v_new$13[rbp], rax
; Line 2897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN28@SliderBeha
; Line 2898
	mov	r8, QWORD PTR v_new$13[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	mov	QWORD PTR v_new$13[rbp], rax
$LN28@SliderBeha:
; Line 2899
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_new$13[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
	movss	DWORD PTR new_clicked_t$14[rbp], xmm0
; Line 2901
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@SliderBeha
; Line 2902
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv348[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv346[rbp], xmm0
	movss	xmm0, DWORD PTR tv346[rbp]
	subss	xmm0, DWORD PTR tv348[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
	jmp	SHORT $LN30@SliderBeha
$LN29@SliderBeha:
; Line 2904
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv359[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv357[rbp], xmm0
	movss	xmm0, DWORD PTR tv357[rbp]
	subss	xmm0, DWORD PTR tv359[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
$LN30@SliderBeha:
$LN25@SliderBeha:
; Line 2907
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN23@SliderBeha:
$LN22@SliderBeha:
$LN10@SliderBeha:
$LN6@SliderBeha:
; Line 2911
	movzx	eax, BYTE PTR set_new_value$5[rbp]
	test	eax, eax
	je	$LN31@SliderBeha
; Line 2913
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	mov	QWORD PTR v_new$15[rbp], rax
; Line 2916
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN32@SliderBeha
; Line 2917
	mov	r8, QWORD PTR v_new$15[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	mov	QWORD PTR v_new$15[rbp], rax
$LN32@SliderBeha:
; Line 2920
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_new$15[rbp]
	cmp	QWORD PTR [rax], rcx
	je	SHORT $LN33@SliderBeha
; Line 2922
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_new$15[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2923
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@SliderBeha:
$LN31@SliderBeha:
$LN4@SliderBeha:
; Line 2928
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR slider_sz$[rbp]
	jbe	SHORT $LN34@SliderBeha
; Line 2930
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2931
	jmp	$LN35@SliderBeha
$LN34@SliderBeha:
; Line 2935
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
	movss	DWORD PTR grab_t$16[rbp], xmm0
; Line 2936
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN36@SliderBeha
; Line 2937
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR grab_t$16[rbp]
	movss	DWORD PTR grab_t$16[rbp], xmm0
$LN36@SliderBeha:
; Line 2938
	movss	xmm2, DWORD PTR grab_t$16[rbp]
	movss	xmm1, DWORD PTR slider_usable_pos_max$[rbp]
	movss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR grab_pos$17[rbp], xmm0
; Line 2939
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN37@SliderBeha
; Line 2940
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR grab_pos$17[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR __real@40000000
	movss	xmm3, DWORD PTR grab_sz$[rbp]
	mulss	xmm3, DWORD PTR __real@3f000000
	movss	xmm4, DWORD PTR grab_pos$17[rbp]
	subss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv416[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv416[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN38@SliderBeha
$LN37@SliderBeha:
; Line 2942
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR grab_pos$17[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR grab_sz$[rbp]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR grab_pos$17[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR __real@40000000
	movss	DWORD PTR tv433[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv433[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN38@SliderBeha:
$LN35@SliderBeha:
; Line 2945
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 2946
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z ENDP ; ImGui::SliderBehaviorT<__int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z
_TEXT	SEGMENT
g$ = 8
style$ = 40
axis$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
grab_padding$ = 164
slider_sz$ = 196
grab_sz$ = 228
v_range$ = 260
slider_usable_sz$ = 292
slider_usable_pos_min$ = 324
slider_usable_pos_max$ = 356
logarithmic_zero_epsilon$ = 388
zero_deadzone_halfsize$ = 420
decimal_precision$4 = 452
value_changed$ = 484
set_new_value$5 = 516
clicked_t$6 = 548
mouse_abs_pos$7 = 580
input_delta2$8 = 616
input_delta$9 = 644
decimal_precision$10 = 676
delta$11 = 708
old_clicked_t$12 = 740
v_new$13 = 772
new_clicked_t$14 = 804
v_new$15 = 836
grab_t$16 = 868
grab_pos$17 = 900
$T18 = 1508
$T19 = 1556
$T20 = 1604
tv433 = 1636
tv416 = 1636
tv359 = 1636
tv348 = 1636
tv278 = 1636
tv261 = 1636
tv222 = 1636
tv205 = 1636
tv175 = 1636
tv169 = 1636
tv94 = 1636
tv73 = 1636
tv70 = 1636
tv67 = 1636
tv357 = 1640
tv346 = 1640
tv197 = 1640
tv158 = 1640
tv148 = 1640
tv80 = 1640
tv87 = 1648
tv83 = 1656
__$ArrayPad$ = 1664
bb$ = 1712
id$ = 1720
data_type$ = 1728
v$ = 1736
v_min$ = 1744
v_max$ = 1752
format$ = 1760
flags$ = 1768
out_grab_bb$ = 1776
??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z PROC ; ImGui::SliderBehaviorT<unsigned int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2792
$LN59:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2794
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN40@SliderBeha
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN41@SliderBeha
$LN40@SliderBeha:
	mov	DWORD PTR tv67[rbp], 0
$LN41@SliderBeha:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2797
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN42@SliderBeha
	mov	BYTE PTR tv70[rbp], 1
	jmp	SHORT $LN43@SliderBeha
$LN42@SliderBeha:
	mov	BYTE PTR tv70[rbp], 0
$LN43@SliderBeha:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2798
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN44@SliderBeha
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN44@SliderBeha
	mov	BYTE PTR tv73[rbp], 0
	jmp	SHORT $LN45@SliderBeha
$LN44@SliderBeha:
	mov	BYTE PTR tv73[rbp], 1
$LN45@SliderBeha:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2800
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR grab_padding$[rbp], xmm0
; Line 2801
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	DWORD PTR tv83[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv80[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	xmm1, DWORD PTR tv83[rbp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR slider_sz$[rbp], xmm0
; Line 2802
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+120]
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2803
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jae	SHORT $LN46@SliderBeha
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv94[rbp], eax
	jmp	SHORT $LN47@SliderBeha
$LN46@SliderBeha:
	mov	eax, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv94[rbp], eax
$LN47@SliderBeha:
	mov	eax, DWORD PTR tv94[rbp]
	mov	DWORD PTR v_range$[rbp], eax
; Line 2804
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SliderBeha
	cmp	DWORD PTR v_range$[rbp], 0
	jl	SHORT $LN2@SliderBeha
; Line 2805
	mov	eax, DWORD PTR v_range$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
$LN2@SliderBeha:
; Line 2806
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2807
	movss	xmm0, DWORD PTR slider_sz$[rbp]
	subss	xmm0, DWORD PTR grab_sz$[rbp]
	movss	DWORD PTR slider_usable_sz$[rbp], xmm0
; Line 2808
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv148[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_min$[rbp], xmm0
; Line 2809
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv158[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv158[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_max$[rbp], xmm0
; Line 2811
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2812
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2813
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@SliderBeha
; Line 2816
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN48@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv169[rbp], eax
	jmp	SHORT $LN49@SliderBeha
$LN48@SliderBeha:
	mov	DWORD PTR tv169[rbp], 1
$LN49@SliderBeha:
	mov	eax, DWORD PTR tv169[rbp]
	mov	DWORD PTR decimal_precision$4[rbp], eax
; Line 2817
	cvtsi2ss xmm0, DWORD PTR decimal_precision$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2818
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+128]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv175[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv175[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
$LN3@SliderBeha:
; Line 2822
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2823
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN4@SliderBeha
; Line 2825
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2826
	xorps	xmm0, xmm0
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2827
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN5@SliderBeha
; Line 2829
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN7@SliderBeha
; Line 2831
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2832
	jmp	$LN8@SliderBeha
$LN7@SliderBeha:
; Line 2835
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv197[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv197[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_abs_pos$7[rbp], xmm0
; Line 2836
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN50@SliderBeha
	movss	xmm0, DWORD PTR mouse_abs_pos$7[rbp]
	subss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	divss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv205[rbp], xmm0
	jmp	SHORT $LN51@SliderBeha
$LN50@SliderBeha:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv205[rbp], xmm0
$LN51@SliderBeha:
	movss	xmm0, DWORD PTR tv205[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2837
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN9@SliderBeha
; Line 2838
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
$LN9@SliderBeha:
; Line 2839
	mov	BYTE PTR set_new_value$5[rbp], 1
$LN8@SliderBeha:
; Line 2841
	jmp	$LN6@SliderBeha
$LN5@SliderBeha:
; Line 2842
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN10@SliderBeha
; Line 2844
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
; Line 2846
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2847
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN11@SliderBeha:
; Line 2850
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR input_delta2$8[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
; Line 2851
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN52@SliderBeha
	movss	xmm0, DWORD PTR input_delta2$8[rbp]
	movss	DWORD PTR tv222[rbp], xmm0
	jmp	SHORT $LN53@SliderBeha
$LN52@SliderBeha:
	movss	xmm0, DWORD PTR input_delta2$8[rbp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv222[rbp], xmm0
$LN53@SliderBeha:
	movss	xmm0, DWORD PTR tv222[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2852
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN58@SliderBeha
	je	$LN12@SliderBeha
$LN58@SliderBeha:
; Line 2854
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN54@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv261[rbp], eax
	jmp	SHORT $LN55@SliderBeha
$LN54@SliderBeha:
	mov	DWORD PTR tv261[rbp], 0
$LN55@SliderBeha:
	mov	eax, DWORD PTR tv261[rbp]
	mov	DWORD PTR decimal_precision$10[rbp], eax
; Line 2855
	cmp	DWORD PTR decimal_precision$10[rbp], 0
	jle	SHORT $LN13@SliderBeha
; Line 2857
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2858
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SliderBeha
; Line 2859
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN15@SliderBeha:
; Line 2860
	jmp	$LN14@SliderBeha
$LN13@SliderBeha:
; Line 2863
	cvtsi2ss xmm0, DWORD PTR v_range$[rbp]
	comiss	xmm0, DWORD PTR __real@c2c80000
	jb	SHORT $LN19@SliderBeha
	cvtsi2ss xmm0, DWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm1, xmm0
	jae	SHORT $LN18@SliderBeha
$LN19@SliderBeha:
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@SliderBeha
$LN18@SliderBeha:
; Line 2864
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR input_delta$9[rbp]
	jbe	SHORT $LN56@SliderBeha
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv278[rbp], xmm0
	jmp	SHORT $LN57@SliderBeha
$LN56@SliderBeha:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv278[rbp], xmm0
$LN57@SliderBeha:
	cvtsi2ss xmm0, DWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR tv278[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR input_delta$9[rbp], xmm0
	jmp	SHORT $LN17@SliderBeha
$LN16@SliderBeha:
; Line 2866
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN17@SliderBeha:
$LN14@SliderBeha:
; Line 2868
	mov	ecx, 15
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SliderBeha
; Line 2869
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN20@SliderBeha:
; Line 2871
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	addss	xmm0, DWORD PTR input_delta$9[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
; Line 2872
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 1
$LN12@SliderBeha:
; Line 2875
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR delta$11[rbp], xmm0
; Line 2876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN21@SliderBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN21@SliderBeha
; Line 2878
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2879
	jmp	$LN22@SliderBeha
$LN21@SliderBeha:
; Line 2880
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12312]
	test	eax, eax
	je	$LN23@SliderBeha
; Line 2882
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2884
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN27@SliderBeha
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN26@SliderBeha
$LN27@SliderBeha:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR clicked_t$6[rbp]
	jb	SHORT $LN24@SliderBeha
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR delta$11[rbp]
	jbe	SHORT $LN24@SliderBeha
$LN26@SliderBeha:
; Line 2886
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2887
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2888
	jmp	$LN25@SliderBeha
$LN24@SliderBeha:
; Line 2891
	mov	BYTE PTR set_new_value$5[rbp], 1
; Line 2892
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR old_clicked_t$12[rbp], xmm0
; Line 2893
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	addss	xmm0, DWORD PTR delta$11[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2896
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	mov	DWORD PTR v_new$13[rbp], eax
; Line 2897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN28@SliderBeha
; Line 2898
	mov	r8d, DWORD PTR v_new$13[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	mov	DWORD PTR v_new$13[rbp], eax
$LN28@SliderBeha:
; Line 2899
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_new$13[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
	movss	DWORD PTR new_clicked_t$14[rbp], xmm0
; Line 2901
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@SliderBeha
; Line 2902
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv348[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv346[rbp], xmm0
	movss	xmm0, DWORD PTR tv346[rbp]
	subss	xmm0, DWORD PTR tv348[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
	jmp	SHORT $LN30@SliderBeha
$LN29@SliderBeha:
; Line 2904
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv359[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv357[rbp], xmm0
	movss	xmm0, DWORD PTR tv357[rbp]
	subss	xmm0, DWORD PTR tv359[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
$LN30@SliderBeha:
$LN25@SliderBeha:
; Line 2907
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN23@SliderBeha:
$LN22@SliderBeha:
$LN10@SliderBeha:
$LN6@SliderBeha:
; Line 2911
	movzx	eax, BYTE PTR set_new_value$5[rbp]
	test	eax, eax
	je	$LN31@SliderBeha
; Line 2913
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	mov	DWORD PTR v_new$15[rbp], eax
; Line 2916
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN32@SliderBeha
; Line 2917
	mov	r8d, DWORD PTR v_new$15[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	mov	DWORD PTR v_new$15[rbp], eax
$LN32@SliderBeha:
; Line 2920
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_new$15[rbp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN33@SliderBeha
; Line 2922
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_new$15[rbp]
	mov	DWORD PTR [rax], ecx
; Line 2923
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@SliderBeha:
$LN31@SliderBeha:
$LN4@SliderBeha:
; Line 2928
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR slider_sz$[rbp]
	jbe	SHORT $LN34@SliderBeha
; Line 2930
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2931
	jmp	$LN35@SliderBeha
$LN34@SliderBeha:
; Line 2935
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
	movss	DWORD PTR grab_t$16[rbp], xmm0
; Line 2936
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN36@SliderBeha
; Line 2937
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR grab_t$16[rbp]
	movss	DWORD PTR grab_t$16[rbp], xmm0
$LN36@SliderBeha:
; Line 2938
	movss	xmm2, DWORD PTR grab_t$16[rbp]
	movss	xmm1, DWORD PTR slider_usable_pos_max$[rbp]
	movss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR grab_pos$17[rbp], xmm0
; Line 2939
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN37@SliderBeha
; Line 2940
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR grab_pos$17[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR __real@40000000
	movss	xmm3, DWORD PTR grab_sz$[rbp]
	mulss	xmm3, DWORD PTR __real@3f000000
	movss	xmm4, DWORD PTR grab_pos$17[rbp]
	subss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv416[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv416[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN38@SliderBeha
$LN37@SliderBeha:
; Line 2942
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR grab_pos$17[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR grab_sz$[rbp]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR grab_pos$17[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR __real@40000000
	movss	DWORD PTR tv433[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv433[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN38@SliderBeha:
$LN35@SliderBeha:
; Line 2945
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 2946
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z ENDP ; ImGui::SliderBehaviorT<unsigned int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z
_TEXT	SEGMENT
g$ = 8
style$ = 40
axis$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
grab_padding$ = 164
slider_sz$ = 196
grab_sz$ = 228
v_range$ = 260
slider_usable_sz$ = 292
slider_usable_pos_min$ = 324
slider_usable_pos_max$ = 356
logarithmic_zero_epsilon$ = 388
zero_deadzone_halfsize$ = 420
decimal_precision$4 = 452
value_changed$ = 484
set_new_value$5 = 516
clicked_t$6 = 548
mouse_abs_pos$7 = 580
input_delta2$8 = 616
input_delta$9 = 644
decimal_precision$10 = 676
delta$11 = 708
old_clicked_t$12 = 740
v_new$13 = 772
new_clicked_t$14 = 804
v_new$15 = 836
grab_t$16 = 868
grab_pos$17 = 900
$T18 = 1508
$T19 = 1556
$T20 = 1604
tv433 = 1636
tv416 = 1636
tv359 = 1636
tv348 = 1636
tv278 = 1636
tv261 = 1636
tv222 = 1636
tv205 = 1636
tv175 = 1636
tv169 = 1636
tv94 = 1636
tv73 = 1636
tv70 = 1636
tv67 = 1636
tv357 = 1640
tv346 = 1640
tv197 = 1640
tv158 = 1640
tv148 = 1640
tv80 = 1640
tv87 = 1648
tv83 = 1656
__$ArrayPad$ = 1664
bb$ = 1712
id$ = 1720
data_type$ = 1728
v$ = 1736
v_min$ = 1744
v_max$ = 1752
format$ = 1760
flags$ = 1768
out_grab_bb$ = 1776
??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z PROC ; ImGui::SliderBehaviorT<int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2792
$LN59:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2794
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN40@SliderBeha
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN41@SliderBeha
$LN40@SliderBeha:
	mov	DWORD PTR tv67[rbp], 0
$LN41@SliderBeha:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2797
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN42@SliderBeha
	mov	BYTE PTR tv70[rbp], 1
	jmp	SHORT $LN43@SliderBeha
$LN42@SliderBeha:
	mov	BYTE PTR tv70[rbp], 0
$LN43@SliderBeha:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2798
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN44@SliderBeha
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN44@SliderBeha
	mov	BYTE PTR tv73[rbp], 0
	jmp	SHORT $LN45@SliderBeha
$LN44@SliderBeha:
	mov	BYTE PTR tv73[rbp], 1
$LN45@SliderBeha:
	movzx	eax, BYTE PTR tv73[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2800
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR grab_padding$[rbp], xmm0
; Line 2801
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	DWORD PTR tv83[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv80[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	movss	xmm1, DWORD PTR tv83[rbp]
	subss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR slider_sz$[rbp], xmm0
; Line 2802
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+120]
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2803
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jge	SHORT $LN46@SliderBeha
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv94[rbp], eax
	jmp	SHORT $LN47@SliderBeha
$LN46@SliderBeha:
	mov	eax, DWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv94[rbp], eax
$LN47@SliderBeha:
	mov	eax, DWORD PTR tv94[rbp]
	mov	DWORD PTR v_range$[rbp], eax
; Line 2804
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SliderBeha
	cmp	DWORD PTR v_range$[rbp], 0
	jl	SHORT $LN2@SliderBeha
; Line 2805
	mov	eax, DWORD PTR v_range$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
$LN2@SliderBeha:
; Line 2806
	movss	xmm1, DWORD PTR slider_sz$[rbp]
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR grab_sz$[rbp], xmm0
; Line 2807
	movss	xmm0, DWORD PTR slider_sz$[rbp]
	subss	xmm0, DWORD PTR grab_sz$[rbp]
	movss	DWORD PTR slider_usable_sz$[rbp], xmm0
; Line 2808
	mov	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv148[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	addss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_min$[rbp], xmm0
; Line 2809
	mov	rax, QWORD PTR bb$[rbp]
	add	rax, 8
	mov	QWORD PTR tv158[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv158[rbp]
	call	??AImVec2@@QEBAM_K@Z			; ImVec2::operator[]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR slider_usable_pos_max$[rbp], xmm0
; Line 2811
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2812
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2813
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN3@SliderBeha
; Line 2816
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN48@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv169[rbp], eax
	jmp	SHORT $LN49@SliderBeha
$LN48@SliderBeha:
	mov	DWORD PTR tv169[rbp], 1
$LN49@SliderBeha:
	mov	eax, DWORD PTR tv169[rbp]
	mov	DWORD PTR decimal_precision$4[rbp], eax
; Line 2817
	cvtsi2ss xmm0, DWORD PTR decimal_precision$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2818
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+128]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv175[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv175[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
$LN3@SliderBeha:
; Line 2822
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2823
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN4@SliderBeha
; Line 2825
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2826
	xorps	xmm0, xmm0
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2827
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN5@SliderBeha
; Line 2829
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN7@SliderBeha
; Line 2831
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2832
	jmp	$LN8@SliderBeha
$LN7@SliderBeha:
; Line 2835
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv197[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv197[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_abs_pos$7[rbp], xmm0
; Line 2836
	movss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN50@SliderBeha
	movss	xmm0, DWORD PTR mouse_abs_pos$7[rbp]
	subss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	divss	xmm0, DWORD PTR slider_usable_sz$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR tv205[rbp], xmm0
	jmp	SHORT $LN51@SliderBeha
$LN50@SliderBeha:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv205[rbp], xmm0
$LN51@SliderBeha:
	movss	xmm0, DWORD PTR tv205[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2837
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN9@SliderBeha
; Line 2838
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR clicked_t$6[rbp], xmm0
$LN9@SliderBeha:
; Line 2839
	mov	BYTE PTR set_new_value$5[rbp], 1
$LN8@SliderBeha:
; Line 2841
	jmp	$LN6@SliderBeha
$LN5@SliderBeha:
; Line 2842
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN10@SliderBeha
; Line 2844
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
; Line 2846
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2847
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN11@SliderBeha:
; Line 2850
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR input_delta2$8[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
; Line 2851
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN52@SliderBeha
	movss	xmm0, DWORD PTR input_delta2$8[rbp]
	movss	DWORD PTR tv222[rbp], xmm0
	jmp	SHORT $LN53@SliderBeha
$LN52@SliderBeha:
	movss	xmm0, DWORD PTR input_delta2$8[rbp+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv222[rbp], xmm0
$LN53@SliderBeha:
	movss	xmm0, DWORD PTR tv222[rbp]
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2852
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN58@SliderBeha
	je	$LN12@SliderBeha
$LN58@SliderBeha:
; Line 2854
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN54@SliderBeha
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv261[rbp], eax
	jmp	SHORT $LN55@SliderBeha
$LN54@SliderBeha:
	mov	DWORD PTR tv261[rbp], 0
$LN55@SliderBeha:
	mov	eax, DWORD PTR tv261[rbp]
	mov	DWORD PTR decimal_precision$10[rbp], eax
; Line 2855
	cmp	DWORD PTR decimal_precision$10[rbp], 0
	jle	SHORT $LN13@SliderBeha
; Line 2857
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
; Line 2858
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@SliderBeha
; Line 2859
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN15@SliderBeha:
; Line 2860
	jmp	$LN14@SliderBeha
$LN13@SliderBeha:
; Line 2863
	cvtsi2ss xmm0, DWORD PTR v_range$[rbp]
	comiss	xmm0, DWORD PTR __real@c2c80000
	jb	SHORT $LN19@SliderBeha
	cvtsi2ss xmm0, DWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR __real@42c80000
	comiss	xmm1, xmm0
	jae	SHORT $LN18@SliderBeha
$LN19@SliderBeha:
	mov	ecx, 14
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@SliderBeha
$LN18@SliderBeha:
; Line 2864
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR input_delta$9[rbp]
	jbe	SHORT $LN56@SliderBeha
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv278[rbp], xmm0
	jmp	SHORT $LN57@SliderBeha
$LN56@SliderBeha:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv278[rbp], xmm0
$LN57@SliderBeha:
	cvtsi2ss xmm0, DWORD PTR v_range$[rbp]
	movss	xmm1, DWORD PTR tv278[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR input_delta$9[rbp], xmm0
	jmp	SHORT $LN17@SliderBeha
$LN16@SliderBeha:
; Line 2866
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	divss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN17@SliderBeha:
$LN14@SliderBeha:
; Line 2868
	mov	ecx, 15
	call	?IsNavInputDown@ImGui@@YA_NH@Z		; ImGui::IsNavInputDown
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SliderBeha
; Line 2869
	movss	xmm0, DWORD PTR input_delta$9[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR input_delta$9[rbp], xmm0
$LN20@SliderBeha:
; Line 2871
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	addss	xmm0, DWORD PTR input_delta$9[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
; Line 2872
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 1
$LN12@SliderBeha:
; Line 2875
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR delta$11[rbp], xmm0
; Line 2876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN21@SliderBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN21@SliderBeha
; Line 2878
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 2879
	jmp	$LN22@SliderBeha
$LN21@SliderBeha:
; Line 2880
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12312]
	test	eax, eax
	je	$LN23@SliderBeha
; Line 2882
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ; ImGui::ScaleRatioFromValueT<int,int,float>
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2884
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN27@SliderBeha
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN26@SliderBeha
$LN27@SliderBeha:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR clicked_t$6[rbp]
	jb	SHORT $LN24@SliderBeha
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR delta$11[rbp]
	jbe	SHORT $LN24@SliderBeha
$LN26@SliderBeha:
; Line 2886
	mov	BYTE PTR set_new_value$5[rbp], 0
; Line 2887
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12308], xmm0
; Line 2888
	jmp	$LN25@SliderBeha
$LN24@SliderBeha:
; Line 2891
	mov	BYTE PTR set_new_value$5[rbp], 1
; Line 2892
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	movss	DWORD PTR old_clicked_t$12[rbp], xmm0
; Line 2893
	movss	xmm0, DWORD PTR clicked_t$6[rbp]
	addss	xmm0, DWORD PTR delta$11[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_t$6[rbp], xmm0
; Line 2896
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z ; ImGui::ScaleValueFromRatioT<int,int,float>
	mov	DWORD PTR v_new$13[rbp], eax
; Line 2897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN28@SliderBeha
; Line 2898
	mov	r8d, DWORD PTR v_new$13[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z ; ImGui::RoundScalarWithFormatT<int,int>
	mov	DWORD PTR v_new$13[rbp], eax
$LN28@SliderBeha:
; Line 2899
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_new$13[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ; ImGui::ScaleRatioFromValueT<int,int,float>
	movss	DWORD PTR new_clicked_t$14[rbp], xmm0
; Line 2901
	movss	xmm0, DWORD PTR delta$11[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@SliderBeha
; Line 2902
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv348[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv346[rbp], xmm0
	movss	xmm0, DWORD PTR tv346[rbp]
	subss	xmm0, DWORD PTR tv348[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
	jmp	SHORT $LN30@SliderBeha
$LN29@SliderBeha:
; Line 2904
	movss	xmm0, DWORD PTR new_clicked_t$14[rbp]
	subss	xmm0, DWORD PTR old_clicked_t$12[rbp]
	movss	xmm1, DWORD PTR delta$11[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv359[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12308]
	movss	DWORD PTR tv357[rbp], xmm0
	movss	xmm0, DWORD PTR tv357[rbp]
	subss	xmm0, DWORD PTR tv359[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12308], xmm0
$LN30@SliderBeha:
$LN25@SliderBeha:
; Line 2907
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12312], 0
$LN23@SliderBeha:
$LN22@SliderBeha:
$LN10@SliderBeha:
$LN6@SliderBeha:
; Line 2911
	movzx	eax, BYTE PTR set_new_value$5[rbp]
	test	eax, eax
	je	$LN31@SliderBeha
; Line 2913
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR clicked_t$6[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z ; ImGui::ScaleValueFromRatioT<int,int,float>
	mov	DWORD PTR v_new$15[rbp], eax
; Line 2916
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN32@SliderBeha
; Line 2917
	mov	r8d, DWORD PTR v_new$15[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z ; ImGui::RoundScalarWithFormatT<int,int>
	mov	DWORD PTR v_new$15[rbp], eax
$LN32@SliderBeha:
; Line 2920
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_new$15[rbp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN33@SliderBeha
; Line 2922
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_new$15[rbp]
	mov	DWORD PTR [rax], ecx
; Line 2923
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@SliderBeha:
$LN31@SliderBeha:
$LN4@SliderBeha:
; Line 2928
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR slider_sz$[rbp]
	jbe	SHORT $LN34@SliderBeha
; Line 2930
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2931
	jmp	$LN35@SliderBeha
$LN34@SliderBeha:
; Line 2935
	movss	xmm0, DWORD PTR zero_deadzone_halfsize$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ; ImGui::ScaleRatioFromValueT<int,int,float>
	movss	DWORD PTR grab_t$16[rbp], xmm0
; Line 2936
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN36@SliderBeha
; Line 2937
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR grab_t$16[rbp]
	movss	DWORD PTR grab_t$16[rbp], xmm0
$LN36@SliderBeha:
; Line 2938
	movss	xmm2, DWORD PTR grab_t$16[rbp]
	movss	xmm1, DWORD PTR slider_usable_pos_max$[rbp]
	movss	xmm0, DWORD PTR slider_usable_pos_min$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR grab_pos$17[rbp], xmm0
; Line 2939
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN37@SliderBeha
; Line 2940
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR grab_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR grab_pos$17[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	addss	xmm2, DWORD PTR __real@40000000
	movss	xmm3, DWORD PTR grab_sz$[rbp]
	mulss	xmm3, DWORD PTR __real@3f000000
	movss	xmm4, DWORD PTR grab_pos$17[rbp]
	subss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv416[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv416[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN38@SliderBeha
$LN37@SliderBeha:
; Line 2942
	movss	xmm0, DWORD PTR grab_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR grab_pos$17[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR grab_sz$[rbp]
	mulss	xmm2, DWORD PTR __real@3f000000
	movss	xmm3, DWORD PTR grab_pos$17[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax]
	addss	xmm3, DWORD PTR __real@40000000
	movss	DWORD PTR tv433[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv433[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR out_grab_bb$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN38@SliderBeha:
$LN35@SliderBeha:
; Line 2945
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 2946
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z ENDP ; ImGui::SliderBehaviorT<int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMax@H@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@H@@YAHHH@Z PROC				; ImMax<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 413
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR rhs$[rbp]
	cmp	DWORD PTR lhs$[rbp], eax
	jl	SHORT $LN3@ImMax
	mov	eax, DWORD PTR lhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	mov	eax, DWORD PTR rhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
$LN4@ImMax:
	mov	eax, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMax@H@@YAHHH@Z ENDP				; ImMax<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z
_TEXT	SEGMENT
g$ = 8
axis$ = 36
is_clamped$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
adjust_delta$ = 164
decimal_precision$1 = 196
is_just_activated$ = 228
is_already_past_limits_and_pushing_outward$ = 260
v_cur$ = 296
v_old_ref_for_accum_remainder$ = 328
logarithmic_zero_epsilon$ = 356
zero_deadzone_halfsize$ = 388
decimal_precision$2 = 420
v_old_parametric$3 = 452
v_new_parametric$4 = 484
v_new_parametric$5 = 516
$T6 = 932
tv218 = 948
tv195 = 948
tv157 = 948
tv74 = 948
tv71 = 948
tv68 = 948
tv66 = 948
tv169 = 952
tv139 = 952
data_type$ = 992
v$ = 1000
v_speed$ = 1008
v_min$ = 1016
v_max$ = 1024
format$ = 1032
flags$ = 1040
??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z PROC	; ImGui::DragBehaviorT<double,double,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2225
$LN47:
	movsd	QWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2226
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN28@DragBehavi
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	DWORD PTR tv66[rbp], 0
$LN29@DragBehavi:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2228
	movsd	xmm0, QWORD PTR v_max$[rbp]
	comisd	xmm0, QWORD PTR v_min$[rbp]
	jbe	SHORT $LN30@DragBehavi
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv68[rbp], 0
$LN31@DragBehavi:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR is_clamped$[rbp], al
; Line 2229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN32@DragBehavi
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv71[rbp], 0
$LN33@DragBehavi:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2230
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN34@DragBehavi
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN34@DragBehavi
	mov	BYTE PTR tv74[rbp], 0
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv74[rbp], 1
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2233
	movss	xmm0, DWORD PTR v_speed$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@DragBehavi
	jne	SHORT $LN2@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN2@DragBehavi
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR __real@47efffffe0000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN2@DragBehavi
; Line 2234
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	cvtss2sd xmm1, DWORD PTR [rax+12320]
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN2@DragBehavi:
; Line 2237
	xorps	xmm0, xmm0
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2238
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN3@DragBehavi
	xor	ecx, ecx
	call	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
; Line 2240
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	QWORD PTR tv139[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv139[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2241
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	je	SHORT $LN5@DragBehavi
; Line 2242
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN5@DragBehavi:
; Line 2243
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	je	SHORT $LN6@DragBehavi
; Line 2244
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN6@DragBehavi:
; Line 2245
	jmp	$LN4@DragBehavi
$LN3@DragBehavi:
; Line 2246
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN7@DragBehavi
; Line 2248
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN36@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv157[rbp], eax
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	DWORD PTR tv157[rbp], 0
$LN37@DragBehavi:
	mov	eax, DWORD PTR tv157[rbp]
	mov	DWORD PTR decimal_precision$1[rbp], eax
; Line 2249
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
	mov	QWORD PTR tv169[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv169[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2250
	mov	ecx, DWORD PTR decimal_precision$1[rbp]
	call	?GetMinimumStepAtDecimalPrecision@@YAMH@Z ; GetMinimumStepAtDecimalPrecision
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR v_speed$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN7@DragBehavi:
$LN4@DragBehavi:
; Line 2252
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2255
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN8@DragBehavi
; Line 2256
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN8@DragBehavi:
; Line 2259
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN9@DragBehavi
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR __real@47efffffe0000000
	comisd	xmm1, xmm0
	jbe	SHORT $LN9@DragBehavi
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	comisd	xmm0, QWORD PTR __real@3eb0c6f7a0000000
	jbe	SHORT $LN9@DragBehavi
; Line 2260
	movsd	xmm0, QWORD PTR v_max$[rbp]
	subsd	xmm0, QWORD PTR v_min$[rbp]
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR adjust_delta$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN9@DragBehavi:
; Line 2264
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	mov	BYTE PTR is_just_activated$[rbp], al
; Line 2265
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN41@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR v_max$[rbp]
	jb	SHORT $LN38@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN40@DragBehavi
$LN38@DragBehavi:
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR v_min$[rbp]
	comisd	xmm0, QWORD PTR [rax]
	jb	SHORT $LN39@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	DWORD PTR tv195[rbp], 1
	jmp	SHORT $LN42@DragBehavi
$LN41@DragBehavi:
$LN39@DragBehavi:
	mov	DWORD PTR tv195[rbp], 0
$LN42@DragBehavi:
	movzx	eax, BYTE PTR tv195[rbp]
	mov	BYTE PTR is_already_past_limits_and_pushing_outward$[rbp], al
; Line 2266
	movzx	eax, BYTE PTR is_just_activated$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DragBehavi
	movzx	eax, BYTE PTR is_already_past_limits_and_pushing_outward$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragBehavi
$LN12@DragBehavi:
; Line 2268
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12316], xmm0
; Line 2269
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2270
	jmp	SHORT $LN11@DragBehavi
$LN10@DragBehavi:
; Line 2271
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN46@DragBehavi
	je	SHORT $LN13@DragBehavi
$LN46@DragBehavi:
; Line 2273
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12316]
	addss	xmm0, DWORD PTR adjust_delta$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2274
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 1
$LN13@DragBehavi:
$LN11@DragBehavi:
; Line 2277
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12313]
	test	eax, eax
	jne	SHORT $LN14@DragBehavi
; Line 2278
	xor	al, al
	jmp	$LN1@DragBehavi
$LN14@DragBehavi:
; Line 2280
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR v_cur$[rbp], xmm0
; Line 2281
	xorps	xmm0, xmm0
	movsd	QWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2283
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2284
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2285
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN15@DragBehavi
; Line 2288
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN43@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv218[rbp], eax
	jmp	SHORT $LN44@DragBehavi
$LN43@DragBehavi:
	mov	DWORD PTR tv218[rbp], 1
$LN44@DragBehavi:
	mov	eax, DWORD PTR tv218[rbp]
	mov	DWORD PTR decimal_precision$2[rbp], eax
; Line 2289
	cvtsi2ss xmm0, DWORD PTR decimal_precision$2[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2292
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ; ImGui::ScaleRatioFromValueT<double,double,double>
	movss	DWORD PTR v_old_parametric$3[rbp], xmm0
; Line 2293
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_new_parametric$4[rbp], xmm0
; Line 2294
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new_parametric$4[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@NNN@ImGui@@YANHMNN_NMM@Z ; ImGui::ScaleValueFromRatioT<double,double,double>
	movsd	QWORD PTR v_cur$[rbp], xmm0
; Line 2295
	cvtss2sd xmm0, DWORD PTR v_old_parametric$3[rbp]
	movsd	QWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2296
	jmp	SHORT $LN16@DragBehavi
$LN15@DragBehavi:
; Line 2299
	mov	rax, QWORD PTR g$[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+12316]
	movsd	xmm1, QWORD PTR v_cur$[rbp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR v_cur$[rbp], xmm0
$LN16@DragBehavi:
; Line 2303
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN17@DragBehavi
; Line 2304
	movsd	xmm2, QWORD PTR v_cur$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@NN@ImGui@@YANPEBDHN@Z ; ImGui::RoundScalarWithFormatT<double,double>
	movsd	QWORD PTR v_cur$[rbp], xmm0
$LN17@DragBehavi:
; Line 2307
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2308
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
; Line 2311
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movsd	xmm3, QWORD PTR v_max$[rbp]
	movsd	xmm2, QWORD PTR v_min$[rbp]
	movsd	xmm1, QWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@NNN@ImGui@@YAMHNNN_NMM@Z ; ImGui::ScaleRatioFromValueT<double,double,double>
	movss	DWORD PTR v_new_parametric$5[rbp], xmm0
; Line 2312
	cvtss2sd xmm0, DWORD PTR v_new_parametric$5[rbp]
	subsd	xmm0, QWORD PTR v_old_ref_for_accum_remainder$[rbp]
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2313
	jmp	SHORT $LN19@DragBehavi
$LN18@DragBehavi:
; Line 2316
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR v_cur$[rbp]
	subsd	xmm0, QWORD PTR [rax]
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
$LN19@DragBehavi:
; Line 2320
	movsd	xmm0, QWORD PTR v_cur$[rbp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN20@DragBehavi
	jne	SHORT $LN20@DragBehavi
; Line 2321
	xorps	xmm0, xmm0
	movsd	QWORD PTR v_cur$[rbp], xmm0
$LN20@DragBehavi:
; Line 2324
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR v_cur$[rbp]
	jp	SHORT $LN45@DragBehavi
	je	$LN21@DragBehavi
$LN45@DragBehavi:
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN21@DragBehavi
; Line 2326
	movsd	xmm0, QWORD PTR v_min$[rbp]
	comisd	xmm0, QWORD PTR v_cur$[rbp]
	ja	SHORT $LN23@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR v_cur$[rbp]
	comisd	xmm0, QWORD PTR [rax]
	jbe	SHORT $LN22@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN22@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN22@DragBehavi
$LN23@DragBehavi:
; Line 2327
	movsd	xmm0, QWORD PTR v_min$[rbp]
	movsd	QWORD PTR v_cur$[rbp], xmm0
$LN22@DragBehavi:
; Line 2328
	movsd	xmm0, QWORD PTR v_cur$[rbp]
	comisd	xmm0, QWORD PTR v_max$[rbp]
	ja	SHORT $LN25@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR v_cur$[rbp]
	jbe	SHORT $LN24@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN24@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN24@DragBehavi
$LN25@DragBehavi:
; Line 2329
	movsd	xmm0, QWORD PTR v_max$[rbp]
	movsd	QWORD PTR v_cur$[rbp], xmm0
$LN24@DragBehavi:
$LN21@DragBehavi:
; Line 2333
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	ucomisd	xmm0, QWORD PTR v_cur$[rbp]
	jp	SHORT $LN26@DragBehavi
	jne	SHORT $LN26@DragBehavi
; Line 2334
	xor	al, al
	jmp	SHORT $LN1@DragBehavi
$LN26@DragBehavi:
; Line 2335
	mov	rax, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR v_cur$[rbp]
	movsd	QWORD PTR [rax], xmm0
; Line 2336
	mov	al, 1
$LN1@DragBehavi:
; Line 2337
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z ENDP	; ImGui::DragBehaviorT<double,double,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z
_TEXT	SEGMENT
g$ = 8
axis$ = 36
is_clamped$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
adjust_delta$ = 164
decimal_precision$1 = 196
is_just_activated$ = 228
is_already_past_limits_and_pushing_outward$ = 260
v_cur$ = 292
v_old_ref_for_accum_remainder$ = 324
logarithmic_zero_epsilon$ = 356
zero_deadzone_halfsize$ = 388
decimal_precision$2 = 420
v_old_parametric$3 = 452
v_new_parametric$4 = 484
v_new_parametric$5 = 516
$T6 = 932
tv215 = 948
tv192 = 948
tv155 = 948
tv74 = 948
tv71 = 948
tv68 = 948
tv66 = 948
tv167 = 952
tv137 = 952
data_type$ = 992
v$ = 1000
v_speed$ = 1008
v_min$ = 1016
v_max$ = 1024
format$ = 1032
flags$ = 1040
??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z PROC	; ImGui::DragBehaviorT<float,float,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2225
$LN47:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2226
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN28@DragBehavi
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	DWORD PTR tv66[rbp], 0
$LN29@DragBehavi:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2228
	movss	xmm0, DWORD PTR v_max$[rbp]
	comiss	xmm0, DWORD PTR v_min$[rbp]
	jbe	SHORT $LN30@DragBehavi
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv68[rbp], 0
$LN31@DragBehavi:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR is_clamped$[rbp], al
; Line 2229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN32@DragBehavi
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv71[rbp], 0
$LN33@DragBehavi:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2230
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN34@DragBehavi
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN34@DragBehavi
	mov	BYTE PTR tv74[rbp], 0
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv74[rbp], 1
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2233
	movss	xmm0, DWORD PTR v_speed$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@DragBehavi
	jne	SHORT $LN2@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN2@DragBehavi
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@DragBehavi
; Line 2234
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+12320]
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN2@DragBehavi:
; Line 2237
	xorps	xmm0, xmm0
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2238
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN3@DragBehavi
	xor	ecx, ecx
	call	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
; Line 2240
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	QWORD PTR tv137[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv137[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2241
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	je	SHORT $LN5@DragBehavi
; Line 2242
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN5@DragBehavi:
; Line 2243
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	je	SHORT $LN6@DragBehavi
; Line 2244
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN6@DragBehavi:
; Line 2245
	jmp	$LN4@DragBehavi
$LN3@DragBehavi:
; Line 2246
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN7@DragBehavi
; Line 2248
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN36@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv155[rbp], eax
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	DWORD PTR tv155[rbp], 0
$LN37@DragBehavi:
	mov	eax, DWORD PTR tv155[rbp]
	mov	DWORD PTR decimal_precision$1[rbp], eax
; Line 2249
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
	mov	QWORD PTR tv167[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv167[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2250
	mov	ecx, DWORD PTR decimal_precision$1[rbp]
	call	?GetMinimumStepAtDecimalPrecision@@YAMH@Z ; GetMinimumStepAtDecimalPrecision
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR v_speed$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN7@DragBehavi:
$LN4@DragBehavi:
; Line 2252
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2255
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN8@DragBehavi
; Line 2256
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN8@DragBehavi:
; Line 2259
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN9@DragBehavi
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@DragBehavi
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN9@DragBehavi
; Line 2260
	movss	xmm0, DWORD PTR v_max$[rbp]
	subss	xmm0, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR adjust_delta$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN9@DragBehavi:
; Line 2264
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	mov	BYTE PTR is_just_activated$[rbp], al
; Line 2265
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN41@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jb	SHORT $LN38@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN40@DragBehavi
$LN38@DragBehavi:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR [rax]
	jb	SHORT $LN39@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	DWORD PTR tv192[rbp], 1
	jmp	SHORT $LN42@DragBehavi
$LN41@DragBehavi:
$LN39@DragBehavi:
	mov	DWORD PTR tv192[rbp], 0
$LN42@DragBehavi:
	movzx	eax, BYTE PTR tv192[rbp]
	mov	BYTE PTR is_already_past_limits_and_pushing_outward$[rbp], al
; Line 2266
	movzx	eax, BYTE PTR is_just_activated$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DragBehavi
	movzx	eax, BYTE PTR is_already_past_limits_and_pushing_outward$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragBehavi
$LN12@DragBehavi:
; Line 2268
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12316], xmm0
; Line 2269
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2270
	jmp	SHORT $LN11@DragBehavi
$LN10@DragBehavi:
; Line 2271
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN46@DragBehavi
	je	SHORT $LN13@DragBehavi
$LN46@DragBehavi:
; Line 2273
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12316]
	addss	xmm0, DWORD PTR adjust_delta$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2274
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 1
$LN13@DragBehavi:
$LN11@DragBehavi:
; Line 2277
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12313]
	test	eax, eax
	jne	SHORT $LN14@DragBehavi
; Line 2278
	xor	al, al
	jmp	$LN1@DragBehavi
$LN14@DragBehavi:
; Line 2280
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR v_cur$[rbp], xmm0
; Line 2281
	xorps	xmm0, xmm0
	movss	DWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2283
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2284
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2285
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN15@DragBehavi
; Line 2288
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN43@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv215[rbp], eax
	jmp	SHORT $LN44@DragBehavi
$LN43@DragBehavi:
	mov	DWORD PTR tv215[rbp], 1
$LN44@DragBehavi:
	mov	eax, DWORD PTR tv215[rbp]
	mov	DWORD PTR decimal_precision$2[rbp], eax
; Line 2289
	cvtsi2ss xmm0, DWORD PTR decimal_precision$2[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2292
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleRatioFromValueT<float,float,float>
	movss	DWORD PTR v_old_parametric$3[rbp], xmm0
; Line 2293
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_new_parametric$4[rbp], xmm0
; Line 2294
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new_parametric$4[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleValueFromRatioT<float,float,float>
	movss	DWORD PTR v_cur$[rbp], xmm0
; Line 2295
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	movss	DWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2296
	jmp	SHORT $LN16@DragBehavi
$LN15@DragBehavi:
; Line 2299
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_cur$[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_cur$[rbp], xmm0
$LN16@DragBehavi:
; Line 2303
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN17@DragBehavi
; Line 2304
	movss	xmm2, DWORD PTR v_cur$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@MM@ImGui@@YAMPEBDHM@Z ; ImGui::RoundScalarWithFormatT<float,float>
	movss	DWORD PTR v_cur$[rbp], xmm0
$LN17@DragBehavi:
; Line 2307
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2308
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
; Line 2311
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	movss	xmm3, DWORD PTR v_max$[rbp]
	movss	xmm2, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@MMM@ImGui@@YAMHMMM_NMM@Z ; ImGui::ScaleRatioFromValueT<float,float,float>
	movss	DWORD PTR v_new_parametric$5[rbp], xmm0
; Line 2312
	movss	xmm0, DWORD PTR v_new_parametric$5[rbp]
	subss	xmm0, DWORD PTR v_old_ref_for_accum_remainder$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2313
	jmp	SHORT $LN19@DragBehavi
$LN18@DragBehavi:
; Line 2316
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR v_cur$[rbp]
	subss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
$LN19@DragBehavi:
; Line 2320
	movss	xmm0, DWORD PTR v_cur$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN20@DragBehavi
	jne	SHORT $LN20@DragBehavi
; Line 2321
	xorps	xmm0, xmm0
	movss	DWORD PTR v_cur$[rbp], xmm0
$LN20@DragBehavi:
; Line 2324
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR v_cur$[rbp]
	jp	SHORT $LN45@DragBehavi
	je	$LN21@DragBehavi
$LN45@DragBehavi:
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN21@DragBehavi
; Line 2326
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_cur$[rbp]
	ja	SHORT $LN23@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR v_cur$[rbp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN22@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN22@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN22@DragBehavi
$LN23@DragBehavi:
; Line 2327
	movss	xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR v_cur$[rbp], xmm0
$LN22@DragBehavi:
; Line 2328
	movss	xmm0, DWORD PTR v_cur$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	ja	SHORT $LN25@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR v_cur$[rbp]
	jbe	SHORT $LN24@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN24@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN24@DragBehavi
$LN25@DragBehavi:
; Line 2329
	movss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR v_cur$[rbp], xmm0
$LN24@DragBehavi:
$LN21@DragBehavi:
; Line 2333
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR v_cur$[rbp]
	jp	SHORT $LN26@DragBehavi
	jne	SHORT $LN26@DragBehavi
; Line 2334
	xor	al, al
	jmp	SHORT $LN1@DragBehavi
$LN26@DragBehavi:
; Line 2335
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR v_cur$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 2336
	mov	al, 1
$LN1@DragBehavi:
; Line 2337
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z ENDP	; ImGui::DragBehaviorT<float,float,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z
_TEXT	SEGMENT
g$ = 8
axis$ = 36
is_clamped$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
adjust_delta$ = 164
decimal_precision$1 = 196
is_just_activated$ = 228
is_already_past_limits_and_pushing_outward$ = 260
v_cur$ = 296
v_old_ref_for_accum_remainder$ = 328
logarithmic_zero_epsilon$ = 356
zero_deadzone_halfsize$ = 388
decimal_precision$2 = 420
v_old_parametric$3 = 452
v_new_parametric$4 = 484
v_new_parametric$5 = 516
$T6 = 932
tv219 = 948
tv196 = 948
tv157 = 948
tv74 = 948
tv71 = 948
tv68 = 948
tv66 = 948
tv169 = 952
tv139 = 952
data_type$ = 992
v$ = 1000
v_speed$ = 1008
v_min$ = 1016
v_max$ = 1024
format$ = 1032
flags$ = 1040
??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z PROC ; ImGui::DragBehaviorT<unsigned __int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2225
$LN56:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2226
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN28@DragBehavi
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	DWORD PTR tv66[rbp], 0
$LN29@DragBehavi:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2228
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jae	SHORT $LN30@DragBehavi
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv68[rbp], 0
$LN31@DragBehavi:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR is_clamped$[rbp], al
; Line 2229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN32@DragBehavi
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv71[rbp], 0
$LN33@DragBehavi:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2230
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN34@DragBehavi
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN34@DragBehavi
	mov	BYTE PTR tv74[rbp], 0
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv74[rbp], 1
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2233
	movss	xmm0, DWORD PTR v_speed$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN2@DragBehavi
	jne	$LN2@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN2@DragBehavi
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN54@DragBehavi
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN55@DragBehavi
$LN54@DragBehavi:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN55@DragBehavi:
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@DragBehavi
; Line 2234
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN52@DragBehavi
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN53@DragBehavi
$LN52@DragBehavi:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN53@DragBehavi:
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+12320]
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN2@DragBehavi:
; Line 2237
	xorps	xmm0, xmm0
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2238
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN3@DragBehavi
	xor	ecx, ecx
	call	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
; Line 2240
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	QWORD PTR tv139[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv139[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2241
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	je	SHORT $LN5@DragBehavi
; Line 2242
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN5@DragBehavi:
; Line 2243
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	je	SHORT $LN6@DragBehavi
; Line 2244
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN6@DragBehavi:
; Line 2245
	jmp	$LN4@DragBehavi
$LN3@DragBehavi:
; Line 2246
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN7@DragBehavi
; Line 2248
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN36@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv157[rbp], eax
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	DWORD PTR tv157[rbp], 0
$LN37@DragBehavi:
	mov	eax, DWORD PTR tv157[rbp]
	mov	DWORD PTR decimal_precision$1[rbp], eax
; Line 2249
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
	mov	QWORD PTR tv169[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv169[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2250
	mov	ecx, DWORD PTR decimal_precision$1[rbp]
	call	?GetMinimumStepAtDecimalPrecision@@YAMH@Z ; GetMinimumStepAtDecimalPrecision
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR v_speed$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN7@DragBehavi:
$LN4@DragBehavi:
; Line 2252
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2255
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN8@DragBehavi
; Line 2256
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN8@DragBehavi:
; Line 2259
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN9@DragBehavi
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN50@DragBehavi
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN51@DragBehavi
$LN50@DragBehavi:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN51@DragBehavi:
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	$LN9@DragBehavi
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN48@DragBehavi
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN49@DragBehavi
$LN48@DragBehavi:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN49@DragBehavi:
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN9@DragBehavi
; Line 2260
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN46@DragBehavi
	cvtsi2ss xmm0, rax
	jmp	SHORT $LN47@DragBehavi
$LN46@DragBehavi:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2ss xmm1, rcx
	addss	xmm1, xmm1
	movaps	xmm0, xmm1
$LN47@DragBehavi:
	movss	xmm1, DWORD PTR adjust_delta$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN9@DragBehavi:
; Line 2264
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	mov	BYTE PTR is_just_activated$[rbp], al
; Line 2265
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN41@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR [rax], rcx
	jb	SHORT $LN38@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN40@DragBehavi
$LN38@DragBehavi:
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR [rax], rcx
	ja	SHORT $LN39@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	DWORD PTR tv196[rbp], 1
	jmp	SHORT $LN42@DragBehavi
$LN41@DragBehavi:
$LN39@DragBehavi:
	mov	DWORD PTR tv196[rbp], 0
$LN42@DragBehavi:
	movzx	eax, BYTE PTR tv196[rbp]
	mov	BYTE PTR is_already_past_limits_and_pushing_outward$[rbp], al
; Line 2266
	movzx	eax, BYTE PTR is_just_activated$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DragBehavi
	movzx	eax, BYTE PTR is_already_past_limits_and_pushing_outward$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragBehavi
$LN12@DragBehavi:
; Line 2268
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12316], xmm0
; Line 2269
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2270
	jmp	SHORT $LN11@DragBehavi
$LN10@DragBehavi:
; Line 2271
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN45@DragBehavi
	je	SHORT $LN13@DragBehavi
$LN45@DragBehavi:
; Line 2273
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12316]
	addss	xmm0, DWORD PTR adjust_delta$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2274
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 1
$LN13@DragBehavi:
$LN11@DragBehavi:
; Line 2277
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12313]
	test	eax, eax
	jne	SHORT $LN14@DragBehavi
; Line 2278
	xor	al, al
	jmp	$LN1@DragBehavi
$LN14@DragBehavi:
; Line 2280
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR v_cur$[rbp], rax
; Line 2281
	xorps	xmm0, xmm0
	movsd	QWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2283
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2284
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2285
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN15@DragBehavi
; Line 2288
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN43@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv219[rbp], eax
	jmp	SHORT $LN44@DragBehavi
$LN43@DragBehavi:
	mov	DWORD PTR tv219[rbp], 1
$LN44@DragBehavi:
	mov	eax, DWORD PTR tv219[rbp]
	mov	DWORD PTR decimal_precision$2[rbp], eax
; Line 2289
	cvtsi2ss xmm0, DWORD PTR decimal_precision$2[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2292
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
	movss	DWORD PTR v_old_parametric$3[rbp], xmm0
; Line 2293
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_new_parametric$4[rbp], xmm0
; Line 2294
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new_parametric$4[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@_K_JN@ImGui@@YA_KHM_K0_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned __int64,__int64,double>
	mov	QWORD PTR v_cur$[rbp], rax
; Line 2295
	cvtss2sd xmm0, DWORD PTR v_old_parametric$3[rbp]
	movsd	QWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2296
	jmp	SHORT $LN16@DragBehavi
$LN15@DragBehavi:
; Line 2299
	mov	rax, QWORD PTR g$[rbp]
	cvttss2si rax, DWORD PTR [rax+12316]
	mov	rcx, QWORD PTR v_cur$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_cur$[rbp], rax
$LN16@DragBehavi:
; Line 2303
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN17@DragBehavi
; Line 2304
	mov	r8, QWORD PTR v_cur$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@_K_J@ImGui@@YA_KPEBDH_K@Z ; ImGui::RoundScalarWithFormatT<unsigned __int64,__int64>
	mov	QWORD PTR v_cur$[rbp], rax
$LN17@DragBehavi:
; Line 2307
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2308
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
; Line 2311
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_K_JN@ImGui@@YAMH_K00_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned __int64,__int64,double>
	movss	DWORD PTR v_new_parametric$5[rbp], xmm0
; Line 2312
	cvtss2sd xmm0, DWORD PTR v_new_parametric$5[rbp]
	subsd	xmm0, QWORD PTR v_old_ref_for_accum_remainder$[rbp]
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2313
	jmp	SHORT $LN19@DragBehavi
$LN18@DragBehavi:
; Line 2316
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR v_cur$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
$LN19@DragBehavi:
; Line 2320
	cmp	QWORD PTR v_cur$[rbp], 0
	jne	SHORT $LN20@DragBehavi
; Line 2321
	mov	QWORD PTR v_cur$[rbp], 0
$LN20@DragBehavi:
; Line 2324
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_cur$[rbp]
	cmp	QWORD PTR [rax], rcx
	je	$LN21@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN21@DragBehavi
; Line 2326
	mov	rax, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR v_cur$[rbp], rax
	jb	SHORT $LN23@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR v_cur$[rbp], rax
	jbe	SHORT $LN22@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN22@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN22@DragBehavi
$LN23@DragBehavi:
; Line 2327
	mov	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR v_cur$[rbp], rax
$LN22@DragBehavi:
; Line 2328
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_cur$[rbp], rax
	ja	SHORT $LN25@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR v_cur$[rbp], rax
	jae	SHORT $LN24@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN24@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN24@DragBehavi
$LN25@DragBehavi:
; Line 2329
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR v_cur$[rbp], rax
$LN24@DragBehavi:
$LN21@DragBehavi:
; Line 2333
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_cur$[rbp]
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN26@DragBehavi
; Line 2334
	xor	al, al
	jmp	SHORT $LN1@DragBehavi
$LN26@DragBehavi:
; Line 2335
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_cur$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2336
	mov	al, 1
$LN1@DragBehavi:
; Line 2337
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z ENDP ; ImGui::DragBehaviorT<unsigned __int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z
_TEXT	SEGMENT
g$ = 8
axis$ = 36
is_clamped$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
adjust_delta$ = 164
decimal_precision$1 = 196
is_just_activated$ = 228
is_already_past_limits_and_pushing_outward$ = 260
v_cur$ = 296
v_old_ref_for_accum_remainder$ = 328
logarithmic_zero_epsilon$ = 356
zero_deadzone_halfsize$ = 388
decimal_precision$2 = 420
v_old_parametric$3 = 452
v_new_parametric$4 = 484
v_new_parametric$5 = 516
$T6 = 932
tv219 = 948
tv196 = 948
tv157 = 948
tv74 = 948
tv71 = 948
tv68 = 948
tv66 = 948
tv169 = 952
tv139 = 952
data_type$ = 992
v$ = 1000
v_speed$ = 1008
v_min$ = 1016
v_max$ = 1024
format$ = 1032
flags$ = 1040
??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z PROC ; ImGui::DragBehaviorT<__int64,__int64,double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2225
$LN46:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2226
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN28@DragBehavi
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	DWORD PTR tv66[rbp], 0
$LN29@DragBehavi:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2228
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_min$[rbp], rax
	jge	SHORT $LN30@DragBehavi
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv68[rbp], 0
$LN31@DragBehavi:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR is_clamped$[rbp], al
; Line 2229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN32@DragBehavi
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv71[rbp], 0
$LN33@DragBehavi:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2230
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN34@DragBehavi
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN34@DragBehavi
	mov	BYTE PTR tv74[rbp], 0
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv74[rbp], 1
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2233
	movss	xmm0, DWORD PTR v_speed$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@DragBehavi
	jne	SHORT $LN2@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN2@DragBehavi
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@DragBehavi
; Line 2234
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+12320]
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN2@DragBehavi:
; Line 2237
	xorps	xmm0, xmm0
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2238
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN3@DragBehavi
	xor	ecx, ecx
	call	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
; Line 2240
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	QWORD PTR tv139[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv139[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2241
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	je	SHORT $LN5@DragBehavi
; Line 2242
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN5@DragBehavi:
; Line 2243
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	je	SHORT $LN6@DragBehavi
; Line 2244
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN6@DragBehavi:
; Line 2245
	jmp	$LN4@DragBehavi
$LN3@DragBehavi:
; Line 2246
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN7@DragBehavi
; Line 2248
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN36@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv157[rbp], eax
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	DWORD PTR tv157[rbp], 0
$LN37@DragBehavi:
	mov	eax, DWORD PTR tv157[rbp]
	mov	DWORD PTR decimal_precision$1[rbp], eax
; Line 2249
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
	mov	QWORD PTR tv169[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv169[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2250
	mov	ecx, DWORD PTR decimal_precision$1[rbp]
	call	?GetMinimumStepAtDecimalPrecision@@YAMH@Z ; GetMinimumStepAtDecimalPrecision
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR v_speed$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN7@DragBehavi:
$LN4@DragBehavi:
; Line 2252
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2255
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN8@DragBehavi
; Line 2256
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN8@DragBehavi:
; Line 2259
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN9@DragBehavi
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@DragBehavi
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN9@DragBehavi
; Line 2260
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR adjust_delta$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN9@DragBehavi:
; Line 2264
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	mov	BYTE PTR is_just_activated$[rbp], al
; Line 2265
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN41@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR [rax], rcx
	jl	SHORT $LN38@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN40@DragBehavi
$LN38@DragBehavi:
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR [rax], rcx
	jg	SHORT $LN39@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	DWORD PTR tv196[rbp], 1
	jmp	SHORT $LN42@DragBehavi
$LN41@DragBehavi:
$LN39@DragBehavi:
	mov	DWORD PTR tv196[rbp], 0
$LN42@DragBehavi:
	movzx	eax, BYTE PTR tv196[rbp]
	mov	BYTE PTR is_already_past_limits_and_pushing_outward$[rbp], al
; Line 2266
	movzx	eax, BYTE PTR is_just_activated$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DragBehavi
	movzx	eax, BYTE PTR is_already_past_limits_and_pushing_outward$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragBehavi
$LN12@DragBehavi:
; Line 2268
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12316], xmm0
; Line 2269
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2270
	jmp	SHORT $LN11@DragBehavi
$LN10@DragBehavi:
; Line 2271
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN45@DragBehavi
	je	SHORT $LN13@DragBehavi
$LN45@DragBehavi:
; Line 2273
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12316]
	addss	xmm0, DWORD PTR adjust_delta$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2274
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 1
$LN13@DragBehavi:
$LN11@DragBehavi:
; Line 2277
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12313]
	test	eax, eax
	jne	SHORT $LN14@DragBehavi
; Line 2278
	xor	al, al
	jmp	$LN1@DragBehavi
$LN14@DragBehavi:
; Line 2280
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR v_cur$[rbp], rax
; Line 2281
	xorps	xmm0, xmm0
	movsd	QWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2283
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2284
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2285
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN15@DragBehavi
; Line 2288
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN43@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv219[rbp], eax
	jmp	SHORT $LN44@DragBehavi
$LN43@DragBehavi:
	mov	DWORD PTR tv219[rbp], 1
$LN44@DragBehavi:
	mov	eax, DWORD PTR tv219[rbp]
	mov	DWORD PTR decimal_precision$2[rbp], eax
; Line 2289
	cvtsi2ss xmm0, DWORD PTR decimal_precision$2[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2292
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
	movss	DWORD PTR v_old_parametric$3[rbp], xmm0
; Line 2293
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_new_parametric$4[rbp], xmm0
; Line 2294
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new_parametric$4[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@_J_JN@ImGui@@YA_JHM_J0_NMM@Z ; ImGui::ScaleValueFromRatioT<__int64,__int64,double>
	mov	QWORD PTR v_cur$[rbp], rax
; Line 2295
	cvtss2sd xmm0, DWORD PTR v_old_parametric$3[rbp]
	movsd	QWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2296
	jmp	SHORT $LN16@DragBehavi
$LN15@DragBehavi:
; Line 2299
	mov	rax, QWORD PTR g$[rbp]
	cvttss2si rax, DWORD PTR [rax+12316]
	mov	rcx, QWORD PTR v_cur$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v_cur$[rbp], rax
$LN16@DragBehavi:
; Line 2303
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN17@DragBehavi
; Line 2304
	mov	r8, QWORD PTR v_cur$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@_J_J@ImGui@@YA_JPEBDH_J@Z ; ImGui::RoundScalarWithFormatT<__int64,__int64>
	mov	QWORD PTR v_cur$[rbp], rax
$LN17@DragBehavi:
; Line 2307
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2308
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
; Line 2311
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9, QWORD PTR v_max$[rbp]
	mov	r8, QWORD PTR v_min$[rbp]
	mov	rdx, QWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@_J_JN@ImGui@@YAMH_J00_NMM@Z ; ImGui::ScaleRatioFromValueT<__int64,__int64,double>
	movss	DWORD PTR v_new_parametric$5[rbp], xmm0
; Line 2312
	cvtss2sd xmm0, DWORD PTR v_new_parametric$5[rbp]
	subsd	xmm0, QWORD PTR v_old_ref_for_accum_remainder$[rbp]
	cvtsd2ss xmm0, xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2313
	jmp	SHORT $LN19@DragBehavi
$LN18@DragBehavi:
; Line 2316
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR v_cur$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
$LN19@DragBehavi:
; Line 2320
	cmp	QWORD PTR v_cur$[rbp], 0
	jne	SHORT $LN20@DragBehavi
; Line 2321
	mov	QWORD PTR v_cur$[rbp], 0
$LN20@DragBehavi:
; Line 2324
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_cur$[rbp]
	cmp	QWORD PTR [rax], rcx
	je	$LN21@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN21@DragBehavi
; Line 2326
	mov	rax, QWORD PTR v_min$[rbp]
	cmp	QWORD PTR v_cur$[rbp], rax
	jl	SHORT $LN23@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR v_cur$[rbp], rax
	jle	SHORT $LN22@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN22@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN22@DragBehavi
$LN23@DragBehavi:
; Line 2327
	mov	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR v_cur$[rbp], rax
$LN22@DragBehavi:
; Line 2328
	mov	rax, QWORD PTR v_max$[rbp]
	cmp	QWORD PTR v_cur$[rbp], rax
	jg	SHORT $LN25@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR v_cur$[rbp], rax
	jge	SHORT $LN24@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN24@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN24@DragBehavi
$LN25@DragBehavi:
; Line 2329
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR v_cur$[rbp], rax
$LN24@DragBehavi:
$LN21@DragBehavi:
; Line 2333
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_cur$[rbp]
	cmp	QWORD PTR [rax], rcx
	jne	SHORT $LN26@DragBehavi
; Line 2334
	xor	al, al
	jmp	SHORT $LN1@DragBehavi
$LN26@DragBehavi:
; Line 2335
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_cur$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2336
	mov	al, 1
$LN1@DragBehavi:
; Line 2337
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z ENDP ; ImGui::DragBehaviorT<__int64,__int64,double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z
_TEXT	SEGMENT
g$ = 8
axis$ = 36
is_clamped$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
adjust_delta$ = 164
decimal_precision$1 = 196
is_just_activated$ = 228
is_already_past_limits_and_pushing_outward$ = 260
v_cur$ = 292
v_old_ref_for_accum_remainder$ = 324
logarithmic_zero_epsilon$ = 356
zero_deadzone_halfsize$ = 388
decimal_precision$2 = 420
v_old_parametric$3 = 452
v_new_parametric$4 = 484
v_new_parametric$5 = 516
$T6 = 932
tv219 = 948
tv196 = 948
tv157 = 948
tv74 = 948
tv71 = 948
tv68 = 948
tv66 = 948
tv169 = 952
tv139 = 952
data_type$ = 992
v$ = 1000
v_speed$ = 1008
v_min$ = 1016
v_max$ = 1024
format$ = 1032
flags$ = 1040
??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z PROC	; ImGui::DragBehaviorT<unsigned int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2225
$LN46:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2226
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN28@DragBehavi
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	DWORD PTR tv66[rbp], 0
$LN29@DragBehavi:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2228
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jae	SHORT $LN30@DragBehavi
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv68[rbp], 0
$LN31@DragBehavi:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR is_clamped$[rbp], al
; Line 2229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN32@DragBehavi
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv71[rbp], 0
$LN33@DragBehavi:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2230
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN34@DragBehavi
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN34@DragBehavi
	mov	BYTE PTR tv74[rbp], 0
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv74[rbp], 1
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2233
	movss	xmm0, DWORD PTR v_speed$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@DragBehavi
	jne	SHORT $LN2@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN2@DragBehavi
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@DragBehavi
; Line 2234
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm0, rax
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+12320]
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN2@DragBehavi:
; Line 2237
	xorps	xmm0, xmm0
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2238
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN3@DragBehavi
	xor	ecx, ecx
	call	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
; Line 2240
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	QWORD PTR tv139[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv139[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2241
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	je	SHORT $LN5@DragBehavi
; Line 2242
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN5@DragBehavi:
; Line 2243
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	je	SHORT $LN6@DragBehavi
; Line 2244
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN6@DragBehavi:
; Line 2245
	jmp	$LN4@DragBehavi
$LN3@DragBehavi:
; Line 2246
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN7@DragBehavi
; Line 2248
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN36@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv157[rbp], eax
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	DWORD PTR tv157[rbp], 0
$LN37@DragBehavi:
	mov	eax, DWORD PTR tv157[rbp]
	mov	DWORD PTR decimal_precision$1[rbp], eax
; Line 2249
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
	mov	QWORD PTR tv169[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv169[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2250
	mov	ecx, DWORD PTR decimal_precision$1[rbp]
	call	?GetMinimumStepAtDecimalPrecision@@YAMH@Z ; GetMinimumStepAtDecimalPrecision
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR v_speed$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN7@DragBehavi:
$LN4@DragBehavi:
; Line 2252
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2255
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN8@DragBehavi
; Line 2256
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN8@DragBehavi:
; Line 2259
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN9@DragBehavi
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@DragBehavi
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm0, rax
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN9@DragBehavi
; Line 2260
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR adjust_delta$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN9@DragBehavi:
; Line 2264
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	mov	BYTE PTR is_just_activated$[rbp], al
; Line 2265
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN41@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR [rax], ecx
	jb	SHORT $LN38@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN40@DragBehavi
$LN38@DragBehavi:
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR [rax], ecx
	ja	SHORT $LN39@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	DWORD PTR tv196[rbp], 1
	jmp	SHORT $LN42@DragBehavi
$LN41@DragBehavi:
$LN39@DragBehavi:
	mov	DWORD PTR tv196[rbp], 0
$LN42@DragBehavi:
	movzx	eax, BYTE PTR tv196[rbp]
	mov	BYTE PTR is_already_past_limits_and_pushing_outward$[rbp], al
; Line 2266
	movzx	eax, BYTE PTR is_just_activated$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DragBehavi
	movzx	eax, BYTE PTR is_already_past_limits_and_pushing_outward$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragBehavi
$LN12@DragBehavi:
; Line 2268
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12316], xmm0
; Line 2269
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2270
	jmp	SHORT $LN11@DragBehavi
$LN10@DragBehavi:
; Line 2271
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN45@DragBehavi
	je	SHORT $LN13@DragBehavi
$LN45@DragBehavi:
; Line 2273
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12316]
	addss	xmm0, DWORD PTR adjust_delta$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2274
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 1
$LN13@DragBehavi:
$LN11@DragBehavi:
; Line 2277
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12313]
	test	eax, eax
	jne	SHORT $LN14@DragBehavi
; Line 2278
	xor	al, al
	jmp	$LN1@DragBehavi
$LN14@DragBehavi:
; Line 2280
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v_cur$[rbp], eax
; Line 2281
	xorps	xmm0, xmm0
	movss	DWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2283
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2284
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2285
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN15@DragBehavi
; Line 2288
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN43@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv219[rbp], eax
	jmp	SHORT $LN44@DragBehavi
$LN43@DragBehavi:
	mov	DWORD PTR tv219[rbp], 1
$LN44@DragBehavi:
	mov	eax, DWORD PTR tv219[rbp]
	mov	DWORD PTR decimal_precision$2[rbp], eax
; Line 2289
	cvtsi2ss xmm0, DWORD PTR decimal_precision$2[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2292
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
	movss	DWORD PTR v_old_parametric$3[rbp], xmm0
; Line 2293
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_new_parametric$4[rbp], xmm0
; Line 2294
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new_parametric$4[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@IHM@ImGui@@YAIHMII_NMM@Z ; ImGui::ScaleValueFromRatioT<unsigned int,int,float>
	mov	DWORD PTR v_cur$[rbp], eax
; Line 2295
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	movss	DWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2296
	jmp	SHORT $LN16@DragBehavi
$LN15@DragBehavi:
; Line 2299
	mov	rax, QWORD PTR g$[rbp]
	cvttss2si eax, DWORD PTR [rax+12316]
	mov	ecx, DWORD PTR v_cur$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v_cur$[rbp], eax
$LN16@DragBehavi:
; Line 2303
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN17@DragBehavi
; Line 2304
	mov	r8d, DWORD PTR v_cur$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@IH@ImGui@@YAIPEBDHI@Z ; ImGui::RoundScalarWithFormatT<unsigned int,int>
	mov	DWORD PTR v_cur$[rbp], eax
$LN17@DragBehavi:
; Line 2307
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2308
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
; Line 2311
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@IHM@ImGui@@YAMHIII_NMM@Z ; ImGui::ScaleRatioFromValueT<unsigned int,int,float>
	movss	DWORD PTR v_new_parametric$5[rbp], xmm0
; Line 2312
	movss	xmm0, DWORD PTR v_new_parametric$5[rbp]
	subss	xmm0, DWORD PTR v_old_ref_for_accum_remainder$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2313
	jmp	SHORT $LN19@DragBehavi
$LN18@DragBehavi:
; Line 2316
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR v_cur$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
$LN19@DragBehavi:
; Line 2320
	cmp	DWORD PTR v_cur$[rbp], 0
	jne	SHORT $LN20@DragBehavi
; Line 2321
	mov	DWORD PTR v_cur$[rbp], 0
$LN20@DragBehavi:
; Line 2324
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_cur$[rbp]
	cmp	DWORD PTR [rax], ecx
	je	$LN21@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN21@DragBehavi
; Line 2326
	mov	eax, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR v_cur$[rbp], eax
	jb	SHORT $LN23@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR v_cur$[rbp], eax
	jbe	SHORT $LN22@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN22@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN22@DragBehavi
$LN23@DragBehavi:
; Line 2327
	mov	eax, DWORD PTR v_min$[rbp]
	mov	DWORD PTR v_cur$[rbp], eax
$LN22@DragBehavi:
; Line 2328
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_cur$[rbp], eax
	ja	SHORT $LN25@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR v_cur$[rbp], eax
	jae	SHORT $LN24@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN24@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN24@DragBehavi
$LN25@DragBehavi:
; Line 2329
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR v_cur$[rbp], eax
$LN24@DragBehavi:
$LN21@DragBehavi:
; Line 2333
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_cur$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN26@DragBehavi
; Line 2334
	xor	al, al
	jmp	SHORT $LN1@DragBehavi
$LN26@DragBehavi:
; Line 2335
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_cur$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 2336
	mov	al, 1
$LN1@DragBehavi:
; Line 2337
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z ENDP	; ImGui::DragBehaviorT<unsigned int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z
_TEXT	SEGMENT
g$ = 8
axis$ = 36
is_clamped$ = 68
is_logarithmic$ = 100
is_floating_point$ = 132
adjust_delta$ = 164
decimal_precision$1 = 196
is_just_activated$ = 228
is_already_past_limits_and_pushing_outward$ = 260
v_cur$ = 292
v_old_ref_for_accum_remainder$ = 324
logarithmic_zero_epsilon$ = 356
zero_deadzone_halfsize$ = 388
decimal_precision$2 = 420
v_old_parametric$3 = 452
v_new_parametric$4 = 484
v_new_parametric$5 = 516
$T6 = 932
tv219 = 948
tv196 = 948
tv157 = 948
tv74 = 948
tv71 = 948
tv68 = 948
tv66 = 948
tv169 = 952
tv139 = 952
data_type$ = 992
v$ = 1000
v_speed$ = 1008
v_min$ = 1016
v_max$ = 1024
format$ = 1032
flags$ = 1040
??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z PROC	; ImGui::DragBehaviorT<int,int,float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2225
$LN46:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2226
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN28@DragBehavi
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	DWORD PTR tv66[rbp], 0
$LN29@DragBehavi:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR axis$[rbp], eax
; Line 2228
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jge	SHORT $LN30@DragBehavi
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv68[rbp], 0
$LN31@DragBehavi:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR is_clamped$[rbp], al
; Line 2229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN32@DragBehavi
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv71[rbp], 0
$LN33@DragBehavi:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR is_logarithmic$[rbp], al
; Line 2230
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN34@DragBehavi
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN34@DragBehavi
	mov	BYTE PTR tv74[rbp], 0
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv74[rbp], 1
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR is_floating_point$[rbp], al
; Line 2233
	movss	xmm0, DWORD PTR v_speed$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@DragBehavi
	jne	SHORT $LN2@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN2@DragBehavi
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@DragBehavi
; Line 2234
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+12320]
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN2@DragBehavi:
; Line 2237
	xorps	xmm0, xmm0
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2238
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN3@DragBehavi
	xor	ecx, ecx
	call	?IsMousePosValid@ImGui@@YA_NPEBUImVec2@@@Z ; ImGui::IsMousePosValid
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	je	$LN3@DragBehavi
; Line 2240
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	QWORD PTR tv139[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv139[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2241
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	je	SHORT $LN5@DragBehavi
; Line 2242
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@3c23d70a
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN5@DragBehavi:
; Line 2243
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	je	SHORT $LN6@DragBehavi
; Line 2244
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN6@DragBehavi:
; Line 2245
	jmp	$LN4@DragBehavi
$LN3@DragBehavi:
; Line 2246
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	$LN7@DragBehavi
; Line 2248
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN36@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv157[rbp], eax
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	DWORD PTR tv157[rbp], 0
$LN37@DragBehavi:
	mov	eax, DWORD PTR tv157[rbp]
	mov	DWORD PTR decimal_precision$1[rbp], eax
; Line 2249
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3dcccccd
	mov	r8d, 5
	mov	edx, 3
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetNavInputAmount2d@ImGui@@YA?AUImVec2@@HW4ImGuiInputReadMode@@MM@Z ; ImGui::GetNavInputAmount2d
	mov	QWORD PTR tv169[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv169[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2250
	mov	ecx, DWORD PTR decimal_precision$1[rbp]
	call	?GetMinimumStepAtDecimalPrecision@@YAMH@Z ; GetMinimumStepAtDecimalPrecision
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR v_speed$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_speed$[rbp], xmm0
$LN7@DragBehavi:
$LN4@DragBehavi:
; Line 2252
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	mulss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR adjust_delta$[rbp], xmm0
; Line 2255
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN8@DragBehavi
; Line 2256
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN8@DragBehavi:
; Line 2259
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN9@DragBehavi
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@7f7fffff
	comiss	xmm1, xmm0
	jbe	SHORT $LN9@DragBehavi
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN9@DragBehavi
; Line 2260
	mov	eax, DWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR adjust_delta$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR adjust_delta$[rbp], xmm0
$LN9@DragBehavi:
; Line 2264
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	mov	BYTE PTR is_just_activated$[rbp], al
; Line 2265
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	SHORT $LN41@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR [rax], ecx
	jl	SHORT $LN38@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN40@DragBehavi
$LN38@DragBehavi:
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR [rax], ecx
	jg	SHORT $LN39@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	DWORD PTR tv196[rbp], 1
	jmp	SHORT $LN42@DragBehavi
$LN41@DragBehavi:
$LN39@DragBehavi:
	mov	DWORD PTR tv196[rbp], 0
$LN42@DragBehavi:
	movzx	eax, BYTE PTR tv196[rbp]
	mov	BYTE PTR is_already_past_limits_and_pushing_outward$[rbp], al
; Line 2266
	movzx	eax, BYTE PTR is_just_activated$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DragBehavi
	movzx	eax, BYTE PTR is_already_past_limits_and_pushing_outward$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragBehavi
$LN12@DragBehavi:
; Line 2268
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12316], xmm0
; Line 2269
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2270
	jmp	SHORT $LN11@DragBehavi
$LN10@DragBehavi:
; Line 2271
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN45@DragBehavi
	je	SHORT $LN13@DragBehavi
$LN45@DragBehavi:
; Line 2273
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12316]
	addss	xmm0, DWORD PTR adjust_delta$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2274
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 1
$LN13@DragBehavi:
$LN11@DragBehavi:
; Line 2277
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12313]
	test	eax, eax
	jne	SHORT $LN14@DragBehavi
; Line 2278
	xor	al, al
	jmp	$LN1@DragBehavi
$LN14@DragBehavi:
; Line 2280
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v_cur$[rbp], eax
; Line 2281
	xorps	xmm0, xmm0
	movss	DWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2283
	xorps	xmm0, xmm0
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2284
	xorps	xmm0, xmm0
	movss	DWORD PTR zero_deadzone_halfsize$[rbp], xmm0
; Line 2285
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	$LN15@DragBehavi
; Line 2288
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	je	SHORT $LN43@DragBehavi
	mov	edx, 3
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatPrecision@@YAHPEBDH@Z	; ImParseFormatPrecision
	mov	DWORD PTR tv219[rbp], eax
	jmp	SHORT $LN44@DragBehavi
$LN43@DragBehavi:
	mov	DWORD PTR tv219[rbp], 1
$LN44@DragBehavi:
	mov	eax, DWORD PTR tv219[rbp]
	mov	DWORD PTR decimal_precision$2[rbp], eax
; Line 2289
	cvtsi2ss xmm0, DWORD PTR decimal_precision$2[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3dcccccd
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR logarithmic_zero_epsilon$[rbp], xmm0
; Line 2292
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ; ImGui::ScaleRatioFromValueT<int,int,float>
	movss	DWORD PTR v_old_parametric$3[rbp], xmm0
; Line 2293
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	addss	xmm0, DWORD PTR [rax+12316]
	movss	DWORD PTR v_new_parametric$4[rbp], xmm0
; Line 2294
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	movss	xmm1, DWORD PTR v_new_parametric$4[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleValueFromRatioT@HHM@ImGui@@YAHHMHH_NMM@Z ; ImGui::ScaleValueFromRatioT<int,int,float>
	mov	DWORD PTR v_cur$[rbp], eax
; Line 2295
	movss	xmm0, DWORD PTR v_old_parametric$3[rbp]
	movss	DWORD PTR v_old_ref_for_accum_remainder$[rbp], xmm0
; Line 2296
	jmp	SHORT $LN16@DragBehavi
$LN15@DragBehavi:
; Line 2299
	mov	rax, QWORD PTR g$[rbp]
	cvttss2si eax, DWORD PTR [rax+12316]
	mov	ecx, DWORD PTR v_cur$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v_cur$[rbp], eax
$LN16@DragBehavi:
; Line 2303
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN17@DragBehavi
; Line 2304
	mov	r8d, DWORD PTR v_cur$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	??$RoundScalarWithFormatT@HH@ImGui@@YAHPEBDHH@Z ; ImGui::RoundScalarWithFormatT<int,int>
	mov	DWORD PTR v_cur$[rbp], eax
$LN17@DragBehavi:
; Line 2307
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+12313], 0
; Line 2308
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
; Line 2311
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR logarithmic_zero_epsilon$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movzx	eax, BYTE PTR is_logarithmic$[rbp]
	mov	BYTE PTR [rsp+32], al
	mov	r9d, DWORD PTR v_max$[rbp]
	mov	r8d, DWORD PTR v_min$[rbp]
	mov	edx, DWORD PTR v_cur$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$ScaleRatioFromValueT@HHM@ImGui@@YAMHHHH_NMM@Z ; ImGui::ScaleRatioFromValueT<int,int,float>
	movss	DWORD PTR v_new_parametric$5[rbp], xmm0
; Line 2312
	movss	xmm0, DWORD PTR v_new_parametric$5[rbp]
	subss	xmm0, DWORD PTR v_old_ref_for_accum_remainder$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
; Line 2313
	jmp	SHORT $LN19@DragBehavi
$LN18@DragBehavi:
; Line 2316
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR v_cur$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+12316]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12316], xmm0
$LN19@DragBehavi:
; Line 2320
	cmp	DWORD PTR v_cur$[rbp], 0
	jne	SHORT $LN20@DragBehavi
; Line 2321
	mov	DWORD PTR v_cur$[rbp], 0
$LN20@DragBehavi:
; Line 2324
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_cur$[rbp]
	cmp	DWORD PTR [rax], ecx
	je	$LN21@DragBehavi
	movzx	eax, BYTE PTR is_clamped$[rbp]
	test	eax, eax
	je	$LN21@DragBehavi
; Line 2326
	mov	eax, DWORD PTR v_min$[rbp]
	cmp	DWORD PTR v_cur$[rbp], eax
	jl	SHORT $LN23@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR v_cur$[rbp], eax
	jle	SHORT $LN22@DragBehavi
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR adjust_delta$[rbp]
	jbe	SHORT $LN22@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN22@DragBehavi
$LN23@DragBehavi:
; Line 2327
	mov	eax, DWORD PTR v_min$[rbp]
	mov	DWORD PTR v_cur$[rbp], eax
$LN22@DragBehavi:
; Line 2328
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_cur$[rbp], eax
	jg	SHORT $LN25@DragBehavi
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR v_cur$[rbp], eax
	jge	SHORT $LN24@DragBehavi
	movss	xmm0, DWORD PTR adjust_delta$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN24@DragBehavi
	movzx	eax, BYTE PTR is_floating_point$[rbp]
	test	eax, eax
	jne	SHORT $LN24@DragBehavi
$LN25@DragBehavi:
; Line 2329
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR v_cur$[rbp], eax
$LN24@DragBehavi:
$LN21@DragBehavi:
; Line 2333
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_cur$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN26@DragBehavi
; Line 2334
	xor	al, al
	jmp	SHORT $LN1@DragBehavi
$LN26@DragBehavi:
; Line 2335
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_cur$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 2336
	mov	al, 1
$LN1@DragBehavi:
; Line 2337
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z ENDP	; ImGui::DragBehaviorT<int,int,float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SanitizeFormatString@@YAXPEBDPEAD_K@Z
_TEXT	SEGMENT
fmt_end$ = 8
c$1 = 36
tv77 = 244
fmt$ = 288
fmt_out$ = 296
fmt_out_size$ = 304
?SanitizeFormatString@@YAXPEBDPEAD_K@Z PROC		; SanitizeFormatString, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2165
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2167
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?ImParseFormatFindEnd@@YAPEBDPEBD@Z	; ImParseFormatFindEnd
	mov	QWORD PTR fmt_end$[rbp], rax
; Line 2168
	mov	rax, QWORD PTR fmt$[rbp]
	mov	rcx, QWORD PTR fmt_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	cmp	rax, QWORD PTR fmt_out_size$[rbp]
	jb	SHORT $LN6@SanitizeFo
	mov	eax, DWORD PTR ?__LINE__Var@?0??SanitizeFormatString@@YAXPEBDPEAD_K@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FG@FPDFFFKE@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAf?$AAm?$AAt?$AA_?$AAe?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@SanitizeFo:
$LN2@SanitizeFo:
; Line 2169
	mov	rax, QWORD PTR fmt_end$[rbp]
	cmp	QWORD PTR fmt$[rbp], rax
	jae	SHORT $LN3@SanitizeFo
; Line 2171
	mov	rax, QWORD PTR fmt$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv77[rbp], al
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	mov	QWORD PTR fmt$[rbp], rax
	movzx	eax, BYTE PTR tv77[rbp]
	mov	BYTE PTR c$1[rbp], al
; Line 2172
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 39					; 00000027H
	je	SHORT $LN4@SanitizeFo
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN4@SanitizeFo
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN4@SanitizeFo
; Line 2173
	mov	rax, QWORD PTR fmt_out$[rbp]
	movzx	ecx, BYTE PTR c$1[rbp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR fmt_out$[rbp]
	inc	rax
	mov	QWORD PTR fmt_out$[rbp], rax
$LN4@SanitizeFo:
; Line 2174
	jmp	SHORT $LN2@SanitizeFo
$LN3@SanitizeFo:
; Line 2175
	mov	rax, QWORD PTR fmt_out$[rbp]
	mov	BYTE PTR [rax], 0
; Line 2176
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?SanitizeFormatString@@YAXPEBDPEAD_K@Z ENDP		; SanitizeFormatString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetMinimumStepAtDecimalPrecision@@YAMH@Z
_TEXT	SEGMENT
tv74 = 192
decimal_precision$ = 240
?GetMinimumStepAtDecimalPrecision@@YAMH@Z PROC		; GetMinimumStepAtDecimalPrecision, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2141
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2143
	cmp	DWORD PTR decimal_precision$[rbp], 0
	jge	SHORT $LN2@GetMinimum
; Line 2144
	movss	xmm0, DWORD PTR __real@00800000
	jmp	SHORT $LN1@GetMinimum
$LN2@GetMinimum:
; Line 2145
	cmp	DWORD PTR decimal_precision$[rbp], 10
	jge	SHORT $LN4@GetMinimum
	movsxd	rax, DWORD PTR decimal_precision$[rbp]
	lea	rcx, OFFSET FLAT:?min_steps@?1??GetMinimumStepAtDecimalPrecision@@YAMH@Z@4QBMB
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN5@GetMinimum
$LN4@GetMinimum:
	mov	eax, DWORD PTR decimal_precision$[rbp]
	neg	eax
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@41200000
	call	?ImPow@@YAMMM@Z				; ImPow
	movss	DWORD PTR tv74[rbp], xmm0
$LN5@GetMinimum:
	movss	xmm0, DWORD PTR tv74[rbp]
$LN1@GetMinimum:
; Line 2146
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetMinimumStepAtDecimalPrecision@@YAMH@Z ENDP		; GetMinimumStepAtDecimalPrecision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@N@@YA_NPEANPEBN1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@N@@YA_NPEANPEBN1@Z PROC		; DataTypeClampT<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movsd	xmm0, QWORD PTR [rcx]
	movsd	QWORD PTR [rax], xmm0
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@N@@YA_NPEANPEBN1@Z ENDP		; DataTypeClampT<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z PROC		; DataTypeClampT<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z ENDP		; DataTypeClampT<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z PROC		; DataTypeClampT<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z ENDP		; DataTypeClampT<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z PROC		; DataTypeClampT<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jge	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jle	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z ENDP		; DataTypeClampT<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z PROC		; DataTypeClampT<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jae	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jbe	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z ENDP		; DataTypeClampT<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z PROC		; DataTypeClampT<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jle	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z ENDP		; DataTypeClampT<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z PROC		; DataTypeClampT<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR v_min$[rbp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR v_max$[rbp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z ENDP		; DataTypeClampT<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z PROC		; DataTypeClampT<short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR v_min$[rbp]
	movsx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR v_max$[rbp]
	movsx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z ENDP		; DataTypeClampT<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z PROC		; DataTypeClampT<unsigned char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR v_min$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR v_max$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z ENDP		; DataTypeClampT<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeClampT@C@@YA_NPEACPEBC1@Z
_TEXT	SEGMENT
v$ = 224
v_min$ = 232
v_max$ = 240
??$DataTypeClampT@C@@YA_NPEACPEBC1@Z PROC		; DataTypeClampT<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2115
	cmp	QWORD PTR v_min$[rbp], 0
	je	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR v_min$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_min$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2116
	cmp	QWORD PTR v_max$[rbp], 0
	je	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR v_max$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCl
	mov	rax, QWORD PTR v$[rbp]
	mov	rcx, QWORD PTR v_max$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	al, 1
	jmp	SHORT $LN1@DataTypeCl
$LN3@DataTypeCl:
; Line 2117
	xor	al, al
$LN1@DataTypeCl:
; Line 2118
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeClampT@C@@YA_NPEACPEBC1@Z ENDP		; DataTypeClampT<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@N@@YAHPEBN0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@N@@YAHPEBN0@Z PROC			; DataTypeCompareT<double>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR [rcx]
	jbe	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@N@@YAHPEBN0@Z ENDP			; DataTypeCompareT<double>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@M@@YAHPEBM0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@M@@YAHPEBM0@Z PROC			; DataTypeCompareT<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@M@@YAHPEBM0@Z ENDP			; DataTypeCompareT<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@_K@@YAHPEB_K0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@_K@@YAHPEB_K0@Z PROC		; DataTypeCompareT<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jae	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@_K@@YAHPEB_K0@Z ENDP		; DataTypeCompareT<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@_J@@YAHPEB_J0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@_J@@YAHPEB_J0@Z PROC		; DataTypeCompareT<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jge	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax], rcx
	jle	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@_J@@YAHPEB_J0@Z ENDP		; DataTypeCompareT<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@I@@YAHPEBI0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@I@@YAHPEBI0@Z PROC			; DataTypeCompareT<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jae	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jbe	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@I@@YAHPEBI0@Z ENDP			; DataTypeCompareT<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@H@@YAHPEBH0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@H@@YAHPEBH0@Z PROC			; DataTypeCompareT<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	jle	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@H@@YAHPEBH0@Z ENDP			; DataTypeCompareT<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@G@@YAHPEBG0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@G@@YAHPEBG0@Z PROC			; DataTypeCompareT<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@G@@YAHPEBG0@Z ENDP			; DataTypeCompareT<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@F@@YAHPEBF0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@F@@YAHPEBF0@Z PROC			; DataTypeCompareT<short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movsx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movsx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@F@@YAHPEBF0@Z ENDP			; DataTypeCompareT<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@E@@YAHPEBE0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@E@@YAHPEBE0@Z PROC			; DataTypeCompareT<unsigned char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@E@@YAHPEBE0@Z ENDP			; DataTypeCompareT<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$DataTypeCompareT@C@@YAHPEBC0@Z
_TEXT	SEGMENT
lhs$ = 224
rhs$ = 232
??$DataTypeCompareT@C@@YAHPEBC0@Z PROC			; DataTypeCompareT<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2085
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2086
	mov	rax, QWORD PTR lhs$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jge	SHORT $LN2@DataTypeCo
	mov	eax, -1
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2087
	mov	rax, QWORD PTR lhs$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR rhs$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	cmp	eax, ecx
	jle	SHORT $LN3@DataTypeCo
	mov	eax, 1
	jmp	SHORT $LN1@DataTypeCo
$LN3@DataTypeCo:
; Line 2088
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2089
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$DataTypeCompareT@C@@YAHPEBC0@Z ENDP			; DataTypeCompareT<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@H@@YAHHHH@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@H@@YAHHHH@Z PROC				; ImClamp<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR mn$[rbp]
	cmp	DWORD PTR v$[rbp], eax
	jge	SHORT $LN5@ImClamp
	mov	eax, DWORD PTR mn$[rbp]
	mov	DWORD PTR tv67[rbp], eax
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	eax, DWORD PTR mx$[rbp]
	cmp	DWORD PTR v$[rbp], eax
	jle	SHORT $LN3@ImClamp
	mov	eax, DWORD PTR mx$[rbp]
	mov	DWORD PTR tv66[rbp], eax
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	eax, DWORD PTR v$[rbp]
	mov	DWORD PTR tv66[rbp], eax
$LN4@ImClamp:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR tv67[rbp], eax
$LN6@ImClamp:
	mov	eax, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@H@@YAHHHH@Z ENDP				; ImClamp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@_K@@YA_K_K000@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@_K@@YA_K_K000@Z PROC		; ImSubClampOverflow<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR b$[rbp], 0
	jbe	SHORT $LN2@ImSubClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mn$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jae	SHORT $LN2@ImSubClamp
	mov	rax, QWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	cmp	QWORD PTR b$[rbp], 0
	jae	SHORT $LN3@ImSubClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mx$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jbe	SHORT $LN3@ImSubClamp
	mov	rax, QWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@_K@@YA_K_K000@Z ENDP		; ImSubClampOverflow<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@_K@@YA_K_K000@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@_K@@YA_K_K000@Z PROC		; ImAddClampOverflow<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR b$[rbp], 0
	jae	SHORT $LN2@ImAddClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mn$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jae	SHORT $LN2@ImAddClamp
	mov	rax, QWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	cmp	QWORD PTR b$[rbp], 0
	jbe	SHORT $LN3@ImAddClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mx$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jbe	SHORT $LN3@ImAddClamp
	mov	rax, QWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	add	rcx, rax
	mov	rax, rcx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@_K@@YA_K_K000@Z ENDP		; ImAddClampOverflow<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@_J@@YA_J_J000@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@_J@@YA_J_J000@Z PROC		; ImSubClampOverflow<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR b$[rbp], 0
	jle	SHORT $LN2@ImSubClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mn$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jge	SHORT $LN2@ImSubClamp
	mov	rax, QWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	cmp	QWORD PTR b$[rbp], 0
	jge	SHORT $LN3@ImSubClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mx$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jle	SHORT $LN3@ImSubClamp
	mov	rax, QWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@_J@@YA_J_J000@Z ENDP		; ImSubClampOverflow<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@_J@@YA_J_J000@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@_J@@YA_J_J000@Z PROC		; ImAddClampOverflow<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR b$[rbp], 0
	jge	SHORT $LN2@ImAddClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mn$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jge	SHORT $LN2@ImAddClamp
	mov	rax, QWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	cmp	QWORD PTR b$[rbp], 0
	jle	SHORT $LN3@ImAddClamp
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR mx$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR a$[rbp], rax
	jle	SHORT $LN3@ImAddClamp
	mov	rax, QWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	add	rcx, rax
	mov	rax, rcx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@_J@@YA_J_J000@Z ENDP		; ImAddClampOverflow<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@I@@YAIIIII@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@I@@YAIIIII@Z PROC			; ImSubClampOverflow<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR b$[rbp], 0
	jbe	SHORT $LN2@ImSubClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mn$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jae	SHORT $LN2@ImSubClamp
	mov	eax, DWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	cmp	DWORD PTR b$[rbp], 0
	jae	SHORT $LN3@ImSubClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mx$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jbe	SHORT $LN3@ImSubClamp
	mov	eax, DWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR a$[rbp]
	sub	ecx, eax
	mov	eax, ecx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@I@@YAIIIII@Z ENDP			; ImSubClampOverflow<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@I@@YAIIIII@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@I@@YAIIIII@Z PROC			; ImAddClampOverflow<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR b$[rbp], 0
	jae	SHORT $LN2@ImAddClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mn$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jae	SHORT $LN2@ImAddClamp
	mov	eax, DWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	cmp	DWORD PTR b$[rbp], 0
	jbe	SHORT $LN3@ImAddClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mx$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jbe	SHORT $LN3@ImAddClamp
	mov	eax, DWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR a$[rbp]
	add	ecx, eax
	mov	eax, ecx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@I@@YAIIIII@Z ENDP			; ImAddClampOverflow<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@H@@YAHHHHH@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@H@@YAHHHHH@Z PROC			; ImSubClampOverflow<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR b$[rbp], 0
	jle	SHORT $LN2@ImSubClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mn$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jge	SHORT $LN2@ImSubClamp
	mov	eax, DWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	cmp	DWORD PTR b$[rbp], 0
	jge	SHORT $LN3@ImSubClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mx$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jle	SHORT $LN3@ImSubClamp
	mov	eax, DWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR a$[rbp]
	sub	ecx, eax
	mov	eax, ecx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@H@@YAHHHHH@Z ENDP			; ImSubClampOverflow<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@H@@YAHHHHH@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@H@@YAHHHHH@Z PROC			; ImAddClampOverflow<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR b$[rbp], 0
	jge	SHORT $LN2@ImAddClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mn$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jge	SHORT $LN2@ImAddClamp
	mov	eax, DWORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	cmp	DWORD PTR b$[rbp], 0
	jle	SHORT $LN3@ImAddClamp
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR mx$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR a$[rbp], eax
	jle	SHORT $LN3@ImAddClamp
	mov	eax, DWORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	mov	eax, DWORD PTR b$[rbp]
	mov	ecx, DWORD PTR a$[rbp]
	add	ecx, eax
	mov	eax, ecx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@H@@YAHHHHH@Z ENDP			; ImAddClampOverflow<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@G@@YAGGGGG@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@G@@YAGGGGG@Z PROC			; ImSubClampOverflow<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movzx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN2@ImSubClamp
	movzx	eax, WORD PTR a$[rbp]
	movzx	ecx, WORD PTR mn$[rbp]
	movzx	edx, WORD PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImSubClamp
	movzx	eax, WORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	movzx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN3@ImSubClamp
	movzx	eax, WORD PTR a$[rbp]
	movzx	ecx, WORD PTR mx$[rbp]
	movzx	edx, WORD PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImSubClamp
	movzx	eax, WORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	movzx	eax, WORD PTR a$[rbp]
	movzx	ecx, WORD PTR b$[rbp]
	sub	eax, ecx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@G@@YAGGGGG@Z ENDP			; ImSubClampOverflow<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@G@@YAGGGGG@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@G@@YAGGGGG@Z PROC			; ImAddClampOverflow<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movzx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN2@ImAddClamp
	movzx	eax, WORD PTR a$[rbp]
	movzx	ecx, WORD PTR mn$[rbp]
	movzx	edx, WORD PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImAddClamp
	movzx	eax, WORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	movzx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN3@ImAddClamp
	movzx	eax, WORD PTR a$[rbp]
	movzx	ecx, WORD PTR mx$[rbp]
	movzx	edx, WORD PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImAddClamp
	movzx	eax, WORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	movzx	eax, WORD PTR a$[rbp]
	movzx	ecx, WORD PTR b$[rbp]
	add	eax, ecx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@G@@YAGGGGG@Z ENDP			; ImAddClampOverflow<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@F@@YAFFFFF@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@F@@YAFFFFF@Z PROC			; ImSubClampOverflow<short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN2@ImSubClamp
	movsx	eax, WORD PTR a$[rbp]
	movsx	ecx, WORD PTR mn$[rbp]
	movsx	edx, WORD PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImSubClamp
	movzx	eax, WORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	movsx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN3@ImSubClamp
	movsx	eax, WORD PTR a$[rbp]
	movsx	ecx, WORD PTR mx$[rbp]
	movsx	edx, WORD PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImSubClamp
	movzx	eax, WORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	movsx	eax, WORD PTR a$[rbp]
	movsx	ecx, WORD PTR b$[rbp]
	sub	eax, ecx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@F@@YAFFFFF@Z ENDP			; ImSubClampOverflow<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@F@@YAFFFFF@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@F@@YAFFFFF@Z PROC			; ImAddClampOverflow<short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	WORD PTR [rsp+32], r9w
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	WORD PTR [rsp+8], cx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN2@ImAddClamp
	movsx	eax, WORD PTR a$[rbp]
	movsx	ecx, WORD PTR mn$[rbp]
	movsx	edx, WORD PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImAddClamp
	movzx	eax, WORD PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	movsx	eax, WORD PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN3@ImAddClamp
	movsx	eax, WORD PTR a$[rbp]
	movsx	ecx, WORD PTR mx$[rbp]
	movsx	edx, WORD PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImAddClamp
	movzx	eax, WORD PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	movsx	eax, WORD PTR a$[rbp]
	movsx	ecx, WORD PTR b$[rbp]
	add	eax, ecx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@F@@YAFFFFF@Z ENDP			; ImAddClampOverflow<short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@E@@YAEEEEE@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@E@@YAEEEEE@Z PROC			; ImSubClampOverflow<unsigned char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movzx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN2@ImSubClamp
	movzx	eax, BYTE PTR a$[rbp]
	movzx	ecx, BYTE PTR mn$[rbp]
	movzx	edx, BYTE PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImSubClamp
	movzx	eax, BYTE PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	movzx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN3@ImSubClamp
	movzx	eax, BYTE PTR a$[rbp]
	movzx	ecx, BYTE PTR mx$[rbp]
	movzx	edx, BYTE PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImSubClamp
	movzx	eax, BYTE PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	movzx	eax, BYTE PTR a$[rbp]
	movzx	ecx, BYTE PTR b$[rbp]
	sub	eax, ecx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@E@@YAEEEEE@Z ENDP			; ImSubClampOverflow<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@E@@YAEEEEE@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@E@@YAEEEEE@Z PROC			; ImAddClampOverflow<unsigned char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movzx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN2@ImAddClamp
	movzx	eax, BYTE PTR a$[rbp]
	movzx	ecx, BYTE PTR mn$[rbp]
	movzx	edx, BYTE PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImAddClamp
	movzx	eax, BYTE PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	movzx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN3@ImAddClamp
	movzx	eax, BYTE PTR a$[rbp]
	movzx	ecx, BYTE PTR mx$[rbp]
	movzx	edx, BYTE PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImAddClamp
	movzx	eax, BYTE PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	movzx	eax, BYTE PTR a$[rbp]
	movzx	ecx, BYTE PTR b$[rbp]
	add	eax, ecx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@E@@YAEEEEE@Z ENDP			; ImAddClampOverflow<unsigned char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSubClampOverflow@C@@YACCCCC@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImSubClampOverflow@C@@YACCCCC@Z PROC			; ImSubClampOverflow<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 418
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN2@ImSubClamp
	movsx	eax, BYTE PTR a$[rbp]
	movsx	ecx, BYTE PTR mn$[rbp]
	movsx	edx, BYTE PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImSubClamp
	movzx	eax, BYTE PTR mn$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN2@ImSubClamp:
	movsx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN3@ImSubClamp
	movsx	eax, BYTE PTR a$[rbp]
	movsx	ecx, BYTE PTR mx$[rbp]
	movsx	edx, BYTE PTR b$[rbp]
	add	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImSubClamp
	movzx	eax, BYTE PTR mx$[rbp]
	jmp	SHORT $LN1@ImSubClamp
$LN3@ImSubClamp:
	movsx	eax, BYTE PTR a$[rbp]
	movsx	ecx, BYTE PTR b$[rbp]
	sub	eax, ecx
$LN1@ImSubClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImSubClampOverflow@C@@YACCCCC@Z ENDP			; ImSubClampOverflow<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImAddClampOverflow@C@@YACCCCC@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
mn$ = 240
mx$ = 248
??$ImAddClampOverflow@C@@YACCCCC@Z PROC			; ImAddClampOverflow<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 417
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jge	SHORT $LN2@ImAddClamp
	movsx	eax, BYTE PTR a$[rbp]
	movsx	ecx, BYTE PTR mn$[rbp]
	movsx	edx, BYTE PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN2@ImAddClamp
	movzx	eax, BYTE PTR mn$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN2@ImAddClamp:
	movsx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	jle	SHORT $LN3@ImAddClamp
	movsx	eax, BYTE PTR a$[rbp]
	movsx	ecx, BYTE PTR mx$[rbp]
	movsx	edx, BYTE PTR b$[rbp]
	sub	ecx, edx
	cmp	eax, ecx
	jle	SHORT $LN3@ImAddClamp
	movzx	eax, BYTE PTR mx$[rbp]
	jmp	SHORT $LN1@ImAddClamp
$LN3@ImAddClamp:
	movsx	eax, BYTE PTR a$[rbp]
	movsx	ecx, BYTE PTR b$[rbp]
	add	eax, ecx
$LN1@ImAddClamp:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImAddClampOverflow@C@@YACCCCC@Z ENDP			; ImAddClampOverflow<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_end$ = 40
g$1 = 72
fmt$ = 320
?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z PROC		; PatchFormatStringFloatToInt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1881
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1882
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN2@PatchForma
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN2@PatchForma
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN2@PatchForma
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 102				; 00000066H
	jne	SHORT $LN2@PatchForma
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@PatchForma
; Line 1883
	lea	rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	jmp	$LN1@PatchForma
$LN2@PatchForma:
; Line 1884
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 1885
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?ImParseFormatFindEnd@@YAPEBDPEBD@Z	; ImParseFormatFindEnd
	mov	QWORD PTR fmt_end$[rbp], rax
; Line 1886
	mov	rax, QWORD PTR fmt_start$[rbp]
	cmp	QWORD PTR fmt_end$[rbp], rax
	jbe	$LN3@PatchForma
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR fmt_end$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 102				; 00000066H
	jne	$LN3@PatchForma
; Line 1889
	mov	rax, QWORD PTR fmt$[rbp]
	cmp	QWORD PTR fmt_start$[rbp], rax
	jne	SHORT $LN4@PatchForma
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_end$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN4@PatchForma
; Line 1890
	lea	rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	jmp	SHORT $LN1@PatchForma
$LN4@PatchForma:
; Line 1891
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$1[rbp], rax
; Line 1892
	mov	rax, QWORD PTR fmt$[rbp]
	mov	rcx, QWORD PTR fmt_start$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR g$1[rbp]
	add	rcx, 13076				; 00003314H
	mov	rdx, QWORD PTR fmt_end$[rbp]
	mov	QWORD PTR [rsp+40], rdx
	mov	rdx, QWORD PTR fmt$[rbp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:??_C@_09JKJEEIJP@?$CF?4?$CKs?$CF?$CFd?$CFs@
	mov	edx, 3073				; 00000c01H
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 1893
	mov	rax, QWORD PTR g$1[rbp]
	add	rax, 13076				; 00003314H
	jmp	SHORT $LN1@PatchForma
$LN3@PatchForma:
; Line 1898
	mov	rax, QWORD PTR fmt$[rbp]
$LN1@PatchForma:
; Line 1899
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z ENDP		; PatchFormatStringFloatToInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z
_TEXT	SEGMENT
items_separated_by_zeros$ = 8
items_count$ = 36
p$ = 72
tv77 = 280
tv78 = 288
data$ = 336
idx$ = 344
out_text$ = 352
?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z PROC	; Items_SingleStringGetter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1760
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1762
	mov	rax, QWORD PTR data$[rbp]
	mov	QWORD PTR items_separated_by_zeros$[rbp], rax
; Line 1763
	mov	DWORD PTR items_count$[rbp], 0
; Line 1764
	mov	rax, QWORD PTR items_separated_by_zeros$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@Items_Sing:
; Line 1765
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@Items_Sing
; Line 1767
	mov	eax, DWORD PTR items_count$[rbp]
	cmp	DWORD PTR idx$[rbp], eax
	jne	SHORT $LN4@Items_Sing
; Line 1768
	jmp	SHORT $LN3@Items_Sing
$LN4@Items_Sing:
; Line 1769
	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR tv77[rbp], rax
	mov	QWORD PTR tv78[rbp], -1
$LL8@Items_Sing:
	inc	QWORD PTR tv78[rbp]
	mov	rax, QWORD PTR tv77[rbp]
	mov	rcx, QWORD PTR tv78[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL8@Items_Sing
	mov	rax, QWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	QWORD PTR p$[rbp], rax
; Line 1770
	mov	eax, DWORD PTR items_count$[rbp]
	inc	eax
	mov	DWORD PTR items_count$[rbp], eax
; Line 1771
	jmp	SHORT $LN2@Items_Sing
$LN3@Items_Sing:
; Line 1772
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN5@Items_Sing
; Line 1773
	xor	al, al
	jmp	SHORT $LN1@Items_Sing
$LN5@Items_Sing:
; Line 1774
	cmp	QWORD PTR out_text$[rbp], 0
	je	SHORT $LN6@Items_Sing
; Line 1775
	mov	rax, QWORD PTR out_text$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax], rcx
$LN6@Items_Sing:
; Line 1776
	mov	al, 1
$LN1@Items_Sing:
; Line 1777
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z ENDP	; Items_SingleStringGetter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z
_TEXT	SEGMENT
items$ = 8
data$ = 256
idx$ = 264
out_text$ = 272
?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z PROC		; Items_ArrayGetter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1751
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1752
	mov	rax, QWORD PTR data$[rbp]
	mov	QWORD PTR items$[rbp], rax
; Line 1753
	cmp	QWORD PTR out_text$[rbp], 0
	je	SHORT $LN2@Items_Arra
; Line 1754
	movsxd	rax, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR out_text$[rbp]
	mov	rdx, QWORD PTR items$[rbp]
	mov	rax, QWORD PTR [rdx+rax*8]
	mov	QWORD PTR [rcx], rax
$LN2@Items_Arra:
; Line 1755
	mov	al, 1
; Line 1756
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z ENDP		; Items_ArrayGetter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcMaxPopupHeightFromItemCount@@YAMH@Z
_TEXT	SEGMENT
g$ = 8
items_count$ = 256
?CalcMaxPopupHeightFromItemCount@@YAMH@Z PROC		; CalcMaxPopupHeightFromItemCount, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1552
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1553
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1554
	cmp	DWORD PTR items_count$[rbp], 0
	jg	SHORT $LN2@CalcMaxPop
; Line 1555
	movss	xmm0, DWORD PTR __real@7f7fffff
	jmp	SHORT $LN1@CalcMaxPop
$LN2@CalcMaxPop:
; Line 1556
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	addss	xmm0, DWORD PTR [rcx+5548]
	cvtsi2ss xmm1, DWORD PTR items_count$[rbp]
	mulss	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	subss	xmm0, DWORD PTR [rax+5548]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5480]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
$LN1@CalcMaxPop:
; Line 1557
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?CalcMaxPopupHeightFromItemCount@@YAMH@Z ENDP		; CalcMaxPopupHeightFromItemCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ShrinkWidthItemComparer@@YAHPEBX0@Z
_TEXT	SEGMENT
a$ = 8
b$ = 40
d$1 = 68
lhs$ = 320
rhs$ = 328
?ShrinkWidthItemComparer@@YAHPEBX0@Z PROC		; ShrinkWidthItemComparer, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1491
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1492
	mov	rax, QWORD PTR lhs$[rbp]
	mov	QWORD PTR a$[rbp], rax
; Line 1493
	mov	rax, QWORD PTR rhs$[rbp]
	mov	QWORD PTR b$[rbp], rax
; Line 1494
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	cvttss2si eax, xmm0
	mov	DWORD PTR d$1[rbp], eax
	cmp	DWORD PTR d$1[rbp], 0
	je	SHORT $LN2@ShrinkWidt
; Line 1495
	mov	eax, DWORD PTR d$1[rbp]
	jmp	SHORT $LN1@ShrinkWidt
$LN2@ShrinkWidt:
; Line 1496
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
$LN1@ShrinkWidt:
; Line 1497
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ShrinkWidthItemComparer@@YAHPEBX0@Z ENDP		; ShrinkWidthItemComparer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z
_TEXT	SEGMENT
all_on$ = 4
any_on$ = 36
pressed$ = 68
g$4 = 104
backup_item_flags$5 = 132
tv70 = 340
tv66 = 340
__$ArrayPad$ = 344
label$ = 384
flags$ = 392
flags_value$ = 400
??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z PROC	; ImGui::CheckboxFlagsT<unsigned __int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1128
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1129
	mov	rax, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR flags_value$[rbp]
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	cmp	rax, QWORD PTR flags_value$[rbp]
	jne	SHORT $LN8@CheckboxFl
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN9@CheckboxFl
$LN8@CheckboxFl:
	mov	DWORD PTR tv66[rbp], 0
$LN9@CheckboxFl:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR all_on$[rbp], al
; Line 1130
	mov	rax, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR flags_value$[rbp]
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	test	rax, rax
	je	SHORT $LN10@CheckboxFl
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN11@CheckboxFl
$LN10@CheckboxFl:
	mov	DWORD PTR tv70[rbp], 0
$LN11@CheckboxFl:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR any_on$[rbp], al
; Line 1132
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	jne	SHORT $LN2@CheckboxFl
	movzx	eax, BYTE PTR any_on$[rbp]
	test	eax, eax
	je	SHORT $LN2@CheckboxFl
; Line 1134
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$4[rbp], rax
; Line 1135
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	mov	DWORD PTR backup_item_flags$5[rbp], eax
; Line 1136
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	or	eax, 64					; 00000040H
	mov	rcx, QWORD PTR g$4[rbp]
	mov	DWORD PTR [rcx+7236], eax
; Line 1137
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
; Line 1138
	mov	rax, QWORD PTR g$4[rbp]
	mov	ecx, DWORD PTR backup_item_flags$5[rbp]
	mov	DWORD PTR [rax+7236], ecx
; Line 1139
	jmp	SHORT $LN3@CheckboxFl
$LN2@CheckboxFl:
; Line 1142
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
$LN3@CheckboxFl:
; Line 1145
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN4@CheckboxFl
; Line 1147
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	je	SHORT $LN5@CheckboxFl
; Line 1148
	mov	rax, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR flags_value$[rbp]
	mov	rax, QWORD PTR [rax]
	or	rax, rcx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	QWORD PTR [rcx], rax
	jmp	SHORT $LN6@CheckboxFl
$LN5@CheckboxFl:
; Line 1150
	mov	rax, QWORD PTR flags_value$[rbp]
	not	rax
	mov	rcx, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR [rcx]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	QWORD PTR [rcx], rax
$LN6@CheckboxFl:
$LN4@CheckboxFl:
; Line 1152
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 1153
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z ENDP	; ImGui::CheckboxFlagsT<unsigned __int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z
_TEXT	SEGMENT
all_on$ = 4
any_on$ = 36
pressed$ = 68
g$4 = 104
backup_item_flags$5 = 132
tv70 = 340
tv66 = 340
__$ArrayPad$ = 344
label$ = 384
flags$ = 392
flags_value$ = 400
??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z PROC	; ImGui::CheckboxFlagsT<__int64>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1128
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1129
	mov	rax, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR flags_value$[rbp]
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	cmp	rax, QWORD PTR flags_value$[rbp]
	jne	SHORT $LN8@CheckboxFl
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN9@CheckboxFl
$LN8@CheckboxFl:
	mov	DWORD PTR tv66[rbp], 0
$LN9@CheckboxFl:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR all_on$[rbp], al
; Line 1130
	mov	rax, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR flags_value$[rbp]
	mov	rax, QWORD PTR [rax]
	and	rax, rcx
	test	rax, rax
	je	SHORT $LN10@CheckboxFl
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN11@CheckboxFl
$LN10@CheckboxFl:
	mov	DWORD PTR tv70[rbp], 0
$LN11@CheckboxFl:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR any_on$[rbp], al
; Line 1132
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	jne	SHORT $LN2@CheckboxFl
	movzx	eax, BYTE PTR any_on$[rbp]
	test	eax, eax
	je	SHORT $LN2@CheckboxFl
; Line 1134
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$4[rbp], rax
; Line 1135
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	mov	DWORD PTR backup_item_flags$5[rbp], eax
; Line 1136
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	or	eax, 64					; 00000040H
	mov	rcx, QWORD PTR g$4[rbp]
	mov	DWORD PTR [rcx+7236], eax
; Line 1137
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
; Line 1138
	mov	rax, QWORD PTR g$4[rbp]
	mov	ecx, DWORD PTR backup_item_flags$5[rbp]
	mov	DWORD PTR [rax+7236], ecx
; Line 1139
	jmp	SHORT $LN3@CheckboxFl
$LN2@CheckboxFl:
; Line 1142
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
$LN3@CheckboxFl:
; Line 1145
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN4@CheckboxFl
; Line 1147
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	je	SHORT $LN5@CheckboxFl
; Line 1148
	mov	rax, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR flags_value$[rbp]
	mov	rax, QWORD PTR [rax]
	or	rax, rcx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	QWORD PTR [rcx], rax
	jmp	SHORT $LN6@CheckboxFl
$LN5@CheckboxFl:
; Line 1150
	mov	rax, QWORD PTR flags_value$[rbp]
	not	rax
	mov	rcx, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR [rcx]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	QWORD PTR [rcx], rax
$LN6@CheckboxFl:
$LN4@CheckboxFl:
; Line 1152
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 1153
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z ENDP	; ImGui::CheckboxFlagsT<__int64>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z
_TEXT	SEGMENT
all_on$ = 4
any_on$ = 36
pressed$ = 68
g$4 = 104
backup_item_flags$5 = 132
tv70 = 340
tv66 = 340
__$ArrayPad$ = 344
label$ = 384
flags$ = 392
flags_value$ = 400
??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z PROC		; ImGui::CheckboxFlagsT<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1128
$LN12:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1129
	mov	rax, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR flags_value$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	cmp	eax, DWORD PTR flags_value$[rbp]
	jne	SHORT $LN8@CheckboxFl
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN9@CheckboxFl
$LN8@CheckboxFl:
	mov	DWORD PTR tv66[rbp], 0
$LN9@CheckboxFl:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR all_on$[rbp], al
; Line 1130
	mov	rax, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR flags_value$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN10@CheckboxFl
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN11@CheckboxFl
$LN10@CheckboxFl:
	mov	DWORD PTR tv70[rbp], 0
$LN11@CheckboxFl:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR any_on$[rbp], al
; Line 1132
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	jne	SHORT $LN2@CheckboxFl
	movzx	eax, BYTE PTR any_on$[rbp]
	test	eax, eax
	je	SHORT $LN2@CheckboxFl
; Line 1134
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$4[rbp], rax
; Line 1135
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	mov	DWORD PTR backup_item_flags$5[rbp], eax
; Line 1136
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	or	eax, 64					; 00000040H
	mov	rcx, QWORD PTR g$4[rbp]
	mov	DWORD PTR [rcx+7236], eax
; Line 1137
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
; Line 1138
	mov	rax, QWORD PTR g$4[rbp]
	mov	ecx, DWORD PTR backup_item_flags$5[rbp]
	mov	DWORD PTR [rax+7236], ecx
; Line 1139
	jmp	SHORT $LN3@CheckboxFl
$LN2@CheckboxFl:
; Line 1142
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
$LN3@CheckboxFl:
; Line 1145
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN4@CheckboxFl
; Line 1147
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	je	SHORT $LN5@CheckboxFl
; Line 1148
	mov	rax, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR flags_value$[rbp]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN6@CheckboxFl
$LN5@CheckboxFl:
; Line 1150
	mov	eax, DWORD PTR flags_value$[rbp]
	not	eax
	mov	rcx, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@CheckboxFl:
$LN4@CheckboxFl:
; Line 1152
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 1153
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z ENDP		; ImGui::CheckboxFlagsT<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z
_TEXT	SEGMENT
all_on$ = 4
any_on$ = 36
pressed$ = 68
g$4 = 104
backup_item_flags$5 = 132
tv70 = 340
tv66 = 340
__$ArrayPad$ = 344
label$ = 384
flags$ = 392
flags_value$ = 400
??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z PROC		; ImGui::CheckboxFlagsT<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1128
$LN12:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1129
	mov	rax, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR flags_value$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	cmp	eax, DWORD PTR flags_value$[rbp]
	jne	SHORT $LN8@CheckboxFl
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN9@CheckboxFl
$LN8@CheckboxFl:
	mov	DWORD PTR tv66[rbp], 0
$LN9@CheckboxFl:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR all_on$[rbp], al
; Line 1130
	mov	rax, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR flags_value$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN10@CheckboxFl
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN11@CheckboxFl
$LN10@CheckboxFl:
	mov	DWORD PTR tv70[rbp], 0
$LN11@CheckboxFl:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR any_on$[rbp], al
; Line 1132
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	jne	SHORT $LN2@CheckboxFl
	movzx	eax, BYTE PTR any_on$[rbp]
	test	eax, eax
	je	SHORT $LN2@CheckboxFl
; Line 1134
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$4[rbp], rax
; Line 1135
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	mov	DWORD PTR backup_item_flags$5[rbp], eax
; Line 1136
	mov	rax, QWORD PTR g$4[rbp]
	mov	eax, DWORD PTR [rax+7236]
	or	eax, 64					; 00000040H
	mov	rcx, QWORD PTR g$4[rbp]
	mov	DWORD PTR [rcx+7236], eax
; Line 1137
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
; Line 1138
	mov	rax, QWORD PTR g$4[rbp]
	mov	ecx, DWORD PTR backup_item_flags$5[rbp]
	mov	DWORD PTR [rax+7236], ecx
; Line 1139
	jmp	SHORT $LN3@CheckboxFl
$LN2@CheckboxFl:
; Line 1142
	lea	rdx, QWORD PTR all_on$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Checkbox@ImGui@@YA_NPEBDPEA_N@Z	; ImGui::Checkbox
	mov	BYTE PTR pressed$[rbp], al
$LN3@CheckboxFl:
; Line 1145
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN4@CheckboxFl
; Line 1147
	movzx	eax, BYTE PTR all_on$[rbp]
	test	eax, eax
	je	SHORT $LN5@CheckboxFl
; Line 1148
	mov	rax, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR flags_value$[rbp]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN6@CheckboxFl
$LN5@CheckboxFl:
; Line 1150
	mov	eax, DWORD PTR flags_value$[rbp]
	not	eax
	mov	rcx, QWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR flags$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@CheckboxFl:
$LN4@CheckboxFl:
; Line 1152
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 1153
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z ENDP		; ImGui::CheckboxFlagsT<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@M@@YAMMMM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@M@@YAMMMM@Z PROC				; ImLerp<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR b$[rbp]
	subss	xmm0, DWORD PTR a$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	xmm1, DWORD PTR a$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@M@@YAMMMM@Z ENDP				; ImLerp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@M@@YAMMMM@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@M@@YAMMMM@Z PROC				; ImClamp<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR mn$[rbp]
	comiss	xmm0, DWORD PTR v$[rbp]
	jbe	SHORT $LN5@ImClamp
	movss	xmm0, DWORD PTR mn$[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	movss	xmm0, DWORD PTR v$[rbp]
	comiss	xmm0, DWORD PTR mx$[rbp]
	jbe	SHORT $LN3@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	movss	xmm0, DWORD PTR v$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
$LN4@ImClamp:
	movss	xmm0, DWORD PTR tv66[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
$LN6@ImClamp:
	movss	xmm0, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@M@@YAMMMM@Z ENDP				; ImClamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z
_TEXT	SEGMENT
g$ = 8
font$ = 40
line_height$ = 68
scale$ = 100
text_size$ = 136
line_width$ = 164
s$ = 200
c$4 = 228
char_width$5 = 260
$T6 = 484
tv75 = 500
__$ArrayPad$ = 504
__$ReturnUdt$ = 544
text_begin$ = 552
text_end$ = 560
remaining$ = 568
out_offset$ = 576
stop_on_new_line$ = 584
?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z PROC ; InputTextCalcTextSizeW, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3608
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+584]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3609
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3610
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	QWORD PTR font$[rbp], rax
; Line 3611
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR line_height$[rbp], xmm0
; Line 3612
	mov	rax, QWORD PTR font$[rbp]
	movss	xmm0, DWORD PTR line_height$[rbp]
	divss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR scale$[rbp], xmm0
; Line 3614
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR text_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 3615
	xorps	xmm0, xmm0
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3617
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR s$[rbp], rax
$LN14@InputTextC:
$LN13@InputTextC:
$LN2@InputTextC:
; Line 3618
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	$LN3@InputTextC
; Line 3620
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv75[rbp], eax
	mov	rax, QWORD PTR s$[rbp]
	add	rax, 2
	mov	QWORD PTR s$[rbp], rax
	mov	eax, DWORD PTR tv75[rbp]
	mov	DWORD PTR c$4[rbp], eax
; Line 3621
	cmp	DWORD PTR c$4[rbp], 10
	jne	SHORT $LN4@InputTextC
; Line 3623
	movss	xmm1, DWORD PTR line_width$[rbp]
	movss	xmm0, DWORD PTR text_size$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR text_size$[rbp], xmm0
; Line 3624
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR text_size$[rbp+4], xmm0
; Line 3625
	xorps	xmm0, xmm0
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3626
	movzx	eax, BYTE PTR stop_on_new_line$[rbp]
	test	eax, eax
	je	SHORT $LN5@InputTextC
; Line 3627
	jmp	SHORT $LN3@InputTextC
$LN5@InputTextC:
; Line 3628
	jmp	$LN2@InputTextC
$LN4@InputTextC:
; Line 3630
	cmp	DWORD PTR c$4[rbp], 13
	jne	SHORT $LN6@InputTextC
; Line 3631
	jmp	$LN13@InputTextC
$LN6@InputTextC:
; Line 3633
	movzx	edx, WORD PTR c$4[rbp]
	mov	rcx, QWORD PTR font$[rbp]
	call	?GetCharAdvance@ImFont@@QEBAMG@Z	; ImFont::GetCharAdvance
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	DWORD PTR char_width$5[rbp], xmm0
; Line 3634
	movss	xmm0, DWORD PTR line_width$[rbp]
	addss	xmm0, DWORD PTR char_width$5[rbp]
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3635
	jmp	$LN14@InputTextC
$LN3@InputTextC:
; Line 3637
	movss	xmm0, DWORD PTR line_width$[rbp]
	comiss	xmm0, DWORD PTR text_size$[rbp]
	jbe	SHORT $LN7@InputTextC
; Line 3638
	movss	xmm0, DWORD PTR line_width$[rbp]
	movss	DWORD PTR text_size$[rbp], xmm0
$LN7@InputTextC:
; Line 3640
	cmp	QWORD PTR out_offset$[rbp], 0
	je	SHORT $LN8@InputTextC
; Line 3641
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR line_width$[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_offset$[rbp]
	mov	QWORD PTR [rcx], rax
$LN8@InputTextC:
; Line 3643
	movss	xmm0, DWORD PTR line_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN10@InputTextC
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@InputTextC
	jne	SHORT $LN9@InputTextC
$LN10@InputTextC:
; Line 3644
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR text_size$[rbp+4], xmm0
$LN9@InputTextC:
; Line 3646
	cmp	QWORD PTR remaining$[rbp], 0
	je	SHORT $LN11@InputTextC
; Line 3647
	mov	rax, QWORD PTR remaining$[rbp]
	mov	rcx, QWORD PTR s$[rbp]
	mov	QWORD PTR [rax], rcx
$LN11@InputTextC:
; Line 3649
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	mov	rcx, QWORD PTR text_size$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 3650
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z ENDP ; InputTextCalcTextSizeW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z
_TEXT	SEGMENT
line_count$ = 4
s$ = 40
c$1 = 68
tv66 = 276
text_begin$ = 320
out_text_end$ = 328
?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z PROC ; InputTextCalcTextLenAndLineCount, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3594
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3595
	mov	DWORD PTR line_count$[rbp], 0
; Line 3596
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR s$[rbp], rax
$LN2@InputTextC:
; Line 3597
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv66[rbp], al
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR c$1[rbp], al
	movsx	eax, BYTE PTR c$1[rbp]
	test	eax, eax
	je	SHORT $LN3@InputTextC
; Line 3598
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 10
	jne	SHORT $LN4@InputTextC
; Line 3599
	mov	eax, DWORD PTR line_count$[rbp]
	inc	eax
	mov	DWORD PTR line_count$[rbp], eax
$LN4@InputTextC:
	jmp	SHORT $LN2@InputTextC
$LN3@InputTextC:
; Line 3600
	mov	rax, QWORD PTR s$[rbp]
	dec	rax
	mov	QWORD PTR s$[rbp], rax
; Line 3601
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	je	SHORT $LN5@InputTextC
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	je	SHORT $LN5@InputTextC
; Line 3602
	mov	eax, DWORD PTR line_count$[rbp]
	inc	eax
	mov	DWORD PTR line_count$[rbp], eax
$LN5@InputTextC:
; Line 3603
	mov	rax, QWORD PTR out_text_end$[rbp]
	mov	rcx, QWORD PTR s$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 3604
	mov	eax, DWORD PTR line_count$[rbp]
; Line 3605
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z ENDP ; InputTextCalcTextLenAndLineCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z
_TEXT	SEGMENT
c$ = 4
pass$4 = 36
g$5 = 72
c_decimal_point$6 = 100
callback_data$7 = 136
tv83 = 388
tv76 = 388
tv178 = 392
__$ArrayPad$ = 400
p_char$ = 448
flags$ = 456
callback$ = 464
user_data$ = 472
input_source$ = 480
?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z PROC ; InputTextFilterCharacter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3843
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3844
	cmp	DWORD PTR input_source$[rbp], 2
	je	SHORT $LN28@InputTextF
	cmp	DWORD PTR input_source$[rbp], 5
	je	SHORT $LN28@InputTextF
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LA@GNNDJIHJ@?$AAi?$AAn?$AAp?$AAu?$AAt?$AA_?$AAs?$AAo?$AAu?$AAr?$AAc?$AAe?$AA?5?$AA?$DN?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN28@InputTextF:
; Line 3845
	mov	rax, QWORD PTR p_char$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR c$[rbp], eax
; Line 3848
	cmp	DWORD PTR c$[rbp], 32			; 00000020H
	jae	$LN2@InputTextF
; Line 3850
	mov	BYTE PTR pass$4[rbp], 0
; Line 3851
	cmp	DWORD PTR c$[rbp], 10
	jne	SHORT $LN29@InputTextF
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN29@InputTextF
	mov	DWORD PTR tv76[rbp], 1
	jmp	SHORT $LN30@InputTextF
$LN29@InputTextF:
	mov	DWORD PTR tv76[rbp], 0
$LN30@InputTextF:
	movzx	eax, BYTE PTR pass$4[rbp]
	or	eax, DWORD PTR tv76[rbp]
	mov	BYTE PTR pass$4[rbp], al
; Line 3852
	cmp	DWORD PTR c$[rbp], 9
	jne	SHORT $LN31@InputTextF
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN31@InputTextF
	mov	DWORD PTR tv83[rbp], 1
	jmp	SHORT $LN32@InputTextF
$LN31@InputTextF:
	mov	DWORD PTR tv83[rbp], 0
$LN32@InputTextF:
	movzx	eax, BYTE PTR pass$4[rbp]
	or	eax, DWORD PTR tv83[rbp]
	mov	BYTE PTR pass$4[rbp], al
; Line 3853
	movzx	eax, BYTE PTR pass$4[rbp]
	test	eax, eax
	jne	SHORT $LN3@InputTextF
; Line 3854
	xor	al, al
	jmp	$LN1@InputTextF
$LN3@InputTextF:
$LN2@InputTextF:
; Line 3857
	cmp	DWORD PTR input_source$[rbp], 5
	je	SHORT $LN4@InputTextF
; Line 3860
	cmp	DWORD PTR c$[rbp], 127			; 0000007fH
	jne	SHORT $LN5@InputTextF
; Line 3861
	xor	al, al
	jmp	$LN1@InputTextF
$LN5@InputTextF:
; Line 3864
	cmp	DWORD PTR c$[rbp], 57344		; 0000e000H
	jb	SHORT $LN6@InputTextF
	cmp	DWORD PTR c$[rbp], 63743		; 0000f8ffH
	ja	SHORT $LN6@InputTextF
; Line 3865
	xor	al, al
	jmp	$LN1@InputTextF
$LN6@InputTextF:
$LN4@InputTextF:
; Line 3869
	cmp	DWORD PTR c$[rbp], 65535		; 0000ffffH
	jbe	SHORT $LN7@InputTextF
; Line 3870
	xor	al, al
	jmp	$LN1@InputTextF
$LN7@InputTextF:
; Line 3873
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131087				; 0002000fH
	test	eax, eax
	je	$LN8@InputTextF
; Line 3880
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$5[rbp], rax
; Line 3881
	mov	rax, QWORD PTR g$5[rbp]
	movsx	eax, BYTE PTR [rax+12384]
	mov	DWORD PTR c_decimal_point$6[rbp], eax
; Line 3884
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@InputTextF
; Line 3885
	cmp	DWORD PTR c$[rbp], 48			; 00000030H
	jb	SHORT $LN11@InputTextF
	cmp	DWORD PTR c$[rbp], 57			; 00000039H
	jbe	SHORT $LN10@InputTextF
$LN11@InputTextF:
	mov	eax, DWORD PTR c_decimal_point$6[rbp]
	cmp	DWORD PTR c$[rbp], eax
	je	SHORT $LN10@InputTextF
	cmp	DWORD PTR c$[rbp], 45			; 0000002dH
	je	SHORT $LN10@InputTextF
	cmp	DWORD PTR c$[rbp], 43			; 0000002bH
	je	SHORT $LN10@InputTextF
	cmp	DWORD PTR c$[rbp], 42			; 0000002aH
	je	SHORT $LN10@InputTextF
	cmp	DWORD PTR c$[rbp], 47			; 0000002fH
	je	SHORT $LN10@InputTextF
; Line 3886
	xor	al, al
	jmp	$LN1@InputTextF
$LN10@InputTextF:
$LN9@InputTextF:
; Line 3889
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131072				; 00020000H
	test	eax, eax
	je	SHORT $LN12@InputTextF
; Line 3890
	cmp	DWORD PTR c$[rbp], 48			; 00000030H
	jb	SHORT $LN14@InputTextF
	cmp	DWORD PTR c$[rbp], 57			; 00000039H
	jbe	SHORT $LN13@InputTextF
$LN14@InputTextF:
	mov	eax, DWORD PTR c_decimal_point$6[rbp]
	cmp	DWORD PTR c$[rbp], eax
	je	SHORT $LN13@InputTextF
	cmp	DWORD PTR c$[rbp], 45			; 0000002dH
	je	SHORT $LN13@InputTextF
	cmp	DWORD PTR c$[rbp], 43			; 0000002bH
	je	SHORT $LN13@InputTextF
	cmp	DWORD PTR c$[rbp], 42			; 0000002aH
	je	SHORT $LN13@InputTextF
	cmp	DWORD PTR c$[rbp], 47			; 0000002fH
	je	SHORT $LN13@InputTextF
	cmp	DWORD PTR c$[rbp], 101			; 00000065H
	je	SHORT $LN13@InputTextF
	cmp	DWORD PTR c$[rbp], 69			; 00000045H
	je	SHORT $LN13@InputTextF
; Line 3891
	xor	al, al
	jmp	$LN1@InputTextF
$LN13@InputTextF:
$LN12@InputTextF:
; Line 3894
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN15@InputTextF
; Line 3895
	cmp	DWORD PTR c$[rbp], 48			; 00000030H
	jb	SHORT $LN17@InputTextF
	cmp	DWORD PTR c$[rbp], 57			; 00000039H
	jbe	SHORT $LN16@InputTextF
$LN17@InputTextF:
	cmp	DWORD PTR c$[rbp], 97			; 00000061H
	jb	SHORT $LN18@InputTextF
	cmp	DWORD PTR c$[rbp], 102			; 00000066H
	jbe	SHORT $LN16@InputTextF
$LN18@InputTextF:
	cmp	DWORD PTR c$[rbp], 65			; 00000041H
	jb	SHORT $LN19@InputTextF
	cmp	DWORD PTR c$[rbp], 70			; 00000046H
	jbe	SHORT $LN16@InputTextF
$LN19@InputTextF:
; Line 3896
	xor	al, al
	jmp	$LN1@InputTextF
$LN16@InputTextF:
$LN15@InputTextF:
; Line 3899
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN20@InputTextF
; Line 3900
	cmp	DWORD PTR c$[rbp], 97			; 00000061H
	jb	SHORT $LN21@InputTextF
	cmp	DWORD PTR c$[rbp], 122			; 0000007aH
	ja	SHORT $LN21@InputTextF
; Line 3901
	mov	eax, DWORD PTR c$[rbp]
	add	eax, -32				; ffffffe0H
	mov	DWORD PTR c$[rbp], eax
	mov	rax, QWORD PTR p_char$[rbp]
	mov	ecx, DWORD PTR c$[rbp]
	mov	DWORD PTR [rax], ecx
$LN21@InputTextF:
$LN20@InputTextF:
; Line 3903
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN22@InputTextF
; Line 3904
	mov	ecx, DWORD PTR c$[rbp]
	call	?ImCharIsBlankW@@YA_NI@Z		; ImCharIsBlankW
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@InputTextF
; Line 3905
	xor	al, al
	jmp	$LN1@InputTextF
$LN23@InputTextF:
$LN22@InputTextF:
$LN8@InputTextF:
; Line 3909
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	$LN24@InputTextF
; Line 3911
	lea	rcx, QWORD PTR callback_data$7[rbp]
	call	??0ImGuiInputTextCallbackData@@QEAA@XZ	; ImGuiInputTextCallbackData::ImGuiInputTextCallbackData
; Line 3912
	lea	rax, QWORD PTR callback_data$7[rbp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 56					; 00000038H
	rep stosb
; Line 3913
	mov	DWORD PTR callback_data$7[rbp], 512	; 00000200H
; Line 3914
	movzx	eax, WORD PTR c$[rbp]
	mov	WORD PTR callback_data$7[rbp+16], ax
; Line 3915
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR callback_data$7[rbp+4], eax
; Line 3916
	mov	rax, QWORD PTR user_data$[rbp]
	mov	QWORD PTR callback_data$7[rbp+8], rax
; Line 3917
	mov	rax, QWORD PTR callback$[rbp]
	mov	QWORD PTR tv178[rbp], rax
	lea	rcx, QWORD PTR callback_data$7[rbp]
	call	QWORD PTR tv178[rbp]
	test	eax, eax
	je	SHORT $LN25@InputTextF
; Line 3918
	xor	al, al
	jmp	SHORT $LN1@InputTextF
$LN25@InputTextF:
; Line 3919
	movzx	eax, WORD PTR callback_data$7[rbp+16]
	mov	rcx, QWORD PTR p_char$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 3920
	movzx	eax, WORD PTR callback_data$7[rbp+16]
	test	eax, eax
	jne	SHORT $LN26@InputTextF
; Line 3921
	xor	al, al
	jmp	SHORT $LN1@InputTextF
$LN26@InputTextF:
$LN24@InputTextF:
; Line 3924
	mov	al, 1
$LN1@InputTextF:
; Line 3925
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z ENDP ; InputTextFilterCharacter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
style$ = 72
id$ = 100
label_size$ = 136
frame_bb$ = 168
inner_bb$ = 216
total_bb$ = 264
hovered$ = 308
v_min$11 = 340
v_max$12 = 372
i$13 = 404
v$14 = 436
values_count_min$ = 468
idx_hovered$ = 500
res_w$15 = 532
item_count$16 = 564
t$17 = 596
v_idx$18 = 628
v0$19 = 660
v1$20 = 692
t_step$21 = 724
inv_scale$22 = 756
v0$23 = 788
t0$24 = 820
tp0$25 = 856
histogram_zero_line_t$26 = 884
col_base$27 = 916
col_hovered$28 = 948
n$29 = 980
t1$30 = 1012
v1_idx$31 = 1044
v1$32 = 1076
tp1$33 = 1112
pos0$34 = 1144
pos1$35 = 1176
$T36 = 1972
$T37 = 2004
$T38 = 2036
$T39 = 2068
$T40 = 2100
$T41 = 2136
$T42 = 2164
$T43 = 2196
$T44 = 2228
$T45 = 2260
$T46 = 2292
tv345 = 2308
tv340 = 2308
tv336 = 2308
tv315 = 2308
tv249 = 2308
tv246 = 2308
tv239 = 2308
tv237 = 2308
tv155 = 2308
tv472 = 2312
tv449 = 2312
tv434 = 2312
tv420 = 2312
tv369 = 2312
tv335 = 2312
tv321 = 2312
tv295 = 2312
tv287 = 2312
tv235 = 2312
tv183 = 2312
tv145 = 2312
tv470 = 2320
tv444 = 2320
tv429 = 2320
tv143 = 2320
__$ArrayPad$ = 2328
plot_type$ = 2368
label$ = 2376
values_getter$ = 2384
data$ = 2392
values_count$ = 2400
values_offset$ = 2408
overlay_text$ = 2416
scale_min$ = 2424
scale_max$ = 2432
frame_size$ = 2440
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z PROC ; ImGui::PlotEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6390
$LN59:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 2408				; 00000968H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 394				; 0000018aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+2440]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6391
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6392
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6393
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN8@PlotEx
; Line 6394
	mov	eax, -1
	jmp	$LN1@PlotEx
$LN8@PlotEx:
; Line 6396
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 6397
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 6399
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 6400
	movss	xmm0, DWORD PTR frame_size$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@PlotEx
	jne	SHORT $LN9@PlotEx
; Line 6401
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR frame_size$[rbp], xmm0
$LN9@PlotEx:
; Line 6402
	movss	xmm0, DWORD PTR frame_size$[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN10@PlotEx
	jne	SHORT $LN10@PlotEx
; Line 6403
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR frame_size$[rbp+4], xmm0
$LN10@PlotEx:
; Line 6405
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR frame_size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T36[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 6406
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR $T37[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv145[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR $T38[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv143[rbp], rax
	mov	r8, QWORD PTR tv145[rbp]
	mov	rdx, QWORD PTR tv143[rbp]
	lea	rcx, QWORD PTR inner_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 6407
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN29@PlotEx
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv155[rbp], xmm0
	jmp	SHORT $LN30@PlotEx
$LN29@PlotEx:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv155[rbp], xmm0
$LN30@PlotEx:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR tv155[rbp]
	lea	rcx, QWORD PTR $T39[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR $T40[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 6408
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 6409
	xor	r9d, r9d
	lea	r8, QWORD PTR frame_bb$[rbp]
	xor	edx, edx
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@PlotEx
; Line 6410
	mov	eax, -1
	jmp	$LN1@PlotEx
$LN11@PlotEx:
; Line 6411
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR hovered$[rbp], al
; Line 6414
	movss	xmm0, DWORD PTR scale_min$[rbp]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN58@PlotEx
	je	SHORT $LN13@PlotEx
$LN58@PlotEx:
	movss	xmm0, DWORD PTR scale_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	$LN12@PlotEx
	jne	$LN12@PlotEx
$LN13@PlotEx:
; Line 6416
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR v_min$11[rbp], xmm0
; Line 6417
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR v_max$12[rbp], xmm0
; Line 6418
	mov	DWORD PTR i$13[rbp], 0
	jmp	SHORT $LN4@PlotEx
$LN2@PlotEx:
	mov	eax, DWORD PTR i$13[rbp]
	inc	eax
	mov	DWORD PTR i$13[rbp], eax
$LN4@PlotEx:
	mov	eax, DWORD PTR values_count$[rbp]
	cmp	DWORD PTR i$13[rbp], eax
	jge	SHORT $LN3@PlotEx
; Line 6420
	mov	rax, QWORD PTR values_getter$[rbp]
	mov	QWORD PTR tv183[rbp], rax
	mov	edx, DWORD PTR i$13[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv183[rbp]
	movss	DWORD PTR v$14[rbp], xmm0
; Line 6421
	movss	xmm0, DWORD PTR v$14[rbp]
	ucomiss	xmm0, DWORD PTR v$14[rbp]
	jp	SHORT $LN57@PlotEx
	je	SHORT $LN14@PlotEx
$LN57@PlotEx:
; Line 6422
	jmp	SHORT $LN2@PlotEx
$LN14@PlotEx:
; Line 6423
	movss	xmm1, DWORD PTR v$14[rbp]
	movss	xmm0, DWORD PTR v_min$11[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR v_min$11[rbp], xmm0
; Line 6424
	movss	xmm1, DWORD PTR v$14[rbp]
	movss	xmm0, DWORD PTR v_max$12[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR v_max$12[rbp], xmm0
; Line 6425
	jmp	$LN2@PlotEx
$LN3@PlotEx:
; Line 6426
	movss	xmm0, DWORD PTR scale_min$[rbp]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN15@PlotEx
	jne	SHORT $LN15@PlotEx
; Line 6427
	movss	xmm0, DWORD PTR v_min$11[rbp]
	movss	DWORD PTR scale_min$[rbp], xmm0
$LN15@PlotEx:
; Line 6428
	movss	xmm0, DWORD PTR scale_max$[rbp]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN16@PlotEx
	jne	SHORT $LN16@PlotEx
; Line 6429
	movss	xmm0, DWORD PTR v_max$12[rbp]
	movss	DWORD PTR scale_max$[rbp], xmm0
$LN16@PlotEx:
$LN12@PlotEx:
; Line 6432
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv237[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 7
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv235[rbp], eax
	movss	xmm0, DWORD PTR tv237[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR tv235[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 6434
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN31@PlotEx
	mov	DWORD PTR tv239[rbp], 2
	jmp	SHORT $LN32@PlotEx
$LN31@PlotEx:
	mov	DWORD PTR tv239[rbp], 1
$LN32@PlotEx:
	mov	eax, DWORD PTR tv239[rbp]
	mov	DWORD PTR values_count_min$[rbp], eax
; Line 6435
	mov	DWORD PTR idx_hovered$[rbp], -1
; Line 6436
	mov	eax, DWORD PTR values_count_min$[rbp]
	cmp	DWORD PTR values_count$[rbp], eax
	jl	$LN17@PlotEx
; Line 6438
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN33@PlotEx
	mov	DWORD PTR tv246[rbp], -1
	jmp	SHORT $LN34@PlotEx
$LN33@PlotEx:
	mov	DWORD PTR tv246[rbp], 0
$LN34@PlotEx:
	cvttss2si eax, DWORD PTR frame_size$[rbp]
	mov	edx, DWORD PTR values_count$[rbp]
	mov	ecx, eax
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	add	eax, DWORD PTR tv246[rbp]
	mov	DWORD PTR res_w$15[rbp], eax
; Line 6439
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN35@PlotEx
	mov	DWORD PTR tv249[rbp], -1
	jmp	SHORT $LN36@PlotEx
$LN35@PlotEx:
	mov	DWORD PTR tv249[rbp], 0
$LN36@PlotEx:
	mov	eax, DWORD PTR tv249[rbp]
	mov	ecx, DWORD PTR values_count$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR item_count$16[rbp], eax
; Line 6442
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	$LN18@PlotEx
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	rdx, rax
	lea	rcx, QWORD PTR inner_bb$[rbp]
	call	?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z	; ImRect::Contains
	movzx	eax, al
	test	eax, eax
	je	$LN18@PlotEx
; Line 6444
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	subss	xmm0, DWORD PTR inner_bb$[rbp]
	movss	xmm1, DWORD PTR inner_bb$[rbp+8]
	subss	xmm1, DWORD PTR inner_bb$[rbp]
	divss	xmm0, xmm1
	movss	xmm2, DWORD PTR __real@3f7ff972
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR t$17[rbp], xmm0
; Line 6445
	cvtsi2ss xmm0, DWORD PTR item_count$16[rbp]
	movss	xmm1, DWORD PTR t$17[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR v_idx$18[rbp], eax
; Line 6446
	cmp	DWORD PTR v_idx$18[rbp], 0
	jl	SHORT $LN37@PlotEx
	mov	eax, DWORD PTR values_count$[rbp]
	cmp	DWORD PTR v_idx$18[rbp], eax
	jl	SHORT $LN38@PlotEx
$LN37@PlotEx:
	mov	eax, DWORD PTR ?__LINE__Var@?0??PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z@4JA
	add	eax, 56					; 00000038H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EG@HCGMCBDC@?$AAv?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAv@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN38@PlotEx:
; Line 6448
	mov	rax, QWORD PTR values_getter$[rbp]
	mov	QWORD PTR tv287[rbp], rax
	mov	eax, DWORD PTR values_offset$[rbp]
	mov	ecx, DWORD PTR v_idx$18[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdq
	idiv	DWORD PTR values_count$[rbp]
	mov	eax, edx
	mov	edx, eax
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv287[rbp]
	movss	DWORD PTR v0$19[rbp], xmm0
; Line 6449
	mov	rax, QWORD PTR values_getter$[rbp]
	mov	QWORD PTR tv295[rbp], rax
	mov	eax, DWORD PTR v_idx$18[rbp]
	mov	ecx, DWORD PTR values_offset$[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdq
	idiv	DWORD PTR values_count$[rbp]
	mov	eax, edx
	mov	edx, eax
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv295[rbp]
	movss	DWORD PTR v1$20[rbp], xmm0
; Line 6450
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN19@PlotEx
; Line 6451
	cvtss2sd xmm0, DWORD PTR v1$20[rbp]
	mov	eax, DWORD PTR v_idx$18[rbp]
	inc	eax
	cvtss2sd xmm1, DWORD PTR v0$19[rbp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9d, eax
	movaps	xmm2, xmm1
	movq	r8, xmm2
	mov	edx, DWORD PTR v_idx$18[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@OBCBLNMM@?$CFd?3?5?$CF8?44g?6?$CFd?3?5?$CF8?44g@
	call	?SetTooltip@ImGui@@YAXPEBDZZ		; ImGui::SetTooltip
	jmp	SHORT $LN20@PlotEx
$LN19@PlotEx:
; Line 6452
	cmp	DWORD PTR plot_type$[rbp], 1
	jne	SHORT $LN21@PlotEx
; Line 6453
	cvtss2sd xmm0, DWORD PTR v0$19[rbp]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	mov	edx, DWORD PTR v_idx$18[rbp]
	lea	rcx, OFFSET FLAT:??_C@_09OADNPGHP@?$CFd?3?5?$CF8?44g@
	call	?SetTooltip@ImGui@@YAXPEBDZZ		; ImGui::SetTooltip
$LN21@PlotEx:
$LN20@PlotEx:
; Line 6454
	mov	eax, DWORD PTR v_idx$18[rbp]
	mov	DWORD PTR idx_hovered$[rbp], eax
$LN18@PlotEx:
; Line 6457
	cvtsi2ss xmm0, DWORD PTR res_w$15[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR t_step$21[rbp], xmm0
; Line 6458
	movss	xmm0, DWORD PTR scale_min$[rbp]
	ucomiss	xmm0, DWORD PTR scale_max$[rbp]
	jp	SHORT $LN39@PlotEx
	jne	SHORT $LN39@PlotEx
	xorps	xmm0, xmm0
	movss	DWORD PTR tv315[rbp], xmm0
	jmp	SHORT $LN40@PlotEx
$LN39@PlotEx:
	movss	xmm0, DWORD PTR scale_max$[rbp]
	subss	xmm0, DWORD PTR scale_min$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv315[rbp], xmm0
$LN40@PlotEx:
	movss	xmm0, DWORD PTR tv315[rbp]
	movss	DWORD PTR inv_scale$22[rbp], xmm0
; Line 6460
	mov	rax, QWORD PTR values_getter$[rbp]
	mov	QWORD PTR tv321[rbp], rax
	mov	eax, DWORD PTR values_offset$[rbp]
	cdq
	idiv	DWORD PTR values_count$[rbp]
	mov	eax, edx
	mov	edx, eax
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv321[rbp]
	movss	DWORD PTR v0$23[rbp], xmm0
; Line 6461
	xorps	xmm0, xmm0
	movss	DWORD PTR t0$24[rbp], xmm0
; Line 6462
	movss	xmm0, DWORD PTR v0$23[rbp]
	subss	xmm0, DWORD PTR scale_min$[rbp]
	mulss	xmm0, DWORD PTR inv_scale$22[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR t0$24[rbp]
	lea	rcx, QWORD PTR tp0$25[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6463
	movss	xmm0, DWORD PTR scale_min$[rbp]
	mulss	xmm0, DWORD PTR scale_max$[rbp]
	xorps	xmm1, xmm1
	comiss	xmm1, xmm0
	jbe	SHORT $LN43@PlotEx
	movss	xmm0, DWORD PTR scale_min$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR inv_scale$22[rbp]
	movss	DWORD PTR tv336[rbp], xmm0
	jmp	SHORT $LN44@PlotEx
$LN43@PlotEx:
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR scale_min$[rbp]
	jbe	SHORT $LN41@PlotEx
	xorps	xmm0, xmm0
	movss	DWORD PTR tv335[rbp], xmm0
	jmp	SHORT $LN42@PlotEx
$LN41@PlotEx:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv335[rbp], xmm0
$LN42@PlotEx:
	movss	xmm0, DWORD PTR tv335[rbp]
	movss	DWORD PTR tv336[rbp], xmm0
$LN44@PlotEx:
	movss	xmm0, DWORD PTR tv336[rbp]
	movss	DWORD PTR histogram_zero_line_t$26[rbp], xmm0
; Line 6465
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN45@PlotEx
	mov	DWORD PTR tv340[rbp], 38		; 00000026H
	jmp	SHORT $LN46@PlotEx
$LN45@PlotEx:
	mov	DWORD PTR tv340[rbp], 40		; 00000028H
$LN46@PlotEx:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv340[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col_base$27[rbp], eax
; Line 6466
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN47@PlotEx
	mov	DWORD PTR tv345[rbp], 39		; 00000027H
	jmp	SHORT $LN48@PlotEx
$LN47@PlotEx:
	mov	DWORD PTR tv345[rbp], 41		; 00000029H
$LN48@PlotEx:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv345[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col_hovered$28[rbp], eax
; Line 6468
	mov	DWORD PTR n$29[rbp], 0
	jmp	SHORT $LN7@PlotEx
$LN5@PlotEx:
	mov	eax, DWORD PTR n$29[rbp]
	inc	eax
	mov	DWORD PTR n$29[rbp], eax
$LN7@PlotEx:
	mov	eax, DWORD PTR res_w$15[rbp]
	cmp	DWORD PTR n$29[rbp], eax
	jge	$LN6@PlotEx
; Line 6470
	movss	xmm0, DWORD PTR t0$24[rbp]
	addss	xmm0, DWORD PTR t_step$21[rbp]
	movss	DWORD PTR t1$30[rbp], xmm0
; Line 6471
	cvtsi2ss xmm0, DWORD PTR item_count$16[rbp]
	movss	xmm1, DWORD PTR t0$24[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR v1_idx$31[rbp], eax
; Line 6472
	cmp	DWORD PTR v1_idx$31[rbp], 0
	jl	SHORT $LN49@PlotEx
	mov	eax, DWORD PTR values_count$[rbp]
	cmp	DWORD PTR v1_idx$31[rbp], eax
	jl	SHORT $LN50@PlotEx
$LN49@PlotEx:
	mov	eax, DWORD PTR ?__LINE__Var@?0??PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z@4JA
	add	eax, 82					; 00000052H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EK@JIGPMMPH@?$AAv?$AA1?$AA_?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN50@PlotEx:
; Line 6473
	mov	rax, QWORD PTR values_getter$[rbp]
	mov	QWORD PTR tv369[rbp], rax
	mov	eax, DWORD PTR v1_idx$31[rbp]
	mov	ecx, DWORD PTR values_offset$[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdq
	idiv	DWORD PTR values_count$[rbp]
	mov	eax, edx
	mov	edx, eax
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv369[rbp]
	movss	DWORD PTR v1$32[rbp], xmm0
; Line 6474
	movss	xmm0, DWORD PTR v1$32[rbp]
	subss	xmm0, DWORD PTR scale_min$[rbp]
	mulss	xmm0, DWORD PTR inv_scale$22[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR t1$30[rbp]
	lea	rcx, QWORD PTR tp1$33[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6477
	lea	r9, QWORD PTR tp0$25[rbp]
	lea	r8, QWORD PTR inner_bb$[rbp+8]
	lea	rdx, QWORD PTR inner_bb$[rbp]
	lea	rcx, QWORD PTR pos0$34[rbp]
	call	?ImLerp@@YA?AUImVec2@@AEBU1@00@Z	; ImLerp
; Line 6478
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN51@PlotEx
	mov	rax, QWORD PTR tp1$33[rbp]
	mov	QWORD PTR $T42[rbp], rax
	lea	rax, QWORD PTR $T42[rbp]
	mov	QWORD PTR tv420[rbp], rax
	jmp	SHORT $LN52@PlotEx
$LN51@PlotEx:
	movss	xmm2, DWORD PTR histogram_zero_line_t$26[rbp]
	movss	xmm1, DWORD PTR tp1$33[rbp]
	lea	rcx, QWORD PTR $T43[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv420[rbp], rax
$LN52@PlotEx:
	mov	rax, QWORD PTR tv420[rbp]
	mov	QWORD PTR $T41[rbp], rax
	mov	r9, QWORD PTR $T41[rbp]
	lea	r8, QWORD PTR inner_bb$[rbp+8]
	lea	rdx, QWORD PTR inner_bb$[rbp]
	lea	rcx, QWORD PTR pos1$35[rbp]
	call	?ImLerp@@YA?AUImVec2@@AEBU1@00@Z	; ImLerp
; Line 6479
	cmp	DWORD PTR plot_type$[rbp], 0
	jne	SHORT $LN22@PlotEx
; Line 6481
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv434[rbp], rax
	mov	eax, DWORD PTR v1_idx$31[rbp]
	cmp	DWORD PTR idx_hovered$[rbp], eax
	jne	SHORT $LN53@PlotEx
	mov	eax, DWORD PTR col_hovered$28[rbp]
	mov	DWORD PTR tv429[rbp], eax
	jmp	SHORT $LN54@PlotEx
$LN53@PlotEx:
	mov	eax, DWORD PTR col_base$27[rbp]
	mov	DWORD PTR tv429[rbp], eax
$LN54@PlotEx:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv429[rbp]
	lea	r8, QWORD PTR pos1$35[rbp]
	lea	rdx, QWORD PTR pos0$34[rbp]
	mov	rcx, QWORD PTR tv434[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 6482
	jmp	$LN23@PlotEx
$LN22@PlotEx:
; Line 6483
	cmp	DWORD PTR plot_type$[rbp], 1
	jne	$LN24@PlotEx
; Line 6485
	movss	xmm0, DWORD PTR pos0$34[rbp]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR pos1$35[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN25@PlotEx
; Line 6486
	movss	xmm0, DWORD PTR pos1$35[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR pos1$35[rbp], xmm0
$LN25@PlotEx:
; Line 6487
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv449[rbp], rax
	mov	eax, DWORD PTR v1_idx$31[rbp]
	cmp	DWORD PTR idx_hovered$[rbp], eax
	jne	SHORT $LN55@PlotEx
	mov	eax, DWORD PTR col_hovered$28[rbp]
	mov	DWORD PTR tv444[rbp], eax
	jmp	SHORT $LN56@PlotEx
$LN55@PlotEx:
	mov	eax, DWORD PTR col_base$27[rbp]
	mov	DWORD PTR tv444[rbp], eax
$LN56@PlotEx:
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv444[rbp]
	lea	r8, QWORD PTR pos1$35[rbp]
	lea	rdx, QWORD PTR pos0$34[rbp]
	mov	rcx, QWORD PTR tv449[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN24@PlotEx:
$LN23@PlotEx:
; Line 6490
	movss	xmm0, DWORD PTR t1$30[rbp]
	movss	DWORD PTR t0$24[rbp], xmm0
; Line 6491
	mov	rax, QWORD PTR tp1$33[rbp]
	mov	QWORD PTR tp0$25[rbp], rax
; Line 6492
	jmp	$LN5@PlotEx
$LN6@PlotEx:
$LN17@PlotEx:
; Line 6496
	cmp	QWORD PTR overlay_text$[rbp], 0
	je	$LN26@PlotEx
; Line 6497
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T44[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv472[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR $T45[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv470[rbp], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR tv472[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR overlay_text$[rbp]
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR tv470[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
$LN26@PlotEx:
; Line 6499
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN27@PlotEx
; Line 6500
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+8]
	addss	xmm0, DWORD PTR [rax+80]
	movss	xmm2, DWORD PTR inner_bb$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T46[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN27@PlotEx:
; Line 6504
	mov	eax, DWORD PTR idx_hovered$[rbp]
$LN1@PlotEx:
; Line 6505
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2344]
	pop	rdi
	pop	rbp
	ret	0
?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z ENDP ; ImGui::PlotEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z
_TEXT	SEGMENT
allow_opt_picker$ = 4
allow_opt_alpha_bar$ = 36
g$ = 72
picker_size$6 = 104
picker_type$7 = 132
picker_flags$8 = 164
backup_pos$9 = 200
previewing_ref_col$10 = 232
tv168 = 452
tv90 = 452
tv72 = 452
tv66 = 452
tv137 = 456
tv135 = 460
__$ArrayPad$ = 464
ref_col$ = 512
flags$ = 520
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z PROC		; ImGui::ColorPickerOptionsPopup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5593
$LN22:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 512				; 00000200H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+552]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5594
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 100663296				; 06000000H
	test	eax, eax
	jne	SHORT $LN16@ColorPicke
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN17@ColorPicke
$LN16@ColorPicke:
	mov	DWORD PTR tv66[rbp], 0
$LN17@ColorPicke:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR allow_opt_picker$[rbp], al
; Line 5595
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN18@ColorPicke
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 65536				; 00010000H
	test	eax, eax
	jne	SHORT $LN18@ColorPicke
	mov	DWORD PTR tv72[rbp], 1
	jmp	SHORT $LN19@ColorPicke
$LN18@ColorPicke:
	mov	DWORD PTR tv72[rbp], 0
$LN19@ColorPicke:
	movzx	eax, BYTE PTR tv72[rbp]
	mov	BYTE PTR allow_opt_alpha_bar$[rbp], al
; Line 5596
	movzx	eax, BYTE PTR allow_opt_picker$[rbp]
	test	eax, eax
	jne	SHORT $LN7@ColorPicke
	movzx	eax, BYTE PTR allow_opt_alpha_bar$[rbp]
	test	eax, eax
	je	SHORT $LN6@ColorPicke
$LN7@ColorPicke:
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?BeginPopup@ImGui@@YA_NPEBDH@Z		; ImGui::BeginPopup
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@ColorPicke
$LN6@ColorPicke:
; Line 5597
	jmp	$LN1@ColorPicke
$LN5@ColorPicke:
; Line 5598
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5599
	movzx	eax, BYTE PTR allow_opt_picker$[rbp]
	test	eax, eax
	je	$LN8@ColorPicke
; Line 5601
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR tv90[rbp], xmm0
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	mov	rax, QWORD PTR g$[rbp]
	addss	xmm0, DWORD PTR [rax+5552]
	movss	xmm1, DWORD PTR tv90[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv137[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR tv135[rbp], xmm0
	movss	xmm2, DWORD PTR tv137[rbp]
	movss	xmm1, DWORD PTR tv135[rbp]
	lea	rcx, QWORD PTR picker_size$6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5602
	movss	xmm0, DWORD PTR picker_size$6[rbp]
	call	?PushItemWidth@ImGui@@YAXM@Z		; ImGui::PushItemWidth
; Line 5603
	mov	DWORD PTR picker_type$7[rbp], 0
	jmp	SHORT $LN4@ColorPicke
$LN2@ColorPicke:
	mov	eax, DWORD PTR picker_type$7[rbp]
	inc	eax
	mov	DWORD PTR picker_type$7[rbp], eax
$LN4@ColorPicke:
	cmp	DWORD PTR picker_type$7[rbp], 2
	jge	$LN3@ColorPicke
; Line 5606
	cmp	DWORD PTR picker_type$7[rbp], 0
	jle	SHORT $LN9@ColorPicke
	call	?Separator@ImGui@@YAXXZ			; ImGui::Separator
$LN9@ColorPicke:
; Line 5607
	mov	ecx, DWORD PTR picker_type$7[rbp]
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 5608
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	or	eax, 424				; 000001a8H
	mov	DWORD PTR picker_flags$8[rbp], eax
; Line 5609
	cmp	DWORD PTR picker_type$7[rbp], 0
	jne	SHORT $LN10@ColorPicke
	mov	eax, DWORD PTR picker_flags$8[rbp]
	bts	eax, 25
	mov	DWORD PTR picker_flags$8[rbp], eax
$LN10@ColorPicke:
; Line 5610
	cmp	DWORD PTR picker_type$7[rbp], 1
	jne	SHORT $LN11@ColorPicke
	mov	eax, DWORD PTR picker_flags$8[rbp]
	bts	eax, 26
	mov	DWORD PTR picker_flags$8[rbp], eax
$LN11@ColorPicke:
; Line 5611
	lea	rcx, QWORD PTR backup_pos$9[rbp]
	call	?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
; Line 5612
	lea	r9, QWORD PTR picker_size$6[rbp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_0N@KFBFGFJL@?$CD?$CDselectable@
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@ColorPicke
; Line 5613
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, -100663297				; fffffffff9ffffffH
	mov	ecx, DWORD PTR picker_flags$8[rbp]
	and	ecx, 100663296				; 06000000H
	or	eax, ecx
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+12220], eax
$LN12@ColorPicke:
; Line 5614
	lea	rcx, QWORD PTR backup_pos$9[rbp]
	call	?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetCursorScreenPos
; Line 5615
	lea	rcx, QWORD PTR previewing_ref_col$10[rbp]
	call	??0ImVec4@@QEAA@XZ			; ImVec4::ImVec4
; Line 5616
	mov	eax, DWORD PTR picker_flags$8[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN20@ColorPicke
	mov	DWORD PTR tv168[rbp], 3
	jmp	SHORT $LN21@ColorPicke
$LN20@ColorPicke:
	mov	DWORD PTR tv168[rbp], 4
$LN21@ColorPicke:
	movsxd	rax, DWORD PTR tv168[rbp]
	shl	rax, 2
	lea	rcx, QWORD PTR previewing_ref_col$10[rbp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR ref_col$[rbp]
	mov	rcx, rax
	rep movsb
; Line 5617
	xor	r9d, r9d
	mov	r8d, DWORD PTR picker_flags$8[rbp]
	lea	rdx, QWORD PTR previewing_ref_col$10[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0BE@ENPGBMIC@?$CD?$CDpreviewing_picker@
	call	?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z ; ImGui::ColorPicker4
; Line 5618
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 5619
	jmp	$LN2@ColorPicke
$LN3@ColorPicke:
; Line 5620
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
$LN8@ColorPicke:
; Line 5622
	movzx	eax, BYTE PTR allow_opt_alpha_bar$[rbp]
	test	eax, eax
	je	SHORT $LN13@ColorPicke
; Line 5624
	movzx	eax, BYTE PTR allow_opt_picker$[rbp]
	test	eax, eax
	je	SHORT $LN14@ColorPicke
	call	?Separator@ImGui@@YAXXZ			; ImGui::Separator
$LN14@ColorPicke:
; Line 5625
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12220				; 00002fbcH
	mov	r8d, 65536				; 00010000H
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_09KEDLMDJL@Alpha?5Bar@
	call	?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z	; ImGui::CheckboxFlags
$LN13@ColorPicke:
; Line 5627
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
$LN1@ColorPicke:
; Line 5628
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+480]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z ENDP		; ImGui::ColorPickerOptionsPopup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z
_TEXT	SEGMENT
allow_opt_inputs$ = 4
allow_opt_datatype$ = 36
g$ = 72
opts$ = 100
cr$4 = 132
cg$5 = 164
cb$6 = 196
ca$7 = 228
buf$8 = 272
$T9 = 548
$T10 = 580
$T11 = 612
$T12 = 644
$T13 = 676
tv230 = 692
tv224 = 692
tv163 = 692
tv153 = 692
tv139 = 692
tv129 = 692
tv87 = 692
tv70 = 692
tv66 = 692
__$ArrayPad$ = 696
col$ = 736
flags$ = 744
?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z PROC		; ImGui::ColorEditOptionsPopup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5542
$LN41:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 776				; 00000308H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+808]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5543
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	test	eax, eax
	jne	SHORT $LN23@ColorEditO
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN24@ColorEditO
$LN23@ColorEditO:
	mov	DWORD PTR tv66[rbp], 0
$LN24@ColorEditO:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR allow_opt_inputs$[rbp], al
; Line 5544
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 25165824				; 01800000H
	test	eax, eax
	jne	SHORT $LN25@ColorEditO
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN26@ColorEditO
$LN25@ColorEditO:
	mov	DWORD PTR tv70[rbp], 0
$LN26@ColorEditO:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR allow_opt_datatype$[rbp], al
; Line 5545
	movzx	eax, BYTE PTR allow_opt_inputs$[rbp]
	test	eax, eax
	jne	SHORT $LN4@ColorEditO
	movzx	eax, BYTE PTR allow_opt_datatype$[rbp]
	test	eax, eax
	je	SHORT $LN3@ColorEditO
$LN4@ColorEditO:
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?BeginPopup@ImGui@@YA_NPEBDH@Z		; ImGui::BeginPopup
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ColorEditO
$LN3@ColorEditO:
; Line 5546
	jmp	$LN1@ColorEditO
$LN2@ColorEditO:
; Line 5547
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5548
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	mov	DWORD PTR opts$[rbp], eax
; Line 5549
	movzx	eax, BYTE PTR allow_opt_inputs$[rbp]
	test	eax, eax
	je	$LN5@ColorEditO
; Line 5551
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN27@ColorEditO
	mov	BYTE PTR tv87[rbp], 1
	jmp	SHORT $LN28@ColorEditO
$LN27@ColorEditO:
	mov	BYTE PTR tv87[rbp], 0
$LN28@ColorEditO:
	movzx	edx, BYTE PTR tv87[rbp]
	lea	rcx, OFFSET FLAT:??_C@_03ICFFBAI@RGB@
	call	?RadioButton@ImGui@@YA_NPEBD_N@Z	; ImGui::RadioButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@ColorEditO
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, -7340033				; ffffffffff8fffffH
	bts	eax, 20
	mov	DWORD PTR opts$[rbp], eax
$LN6@ColorEditO:
; Line 5552
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN29@ColorEditO
	mov	BYTE PTR tv129[rbp], 1
	jmp	SHORT $LN30@ColorEditO
$LN29@ColorEditO:
	mov	BYTE PTR tv129[rbp], 0
$LN30@ColorEditO:
	movzx	edx, BYTE PTR tv129[rbp]
	lea	rcx, OFFSET FLAT:??_C@_03CAADKAK@HSV@
	call	?RadioButton@ImGui@@YA_NPEBD_N@Z	; ImGui::RadioButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@ColorEditO
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, -7340033				; ffffffffff8fffffH
	bts	eax, 21
	mov	DWORD PTR opts$[rbp], eax
$LN7@ColorEditO:
; Line 5553
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	SHORT $LN31@ColorEditO
	mov	BYTE PTR tv139[rbp], 1
	jmp	SHORT $LN32@ColorEditO
$LN31@ColorEditO:
	mov	BYTE PTR tv139[rbp], 0
$LN32@ColorEditO:
	movzx	edx, BYTE PTR tv139[rbp]
	lea	rcx, OFFSET FLAT:??_C@_03CJOBKKAE@Hex@
	call	?RadioButton@ImGui@@YA_NPEBD_N@Z	; ImGui::RadioButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@ColorEditO
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, -7340033				; ffffffffff8fffffH
	bts	eax, 22
	mov	DWORD PTR opts$[rbp], eax
$LN8@ColorEditO:
$LN5@ColorEditO:
; Line 5555
	movzx	eax, BYTE PTR allow_opt_datatype$[rbp]
	test	eax, eax
	je	$LN9@ColorEditO
; Line 5557
	movzx	eax, BYTE PTR allow_opt_inputs$[rbp]
	test	eax, eax
	je	SHORT $LN10@ColorEditO
	call	?Separator@ImGui@@YAXXZ			; ImGui::Separator
$LN10@ColorEditO:
; Line 5558
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, 8388608				; 00800000H
	test	eax, eax
	je	SHORT $LN33@ColorEditO
	mov	BYTE PTR tv153[rbp], 1
	jmp	SHORT $LN34@ColorEditO
$LN33@ColorEditO:
	mov	BYTE PTR tv153[rbp], 0
$LN34@ColorEditO:
	movzx	edx, BYTE PTR tv153[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06FDBEKFBH@0?4?4255@
	call	?RadioButton@ImGui@@YA_NPEBD_N@Z	; ImGui::RadioButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@ColorEditO
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, -25165825				; fffffffffe7fffffH
	bts	eax, 23
	mov	DWORD PTR opts$[rbp], eax
$LN11@ColorEditO:
; Line 5559
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN35@ColorEditO
	mov	BYTE PTR tv163[rbp], 1
	jmp	SHORT $LN36@ColorEditO
$LN35@ColorEditO:
	mov	BYTE PTR tv163[rbp], 0
$LN36@ColorEditO:
	movzx	edx, BYTE PTR tv163[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0L@MDNPBJBM@0?400?4?41?400@
	call	?RadioButton@ImGui@@YA_NPEBD_N@Z	; ImGui::RadioButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@ColorEditO
	mov	eax, DWORD PTR opts$[rbp]
	and	eax, -25165825				; fffffffffe7fffffH
	bts	eax, 24
	mov	DWORD PTR opts$[rbp], eax
$LN12@ColorEditO:
$LN9@ColorEditO:
; Line 5562
	movzx	eax, BYTE PTR allow_opt_inputs$[rbp]
	test	eax, eax
	jne	SHORT $LN14@ColorEditO
	movzx	eax, BYTE PTR allow_opt_datatype$[rbp]
	test	eax, eax
	je	SHORT $LN13@ColorEditO
$LN14@ColorEditO:
; Line 5563
	call	?Separator@ImGui@@YAXXZ			; ImGui::Separator
$LN13@ColorEditO:
; Line 5564
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_09NMCCFHEI@Copy?5as?4?4@
	call	?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z	; ImGui::Button
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@ColorEditO
; Line 5565
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_04OPMHGHMB@Copy@
	call	?OpenPopup@ImGui@@YAXPEBDH@Z		; ImGui::OpenPopup
$LN15@ColorEditO:
; Line 5566
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_04OPMHGHMB@Copy@
	call	?BeginPopup@ImGui@@YA_NPEBDH@Z		; ImGui::BeginPopup
	movzx	eax, al
	test	eax, eax
	je	$LN16@ColorEditO
; Line 5568
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR cr$4[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR cg$5[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR cb$6[rbp], eax
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN37@ColorEditO
	mov	DWORD PTR tv224[rbp], 255		; 000000ffH
	jmp	SHORT $LN38@ColorEditO
$LN37@ColorEditO:
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv224[rbp], eax
$LN38@ColorEditO:
	mov	eax, DWORD PTR tv224[rbp]
	mov	DWORD PTR ca$7[rbp], eax
; Line 5570
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN39@ColorEditO
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv230[rbp], xmm0
	jmp	SHORT $LN40@ColorEditO
$LN39@ColorEditO:
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv230[rbp], xmm0
$LN40@ColorEditO:
	cvtss2sd xmm0, DWORD PTR tv230[rbp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm1, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm2, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm3, DWORD PTR [rcx+rax]
	movsd	QWORD PTR [rsp+48], xmm0
	movsd	QWORD PTR [rsp+40], xmm1
	movsd	QWORD PTR [rsp+32], xmm2
	movq	r9, xmm3
	lea	r8, OFFSET FLAT:??_C@_0BN@GKCJMPCH@?$CI?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?0?5?$CF?43ff?$CJ@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 5571
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, rax
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@ColorEditO
; Line 5572
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?SetClipboardText@ImGui@@YAXPEBD@Z	; ImGui::SetClipboardText
$LN17@ColorEditO:
; Line 5573
	mov	eax, DWORD PTR ca$7[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR cb$6[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cg$5[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR cr$4[rbp]
	lea	r8, OFFSET FLAT:??_C@_0O@EJHNAHBL@?$CI?$CFd?0?$CFd?0?$CFd?0?$CFd?$CJ@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 5574
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, rax
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@ColorEditO
; Line 5575
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?SetClipboardText@ImGui@@YAXPEBD@Z	; ImGui::SetClipboardText
$LN18@ColorEditO:
; Line 5576
	mov	eax, DWORD PTR cb$6[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cg$5[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR cr$4[rbp]
	lea	r8, OFFSET FLAT:??_C@_0O@MBPBDFLP@?$CD?$CF02X?$CF02X?$CF02X@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 5577
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, rax
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@ColorEditO
; Line 5578
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?SetClipboardText@ImGui@@YAXPEBD@Z	; ImGui::SetClipboardText
$LN19@ColorEditO:
; Line 5579
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN20@ColorEditO
; Line 5581
	mov	eax, DWORD PTR ca$7[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR cb$6[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cg$5[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR cr$4[rbp]
	lea	r8, OFFSET FLAT:??_C@_0BC@CKPCOFBK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 5582
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, rax
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@ColorEditO
; Line 5583
	lea	rcx, QWORD PTR buf$8[rbp]
	call	?SetClipboardText@ImGui@@YAXPEBD@Z	; ImGui::SetClipboardText
$LN21@ColorEditO:
$LN20@ColorEditO:
; Line 5585
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
$LN16@ColorEditO:
; Line 5588
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR opts$[rbp]
	mov	DWORD PTR [rax+12220], ecx
; Line 5589
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
$LN1@ColorEditO:
; Line 5590
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+712]
	pop	rdi
	pop	rbp
	ret	0
?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z ENDP		; ImGui::ColorEditOptionsPopup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z
_TEXT	SEGMENT
g$ = 8
text_end$ = 40
sz$ = 72
cf$ = 104
cr$ = 148
cg$ = 180
cb$ = 212
ca$ = 244
tv174 = 452
tv130 = 452
tv264 = 456
tv247 = 456
tv70 = 456
__$ArrayPad$ = 464
text$ = 512
col$ = 520
flags$ = 528
?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z PROC		; ImGui::ColorTooltip, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5508
$LN18:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+112]
	lea	rdi, QWORD PTR [rsp+112]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+632]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5509
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5511
	mov	edx, 1
	xor	ecx, ecx
	call	?BeginTooltipEx@ImGui@@YAXHH@Z		; ImGui::BeginTooltipEx
; Line 5512
	cmp	QWORD PTR text$[rbp], 0
	je	SHORT $LN12@ColorToolt
	xor	edx, edx
	mov	rcx, QWORD PTR text$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR tv70[rbp], rax
	jmp	SHORT $LN13@ColorToolt
$LN12@ColorToolt:
	mov	rax, QWORD PTR text$[rbp]
	mov	QWORD PTR tv70[rbp], rax
$LN13@ColorToolt:
	mov	rax, QWORD PTR tv70[rbp]
	mov	QWORD PTR text_end$[rbp], rax
; Line 5513
	mov	rax, QWORD PTR text$[rbp]
	cmp	QWORD PTR text_end$[rbp], rax
	jbe	SHORT $LN2@ColorToolt
; Line 5515
	xor	r8d, r8d
	mov	rdx, QWORD PTR text_end$[rbp]
	mov	rcx, QWORD PTR text$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
; Line 5516
	call	?Separator@ImGui@@YAXXZ			; ImGui::Separator
$LN2@ColorToolt:
; Line 5519
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@40400000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	mulss	xmm1, DWORD PTR __real@40400000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+5532]
	mulss	xmm2, DWORD PTR __real@40000000
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR sz$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5520
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN14@ColorToolt
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv130[rbp], xmm0
	jmp	SHORT $LN15@ColorToolt
$LN14@ColorToolt:
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv130[rbp], xmm0
$LN15@ColorToolt:
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 0
	movss	xmm0, DWORD PTR tv130[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r8, QWORD PTR col$[rbp]
	movss	xmm3, DWORD PTR [r8+rax]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm2, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm1, DWORD PTR [rax+rdx]
	lea	rcx, QWORD PTR cf$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 5521
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR cr$[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR cg$[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR cb$[rbp], eax
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN16@ColorToolt
	mov	DWORD PTR tv174[rbp], 255		; 000000ffH
	jmp	SHORT $LN17@ColorToolt
$LN16@ColorToolt:
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR tv174[rbp], eax
$LN17@ColorToolt:
	mov	eax, DWORD PTR tv174[rbp]
	mov	DWORD PTR ca$[rbp], eax
; Line 5522
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 403046402				; 18060002H
	or	eax, 64					; 00000040H
	mov	r9, QWORD PTR sz$[rbp]
	mov	r8d, eax
	lea	rdx, QWORD PTR cf$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_09JCCDBEFL@?$CD?$CDpreview@
	call	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
; Line 5523
	movss	xmm1, DWORD PTR __real@bf800000
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 5524
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	SHORT $LN5@ColorToolt
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	test	eax, eax
	jne	$LN3@ColorToolt
$LN5@ColorToolt:
; Line 5526
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	$LN6@ColorToolt
; Line 5527
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm1, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm2, DWORD PTR [rcx+rax]
	movsd	QWORD PTR [rsp+72], xmm0
	movsd	QWORD PTR [rsp+64], xmm1
	movsd	QWORD PTR [rsp+56], xmm2
	mov	eax, DWORD PTR cb$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR cg$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cr$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR cb$[rbp]
	mov	r8d, DWORD PTR cg$[rbp]
	mov	edx, DWORD PTR cr$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0DF@FAPNKOHO@?$CD?$CF02X?$CF02X?$CF02X?6R?3?5?$CFd?0?5G?3?5?$CFd?0?5B?3?5@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
	jmp	$LN7@ColorToolt
$LN6@ColorToolt:
; Line 5529
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm1, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm2, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm3, DWORD PTR [rcx+rax]
	movsd	QWORD PTR [rsp+96], xmm0
	movsd	QWORD PTR [rsp+88], xmm1
	movsd	QWORD PTR [rsp+80], xmm2
	movsd	QWORD PTR [rsp+72], xmm3
	mov	eax, DWORD PTR ca$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR cb$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR cg$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR cr$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR ca$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR cb$[rbp]
	mov	r8d, DWORD PTR cg$[rbp]
	mov	edx, DWORD PTR cr$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0EC@EBPMGCGK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X?6R?3?$CFd?0?5G?3?$CFd?0?5B@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
$LN7@ColorToolt:
; Line 5530
	jmp	$LN4@ColorToolt
$LN3@ColorToolt:
; Line 5531
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	$LN8@ColorToolt
; Line 5533
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN9@ColorToolt
; Line 5534
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm1, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm2, DWORD PTR [rcx+rax]
	movsd	QWORD PTR tv247[rbp], xmm2
	movaps	xmm3, xmm0
	movq	r9, xmm3
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movsd	xmm0, QWORD PTR tv247[rbp]
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0BK@HKNBICJE@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
	jmp	$LN10@ColorToolt
$LN9@ColorToolt:
; Line 5536
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm1, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm2, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	cvtss2sd xmm3, DWORD PTR [rcx+rax]
	movsd	QWORD PTR tv264[rbp], xmm3
	movsd	QWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movq	r8, xmm2
	movsd	xmm0, QWORD PTR tv264[rbp]
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0CD@EEDEAEPG@H?3?5?$CF?43f?0?5S?3?5?$CF?43f?0?5V?3?5?$CF?43f?0?5A?3?5?$CF@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
$LN10@ColorToolt:
$LN8@ColorToolt:
$LN4@ColorToolt:
; Line 5538
	call	?EndTooltip@ImGui@@YAXXZ		; ImGui::EndTooltip
; Line 5539
	lea	rcx, QWORD PTR [rbp-112]
	lea	rdx, OFFSET FLAT:?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z ENDP		; ImGui::ColorTooltip
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z
_TEXT	SEGMENT
g$ = 8
tv68 = 216
id$ = 256
?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z PROC ; ImGui::GetInputTextState, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2637
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+8368], ecx
	jne	SHORT $LN3@GetInputTe
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8368				; 000020b0H
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN4@GetInputTe
$LN3@GetInputTe:
	mov	QWORD PTR tv68[rbp], 0
$LN4@GetInputTe:
	mov	rax, QWORD PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z ENDP ; ImGui::GetInputTextState
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TempInputIsActive@ImGui@@YA_NI@Z
_TEXT	SEGMENT
g$ = 8
tv68 = 212
id$ = 256
?TempInputIsActive@ImGui@@YA_NI@Z PROC			; ImGui::TempInputIsActive, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2636
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN3@TempInputI
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+12216], ecx
	jne	SHORT $LN3@TempInputI
	mov	DWORD PTR tv68[rbp], 1
	jmp	SHORT $LN4@TempInputI
$LN3@TempInputI:
	mov	DWORD PTR tv68[rbp], 0
$LN4@TempInputI:
	movzx	eax, BYTE PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TempInputIsActive@ImGui@@YA_NI@Z ENDP			; ImGui::TempInputIsActive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z
_TEXT	SEGMENT
g$ = 8
fmt_buf$ = 40
data_buf$ = 104
flags$ = 164
value_changed$ = 196
data_type_size$6 = 232
data_backup$7 = 264
tv157 = 468
tv76 = 468
__$ArrayPad$ = 472
bb$ = 512
id$ = 520
label$ = 528
data_type$ = 536
p_data$ = 544
format$ = 552
p_clamp_min$ = 560
p_clamp_max$ = 568
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z PROC ; ImGui::TempInputScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3373
$LN12:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 528				; 00000210H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+568]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3374
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3378
	mov	r8d, 32					; 00000020H
	lea	rdx, QWORD PTR fmt_buf$[rbp]
	mov	rcx, QWORD PTR format$[rbp]
	call	?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z ; ImParseFormatTrimDecorations
	mov	QWORD PTR format$[rbp], rax
; Line 3379
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR data_buf$[rbp]
	call	?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ; ImGui::DataTypeFormatString
; Line 3380
	lea	rcx, QWORD PTR data_buf$[rbp]
	call	?ImStrTrimBlanks@@YAXPEAD@Z		; ImStrTrimBlanks
; Line 3382
	mov	DWORD PTR flags$[rbp], 134217744	; 08000010H
; Line 3383
	cmp	DWORD PTR data_type$[rbp], 8
	je	SHORT $LN8@TempInputS
	cmp	DWORD PTR data_type$[rbp], 9
	je	SHORT $LN8@TempInputS
	mov	DWORD PTR tv76[rbp], 1
	jmp	SHORT $LN9@TempInputS
$LN8@TempInputS:
	mov	DWORD PTR tv76[rbp], 131072		; 00020000H
$LN9@TempInputS:
	mov	eax, DWORD PTR tv76[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
; Line 3384
	mov	BYTE PTR value_changed$[rbp], 0
; Line 3385
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 32			; 00000020H
	lea	r9, QWORD PTR data_buf$[rbp]
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z ; ImGui::TempInputText
	movzx	eax, al
	test	eax, eax
	je	$LN2@TempInputS
; Line 3388
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR data_type_size$6[rbp], rax
; Line 3390
	lea	rax, QWORD PTR data_backup$7[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR p_data$[rbp]
	mov	rcx, QWORD PTR data_type_size$6[rbp]
	rep movsb
; Line 3393
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR [rax+8424]
	lea	rcx, QWORD PTR data_buf$[rbp]
	call	?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z ; ImGui::DataTypeApplyOpFromText
; Line 3394
	cmp	QWORD PTR p_clamp_min$[rbp], 0
	jne	SHORT $LN4@TempInputS
	cmp	QWORD PTR p_clamp_max$[rbp], 0
	je	SHORT $LN3@TempInputS
$LN4@TempInputS:
; Line 3396
	cmp	QWORD PTR p_clamp_min$[rbp], 0
	je	SHORT $LN5@TempInputS
	cmp	QWORD PTR p_clamp_max$[rbp], 0
	je	SHORT $LN5@TempInputS
	mov	r8, QWORD PTR p_clamp_max$[rbp]
	mov	rdx, QWORD PTR p_clamp_min$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeCompare@ImGui@@YAHHPEBX0@Z	; ImGui::DataTypeCompare
	test	eax, eax
	jle	SHORT $LN5@TempInputS
; Line 3397
	lea	rdx, QWORD PTR p_clamp_max$[rbp]
	lea	rcx, QWORD PTR p_clamp_min$[rbp]
	call	??$ImSwap@PEBX@@YAXAEAPEBX0@Z		; ImSwap<void const *>
$LN5@TempInputS:
; Line 3398
	mov	r9, QWORD PTR p_clamp_max$[rbp]
	mov	r8, QWORD PTR p_clamp_min$[rbp]
	mov	rdx, QWORD PTR p_data$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z	; ImGui::DataTypeClamp
$LN3@TempInputS:
; Line 3402
	mov	r8, QWORD PTR data_type_size$6[rbp]
	mov	rdx, QWORD PTR p_data$[rbp]
	lea	rcx, QWORD PTR data_backup$7[rbp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN10@TempInputS
	mov	DWORD PTR tv157[rbp], 1
	jmp	SHORT $LN11@TempInputS
$LN10@TempInputS:
	mov	DWORD PTR tv157[rbp], 0
$LN11@TempInputS:
	movzx	eax, BYTE PTR tv157[rbp]
	mov	BYTE PTR value_changed$[rbp], al
; Line 3403
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN6@TempInputS
; Line 3404
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN6@TempInputS:
$LN2@TempInputS:
; Line 3406
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 3407
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+480]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z ENDP ; ImGui::TempInputScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z
_TEXT	SEGMENT
g$ = 8
init$ = 36
value_changed$ = 68
$T1 = 292
tv77 = 308
tv66 = 308
bb$ = 352
id$ = 360
label$ = 368
buf$ = 376
buf_size$ = 384
flags$ = 392
?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z PROC ; ImGui::TempInputText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3350
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3353
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3354
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+12216], ecx
	je	SHORT $LN5@TempInputT
	mov	BYTE PTR tv66[rbp], 1
	jmp	SHORT $LN6@TempInputT
$LN5@TempInputT:
	mov	BYTE PTR tv66[rbp], 0
$LN6@TempInputT:
	movzx	eax, BYTE PTR tv66[rbp]
	mov	BYTE PTR init$[rbp], al
; Line 3355
	movzx	eax, BYTE PTR init$[rbp]
	test	eax, eax
	je	SHORT $LN2@TempInputT
; Line 3356
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN2@TempInputT:
; Line 3358
	mov	rax, QWORD PTR bb$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR [rcx+7184]
	mov	QWORD PTR [rcx+216], rax
; Line 3359
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 28
	mov	DWORD PTR tv77[rbp], eax
	lea	rdx, QWORD PTR $T1[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	ecx, DWORD PTR tv77[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR buf_size$[rbp]
	mov	r8, QWORD PTR buf$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextEx
	mov	BYTE PTR value_changed$[rbp], al
; Line 3360
	movzx	eax, BYTE PTR init$[rbp]
	test	eax, eax
	je	SHORT $LN3@TempInputT
; Line 3363
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN7@TempInputT
	mov	eax, DWORD PTR ?__LINE__Var@?0??TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z@4JA
	add	eax, 13
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@LLIJAMKA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@TempInputT:
; Line 3364
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7260]
	mov	DWORD PTR [rax+12216], ecx
$LN3@TempInputT:
; Line 3366
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 3367
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?TempInputText@ImGui@@YA_NAEBUImRect@@IPEBDPEADHH@Z ENDP ; ImGui::TempInputText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
io$ = 72
style$ = 104
RENDER_SELECTION_WHEN_INACTIVE$ = 132
is_multiline$ = 164
is_readonly$ = 196
is_password$ = 228
is_undoable$ = 260
is_resizable$ = 292
id$ = 324
label_size$ = 360
frame_size$ = 392
total_size$ = 424
frame_bb$ = 456
total_bb$ = 504
draw_window$ = 552
inner_size$ = 584
child_visible$33 = 612
hovered$ = 644
state$ = 680
focus_requested_by_code$ = 708
focus_requested_by_tabbing$ = 740
user_clicked$ = 772
user_nav_input_start$ = 804
user_scroll_finish$ = 836
user_scroll_active$ = 868
clear_active_id$ = 900
select_all$ = 932
scroll_y$ = 964
init_changed_specs$ = 996
init_make_active$ = 1028
init_state$ = 1060
buf_len$34 = 1092
buf_end$35 = 1128
recycle_state$36 = 1156
render_cursor$ = 1188
render_selection$ = 1220
value_changed$ = 1252
enter_pressed$ = 1284
buf_end$37 = 1320
buf_display_from_state$ = 1348
is_displaying_hint$ = 1380
glyph$38 = 1416
password_font$39 = 1448
backup_current_text_length$ = 1476
mouse_x$40 = 1508
mouse_y$41 = 1540
is_osx$42 = 1572
ignore_char_inputs$43 = 1604
c$44 = 1636
n$45 = 1668
c$46 = 1700
cancel_edit$ = 1732
row_count_per_page$47 = 1764
k_mask$48 = 1796
is_osx$49 = 1828
is_osx_shift_shortcut$50 = 1860
is_wordmove_key_down$51 = 1892
is_startend_key_down$52 = 1924
is_ctrl_key_only$53 = 1956
is_shift_key_only$54 = 1988
is_shortcut_key$55 = 2020
is_cut$56 = 2052
is_copy$57 = 2084
is_paste$58 = 2116
is_undo$59 = 2148
is_redo$60 = 2180
ctrl_enter_for_new_line$61 = 2212
c$62 = 2244
ib$63 = 2276
ie$64 = 2308
clipboard_data_len$65 = 2340
clipboard_data$66 = 2376
clipboard$67 = 2408
clipboard_len$68 = 2436
clipboard_filtered$69 = 2472
clipboard_filtered_len$70 = 2500
s$71 = 2536
c$72 = 2564
apply_new_text$73 = 2600
apply_new_text_length$74 = 2628
w_text$75 = 2664
apply_edit_back_to_user_buffer$76 = 2708
event_flag$77 = 2740
event_key$78 = 2772
callback_data$79 = 2808
text$80 = 2888
utf8_cursor_pos$81 = 2916
utf8_selection_start$82 = 2948
utf8_selection_end$83 = 2980
buf_dirty$84 = 3012
callback_data$85 = 3048
clip_rect$ = 3128
draw_pos$ = 3176
text_size$ = 3208
buf_display_max_length$ = 3236
buf_display$ = 3272
buf_display_end$ = 3304
text_begin$86 = 3336
cursor_offset$87 = 3368
select_start_offset$88 = 3400
searches_input_ptr$89 = 3432
searches_result_line_no$90 = 3480
searches_remaining$91 = 3508
line_count$92 = 3540
s$93 = 3576
scroll_increment_x$94 = 3604
visible_width$95 = 3636
scroll_max_y$96 = 3668
draw_scroll$97 = 3704
text_selected_begin$98 = 3736
text_selected_end$99 = 3768
bg_color$100 = 3796
bg_offy_up$101 = 3828
bg_offy_dn$102 = 3860
rect_pos$103 = 3896
p$104 = 3928
rect_size$105 = 3960
rect$106 = 3992
col$107 = 4036
cursor_is_visible$108 = 4068
cursor_screen_pos$109 = 4104
cursor_screen_rect$110 = 4136
col$111 = 4180
$T112 = 5752
$T113 = 5784
$T114 = 5812
$T115 = 5844
$T116 = 5876
$T117 = 5908
$T118 = 5944
$T119 = 5972
$T120 = 6004
$T121 = 6036
$T122 = 6068
$T123 = 6100
$T124 = 6132
$T125 = 6164
$T126 = 6196
$T127 = 6228
$T128 = 6260
$T129 = 6292
$T130 = 6340
$T131 = 6388
$T132 = 6420
$T133 = 6452
$T134 = 6484
$T135 = 6532
$T136 = 6564
$T137 = 6596
$T138 = 6628
$T139 = 6660
tv2867 = 6676
tv2450 = 6676
tv2357 = 6676
tv2308 = 6676
tv2200 = 6676
tv2183 = 6676
tv2180 = 6676
tv2175 = 6676
tv1947 = 6676
tv1832 = 6676
tv1725 = 6676
tv1711 = 6676
tv1533 = 6676
tv1521 = 6676
tv1474 = 6676
tv1377 = 6676
tv1332 = 6676
tv1303 = 6676
tv1265 = 6676
tv1210 = 6676
tv1197 = 6676
tv1155 = 6676
tv1149 = 6676
tv1125 = 6676
tv1100 = 6676
tv1086 = 6676
tv1074 = 6676
tv1055 = 6676
tv1043 = 6676
tv1026 = 6676
tv1003 = 6676
tv974 = 6676
tv966 = 6676
tv963 = 6676
tv960 = 6676
tv948 = 6676
tv943 = 6676
tv937 = 6676
tv828 = 6676
tv743 = 6676
tv722 = 6676
tv608 = 6676
tv590 = 6676
tv560 = 6676
tv551 = 6676
tv468 = 6676
tv460 = 6676
tv405 = 6676
tv400 = 6676
tv387 = 6676
tv380 = 6676
tv374 = 6676
tv365 = 6676
tv356 = 6676
tv345 = 6676
tv336 = 6676
tv328 = 6676
tv323 = 6676
tv192 = 6676
tv166 = 6676
tv141 = 6676
tv138 = 6676
tv135 = 6676
tv132 = 6676
tv129 = 6676
tv2778 = 6680
tv2663 = 6680
tv2621 = 6680
tv2593 = 6680
tv2537 = 6680
tv2468 = 6680
tv2405 = 6680
tv2338 = 6680
tv2264 = 6680
tv2245 = 6680
tv2215 = 6680
tv2201 = 6680
tv2030 = 6680
tv2003 = 6680
tv1891 = 6680
tv1850 = 6680
tv1830 = 6680
tv1790 = 6680
tv1748 = 6680
tv1666 = 6680
tv1548 = 6680
tv1147 = 6680
tv1097 = 6680
tv1083 = 6680
tv977 = 6680
tv899 = 6680
tv879 = 6680
tv848 = 6680
tv629 = 6680
tv614 = 6680
tv574 = 6680
tv442 = 6680
tv437 = 6680
tv422 = 6680
tv389 = 6680
tv188 = 6680
tv181 = 6680
tv973 = 6684
tv178 = 6684
tv2779 = 6688
tv2664 = 6688
tv2622 = 6688
tv2594 = 6688
tv2538 = 6688
tv2456 = 6688
tv2403 = 6688
tv2314 = 6688
tv2243 = 6688
tv2028 = 6688
tv2001 = 6688
tv619 = 6688
tv2401 = 6696
tv2336 = 6696
tv2332 = 6704
tv2334 = 6712
tv2330 = 6720
__$ArrayPad$ = 6728
label$ = 6768
hint$ = 6776
buf$ = 6784
buf_size$ = 6792
size_arg$ = 6800
flags$ = 6808
callback$ = 6816
callback_user_data$ = 6824
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z PROC ; ImGui::InputTextEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3936
$LN403:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	mov	eax, 6816				; 00001aa0H
	call	__chkstk
	sub	rsp, rax
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 1300				; 00000514H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+6856]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3937
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3938
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN16@InputTextE
; Line 3939
	xor	al, al
	jmp	$LN1@InputTextE
$LN16@InputTextE:
; Line 3941
	cmp	QWORD PTR buf$[rbp], 0
	je	SHORT $LN204@InputTextE
	cmp	DWORD PTR buf_size$[rbp], 0
	jge	SHORT $LN205@InputTextE
$LN204@InputTextE:
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DE@KCJLPEOI@?$AAb?$AAu?$AAf?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AAu?$AAf@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN205@InputTextE:
; Line 3942
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN206@InputTextE
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN206@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LI@BDNHGOFF@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN206@InputTextE:
; Line 3943
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN207@InputTextE
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN207@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1MG@MGOPIKJM@?$AA?$CB?$AA?$CI?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN207@InputTextE:
; Line 3945
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3946
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8
	mov	QWORD PTR io$[rbp], rax
; Line 3947
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 3949
	mov	BYTE PTR RENDER_SELECTION_WHEN_INACTIVE$[rbp], 0
; Line 3950
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN208@InputTextE
	mov	BYTE PTR tv129[rbp], 1
	jmp	SHORT $LN209@InputTextE
$LN208@InputTextE:
	mov	BYTE PTR tv129[rbp], 0
$LN209@InputTextE:
	movzx	eax, BYTE PTR tv129[rbp]
	mov	BYTE PTR is_multiline$[rbp], al
; Line 3951
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16384				; 00004000H
	test	eax, eax
	je	SHORT $LN210@InputTextE
	mov	BYTE PTR tv132[rbp], 1
	jmp	SHORT $LN211@InputTextE
$LN210@InputTextE:
	mov	BYTE PTR tv132[rbp], 0
$LN211@InputTextE:
	movzx	eax, BYTE PTR tv132[rbp]
	mov	BYTE PTR is_readonly$[rbp], al
; Line 3952
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN212@InputTextE
	mov	BYTE PTR tv135[rbp], 1
	jmp	SHORT $LN213@InputTextE
$LN212@InputTextE:
	mov	BYTE PTR tv135[rbp], 0
$LN213@InputTextE:
	movzx	eax, BYTE PTR tv135[rbp]
	mov	BYTE PTR is_password$[rbp], al
; Line 3953
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 65536				; 00010000H
	test	eax, eax
	jne	SHORT $LN214@InputTextE
	mov	BYTE PTR tv138[rbp], 1
	jmp	SHORT $LN215@InputTextE
$LN214@InputTextE:
	mov	BYTE PTR tv138[rbp], 0
$LN215@InputTextE:
	movzx	eax, BYTE PTR tv138[rbp]
	mov	BYTE PTR is_undoable$[rbp], al
; Line 3954
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 262144				; 00040000H
	test	eax, eax
	je	SHORT $LN216@InputTextE
	mov	BYTE PTR tv141[rbp], 1
	jmp	SHORT $LN217@InputTextE
$LN216@InputTextE:
	mov	BYTE PTR tv141[rbp], 0
$LN217@InputTextE:
	movzx	eax, BYTE PTR tv141[rbp]
	mov	BYTE PTR is_resizable$[rbp], al
; Line 3955
	movzx	eax, BYTE PTR is_resizable$[rbp]
	test	eax, eax
	je	SHORT $LN17@InputTextE
; Line 3956
	cmp	QWORD PTR callback$[rbp], 0
	jne	SHORT $LN17@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 20
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BM@CBGPMFEC@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@InputTextE:
; Line 3958
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN18@InputTextE
; Line 3959
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
$LN18@InputTextE:
; Line 3960
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 3961
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 3962
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN219@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@41000000
	movss	DWORD PTR tv166[rbp], xmm0
	jmp	SHORT $LN220@InputTextE
$LN219@InputTextE:
	movss	xmm0, DWORD PTR label_size$[rbp+4]
	movss	DWORD PTR tv166[rbp], xmm0
$LN220@InputTextE:
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv166[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv181[rbp], xmm0
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR tv178[rbp], xmm0
	mov	rax, QWORD PTR size_arg$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T112[rbp], rax
	mov	rax, QWORD PTR $T112[rbp]
	mov	QWORD PTR $T113[rbp], rax
	movss	xmm3, DWORD PTR tv181[rbp]
	movss	xmm2, DWORD PTR tv178[rbp]
	mov	rdx, QWORD PTR $T113[rbp]
	lea	rcx, QWORD PTR frame_size$[rbp]
	call	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z ; ImGui::CalcItemSize
; Line 3963
	movss	xmm0, DWORD PTR frame_size$[rbp+4]
	movss	DWORD PTR tv192[rbp], xmm0
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN221@InputTextE
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv188[rbp], xmm0
	jmp	SHORT $LN222@InputTextE
$LN221@InputTextE:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv188[rbp], xmm0
$LN222@InputTextE:
	movss	xmm0, DWORD PTR frame_size$[rbp]
	addss	xmm0, DWORD PTR tv188[rbp]
	movss	xmm2, DWORD PTR tv192[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR total_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 3965
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR frame_size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T114[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3966
	lea	r8, QWORD PTR total_size$[rbp]
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR $T115[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3968
	mov	rax, QWORD PTR window$[rbp]
	mov	QWORD PTR draw_window$[rbp], rax
; Line 3969
	mov	rax, QWORD PTR frame_size$[rbp]
	mov	QWORD PTR inner_size$[rbp], rax
; Line 3970
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	$LN19@InputTextE
; Line 3972
	mov	r9d, 1
	lea	r8, QWORD PTR frame_bb$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN21@InputTextE
; Line 3974
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 3975
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 3976
	xor	al, al
	jmp	$LN1@InputTextE
$LN21@InputTextE:
; Line 3980
	mov	eax, 16
	imul	rax, rax, 7
	mov	rcx, QWORD PTR style$[rbp]
	lea	rax, QWORD PTR [rcx+rax+196]
	mov	rdx, rax
	mov	ecx, 3
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 3981
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+64]
	mov	ecx, 6
	call	?PushStyleVar@ImGui@@YAXHM@Z		; ImGui::PushStyleVar
; Line 3982
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	ecx, 7
	call	?PushStyleVar@ImGui@@YAXHM@Z		; ImGui::PushStyleVar
; Line 3983
	lea	rdx, QWORD PTR $T116[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	mov	DWORD PTR [rsp+32], 4
	mov	r9b, 1
	mov	r8, rax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?BeginChildEx@ImGui@@YA_NPEBDIAEBUImVec2@@_NH@Z ; ImGui::BeginChildEx
	mov	BYTE PTR child_visible$33[rbp], al
; Line 3984
	mov	ecx, 2
	call	?PopStyleVar@ImGui@@YAXH@Z		; ImGui::PopStyleVar
; Line 3985
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
; Line 3986
	movzx	eax, BYTE PTR child_visible$33[rbp]
	test	eax, eax
	jne	SHORT $LN22@InputTextE
; Line 3988
	call	?EndChild@ImGui@@YAXXZ			; ImGui::EndChild
; Line 3989
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 3990
	xor	al, al
	jmp	$LN1@InputTextE
$LN22@InputTextE:
; Line 3992
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR draw_window$[rbp], rax
; Line 3993
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	eax, DWORD PTR [rax+332]
	mov	ecx, 1
	mov	DWORD PTR tv2867[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv2867[rbp]
	shl	eax, cl
	mov	rcx, QWORD PTR draw_window$[rbp]
	movsx	ecx, WORD PTR [rcx+338]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR draw_window$[rbp]
	mov	WORD PTR [rcx+338], ax
; Line 3994
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR draw_window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	rdx, rax
	call	??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z	; operator+=
; Line 3995
	mov	rax, QWORD PTR draw_window$[rbp]
	movss	xmm0, DWORD PTR inner_size$[rbp]
	subss	xmm0, DWORD PTR [rax+132]
	movss	DWORD PTR inner_size$[rbp], xmm0
; Line 3996
	jmp	SHORT $LN20@InputTextE
$LN19@InputTextE:
; Line 4000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 4001
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	jne	SHORT $LN20@InputTextE
; Line 4002
	mov	r9d, 1
	lea	r8, QWORD PTR frame_bb$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN20@InputTextE
; Line 4003
	xor	al, al
	jmp	$LN1@InputTextE
$LN20@InputTextE:
; Line 4005
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR hovered$[rbp], al
; Line 4006
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN25@InputTextE
; Line 4007
	mov	rax, QWORD PTR g$[rbp]
	mov	DWORD PTR [rax+8008], 1
$LN25@InputTextE:
; Line 4010
	mov	ecx, DWORD PTR id$[rbp]
	call	?GetInputTextState@ImGui@@YAPEAUImGuiInputTextState@@I@Z ; ImGui::GetInputTextState
	mov	QWORD PTR state$[rbp], rax
; Line 4012
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN223@InputTextE
	mov	BYTE PTR tv323[rbp], 1
	jmp	SHORT $LN224@InputTextE
$LN223@InputTextE:
	mov	BYTE PTR tv323[rbp], 0
$LN224@InputTextE:
	movzx	eax, BYTE PTR tv323[rbp]
	mov	BYTE PTR focus_requested_by_code$[rbp], al
; Line 4013
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN225@InputTextE
	mov	BYTE PTR tv328[rbp], 1
	jmp	SHORT $LN226@InputTextE
$LN225@InputTextE:
	mov	BYTE PTR tv328[rbp], 0
$LN226@InputTextE:
	movzx	eax, BYTE PTR tv328[rbp]
	mov	BYTE PTR focus_requested_by_tabbing$[rbp], al
; Line 4015
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN227@InputTextE
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1048]
	test	eax, eax
	je	SHORT $LN227@InputTextE
	mov	BYTE PTR tv336[rbp], 1
	jmp	SHORT $LN228@InputTextE
$LN227@InputTextE:
	mov	BYTE PTR tv336[rbp], 0
$LN228@InputTextE:
	movzx	eax, BYTE PTR tv336[rbp]
	mov	BYTE PTR user_clicked$[rbp], al
; Line 4016
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN229@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7652], ecx
	je	SHORT $LN230@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	jne	SHORT $LN229@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7676], 2
	jne	SHORT $LN229@InputTextE
$LN230@InputTextE:
	mov	BYTE PTR tv345[rbp], 1
	jmp	SHORT $LN232@InputTextE
$LN229@InputTextE:
	mov	BYTE PTR tv345[rbp], 0
$LN232@InputTextE:
	movzx	eax, BYTE PTR tv345[rbp]
	mov	BYTE PTR user_nav_input_start$[rbp], al
; Line 4017
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN233@InputTextE
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN233@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7260], 0
	jne	SHORT $LN233@InputTextE
	mov	edx, 1
	mov	rcx, QWORD PTR draw_window$[rbp]
	call	?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z ; ImGui::GetWindowScrollbarID
	mov	rcx, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rcx+7320], eax
	jne	SHORT $LN233@InputTextE
	mov	BYTE PTR tv356[rbp], 1
	jmp	SHORT $LN234@InputTextE
$LN233@InputTextE:
	mov	BYTE PTR tv356[rbp], 0
$LN234@InputTextE:
	movzx	eax, BYTE PTR tv356[rbp]
	mov	BYTE PTR user_scroll_finish$[rbp], al
; Line 4018
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN235@InputTextE
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN235@InputTextE
	mov	edx, 1
	mov	rcx, QWORD PTR draw_window$[rbp]
	call	?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z ; ImGui::GetWindowScrollbarID
	mov	rcx, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rcx+7260], eax
	jne	SHORT $LN235@InputTextE
	mov	BYTE PTR tv365[rbp], 1
	jmp	SHORT $LN236@InputTextE
$LN235@InputTextE:
	mov	BYTE PTR tv365[rbp], 0
$LN236@InputTextE:
	movzx	eax, BYTE PTR tv365[rbp]
	mov	BYTE PTR user_scroll_active$[rbp], al
; Line 4020
	mov	BYTE PTR clear_active_id$[rbp], 0
; Line 4021
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN238@InputTextE
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN237@InputTextE
	movzx	eax, BYTE PTR user_nav_input_start$[rbp]
	test	eax, eax
	je	SHORT $LN238@InputTextE
$LN237@InputTextE:
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN238@InputTextE
	mov	DWORD PTR tv374[rbp], 1
	jmp	SHORT $LN239@InputTextE
$LN238@InputTextE:
	mov	DWORD PTR tv374[rbp], 0
$LN239@InputTextE:
	movzx	eax, BYTE PTR tv374[rbp]
	mov	BYTE PTR select_all$[rbp], al
; Line 4023
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN240@InputTextE
	mov	rax, QWORD PTR draw_window$[rbp]
	movss	xmm0, DWORD PTR [rax+96]
	movss	DWORD PTR tv380[rbp], xmm0
	jmp	SHORT $LN241@InputTextE
$LN240@InputTextE:
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR tv380[rbp], xmm0
$LN241@InputTextE:
	movss	xmm0, DWORD PTR tv380[rbp]
	movss	DWORD PTR scroll_y$[rbp], xmm0
; Line 4025
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN244@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN242@InputTextE
	mov	DWORD PTR tv387[rbp], 1
	jmp	SHORT $LN243@InputTextE
$LN242@InputTextE:
	mov	DWORD PTR tv387[rbp], 0
$LN243@InputTextE:
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+99]
	cmp	eax, DWORD PTR tv387[rbp]
	je	SHORT $LN244@InputTextE
	mov	BYTE PTR tv389[rbp], 1
	jmp	SHORT $LN245@InputTextE
$LN244@InputTextE:
	mov	BYTE PTR tv389[rbp], 0
$LN245@InputTextE:
	movzx	eax, BYTE PTR tv389[rbp]
	mov	BYTE PTR init_changed_specs$[rbp], al
; Line 4026
	movzx	eax, BYTE PTR user_clicked$[rbp]
	test	eax, eax
	jne	SHORT $LN246@InputTextE
	movzx	eax, BYTE PTR user_scroll_finish$[rbp]
	test	eax, eax
	jne	SHORT $LN246@InputTextE
	movzx	eax, BYTE PTR user_nav_input_start$[rbp]
	test	eax, eax
	jne	SHORT $LN246@InputTextE
	movzx	eax, BYTE PTR focus_requested_by_code$[rbp]
	test	eax, eax
	jne	SHORT $LN246@InputTextE
	movzx	eax, BYTE PTR focus_requested_by_tabbing$[rbp]
	test	eax, eax
	jne	SHORT $LN246@InputTextE
	mov	BYTE PTR tv400[rbp], 0
	jmp	SHORT $LN247@InputTextE
$LN246@InputTextE:
	mov	BYTE PTR tv400[rbp], 1
$LN247@InputTextE:
	movzx	eax, BYTE PTR tv400[rbp]
	mov	BYTE PTR init_make_active$[rbp], al
; Line 4027
	movzx	eax, BYTE PTR init_make_active$[rbp]
	test	eax, eax
	jne	SHORT $LN248@InputTextE
	movzx	eax, BYTE PTR user_scroll_active$[rbp]
	test	eax, eax
	jne	SHORT $LN248@InputTextE
	mov	BYTE PTR tv405[rbp], 0
	jmp	SHORT $LN249@InputTextE
$LN248@InputTextE:
	mov	BYTE PTR tv405[rbp], 1
$LN249@InputTextE:
	movzx	eax, BYTE PTR tv405[rbp]
	mov	BYTE PTR init_state$[rbp], al
; Line 4028
	movzx	eax, BYTE PTR init_state$[rbp]
	test	eax, eax
	je	SHORT $LN28@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN27@InputTextE
$LN28@InputTextE:
	movzx	eax, BYTE PTR init_changed_specs$[rbp]
	test	eax, eax
	je	$LN26@InputTextE
$LN27@InputTextE:
; Line 4031
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8368				; 000020b0H
	mov	QWORD PTR state$[rbp], rax
; Line 4032
	mov	rcx, QWORD PTR state$[rbp]
	call	?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorAnimReset
; Line 4036
	mov	rax, QWORD PTR buf$[rbp]
	mov	QWORD PTR tv2778[rbp], rax
	mov	QWORD PTR tv2779[rbp], -1
$LL402@InputTextE:
	inc	QWORD PTR tv2779[rbp]
	mov	rax, QWORD PTR tv2778[rbp]
	mov	rcx, QWORD PTR tv2779[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL402@InputTextE
	mov	rax, QWORD PTR tv2779[rbp]
	mov	DWORD PTR buf_len$34[rbp], eax
; Line 4037
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 48					; 00000030H
	mov	QWORD PTR tv422[rbp], rax
	mov	eax, DWORD PTR buf_len$34[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv422[rbp]
	call	?resize@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::resize
; Line 4038
	mov	eax, DWORD PTR buf_len$34[rbp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR state$[rbp]
	mov	rdi, QWORD PTR [rcx+56]
	mov	rsi, QWORD PTR buf$[rbp]
	mov	rcx, rax
	rep movsb
; Line 4041
	mov	QWORD PTR buf_end$35[rbp], 0
; Line 4042
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 16
	mov	QWORD PTR tv437[rbp], rax
	mov	eax, DWORD PTR buf_size$[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv437[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 4043
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv442[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv442[rbp]
	call	?resize@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::resize
; Line 4044
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+64], 0
; Line 4045
	lea	rax, QWORD PTR buf_end$35[rbp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR buf$[rbp]
	mov	edx, DWORD PTR buf_size$[rbp]
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ImTextStrFromUtf8@@YAHPEAGHPEBD1PEAPEBD@Z ; ImTextStrFromUtf8
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 4046
	mov	rax, QWORD PTR buf$[rbp]
	mov	rcx, QWORD PTR buf_end$35[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 4050
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN250@InputTextE
	movzx	eax, BYTE PTR init_changed_specs$[rbp]
	test	eax, eax
	jne	SHORT $LN250@InputTextE
	mov	BYTE PTR tv460[rbp], 1
	jmp	SHORT $LN251@InputTextE
$LN250@InputTextE:
	mov	BYTE PTR tv460[rbp], 0
$LN251@InputTextE:
	movzx	eax, BYTE PTR tv460[rbp]
	mov	BYTE PTR recycle_state$36[rbp], al
; Line 4051
	movzx	eax, BYTE PTR recycle_state$36[rbp]
	test	eax, eax
	je	SHORT $LN29@InputTextE
; Line 4055
	mov	rcx, QWORD PTR state$[rbp]
	call	?CursorClamp@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorClamp
; Line 4056
	jmp	SHORT $LN30@InputTextE
$LN29@InputTextE:
; Line 4059
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 4060
	mov	rax, QWORD PTR state$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+72], xmm0
; Line 4061
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN252@InputTextE
	mov	DWORD PTR tv468[rbp], 1
	jmp	SHORT $LN253@InputTextE
$LN252@InputTextE:
	mov	DWORD PTR tv468[rbp], 0
$LN253@InputTextE:
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 76					; 0000004cH
	mov	edx, DWORD PTR tv468[rbp]
	mov	rcx, rax
	call	?stb_textedit_initialize_state@ImStb@@YAXPEAUSTB_TexteditState@1@H@Z ; ImStb::stb_textedit_initialize_state
; Line 4062
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN30@InputTextE
	movzx	eax, BYTE PTR focus_requested_by_code$[rbp]
	test	eax, eax
	je	SHORT $LN30@InputTextE
; Line 4063
	mov	BYTE PTR select_all$[rbp], 1
$LN30@InputTextE:
; Line 4065
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8192				; 00002000H
	test	eax, eax
	je	SHORT $LN32@InputTextE
; Line 4066
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+88], 1
$LN32@InputTextE:
; Line 4067
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN26@InputTextE
	movzx	eax, BYTE PTR focus_requested_by_tabbing$[rbp]
	test	eax, eax
	jne	SHORT $LN34@InputTextE
	movzx	eax, BYTE PTR user_clicked$[rbp]
	test	eax, eax
	je	SHORT $LN26@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN26@InputTextE
$LN34@InputTextE:
; Line 4068
	mov	BYTE PTR select_all$[rbp], 1
$LN26@InputTextE:
; Line 4071
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	$LN35@InputTextE
	movzx	eax, BYTE PTR init_make_active$[rbp]
	test	eax, eax
	je	$LN35@InputTextE
; Line 4073
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN254@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN255@InputTextE
$LN254@InputTextE:
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 137				; 00000089H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@CMKEKNGP@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN255@InputTextE:
; Line 4074
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
; Line 4075
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetFocusID
; Line 4076
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
; Line 4080
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7280]
	or	eax, 3
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7280], eax
; Line 4081
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN37@InputTextE
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN36@InputTextE
$LN37@InputTextE:
; Line 4082
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7280]
	or	eax, 12
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7280], eax
$LN36@InputTextE:
; Line 4083
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7284]
	or	eax, 2
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7284], eax
; Line 4084
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7288]
	or	rax, 384				; 00000180H
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+7288], rax
; Line 4085
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN38@InputTextE
; Line 4086
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7288]
	or	rax, 96					; 00000060H
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+7288], rax
$LN38@InputTextE:
; Line 4087
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1088				; 00000440H
	test	eax, eax
	je	SHORT $LN35@InputTextE
; Line 4088
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7288]
	or	rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+7288], rax
$LN35@InputTextE:
; Line 4092
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN40@InputTextE
	cmp	QWORD PTR state$[rbp], 0
	jne	SHORT $LN40@InputTextE
; Line 4093
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN40@InputTextE:
; Line 4096
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN41@InputTextE
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1048]
	test	eax, eax
	je	SHORT $LN41@InputTextE
	movzx	eax, BYTE PTR init_state$[rbp]
	test	eax, eax
	jne	SHORT $LN41@InputTextE
	movzx	eax, BYTE PTR init_make_active$[rbp]
	test	eax, eax
	jne	SHORT $LN41@InputTextE
; Line 4097
	mov	BYTE PTR clear_active_id$[rbp], 1
$LN41@InputTextE:
; Line 4100
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN257@InputTextE
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN256@InputTextE
	movzx	eax, BYTE PTR user_scroll_active$[rbp]
	test	eax, eax
	jne	SHORT $LN257@InputTextE
$LN256@InputTextE:
	mov	BYTE PTR tv551[rbp], 0
	jmp	SHORT $LN258@InputTextE
$LN257@InputTextE:
	mov	BYTE PTR tv551[rbp], 1
$LN258@InputTextE:
	movzx	eax, BYTE PTR tv551[rbp]
	mov	BYTE PTR render_cursor$[rbp], al
; Line 4101
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN259@InputTextE
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN259@InputTextE
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN260@InputTextE
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	je	SHORT $LN259@InputTextE
$LN260@InputTextE:
	mov	DWORD PTR tv560[rbp], 1
	jmp	SHORT $LN261@InputTextE
$LN259@InputTextE:
	mov	DWORD PTR tv560[rbp], 0
$LN261@InputTextE:
	movzx	eax, BYTE PTR tv560[rbp]
	mov	BYTE PTR render_selection$[rbp], al
; Line 4102
	mov	BYTE PTR value_changed$[rbp], 0
; Line 4103
	mov	BYTE PTR enter_pressed$[rbp], 0
; Line 4107
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	je	$LN42@InputTextE
	cmp	QWORD PTR state$[rbp], 0
	je	$LN42@InputTextE
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	jne	SHORT $LN43@InputTextE
	movzx	eax, BYTE PTR render_selection$[rbp]
	test	eax, eax
	je	$LN42@InputTextE
$LN43@InputTextE:
; Line 4109
	mov	QWORD PTR buf_end$37[rbp], 0
; Line 4110
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 16
	mov	QWORD PTR tv574[rbp], rax
	mov	eax, DWORD PTR buf_size$[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv574[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 4111
	lea	rax, QWORD PTR buf_end$37[rbp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR buf$[rbp]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ImTextStrFromUtf8@@YAHPEAGHPEBD1PEAPEBD@Z ; ImTextStrFromUtf8
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 4112
	mov	rax, QWORD PTR buf$[rbp]
	mov	rcx, QWORD PTR buf_end$37[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 4113
	mov	rcx, QWORD PTR state$[rbp]
	call	?CursorClamp@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorClamp
; Line 4114
	movzx	eax, BYTE PTR render_selection$[rbp]
	mov	DWORD PTR tv590[rbp], eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	mov	ecx, DWORD PTR tv590[rbp]
	and	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR render_selection$[rbp], al
$LN42@InputTextE:
; Line 4118
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	jne	SHORT $LN262@InputTextE
	movzx	eax, BYTE PTR render_selection$[rbp]
	test	eax, eax
	jne	SHORT $LN262@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN263@InputTextE
$LN262@InputTextE:
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN263@InputTextE
	cmp	QWORD PTR state$[rbp], 0
	je	SHORT $LN263@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+64]
	test	eax, eax
	je	SHORT $LN263@InputTextE
	mov	BYTE PTR tv608[rbp], 1
	jmp	SHORT $LN264@InputTextE
$LN263@InputTextE:
	mov	BYTE PTR tv608[rbp], 0
$LN264@InputTextE:
	movzx	eax, BYTE PTR tv608[rbp]
	mov	BYTE PTR buf_display_from_state$[rbp], al
; Line 4119
	cmp	QWORD PTR hint$[rbp], 0
	je	SHORT $LN267@InputTextE
	movzx	eax, BYTE PTR buf_display_from_state$[rbp]
	test	eax, eax
	je	SHORT $LN265@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv614[rbp], rax
	jmp	SHORT $LN266@InputTextE
$LN265@InputTextE:
	mov	rax, QWORD PTR buf$[rbp]
	mov	QWORD PTR tv614[rbp], rax
$LN266@InputTextE:
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tv614[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN267@InputTextE
	mov	BYTE PTR tv619[rbp], 1
	jmp	SHORT $LN268@InputTextE
$LN267@InputTextE:
	mov	BYTE PTR tv619[rbp], 0
$LN268@InputTextE:
	movzx	eax, BYTE PTR tv619[rbp]
	mov	BYTE PTR is_displaying_hint$[rbp], al
; Line 4122
	movzx	eax, BYTE PTR is_password$[rbp]
	test	eax, eax
	je	$LN44@InputTextE
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	jne	$LN44@InputTextE
; Line 4124
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	QWORD PTR tv629[rbp], rax
	mov	dx, 42					; 0000002aH
	mov	rcx, QWORD PTR tv629[rbp]
	call	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
	mov	QWORD PTR glyph$38[rbp], rax
; Line 4125
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12104				; 00002f48H
	mov	QWORD PTR password_font$39[rbp], rax
; Line 4126
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR password_font$39[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR [rcx+20], xmm0
; Line 4127
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR password_font$39[rbp]
	movss	xmm0, DWORD PTR [rax+92]
	movss	DWORD PTR [rcx+92], xmm0
; Line 4128
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR password_font$39[rbp]
	movss	xmm0, DWORD PTR [rax+96]
	movss	DWORD PTR [rcx+96], xmm0
; Line 4129
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR password_font$39[rbp]
	movss	xmm0, DWORD PTR [rax+100]
	movss	DWORD PTR [rcx+100], xmm0
; Line 4130
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR password_font$39[rbp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR [rcx+64], rax
; Line 4131
	mov	rax, QWORD PTR password_font$39[rbp]
	mov	rcx, QWORD PTR glyph$38[rbp]
	mov	QWORD PTR [rax+56], rcx
; Line 4132
	mov	rax, QWORD PTR password_font$39[rbp]
	mov	rcx, QWORD PTR glyph$38[rbp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+16], xmm0
; Line 4133
	mov	rax, QWORD PTR password_font$39[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ ; ImVector<ImFontGlyph>::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN269@InputTextE
	mov	rax, QWORD PTR password_font$39[rbp]
	mov	rcx, rax
	call	?empty@?$ImVector@M@@QEBA_NXZ		; ImVector<float>::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN269@InputTextE
	mov	rax, QWORD PTR password_font$39[rbp]
	add	rax, 24
	mov	rcx, rax
	call	?empty@?$ImVector@G@@QEBA_NXZ		; ImVector<unsigned short>::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN270@InputTextE
$LN269@InputTextE:
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 197				; 000000c5H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1NI@EFFIGGBI@?$AAp?$AAa?$AAs?$AAs?$AAw?$AAo?$AAr?$AAd?$AA_?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN270@InputTextE:
; Line 4134
	mov	rcx, QWORD PTR password_font$39[rbp]
	call	?PushFont@ImGui@@YAXPEAUImFont@@@Z	; ImGui::PushFont
$LN44@InputTextE:
; Line 4138
	mov	DWORD PTR backup_current_text_length$[rbp], 0
; Line 4139
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN45@InputTextE
; Line 4141
	cmp	QWORD PTR state$[rbp], 0
	jne	SHORT $LN271@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 205				; 000000cdH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN271@InputTextE:
; Line 4142
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR backup_current_text_length$[rbp], eax
; Line 4143
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3710], 0
; Line 4144
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR buf_size$[rbp]
	mov	DWORD PTR [rax+68], ecx
; Line 4145
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rax+3712], ecx
; Line 4146
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR callback$[rbp]
	mov	QWORD PTR [rax+3720], rcx
; Line 4147
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR callback_user_data$[rbp]
	mov	QWORD PTR [rax+3728], rcx
; Line 4151
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+296]
	test	eax, eax
	jne	SHORT $LN272@InputTextE
	mov	DWORD PTR tv722[rbp], 1
	jmp	SHORT $LN273@InputTextE
$LN272@InputTextE:
	mov	DWORD PTR tv722[rbp], 0
$LN273@InputTextE:
	mov	rax, QWORD PTR g$[rbp]
	movzx	ecx, BYTE PTR tv722[rbp]
	mov	BYTE PTR [rax+7273], cl
; Line 4152
	mov	rax, QWORD PTR g$[rbp]
	mov	DWORD PTR [rax+13072], 1
; Line 4155
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+288]
	subss	xmm0, DWORD PTR frame_bb$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	subss	xmm0, DWORD PTR [rax+56]
	mov	rax, QWORD PTR state$[rbp]
	addss	xmm0, DWORD PTR [rax+72]
	movss	DWORD PTR mouse_x$40[rbp], xmm0
; Line 4156
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN274@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	mov	rcx, QWORD PTR draw_window$[rbp]
	movss	xmm0, DWORD PTR [rax+292]
	subss	xmm0, DWORD PTR [rcx+220]
	movss	DWORD PTR tv743[rbp], xmm0
	jmp	SHORT $LN275@InputTextE
$LN274@InputTextE:
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv743[rbp], xmm0
$LN275@InputTextE:
	movss	xmm0, DWORD PTR tv743[rbp]
	movss	DWORD PTR mouse_y$41[rbp], xmm0
; Line 4158
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+193]
	mov	BYTE PTR is_osx$42[rbp], al
; Line 4159
	movzx	eax, BYTE PTR select_all$[rbp]
	test	eax, eax
	jne	SHORT $LN48@InputTextE
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN46@InputTextE
	movzx	eax, BYTE PTR is_osx$42[rbp]
	test	eax, eax
	jne	SHORT $LN46@InputTextE
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1053]
	test	eax, eax
	je	SHORT $LN46@InputTextE
$LN48@InputTextE:
; Line 4161
	mov	rcx, QWORD PTR state$[rbp]
	call	?SelectAll@ImGuiInputTextState@@QEAAXXZ	; ImGuiInputTextState::SelectAll
; Line 4162
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3709], 1
; Line 4163
	jmp	$LN47@InputTextE
$LN46@InputTextE:
; Line 4164
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN49@InputTextE
	movzx	eax, BYTE PTR is_osx$42[rbp]
	test	eax, eax
	je	SHORT $LN49@InputTextE
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1053]
	test	eax, eax
	je	SHORT $LN49@InputTextE
; Line 4167
	mov	edx, 2097164				; 0020000cH
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
; Line 4168
	mov	edx, 6291469				; 0060000dH
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
; Line 4169
	jmp	$LN47@InputTextE
$LN49@InputTextE:
; Line 4170
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1048]
	test	eax, eax
	je	SHORT $LN51@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+3709]
	test	eax, eax
	jne	SHORT $LN51@InputTextE
; Line 4172
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN53@InputTextE
; Line 4174
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 76					; 0000004cH
	movss	xmm3, DWORD PTR mouse_y$41[rbp]
	movss	xmm2, DWORD PTR mouse_x$40[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_click@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z ; ImStb::stb_textedit_click
; Line 4175
	mov	rcx, QWORD PTR state$[rbp]
	call	?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorAnimReset
$LN53@InputTextE:
; Line 4177
	jmp	$LN47@InputTextE
$LN51@InputTextE:
; Line 4178
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+296]
	test	eax, eax
	je	$LN47@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+3709]
	test	eax, eax
	jne	SHORT $LN47@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+944]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN55@InputTextE
	jne	SHORT $LN55@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+948]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN55@InputTextE
	je	SHORT $LN47@InputTextE
$LN55@InputTextE:
; Line 4180
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 76					; 0000004cH
	movss	xmm3, DWORD PTR mouse_y$41[rbp]
	movss	xmm2, DWORD PTR mouse_x$40[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_drag@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@MM@Z ; ImStb::stb_textedit_drag
; Line 4181
	mov	rcx, QWORD PTR state$[rbp]
	call	?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorAnimReset
; Line 4182
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3708], 1
$LN47@InputTextE:
; Line 4184
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+3709]
	test	eax, eax
	je	SHORT $LN56@InputTextE
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+296]
	test	eax, eax
	jne	SHORT $LN56@InputTextE
; Line 4185
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3709], 0
$LN56@InputTextE:
; Line 4189
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN276@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+314]
	test	eax, eax
	je	SHORT $LN278@InputTextE
$LN276@InputTextE:
	movzx	eax, BYTE PTR is_osx$42[rbp]
	test	eax, eax
	je	SHORT $LN277@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+315]
	test	eax, eax
	jne	SHORT $LN278@InputTextE
$LN277@InputTextE:
	mov	BYTE PTR tv828[rbp], 0
	jmp	SHORT $LN279@InputTextE
$LN278@InputTextE:
	mov	BYTE PTR tv828[rbp], 1
$LN279@InputTextE:
	movzx	eax, BYTE PTR tv828[rbp]
	mov	BYTE PTR ignore_char_inputs$43[rbp], al
; Line 4190
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	$LN57@InputTextE
	mov	dl, 1
	xor	ecx, ecx
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	$LN57@InputTextE
	movzx	eax, BYTE PTR ignore_char_inputs$43[rbp]
	test	eax, eax
	jne	$LN57@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+313]
	test	eax, eax
	jne	$LN57@InputTextE
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	$LN57@InputTextE
; Line 4191
	mov	rax, QWORD PTR io$[rbp]
	add	rax, 5448				; 00001548H
	mov	QWORD PTR tv848[rbp], rax
	mov	eax, 9
	mov	WORD PTR $T117[rbp], ax
	lea	rdx, QWORD PTR $T117[rbp]
	mov	rcx, QWORD PTR tv848[rbp]
	call	?contains@?$ImVector@G@@QEBA_NAEBG@Z	; ImVector<unsigned short>::contains
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN57@InputTextE
; Line 4193
	mov	DWORD PTR c$44[rbp], 9
; Line 4194
	mov	DWORD PTR [rsp+32], 2
	mov	r9, QWORD PTR callback_user_data$[rbp]
	mov	r8, QWORD PTR callback$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	lea	rcx, QWORD PTR c$44[rbp]
	call	?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z ; InputTextFilterCharacter
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN57@InputTextE
; Line 4195
	mov	edx, DWORD PTR c$44[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
$LN57@InputTextE:
; Line 4200
	mov	rax, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rax+5448], 0
	jle	$LN45@InputTextE
; Line 4202
	movzx	eax, BYTE PTR ignore_char_inputs$43[rbp]
	test	eax, eax
	jne	$LN61@InputTextE
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	$LN61@InputTextE
	movzx	eax, BYTE PTR user_nav_input_start$[rbp]
	test	eax, eax
	jne	$LN61@InputTextE
; Line 4203
	mov	DWORD PTR n$45[rbp], 0
	jmp	SHORT $LN4@InputTextE
$LN2@InputTextE:
	mov	eax, DWORD PTR n$45[rbp]
	inc	eax
	mov	DWORD PTR n$45[rbp], eax
$LN4@InputTextE:
	mov	rax, QWORD PTR io$[rbp]
	mov	eax, DWORD PTR [rax+5448]
	cmp	DWORD PTR n$45[rbp], eax
	jge	$LN61@InputTextE
; Line 4206
	mov	rax, QWORD PTR io$[rbp]
	add	rax, 5448				; 00001548H
	mov	QWORD PTR tv879[rbp], rax
	mov	edx, DWORD PTR n$45[rbp]
	mov	rcx, QWORD PTR tv879[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR c$46[rbp], eax
; Line 4207
	cmp	DWORD PTR c$46[rbp], 9
	jne	SHORT $LN62@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+313]
	test	eax, eax
	je	SHORT $LN62@InputTextE
; Line 4208
	jmp	SHORT $LN2@InputTextE
$LN62@InputTextE:
; Line 4209
	mov	DWORD PTR [rsp+32], 2
	mov	r9, QWORD PTR callback_user_data$[rbp]
	mov	r8, QWORD PTR callback$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	lea	rcx, QWORD PTR c$46[rbp]
	call	?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z ; InputTextFilterCharacter
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN63@InputTextE
; Line 4210
	mov	edx, DWORD PTR c$46[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
$LN63@InputTextE:
; Line 4211
	jmp	$LN2@InputTextE
$LN61@InputTextE:
; Line 4214
	mov	rax, QWORD PTR io$[rbp]
	add	rax, 5448				; 00001548H
	mov	QWORD PTR tv899[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv899[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
$LN45@InputTextE:
; Line 4219
	mov	BYTE PTR cancel_edit$[rbp], 0
; Line 4220
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN64@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	$LN64@InputTextE
	movzx	eax, BYTE PTR clear_active_id$[rbp]
	test	eax, eax
	jne	$LN64@InputTextE
; Line 4222
	cmp	QWORD PTR state$[rbp], 0
	jne	SHORT $LN280@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 286				; 0000011eH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN280@InputTextE:
; Line 4223
	call	?GetMergedKeyModFlags@ImGui@@YAHXZ	; ImGui::GetMergedKeyModFlags
	mov	rcx, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rcx+952], eax
	jne	SHORT $LN281@InputTextE
	lea	rax, OFFSET FLAT:??_C@_0EH@IKLAPCIG@Mismatching?5io?4KeyCtrl?1io?4KeySh@
	test	rax, rax
	jne	SHORT $LN282@InputTextE
$LN281@InputTextE:
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 287				; 0000011fH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1OC@MAFKNLH@?$AAi?$AAo?$AA?4?$AAK?$AAe?$AAy?$AAM?$AAo?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN282@InputTextE:
; Line 4225
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR inner_size$[rbp+4]
	subss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR g$[rbp]
	divss	xmm0, DWORD PTR [rax+6528]
	cvttss2si eax, xmm0
	mov	edx, 1
	mov	ecx, eax
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR row_count_per_page$47[rbp], eax
; Line 4226
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR row_count_per_page$47[rbp]
	mov	DWORD PTR [rax+92], ecx
; Line 4228
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+313]
	test	eax, eax
	je	SHORT $LN283@InputTextE
	mov	DWORD PTR tv937[rbp], 4194304		; 00400000H
	jmp	SHORT $LN284@InputTextE
$LN283@InputTextE:
	mov	DWORD PTR tv937[rbp], 0
$LN284@InputTextE:
	mov	eax, DWORD PTR tv937[rbp]
	mov	DWORD PTR k_mask$48[rbp], eax
; Line 4229
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+193]
	mov	BYTE PTR is_osx$49[rbp], al
; Line 4230
	movzx	eax, BYTE PTR is_osx$49[rbp]
	test	eax, eax
	je	SHORT $LN285@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rax+952], 10
	jne	SHORT $LN285@InputTextE
	mov	BYTE PTR tv943[rbp], 1
	jmp	SHORT $LN286@InputTextE
$LN285@InputTextE:
	mov	BYTE PTR tv943[rbp], 0
$LN286@InputTextE:
	movzx	eax, BYTE PTR tv943[rbp]
	mov	BYTE PTR is_osx_shift_shortcut$50[rbp], al
; Line 4231
	movzx	eax, BYTE PTR is_osx$49[rbp]
	test	eax, eax
	je	SHORT $LN287@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+314]
	mov	BYTE PTR tv948[rbp], al
	jmp	SHORT $LN288@InputTextE
$LN287@InputTextE:
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	mov	BYTE PTR tv948[rbp], al
$LN288@InputTextE:
	movzx	eax, BYTE PTR tv948[rbp]
	mov	BYTE PTR is_wordmove_key_down$51[rbp], al
; Line 4232
	movzx	eax, BYTE PTR is_osx$49[rbp]
	test	eax, eax
	je	SHORT $LN289@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+315]
	test	eax, eax
	je	SHORT $LN289@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	jne	SHORT $LN289@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+314]
	test	eax, eax
	jne	SHORT $LN289@InputTextE
	mov	BYTE PTR tv960[rbp], 1
	jmp	SHORT $LN290@InputTextE
$LN289@InputTextE:
	mov	BYTE PTR tv960[rbp], 0
$LN290@InputTextE:
	movzx	eax, BYTE PTR tv960[rbp]
	mov	BYTE PTR is_startend_key_down$52[rbp], al
; Line 4233
	mov	rax, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rax+952], 1
	jne	SHORT $LN291@InputTextE
	mov	BYTE PTR tv963[rbp], 1
	jmp	SHORT $LN292@InputTextE
$LN291@InputTextE:
	mov	BYTE PTR tv963[rbp], 0
$LN292@InputTextE:
	movzx	eax, BYTE PTR tv963[rbp]
	mov	BYTE PTR is_ctrl_key_only$53[rbp], al
; Line 4234
	mov	rax, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rax+952], 2
	jne	SHORT $LN293@InputTextE
	mov	BYTE PTR tv966[rbp], 1
	jmp	SHORT $LN294@InputTextE
$LN293@InputTextE:
	mov	BYTE PTR tv966[rbp], 0
$LN294@InputTextE:
	movzx	eax, BYTE PTR tv966[rbp]
	mov	BYTE PTR is_shift_key_only$54[rbp], al
; Line 4235
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+201]
	test	eax, eax
	je	SHORT $LN299@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rax+952], 8
	jne	SHORT $LN297@InputTextE
	mov	DWORD PTR tv974[rbp], 1
	jmp	SHORT $LN298@InputTextE
$LN297@InputTextE:
	mov	DWORD PTR tv974[rbp], 0
$LN298@InputTextE:
	mov	eax, DWORD PTR tv974[rbp]
	mov	DWORD PTR tv977[rbp], eax
	jmp	SHORT $LN300@InputTextE
$LN299@InputTextE:
	mov	rax, QWORD PTR io$[rbp]
	cmp	DWORD PTR [rax+952], 1
	jne	SHORT $LN295@InputTextE
	mov	DWORD PTR tv973[rbp], 1
	jmp	SHORT $LN296@InputTextE
$LN295@InputTextE:
	mov	DWORD PTR tv973[rbp], 0
$LN296@InputTextE:
	mov	eax, DWORD PTR tv973[rbp]
	mov	DWORD PTR tv977[rbp], eax
$LN300@InputTextE:
	movzx	eax, BYTE PTR tv977[rbp]
	mov	BYTE PTR is_shortcut_key$55[rbp], al
; Line 4237
	movzx	eax, BYTE PTR is_shortcut_key$55[rbp]
	test	eax, eax
	je	SHORT $LN301@InputTextE
	mov	dl, 1
	mov	ecx, 19
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN303@InputTextE
$LN301@InputTextE:
	movzx	eax, BYTE PTR is_shift_key_only$54[rbp]
	test	eax, eax
	je	SHORT $LN302@InputTextE
	mov	dl, 1
	mov	ecx, 10
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN302@InputTextE
$LN303@InputTextE:
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN302@InputTextE
	movzx	eax, BYTE PTR is_password$[rbp]
	test	eax, eax
	jne	SHORT $LN302@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN304@InputTextE
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN302@InputTextE
$LN304@InputTextE:
	mov	BYTE PTR tv1003[rbp], 1
	jmp	SHORT $LN305@InputTextE
$LN302@InputTextE:
	mov	BYTE PTR tv1003[rbp], 0
$LN305@InputTextE:
	movzx	eax, BYTE PTR tv1003[rbp]
	mov	BYTE PTR is_cut$56[rbp], al
; Line 4238
	movzx	eax, BYTE PTR is_shortcut_key$55[rbp]
	test	eax, eax
	je	SHORT $LN306@InputTextE
	mov	dl, 1
	mov	ecx, 17
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN308@InputTextE
$LN306@InputTextE:
	movzx	eax, BYTE PTR is_ctrl_key_only$53[rbp]
	test	eax, eax
	je	SHORT $LN307@InputTextE
	mov	dl, 1
	mov	ecx, 9
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN307@InputTextE
$LN308@InputTextE:
	movzx	eax, BYTE PTR is_password$[rbp]
	test	eax, eax
	jne	SHORT $LN307@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN309@InputTextE
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN307@InputTextE
$LN309@InputTextE:
	mov	BYTE PTR tv1026[rbp], 1
	jmp	SHORT $LN310@InputTextE
$LN307@InputTextE:
	mov	BYTE PTR tv1026[rbp], 0
$LN310@InputTextE:
	movzx	eax, BYTE PTR tv1026[rbp]
	mov	BYTE PTR is_copy$57[rbp], al
; Line 4239
	movzx	eax, BYTE PTR is_shortcut_key$55[rbp]
	test	eax, eax
	je	SHORT $LN311@InputTextE
	mov	dl, 1
	mov	ecx, 18
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN313@InputTextE
$LN311@InputTextE:
	movzx	eax, BYTE PTR is_shift_key_only$54[rbp]
	test	eax, eax
	je	SHORT $LN312@InputTextE
	mov	dl, 1
	mov	ecx, 9
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN312@InputTextE
$LN313@InputTextE:
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN312@InputTextE
	mov	BYTE PTR tv1043[rbp], 1
	jmp	SHORT $LN314@InputTextE
$LN312@InputTextE:
	mov	BYTE PTR tv1043[rbp], 0
$LN314@InputTextE:
	movzx	eax, BYTE PTR tv1043[rbp]
	mov	BYTE PTR is_paste$58[rbp], al
; Line 4240
	movzx	eax, BYTE PTR is_shortcut_key$55[rbp]
	test	eax, eax
	je	SHORT $LN315@InputTextE
	mov	dl, 1
	mov	ecx, 21
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN315@InputTextE
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN315@InputTextE
	movzx	eax, BYTE PTR is_undoable$[rbp]
	test	eax, eax
	je	SHORT $LN315@InputTextE
	mov	BYTE PTR tv1055[rbp], 1
	jmp	SHORT $LN316@InputTextE
$LN315@InputTextE:
	mov	BYTE PTR tv1055[rbp], 0
$LN316@InputTextE:
	movzx	eax, BYTE PTR tv1055[rbp]
	mov	BYTE PTR is_undo$59[rbp], al
; Line 4241
	movzx	eax, BYTE PTR is_shortcut_key$55[rbp]
	test	eax, eax
	je	SHORT $LN317@InputTextE
	mov	dl, 1
	mov	ecx, 20
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN319@InputTextE
$LN317@InputTextE:
	movzx	eax, BYTE PTR is_osx_shift_shortcut$50[rbp]
	test	eax, eax
	je	SHORT $LN318@InputTextE
	mov	dl, 1
	mov	ecx, 21
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN318@InputTextE
$LN319@InputTextE:
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN318@InputTextE
	movzx	eax, BYTE PTR is_undoable$[rbp]
	test	eax, eax
	je	SHORT $LN318@InputTextE
	mov	BYTE PTR tv1074[rbp], 1
	jmp	SHORT $LN320@InputTextE
$LN318@InputTextE:
	mov	BYTE PTR tv1074[rbp], 0
$LN320@InputTextE:
	movzx	eax, BYTE PTR tv1074[rbp]
	mov	BYTE PTR is_redo$60[rbp], al
; Line 4243
	mov	dl, 1
	mov	ecx, 1
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN65@InputTextE
	movzx	eax, BYTE PTR is_startend_key_down$52[rbp]
	test	eax, eax
	je	SHORT $LN323@InputTextE
	mov	DWORD PTR tv1086[rbp], 2097156		; 00200004H
	jmp	SHORT $LN324@InputTextE
$LN323@InputTextE:
	movzx	eax, BYTE PTR is_wordmove_key_down$51[rbp]
	test	eax, eax
	je	SHORT $LN321@InputTextE
	mov	DWORD PTR tv1083[rbp], 2097164		; 0020000cH
	jmp	SHORT $LN322@InputTextE
$LN321@InputTextE:
	mov	DWORD PTR tv1083[rbp], 2097152		; 00200000H
$LN322@InputTextE:
	mov	eax, DWORD PTR tv1083[rbp]
	mov	DWORD PTR tv1086[rbp], eax
$LN324@InputTextE:
	mov	eax, DWORD PTR k_mask$48[rbp]
	mov	ecx, DWORD PTR tv1086[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	jmp	$LN66@InputTextE
$LN65@InputTextE:
; Line 4244
	mov	dl, 1
	mov	ecx, 2
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@InputTextE
	movzx	eax, BYTE PTR is_startend_key_down$52[rbp]
	test	eax, eax
	je	SHORT $LN327@InputTextE
	mov	DWORD PTR tv1100[rbp], 2097157		; 00200005H
	jmp	SHORT $LN328@InputTextE
$LN327@InputTextE:
	movzx	eax, BYTE PTR is_wordmove_key_down$51[rbp]
	test	eax, eax
	je	SHORT $LN325@InputTextE
	mov	DWORD PTR tv1097[rbp], 2097165		; 0020000dH
	jmp	SHORT $LN326@InputTextE
$LN325@InputTextE:
	mov	DWORD PTR tv1097[rbp], 2097153		; 00200001H
$LN326@InputTextE:
	mov	eax, DWORD PTR tv1097[rbp]
	mov	DWORD PTR tv1100[rbp], eax
$LN328@InputTextE:
	mov	eax, DWORD PTR k_mask$48[rbp]
	mov	ecx, DWORD PTR tv1100[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	jmp	$LN66@InputTextE
$LN67@InputTextE:
; Line 4245
	mov	dl, 1
	mov	ecx, 3
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	$LN69@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	$LN69@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN71@InputTextE
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+96]
	subss	xmm0, DWORD PTR [rcx+6528]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR draw_window$[rbp]
	call	?SetScrollY@ImGui@@YAXPEAUImGuiWindow@@M@Z ; ImGui::SetScrollY
	jmp	SHORT $LN72@InputTextE
$LN71@InputTextE:
	movzx	eax, BYTE PTR is_startend_key_down$52[rbp]
	test	eax, eax
	je	SHORT $LN329@InputTextE
	mov	DWORD PTR tv1125[rbp], 2097158		; 00200006H
	jmp	SHORT $LN330@InputTextE
$LN329@InputTextE:
	mov	DWORD PTR tv1125[rbp], 2097154		; 00200002H
$LN330@InputTextE:
	mov	eax, DWORD PTR k_mask$48[rbp]
	mov	ecx, DWORD PTR tv1125[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
$LN72@InputTextE:
	jmp	$LN66@InputTextE
$LN69@InputTextE:
; Line 4246
	mov	dl, 1
	mov	ecx, 4
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	$LN73@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	$LN73@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN75@InputTextE
	call	?GetScrollMaxY@ImGui@@YAMXZ		; ImGui::GetScrollMaxY
	movss	DWORD PTR tv1149[rbp], xmm0
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+96]
	addss	xmm0, DWORD PTR [rcx+6528]
	movss	DWORD PTR tv1147[rbp], xmm0
	movss	xmm1, DWORD PTR tv1149[rbp]
	movss	xmm0, DWORD PTR tv1147[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR draw_window$[rbp]
	call	?SetScrollY@ImGui@@YAXPEAUImGuiWindow@@M@Z ; ImGui::SetScrollY
	jmp	SHORT $LN76@InputTextE
$LN75@InputTextE:
	movzx	eax, BYTE PTR is_startend_key_down$52[rbp]
	test	eax, eax
	je	SHORT $LN331@InputTextE
	mov	DWORD PTR tv1155[rbp], 2097159		; 00200007H
	jmp	SHORT $LN332@InputTextE
$LN331@InputTextE:
	mov	DWORD PTR tv1155[rbp], 2097155		; 00200003H
$LN332@InputTextE:
	mov	eax, DWORD PTR k_mask$48[rbp]
	mov	ecx, DWORD PTR tv1155[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
$LN76@InputTextE:
	jmp	$LN66@InputTextE
$LN73@InputTextE:
; Line 4247
	mov	dl, 1
	mov	ecx, 5
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN77@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN77@InputTextE
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097166				; 0020000eH
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	cvtsi2ss xmm0, DWORD PTR row_count_per_page$47[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+6528]
	movss	xmm1, DWORD PTR scroll_y$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR scroll_y$[rbp], xmm0
	jmp	$LN66@InputTextE
$LN77@InputTextE:
; Line 4248
	mov	dl, 1
	mov	ecx, 6
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN79@InputTextE
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN79@InputTextE
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097167				; 0020000fH
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	cvtsi2ss xmm0, DWORD PTR row_count_per_page$47[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+6528]
	movss	xmm1, DWORD PTR scroll_y$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR scroll_y$[rbp], xmm0
	jmp	$LN66@InputTextE
$LN79@InputTextE:
; Line 4249
	mov	dl, 1
	mov	ecx, 7
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN81@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN333@InputTextE
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097158				; 00200006H
	mov	DWORD PTR tv1197[rbp], eax
	jmp	SHORT $LN334@InputTextE
$LN333@InputTextE:
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097156				; 00200004H
	mov	DWORD PTR tv1197[rbp], eax
$LN334@InputTextE:
	mov	edx, DWORD PTR tv1197[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	jmp	$LN66@InputTextE
$LN81@InputTextE:
; Line 4250
	mov	dl, 1
	mov	ecx, 8
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN83@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN335@InputTextE
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097159				; 00200007H
	mov	DWORD PTR tv1210[rbp], eax
	jmp	SHORT $LN336@InputTextE
$LN335@InputTextE:
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097157				; 00200005H
	mov	DWORD PTR tv1210[rbp], eax
$LN336@InputTextE:
	mov	edx, DWORD PTR tv1210[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	jmp	$LN66@InputTextE
$LN83@InputTextE:
; Line 4251
	mov	dl, 1
	mov	ecx, 10
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN85@InputTextE
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN85@InputTextE
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097160				; 00200008H
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	jmp	$LN66@InputTextE
$LN85@InputTextE:
; Line 4252
	mov	dl, 1
	mov	ecx, 11
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	$LN87@InputTextE
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	$LN87@InputTextE
; Line 4254
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN89@InputTextE
; Line 4256
	movzx	eax, BYTE PTR is_wordmove_key_down$51[rbp]
	test	eax, eax
	je	SHORT $LN90@InputTextE
; Line 4257
	mov	edx, 6291468				; 0060000cH
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
	jmp	SHORT $LN89@InputTextE
$LN90@InputTextE:
; Line 4258
	movzx	eax, BYTE PTR is_osx$49[rbp]
	test	eax, eax
	je	SHORT $LN89@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+315]
	test	eax, eax
	je	SHORT $LN89@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+314]
	test	eax, eax
	jne	SHORT $LN89@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	jne	SHORT $LN89@InputTextE
; Line 4259
	mov	edx, 6291460				; 00600004H
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
$LN89@InputTextE:
; Line 4261
	mov	eax, DWORD PTR k_mask$48[rbp]
	or	eax, 2097161				; 00200009H
	mov	edx, eax
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
; Line 4262
	jmp	$LN66@InputTextE
$LN87@InputTextE:
; Line 4263
	mov	dl, 1
	mov	ecx, 13
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN95@InputTextE
	mov	dl, 1
	mov	ecx, 15
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	$LN93@InputTextE
$LN95@InputTextE:
; Line 4265
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN337@InputTextE
	mov	DWORD PTR tv1265[rbp], 1
	jmp	SHORT $LN338@InputTextE
$LN337@InputTextE:
	mov	DWORD PTR tv1265[rbp], 0
$LN338@InputTextE:
	movzx	eax, BYTE PTR tv1265[rbp]
	mov	BYTE PTR ctrl_enter_for_new_line$61[rbp], al
; Line 4266
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN98@InputTextE
	movzx	eax, BYTE PTR ctrl_enter_for_new_line$61[rbp]
	test	eax, eax
	je	SHORT $LN99@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN98@InputTextE
$LN99@InputTextE:
	movzx	eax, BYTE PTR ctrl_enter_for_new_line$61[rbp]
	test	eax, eax
	jne	SHORT $LN96@InputTextE
	mov	rax, QWORD PTR io$[rbp]
	movzx	eax, BYTE PTR [rax+312]
	test	eax, eax
	je	SHORT $LN96@InputTextE
$LN98@InputTextE:
; Line 4268
	mov	BYTE PTR clear_active_id$[rbp], 1
	movzx	eax, BYTE PTR clear_active_id$[rbp]
	mov	BYTE PTR enter_pressed$[rbp], al
; Line 4269
	jmp	SHORT $LN97@InputTextE
$LN96@InputTextE:
; Line 4270
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN97@InputTextE
; Line 4272
	mov	DWORD PTR c$62[rbp], 10
; Line 4273
	mov	DWORD PTR [rsp+32], 2
	mov	r9, QWORD PTR callback_user_data$[rbp]
	mov	r8, QWORD PTR callback$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	lea	rcx, QWORD PTR c$62[rbp]
	call	?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z ; InputTextFilterCharacter
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN97@InputTextE
; Line 4274
	mov	edx, DWORD PTR c$62[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
$LN97@InputTextE:
; Line 4276
	jmp	$LN66@InputTextE
$LN93@InputTextE:
; Line 4277
	mov	dl, 1
	mov	ecx, 14
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN102@InputTextE
; Line 4279
	mov	BYTE PTR cancel_edit$[rbp], 1
	movzx	eax, BYTE PTR cancel_edit$[rbp]
	mov	BYTE PTR clear_active_id$[rbp], al
; Line 4280
	jmp	$LN66@InputTextE
$LN102@InputTextE:
; Line 4281
	movzx	eax, BYTE PTR is_undo$59[rbp]
	test	eax, eax
	jne	SHORT $LN106@InputTextE
	movzx	eax, BYTE PTR is_redo$60[rbp]
	test	eax, eax
	je	SHORT $LN104@InputTextE
$LN106@InputTextE:
; Line 4283
	movzx	eax, BYTE PTR is_undo$59[rbp]
	test	eax, eax
	je	SHORT $LN339@InputTextE
	mov	DWORD PTR tv1303[rbp], 2097162		; 0020000aH
	jmp	SHORT $LN340@InputTextE
$LN339@InputTextE:
	mov	DWORD PTR tv1303[rbp], 2097163		; 0020000bH
$LN340@InputTextE:
	mov	edx, DWORD PTR tv1303[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	call	?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ; ImGuiInputTextState::OnKeyPressed
; Line 4284
	mov	rcx, QWORD PTR state$[rbp]
	call	?ClearSelection@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::ClearSelection
; Line 4285
	jmp	$LN66@InputTextE
$LN104@InputTextE:
; Line 4286
	movzx	eax, BYTE PTR is_shortcut_key$55[rbp]
	test	eax, eax
	je	SHORT $LN107@InputTextE
	mov	dl, 1
	mov	ecx, 16
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN107@InputTextE
; Line 4288
	mov	rcx, QWORD PTR state$[rbp]
	call	?SelectAll@ImGuiInputTextState@@QEAAXXZ	; ImGuiInputTextState::SelectAll
; Line 4289
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3708], 1
; Line 4290
	jmp	$LN66@InputTextE
$LN107@InputTextE:
; Line 4291
	movzx	eax, BYTE PTR is_cut$56[rbp]
	test	eax, eax
	jne	SHORT $LN111@InputTextE
	movzx	eax, BYTE PTR is_copy$57[rbp]
	test	eax, eax
	je	$LN109@InputTextE
$LN111@InputTextE:
; Line 4294
	mov	rax, QWORD PTR io$[rbp]
	cmp	QWORD PTR [rax+256], 0
	je	$LN112@InputTextE
; Line 4296
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN341@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+84]
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rax+80]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	DWORD PTR tv1332[rbp], eax
	jmp	SHORT $LN342@InputTextE
$LN341@InputTextE:
	mov	DWORD PTR tv1332[rbp], 0
$LN342@InputTextE:
	mov	eax, DWORD PTR tv1332[rbp]
	mov	DWORD PTR ib$63[rbp], eax
; Line 4297
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN343@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+84]
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rax+80]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR tv1377[rbp], eax
	jmp	SHORT $LN344@InputTextE
$LN343@InputTextE:
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv1377[rbp], eax
$LN344@InputTextE:
	mov	eax, DWORD PTR tv1377[rbp]
	mov	DWORD PTR ie$64[rbp], eax
; Line 4298
	movsxd	rax, DWORD PTR ie$64[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR ib$63[rbp]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rdx, QWORD PTR [rdx+24]
	lea	rcx, QWORD PTR [rdx+rcx*2]
	mov	rdx, rax
	call	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z ; ImTextCountUtf8BytesFromStr
	inc	eax
	mov	DWORD PTR clipboard_data_len$65[rbp], eax
; Line 4299
	movsxd	rax, DWORD PTR clipboard_data_len$65[rbp]
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR clipboard_data$66[rbp], rax
; Line 4300
	movsxd	rax, DWORD PTR ie$64[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR ib$63[rbp]
	mov	rdx, QWORD PTR state$[rbp]
	mov	rdx, QWORD PTR [rdx+24]
	lea	rcx, QWORD PTR [rdx+rcx*2]
	mov	r9, rax
	mov	r8, rcx
	mov	edx, DWORD PTR clipboard_data_len$65[rbp]
	mov	rcx, QWORD PTR clipboard_data$66[rbp]
	call	?ImTextStrToUtf8@@YAHPEADHPEBG1@Z	; ImTextStrToUtf8
; Line 4301
	mov	rcx, QWORD PTR clipboard_data$66[rbp]
	call	?SetClipboardText@ImGui@@YAXPEBD@Z	; ImGui::SetClipboardText
; Line 4302
	mov	rcx, QWORD PTR clipboard_data$66[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN112@InputTextE:
; Line 4304
	movzx	eax, BYTE PTR is_cut$56[rbp]
	test	eax, eax
	je	SHORT $LN113@InputTextE
; Line 4306
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN114@InputTextE
; Line 4307
	mov	rcx, QWORD PTR state$[rbp]
	call	?SelectAll@ImGuiInputTextState@@QEAAXXZ	; ImGuiInputTextState::SelectAll
$LN114@InputTextE:
; Line 4308
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3708], 1
; Line 4309
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 76					; 0000004cH
	mov	rdx, rax
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_cut@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@@Z ; ImStb::stb_textedit_cut
$LN113@InputTextE:
; Line 4311
	jmp	$LN66@InputTextE
$LN109@InputTextE:
; Line 4312
	movzx	eax, BYTE PTR is_paste$58[rbp]
	test	eax, eax
	je	$LN66@InputTextE
; Line 4314
	call	?GetClipboardText@ImGui@@YAPEBDXZ	; ImGui::GetClipboardText
	mov	QWORD PTR clipboard$67[rbp], rax
	cmp	QWORD PTR clipboard$67[rbp], 0
	je	$LN66@InputTextE
; Line 4317
	mov	rax, QWORD PTR clipboard$67[rbp]
	mov	QWORD PTR tv2663[rbp], rax
	mov	QWORD PTR tv2664[rbp], -1
$LL400@InputTextE:
	inc	QWORD PTR tv2664[rbp]
	mov	rax, QWORD PTR tv2663[rbp]
	mov	rcx, QWORD PTR tv2664[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL400@InputTextE
	mov	rax, QWORD PTR tv2664[rbp]
	mov	DWORD PTR clipboard_len$68[rbp], eax
; Line 4318
	mov	eax, DWORD PTR clipboard_len$68[rbp]
	inc	eax
	cdqe
	shl	rax, 1
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR clipboard_filtered$69[rbp], rax
; Line 4319
	mov	DWORD PTR clipboard_filtered_len$70[rbp], 0
; Line 4320
	mov	rax, QWORD PTR clipboard$67[rbp]
	mov	QWORD PTR s$71[rbp], rax
$LN5@InputTextE:
	mov	rax, QWORD PTR s$71[rbp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN6@InputTextE
; Line 4323
	xor	r8d, r8d
	mov	rdx, QWORD PTR s$71[rbp]
	lea	rcx, QWORD PTR c$72[rbp]
	call	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z	; ImTextCharFromUtf8
	cdqe
	mov	rcx, QWORD PTR s$71[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$71[rbp], rax
; Line 4324
	cmp	DWORD PTR c$72[rbp], 0
	jne	SHORT $LN117@InputTextE
; Line 4325
	jmp	SHORT $LN6@InputTextE
$LN117@InputTextE:
; Line 4326
	mov	DWORD PTR [rsp+32], 5
	mov	r9, QWORD PTR callback_user_data$[rbp]
	mov	r8, QWORD PTR callback$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	lea	rcx, QWORD PTR c$72[rbp]
	call	?InputTextFilterCharacter@@YA_NPEAIHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAXW4ImGuiInputSource@@@Z ; InputTextFilterCharacter
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN118@InputTextE
; Line 4327
	jmp	SHORT $LN5@InputTextE
$LN118@InputTextE:
; Line 4328
	movsxd	rax, DWORD PTR clipboard_filtered_len$70[rbp]
	mov	rcx, QWORD PTR clipboard_filtered$69[rbp]
	movzx	edx, WORD PTR c$72[rbp]
	mov	WORD PTR [rcx+rax*2], dx
	mov	eax, DWORD PTR clipboard_filtered_len$70[rbp]
	inc	eax
	mov	DWORD PTR clipboard_filtered_len$70[rbp], eax
; Line 4329
	jmp	$LN5@InputTextE
$LN6@InputTextE:
; Line 4330
	movsxd	rax, DWORD PTR clipboard_filtered_len$70[rbp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR clipboard_filtered$69[rbp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 4331
	cmp	DWORD PTR clipboard_filtered_len$70[rbp], 0
	jle	SHORT $LN119@InputTextE
; Line 4333
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 76					; 0000004cH
	mov	r9d, DWORD PTR clipboard_filtered_len$70[rbp]
	mov	r8, QWORD PTR clipboard_filtered$69[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_paste@ImStb@@YAHPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z ; ImStb::stb_textedit_paste
; Line 4334
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3708], 1
$LN119@InputTextE:
; Line 4336
	mov	rcx, QWORD PTR clipboard_filtered$69[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN66@InputTextE:
; Line 4341
	mov	rcx, QWORD PTR state$[rbp]
	call	?HasSelection@ImGuiInputTextState@@QEBA_NXZ ; ImGuiInputTextState::HasSelection
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN346@InputTextE
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN345@InputTextE
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	je	SHORT $LN346@InputTextE
$LN345@InputTextE:
	mov	DWORD PTR tv1474[rbp], 1
	jmp	SHORT $LN347@InputTextE
$LN346@InputTextE:
	mov	DWORD PTR tv1474[rbp], 0
$LN347@InputTextE:
	movzx	eax, BYTE PTR render_selection$[rbp]
	or	eax, DWORD PTR tv1474[rbp]
	mov	BYTE PTR render_selection$[rbp], al
$LN64@InputTextE:
; Line 4345
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN120@InputTextE
; Line 4347
	cmp	QWORD PTR state$[rbp], 0
	jne	SHORT $LN348@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 411				; 0000019bH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN348@InputTextE:
; Line 4348
	mov	QWORD PTR apply_new_text$73[rbp], 0
; Line 4349
	mov	DWORD PTR apply_new_text_length$74[rbp], 0
; Line 4350
	movzx	eax, BYTE PTR cancel_edit$[rbp]
	test	eax, eax
	je	$LN121@InputTextE
; Line 4353
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	$LN121@InputTextE
	mov	rax, QWORD PTR buf$[rbp]
	mov	rcx, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	sub	rcx, rax
$LL397@InputTextE:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+rcx]
	jne	SHORT $LN399@InputTextE
	inc	rax
	test	dl, dl
	jne	SHORT $LL397@InputTextE
	xor	eax, eax
	jmp	SHORT $LN398@InputTextE
$LN399@InputTextE:
	sbb	eax, eax
	or	eax, 1
$LN398@InputTextE:
	test	eax, eax
	je	$LN121@InputTextE
; Line 4356
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR apply_new_text$73[rbp], rax
; Line 4357
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+48]
	dec	eax
	mov	DWORD PTR apply_new_text_length$74[rbp], eax
; Line 4358
	lea	rcx, QWORD PTR w_text$75[rbp]
	call	??0?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::ImVector<unsigned short>
	npad	1
; Line 4359
	cmp	DWORD PTR apply_new_text_length$74[rbp], 0
	jle	SHORT $LN123@InputTextE
; Line 4361
	movsxd	rax, DWORD PTR apply_new_text_length$74[rbp]
	mov	rcx, QWORD PTR apply_new_text$73[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR apply_new_text$73[rbp]
	call	?ImTextCountCharsFromUtf8@@YAHPEBD0@Z	; ImTextCountCharsFromUtf8
	inc	eax
	mov	edx, eax
	lea	rcx, QWORD PTR w_text$75[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 4362
	movsxd	rax, DWORD PTR apply_new_text_length$74[rbp]
	mov	rcx, QWORD PTR apply_new_text$73[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR [rsp+32], 0
	mov	r9, rax
	mov	r8, QWORD PTR apply_new_text$73[rbp]
	mov	edx, DWORD PTR w_text$75[rbp]
	mov	rcx, QWORD PTR w_text$75[rbp+8]
	call	?ImTextStrFromUtf8@@YAHPEAGHPEBD1PEAPEBD@Z ; ImTextStrFromUtf8
$LN123@InputTextE:
; Line 4364
	cmp	DWORD PTR apply_new_text_length$74[rbp], 0
	jle	SHORT $LN349@InputTextE
	mov	eax, DWORD PTR w_text$75[rbp]
	dec	eax
	mov	DWORD PTR tv1521[rbp], eax
	jmp	SHORT $LN350@InputTextE
$LN349@InputTextE:
	mov	DWORD PTR tv1521[rbp], 0
$LN350@InputTextE:
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 76					; 0000004cH
	mov	r9d, DWORD PTR tv1521[rbp]
	mov	r8, QWORD PTR w_text$75[rbp+8]
	mov	rdx, rax
	mov	rcx, QWORD PTR state$[rbp]
	call	?stb_textedit_replace@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@PEBGH@Z ; ImStb::stb_textedit_replace
	npad	1
; Line 4365
	lea	rcx, QWORD PTR w_text$75[rbp]
	call	??1?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::~ImVector<unsigned short>
$LN121@InputTextE:
; Line 4371
	movzx	eax, BYTE PTR cancel_edit$[rbp]
	test	eax, eax
	je	SHORT $LN352@InputTextE
	movzx	eax, BYTE PTR enter_pressed$[rbp]
	test	eax, eax
	je	SHORT $LN351@InputTextE
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN352@InputTextE
$LN351@InputTextE:
	mov	DWORD PTR tv1533[rbp], 0
	jmp	SHORT $LN353@InputTextE
$LN352@InputTextE:
	mov	DWORD PTR tv1533[rbp], 1
$LN353@InputTextE:
	movzx	eax, BYTE PTR tv1533[rbp]
	mov	BYTE PTR apply_edit_back_to_user_buffer$76[rbp], al
; Line 4372
	movzx	eax, BYTE PTR apply_edit_back_to_user_buffer$76[rbp]
	test	eax, eax
	je	$LN124@InputTextE
; Line 4378
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN125@InputTextE
; Line 4380
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+64], 1
; Line 4381
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv1548[rbp], rax
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+16]
	lea	eax, DWORD PTR [rax*4+1]
	mov	edx, eax
	mov	rcx, QWORD PTR tv1548[rbp]
	call	?resize@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::resize
; Line 4382
	xor	r9d, r9d
	mov	rax, QWORD PTR state$[rbp]
	mov	r8, QWORD PTR [rax+24]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+32]
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rax+40]
	call	?ImTextStrToUtf8@@YAHPEADHPEBG1@Z	; ImTextStrToUtf8
$LN125@InputTextE:
; Line 4386
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 524736				; 000801c0H
	test	eax, eax
	je	$LN126@InputTextE
; Line 4388
	cmp	QWORD PTR callback$[rbp], 0
	jne	SHORT $LN354@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 452				; 000001c4H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BM@CBGPMFEC@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN354@InputTextE:
; Line 4391
	mov	DWORD PTR event_flag$77[rbp], 0
; Line 4392
	mov	DWORD PTR event_key$78[rbp], 22
; Line 4393
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN127@InputTextE
	mov	dl, 1
	xor	ecx, ecx
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN127@InputTextE
; Line 4395
	mov	DWORD PTR event_flag$77[rbp], 64	; 00000040H
; Line 4396
	mov	DWORD PTR event_key$78[rbp], 0
; Line 4397
	jmp	$LN128@InputTextE
$LN127@InputTextE:
; Line 4398
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN129@InputTextE
	mov	dl, 1
	mov	ecx, 3
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN129@InputTextE
; Line 4400
	mov	DWORD PTR event_flag$77[rbp], 128	; 00000080H
; Line 4401
	mov	DWORD PTR event_key$78[rbp], 3
; Line 4402
	jmp	SHORT $LN128@InputTextE
$LN129@InputTextE:
; Line 4403
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN131@InputTextE
	mov	dl, 1
	mov	ecx, 4
	call	?IsKeyPressedMap@ImGui@@YA_NH_N@Z	; ImGui::IsKeyPressedMap
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN131@InputTextE
; Line 4405
	mov	DWORD PTR event_flag$77[rbp], 128	; 00000080H
; Line 4406
	mov	DWORD PTR event_key$78[rbp], 4
; Line 4407
	jmp	SHORT $LN128@InputTextE
$LN131@InputTextE:
; Line 4408
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 524288				; 00080000H
	test	eax, eax
	je	SHORT $LN133@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+3710]
	test	eax, eax
	je	SHORT $LN133@InputTextE
; Line 4410
	mov	DWORD PTR event_flag$77[rbp], 524288	; 00080000H
; Line 4411
	jmp	SHORT $LN128@InputTextE
$LN133@InputTextE:
; Line 4412
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN128@InputTextE
; Line 4414
	mov	DWORD PTR event_flag$77[rbp], 256	; 00000100H
$LN128@InputTextE:
; Line 4417
	cmp	DWORD PTR event_flag$77[rbp], 0
	je	$LN126@InputTextE
; Line 4419
	lea	rcx, QWORD PTR callback_data$79[rbp]
	call	??0ImGuiInputTextCallbackData@@QEAA@XZ	; ImGuiInputTextCallbackData::ImGuiInputTextCallbackData
; Line 4420
	lea	rax, QWORD PTR callback_data$79[rbp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 56					; 00000038H
	rep stosb
; Line 4421
	mov	eax, DWORD PTR event_flag$77[rbp]
	mov	DWORD PTR callback_data$79[rbp], eax
; Line 4422
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR callback_data$79[rbp+4], eax
; Line 4423
	mov	rax, QWORD PTR callback_user_data$[rbp]
	mov	QWORD PTR callback_data$79[rbp+8], rax
; Line 4425
	mov	eax, DWORD PTR event_key$78[rbp]
	mov	DWORD PTR callback_data$79[rbp+20], eax
; Line 4426
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR callback_data$79[rbp+24], rax
; Line 4427
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR callback_data$79[rbp+32], eax
; Line 4428
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+68]
	mov	DWORD PTR callback_data$79[rbp+36], eax
; Line 4429
	mov	BYTE PTR callback_data$79[rbp+40], 0
; Line 4432
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR text$80[rbp], rax
; Line 4433
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+76]
	mov	rcx, QWORD PTR text$80[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rdx, rax
	mov	rcx, QWORD PTR text$80[rbp]
	call	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z ; ImTextCountUtf8BytesFromStr
	mov	DWORD PTR callback_data$79[rbp+44], eax
	mov	eax, DWORD PTR callback_data$79[rbp+44]
	mov	DWORD PTR utf8_cursor_pos$81[rbp], eax
; Line 4434
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR text$80[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rdx, rax
	mov	rcx, QWORD PTR text$80[rbp]
	call	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z ; ImTextCountUtf8BytesFromStr
	mov	DWORD PTR callback_data$79[rbp+48], eax
	mov	eax, DWORD PTR callback_data$79[rbp+48]
	mov	DWORD PTR utf8_selection_start$82[rbp], eax
; Line 4435
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+84]
	mov	rcx, QWORD PTR text$80[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rdx, rax
	mov	rcx, QWORD PTR text$80[rbp]
	call	?ImTextCountUtf8BytesFromStr@@YAHPEBG0@Z ; ImTextCountUtf8BytesFromStr
	mov	DWORD PTR callback_data$79[rbp+52], eax
	mov	eax, DWORD PTR callback_data$79[rbp+52]
	mov	DWORD PTR utf8_selection_end$83[rbp], eax
; Line 4438
	mov	rax, QWORD PTR callback$[rbp]
	mov	QWORD PTR tv1666[rbp], rax
	lea	rcx, QWORD PTR callback_data$79[rbp]
	call	QWORD PTR tv1666[rbp]
; Line 4441
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+40]
	cmp	QWORD PTR callback_data$79[rbp+24], rax
	je	SHORT $LN355@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 505				; 000001f9H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EO@GEAEFBFI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN355@InputTextE:
; Line 4442
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+68]
	cmp	DWORD PTR callback_data$79[rbp+36], eax
	je	SHORT $LN356@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 506				; 000001faH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FK@GDPCIOA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN356@InputTextE:
; Line 4443
	mov	eax, DWORD PTR flags$[rbp]
	cmp	DWORD PTR callback_data$79[rbp+4], eax
	je	SHORT $LN357@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 507				; 000001fbH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@HOPDKFNI@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAF@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN357@InputTextE:
; Line 4444
	movzx	eax, BYTE PTR callback_data$79[rbp+40]
	mov	BYTE PTR buf_dirty$84[rbp], al
; Line 4445
	mov	eax, DWORD PTR utf8_cursor_pos$81[rbp]
	cmp	DWORD PTR callback_data$79[rbp+44], eax
	jne	SHORT $LN138@InputTextE
	movzx	eax, BYTE PTR buf_dirty$84[rbp]
	test	eax, eax
	je	SHORT $LN137@InputTextE
$LN138@InputTextE:
	movsxd	rax, DWORD PTR callback_data$79[rbp+44]
	mov	rcx, QWORD PTR callback_data$79[rbp+24]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR callback_data$79[rbp+24]
	call	?ImTextCountCharsFromUtf8@@YAHPEBD0@Z	; ImTextCountCharsFromUtf8
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+76], eax
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3708], 1
$LN137@InputTextE:
; Line 4446
	mov	eax, DWORD PTR utf8_selection_start$82[rbp]
	cmp	DWORD PTR callback_data$79[rbp+48], eax
	jne	SHORT $LN140@InputTextE
	movzx	eax, BYTE PTR buf_dirty$84[rbp]
	test	eax, eax
	je	SHORT $LN139@InputTextE
$LN140@InputTextE:
	mov	eax, DWORD PTR callback_data$79[rbp+44]
	cmp	DWORD PTR callback_data$79[rbp+48], eax
	jne	SHORT $LN358@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR tv1711[rbp], eax
	jmp	SHORT $LN359@InputTextE
$LN358@InputTextE:
	movsxd	rax, DWORD PTR callback_data$79[rbp+48]
	mov	rcx, QWORD PTR callback_data$79[rbp+24]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR callback_data$79[rbp+24]
	call	?ImTextCountCharsFromUtf8@@YAHPEBD0@Z	; ImTextCountCharsFromUtf8
	mov	DWORD PTR tv1711[rbp], eax
$LN359@InputTextE:
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR tv1711[rbp]
	mov	DWORD PTR [rax+80], ecx
$LN139@InputTextE:
; Line 4447
	mov	eax, DWORD PTR utf8_selection_end$83[rbp]
	cmp	DWORD PTR callback_data$79[rbp+52], eax
	jne	SHORT $LN142@InputTextE
	movzx	eax, BYTE PTR buf_dirty$84[rbp]
	test	eax, eax
	je	SHORT $LN141@InputTextE
$LN142@InputTextE:
	mov	eax, DWORD PTR callback_data$79[rbp+48]
	cmp	DWORD PTR callback_data$79[rbp+52], eax
	jne	SHORT $LN360@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR tv1725[rbp], eax
	jmp	SHORT $LN361@InputTextE
$LN360@InputTextE:
	movsxd	rax, DWORD PTR callback_data$79[rbp+52]
	mov	rcx, QWORD PTR callback_data$79[rbp+24]
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	mov	rcx, QWORD PTR callback_data$79[rbp+24]
	call	?ImTextCountCharsFromUtf8@@YAHPEBD0@Z	; ImTextCountCharsFromUtf8
	mov	DWORD PTR tv1725[rbp], eax
$LN361@InputTextE:
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR tv1725[rbp]
	mov	DWORD PTR [rax+84], ecx
$LN141@InputTextE:
; Line 4448
	movzx	eax, BYTE PTR buf_dirty$84[rbp]
	test	eax, eax
	je	$LN126@InputTextE
; Line 4450
	mov	rax, QWORD PTR callback_data$79[rbp+24]
	mov	QWORD PTR tv2621[rbp], rax
	mov	QWORD PTR tv2622[rbp], -1
$LL396@InputTextE:
	inc	QWORD PTR tv2622[rbp]
	mov	rax, QWORD PTR tv2621[rbp]
	mov	rcx, QWORD PTR tv2622[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL396@InputTextE
	mov	rax, QWORD PTR tv2622[rbp]
	cmp	DWORD PTR callback_data$79[rbp+32], eax
	je	SHORT $LN362@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 514				; 00000202H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HG@EHLBBEIB@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?4?$AAB@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN362@InputTextE:
; Line 4451
	mov	eax, DWORD PTR backup_current_text_length$[rbp]
	cmp	DWORD PTR callback_data$79[rbp+32], eax
	jle	SHORT $LN144@InputTextE
	movzx	eax, BYTE PTR is_resizable$[rbp]
	test	eax, eax
	je	SHORT $LN144@InputTextE
; Line 4452
	mov	rax, QWORD PTR state$[rbp]
	add	rax, 16
	mov	QWORD PTR tv1748[rbp], rax
	mov	eax, DWORD PTR backup_current_text_length$[rbp]
	mov	ecx, DWORD PTR callback_data$79[rbp+32]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR state$[rbp]
	add	eax, DWORD PTR [rcx+16]
	mov	edx, eax
	mov	rcx, QWORD PTR tv1748[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
$LN144@InputTextE:
; Line 4453
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR callback_data$79[rbp+24]
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR [rax+24]
	call	?ImTextStrFromUtf8@@YAHPEAGHPEBD1PEAPEBD@Z ; ImTextStrFromUtf8
	mov	rcx, QWORD PTR state$[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 4454
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR callback_data$79[rbp+32]
	mov	DWORD PTR [rax+8], ecx
; Line 4455
	mov	rcx, QWORD PTR state$[rbp]
	call	?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorAnimReset
$LN126@InputTextE:
; Line 4461
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN124@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR buf$[rbp]
	sub	rcx, rax
$LL393@InputTextE:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+rcx]
	jne	SHORT $LN395@InputTextE
	inc	rax
	test	dl, dl
	jne	SHORT $LL393@InputTextE
	xor	eax, eax
	jmp	SHORT $LN394@InputTextE
$LN395@InputTextE:
	sbb	eax, eax
	or	eax, 1
$LN394@InputTextE:
	test	eax, eax
	je	SHORT $LN124@InputTextE
; Line 4463
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR apply_new_text$73[rbp], rax
; Line 4464
	mov	rax, QWORD PTR state$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR apply_new_text_length$74[rbp], eax
$LN124@InputTextE:
; Line 4469
	cmp	QWORD PTR apply_new_text$73[rbp], 0
	je	$LN146@InputTextE
; Line 4474
	cmp	DWORD PTR apply_new_text_length$74[rbp], 0
	jge	SHORT $LN363@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 538				; 0000021aH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@CHDFECEK@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN363@InputTextE:
; Line 4475
	movzx	eax, BYTE PTR is_resizable$[rbp]
	test	eax, eax
	je	$LN147@InputTextE
; Line 4477
	lea	rcx, QWORD PTR callback_data$85[rbp]
	call	??0ImGuiInputTextCallbackData@@QEAA@XZ	; ImGuiInputTextCallbackData::ImGuiInputTextCallbackData
; Line 4478
	mov	DWORD PTR callback_data$85[rbp], 262144	; 00040000H
; Line 4479
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR callback_data$85[rbp+4], eax
; Line 4480
	mov	rax, QWORD PTR buf$[rbp]
	mov	QWORD PTR callback_data$85[rbp+24], rax
; Line 4481
	mov	eax, DWORD PTR apply_new_text_length$74[rbp]
	mov	DWORD PTR callback_data$85[rbp+32], eax
; Line 4482
	mov	eax, DWORD PTR apply_new_text_length$74[rbp]
	inc	eax
	mov	edx, eax
	mov	ecx, DWORD PTR buf_size$[rbp]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR callback_data$85[rbp+36], eax
; Line 4483
	mov	rax, QWORD PTR callback_user_data$[rbp]
	mov	QWORD PTR callback_data$85[rbp+8], rax
; Line 4484
	mov	rax, QWORD PTR callback$[rbp]
	mov	QWORD PTR tv1790[rbp], rax
	lea	rcx, QWORD PTR callback_data$85[rbp]
	call	QWORD PTR tv1790[rbp]
; Line 4485
	mov	rax, QWORD PTR callback_data$85[rbp+24]
	mov	QWORD PTR buf$[rbp], rax
; Line 4486
	mov	eax, DWORD PTR callback_data$85[rbp+36]
	mov	DWORD PTR buf_size$[rbp], eax
; Line 4487
	mov	eax, DWORD PTR buf_size$[rbp]
	dec	eax
	mov	edx, eax
	mov	ecx, DWORD PTR callback_data$85[rbp+32]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	DWORD PTR apply_new_text_length$74[rbp], eax
; Line 4488
	mov	eax, DWORD PTR buf_size$[rbp]
	cmp	DWORD PTR apply_new_text_length$74[rbp], eax
	jle	SHORT $LN147@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 552				; 00000228H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EE@MOOHJKEO@?$AAa?$AAp?$AAp?$AAl?$AAy?$AA_?$AAn?$AAe?$AAw?$AA_?$AAt?$AAe?$AAx?$AAt?$AA_@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN147@InputTextE:
; Line 4493
	mov	eax, DWORD PTR apply_new_text_length$74[rbp]
	inc	eax
	mov	edx, DWORD PTR buf_size$[rbp]
	mov	ecx, eax
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR apply_new_text$73[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImStrncpy@@YAXPEADPEBD_K@Z		; ImStrncpy
; Line 4494
	mov	BYTE PTR value_changed$[rbp], 1
$LN146@InputTextE:
; Line 4498
	mov	rax, QWORD PTR state$[rbp]
	mov	DWORD PTR [rax+3712], 0
; Line 4499
	mov	rax, QWORD PTR state$[rbp]
	mov	QWORD PTR [rax+3720], 0
; Line 4500
	mov	rax, QWORD PTR state$[rbp]
	mov	QWORD PTR [rax+3728], 0
$LN120@InputTextE:
; Line 4504
	movzx	eax, BYTE PTR clear_active_id$[rbp]
	test	eax, eax
	je	SHORT $LN148@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN148@InputTextE
; Line 4505
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN148@InputTextE:
; Line 4508
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN149@InputTextE
; Line 4510
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 4511
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv1832[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 7
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv1830[rbp], eax
	movss	xmm0, DWORD PTR tv1832[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR tv1830[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
$LN149@InputTextE:
; Line 4514
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR inner_size$[rbp+4]
	movss	xmm1, DWORD PTR frame_bb$[rbp]
	addss	xmm1, DWORD PTR inner_size$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR frame_bb$[rbp+4]
	movss	xmm1, DWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR clip_rect$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 4515
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN365@InputTextE
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR $T119[rbp], rax
	lea	rax, QWORD PTR $T119[rbp]
	mov	QWORD PTR tv1850[rbp], rax
	jmp	SHORT $LN366@InputTextE
$LN365@InputTextE:
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR $T120[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv1850[rbp], rax
$LN366@InputTextE:
	mov	rax, QWORD PTR tv1850[rbp]
	mov	QWORD PTR $T118[rbp], rax
	mov	rax, QWORD PTR $T118[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR draw_pos$[rbp], rax
; Line 4516
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR text_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 4521
	mov	DWORD PTR buf_display_max_length$[rbp], 2097152 ; 00200000H
; Line 4522
	movzx	eax, BYTE PTR buf_display_from_state$[rbp]
	test	eax, eax
	je	SHORT $LN367@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv1891[rbp], rax
	jmp	SHORT $LN368@InputTextE
$LN367@InputTextE:
	mov	rax, QWORD PTR buf$[rbp]
	mov	QWORD PTR tv1891[rbp], rax
$LN368@InputTextE:
	mov	rax, QWORD PTR tv1891[rbp]
	mov	QWORD PTR buf_display$[rbp], rax
; Line 4523
	mov	QWORD PTR buf_display_end$[rbp], 0
; Line 4524
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	je	SHORT $LN150@InputTextE
; Line 4526
	mov	rax, QWORD PTR hint$[rbp]
	mov	QWORD PTR buf_display$[rbp], rax
; Line 4527
	mov	rax, QWORD PTR hint$[rbp]
	mov	QWORD PTR tv2593[rbp], rax
	mov	QWORD PTR tv2594[rbp], -1
$LL392@InputTextE:
	inc	QWORD PTR tv2594[rbp]
	mov	rax, QWORD PTR tv2593[rbp]
	mov	rcx, QWORD PTR tv2594[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL392@InputTextE
	mov	rax, QWORD PTR tv2594[rbp]
	mov	rcx, QWORD PTR hint$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf_display_end$[rbp], rax
$LN150@InputTextE:
; Line 4532
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	jne	SHORT $LN153@InputTextE
	movzx	eax, BYTE PTR render_selection$[rbp]
	test	eax, eax
	je	$LN151@InputTextE
$LN153@InputTextE:
; Line 4534
	cmp	QWORD PTR state$[rbp], 0
	jne	SHORT $LN369@InputTextE
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	add	eax, 598				; 00000256H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@FOPGMADN@?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN369@InputTextE:
; Line 4535
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	jne	SHORT $LN154@InputTextE
; Line 4536
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR buf_display$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf_display_end$[rbp], rax
$LN154@InputTextE:
; Line 4545
	mov	rax, QWORD PTR state$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR text_begin$86[rbp], rax
; Line 4546
	lea	rcx, QWORD PTR cursor_offset$87[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	lea	rcx, QWORD PTR select_start_offset$88[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
; Line 4550
	mov	QWORD PTR searches_input_ptr$89[rbp], 0
	mov	QWORD PTR searches_input_ptr$89[rbp+8], 0
; Line 4551
	mov	DWORD PTR searches_result_line_no$90[rbp], -1000 ; fffffffffffffc18H
	mov	DWORD PTR searches_result_line_no$90[rbp+4], -1000 ; fffffffffffffc18H
; Line 4552
	mov	DWORD PTR searches_remaining$91[rbp], 0
; Line 4553
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	je	SHORT $LN155@InputTextE
; Line 4555
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+76]
	mov	rcx, QWORD PTR text_begin$86[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	QWORD PTR searches_input_ptr$89[rbp+rcx], rax
; Line 4556
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR searches_result_line_no$90[rbp+rax], -1
; Line 4557
	mov	eax, DWORD PTR searches_remaining$91[rbp]
	inc	eax
	mov	DWORD PTR searches_remaining$91[rbp], eax
$LN155@InputTextE:
; Line 4559
	movzx	eax, BYTE PTR render_selection$[rbp]
	test	eax, eax
	je	SHORT $LN156@InputTextE
; Line 4561
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+84]
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rax+80]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	cdqe
	mov	rcx, QWORD PTR text_begin$86[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	QWORD PTR searches_input_ptr$89[rbp+rcx], rax
; Line 4562
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR searches_result_line_no$90[rbp+rax], -1
; Line 4563
	mov	eax, DWORD PTR searches_remaining$91[rbp]
	inc	eax
	mov	DWORD PTR searches_remaining$91[rbp], eax
$LN156@InputTextE:
; Line 4568
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN370@InputTextE
	mov	DWORD PTR tv1947[rbp], 1
	jmp	SHORT $LN371@InputTextE
$LN370@InputTextE:
	mov	DWORD PTR tv1947[rbp], 0
$LN371@InputTextE:
	mov	eax, DWORD PTR tv1947[rbp]
	mov	ecx, DWORD PTR searches_remaining$91[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR searches_remaining$91[rbp], eax
; Line 4569
	mov	DWORD PTR line_count$92[rbp], 0
; Line 4571
	mov	rax, QWORD PTR text_begin$86[rbp]
	mov	QWORD PTR s$93[rbp], rax
	jmp	SHORT $LN10@InputTextE
$LN8@InputTextE:
	mov	rax, QWORD PTR s$93[rbp]
	add	rax, 2
	mov	QWORD PTR s$93[rbp], rax
$LN10@InputTextE:
	mov	rax, QWORD PTR s$93[rbp]
	movzx	eax, WORD PTR [rax]
	test	eax, eax
	je	$LN9@InputTextE
; Line 4572
	mov	rax, QWORD PTR s$93[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 10
	jne	$LN157@InputTextE
; Line 4574
	mov	eax, DWORD PTR line_count$92[rbp]
	inc	eax
	mov	DWORD PTR line_count$92[rbp], eax
; Line 4575
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR searches_result_line_no$90[rbp+rax], -1
	jne	SHORT $LN158@InputTextE
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR searches_input_ptr$89[rbp+rax]
	cmp	QWORD PTR s$93[rbp], rax
	jb	SHORT $LN158@InputTextE
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR line_count$92[rbp]
	mov	DWORD PTR searches_result_line_no$90[rbp+rax], ecx
	mov	eax, DWORD PTR searches_remaining$91[rbp]
	dec	eax
	mov	DWORD PTR searches_remaining$91[rbp], eax
	cmp	DWORD PTR searches_remaining$91[rbp], 0
	jg	SHORT $LN158@InputTextE
	jmp	SHORT $LN9@InputTextE
$LN158@InputTextE:
; Line 4576
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR searches_result_line_no$90[rbp+rax], -1
	jne	SHORT $LN157@InputTextE
	mov	eax, 8
	imul	rax, rax, 1
	mov	rax, QWORD PTR searches_input_ptr$89[rbp+rax]
	cmp	QWORD PTR s$93[rbp], rax
	jb	SHORT $LN157@InputTextE
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR line_count$92[rbp]
	mov	DWORD PTR searches_result_line_no$90[rbp+rax], ecx
	mov	eax, DWORD PTR searches_remaining$91[rbp]
	dec	eax
	mov	DWORD PTR searches_remaining$91[rbp], eax
	cmp	DWORD PTR searches_remaining$91[rbp], 0
	jg	SHORT $LN157@InputTextE
	jmp	SHORT $LN9@InputTextE
$LN157@InputTextE:
; Line 4577
	jmp	$LN8@InputTextE
$LN9@InputTextE:
; Line 4578
	mov	eax, DWORD PTR line_count$92[rbp]
	inc	eax
	mov	DWORD PTR line_count$92[rbp], eax
; Line 4579
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR searches_result_line_no$90[rbp+rax], -1
	jne	SHORT $LN162@InputTextE
; Line 4580
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR line_count$92[rbp]
	mov	DWORD PTR searches_result_line_no$90[rbp+rax], ecx
$LN162@InputTextE:
; Line 4581
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR searches_result_line_no$90[rbp+rax], -1
	jne	SHORT $LN163@InputTextE
; Line 4582
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, DWORD PTR line_count$92[rbp]
	mov	DWORD PTR searches_result_line_no$90[rbp+rax], ecx
$LN163@InputTextE:
; Line 4585
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR searches_input_ptr$89[rbp+rax]
	mov	QWORD PTR tv2003[rbp], rax
	mov	eax, 8
	imul	rax, rax, 0
	mov	rdx, QWORD PTR text_begin$86[rbp]
	mov	rcx, QWORD PTR searches_input_ptr$89[rbp+rax]
	call	?ImStrbolW@@YAPEBGPEBG0@Z		; ImStrbolW
	mov	QWORD PTR tv2001[rbp], rax
	mov	BYTE PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR tv2003[rbp]
	mov	rdx, QWORD PTR tv2001[rbp]
	lea	rcx, QWORD PTR $T121[rbp]
	call	?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z ; InputTextCalcTextSizeW
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR cursor_offset$87[rbp], xmm0
; Line 4586
	mov	eax, 4
	imul	rax, rax, 0
	cvtsi2ss xmm0, DWORD PTR searches_result_line_no$90[rbp+rax]
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR cursor_offset$87[rbp+4], xmm0
; Line 4587
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR searches_result_line_no$90[rbp+rax], 0
	jl	$LN164@InputTextE
; Line 4589
	mov	eax, 8
	imul	rax, rax, 1
	mov	rax, QWORD PTR searches_input_ptr$89[rbp+rax]
	mov	QWORD PTR tv2030[rbp], rax
	mov	eax, 8
	imul	rax, rax, 1
	mov	rdx, QWORD PTR text_begin$86[rbp]
	mov	rcx, QWORD PTR searches_input_ptr$89[rbp+rax]
	call	?ImStrbolW@@YAPEBGPEBG0@Z		; ImStrbolW
	mov	QWORD PTR tv2028[rbp], rax
	mov	BYTE PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR tv2030[rbp]
	mov	rdx, QWORD PTR tv2028[rbp]
	lea	rcx, QWORD PTR $T122[rbp]
	call	?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z ; InputTextCalcTextSizeW
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR select_start_offset$88[rbp], xmm0
; Line 4590
	mov	eax, 4
	imul	rax, rax, 1
	cvtsi2ss xmm0, DWORD PTR searches_result_line_no$90[rbp+rax]
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR select_start_offset$88[rbp+4], xmm0
$LN164@InputTextE:
; Line 4594
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN165@InputTextE
; Line 4595
	cvtsi2ss xmm0, DWORD PTR line_count$92[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+6528]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR inner_size$[rbp]
	lea	rcx, QWORD PTR $T123[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR text_size$[rbp], rax
$LN165@InputTextE:
; Line 4599
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	je	$LN166@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	movzx	eax, BYTE PTR [rax+3708]
	test	eax, eax
	je	$LN166@InputTextE
; Line 4602
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	$LN167@InputTextE
; Line 4604
	movss	xmm0, DWORD PTR inner_size$[rbp]
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR scroll_increment_x$94[rbp], xmm0
; Line 4605
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR inner_size$[rbp]
	subss	xmm0, DWORD PTR [rax+56]
	movss	DWORD PTR visible_width$95[rbp], xmm0
; Line 4606
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	comiss	xmm0, DWORD PTR cursor_offset$87[rbp]
	jbe	SHORT $LN169@InputTextE
; Line 4607
	movss	xmm0, DWORD PTR cursor_offset$87[rbp]
	subss	xmm0, DWORD PTR scroll_increment_x$94[rbp]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR state$[rbp]
	movss	DWORD PTR [rax+72], xmm0
	jmp	SHORT $LN170@InputTextE
$LN169@InputTextE:
; Line 4608
	movss	xmm0, DWORD PTR cursor_offset$87[rbp]
	subss	xmm0, DWORD PTR visible_width$95[rbp]
	mov	rax, QWORD PTR state$[rbp]
	comiss	xmm0, DWORD PTR [rax+72]
	jb	SHORT $LN170@InputTextE
; Line 4609
	movss	xmm0, DWORD PTR cursor_offset$87[rbp]
	subss	xmm0, DWORD PTR visible_width$95[rbp]
	addss	xmm0, DWORD PTR scroll_increment_x$94[rbp]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR state$[rbp]
	movss	DWORD PTR [rax+72], xmm0
$LN170@InputTextE:
; Line 4610
	jmp	SHORT $LN168@InputTextE
$LN167@InputTextE:
; Line 4613
	mov	rax, QWORD PTR state$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+72], xmm0
$LN168@InputTextE:
; Line 4617
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	$LN172@InputTextE
; Line 4620
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR cursor_offset$87[rbp+4]
	subss	xmm0, DWORD PTR [rax+6528]
	movss	xmm1, DWORD PTR scroll_y$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN173@InputTextE
; Line 4621
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR cursor_offset$87[rbp+4]
	subss	xmm0, DWORD PTR [rax+6528]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR scroll_y$[rbp], xmm0
	jmp	SHORT $LN174@InputTextE
$LN173@InputTextE:
; Line 4622
	movss	xmm0, DWORD PTR cursor_offset$87[rbp+4]
	subss	xmm0, DWORD PTR inner_size$[rbp+4]
	comiss	xmm0, DWORD PTR scroll_y$[rbp]
	jb	SHORT $LN174@InputTextE
; Line 4623
	movss	xmm0, DWORD PTR cursor_offset$87[rbp+4]
	subss	xmm0, DWORD PTR inner_size$[rbp+4]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR scroll_y$[rbp], xmm0
$LN174@InputTextE:
; Line 4624
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR text_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	subss	xmm0, DWORD PTR inner_size$[rbp+4]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR scroll_max_y$96[rbp], xmm0
; Line 4625
	movss	xmm2, DWORD PTR scroll_max_y$96[rbp]
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR scroll_y$[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR scroll_y$[rbp], xmm0
; Line 4626
	mov	rax, QWORD PTR draw_window$[rbp]
	movss	xmm0, DWORD PTR [rax+96]
	subss	xmm0, DWORD PTR scroll_y$[rbp]
	movss	xmm1, DWORD PTR draw_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR draw_pos$[rbp+4], xmm0
; Line 4627
	mov	rax, QWORD PTR draw_window$[rbp]
	movss	xmm0, DWORD PTR scroll_y$[rbp]
	movss	DWORD PTR [rax+96], xmm0
$LN172@InputTextE:
; Line 4630
	mov	rax, QWORD PTR state$[rbp]
	mov	BYTE PTR [rax+3708], 0
$LN166@InputTextE:
; Line 4634
	xorps	xmm2, xmm2
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	lea	rcx, QWORD PTR draw_scroll$97[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 4635
	movzx	eax, BYTE PTR render_selection$[rbp]
	test	eax, eax
	je	$LN176@InputTextE
; Line 4637
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+84]
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rax+80]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	cdqe
	mov	rcx, QWORD PTR text_begin$86[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR text_selected_begin$98[rbp], rax
; Line 4638
	mov	rax, QWORD PTR state$[rbp]
	mov	edx, DWORD PTR [rax+84]
	mov	rax, QWORD PTR state$[rbp]
	mov	ecx, DWORD PTR [rax+80]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	cdqe
	mov	rcx, QWORD PTR text_begin$86[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR text_selected_end$99[rbp], rax
; Line 4640
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	je	SHORT $LN372@InputTextE
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv2175[rbp], xmm0
	jmp	SHORT $LN373@InputTextE
$LN372@InputTextE:
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR tv2175[rbp], xmm0
$LN373@InputTextE:
	movss	xmm1, DWORD PTR tv2175[rbp]
	mov	ecx, 47					; 0000002fH
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_color$100[rbp], eax
; Line 4641
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN374@InputTextE
	xorps	xmm0, xmm0
	movss	DWORD PTR tv2180[rbp], xmm0
	jmp	SHORT $LN375@InputTextE
$LN374@InputTextE:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv2180[rbp], xmm0
$LN375@InputTextE:
	movss	xmm0, DWORD PTR tv2180[rbp]
	movss	DWORD PTR bg_offy_up$101[rbp], xmm0
; Line 4642
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN376@InputTextE
	xorps	xmm0, xmm0
	movss	DWORD PTR tv2183[rbp], xmm0
	jmp	SHORT $LN377@InputTextE
$LN376@InputTextE:
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv2183[rbp], xmm0
$LN377@InputTextE:
	movss	xmm0, DWORD PTR tv2183[rbp]
	movss	DWORD PTR bg_offy_dn$102[rbp], xmm0
; Line 4643
	lea	r8, QWORD PTR select_start_offset$88[rbp]
	lea	rdx, QWORD PTR draw_pos$[rbp]
	lea	rcx, QWORD PTR $T124[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	lea	r8, QWORD PTR draw_scroll$97[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR rect_pos$103[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 4644
	mov	rax, QWORD PTR text_selected_begin$98[rbp]
	mov	QWORD PTR p$104[rbp], rax
$LN11@InputTextE:
	mov	rax, QWORD PTR text_selected_end$99[rbp]
	cmp	QWORD PTR p$104[rbp], rax
	jae	$LN176@InputTextE
; Line 4646
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR clip_rect$[rbp+12]
	addss	xmm0, DWORD PTR [rax+6528]
	movss	xmm1, DWORD PTR rect_pos$103[rbp+4]
	comiss	xmm1, xmm0
	jbe	SHORT $LN177@InputTextE
; Line 4647
	jmp	$LN176@InputTextE
$LN177@InputTextE:
; Line 4648
	movss	xmm0, DWORD PTR clip_rect$[rbp+4]
	comiss	xmm0, DWORD PTR rect_pos$103[rbp+4]
	jbe	SHORT $LN178@InputTextE
$LN14@InputTextE:
; Line 4652
	mov	rax, QWORD PTR text_selected_end$99[rbp]
	cmp	QWORD PTR p$104[rbp], rax
	jae	SHORT $LN15@InputTextE
; Line 4653
	mov	rax, QWORD PTR p$104[rbp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv2200[rbp], eax
	mov	rax, QWORD PTR p$104[rbp]
	add	rax, 2
	mov	QWORD PTR p$104[rbp], rax
	cmp	DWORD PTR tv2200[rbp], 10
	jne	SHORT $LN378@InputTextE
	mov	DWORD PTR tv2201[rbp], 1
	jmp	SHORT $LN379@InputTextE
$LN378@InputTextE:
	mov	DWORD PTR tv2201[rbp], 0
$LN379@InputTextE:
	cmp	DWORD PTR tv2201[rbp], 0
	je	SHORT $LN180@InputTextE
; Line 4654
	jmp	SHORT $LN15@InputTextE
$LN180@InputTextE:
	jmp	SHORT $LN14@InputTextE
$LN15@InputTextE:
; Line 4655
	jmp	$LN179@InputTextE
$LN178@InputTextE:
; Line 4658
	mov	BYTE PTR [rsp+40], 1
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR p$104[rbp]
	mov	r8, QWORD PTR text_selected_end$99[rbp]
	mov	rdx, QWORD PTR p$104[rbp]
	lea	rcx, QWORD PTR rect_size$105[rbp]
	call	?InputTextCalcTextSizeW@@YA?AUImVec2@@PEBG0PEAPEBGPEAU1@_N@Z ; InputTextCalcTextSizeW
; Line 4659
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR rect_size$105[rbp]
	jb	SHORT $LN181@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	QWORD PTR tv2215[rbp], rax
	mov	dx, 32					; 00000020H
	mov	rcx, QWORD PTR tv2215[rbp]
	call	?GetCharAdvance@ImFont@@QEBAMG@Z	; ImFont::GetCharAdvance
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR rect_size$105[rbp], xmm0
$LN181@InputTextE:
; Line 4660
	movss	xmm2, DWORD PTR bg_offy_dn$102[rbp]
	movss	xmm1, DWORD PTR rect_size$105[rbp]
	lea	rcx, QWORD PTR $T125[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR rect_pos$103[rbp]
	lea	rcx, QWORD PTR $T126[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv2245[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR bg_offy_up$101[rbp]
	subss	xmm0, DWORD PTR [rax+6528]
	movaps	xmm2, xmm0
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T127[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR rect_pos$103[rbp]
	lea	rcx, QWORD PTR $T128[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv2243[rbp], rax
	mov	r8, QWORD PTR tv2245[rbp]
	mov	rdx, QWORD PTR tv2243[rbp]
	lea	rcx, QWORD PTR rect$106[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 4661
	lea	rdx, QWORD PTR clip_rect$[rbp]
	lea	rcx, QWORD PTR $T129[rbp]
	call	??0ImRect@@QEAA@AEBUImVec4@@@Z		; ImRect::ImRect
	lea	rdx, QWORD PTR $T129[rbp]
	lea	rcx, QWORD PTR rect$106[rbp]
	call	?ClipWith@ImRect@@QEAAXAEBU1@@Z		; ImRect::ClipWith
; Line 4662
	lea	rdx, QWORD PTR clip_rect$[rbp]
	lea	rcx, QWORD PTR $T130[rbp]
	call	??0ImRect@@QEAA@AEBUImVec4@@@Z		; ImRect::ImRect
	lea	rdx, QWORD PTR $T130[rbp]
	lea	rcx, QWORD PTR rect$106[rbp]
	call	?Overlaps@ImRect@@QEBA_NAEBU1@@Z	; ImRect::Overlaps
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN179@InputTextE
; Line 4663
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv2264[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR bg_color$100[rbp]
	lea	r8, QWORD PTR rect$106[rbp+8]
	lea	rdx, QWORD PTR rect$106[rbp]
	mov	rcx, QWORD PTR tv2264[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN179@InputTextE:
; Line 4665
	movss	xmm0, DWORD PTR draw_pos$[rbp]
	subss	xmm0, DWORD PTR draw_scroll$97[rbp]
	movss	DWORD PTR rect_pos$103[rbp], xmm0
; Line 4666
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR rect_pos$103[rbp+4]
	addss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR rect_pos$103[rbp+4], xmm0
; Line 4667
	jmp	$LN11@InputTextE
$LN176@InputTextE:
; Line 4671
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN184@InputTextE
	mov	rax, QWORD PTR buf_display$[rbp]
	mov	rcx, QWORD PTR buf_display_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 2097152				; 00200000H
	jge	$LN183@InputTextE
$LN184@InputTextE:
; Line 4673
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	je	SHORT $LN380@InputTextE
	mov	DWORD PTR tv2308[rbp], 1
	jmp	SHORT $LN381@InputTextE
$LN380@InputTextE:
	mov	DWORD PTR tv2308[rbp], 0
$LN381@InputTextE:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv2308[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$107[rbp], eax
; Line 4674
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv2338[rbp], rax
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN382@InputTextE
	mov	QWORD PTR tv2314[rbp], 0
	jmp	SHORT $LN383@InputTextE
$LN382@InputTextE:
	lea	rax, QWORD PTR clip_rect$[rbp]
	mov	QWORD PTR tv2314[rbp], rax
$LN383@InputTextE:
	mov	rax, QWORD PTR buf_display_end$[rbp]
	mov	QWORD PTR tv2336[rbp], rax
	lea	r8, QWORD PTR draw_scroll$97[rbp]
	lea	rdx, QWORD PTR draw_pos$[rbp]
	lea	rcx, QWORD PTR $T131[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv2332[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR tv2334[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+6520]
	mov	QWORD PTR tv2330[rbp], rax
	mov	rax, QWORD PTR tv2314[rbp]
	mov	QWORD PTR [rsp+64], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR tv2336[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR buf_display$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR col$107[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv2332[rbp]
	movss	xmm2, DWORD PTR tv2334[rbp]
	mov	rdx, QWORD PTR tv2330[rbp]
	mov	rcx, QWORD PTR tv2338[rbp]
	call	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText
$LN183@InputTextE:
; Line 4678
	movzx	eax, BYTE PTR render_cursor$[rbp]
	test	eax, eax
	je	$LN185@InputTextE
; Line 4680
	mov	rax, QWORD PTR state$[rbp]
	mov	rcx, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+3704]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR state$[rbp]
	movss	DWORD PTR [rax+3704], xmm0
; Line 4681
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+202]
	test	eax, eax
	je	SHORT $LN384@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+3704]
	jae	SHORT $LN384@InputTextE
	mov	rax, QWORD PTR state$[rbp]
	movss	xmm0, DWORD PTR [rax+3704]
	movss	xmm1, DWORD PTR __real@3f99999a
	call	fmodf
	movss	xmm1, DWORD PTR __real@3f4ccccd
	comiss	xmm1, xmm0
	jae	SHORT $LN384@InputTextE
	mov	DWORD PTR tv2357[rbp], 0
	jmp	SHORT $LN385@InputTextE
$LN384@InputTextE:
	mov	DWORD PTR tv2357[rbp], 1
$LN385@InputTextE:
	movzx	eax, BYTE PTR tv2357[rbp]
	mov	BYTE PTR cursor_is_visible$108[rbp], al
; Line 4682
	lea	r8, QWORD PTR cursor_offset$87[rbp]
	lea	rdx, QWORD PTR draw_pos$[rbp]
	lea	rcx, QWORD PTR $T132[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	lea	r8, QWORD PTR draw_scroll$97[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T133[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rdx, rax
	lea	rcx, QWORD PTR cursor_screen_pos$109[rbp]
	call	?ImFloor@@YA?AUImVec2@@AEBU1@@Z		; ImFloor
; Line 4683
	movss	xmm0, DWORD PTR cursor_screen_pos$109[rbp+4]
	subss	xmm0, DWORD PTR __real@3fc00000
	movss	xmm1, DWORD PTR cursor_screen_pos$109[rbp]
	addss	xmm1, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR cursor_screen_pos$109[rbp+4]
	subss	xmm2, DWORD PTR [rax+6528]
	addss	xmm2, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm1, DWORD PTR cursor_screen_pos$109[rbp]
	lea	rcx, QWORD PTR cursor_screen_rect$110[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 4684
	movzx	eax, BYTE PTR cursor_is_visible$108[rbp]
	test	eax, eax
	je	$LN186@InputTextE
	lea	rdx, QWORD PTR clip_rect$[rbp]
	lea	rcx, QWORD PTR $T134[rbp]
	call	??0ImRect@@QEAA@AEBUImVec4@@@Z		; ImRect::ImRect
	lea	rdx, QWORD PTR $T134[rbp]
	lea	rcx, QWORD PTR cursor_screen_rect$110[rbp]
	call	?Overlaps@ImRect@@QEBA_NAEBU1@@Z	; ImRect::Overlaps
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN186@InputTextE
; Line 4685
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv2405[rbp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv2403[rbp], eax
	lea	rdx, QWORD PTR $T135[rbp]
	lea	rcx, QWORD PTR cursor_screen_rect$110[rbp]
	call	?GetBL@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetBL
	mov	QWORD PTR tv2401[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv2403[rbp]
	mov	r8, QWORD PTR tv2401[rbp]
	lea	rdx, QWORD PTR cursor_screen_rect$110[rbp]
	mov	rcx, QWORD PTR tv2405[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN186@InputTextE:
; Line 4688
	movzx	eax, BYTE PTR is_readonly$[rbp]
	test	eax, eax
	jne	SHORT $LN185@InputTextE
; Line 4689
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR cursor_screen_pos$109[rbp+4]
	subss	xmm0, DWORD PTR [rax+6528]
	movss	xmm1, DWORD PTR cursor_screen_pos$109[rbp]
	subss	xmm1, DWORD PTR __real@3f800000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T136[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+12368], rax
$LN185@InputTextE:
; Line 4691
	jmp	$LN152@InputTextE
$LN151@InputTextE:
; Line 4695
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN188@InputTextE
; Line 4696
	lea	rdx, QWORD PTR buf_display_end$[rbp]
	mov	rcx, QWORD PTR buf_display$[rbp]
	call	?InputTextCalcTextLenAndLineCount@@YAHPEBDPEAPEBD@Z ; InputTextCalcTextLenAndLineCount
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR g$[rbp]
	mulss	xmm0, DWORD PTR [rax+6528]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR inner_size$[rbp]
	lea	rcx, QWORD PTR $T137[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR text_size$[rbp], rax
	jmp	$LN189@InputTextE
$LN188@InputTextE:
; Line 4697
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	jne	SHORT $LN190@InputTextE
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN190@InputTextE
; Line 4698
	mov	rax, QWORD PTR state$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR buf_display$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf_display_end$[rbp], rax
	jmp	SHORT $LN189@InputTextE
$LN190@InputTextE:
; Line 4699
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	jne	SHORT $LN189@InputTextE
; Line 4700
	mov	rax, QWORD PTR buf_display$[rbp]
	mov	QWORD PTR tv2537[rbp], rax
	mov	QWORD PTR tv2538[rbp], -1
$LL391@InputTextE:
	inc	QWORD PTR tv2538[rbp]
	mov	rax, QWORD PTR tv2537[rbp]
	mov	rcx, QWORD PTR tv2538[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL391@InputTextE
	mov	rax, QWORD PTR tv2538[rbp]
	mov	rcx, QWORD PTR buf_display$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR buf_display_end$[rbp], rax
$LN189@InputTextE:
; Line 4702
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	jne	SHORT $LN194@InputTextE
	mov	rax, QWORD PTR buf_display$[rbp]
	mov	rcx, QWORD PTR buf_display_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 2097152				; 00200000H
	jge	$LN152@InputTextE
$LN194@InputTextE:
; Line 4704
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	je	SHORT $LN386@InputTextE
	mov	DWORD PTR tv2450[rbp], 1
	jmp	SHORT $LN387@InputTextE
$LN386@InputTextE:
	mov	DWORD PTR tv2450[rbp], 0
$LN387@InputTextE:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv2450[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$111[rbp], eax
; Line 4705
	mov	rax, QWORD PTR draw_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv2468[rbp], rax
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN388@InputTextE
	mov	QWORD PTR tv2456[rbp], 0
	jmp	SHORT $LN389@InputTextE
$LN388@InputTextE:
	lea	rax, QWORD PTR clip_rect$[rbp]
	mov	QWORD PTR tv2456[rbp], rax
$LN389@InputTextE:
	mov	rax, QWORD PTR tv2456[rbp]
	mov	QWORD PTR [rsp+64], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR buf_display_end$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR buf_display$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR col$111[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR draw_pos$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	mov	rax, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR [rax+6520]
	mov	rcx, QWORD PTR tv2468[rbp]
	call	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText
$LN152@InputTextE:
; Line 4709
	movzx	eax, BYTE PTR is_password$[rbp]
	test	eax, eax
	je	SHORT $LN195@InputTextE
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	jne	SHORT $LN195@InputTextE
; Line 4710
	call	?PopFont@ImGui@@YAXXZ			; ImGui::PopFont
$LN195@InputTextE:
; Line 4712
	movzx	eax, BYTE PTR is_multiline$[rbp]
	test	eax, eax
	je	SHORT $LN196@InputTextE
; Line 4714
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR text_size$[rbp]
	lea	rcx, QWORD PTR $T138[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, rax
	call	?Dummy@ImGui@@YAXAEBUImVec2@@@Z		; ImGui::Dummy
; Line 4715
	call	?EndChild@ImGui@@YAXXZ			; ImGui::EndChild
; Line 4716
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
$LN196@InputTextE:
; Line 4720
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN197@InputTextE
	movzx	eax, BYTE PTR is_password$[rbp]
	test	eax, eax
	je	SHORT $LN198@InputTextE
	movzx	eax, BYTE PTR is_displaying_hint$[rbp]
	test	eax, eax
	je	SHORT $LN197@InputTextE
$LN198@InputTextE:
; Line 4722
	lea	rdx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN@
	lea	rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
; Line 4723
	mov	r8, QWORD PTR buf_display_end$[rbp]
	mov	rdx, QWORD PTR buf_display$[rbp]
	lea	rcx, QWORD PTR draw_pos$[rbp]
	call	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z ; ImGui::LogRenderedText
$LN197@InputTextE:
; Line 4726
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN199@InputTextE
; Line 4727
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T139[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN199@InputTextE:
; Line 4729
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN200@InputTextE
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	SHORT $LN200@InputTextE
; Line 4730
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN200@InputTextE:
; Line 4733
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN201@InputTextE
; Line 4734
	movzx	eax, BYTE PTR enter_pressed$[rbp]
	jmp	SHORT $LN1@InputTextE
	jmp	SHORT $LN1@InputTextE
$LN201@InputTextE:
; Line 4736
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@InputTextE:
; Line 4737
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+6736]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ENDP ; ImGui::InputTextEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
window$ = 8
g$ = 40
io$ = 72
style$ = 104
RENDER_SELECTION_WHEN_INACTIVE$ = 132
is_multiline$ = 164
is_readonly$ = 196
is_password$ = 228
is_undoable$ = 260
is_resizable$ = 292
id$ = 324
label_size$ = 360
frame_size$ = 392
total_size$ = 424
frame_bb$ = 456
total_bb$ = 504
draw_window$ = 552
inner_size$ = 584
child_visible$33 = 612
hovered$ = 644
state$ = 680
focus_requested_by_code$ = 708
focus_requested_by_tabbing$ = 740
user_clicked$ = 772
user_nav_input_start$ = 804
user_scroll_finish$ = 836
user_scroll_active$ = 868
clear_active_id$ = 900
select_all$ = 932
scroll_y$ = 964
init_changed_specs$ = 996
init_make_active$ = 1028
init_state$ = 1060
buf_len$34 = 1092
buf_end$35 = 1128
recycle_state$36 = 1156
render_cursor$ = 1188
render_selection$ = 1220
value_changed$ = 1252
enter_pressed$ = 1284
buf_end$37 = 1320
buf_display_from_state$ = 1348
is_displaying_hint$ = 1380
glyph$38 = 1416
password_font$39 = 1448
backup_current_text_length$ = 1476
mouse_x$40 = 1508
mouse_y$41 = 1540
is_osx$42 = 1572
ignore_char_inputs$43 = 1604
c$44 = 1636
n$45 = 1668
c$46 = 1700
cancel_edit$ = 1732
row_count_per_page$47 = 1764
k_mask$48 = 1796
is_osx$49 = 1828
is_osx_shift_shortcut$50 = 1860
is_wordmove_key_down$51 = 1892
is_startend_key_down$52 = 1924
is_ctrl_key_only$53 = 1956
is_shift_key_only$54 = 1988
is_shortcut_key$55 = 2020
is_cut$56 = 2052
is_copy$57 = 2084
is_paste$58 = 2116
is_undo$59 = 2148
is_redo$60 = 2180
ctrl_enter_for_new_line$61 = 2212
c$62 = 2244
ib$63 = 2276
ie$64 = 2308
clipboard_data_len$65 = 2340
clipboard_data$66 = 2376
clipboard$67 = 2408
clipboard_len$68 = 2436
clipboard_filtered$69 = 2472
clipboard_filtered_len$70 = 2500
s$71 = 2536
c$72 = 2564
apply_new_text$73 = 2600
apply_new_text_length$74 = 2628
w_text$75 = 2664
apply_edit_back_to_user_buffer$76 = 2708
event_flag$77 = 2740
event_key$78 = 2772
callback_data$79 = 2808
text$80 = 2888
utf8_cursor_pos$81 = 2916
utf8_selection_start$82 = 2948
utf8_selection_end$83 = 2980
buf_dirty$84 = 3012
callback_data$85 = 3048
clip_rect$ = 3128
draw_pos$ = 3176
text_size$ = 3208
buf_display_max_length$ = 3236
buf_display$ = 3272
buf_display_end$ = 3304
text_begin$86 = 3336
cursor_offset$87 = 3368
select_start_offset$88 = 3400
searches_input_ptr$89 = 3432
searches_result_line_no$90 = 3480
searches_remaining$91 = 3508
line_count$92 = 3540
s$93 = 3576
scroll_increment_x$94 = 3604
visible_width$95 = 3636
scroll_max_y$96 = 3668
draw_scroll$97 = 3704
text_selected_begin$98 = 3736
text_selected_end$99 = 3768
bg_color$100 = 3796
bg_offy_up$101 = 3828
bg_offy_dn$102 = 3860
rect_pos$103 = 3896
p$104 = 3928
rect_size$105 = 3960
rect$106 = 3992
col$107 = 4036
cursor_is_visible$108 = 4068
cursor_screen_pos$109 = 4104
cursor_screen_rect$110 = 4136
col$111 = 4180
$T112 = 5752
$T113 = 5784
$T114 = 5812
$T115 = 5844
$T116 = 5876
$T117 = 5908
$T118 = 5944
$T119 = 5972
$T120 = 6004
$T121 = 6036
$T122 = 6068
$T123 = 6100
$T124 = 6132
$T125 = 6164
$T126 = 6196
$T127 = 6228
$T128 = 6260
$T129 = 6292
$T130 = 6340
$T131 = 6388
$T132 = 6420
$T133 = 6452
$T134 = 6484
$T135 = 6532
$T136 = 6564
$T137 = 6596
$T138 = 6628
$T139 = 6660
tv2867 = 6676
tv2450 = 6676
tv2357 = 6676
tv2308 = 6676
tv2200 = 6676
tv2183 = 6676
tv2180 = 6676
tv2175 = 6676
tv1947 = 6676
tv1832 = 6676
tv1725 = 6676
tv1711 = 6676
tv1533 = 6676
tv1521 = 6676
tv1474 = 6676
tv1377 = 6676
tv1332 = 6676
tv1303 = 6676
tv1265 = 6676
tv1210 = 6676
tv1197 = 6676
tv1155 = 6676
tv1149 = 6676
tv1125 = 6676
tv1100 = 6676
tv1086 = 6676
tv1074 = 6676
tv1055 = 6676
tv1043 = 6676
tv1026 = 6676
tv1003 = 6676
tv974 = 6676
tv966 = 6676
tv963 = 6676
tv960 = 6676
tv948 = 6676
tv943 = 6676
tv937 = 6676
tv828 = 6676
tv743 = 6676
tv722 = 6676
tv608 = 6676
tv590 = 6676
tv560 = 6676
tv551 = 6676
tv468 = 6676
tv460 = 6676
tv405 = 6676
tv400 = 6676
tv387 = 6676
tv380 = 6676
tv374 = 6676
tv365 = 6676
tv356 = 6676
tv345 = 6676
tv336 = 6676
tv328 = 6676
tv323 = 6676
tv192 = 6676
tv166 = 6676
tv141 = 6676
tv138 = 6676
tv135 = 6676
tv132 = 6676
tv129 = 6676
tv2778 = 6680
tv2663 = 6680
tv2621 = 6680
tv2593 = 6680
tv2537 = 6680
tv2468 = 6680
tv2405 = 6680
tv2338 = 6680
tv2264 = 6680
tv2245 = 6680
tv2215 = 6680
tv2201 = 6680
tv2030 = 6680
tv2003 = 6680
tv1891 = 6680
tv1850 = 6680
tv1830 = 6680
tv1790 = 6680
tv1748 = 6680
tv1666 = 6680
tv1548 = 6680
tv1147 = 6680
tv1097 = 6680
tv1083 = 6680
tv977 = 6680
tv899 = 6680
tv879 = 6680
tv848 = 6680
tv629 = 6680
tv614 = 6680
tv574 = 6680
tv442 = 6680
tv437 = 6680
tv422 = 6680
tv389 = 6680
tv188 = 6680
tv181 = 6680
tv973 = 6684
tv178 = 6684
tv2779 = 6688
tv2664 = 6688
tv2622 = 6688
tv2594 = 6688
tv2538 = 6688
tv2456 = 6688
tv2403 = 6688
tv2314 = 6688
tv2243 = 6688
tv2028 = 6688
tv2001 = 6688
tv619 = 6688
tv2401 = 6696
tv2336 = 6696
tv2332 = 6704
tv2334 = 6712
tv2330 = 6720
__$ArrayPad$ = 6728
label$ = 6768
hint$ = 6776
buf$ = 6784
buf_size$ = 6792
size_arg$ = 6800
flags$ = 6808
callback$ = 6816
callback_user_data$ = 6824
?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA PROC ; `ImGui::InputTextEx'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+80]
	lea	rcx, QWORD PTR w_text$75[rbp]
	call	??1?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::~ImVector<unsigned short>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4HA ENDP ; `ImGui::InputTextEx'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z
_TEXT	SEGMENT
tv64 = 192
data_type$ = 240
p_data$ = 248
p_min$ = 256
p_max$ = 264
?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z PROC		; ImGui::DataTypeClamp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2121
$LN18:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2122
	mov	eax, DWORD PTR data_type$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 9
	ja	$LN2@DataTypeCl
	movsxd	rax, DWORD PTR tv64[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN17@DataTypeCl[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@DataTypeCl:
; Line 2124
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@C@@YA_NPEACPEBC1@Z	; DataTypeClampT<signed char>
	jmp	$LN1@DataTypeCl
$LN5@DataTypeCl:
; Line 2125
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@E@@YA_NPEAEPEBE1@Z	; DataTypeClampT<unsigned char>
	jmp	$LN1@DataTypeCl
$LN6@DataTypeCl:
; Line 2126
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@F@@YA_NPEAFPEBF1@Z	; DataTypeClampT<short>
	jmp	$LN1@DataTypeCl
$LN7@DataTypeCl:
; Line 2127
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@G@@YA_NPEAGPEBG1@Z	; DataTypeClampT<unsigned short>
	jmp	$LN1@DataTypeCl
$LN8@DataTypeCl:
; Line 2128
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@H@@YA_NPEAHPEBH1@Z	; DataTypeClampT<int>
	jmp	$LN1@DataTypeCl
$LN9@DataTypeCl:
; Line 2129
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@I@@YA_NPEAIPEBI1@Z	; DataTypeClampT<unsigned int>
	jmp	$LN1@DataTypeCl
$LN10@DataTypeCl:
; Line 2130
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@_J@@YA_NPEA_JPEB_J1@Z	; DataTypeClampT<__int64>
	jmp	SHORT $LN1@DataTypeCl
$LN11@DataTypeCl:
; Line 2131
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@_K@@YA_NPEA_KPEB_K1@Z	; DataTypeClampT<unsigned __int64>
	jmp	SHORT $LN1@DataTypeCl
$LN12@DataTypeCl:
; Line 2132
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@M@@YA_NPEAMPEBM1@Z	; DataTypeClampT<float>
	jmp	SHORT $LN1@DataTypeCl
$LN13@DataTypeCl:
; Line 2133
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	call	??$DataTypeClampT@N@@YA_NPEANPEBN1@Z	; DataTypeClampT<double>
	jmp	SHORT $LN1@DataTypeCl
$LN2@DataTypeCl:
; Line 2136
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@DataTypeCl
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@DataTypeCl:
; Line 2137
	xor	al, al
$LN1@DataTypeCl:
; Line 2138
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
	npad	2
$LN17@DataTypeCl:
	DD	$LN4@DataTypeCl
	DD	$LN5@DataTypeCl
	DD	$LN6@DataTypeCl
	DD	$LN7@DataTypeCl
	DD	$LN8@DataTypeCl
	DD	$LN9@DataTypeCl
	DD	$LN10@DataTypeCl
	DD	$LN11@DataTypeCl
	DD	$LN12@DataTypeCl
	DD	$LN13@DataTypeCl
?DataTypeClamp@ImGui@@YA_NHPEAXPEBX1@Z ENDP		; ImGui::DataTypeClamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DataTypeCompare@ImGui@@YAHHPEBX0@Z
_TEXT	SEGMENT
tv64 = 192
data_type$ = 240
arg_1$ = 248
arg_2$ = 256
?DataTypeCompare@ImGui@@YAHHPEBX0@Z PROC		; ImGui::DataTypeCompare, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2092
$LN18:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2093
	mov	eax, DWORD PTR data_type$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 9
	ja	$LN2@DataTypeCo
	movsxd	rax, DWORD PTR tv64[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN17@DataTypeCo[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@DataTypeCo:
; Line 2095
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@C@@YAHPEBC0@Z	; DataTypeCompareT<signed char>
	jmp	$LN1@DataTypeCo
$LN5@DataTypeCo:
; Line 2096
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@E@@YAHPEBE0@Z	; DataTypeCompareT<unsigned char>
	jmp	$LN1@DataTypeCo
$LN6@DataTypeCo:
; Line 2097
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@F@@YAHPEBF0@Z	; DataTypeCompareT<short>
	jmp	$LN1@DataTypeCo
$LN7@DataTypeCo:
; Line 2098
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@G@@YAHPEBG0@Z	; DataTypeCompareT<unsigned short>
	jmp	$LN1@DataTypeCo
$LN8@DataTypeCo:
; Line 2099
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@H@@YAHPEBH0@Z	; DataTypeCompareT<int>
	jmp	$LN1@DataTypeCo
$LN9@DataTypeCo:
; Line 2100
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@I@@YAHPEBI0@Z	; DataTypeCompareT<unsigned int>
	jmp	SHORT $LN1@DataTypeCo
$LN10@DataTypeCo:
; Line 2101
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@_J@@YAHPEB_J0@Z	; DataTypeCompareT<__int64>
	jmp	SHORT $LN1@DataTypeCo
$LN11@DataTypeCo:
; Line 2102
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@_K@@YAHPEB_K0@Z	; DataTypeCompareT<unsigned __int64>
	jmp	SHORT $LN1@DataTypeCo
$LN12@DataTypeCo:
; Line 2103
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@M@@YAHPEBM0@Z	; DataTypeCompareT<float>
	jmp	SHORT $LN1@DataTypeCo
$LN13@DataTypeCo:
; Line 2104
	mov	rdx, QWORD PTR arg_2$[rbp]
	mov	rcx, QWORD PTR arg_1$[rbp]
	call	??$DataTypeCompareT@N@@YAHPEBN0@Z	; DataTypeCompareT<double>
	jmp	SHORT $LN1@DataTypeCo
$LN2@DataTypeCo:
; Line 2107
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@DataTypeCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeCompare@ImGui@@YAHHPEBX0@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@DataTypeCo:
; Line 2108
	xor	eax, eax
$LN1@DataTypeCo:
; Line 2109
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
$LN17@DataTypeCo:
	DD	$LN4@DataTypeCo
	DD	$LN5@DataTypeCo
	DD	$LN6@DataTypeCo
	DD	$LN7@DataTypeCo
	DD	$LN8@DataTypeCo
	DD	$LN9@DataTypeCo
	DD	$LN10@DataTypeCo
	DD	$LN11@DataTypeCo
	DD	$LN12@DataTypeCo
	DD	$LN13@DataTypeCo
?DataTypeCompare@ImGui@@YAHHPEBX0@Z ENDP		; ImGui::DataTypeCompare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z
_TEXT	SEGMENT
op$ = 4
type_info$ = 40
data_backup$ = 72
arg1i$ = 100
v$12 = 136
arg0i$13 = 164
arg1f$14 = 196
v$15 = 232
arg0f$16 = 260
arg1f$17 = 292
v$18 = 328
arg0f$19 = 360
arg1f$20 = 392
v32$21 = 420
tv270 = 628
__$ArrayPad$ = 632
buf$ = 672
initial_value_buf$ = 680
data_type$ = 688
p_data$ = 696
format$ = 704
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z PROC	; ImGui::DataTypeApplyOpFromText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1983
$LN66:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 672				; 000002a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 112				; 00000070H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+712]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
$LN2@DataTypeAp:
; Line 1984
	mov	rax, QWORD PTR buf$[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	?ImCharIsBlankA@@YA_ND@Z		; ImCharIsBlankA
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@DataTypeAp
; Line 1985
	mov	rax, QWORD PTR buf$[rbp]
	inc	rax
	mov	QWORD PTR buf$[rbp], rax
	jmp	SHORT $LN2@DataTypeAp
$LN3@DataTypeAp:
; Line 1989
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buf$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR op$[rbp], al
; Line 1990
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN8@DataTypeAp
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 42					; 0000002aH
	je	SHORT $LN8@DataTypeAp
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN6@DataTypeAp
$LN8@DataTypeAp:
; Line 1992
	mov	rax, QWORD PTR buf$[rbp]
	inc	rax
	mov	QWORD PTR buf$[rbp], rax
$LN4@DataTypeAp:
; Line 1993
	mov	rax, QWORD PTR buf$[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	?ImCharIsBlankA@@YA_ND@Z		; ImCharIsBlankA
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@DataTypeAp
; Line 1994
	mov	rax, QWORD PTR buf$[rbp]
	inc	rax
	mov	QWORD PTR buf$[rbp], rax
	jmp	SHORT $LN4@DataTypeAp
$LN5@DataTypeAp:
; Line 1995
	jmp	SHORT $LN7@DataTypeAp
$LN6@DataTypeAp:
; Line 1998
	mov	BYTE PTR op$[rbp], 0
$LN7@DataTypeAp:
; Line 2000
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buf$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN9@DataTypeAp
; Line 2001
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN9@DataTypeAp:
; Line 2004
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
	mov	QWORD PTR type_info$[rbp], rax
; Line 2006
	lea	rax, QWORD PTR data_backup$[rbp]
	mov	rcx, QWORD PTR type_info$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR p_data$[rbp]
	mov	rcx, QWORD PTR [rcx]
	rep movsb
; Line 2008
	cmp	QWORD PTR format$[rbp], 0
	jne	SHORT $LN10@DataTypeAp
; Line 2009
	mov	rax, QWORD PTR type_info$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR format$[rbp], rax
$LN10@DataTypeAp:
; Line 2012
	mov	DWORD PTR arg1i$[rbp], 0
; Line 2013
	cmp	DWORD PTR data_type$[rbp], 4
	jne	$LN11@DataTypeAp
; Line 2015
	mov	rax, QWORD PTR p_data$[rbp]
	mov	QWORD PTR v$12[rbp], rax
; Line 2016
	mov	rax, QWORD PTR v$12[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR arg0i$13[rbp], eax
; Line 2017
	xorps	xmm0, xmm0
	movss	DWORD PTR arg1f$14[rbp], xmm0
; Line 2018
	movsx	eax, BYTE PTR op$[rbp]
	test	eax, eax
	je	SHORT $LN13@DataTypeAp
	lea	r8, QWORD PTR arg0i$13[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR initial_value_buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN13@DataTypeAp
; Line 2019
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN13@DataTypeAp:
; Line 2021
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN14@DataTypeAp
	lea	r8, QWORD PTR arg1i$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	test	eax, eax
	je	SHORT $LN16@DataTypeAp
	mov	eax, DWORD PTR arg1i$[rbp]
	mov	ecx, DWORD PTR arg0i$13[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR v$12[rbp]
	mov	DWORD PTR [rcx], eax
$LN16@DataTypeAp:
	jmp	$LN15@DataTypeAp
$LN14@DataTypeAp:
; Line 2022
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN17@DataTypeAp
	lea	r8, QWORD PTR arg1f$14[rbp]
	lea	rdx, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	test	eax, eax
	je	SHORT $LN19@DataTypeAp
	cvtsi2ss xmm0, DWORD PTR arg0i$13[rbp]
	mulss	xmm0, DWORD PTR arg1f$14[rbp]
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$12[rbp]
	mov	DWORD PTR [rcx], eax
$LN19@DataTypeAp:
	jmp	$LN18@DataTypeAp
$LN17@DataTypeAp:
; Line 2023
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN20@DataTypeAp
	lea	r8, QWORD PTR arg1f$14[rbp]
	lea	rdx, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	test	eax, eax
	je	SHORT $LN22@DataTypeAp
	movss	xmm0, DWORD PTR arg1f$14[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN65@DataTypeAp
	je	SHORT $LN22@DataTypeAp
$LN65@DataTypeAp:
	cvtsi2ss xmm0, DWORD PTR arg0i$13[rbp]
	divss	xmm0, DWORD PTR arg1f$14[rbp]
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$12[rbp]
	mov	DWORD PTR [rcx], eax
$LN22@DataTypeAp:
	jmp	SHORT $LN21@DataTypeAp
$LN20@DataTypeAp:
; Line 2024
	lea	r8, QWORD PTR arg1i$[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN23@DataTypeAp
	mov	rax, QWORD PTR v$12[rbp]
	mov	ecx, DWORD PTR arg1i$[rbp]
	mov	DWORD PTR [rax], ecx
$LN23@DataTypeAp:
$LN21@DataTypeAp:
$LN18@DataTypeAp:
$LN15@DataTypeAp:
; Line 2025
	jmp	$LN12@DataTypeAp
$LN11@DataTypeAp:
; Line 2026
	cmp	DWORD PTR data_type$[rbp], 8
	jne	$LN24@DataTypeAp
; Line 2029
	lea	rax, OFFSET FLAT:??_C@_02NJPGOMH@?$CFf@
	mov	QWORD PTR format$[rbp], rax
; Line 2030
	mov	rax, QWORD PTR p_data$[rbp]
	mov	QWORD PTR v$15[rbp], rax
; Line 2031
	mov	rax, QWORD PTR v$15[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR arg0f$16[rbp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR arg1f$17[rbp], xmm0
; Line 2032
	movsx	eax, BYTE PTR op$[rbp]
	test	eax, eax
	je	SHORT $LN26@DataTypeAp
	lea	r8, QWORD PTR arg0f$16[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR initial_value_buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN26@DataTypeAp
; Line 2033
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN26@DataTypeAp:
; Line 2034
	lea	r8, QWORD PTR arg1f$17[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN27@DataTypeAp
; Line 2035
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN27@DataTypeAp:
; Line 2036
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN28@DataTypeAp
	movss	xmm0, DWORD PTR arg0f$16[rbp]
	addss	xmm0, DWORD PTR arg1f$17[rbp]
	mov	rax, QWORD PTR v$15[rbp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN29@DataTypeAp
$LN28@DataTypeAp:
; Line 2037
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN30@DataTypeAp
	movss	xmm0, DWORD PTR arg0f$16[rbp]
	mulss	xmm0, DWORD PTR arg1f$17[rbp]
	mov	rax, QWORD PTR v$15[rbp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN31@DataTypeAp
$LN30@DataTypeAp:
; Line 2038
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN32@DataTypeAp
	movss	xmm0, DWORD PTR arg1f$17[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN64@DataTypeAp
	je	SHORT $LN34@DataTypeAp
$LN64@DataTypeAp:
	movss	xmm0, DWORD PTR arg0f$16[rbp]
	divss	xmm0, DWORD PTR arg1f$17[rbp]
	mov	rax, QWORD PTR v$15[rbp]
	movss	DWORD PTR [rax], xmm0
$LN34@DataTypeAp:
	jmp	SHORT $LN33@DataTypeAp
$LN32@DataTypeAp:
; Line 2039
	mov	rax, QWORD PTR v$15[rbp]
	movss	xmm0, DWORD PTR arg1f$17[rbp]
	movss	DWORD PTR [rax], xmm0
$LN33@DataTypeAp:
$LN31@DataTypeAp:
$LN29@DataTypeAp:
; Line 2040
	jmp	$LN25@DataTypeAp
$LN24@DataTypeAp:
; Line 2041
	cmp	DWORD PTR data_type$[rbp], 9
	jne	$LN35@DataTypeAp
; Line 2043
	lea	rax, OFFSET FLAT:??_C@_03DLDNIBIK@?$CFlf@
	mov	QWORD PTR format$[rbp], rax
; Line 2044
	mov	rax, QWORD PTR p_data$[rbp]
	mov	QWORD PTR v$18[rbp], rax
; Line 2045
	mov	rax, QWORD PTR v$18[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR arg0f$19[rbp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR arg1f$20[rbp], xmm0
; Line 2046
	movsx	eax, BYTE PTR op$[rbp]
	test	eax, eax
	je	SHORT $LN37@DataTypeAp
	lea	r8, QWORD PTR arg0f$19[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR initial_value_buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN37@DataTypeAp
; Line 2047
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN37@DataTypeAp:
; Line 2048
	lea	r8, QWORD PTR arg1f$20[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN38@DataTypeAp
; Line 2049
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN38@DataTypeAp:
; Line 2050
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 43					; 0000002bH
	jne	SHORT $LN39@DataTypeAp
	movsd	xmm0, QWORD PTR arg0f$19[rbp]
	addsd	xmm0, QWORD PTR arg1f$20[rbp]
	mov	rax, QWORD PTR v$18[rbp]
	movsd	QWORD PTR [rax], xmm0
	jmp	SHORT $LN40@DataTypeAp
$LN39@DataTypeAp:
; Line 2051
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN41@DataTypeAp
	movsd	xmm0, QWORD PTR arg0f$19[rbp]
	mulsd	xmm0, QWORD PTR arg1f$20[rbp]
	mov	rax, QWORD PTR v$18[rbp]
	movsd	QWORD PTR [rax], xmm0
	jmp	SHORT $LN42@DataTypeAp
$LN41@DataTypeAp:
; Line 2052
	movsx	eax, BYTE PTR op$[rbp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN43@DataTypeAp
	movsd	xmm0, QWORD PTR arg1f$20[rbp]
	ucomisd	xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN63@DataTypeAp
	je	SHORT $LN45@DataTypeAp
$LN63@DataTypeAp:
	movsd	xmm0, QWORD PTR arg0f$19[rbp]
	divsd	xmm0, QWORD PTR arg1f$20[rbp]
	mov	rax, QWORD PTR v$18[rbp]
	movsd	QWORD PTR [rax], xmm0
$LN45@DataTypeAp:
	jmp	SHORT $LN44@DataTypeAp
$LN43@DataTypeAp:
; Line 2053
	mov	rax, QWORD PTR v$18[rbp]
	movsd	xmm0, QWORD PTR arg1f$20[rbp]
	movsd	QWORD PTR [rax], xmm0
$LN44@DataTypeAp:
$LN42@DataTypeAp:
$LN40@DataTypeAp:
; Line 2054
	jmp	$LN36@DataTypeAp
$LN35@DataTypeAp:
; Line 2055
	cmp	DWORD PTR data_type$[rbp], 5
	je	SHORT $LN48@DataTypeAp
	cmp	DWORD PTR data_type$[rbp], 6
	je	SHORT $LN48@DataTypeAp
	cmp	DWORD PTR data_type$[rbp], 7
	jne	SHORT $LN46@DataTypeAp
$LN48@DataTypeAp:
; Line 2059
	mov	r8, QWORD PTR p_data$[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN49@DataTypeAp
; Line 2060
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN49@DataTypeAp:
; Line 2061
	jmp	$LN47@DataTypeAp
$LN46@DataTypeAp:
; Line 2066
	lea	r8, QWORD PTR v32$21[rbp]
	mov	rdx, QWORD PTR format$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	sscanf
	cmp	eax, 1
	jge	SHORT $LN50@DataTypeAp
; Line 2067
	xor	al, al
	jmp	$LN1@DataTypeAp
$LN50@DataTypeAp:
; Line 2068
	cmp	DWORD PTR data_type$[rbp], 0
	jne	SHORT $LN51@DataTypeAp
; Line 2069
	mov	r8d, 127				; 0000007fH
	mov	edx, -128				; ffffffffffffff80H
	mov	ecx, DWORD PTR v32$21[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	rcx, QWORD PTR p_data$[rbp]
	mov	BYTE PTR [rcx], al
	jmp	$LN52@DataTypeAp
$LN51@DataTypeAp:
; Line 2070
	cmp	DWORD PTR data_type$[rbp], 1
	jne	SHORT $LN53@DataTypeAp
; Line 2071
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR v32$21[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	rcx, QWORD PTR p_data$[rbp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN54@DataTypeAp
$LN53@DataTypeAp:
; Line 2072
	cmp	DWORD PTR data_type$[rbp], 2
	jne	SHORT $LN55@DataTypeAp
; Line 2073
	mov	r8d, 32767				; 00007fffH
	mov	edx, -32768				; ffffffffffff8000H
	mov	ecx, DWORD PTR v32$21[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	rcx, QWORD PTR p_data$[rbp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN56@DataTypeAp
$LN55@DataTypeAp:
; Line 2074
	cmp	DWORD PTR data_type$[rbp], 3
	jne	SHORT $LN57@DataTypeAp
; Line 2075
	mov	r8d, 65535				; 0000ffffH
	xor	edx, edx
	mov	ecx, DWORD PTR v32$21[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	rcx, QWORD PTR p_data$[rbp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN58@DataTypeAp
$LN57@DataTypeAp:
; Line 2077
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN60@DataTypeAp
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z@4JA
	add	eax, 94					; 0000005eH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@DataTypeAp:
$LN58@DataTypeAp:
$LN56@DataTypeAp:
$LN54@DataTypeAp:
$LN52@DataTypeAp:
$LN47@DataTypeAp:
$LN36@DataTypeAp:
$LN25@DataTypeAp:
$LN12@DataTypeAp:
; Line 2080
	mov	rax, QWORD PTR type_info$[rbp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR p_data$[rbp]
	lea	rcx, QWORD PTR data_backup$[rbp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN61@DataTypeAp
	mov	DWORD PTR tv270[rbp], 1
	jmp	SHORT $LN62@DataTypeAp
$LN61@DataTypeAp:
	mov	DWORD PTR tv270[rbp], 0
$LN62@DataTypeAp:
	movzx	eax, BYTE PTR tv270[rbp]
$LN1@DataTypeAp:
; Line 2081
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+640]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z ENDP	; ImGui::DataTypeApplyOpFromText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z
_TEXT	SEGMENT
tv71 = 192
data_type$ = 240
op$ = 248
output$ = 256
arg1$ = 264
arg2$ = 272
?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z PROC		; ImGui::DataTypeApplyOp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1931
$LN39:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1932
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	je	SHORT $LN36@DataTypeAp
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	je	SHORT $LN36@DataTypeAp
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CO@LEDHMGOL@?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?$CL?$AA?8?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAo?$AAp@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN36@DataTypeAp:
; Line 1933
	mov	eax, DWORD PTR data_type$[rbp]
	mov	DWORD PTR tv71[rbp], eax
	cmp	DWORD PTR tv71[rbp], 9
	ja	$LN2@DataTypeAp
	movsxd	rax, DWORD PTR tv71[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN38@DataTypeAp[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@DataTypeAp:
; Line 1936
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN5@DataTypeAp
	mov	r9b, 127				; 0000007fH
	mov	r8b, -128				; ffffffffffffff80H
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	??$ImAddClampOverflow@C@@YACCCCC@Z	; ImAddClampOverflow<signed char>
	mov	rcx, QWORD PTR output$[rbp]
	mov	BYTE PTR [rcx], al
$LN5@DataTypeAp:
; Line 1937
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN6@DataTypeAp
	mov	r9b, 127				; 0000007fH
	mov	r8b, -128				; ffffffffffffff80H
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	??$ImSubClampOverflow@C@@YACCCCC@Z	; ImSubClampOverflow<signed char>
	mov	rcx, QWORD PTR output$[rbp]
	mov	BYTE PTR [rcx], al
$LN6@DataTypeAp:
; Line 1938
	jmp	$LN1@DataTypeAp
$LN7@DataTypeAp:
; Line 1940
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN8@DataTypeAp
	mov	r9b, 255				; 000000ffH
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	??$ImAddClampOverflow@E@@YAEEEEE@Z	; ImAddClampOverflow<unsigned char>
	mov	rcx, QWORD PTR output$[rbp]
	mov	BYTE PTR [rcx], al
$LN8@DataTypeAp:
; Line 1941
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN9@DataTypeAp
	mov	r9b, 255				; 000000ffH
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	??$ImSubClampOverflow@E@@YAEEEEE@Z	; ImSubClampOverflow<unsigned char>
	mov	rcx, QWORD PTR output$[rbp]
	mov	BYTE PTR [rcx], al
$LN9@DataTypeAp:
; Line 1942
	jmp	$LN1@DataTypeAp
$LN10@DataTypeAp:
; Line 1944
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN11@DataTypeAp
	mov	r9w, 32767				; 00007fffH
	mov	r8w, -32768				; ffffffffffff8000H
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, WORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, WORD PTR [rax]
	call	??$ImAddClampOverflow@F@@YAFFFFF@Z	; ImAddClampOverflow<short>
	mov	rcx, QWORD PTR output$[rbp]
	mov	WORD PTR [rcx], ax
$LN11@DataTypeAp:
; Line 1945
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN12@DataTypeAp
	mov	r9w, 32767				; 00007fffH
	mov	r8w, -32768				; ffffffffffff8000H
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, WORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, WORD PTR [rax]
	call	??$ImSubClampOverflow@F@@YAFFFFF@Z	; ImSubClampOverflow<short>
	mov	rcx, QWORD PTR output$[rbp]
	mov	WORD PTR [rcx], ax
$LN12@DataTypeAp:
; Line 1946
	jmp	$LN1@DataTypeAp
$LN13@DataTypeAp:
; Line 1948
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN14@DataTypeAp
	mov	r9w, 65535				; 0000ffffH
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, WORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, WORD PTR [rax]
	call	??$ImAddClampOverflow@G@@YAGGGGG@Z	; ImAddClampOverflow<unsigned short>
	mov	rcx, QWORD PTR output$[rbp]
	mov	WORD PTR [rcx], ax
$LN14@DataTypeAp:
; Line 1949
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN15@DataTypeAp
	mov	r9w, 65535				; 0000ffffH
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	movzx	edx, WORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	movzx	ecx, WORD PTR [rax]
	call	??$ImSubClampOverflow@G@@YAGGGGG@Z	; ImSubClampOverflow<unsigned short>
	mov	rcx, QWORD PTR output$[rbp]
	mov	WORD PTR [rcx], ax
$LN15@DataTypeAp:
; Line 1950
	jmp	$LN1@DataTypeAp
$LN16@DataTypeAp:
; Line 1952
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN17@DataTypeAp
	mov	r9d, 2147483647				; 7fffffffH
	mov	r8d, -2147483648			; ffffffff80000000H
	mov	rax, QWORD PTR arg2$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	??$ImAddClampOverflow@H@@YAHHHHH@Z	; ImAddClampOverflow<int>
	mov	rcx, QWORD PTR output$[rbp]
	mov	DWORD PTR [rcx], eax
$LN17@DataTypeAp:
; Line 1953
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN18@DataTypeAp
	mov	r9d, 2147483647				; 7fffffffH
	mov	r8d, -2147483648			; ffffffff80000000H
	mov	rax, QWORD PTR arg2$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	??$ImSubClampOverflow@H@@YAHHHHH@Z	; ImSubClampOverflow<int>
	mov	rcx, QWORD PTR output$[rbp]
	mov	DWORD PTR [rcx], eax
$LN18@DataTypeAp:
; Line 1954
	jmp	$LN1@DataTypeAp
$LN19@DataTypeAp:
; Line 1956
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN20@DataTypeAp
	mov	r9d, -1					; ffffffffH
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	??$ImAddClampOverflow@I@@YAIIIII@Z	; ImAddClampOverflow<unsigned int>
	mov	rcx, QWORD PTR output$[rbp]
	mov	DWORD PTR [rcx], eax
$LN20@DataTypeAp:
; Line 1957
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN21@DataTypeAp
	mov	r9d, -1					; ffffffffH
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	??$ImSubClampOverflow@I@@YAIIIII@Z	; ImSubClampOverflow<unsigned int>
	mov	rcx, QWORD PTR output$[rbp]
	mov	DWORD PTR [rcx], eax
$LN21@DataTypeAp:
; Line 1958
	jmp	$LN1@DataTypeAp
$LN22@DataTypeAp:
; Line 1960
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN23@DataTypeAp
	mov	r9, 9223372036854775807			; 7fffffffffffffffH
	mov	r8, -9223372036854775808		; 8000000000000000H
	mov	rax, QWORD PTR arg2$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	??$ImAddClampOverflow@_J@@YA_J_J000@Z	; ImAddClampOverflow<__int64>
	mov	rcx, QWORD PTR output$[rbp]
	mov	QWORD PTR [rcx], rax
$LN23@DataTypeAp:
; Line 1961
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN24@DataTypeAp
	mov	r9, 9223372036854775807			; 7fffffffffffffffH
	mov	r8, -9223372036854775808		; 8000000000000000H
	mov	rax, QWORD PTR arg2$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	??$ImSubClampOverflow@_J@@YA_J_J000@Z	; ImSubClampOverflow<__int64>
	mov	rcx, QWORD PTR output$[rbp]
	mov	QWORD PTR [rcx], rax
$LN24@DataTypeAp:
; Line 1962
	jmp	$LN1@DataTypeAp
$LN25@DataTypeAp:
; Line 1964
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN26@DataTypeAp
	mov	r9, -1
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	??$ImAddClampOverflow@_K@@YA_K_K000@Z	; ImAddClampOverflow<unsigned __int64>
	mov	rcx, QWORD PTR output$[rbp]
	mov	QWORD PTR [rcx], rax
$LN26@DataTypeAp:
; Line 1965
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN27@DataTypeAp
	mov	r9, -1
	xor	r8d, r8d
	mov	rax, QWORD PTR arg2$[rbp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	??$ImSubClampOverflow@_K@@YA_K_K000@Z	; ImSubClampOverflow<unsigned __int64>
	mov	rcx, QWORD PTR output$[rbp]
	mov	QWORD PTR [rcx], rax
$LN27@DataTypeAp:
; Line 1966
	jmp	$LN1@DataTypeAp
$LN28@DataTypeAp:
; Line 1968
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN29@DataTypeAp
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR arg2$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR output$[rbp]
	movss	DWORD PTR [rax], xmm0
$LN29@DataTypeAp:
; Line 1969
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN30@DataTypeAp
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR arg2$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR output$[rbp]
	movss	DWORD PTR [rax], xmm0
$LN30@DataTypeAp:
; Line 1970
	jmp	SHORT $LN1@DataTypeAp
$LN31@DataTypeAp:
; Line 1972
	cmp	DWORD PTR op$[rbp], 43			; 0000002bH
	jne	SHORT $LN32@DataTypeAp
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR arg2$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	addsd	xmm0, QWORD PTR [rcx]
	mov	rax, QWORD PTR output$[rbp]
	movsd	QWORD PTR [rax], xmm0
$LN32@DataTypeAp:
; Line 1973
	cmp	DWORD PTR op$[rbp], 45			; 0000002dH
	jne	SHORT $LN33@DataTypeAp
	mov	rax, QWORD PTR arg1$[rbp]
	mov	rcx, QWORD PTR arg2$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	subsd	xmm0, QWORD PTR [rcx]
	mov	rax, QWORD PTR output$[rbp]
	movsd	QWORD PTR [rax], xmm0
$LN33@DataTypeAp:
; Line 1974
	jmp	SHORT $LN1@DataTypeAp
$LN2@DataTypeAp:
; Line 1977
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN37@DataTypeAp
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z@4JA
	add	eax, 46					; 0000002eH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN37@DataTypeAp:
$LN1@DataTypeAp:
; Line 1978
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
	npad	2
$LN38@DataTypeAp:
	DD	$LN4@DataTypeAp
	DD	$LN7@DataTypeAp
	DD	$LN10@DataTypeAp
	DD	$LN13@DataTypeAp
	DD	$LN16@DataTypeAp
	DD	$LN19@DataTypeAp
	DD	$LN22@DataTypeAp
	DD	$LN25@DataTypeAp
	DD	$LN28@DataTypeAp
	DD	$LN31@DataTypeAp
?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z ENDP		; ImGui::DataTypeApplyOp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z
_TEXT	SEGMENT
buf$ = 224
buf_size$ = 232
data_type$ = 240
p_data$ = 248
format$ = 256
?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z PROC	; ImGui::DataTypeFormatString, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1908
$LN14:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1910
	cmp	DWORD PTR data_type$[rbp], 4
	je	SHORT $LN3@DataTypeFo
	cmp	DWORD PTR data_type$[rbp], 5
	jne	SHORT $LN2@DataTypeFo
$LN3@DataTypeFo:
; Line 1911
	movsxd	rax, DWORD PTR buf_size$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	mov	r9d, DWORD PTR [rcx]
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN1@DataTypeFo
$LN2@DataTypeFo:
; Line 1912
	cmp	DWORD PTR data_type$[rbp], 6
	je	SHORT $LN5@DataTypeFo
	cmp	DWORD PTR data_type$[rbp], 7
	jne	SHORT $LN4@DataTypeFo
$LN5@DataTypeFo:
; Line 1913
	movsxd	rax, DWORD PTR buf_size$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	mov	r9, QWORD PTR [rcx]
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN1@DataTypeFo
$LN4@DataTypeFo:
; Line 1914
	cmp	DWORD PTR data_type$[rbp], 8
	jne	SHORT $LN6@DataTypeFo
; Line 1915
	mov	rax, QWORD PTR p_data$[rbp]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsxd	rax, DWORD PTR buf_size$[rbp]
	movaps	xmm3, xmm0
	movq	r9, xmm3
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN1@DataTypeFo
$LN6@DataTypeFo:
; Line 1916
	cmp	DWORD PTR data_type$[rbp], 9
	jne	SHORT $LN7@DataTypeFo
; Line 1917
	movsxd	rax, DWORD PTR buf_size$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	movsd	xmm3, QWORD PTR [rcx]
	movq	r9, xmm3
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN1@DataTypeFo
$LN7@DataTypeFo:
; Line 1918
	cmp	DWORD PTR data_type$[rbp], 0
	jne	SHORT $LN8@DataTypeFo
; Line 1919
	mov	rax, QWORD PTR p_data$[rbp]
	movsx	eax, BYTE PTR [rax]
	movsxd	rcx, DWORD PTR buf_size$[rbp]
	mov	r9d, eax
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN1@DataTypeFo
$LN8@DataTypeFo:
; Line 1920
	cmp	DWORD PTR data_type$[rbp], 1
	jne	SHORT $LN9@DataTypeFo
; Line 1921
	mov	rax, QWORD PTR p_data$[rbp]
	movzx	eax, BYTE PTR [rax]
	movsxd	rcx, DWORD PTR buf_size$[rbp]
	mov	r9d, eax
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN1@DataTypeFo
$LN9@DataTypeFo:
; Line 1922
	cmp	DWORD PTR data_type$[rbp], 2
	jne	SHORT $LN10@DataTypeFo
; Line 1923
	mov	rax, QWORD PTR p_data$[rbp]
	movsx	eax, WORD PTR [rax]
	movsxd	rcx, DWORD PTR buf_size$[rbp]
	mov	r9d, eax
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	SHORT $LN1@DataTypeFo
$LN10@DataTypeFo:
; Line 1924
	cmp	DWORD PTR data_type$[rbp], 3
	jne	SHORT $LN11@DataTypeFo
; Line 1925
	mov	rax, QWORD PTR p_data$[rbp]
	movzx	eax, WORD PTR [rax]
	movsxd	rcx, DWORD PTR buf_size$[rbp]
	mov	r9d, eax
	mov	r8, QWORD PTR format$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	SHORT $LN1@DataTypeFo
$LN11@DataTypeFo:
; Line 1926
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@DataTypeFo
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@DataTypeFo:
; Line 1927
	xor	eax, eax
$LN1@DataTypeFo:
; Line 1928
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ENDP	; ImGui::DataTypeFormatString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z
_TEXT	SEGMENT
data_type$ = 224
?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z PROC ; ImGui::DataTypeGetInfo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1902
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1903
	cmp	DWORD PTR data_type$[rbp], 0
	jl	SHORT $LN3@DataTypeGe
	cmp	DWORD PTR data_type$[rbp], 10
	jl	SHORT $LN4@DataTypeGe
$LN3@DataTypeGe:
	mov	eax, DWORD PTR ?__LINE__Var@?0??DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GE@PMGCKKHF@?$AAd?$AAa?$AAt?$AAa?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@DataTypeGe:
; Line 1904
	movsxd	rax, DWORD PTR data_type$[rbp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?GDataTypeInfo@@3QBUImGuiDataTypeInfo@@B
	add	rcx, rax
	mov	rax, rcx
; Line 1905
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ENDP ; ImGui::DataTypeGetInfo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreePushOverrideID@ImGui@@YAXI@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
tv77 = 248
id$ = 288
?TreePushOverrideID@ImGui@@YAXI@Z PROC			; ImGui::TreePushOverrideID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5980
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5981
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5982
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 5983
	xorps	xmm0, xmm0
	call	?Indent@ImGui@@YAXM@Z			; ImGui::Indent
; Line 5984
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+392]
	inc	eax
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+392], eax
; Line 5985
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 200				; 000000c8H
	mov	QWORD PTR tv77[rbp], rax
	lea	rdx, QWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv77[rbp]
	call	?push_back@?$ImVector@I@@QEAAXAEBI@Z	; ImVector<unsigned int>::push_back
; Line 5986
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TreePushOverrideID@ImGui@@YAXI@Z ENDP			; ImGui::TreePushOverrideID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
storage$ = 72
is_open$ = 100
stored_value$1 = 132
tv133 = 340
tv95 = 340
tv137 = 344
id$ = 384
flags$ = 392
?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z PROC		; ImGui::TreeNodeBehaviorIsOpen, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5731
$LN17:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5732
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN2@TreeNodeBe
; Line 5733
	mov	al, 1
	jmp	$LN1@TreeNodeBe
$LN2@TreeNodeBe:
; Line 5736
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5737
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 5738
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+416]
	mov	QWORD PTR storage$[rbp], rax
; Line 5741
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7456]
	and	eax, 2
	test	eax, eax
	je	$LN3@TreeNodeBe
; Line 5743
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7468]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@TreeNodeBe
; Line 5745
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7472]
	mov	BYTE PTR is_open$[rbp], al
; Line 5746
	movzx	eax, BYTE PTR is_open$[rbp]
	mov	r8d, eax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR storage$[rbp]
	call	?SetInt@ImGuiStorage@@QEAAXIH@Z		; ImGuiStorage::SetInt
; Line 5747
	jmp	SHORT $LN6@TreeNodeBe
$LN5@TreeNodeBe:
; Line 5751
	mov	r8d, -1
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR storage$[rbp]
	call	?GetInt@ImGuiStorage@@QEBAHIH@Z		; ImGuiStorage::GetInt
	mov	DWORD PTR stored_value$1[rbp], eax
; Line 5752
	cmp	DWORD PTR stored_value$1[rbp], -1
	jne	SHORT $LN7@TreeNodeBe
; Line 5754
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7472]
	mov	BYTE PTR is_open$[rbp], al
; Line 5755
	movzx	eax, BYTE PTR is_open$[rbp]
	mov	r8d, eax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR storage$[rbp]
	call	?SetInt@ImGuiStorage@@QEAAXIH@Z		; ImGuiStorage::SetInt
; Line 5756
	jmp	SHORT $LN8@TreeNodeBe
$LN7@TreeNodeBe:
; Line 5759
	cmp	DWORD PTR stored_value$1[rbp], 0
	je	SHORT $LN11@TreeNodeBe
	mov	DWORD PTR tv95[rbp], 1
	jmp	SHORT $LN12@TreeNodeBe
$LN11@TreeNodeBe:
	mov	DWORD PTR tv95[rbp], 0
$LN12@TreeNodeBe:
	movzx	eax, BYTE PTR tv95[rbp]
	mov	BYTE PTR is_open$[rbp], al
$LN8@TreeNodeBe:
$LN6@TreeNodeBe:
; Line 5762
	jmp	SHORT $LN4@TreeNodeBe
$LN3@TreeNodeBe:
; Line 5765
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN13@TreeNodeBe
	mov	DWORD PTR tv133[rbp], 1
	jmp	SHORT $LN14@TreeNodeBe
$LN13@TreeNodeBe:
	mov	DWORD PTR tv133[rbp], 0
$LN14@TreeNodeBe:
	mov	r8d, DWORD PTR tv133[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR storage$[rbp]
	call	?GetInt@ImGuiStorage@@QEBAHIH@Z		; ImGuiStorage::GetInt
	test	eax, eax
	je	SHORT $LN15@TreeNodeBe
	mov	DWORD PTR tv137[rbp], 1
	jmp	SHORT $LN16@TreeNodeBe
$LN15@TreeNodeBe:
	mov	DWORD PTR tv137[rbp], 0
$LN16@TreeNodeBe:
	movzx	eax, BYTE PTR tv137[rbp]
	mov	BYTE PTR is_open$[rbp], al
$LN4@TreeNodeBe:
; Line 5770
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN9@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN9@TreeNodeBe
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+12536]
	mov	eax, DWORD PTR [rax+392]
	sub	eax, ecx
	mov	rcx, QWORD PTR g$[rbp]
	cmp	eax, DWORD PTR [rcx+12540]
	jge	SHORT $LN9@TreeNodeBe
; Line 5771
	mov	BYTE PTR is_open$[rbp], 1
$LN9@TreeNodeBe:
; Line 5773
	movzx	eax, BYTE PTR is_open$[rbp]
$LN1@TreeNodeBe:
; Line 5774
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z ENDP		; ImGui::TreeNodeBehaviorIsOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
display_frame$ = 100
padding$ = 136
label_size$ = 168
frame_height$ = 196
frame_bb$ = 232
text_offset_x$ = 276
text_offset_y$ = 308
text_width$ = 340
text_pos$ = 376
interact_bb$ = 408
is_leaf$ = 452
is_open$ = 484
item_add$ = 516
button_flags$ = 548
arrow_hit_x1$ = 580
arrow_hit_x2$ = 612
is_mouse_x_over_arrow$ = 644
selected$ = 676
was_selected$ = 708
hovered$ = 740
held$ = 772
pressed$ = 804
toggled$ = 836
text_col$ = 868
nav_highlight_flags$ = 900
bg_col$10 = 932
bg_col$11 = 964
$T12 = 1576
$T13 = 1604
$T14 = 1636
$T15 = 1668
$T16 = 1700
$T17 = 1736
$T18 = 1764
$T19 = 1800
$T20 = 1828
$T21 = 1860
$T22 = 1896
$T23 = 1924
$T24 = 1960
tv778 = 1972
tv612 = 1972
tv579 = 1972
tv495 = 1972
tv461 = 1972
tv422 = 1972
tv376 = 1972
tv350 = 1972
tv335 = 1972
tv269 = 1972
tv207 = 1972
tv196 = 1972
tv163 = 1972
tv140 = 1972
tv94 = 1972
tv71 = 1972
tv628 = 1976
tv605 = 1976
tv578 = 1976
tv508 = 1976
tv488 = 1976
tv460 = 1976
tv431 = 1976
tv92 = 1976
tv95 = 1984
__$ArrayPad$ = 1992
id$ = 2032
flags$ = 2040
label$ = 2048
label_end$ = 2056
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z PROC		; ImGui::TreeNodeBehavior, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5777
$LN80:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2064				; 00000810H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 356				; 00000164H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+2104]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5778
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5779
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TreeNodeBe
; Line 5780
	xor	al, al
	jmp	$LN1@TreeNodeBe
$LN2@TreeNodeBe:
; Line 5782
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5783
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 5784
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN47@TreeNodeBe
	mov	BYTE PTR tv71[rbp], 1
	jmp	SHORT $LN48@TreeNodeBe
$LN47@TreeNodeBe:
	mov	BYTE PTR tv71[rbp], 0
$LN48@TreeNodeBe:
	movzx	eax, BYTE PTR tv71[rbp]
	mov	BYTE PTR display_frame$[rbp], al
; Line 5785
	movzx	eax, BYTE PTR display_frame$[rbp]
	test	eax, eax
	jne	SHORT $LN49@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN49@TreeNodeBe
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+272]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv94[rbp], xmm0
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	movss	DWORD PTR tv92[rbp], xmm0
	movss	xmm2, DWORD PTR tv94[rbp]
	movss	xmm1, DWORD PTR tv92[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv95[rbp], rax
	jmp	SHORT $LN50@TreeNodeBe
$LN49@TreeNodeBe:
	mov	rax, QWORD PTR style$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR $T13[rbp], rax
	lea	rax, QWORD PTR $T13[rbp]
	mov	QWORD PTR tv95[rbp], rax
$LN50@TreeNodeBe:
	mov	rax, QWORD PTR tv95[rbp]
	mov	QWORD PTR $T12[rbp], rax
	mov	rax, QWORD PTR $T12[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR padding$[rbp], rax
; Line 5787
	cmp	QWORD PTR label_end$[rbp], 0
	jne	SHORT $LN3@TreeNodeBe
; Line 5788
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_end$[rbp], rax
$LN3@TreeNodeBe:
; Line 5789
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR label_end$[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 5792
	movss	xmm0, DWORD PTR padding$[rbp+4]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv140[rbp], xmm0
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	mulss	xmm1, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+260]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	xmm1, DWORD PTR tv140[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR frame_height$[rbp], xmm0
; Line 5793
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
; Line 5794
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN51@TreeNodeBe
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+560]
	movss	DWORD PTR tv163[rbp], xmm0
	jmp	SHORT $LN52@TreeNodeBe
$LN51@TreeNodeBe:
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+216]
	movss	DWORD PTR tv163[rbp], xmm0
$LN52@TreeNodeBe:
	movss	xmm0, DWORD PTR tv163[rbp]
	movss	DWORD PTR frame_bb$[rbp], xmm0
; Line 5795
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	movss	DWORD PTR frame_bb$[rbp+4], xmm0
; Line 5796
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+568]
	movss	DWORD PTR frame_bb$[rbp+8], xmm0
; Line 5797
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	addss	xmm0, DWORD PTR frame_height$[rbp]
	movss	DWORD PTR frame_bb$[rbp+12], xmm0
; Line 5798
	movzx	eax, BYTE PTR display_frame$[rbp]
	test	eax, eax
	je	SHORT $LN4@TreeNodeBe
; Line 5802
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	mulss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR __real@3f800000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR frame_bb$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR frame_bb$[rbp], xmm0
; Line 5803
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR frame_bb$[rbp+8], xmm0
$LN4@TreeNodeBe:
; Line 5806
	movzx	eax, BYTE PTR display_frame$[rbp]
	test	eax, eax
	je	SHORT $LN53@TreeNodeBe
	movss	xmm0, DWORD PTR padding$[rbp]
	mulss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR tv196[rbp], xmm0
	jmp	SHORT $LN54@TreeNodeBe
$LN53@TreeNodeBe:
	movss	xmm0, DWORD PTR padding$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv196[rbp], xmm0
$LN54@TreeNodeBe:
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	addss	xmm0, DWORD PTR tv196[rbp]
	movss	DWORD PTR text_offset_x$[rbp], xmm0
; Line 5807
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+272]
	movss	xmm0, DWORD PTR padding$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR text_offset_y$[rbp], xmm0
; Line 5808
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN55@TreeNodeBe
	movss	xmm0, DWORD PTR padding$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv207[rbp], xmm0
	jmp	SHORT $LN56@TreeNodeBe
$LN55@TreeNodeBe:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv207[rbp], xmm0
$LN56@TreeNodeBe:
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	addss	xmm0, DWORD PTR tv207[rbp]
	movss	DWORD PTR text_width$[rbp], xmm0
; Line 5809
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	addss	xmm0, DWORD PTR text_offset_y$[rbp]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	addss	xmm1, DWORD PTR text_offset_x$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR text_pos$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5810
	movss	xmm2, DWORD PTR frame_height$[rbp]
	movss	xmm1, DWORD PTR text_width$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR padding$[rbp+4]
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 5813
	lea	rax, QWORD PTR interact_bb$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 5814
	movzx	eax, BYTE PTR display_frame$[rbp]
	test	eax, eax
	jne	SHORT $LN5@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 6144				; 00001800H
	test	eax, eax
	jne	SHORT $LN5@TreeNodeBe
; Line 5815
	movss	xmm0, DWORD PTR frame_bb$[rbp]
	addss	xmm0, DWORD PTR text_width$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR interact_bb$[rbp+8], xmm0
$LN5@TreeNodeBe:
; Line 5820
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN57@TreeNodeBe
	mov	BYTE PTR tv269[rbp], 1
	jmp	SHORT $LN58@TreeNodeBe
$LN57@TreeNodeBe:
	mov	BYTE PTR tv269[rbp], 0
$LN58@TreeNodeBe:
	movzx	eax, BYTE PTR tv269[rbp]
	mov	BYTE PTR is_leaf$[rbp], al
; Line 5821
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?TreeNodeBehaviorIsOpen@ImGui@@YA_NIH@Z	; ImGui::TreeNodeBehaviorIsOpen
	mov	BYTE PTR is_open$[rbp], al
; Line 5822
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN6@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7708]
	test	eax, eax
	jne	SHORT $LN6@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8192				; 00002000H
	test	eax, eax
	je	SHORT $LN6@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN6@TreeNodeBe
; Line 5823
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+392]
	mov	ecx, 1
	mov	DWORD PTR tv778[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv778[rbp]
	shl	eax, cl
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+396]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+396], eax
$LN6@TreeNodeBe:
; Line 5825
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR interact_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	mov	BYTE PTR item_add$[rbp], al
; Line 5826
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	or	eax, 2
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+296], eax
; Line 5827
	mov	rax, QWORD PTR window$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	lea	rdi, QWORD PTR [rax+316]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 5829
	movzx	eax, BYTE PTR item_add$[rbp]
	test	eax, eax
	jne	SHORT $LN7@TreeNodeBe
; Line 5831
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN8@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN8@TreeNodeBe
; Line 5832
	mov	ecx, DWORD PTR id$[rbp]
	call	?TreePushOverrideID@ImGui@@YAXI@Z	; ImGui::TreePushOverrideID
$LN8@TreeNodeBe:
; Line 5834
	movzx	eax, BYTE PTR is_open$[rbp]
	jmp	$LN1@TreeNodeBe
$LN7@TreeNodeBe:
; Line 5837
	mov	DWORD PTR button_flags$[rbp], 0
; Line 5838
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN9@TreeNodeBe
; Line 5839
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 12
	mov	DWORD PTR button_flags$[rbp], eax
$LN9@TreeNodeBe:
; Line 5840
	movzx	eax, BYTE PTR is_leaf$[rbp]
	test	eax, eax
	jne	SHORT $LN10@TreeNodeBe
; Line 5841
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 9
	mov	DWORD PTR button_flags$[rbp], eax
$LN10@TreeNodeBe:
; Line 5846
	movss	xmm0, DWORD PTR text_pos$[rbp]
	subss	xmm0, DWORD PTR text_offset_x$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	subss	xmm0, DWORD PTR [rax+96]
	movss	DWORD PTR arrow_hit_x1$[rbp], xmm0
; Line 5847
	movss	xmm0, DWORD PTR text_pos$[rbp]
	subss	xmm0, DWORD PTR text_offset_x$[rbp]
	movss	xmm1, DWORD PTR padding$[rbp]
	mulss	xmm1, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	addss	xmm0, DWORD PTR [rax+96]
	movss	DWORD PTR arrow_hit_x2$[rbp], xmm0
; Line 5848
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	comiss	xmm0, DWORD PTR arrow_hit_x1$[rbp]
	jb	SHORT $LN59@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR arrow_hit_x2$[rbp]
	comiss	xmm0, DWORD PTR [rax+296]
	jbe	SHORT $LN59@TreeNodeBe
	mov	BYTE PTR tv335[rbp], 1
	jmp	SHORT $LN60@TreeNodeBe
$LN59@TreeNodeBe:
	mov	BYTE PTR tv335[rbp], 0
$LN60@TreeNodeBe:
	movzx	eax, BYTE PTR tv335[rbp]
	mov	BYTE PTR is_mouse_x_over_arrow$[rbp], al
; Line 5849
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7192]
	cmp	QWORD PTR window$[rbp], rax
	jne	SHORT $LN12@TreeNodeBe
	movzx	eax, BYTE PTR is_mouse_x_over_arrow$[rbp]
	test	eax, eax
	jne	SHORT $LN11@TreeNodeBe
$LN12@TreeNodeBe:
; Line 5850
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 16
	mov	DWORD PTR button_flags$[rbp], eax
$LN11@TreeNodeBe:
; Line 5861
	movzx	eax, BYTE PTR is_mouse_x_over_arrow$[rbp]
	test	eax, eax
	je	SHORT $LN13@TreeNodeBe
; Line 5862
	mov	eax, DWORD PTR button_flags$[rbp]
	or	eax, 16
	mov	DWORD PTR button_flags$[rbp], eax
	jmp	SHORT $LN14@TreeNodeBe
$LN13@TreeNodeBe:
; Line 5863
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN15@TreeNodeBe
; Line 5864
	mov	eax, DWORD PTR button_flags$[rbp]
	or	eax, 288				; 00000120H
	mov	DWORD PTR button_flags$[rbp], eax
	jmp	SHORT $LN16@TreeNodeBe
$LN15@TreeNodeBe:
; Line 5866
	mov	eax, DWORD PTR button_flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR button_flags$[rbp], eax
$LN16@TreeNodeBe:
$LN14@TreeNodeBe:
; Line 5868
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN61@TreeNodeBe
	mov	DWORD PTR tv350[rbp], 1
	jmp	SHORT $LN62@TreeNodeBe
$LN61@TreeNodeBe:
	mov	DWORD PTR tv350[rbp], 0
$LN62@TreeNodeBe:
	movzx	eax, BYTE PTR tv350[rbp]
	mov	BYTE PTR selected$[rbp], al
; Line 5869
	movzx	eax, BYTE PTR selected$[rbp]
	mov	BYTE PTR was_selected$[rbp], al
; Line 5872
	mov	eax, DWORD PTR button_flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR interact_bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 5873
	mov	BYTE PTR toggled$[rbp], 0
; Line 5874
	movzx	eax, BYTE PTR is_leaf$[rbp]
	test	eax, eax
	jne	$LN17@TreeNodeBe
; Line 5876
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	$LN18@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+8136], ecx
	je	$LN18@TreeNodeBe
; Line 5878
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 192				; 000000c0H
	test	eax, eax
	je	SHORT $LN21@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	jne	SHORT $LN20@TreeNodeBe
$LN21@TreeNodeBe:
; Line 5879
	mov	BYTE PTR toggled$[rbp], 1
$LN20@TreeNodeBe:
; Line 5880
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN22@TreeNodeBe
; Line 5881
	movzx	eax, BYTE PTR is_mouse_x_over_arrow$[rbp]
	test	eax, eax
	je	SHORT $LN63@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7711]
	test	eax, eax
	jne	SHORT $LN63@TreeNodeBe
	mov	DWORD PTR tv376[rbp], 1
	jmp	SHORT $LN64@TreeNodeBe
$LN63@TreeNodeBe:
	mov	DWORD PTR tv376[rbp], 0
$LN64@TreeNodeBe:
	movzx	eax, BYTE PTR toggled$[rbp]
	or	eax, DWORD PTR tv376[rbp]
	mov	BYTE PTR toggled$[rbp], al
$LN22@TreeNodeBe:
; Line 5882
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN23@TreeNodeBe
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1061]
	test	eax, eax
	je	SHORT $LN23@TreeNodeBe
; Line 5883
	mov	BYTE PTR toggled$[rbp], 1
$LN23@TreeNodeBe:
; Line 5884
	jmp	SHORT $LN19@TreeNodeBe
$LN18@TreeNodeBe:
; Line 5885
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN24@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+8136], ecx
	jne	SHORT $LN24@TreeNodeBe
; Line 5887
	mov	eax, DWORD PTR button_flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	SHORT $LN65@TreeNodeBe
	mov	eax, DWORD PTR ?__LINE__Var@?0??TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z@4JA
	add	eax, 110				; 0000006eH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GM@OMMPBCGC@?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN65@TreeNodeBe:
; Line 5888
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN25@TreeNodeBe
; Line 5889
	mov	BYTE PTR toggled$[rbp], 1
$LN25@TreeNodeBe:
$LN24@TreeNodeBe:
$LN19@TreeNodeBe:
; Line 5892
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7632], ecx
	jne	SHORT $LN26@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7736]
	test	eax, eax
	je	SHORT $LN26@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 0
	jne	SHORT $LN26@TreeNodeBe
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN26@TreeNodeBe
; Line 5894
	mov	BYTE PTR toggled$[rbp], 1
; Line 5895
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN26@TreeNodeBe:
; Line 5897
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7632], ecx
	jne	SHORT $LN27@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7736]
	test	eax, eax
	je	SHORT $LN27@TreeNodeBe
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 1
	jne	SHORT $LN27@TreeNodeBe
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN27@TreeNodeBe
; Line 5899
	mov	BYTE PTR toggled$[rbp], 1
; Line 5900
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN27@TreeNodeBe:
; Line 5903
	movzx	eax, BYTE PTR toggled$[rbp]
	test	eax, eax
	je	SHORT $LN28@TreeNodeBe
; Line 5905
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN66@TreeNodeBe
	mov	DWORD PTR tv422[rbp], 1
	jmp	SHORT $LN67@TreeNodeBe
$LN66@TreeNodeBe:
	mov	DWORD PTR tv422[rbp], 0
$LN67@TreeNodeBe:
	movzx	eax, BYTE PTR tv422[rbp]
	mov	BYTE PTR is_open$[rbp], al
; Line 5906
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+416]
	mov	QWORD PTR tv431[rbp], rax
	movzx	eax, BYTE PTR is_open$[rbp]
	mov	r8d, eax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv431[rbp]
	call	?SetInt@ImGuiStorage@@QEAAXIH@Z		; ImGuiStorage::SetInt
; Line 5907
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	or	eax, 16
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+296], eax
$LN28@TreeNodeBe:
$LN17@TreeNodeBe:
; Line 5910
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN29@TreeNodeBe
; Line 5911
	call	?SetItemAllowOverlap@ImGui@@YAXXZ	; ImGui::SetItemAllowOverlap
$LN29@TreeNodeBe:
; Line 5914
	movzx	eax, BYTE PTR selected$[rbp]
	movzx	ecx, BYTE PTR was_selected$[rbp]
	cmp	eax, ecx
	je	SHORT $LN30@TreeNodeBe
; Line 5915
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	or	eax, 8
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+296], eax
$LN30@TreeNodeBe:
; Line 5918
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$[rbp], eax
; Line 5919
	mov	DWORD PTR nav_highlight_flags$[rbp], 2
; Line 5920
	movzx	eax, BYTE PTR display_frame$[rbp]
	test	eax, eax
	je	$LN31@TreeNodeBe
; Line 5923
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN68@TreeNodeBe
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN68@TreeNodeBe
	mov	DWORD PTR tv461[rbp], 26
	jmp	SHORT $LN71@TreeNodeBe
$LN68@TreeNodeBe:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN69@TreeNodeBe
	mov	DWORD PTR tv460[rbp], 25
	jmp	SHORT $LN70@TreeNodeBe
$LN69@TreeNodeBe:
	mov	DWORD PTR tv460[rbp], 24
$LN70@TreeNodeBe:
	mov	eax, DWORD PTR tv460[rbp]
	mov	DWORD PTR tv461[rbp], eax
$LN71@TreeNodeBe:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv461[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col$10[rbp], eax
; Line 5924
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR bg_col$10[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 5925
	mov	r8d, DWORD PTR nav_highlight_flags$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 5926
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	$LN33@TreeNodeBe
; Line 5927
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR text_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR text_offset_x$[rbp]
	mulss	xmm1, DWORD PTR __real@3f19999a
	movss	xmm2, DWORD PTR text_pos$[rbp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T17[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv488[rbp], rax
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T17[rbp]
	mov	rcx, QWORD PTR tv488[rbp]
	call	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
	jmp	$LN34@TreeNodeBe
$LN33@TreeNodeBe:
; Line 5928
	movzx	eax, BYTE PTR is_leaf$[rbp]
	test	eax, eax
	jne	$LN35@TreeNodeBe
; Line 5929
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN72@TreeNodeBe
	mov	DWORD PTR tv495[rbp], 3
	jmp	SHORT $LN73@TreeNodeBe
$LN72@TreeNodeBe:
	mov	DWORD PTR tv495[rbp], 1
$LN73@TreeNodeBe:
	movss	xmm0, DWORD PTR text_pos$[rbp]
	subss	xmm0, DWORD PTR text_offset_x$[rbp]
	addss	xmm0, DWORD PTR padding$[rbp]
	movss	xmm2, DWORD PTR text_pos$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T19[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv508[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv495[rbp]
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T19[rbp]
	mov	rcx, QWORD PTR tv508[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
	jmp	SHORT $LN36@TreeNodeBe
$LN35@TreeNodeBe:
; Line 5931
	movss	xmm0, DWORD PTR text_pos$[rbp]
	subss	xmm0, DWORD PTR text_offset_x$[rbp]
	movss	DWORD PTR text_pos$[rbp], xmm0
$LN36@TreeNodeBe:
$LN34@TreeNodeBe:
; Line 5932
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN37@TreeNodeBe
; Line 5933
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	addss	xmm0, DWORD PTR [rcx+56]
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR frame_bb$[rbp+8], xmm0
$LN37@TreeNodeBe:
; Line 5935
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN38@TreeNodeBe
; Line 5936
	lea	rdx, OFFSET FLAT:??_C@_03OIJOKPOL@?$CD?$CD?$CD@
	lea	rcx, OFFSET FLAT:??_C@_03OIJOKPOL@?$CD?$CD?$CD@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
$LN38@TreeNodeBe:
; Line 5937
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR label_size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR label_end$[rbp]
	mov	r8, QWORD PTR label$[rbp]
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR text_pos$[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 5938
	jmp	$LN32@TreeNodeBe
$LN31@TreeNodeBe:
; Line 5942
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN40@TreeNodeBe
	movzx	eax, BYTE PTR selected$[rbp]
	test	eax, eax
	je	$LN39@TreeNodeBe
$LN40@TreeNodeBe:
; Line 5944
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN74@TreeNodeBe
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN74@TreeNodeBe
	mov	DWORD PTR tv579[rbp], 26
	jmp	SHORT $LN77@TreeNodeBe
$LN74@TreeNodeBe:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN75@TreeNodeBe
	mov	DWORD PTR tv578[rbp], 25
	jmp	SHORT $LN76@TreeNodeBe
$LN75@TreeNodeBe:
	mov	DWORD PTR tv578[rbp], 24
$LN76@TreeNodeBe:
	mov	eax, DWORD PTR tv578[rbp]
	mov	DWORD PTR tv579[rbp], eax
$LN77@TreeNodeBe:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv579[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col$11[rbp], eax
; Line 5945
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8d, DWORD PTR bg_col$11[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
$LN39@TreeNodeBe:
; Line 5947
	mov	r8d, DWORD PTR nav_highlight_flags$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 5948
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	$LN41@TreeNodeBe
; Line 5949
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR text_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR text_offset_x$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR text_pos$[rbp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T22[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv605[rbp], rax
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T22[rbp]
	mov	rcx, QWORD PTR tv605[rbp]
	call	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
	jmp	$LN42@TreeNodeBe
$LN41@TreeNodeBe:
; Line 5950
	movzx	eax, BYTE PTR is_leaf$[rbp]
	test	eax, eax
	jne	$LN43@TreeNodeBe
; Line 5951
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN78@TreeNodeBe
	mov	DWORD PTR tv612[rbp], 3
	jmp	SHORT $LN79@TreeNodeBe
$LN78@TreeNodeBe:
	mov	DWORD PTR tv612[rbp], 1
$LN79@TreeNodeBe:
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3e19999a
	movss	xmm1, DWORD PTR text_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR text_pos$[rbp]
	subss	xmm1, DWORD PTR text_offset_x$[rbp]
	addss	xmm1, DWORD PTR padding$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T24[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv628[rbp], rax
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv612[rbp]
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T24[rbp]
	mov	rcx, QWORD PTR tv628[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
$LN43@TreeNodeBe:
$LN42@TreeNodeBe:
; Line 5952
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN44@TreeNodeBe
; Line 5953
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_01PPODPGHN@?$DO@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
$LN44@TreeNodeBe:
; Line 5954
	xor	r9d, r9d
	mov	r8, QWORD PTR label_end$[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR text_pos$[rbp]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN32@TreeNodeBe:
; Line 5957
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN45@TreeNodeBe
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN45@TreeNodeBe
; Line 5958
	mov	ecx, DWORD PTR id$[rbp]
	call	?TreePushOverrideID@ImGui@@YAXI@Z	; ImGui::TreePushOverrideID
$LN45@TreeNodeBe:
; Line 5960
	movzx	eax, BYTE PTR is_open$[rbp]
$LN1@TreeNodeBe:
; Line 5961
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2000]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z ENDP		; ImGui::TreeNodeBehavior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
item_flags_backup$ = 68
item_add$ = 100
hovered$ = 132
held$ = 164
bb_interact$ = 200
bb_render$ = 248
mouse_delta_2d$8 = 296
mouse_delta$9 = 324
size_1_maximum_delta$10 = 356
size_2_maximum_delta$11 = 388
col$ = 420
$T12 = 840
$T13 = 868
$T14 = 900
$T15 = 932
$T16 = 968
$T17 = 996
$T18 = 1028
tv215 = 1044
tv161 = 1044
tv145 = 1044
tv257 = 1048
tv212 = 1048
tv203 = 1048
tv88 = 1048
__$ArrayPad$ = 1056
bb$ = 1104
id$ = 1112
axis$ = 1120
size1$ = 1128
size2$ = 1136
min_size1$ = 1144
min_size2$ = 1152
hover_extend$ = 1160
hover_visibility_delay$ = 1168
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z PROC ; ImGui::SplitterBehavior, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1432
$LN29:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1120				; 00000460H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 172				; 000000acH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1433
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1434
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 1436
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	mov	DWORD PTR item_flags_backup$[rbp], eax
; Line 1437
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	or	eax, 24
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7236], eax
; Line 1438
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	mov	BYTE PTR item_add$[rbp], al
; Line 1439
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR item_flags_backup$[rbp]
	mov	DWORD PTR [rax+7236], ecx
; Line 1440
	movzx	eax, BYTE PTR item_add$[rbp]
	test	eax, eax
	jne	SHORT $LN2@SplitterBe
; Line 1441
	xor	al, al
	jmp	$LN1@SplitterBe
$LN2@SplitterBe:
; Line 1444
	lea	rax, QWORD PTR bb_interact$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR bb$[rbp]
	mov	ecx, 16
	rep movsb
; Line 1445
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN14@SplitterBe
	movss	xmm2, DWORD PTR hover_extend$[rbp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv88[rbp], rax
	jmp	SHORT $LN15@SplitterBe
$LN14@SplitterBe:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR hover_extend$[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv88[rbp], rax
$LN15@SplitterBe:
	mov	rax, QWORD PTR tv88[rbp]
	mov	QWORD PTR $T12[rbp], rax
	mov	rdx, QWORD PTR $T12[rbp]
	lea	rcx, QWORD PTR bb_interact$[rbp]
	call	?Expand@ImRect@@QEAAXAEBUImVec2@@@Z	; ImRect::Expand
; Line 1446
	mov	DWORD PTR [rsp+32], 6144		; 00001800H
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb_interact$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
; Line 1447
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN3@SplitterBe
; Line 1448
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	or	eax, 1
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+296], eax
$LN3@SplitterBe:
; Line 1449
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN4@SplitterBe
; Line 1450
	call	?SetItemAllowOverlap@ImGui@@YAXXZ	; ImGui::SetItemAllowOverlap
$LN4@SplitterBe:
; Line 1452
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	jne	SHORT $LN6@SplitterBe
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	jne	SHORT $LN5@SplitterBe
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7244], ecx
	jne	SHORT $LN5@SplitterBe
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7252]
	comiss	xmm0, DWORD PTR hover_visibility_delay$[rbp]
	jb	SHORT $LN5@SplitterBe
$LN6@SplitterBe:
; Line 1453
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN16@SplitterBe
	mov	DWORD PTR tv145[rbp], 3
	jmp	SHORT $LN17@SplitterBe
$LN16@SplitterBe:
	mov	DWORD PTR tv145[rbp], 4
$LN17@SplitterBe:
	mov	ecx, DWORD PTR tv145[rbp]
	call	?SetMouseCursor@ImGui@@YAXH@Z		; ImGui::SetMouseCursor
$LN5@SplitterBe:
; Line 1455
	lea	rax, QWORD PTR bb_render$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR bb$[rbp]
	mov	ecx, 16
	rep movsb
; Line 1456
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	$LN7@SplitterBe
; Line 1458
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7296				; 00001c80H
	mov	rcx, QWORD PTR g$[rbp]
	add	rcx, 296				; 00000128H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T15[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	lea	r8, QWORD PTR bb_interact$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR mouse_delta_2d$8[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 1459
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN18@SplitterBe
	movss	xmm0, DWORD PTR mouse_delta_2d$8[rbp+4]
	movss	DWORD PTR tv161[rbp], xmm0
	jmp	SHORT $LN19@SplitterBe
$LN18@SplitterBe:
	movss	xmm0, DWORD PTR mouse_delta_2d$8[rbp]
	movss	DWORD PTR tv161[rbp], xmm0
$LN19@SplitterBe:
	movss	xmm0, DWORD PTR tv161[rbp]
	movss	DWORD PTR mouse_delta$9[rbp], xmm0
; Line 1462
	mov	rax, QWORD PTR size1$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR min_size1$[rbp]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR size_1_maximum_delta$10[rbp], xmm0
; Line 1463
	mov	rax, QWORD PTR size2$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR min_size2$[rbp]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR size_2_maximum_delta$11[rbp], xmm0
; Line 1464
	movss	xmm0, DWORD PTR size_1_maximum_delta$10[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	comiss	xmm0, DWORD PTR mouse_delta$9[rbp]
	jbe	SHORT $LN8@SplitterBe
; Line 1465
	movss	xmm0, DWORD PTR size_1_maximum_delta$10[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR mouse_delta$9[rbp], xmm0
$LN8@SplitterBe:
; Line 1466
	movss	xmm0, DWORD PTR mouse_delta$9[rbp]
	comiss	xmm0, DWORD PTR size_2_maximum_delta$11[rbp]
	jbe	SHORT $LN9@SplitterBe
; Line 1467
	movss	xmm0, DWORD PTR size_2_maximum_delta$11[rbp]
	movss	DWORD PTR mouse_delta$9[rbp], xmm0
$LN9@SplitterBe:
; Line 1470
	movss	xmm0, DWORD PTR mouse_delta$9[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN28@SplitterBe
	je	$LN10@SplitterBe
$LN28@SplitterBe:
; Line 1472
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR mouse_delta$9[rbp]
	jbe	SHORT $LN11@SplitterBe
; Line 1473
	mov	rax, QWORD PTR size1$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR mouse_delta$9[rbp]
	comiss	xmm0, DWORD PTR min_size1$[rbp]
	jae	SHORT $LN20@SplitterBe
	mov	eax, DWORD PTR ?__LINE__Var@?0??SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z@4JA
	add	eax, 41					; 00000029H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EE@HJGLFFIG@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA1?$AA?5?$AA?$CL?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@SplitterBe:
$LN11@SplitterBe:
; Line 1474
	movss	xmm0, DWORD PTR mouse_delta$9[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@SplitterBe
; Line 1475
	mov	rax, QWORD PTR size2$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR mouse_delta$9[rbp]
	comiss	xmm0, DWORD PTR min_size2$[rbp]
	jae	SHORT $LN21@SplitterBe
	mov	eax, DWORD PTR ?__LINE__Var@?0??SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z@4JA
	add	eax, 43					; 0000002bH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EE@LBEKBPGJ@?$AA?$CK?$AAs?$AAi?$AAz?$AAe?$AA2?$AA?5?$AA?9?$AA?5?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@SplitterBe:
$LN12@SplitterBe:
; Line 1476
	mov	rax, QWORD PTR size1$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR mouse_delta$9[rbp]
	mov	rax, QWORD PTR size1$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 1477
	mov	rax, QWORD PTR size2$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR mouse_delta$9[rbp]
	mov	rax, QWORD PTR size2$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 1478
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN22@SplitterBe
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR mouse_delta$9[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv203[rbp], rax
	jmp	SHORT $LN23@SplitterBe
$LN22@SplitterBe:
	movss	xmm2, DWORD PTR mouse_delta$9[rbp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv203[rbp], rax
$LN23@SplitterBe:
	mov	rax, QWORD PTR tv203[rbp]
	mov	QWORD PTR $T16[rbp], rax
	mov	rdx, QWORD PTR $T16[rbp]
	lea	rcx, QWORD PTR bb_render$[rbp]
	call	?Translate@ImRect@@QEAAXAEBUImVec2@@@Z	; ImRect::Translate
; Line 1479
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN10@SplitterBe:
$LN7@SplitterBe:
; Line 1484
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN26@SplitterBe
	mov	DWORD PTR tv215[rbp], 29
	jmp	SHORT $LN27@SplitterBe
$LN26@SplitterBe:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN24@SplitterBe
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7252]
	comiss	xmm0, DWORD PTR hover_visibility_delay$[rbp]
	jb	SHORT $LN24@SplitterBe
	mov	DWORD PTR tv212[rbp], 28
	jmp	SHORT $LN25@SplitterBe
$LN24@SplitterBe:
	mov	DWORD PTR tv212[rbp], 27
$LN25@SplitterBe:
	mov	eax, DWORD PTR tv212[rbp]
	mov	DWORD PTR tv215[rbp], eax
$LN27@SplitterBe:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv215[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$[rbp], eax
; Line 1485
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv257[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	lea	r8, QWORD PTR bb_render$[rbp+8]
	lea	rdx, QWORD PTR bb_render$[rbp]
	mov	rcx, QWORD PTR tv257[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 1487
	movzx	eax, BYTE PTR held$[rbp]
$LN1@SplitterBe:
; Line 1488
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1072]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?SplitterBehavior@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAM2MMMM@Z ENDP ; ImGui::SplitterBehavior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z
_TEXT	SEGMENT
g$ = 8
v32$7 = 36
r$8 = 68
v32$9 = 100
r$10 = 132
v32$11 = 164
r$12 = 196
v32$13 = 228
r$14 = 260
tv78 = 468
__$ArrayPad$ = 472
bb$ = 512
id$ = 520
data_type$ = 528
p_v$ = 536
p_min$ = 544
p_max$ = 552
format$ = 560
flags$ = 568
out_grab_bb$ = 576
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z PROC ; ImGui::SliderBehavior, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2952
$LN37:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 74					; 0000004aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2954
	cmp	DWORD PTR flags$[rbp], 1
	je	SHORT $LN22@SliderBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1879048207				; 7000000fH
	test	eax, eax
	jne	SHORT $LN23@SliderBeha
$LN22@SliderBeha:
	lea	rax, OFFSET FLAT:??_C@_0JN@OMBPOBCE@Invalid?5ImGuiSliderFlags?5flag?$CB?5@
	test	rax, rax
	jne	SHORT $LN24@SliderBeha
$LN23@SliderBeha:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BLO@DBPGJKEK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN24@SliderBeha:
; Line 2956
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2957
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN5@SliderBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN4@SliderBeha
$LN5@SliderBeha:
; Line 2958
	xor	al, al
	jmp	$LN1@SliderBeha
$LN4@SliderBeha:
; Line 2960
	mov	eax, DWORD PTR data_type$[rbp]
	mov	DWORD PTR tv78[rbp], eax
	cmp	DWORD PTR tv78[rbp], 9
	ja	$LN2@SliderBeha
	movsxd	rax, DWORD PTR tv78[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN36@SliderBeha[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@SliderBeha:
; Line 2962
	mov	rax, QWORD PTR p_v$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR v32$7[rbp], eax
	mov	rax, QWORD PTR p_max$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR p_min$[rbp]
	movsx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rdx
	mov	edx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], edx
	mov	rdx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rdx
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	lea	r9, QWORD PTR v32$7[rbp]
	mov	r8d, 4
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<int,int,float>
	mov	BYTE PTR r$8[rbp], al
	movzx	eax, BYTE PTR r$8[rbp]
	test	eax, eax
	je	SHORT $LN7@SliderBeha
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, BYTE PTR v32$7[rbp]
	mov	BYTE PTR [rax], cl
$LN7@SliderBeha:
	movzx	eax, BYTE PTR r$8[rbp]
	jmp	$LN1@SliderBeha
$LN8@SliderBeha:
; Line 2963
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR v32$9[rbp], eax
	mov	rax, QWORD PTR p_max$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	rcx, QWORD PTR p_min$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	mov	rdx, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rdx
	mov	edx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], edx
	mov	rdx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rdx
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	lea	r9, QWORD PTR v32$9[rbp]
	mov	r8d, 5
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<unsigned int,int,float>
	mov	BYTE PTR r$10[rbp], al
	movzx	eax, BYTE PTR r$10[rbp]
	test	eax, eax
	je	SHORT $LN9@SliderBeha
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, BYTE PTR v32$9[rbp]
	mov	BYTE PTR [rax], cl
$LN9@SliderBeha:
	movzx	eax, BYTE PTR r$10[rbp]
	jmp	$LN1@SliderBeha
$LN10@SliderBeha:
; Line 2964
	mov	rax, QWORD PTR p_v$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR v32$11[rbp], eax
	mov	rax, QWORD PTR p_max$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR p_min$[rbp]
	movsx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rdx
	mov	edx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], edx
	mov	rdx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rdx
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	lea	r9, QWORD PTR v32$11[rbp]
	mov	r8d, 4
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<int,int,float>
	mov	BYTE PTR r$12[rbp], al
	movzx	eax, BYTE PTR r$12[rbp]
	test	eax, eax
	je	SHORT $LN11@SliderBeha
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, WORD PTR v32$11[rbp]
	mov	WORD PTR [rax], cx
$LN11@SliderBeha:
	movzx	eax, BYTE PTR r$12[rbp]
	jmp	$LN1@SliderBeha
$LN12@SliderBeha:
; Line 2965
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR v32$13[rbp], eax
	mov	rax, QWORD PTR p_max$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR p_min$[rbp]
	movzx	ecx, WORD PTR [rcx]
	mov	rdx, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rdx
	mov	edx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], edx
	mov	rdx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rdx
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	lea	r9, QWORD PTR v32$13[rbp]
	mov	r8d, 5
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<unsigned int,int,float>
	mov	BYTE PTR r$14[rbp], al
	movzx	eax, BYTE PTR r$14[rbp]
	test	eax, eax
	je	SHORT $LN13@SliderBeha
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, WORD PTR v32$13[rbp]
	mov	WORD PTR [rax], cx
$LN13@SliderBeha:
	movzx	eax, BYTE PTR r$14[rbp]
	jmp	$LN1@SliderBeha
$LN14@SliderBeha:
; Line 2967
	mov	rax, QWORD PTR p_min$[rbp]
	cmp	DWORD PTR [rax], -1073741824		; ffffffffc0000000H
	jl	SHORT $LN25@SliderBeha
	mov	rax, QWORD PTR p_max$[rbp]
	cmp	DWORD PTR [rax], 1073741823		; 3fffffffH
	jle	SHORT $LN26@SliderBeha
$LN25@SliderBeha:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1KC@MGDFLCCP@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA3?$AA2?$AA?$CK?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN26@SliderBeha:
; Line 2968
	mov	rax, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR p_v$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@HHM@ImGui@@YA_NAEBUImRect@@IHPEAHHHPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<int,int,float>
	jmp	$LN1@SliderBeha
$LN15@SliderBeha:
; Line 2970
	mov	rax, QWORD PTR p_max$[rbp]
	cmp	DWORD PTR [rax], 2147483647		; 7fffffffH
	jbe	SHORT $LN27@SliderBeha
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EO@DMFGPFFK@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA3?$AA2?$AA?$CK?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@SliderBeha:
; Line 2971
	mov	rax, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR p_v$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@IHM@ImGui@@YA_NAEBUImRect@@IHPEAIIIPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<unsigned int,int,float>
	jmp	$LN1@SliderBeha
$LN16@SliderBeha:
; Line 2973
	mov	rax, QWORD PTR p_min$[rbp]
	mov	rcx, -4611686018427387904		; c000000000000000H
	cmp	QWORD PTR [rax], rcx
	jl	SHORT $LN28@SliderBeha
	mov	rax, QWORD PTR p_max$[rbp]
	mov	rcx, 4611686018427387903		; 3fffffffffffffffH
	cmp	QWORD PTR [rax], rcx
	jle	SHORT $LN29@SliderBeha
$LN28@SliderBeha:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 21
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1KC@IBFLFJE@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAS?$AA6?$AA4?$AA?$CK?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@SliderBeha:
; Line 2974
	mov	rax, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_v$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@_J_JN@ImGui@@YA_NAEBUImRect@@IHPEA_J_J2PEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<__int64,__int64,double>
	jmp	$LN1@SliderBeha
$LN17@SliderBeha:
; Line 2976
	mov	rax, QWORD PTR p_max$[rbp]
	mov	rcx, 9223372036854775807		; 7fffffffffffffffH
	cmp	QWORD PTR [rax], rcx
	jbe	SHORT $LN30@SliderBeha
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 24
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EO@JNOADGHA@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAI?$AAm?$AAU?$AA6?$AA4?$AA?$CK?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN30@SliderBeha:
; Line 2977
	mov	rax, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_v$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@_K_JN@ImGui@@YA_NAEBUImRect@@IHPEA_K_K2PEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<unsigned __int64,__int64,double>
	jmp	$LN1@SliderBeha
$LN18@SliderBeha:
; Line 2979
	mov	rax, QWORD PTR p_min$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR __real@feffffff
	jb	SHORT $LN31@SliderBeha
	mov	rax, QWORD PTR p_max$[rbp]
	movss	xmm0, DWORD PTR __real@7effffff
	comiss	xmm0, DWORD PTR [rax]
	jae	SHORT $LN32@SliderBeha
$LN31@SliderBeha:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 27
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1MI@EKJKCIKJ@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAf?$AAl?$AAo?$AAa?$AAt?$AA?$CK?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN32@SliderBeha:
; Line 2980
	mov	rax, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR p_min$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR p_v$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@MMM@ImGui@@YA_NAEBUImRect@@IHPEAMMMPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<float,float,float>
	jmp	$LN1@SliderBeha
$LN19@SliderBeha:
; Line 2982
	mov	rax, QWORD PTR p_min$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	comisd	xmm0, QWORD PTR __real@ffdfffffffffffff
	jb	SHORT $LN33@SliderBeha
	mov	rax, QWORD PTR p_max$[rbp]
	movsd	xmm0, QWORD PTR __real@7fdfffffffffffff
	comisd	xmm0, QWORD PTR [rax]
	jae	SHORT $LN34@SliderBeha
$LN33@SliderBeha:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 30
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1OI@EDKIIBCG@?$AA?$CK?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AA?5?$AAd?$AAo?$AAu?$AAb?$AAl?$AAe?$AA?$CK@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN34@SliderBeha:
; Line 2983
	mov	rax, QWORD PTR out_grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR p_min$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR p_v$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	??$SliderBehaviorT@NNN@ImGui@@YA_NAEBUImRect@@IHPEANNNPEBDHPEAU1@@Z ; ImGui::SliderBehaviorT<double,double,double>
	jmp	SHORT $LN1@SliderBeha
$LN2@SliderBeha:
; Line 2986
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN35@SliderBeha
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU3@@Z@4JA
	add	eax, 34					; 00000022H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN35@SliderBeha:
; Line 2987
	xor	al, al
$LN1@SliderBeha:
; Line 2988
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
$LN36@SliderBeha:
	DD	$LN6@SliderBeha
	DD	$LN8@SliderBeha
	DD	$LN10@SliderBeha
	DD	$LN12@SliderBeha
	DD	$LN14@SliderBeha
	DD	$LN15@SliderBeha
	DD	$LN16@SliderBeha
	DD	$LN17@SliderBeha
	DD	$LN18@SliderBeha
	DD	$LN19@SliderBeha
?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z ENDP ; ImGui::SliderBehavior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z
_TEXT	SEGMENT
g$ = 8
v32$7 = 36
r$8 = 68
v32$9 = 100
r$10 = 132
v32$11 = 164
r$12 = 196
v32$13 = 228
r$14 = 260
tv129 = 468
tv297 = 472
tv283 = 472
tv269 = 472
tv255 = 472
tv241 = 472
tv227 = 472
tv211 = 472
tv190 = 472
tv169 = 472
tv148 = 472
tv288 = 480
tv274 = 480
tv260 = 480
tv246 = 480
tv232 = 480
tv218 = 480
tv198 = 480
tv177 = 480
tv156 = 480
tv135 = 480
tv277 = 484
tv235 = 484
tv221 = 484
tv209 = 484
tv188 = 484
tv167 = 484
tv146 = 484
tv291 = 488
tv263 = 488
tv249 = 488
tv202 = 488
tv181 = 488
tv160 = 488
tv139 = 488
__$ArrayPad$ = 496
id$ = 544
data_type$ = 552
p_v$ = 560
v_speed$ = 568
p_min$ = 576
p_max$ = 584
format$ = 592
flags$ = 600
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z PROC	; ImGui::DragBehavior, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2340
$LN72:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 584				; 00000248H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+616]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2342
	cmp	DWORD PTR flags$[rbp], 1
	je	SHORT $LN27@DragBehavi
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1879048207				; 7000000fH
	test	eax, eax
	jne	SHORT $LN28@DragBehavi
$LN27@DragBehavi:
	lea	rax, OFFSET FLAT:??_C@_0JN@LHPDPGJG@Invalid?5ImGuiSliderFlags?5flags?$CB@
	test	rax, rax
	jne	SHORT $LN29@DragBehavi
$LN28@DragBehavi:
	mov	eax, DWORD PTR ?__LINE__Var@?0??DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BLO@GENGLDPL@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@DragBehavi:
; Line 2344
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2345
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN4@DragBehavi
; Line 2347
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	SHORT $LN5@DragBehavi
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	jne	SHORT $LN5@DragBehavi
; Line 2348
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
	jmp	SHORT $LN6@DragBehavi
$LN5@DragBehavi:
; Line 2349
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	SHORT $LN7@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7648], ecx
	jne	SHORT $LN7@DragBehavi
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	jne	SHORT $LN7@DragBehavi
; Line 2350
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN7@DragBehavi:
$LN6@DragBehavi:
$LN4@DragBehavi:
; Line 2352
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN8@DragBehavi
; Line 2353
	xor	al, al
	jmp	$LN1@DragBehavi
$LN8@DragBehavi:
; Line 2354
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN10@DragBehavi
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN9@DragBehavi
$LN10@DragBehavi:
; Line 2355
	xor	al, al
	jmp	$LN1@DragBehavi
$LN9@DragBehavi:
; Line 2357
	mov	eax, DWORD PTR data_type$[rbp]
	mov	DWORD PTR tv129[rbp], eax
	cmp	DWORD PTR tv129[rbp], 9
	ja	$LN2@DragBehavi
	movsxd	rax, DWORD PTR tv129[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN71@DragBehavi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN11@DragBehavi:
; Line 2359
	mov	rax, QWORD PTR p_v$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR v32$7[rbp], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN30@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv135[rbp], al
	jmp	SHORT $LN31@DragBehavi
$LN30@DragBehavi:
	mov	BYTE PTR tv135[rbp], 127		; 0000007fH
$LN31@DragBehavi:
	movsx	eax, BYTE PTR tv135[rbp]
	mov	DWORD PTR tv146[rbp], eax
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN32@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv139[rbp], al
	jmp	SHORT $LN33@DragBehavi
$LN32@DragBehavi:
	mov	BYTE PTR tv139[rbp], -128		; ffffffffffffff80H
$LN33@DragBehavi:
	movsx	eax, BYTE PTR tv139[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR tv148[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR tv146[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	movss	xmm2, DWORD PTR v_speed$[rbp]
	lea	rdx, QWORD PTR v32$7[rbp]
	mov	ecx, 4
	call	??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z ; ImGui::DragBehaviorT<int,int,float>
	mov	BYTE PTR r$8[rbp], al
	movzx	eax, BYTE PTR r$8[rbp]
	test	eax, eax
	je	SHORT $LN12@DragBehavi
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, BYTE PTR v32$7[rbp]
	mov	BYTE PTR [rax], cl
$LN12@DragBehavi:
	movzx	eax, BYTE PTR r$8[rbp]
	jmp	$LN1@DragBehavi
$LN13@DragBehavi:
; Line 2360
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR v32$9[rbp], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv169[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN34@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv156[rbp], al
	jmp	SHORT $LN35@DragBehavi
$LN34@DragBehavi:
	mov	BYTE PTR tv156[rbp], 255		; 000000ffH
$LN35@DragBehavi:
	movzx	eax, BYTE PTR tv156[rbp]
	mov	DWORD PTR tv167[rbp], eax
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN36@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv160[rbp], al
	jmp	SHORT $LN37@DragBehavi
$LN36@DragBehavi:
	mov	BYTE PTR tv160[rbp], 0
$LN37@DragBehavi:
	movzx	eax, BYTE PTR tv160[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR tv169[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR tv167[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	movss	xmm2, DWORD PTR v_speed$[rbp]
	lea	rdx, QWORD PTR v32$9[rbp]
	mov	ecx, 5
	call	??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z ; ImGui::DragBehaviorT<unsigned int,int,float>
	mov	BYTE PTR r$10[rbp], al
	movzx	eax, BYTE PTR r$10[rbp]
	test	eax, eax
	je	SHORT $LN14@DragBehavi
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, BYTE PTR v32$9[rbp]
	mov	BYTE PTR [rax], cl
$LN14@DragBehavi:
	movzx	eax, BYTE PTR r$10[rbp]
	jmp	$LN1@DragBehavi
$LN15@DragBehavi:
; Line 2361
	mov	rax, QWORD PTR p_v$[rbp]
	movsx	eax, WORD PTR [rax]
	mov	DWORD PTR v32$11[rbp], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv190[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN38@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv177[rbp], ax
	jmp	SHORT $LN39@DragBehavi
$LN38@DragBehavi:
	mov	eax, 32767				; 00007fffH
	mov	WORD PTR tv177[rbp], ax
$LN39@DragBehavi:
	movsx	eax, WORD PTR tv177[rbp]
	mov	DWORD PTR tv188[rbp], eax
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN40@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv181[rbp], ax
	jmp	SHORT $LN41@DragBehavi
$LN40@DragBehavi:
	mov	eax, -32768				; ffffffffffff8000H
	mov	WORD PTR tv181[rbp], ax
$LN41@DragBehavi:
	movsx	eax, WORD PTR tv181[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR tv190[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR tv188[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	movss	xmm2, DWORD PTR v_speed$[rbp]
	lea	rdx, QWORD PTR v32$11[rbp]
	mov	ecx, 4
	call	??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z ; ImGui::DragBehaviorT<int,int,float>
	mov	BYTE PTR r$12[rbp], al
	movzx	eax, BYTE PTR r$12[rbp]
	test	eax, eax
	je	SHORT $LN16@DragBehavi
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, WORD PTR v32$11[rbp]
	mov	WORD PTR [rax], cx
$LN16@DragBehavi:
	movzx	eax, BYTE PTR r$12[rbp]
	jmp	$LN1@DragBehavi
$LN17@DragBehavi:
; Line 2362
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR v32$13[rbp], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv211[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN42@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv198[rbp], ax
	jmp	SHORT $LN43@DragBehavi
$LN42@DragBehavi:
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR tv198[rbp], ax
$LN43@DragBehavi:
	movzx	eax, WORD PTR tv198[rbp]
	mov	DWORD PTR tv209[rbp], eax
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN44@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv202[rbp], ax
	jmp	SHORT $LN45@DragBehavi
$LN44@DragBehavi:
	xor	eax, eax
	mov	WORD PTR tv202[rbp], ax
$LN45@DragBehavi:
	movzx	eax, WORD PTR tv202[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR tv211[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	ecx, DWORD PTR tv209[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	movss	xmm2, DWORD PTR v_speed$[rbp]
	lea	rdx, QWORD PTR v32$13[rbp]
	mov	ecx, 5
	call	??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z ; ImGui::DragBehaviorT<unsigned int,int,float>
	mov	BYTE PTR r$14[rbp], al
	movzx	eax, BYTE PTR r$14[rbp]
	test	eax, eax
	je	SHORT $LN18@DragBehavi
	mov	rax, QWORD PTR p_v$[rbp]
	movzx	ecx, WORD PTR v32$13[rbp]
	mov	WORD PTR [rax], cx
$LN18@DragBehavi:
	movzx	eax, BYTE PTR r$14[rbp]
	jmp	$LN1@DragBehavi
$LN19@DragBehavi:
; Line 2363
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv227[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN46@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv218[rbp], eax
	jmp	SHORT $LN47@DragBehavi
$LN46@DragBehavi:
	mov	DWORD PTR tv218[rbp], 2147483647	; 7fffffffH
$LN47@DragBehavi:
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN48@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv221[rbp], eax
	jmp	SHORT $LN49@DragBehavi
$LN48@DragBehavi:
	mov	DWORD PTR tv221[rbp], -2147483648	; ffffffff80000000H
$LN49@DragBehavi:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv227[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR tv218[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tv221[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR p_v$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$DragBehaviorT@HHM@ImGui@@YA_NHPEAHMHHPEBDH@Z ; ImGui::DragBehaviorT<int,int,float>
	jmp	$LN1@DragBehavi
$LN20@DragBehavi:
; Line 2364
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv241[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN50@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv232[rbp], eax
	jmp	SHORT $LN51@DragBehavi
$LN50@DragBehavi:
	mov	DWORD PTR tv232[rbp], -1		; ffffffffH
$LN51@DragBehavi:
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN52@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv235[rbp], eax
	jmp	SHORT $LN53@DragBehavi
$LN52@DragBehavi:
	mov	DWORD PTR tv235[rbp], 0
$LN53@DragBehavi:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv241[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR tv232[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tv235[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR p_v$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$DragBehaviorT@IHM@ImGui@@YA_NHPEAIMIIPEBDH@Z ; ImGui::DragBehaviorT<unsigned int,int,float>
	jmp	$LN1@DragBehavi
$LN21@DragBehavi:
; Line 2365
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv255[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN54@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv246[rbp], rax
	jmp	SHORT $LN55@DragBehavi
$LN54@DragBehavi:
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	mov	QWORD PTR tv246[rbp], rax
$LN55@DragBehavi:
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN56@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv249[rbp], rax
	jmp	SHORT $LN57@DragBehavi
$LN56@DragBehavi:
	mov	rax, -9223372036854775808		; 8000000000000000H
	mov	QWORD PTR tv249[rbp], rax
$LN57@DragBehavi:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv255[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv246[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv249[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR p_v$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$DragBehaviorT@_J_JN@ImGui@@YA_NHPEA_JM_J1PEBDH@Z ; ImGui::DragBehaviorT<__int64,__int64,double>
	jmp	$LN1@DragBehavi
$LN22@DragBehavi:
; Line 2366
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv269[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN58@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv260[rbp], rax
	jmp	SHORT $LN59@DragBehavi
$LN58@DragBehavi:
	mov	QWORD PTR tv260[rbp], -1
$LN59@DragBehavi:
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN60@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv263[rbp], rax
	jmp	SHORT $LN61@DragBehavi
$LN60@DragBehavi:
	mov	QWORD PTR tv263[rbp], 0
$LN61@DragBehavi:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv269[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv260[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv263[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR p_v$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$DragBehaviorT@_K_JN@ImGui@@YA_NHPEA_KM_K1PEBDH@Z ; ImGui::DragBehaviorT<unsigned __int64,__int64,double>
	jmp	$LN1@DragBehavi
$LN23@DragBehavi:
; Line 2367
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv283[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN62@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv274[rbp], xmm0
	jmp	SHORT $LN63@DragBehavi
$LN62@DragBehavi:
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR tv274[rbp], xmm0
$LN63@DragBehavi:
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN64@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv277[rbp], xmm0
	jmp	SHORT $LN65@DragBehavi
$LN64@DragBehavi:
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR tv277[rbp], xmm0
$LN65@DragBehavi:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv283[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR tv274[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR tv277[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR p_v$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$DragBehaviorT@MMM@ImGui@@YA_NHPEAMMMMPEBDH@Z ; ImGui::DragBehaviorT<float,float,float>
	jmp	$LN1@DragBehavi
$LN24@DragBehavi:
; Line 2368
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv297[rbp], rax
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN66@DragBehavi
	mov	rax, QWORD PTR p_max$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv288[rbp], xmm0
	jmp	SHORT $LN67@DragBehavi
$LN66@DragBehavi:
	movsd	xmm0, QWORD PTR __real@7fefffffffffffff
	movsd	QWORD PTR tv288[rbp], xmm0
$LN67@DragBehavi:
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN68@DragBehavi
	mov	rax, QWORD PTR p_min$[rbp]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv291[rbp], xmm0
	jmp	SHORT $LN69@DragBehavi
$LN68@DragBehavi:
	movsd	xmm0, QWORD PTR __real@ffefffffffffffff
	movsd	QWORD PTR tv291[rbp], xmm0
$LN69@DragBehavi:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv297[rbp]
	mov	QWORD PTR [rsp+40], rax
	movsd	xmm0, QWORD PTR tv288[rbp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR tv291[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR p_v$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	??$DragBehaviorT@NNN@ImGui@@YA_NHPEANMNNPEBDH@Z ; ImGui::DragBehaviorT<double,double,double>
	jmp	SHORT $LN1@DragBehavi
$LN2@DragBehavi:
; Line 2371
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN70@DragBehavi
	mov	eax, DWORD PTR ?__LINE__Var@?0??DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z@4JA
	add	eax, 31
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN70@DragBehavi:
; Line 2372
	xor	al, al
$LN1@DragBehavi:
; Line 2373
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
	npad	2
$LN71@DragBehavi:
	DD	$LN11@DragBehavi
	DD	$LN13@DragBehavi
	DD	$LN15@DragBehavi
	DD	$LN17@DragBehavi
	DD	$LN19@DragBehavi
	DD	$LN20@DragBehavi
	DD	$LN21@DragBehavi
	DD	$LN22@DragBehavi
	DD	$LN23@DragBehavi
	DD	$LN24@DragBehavi
?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z ENDP	; ImGui::DragBehavior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
backup_hovered_window$ = 72
flatten_hovered_children$ = 100
pressed$ = 132
hovered$ = 164
mouse_button_clicked$1 = 196
mouse_button_released$2 = 228
has_repeated_at_least_once$3 = 260
nav_activated_by_code$4 = 292
nav_activated_by_inputs$5 = 324
held$ = 356
mouse_button$6 = 388
release_in$7 = 420
release_anywhere$8 = 452
is_double_click_release$9 = 484
is_repeating_already$10 = 516
$T11 = 932
tv423 = 948
tv411 = 948
tv393 = 948
tv389 = 948
tv330 = 948
tv325 = 948
tv281 = 948
tv158 = 948
tv85 = 948
bb$ = 992
id$ = 1000
out_hovered$ = 1008
out_held$ = 1016
flags$ = 1024
?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z PROC	; ImGui::ButtonBehavior, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 487
$LN84:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1000				; 000003e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 488
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 489
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 491
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16384				; 00004000H
	test	eax, eax
	je	SHORT $LN2@ButtonBeha
; Line 493
	cmp	QWORD PTR out_hovered$[rbp], 0
	je	SHORT $LN3@ButtonBeha
	mov	rax, QWORD PTR out_hovered$[rbp]
	mov	BYTE PTR [rax], 0
$LN3@ButtonBeha:
; Line 494
	cmp	QWORD PTR out_held$[rbp], 0
	je	SHORT $LN4@ButtonBeha
	mov	rax, QWORD PTR out_held$[rbp]
	mov	BYTE PTR [rax], 0
$LN4@ButtonBeha:
; Line 495
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN5@ButtonBeha
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN5@ButtonBeha:
; Line 496
	xor	al, al
	jmp	$LN1@ButtonBeha
$LN2@ButtonBeha:
; Line 500
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7
	test	eax, eax
	jne	SHORT $LN6@ButtonBeha
; Line 501
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 1
	mov	DWORD PTR flags$[rbp], eax
$LN6@ButtonBeha:
; Line 504
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1008				; 000003f0H
	test	eax, eax
	jne	SHORT $LN7@ButtonBeha
; Line 505
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR flags$[rbp], eax
$LN7@ButtonBeha:
; Line 507
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7192]
	mov	QWORD PTR backup_hovered_window$[rbp], rax
; Line 508
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN66@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+7192], 0
	je	SHORT $LN66@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7192]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+904], rcx
	jne	SHORT $LN66@ButtonBeha
	mov	BYTE PTR tv85[rbp], 1
	jmp	SHORT $LN67@ButtonBeha
$LN66@ButtonBeha:
	mov	BYTE PTR tv85[rbp], 0
$LN67@ButtonBeha:
	movzx	eax, BYTE PTR tv85[rbp]
	mov	BYTE PTR flatten_hovered_children$[rbp], al
; Line 509
	movzx	eax, BYTE PTR flatten_hovered_children$[rbp]
	test	eax, eax
	je	SHORT $LN8@ButtonBeha
; Line 510
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rax+7192], rcx
$LN8@ButtonBeha:
; Line 517
	mov	BYTE PTR pressed$[rbp], 0
; Line 518
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR hovered$[rbp], al
; Line 521
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN9@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+8012]
	test	eax, eax
	je	SHORT $LN9@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+8044], ecx
	jne	SHORT $LN9@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8016]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN9@ButtonBeha
; Line 522
	mov	BYTE PTR hovered$[rbp], 0
$LN9@ButtonBeha:
; Line 525
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+8012]
	test	eax, eax
	je	$LN10@ButtonBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	$LN10@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8016]
	and	eax, 4
	test	eax, eax
	jne	$LN10@ButtonBeha
; Line 526
	mov	ecx, 32					; 00000020H
	call	?IsItemHovered@ImGui@@YA_NH@Z		; ImGui::IsItemHovered
	movzx	eax, al
	test	eax, eax
	je	$LN11@ButtonBeha
; Line 528
	mov	BYTE PTR hovered$[rbp], 1
; Line 529
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetHoveredID@ImGui@@YAXI@Z		; ImGui::SetHoveredID
; Line 530
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7252]
	addss	xmm0, DWORD PTR __real@38d1b717
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+7252]
	addss	xmm1, DWORD PTR __real@38d1b717
	mov	rax, QWORD PTR g$[rbp]
	subss	xmm1, DWORD PTR [rax+24]
	movss	DWORD PTR tv158[rbp], xmm1
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f333333
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv158[rbp]
	call	?CalcTypematicRepeatAmount@ImGui@@YAHMMMM@Z ; ImGui::CalcTypematicRepeatAmount
	test	eax, eax
	je	SHORT $LN12@ButtonBeha
; Line 532
	mov	BYTE PTR pressed$[rbp], 1
; Line 533
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+8136], ecx
; Line 534
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
$LN12@ButtonBeha:
$LN11@ButtonBeha:
$LN10@ButtonBeha:
; Line 538
	movzx	eax, BYTE PTR flatten_hovered_children$[rbp]
	test	eax, eax
	je	SHORT $LN13@ButtonBeha
; Line 539
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR backup_hovered_window$[rbp]
	mov	QWORD PTR [rax+7192], rcx
$LN13@ButtonBeha:
; Line 542
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN14@ButtonBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN14@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7244], ecx
	je	SHORT $LN14@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7244], 0
	je	SHORT $LN14@ButtonBeha
; Line 543
	mov	BYTE PTR hovered$[rbp], 0
$LN14@ButtonBeha:
; Line 546
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	$LN15@ButtonBeha
; Line 548
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 65536				; 00010000H
	test	eax, eax
	je	SHORT $LN17@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+320]
	test	eax, eax
	jne	$LN16@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+321]
	test	eax, eax
	jne	$LN16@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+322]
	test	eax, eax
	jne	$LN16@ButtonBeha
$LN17@ButtonBeha:
; Line 551
	mov	DWORD PTR mouse_button_clicked$1[rbp], -1
; Line 552
	mov	DWORD PTR mouse_button_released$2[rbp], -1
; Line 553
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN18@ButtonBeha
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1056]
	test	eax, eax
	je	SHORT $LN18@ButtonBeha
	mov	DWORD PTR mouse_button_clicked$1[rbp], 0
	jmp	SHORT $LN19@ButtonBeha
$LN18@ButtonBeha:
; Line 554
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN20@ButtonBeha
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1056]
	test	eax, eax
	je	SHORT $LN20@ButtonBeha
	mov	DWORD PTR mouse_button_clicked$1[rbp], 1
	jmp	SHORT $LN21@ButtonBeha
$LN20@ButtonBeha:
; Line 555
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN22@ButtonBeha
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1056]
	test	eax, eax
	je	SHORT $LN22@ButtonBeha
	mov	DWORD PTR mouse_button_clicked$1[rbp], 2
$LN22@ButtonBeha:
$LN21@ButtonBeha:
$LN19@ButtonBeha:
; Line 556
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN23@ButtonBeha
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1066]
	test	eax, eax
	je	SHORT $LN23@ButtonBeha
	mov	DWORD PTR mouse_button_released$2[rbp], 0
	jmp	SHORT $LN24@ButtonBeha
$LN23@ButtonBeha:
; Line 557
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN25@ButtonBeha
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1066]
	test	eax, eax
	je	SHORT $LN25@ButtonBeha
	mov	DWORD PTR mouse_button_released$2[rbp], 1
	jmp	SHORT $LN26@ButtonBeha
$LN25@ButtonBeha:
; Line 558
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN27@ButtonBeha
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1066]
	test	eax, eax
	je	SHORT $LN27@ButtonBeha
	mov	DWORD PTR mouse_button_released$2[rbp], 2
$LN27@ButtonBeha:
$LN26@ButtonBeha:
$LN24@ButtonBeha:
; Line 560
	cmp	DWORD PTR mouse_button_clicked$1[rbp], -1
	je	$LN28@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	$LN28@ButtonBeha
; Line 562
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 96					; 00000060H
	test	eax, eax
	je	SHORT $LN29@ButtonBeha
; Line 564
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
; Line 565
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR mouse_button_clicked$1[rbp]
	mov	DWORD PTR [rax+7316], ecx
; Line 566
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 262144				; 00040000H
	test	eax, eax
	jne	SHORT $LN30@ButtonBeha
; Line 567
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetFocusID
$LN30@ButtonBeha:
; Line 568
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
$LN29@ButtonBeha:
; Line 570
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN32@ButtonBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN31@ButtonBeha
	movsxd	rax, DWORD PTR mouse_button_clicked$1[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1061]
	test	eax, eax
	je	SHORT $LN31@ButtonBeha
$LN32@ButtonBeha:
; Line 572
	mov	BYTE PTR pressed$[rbp], 1
; Line 573
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131072				; 00020000H
	test	eax, eax
	je	SHORT $LN33@ButtonBeha
; Line 574
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
	jmp	SHORT $LN34@ButtonBeha
$LN33@ButtonBeha:
; Line 576
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
$LN34@ButtonBeha:
; Line 577
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR mouse_button_clicked$1[rbp]
	mov	DWORD PTR [rax+7316], ecx
; Line 578
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
$LN31@ButtonBeha:
$LN28@ButtonBeha:
; Line 581
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN35@ButtonBeha
	cmp	DWORD PTR mouse_button_released$2[rbp], -1
	je	SHORT $LN35@ButtonBeha
; Line 584
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN68@ButtonBeha
	movsxd	rax, DWORD PTR mouse_button_released$2[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+1104]
	comiss	xmm0, DWORD PTR [rdx+148]
	jb	SHORT $LN68@ButtonBeha
	mov	BYTE PTR tv281[rbp], 1
	jmp	SHORT $LN69@ButtonBeha
$LN68@ButtonBeha:
	mov	BYTE PTR tv281[rbp], 0
$LN69@ButtonBeha:
	movzx	eax, BYTE PTR tv281[rbp]
	mov	BYTE PTR has_repeated_at_least_once$3[rbp], al
; Line 585
	movzx	eax, BYTE PTR has_repeated_at_least_once$3[rbp]
	test	eax, eax
	jne	SHORT $LN36@ButtonBeha
; Line 586
	mov	BYTE PTR pressed$[rbp], 1
$LN36@ButtonBeha:
; Line 587
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN35@ButtonBeha:
; Line 592
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN37@ButtonBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN37@ButtonBeha
; Line 593
	mov	rax, QWORD PTR g$[rbp]
	movsxd	rax, DWORD PTR [rax+7316]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+1084]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN38@ButtonBeha
	mov	dl, 1
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rax+7316]
	call	?IsMouseClicked@ImGui@@YA_NH_N@Z	; ImGui::IsMouseClicked
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN38@ButtonBeha
; Line 594
	mov	BYTE PTR pressed$[rbp], 1
$LN38@ButtonBeha:
$LN37@ButtonBeha:
$LN16@ButtonBeha:
; Line 597
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN39@ButtonBeha
; Line 598
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7710], 1
$LN39@ButtonBeha:
$LN15@ButtonBeha:
; Line 603
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7632], ecx
	jne	SHORT $LN40@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7710]
	test	eax, eax
	jne	SHORT $LN40@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7711]
	test	eax, eax
	je	SHORT $LN40@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7260], 0
	je	SHORT $LN41@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN41@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+84]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN40@ButtonBeha
$LN41@ButtonBeha:
; Line 604
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 524288				; 00080000H
	test	eax, eax
	jne	SHORT $LN42@ButtonBeha
; Line 605
	mov	BYTE PTR hovered$[rbp], 1
$LN42@ButtonBeha:
$LN40@ButtonBeha:
; Line 606
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7644], ecx
	jne	$LN43@ButtonBeha
; Line 608
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	jne	SHORT $LN70@ButtonBeha
	mov	DWORD PTR tv325[rbp], 1
	jmp	SHORT $LN71@ButtonBeha
$LN70@ButtonBeha:
	mov	DWORD PTR tv325[rbp], 0
$LN71@ButtonBeha:
	movzx	eax, BYTE PTR tv325[rbp]
	mov	BYTE PTR nav_activated_by_code$4[rbp], al
; Line 609
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN72@ButtonBeha
	mov	DWORD PTR tv330[rbp], 3
	jmp	SHORT $LN73@ButtonBeha
$LN72@ButtonBeha:
	mov	DWORD PTR tv330[rbp], 1
$LN73@ButtonBeha:
	mov	edx, DWORD PTR tv330[rbp]
	xor	ecx, ecx
	call	?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z ; ImGui::IsNavInputTest
	mov	BYTE PTR nav_activated_by_inputs$5[rbp], al
; Line 610
	movzx	eax, BYTE PTR nav_activated_by_code$4[rbp]
	test	eax, eax
	jne	SHORT $LN45@ButtonBeha
	movzx	eax, BYTE PTR nav_activated_by_inputs$5[rbp]
	test	eax, eax
	je	SHORT $LN44@ButtonBeha
$LN45@ButtonBeha:
; Line 611
	mov	BYTE PTR pressed$[rbp], 1
$LN44@ButtonBeha:
; Line 612
	movzx	eax, BYTE PTR nav_activated_by_code$4[rbp]
	test	eax, eax
	jne	SHORT $LN47@ButtonBeha
	movzx	eax, BYTE PTR nav_activated_by_inputs$5[rbp]
	test	eax, eax
	jne	SHORT $LN47@ButtonBeha
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN46@ButtonBeha
$LN47@ButtonBeha:
; Line 615
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+7640], ecx
; Line 616
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
; Line 617
	movzx	eax, BYTE PTR nav_activated_by_code$4[rbp]
	test	eax, eax
	jne	SHORT $LN49@ButtonBeha
	movzx	eax, BYTE PTR nav_activated_by_inputs$5[rbp]
	test	eax, eax
	je	SHORT $LN48@ButtonBeha
$LN49@ButtonBeha:
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 262144				; 00040000H
	test	eax, eax
	jne	SHORT $LN48@ButtonBeha
; Line 618
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetFocusID
$LN48@ButtonBeha:
$LN46@ButtonBeha:
$LN43@ButtonBeha:
; Line 623
	mov	BYTE PTR held$[rbp], 0
; Line 624
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN50@ButtonBeha
; Line 626
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 1
	jne	$LN51@ButtonBeha
; Line 628
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	SHORT $LN53@ButtonBeha
; Line 629
	mov	rax, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	add	rcx, 296				; 00000128H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T11[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+7296], rax
$LN53@ButtonBeha:
; Line 631
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7316]
	mov	DWORD PTR mouse_button$6[rbp], eax
; Line 632
	cmp	DWORD PTR mouse_button$6[rbp], 0
	jl	SHORT $LN74@ButtonBeha
	cmp	DWORD PTR mouse_button$6[rbp], 5
	jl	SHORT $LN75@ButtonBeha
$LN74@ButtonBeha:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z@4JA
	add	eax, 145				; 00000091H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HG@LHACLJHI@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5?$AA?$DO?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN75@ButtonBeha:
; Line 633
	movsxd	rax, DWORD PTR mouse_button$6[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+304]
	test	eax, eax
	je	SHORT $LN54@ButtonBeha
; Line 635
	mov	BYTE PTR held$[rbp], 1
; Line 636
	jmp	$LN55@ButtonBeha
$LN54@ButtonBeha:
; Line 639
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN76@ButtonBeha
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN76@ButtonBeha
	mov	DWORD PTR tv389[rbp], 1
	jmp	SHORT $LN77@ButtonBeha
$LN76@ButtonBeha:
	mov	DWORD PTR tv389[rbp], 0
$LN77@ButtonBeha:
	movzx	eax, BYTE PTR tv389[rbp]
	mov	BYTE PTR release_in$7[rbp], al
; Line 640
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN78@ButtonBeha
	mov	DWORD PTR tv393[rbp], 1
	jmp	SHORT $LN79@ButtonBeha
$LN78@ButtonBeha:
	mov	DWORD PTR tv393[rbp], 0
$LN79@ButtonBeha:
	movzx	eax, BYTE PTR tv393[rbp]
	mov	BYTE PTR release_anywhere$8[rbp], al
; Line 641
	movzx	eax, BYTE PTR release_in$7[rbp]
	test	eax, eax
	jne	SHORT $LN57@ButtonBeha
	movzx	eax, BYTE PTR release_anywhere$8[rbp]
	test	eax, eax
	je	$LN56@ButtonBeha
$LN57@ButtonBeha:
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+8012]
	test	eax, eax
	jne	$LN56@ButtonBeha
; Line 644
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN80@ButtonBeha
	movsxd	rax, DWORD PTR mouse_button$6[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1076]
	test	eax, eax
	je	SHORT $LN80@ButtonBeha
	mov	DWORD PTR tv411[rbp], 1
	jmp	SHORT $LN81@ButtonBeha
$LN80@ButtonBeha:
	mov	DWORD PTR tv411[rbp], 0
$LN81@ButtonBeha:
	movzx	eax, BYTE PTR tv411[rbp]
	mov	BYTE PTR is_double_click_release$9[rbp], al
; Line 645
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN82@ButtonBeha
	movsxd	rax, DWORD PTR mouse_button$6[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+1104]
	comiss	xmm0, DWORD PTR [rdx+148]
	jb	SHORT $LN82@ButtonBeha
	mov	DWORD PTR tv423[rbp], 1
	jmp	SHORT $LN83@ButtonBeha
$LN82@ButtonBeha:
	mov	DWORD PTR tv423[rbp], 0
$LN83@ButtonBeha:
	movzx	eax, BYTE PTR tv423[rbp]
	mov	BYTE PTR is_repeating_already$10[rbp], al
; Line 646
	movzx	eax, BYTE PTR is_double_click_release$9[rbp]
	test	eax, eax
	jne	SHORT $LN58@ButtonBeha
	movzx	eax, BYTE PTR is_repeating_already$10[rbp]
	test	eax, eax
	jne	SHORT $LN58@ButtonBeha
; Line 647
	mov	BYTE PTR pressed$[rbp], 1
$LN58@ButtonBeha:
$LN56@ButtonBeha:
; Line 649
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN55@ButtonBeha:
; Line 651
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 262144				; 00040000H
	test	eax, eax
	jne	SHORT $LN59@ButtonBeha
; Line 652
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7710], 1
$LN59@ButtonBeha:
; Line 653
	jmp	SHORT $LN52@ButtonBeha
$LN51@ButtonBeha:
; Line 654
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7312], 4
	jne	SHORT $LN60@ButtonBeha
; Line 657
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7644], ecx
	je	SHORT $LN61@ButtonBeha
; Line 658
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
$LN61@ButtonBeha:
$LN60@ButtonBeha:
$LN52@ButtonBeha:
; Line 660
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN62@ButtonBeha
; Line 661
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7275], 1
$LN62@ButtonBeha:
$LN50@ButtonBeha:
; Line 664
	cmp	QWORD PTR out_hovered$[rbp], 0
	je	SHORT $LN63@ButtonBeha
	mov	rax, QWORD PTR out_hovered$[rbp]
	movzx	ecx, BYTE PTR hovered$[rbp]
	mov	BYTE PTR [rax], cl
$LN63@ButtonBeha:
; Line 665
	cmp	QWORD PTR out_held$[rbp], 0
	je	SHORT $LN64@ButtonBeha
	mov	rax, QWORD PTR out_held$[rbp]
	movzx	ecx, BYTE PTR held$[rbp]
	mov	BYTE PTR [rax], cl
$LN64@ButtonBeha:
; Line 667
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@ButtonBeha:
; Line 668
	lea	rsp, QWORD PTR [rbp+968]
	pop	rdi
	pop	rbp
	ret	0
?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ENDP	; ImGui::ButtonBehavior
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z
_TEXT	SEGMENT
label$ = 224
flags$ = 232
flags_value$ = 240
?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z PROC		; ImGui::CheckboxFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1171
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1172
	mov	r8, QWORD PTR flags_value$[rbp]
	mov	rdx, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	??$CheckboxFlagsT@_K@ImGui@@YA_NPEBDPEA_K_K@Z ; ImGui::CheckboxFlagsT<unsigned __int64>
; Line 1173
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CheckboxFlags@ImGui@@YA_NPEBDPEA_K_K@Z ENDP		; ImGui::CheckboxFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z
_TEXT	SEGMENT
label$ = 224
flags$ = 232
flags_value$ = 240
?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z PROC		; ImGui::CheckboxFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1166
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1167
	mov	r8, QWORD PTR flags_value$[rbp]
	mov	rdx, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	??$CheckboxFlagsT@_J@ImGui@@YA_NPEBDPEA_J_J@Z ; ImGui::CheckboxFlagsT<__int64>
; Line 1168
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CheckboxFlags@ImGui@@YA_NPEBDPEA_J_J@Z ENDP		; ImGui::CheckboxFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SeparatorEx@ImGui@@YAXH@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
thickness_draw$ = 68
thickness_layout$ = 100
y1$5 = 132
y2$6 = 164
bb$7 = 200
x1$8 = 244
x2$9 = 276
columns$10 = 312
bb$11 = 344
item_visible$12 = 388
$T13 = 804
$T14 = 836
$T15 = 868
$T16 = 900
$T17 = 932
$T18 = 964
$T19 = 996
$T20 = 1028
$T21 = 1060
tv267 = 1080
tv236 = 1080
tv212 = 1080
tv181 = 1080
tv144 = 1080
tv265 = 1088
tv234 = 1088
tv179 = 1088
tv142 = 1088
tv263 = 1096
tv177 = 1096
tv175 = 1104
__$ArrayPad$ = 1112
flags$ = 1152
?SeparatorEx@ImGui@@YAXH@Z PROC				; ImGui::SeparatorEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1358
$LN17:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 1176				; 00000498H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 186				; 000000baH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+1208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1359
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1360
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@SeparatorE
; Line 1361
	jmp	$LN1@SeparatorE
$LN2@SeparatorE:
; Line 1363
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1364
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 3
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@SeparatorE
	mov	eax, DWORD PTR ?__LINE__Var@?0??SeparatorEx@ImGui@@YAXH@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LA@FPPCKOP@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@SeparatorE:
; Line 1366
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR thickness_draw$[rbp], xmm0
; Line 1367
	xorps	xmm0, xmm0
	movss	DWORD PTR thickness_layout$[rbp], xmm0
; Line 1368
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	$LN3@SeparatorE
; Line 1371
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	movss	DWORD PTR y1$5[rbp], xmm0
; Line 1372
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	addss	xmm0, DWORD PTR [rcx+260]
	movss	DWORD PTR y2$6[rbp], xmm0
; Line 1373
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+216]
	addss	xmm0, DWORD PTR thickness_draw$[rbp]
	movss	xmm2, DWORD PTR y2$6[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv144[rbp], rax
	movss	xmm2, DWORD PTR y1$5[rbp]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv142[rbp], rax
	mov	r8, QWORD PTR tv144[rbp]
	mov	rdx, QWORD PTR tv142[rbp]
	lea	rcx, QWORD PTR bb$7[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1374
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR thickness_layout$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 1375
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$7[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@SeparatorE
; Line 1376
	jmp	$LN1@SeparatorE
$LN5@SeparatorE:
; Line 1379
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv181[rbp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 27
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv179[rbp], eax
	movss	xmm2, DWORD PTR bb$7[rbp+12]
	movss	xmm1, DWORD PTR bb$7[rbp]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv177[rbp], rax
	movss	xmm2, DWORD PTR bb$7[rbp+4]
	movss	xmm1, DWORD PTR bb$7[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv175[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv179[rbp]
	mov	r8, QWORD PTR tv177[rbp]
	mov	rdx, QWORD PTR tv175[rbp]
	mov	rcx, QWORD PTR tv181[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 1380
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN6@SeparatorE
; Line 1381
	lea	rcx, OFFSET FLAT:??_C@_02LLHJFGPH@?5?$HM@
	call	?LogText@ImGui@@YAXPEBDZZ		; ImGui::LogText
$LN6@SeparatorE:
; Line 1382
	jmp	$LN4@SeparatorE
$LN3@SeparatorE:
; Line 1383
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	$LN7@SeparatorE
; Line 1386
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR x1$8[rbp], xmm0
; Line 1387
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+24]
	movss	DWORD PTR x2$9[rbp], xmm0
; Line 1390
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7560], 0
	jle	SHORT $LN8@SeparatorE
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7560				; 00001d88H
	mov	rcx, rax
	call	?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ ; ImVector<ImGuiGroupData>::back
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN8@SeparatorE
; Line 1391
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR x1$8[rbp]
	addss	xmm0, DWORD PTR [rax+280]
	movss	DWORD PTR x1$8[rbp], xmm0
$LN8@SeparatorE:
; Line 1393
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN15@SeparatorE
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv212[rbp], rax
	jmp	SHORT $LN16@SeparatorE
$LN15@SeparatorE:
	mov	QWORD PTR tv212[rbp], 0
$LN16@SeparatorE:
	mov	rax, QWORD PTR tv212[rbp]
	mov	QWORD PTR columns$10[rbp], rax
; Line 1394
	cmp	QWORD PTR columns$10[rbp], 0
	je	SHORT $LN9@SeparatorE
; Line 1395
	call	?PushColumnsBackground@ImGui@@YAXXZ	; ImGui::PushColumnsBackground
$LN9@SeparatorE:
; Line 1398
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	addss	xmm0, DWORD PTR thickness_draw$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR x2$9[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv236[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm2, DWORD PTR [rax+220]
	movss	xmm1, DWORD PTR x1$8[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv234[rbp], rax
	mov	r8, QWORD PTR tv236[rbp]
	mov	rdx, QWORD PTR tv234[rbp]
	lea	rcx, QWORD PTR bb$11[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1399
	movss	xmm2, DWORD PTR thickness_layout$[rbp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 1400
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$11[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	mov	BYTE PTR item_visible$12[rbp], al
; Line 1401
	movzx	eax, BYTE PTR item_visible$12[rbp]
	test	eax, eax
	je	$LN10@SeparatorE
; Line 1404
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv267[rbp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 27
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv265[rbp], eax
	movss	xmm2, DWORD PTR bb$11[rbp+4]
	movss	xmm1, DWORD PTR bb$11[rbp+8]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv263[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv265[rbp]
	mov	r8, QWORD PTR tv263[rbp]
	lea	rdx, QWORD PTR bb$11[rbp]
	mov	rcx, QWORD PTR tv267[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 1405
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN11@SeparatorE
; Line 1406
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_0CC@IODDEFBI@?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9?9@
	lea	rcx, QWORD PTR bb$11[rbp]
	call	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z ; ImGui::LogRenderedText
$LN11@SeparatorE:
$LN10@SeparatorE:
; Line 1409
	cmp	QWORD PTR columns$10[rbp], 0
	je	SHORT $LN12@SeparatorE
; Line 1411
	call	?PopColumnsBackground@ImGui@@YAXXZ	; ImGui::PopColumnsBackground
; Line 1412
	mov	rax, QWORD PTR columns$10[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+220]
	movss	DWORD PTR [rax+28], xmm0
$LN12@SeparatorE:
$LN7@SeparatorE:
$LN4@SeparatorE:
$LN1@SeparatorE:
; Line 1415
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?SeparatorEx@ImGui@@YAXH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1128]
	pop	rdi
	pop	rbp
	ret	0
?SeparatorEx@ImGui@@YAXH@Z ENDP				; ImGui::SeparatorEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z
_TEXT	SEGMENT
tv68 = 192
window$ = 240
axis$ = 248
?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z PROC ; ImGui::GetWindowScrollbarID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 854
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 855
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN3@GetWindowS
	lea	rax, OFFSET FLAT:??_C@_08ENAFOMOP@?$CDSCROLLX@
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN4@GetWindowS
$LN3@GetWindowS:
	lea	rax, OFFSET FLAT:??_C@_08FEBONNKO@?$CDSCROLLY@
	mov	QWORD PTR tv68[rbp], rax
$LN4@GetWindowS:
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv68[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetIDNoKeepAlive@ImGuiWindow@@QEAAIPEBD0@Z ; ImGuiWindow::GetIDNoKeepAlive
; Line 856
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z ENDP ; ImGui::GetWindowScrollbarID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z
_TEXT	SEGMENT
outer_rect$ = 8
inner_rect$ = 56
border_size$ = 100
scrollbar_size$ = 132
tv76 = 344
__$ArrayPad$ = 352
__$ReturnUdt$ = 400
window$ = 408
axis$ = 416
?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z PROC ; ImGui::GetWindowScrollbarRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 860
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 861
	lea	rdx, QWORD PTR outer_rect$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ	; ImGuiWindow::Rect
; Line 862
	lea	rax, QWORD PTR inner_rect$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+528]
	mov	ecx, 16
	rep movsb
; Line 863
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	movss	DWORD PTR border_size$[rbp], xmm0
; Line 864
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 132				; 00000084H
	mov	QWORD PTR tv76[rbp], rax
	mov	eax, DWORD PTR axis$[rbp]
	xor	eax, 1
	cdqe
	mov	rdx, rax
	mov	rcx, QWORD PTR tv76[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR scrollbar_size$[rbp], xmm0
; Line 865
	movss	xmm0, DWORD PTR scrollbar_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN5@GetWindowS
	mov	eax, DWORD PTR ?__LINE__Var@?0??GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CM@GFPJIOBE@?$AAs?$AAc?$AAr?$AAo?$AAl?$AAl?$AAb?$AAa?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@GetWindowS:
; Line 866
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN2@GetWindowS
; Line 867
	movss	xmm0, DWORD PTR outer_rect$[rbp+12]
	subss	xmm0, DWORD PTR border_size$[rbp]
	subss	xmm0, DWORD PTR scrollbar_size$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR outer_rect$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR outer_rect$[rbp+12]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR inner_rect$[rbp+8]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR inner_rect$[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	jmp	SHORT $LN1@GetWindowS
	jmp	SHORT $LN3@GetWindowS
$LN2@GetWindowS:
; Line 869
	movss	xmm0, DWORD PTR outer_rect$[rbp+8]
	subss	xmm0, DWORD PTR border_size$[rbp]
	subss	xmm0, DWORD PTR scrollbar_size$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR outer_rect$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR inner_rect$[rbp+12]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR outer_rect$[rbp+8]
	movss	xmm2, DWORD PTR inner_rect$[rbp+4]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
$LN3@GetWindowS:
$LN1@GetWindowS:
; Line 870
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+368]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z ENDP ; ImGui::GetWindowScrollbarRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
bb$ = 72
hovered$ = 116
held$ = 148
pressed$ = 180
col$ = 212
$T6 = 436
$T7 = 468
$T8 = 500
$T9 = 532
$T10 = 564
$T11 = 596
$T12 = 628
tv166 = 644
tv147 = 644
tv224 = 648
tv198 = 648
tv164 = 648
tv146 = 648
tv87 = 648
tv222 = 656
tv196 = 656
tv85 = 656
tv220 = 664
tv194 = 664
tv218 = 672
tv192 = 672
__$ArrayPad$ = 680
id$ = 720
texture_id$ = 728
size$ = 736
uv0$ = 744
uv1$ = 752
padding$ = 760
bg_col$ = 768
tint_col$ = 776
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z PROC ; ImGui::ImageButtonEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1025
$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 760				; 000002f8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 126				; 0000007eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+792]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1026
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1027
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1028
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ImageButto
; Line 1029
	xor	al, al
	jmp	$LN1@ImageButto
$LN2@ImageButto:
; Line 1031
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, QWORD PTR padding$[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	QWORD PTR tv87[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	mov	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv85[rbp], rax
	mov	r8, QWORD PTR tv87[rbp]
	mov	rdx, QWORD PTR tv85[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1032
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 1033
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ImageButto
; Line 1034
	xor	al, al
	jmp	$LN1@ImageButto
$LN3@ImageButto:
; Line 1037
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 1040
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN6@ImageButto
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN6@ImageButto
	mov	DWORD PTR tv147[rbp], 23
	jmp	SHORT $LN9@ImageButto
$LN6@ImageButto:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN7@ImageButto
	mov	DWORD PTR tv146[rbp], 22
	jmp	SHORT $LN8@ImageButto
$LN7@ImageButto:
	mov	DWORD PTR tv146[rbp], 21
$LN8@ImageButto:
	mov	eax, DWORD PTR tv146[rbp]
	mov	DWORD PTR tv147[rbp], eax
$LN9@ImageButto:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv147[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$[rbp], eax
; Line 1041
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 1042
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5536]
	movss	DWORD PTR tv166[rbp], xmm0
	mov	rax, QWORD PTR padding$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	mov	rax, QWORD PTR padding$[rbp]
	movss	xmm0, DWORD PTR [rax]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv164[rbp], xmm0
	movss	xmm2, DWORD PTR tv166[rbp]
	xorps	xmm1, xmm1
	movss	xmm0, DWORD PTR tv164[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR col$[rbp]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 1043
	mov	rax, QWORD PTR bg_col$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN4@ImageButto
; Line 1044
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv198[rbp], rax
	mov	rcx, QWORD PTR bg_col$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv196[rbp], eax
	mov	r8, QWORD PTR padding$[rbp]
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv194[rbp], rax
	mov	r8, QWORD PTR padding$[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv192[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv196[rbp]
	mov	r8, QWORD PTR tv194[rbp]
	mov	rdx, QWORD PTR tv192[rbp]
	mov	rcx, QWORD PTR tv198[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN4@ImageButto:
; Line 1045
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv224[rbp], rax
	mov	rcx, QWORD PTR tint_col$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv222[rbp], eax
	mov	r8, QWORD PTR padding$[rbp]
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv220[rbp], rax
	mov	r8, QWORD PTR padding$[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv218[rbp], rax
	mov	eax, DWORD PTR tv222[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR uv1$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR uv0$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv220[rbp]
	mov	r8, QWORD PTR tv218[rbp]
	mov	rdx, QWORD PTR texture_id$[rbp]
	mov	rcx, QWORD PTR tv224[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 1047
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@ImageButto:
; Line 1048
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+696]
	pop	rdi
	pop	rbp
	ret	0
?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z ENDP ; ImGui::ImageButtonEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
bb_frame_width$ = 68
bb_frame_height$ = 100
alpha$ = 132
style$ = 168
allow_interaction$ = 196
bb$ = 232
scrollbar_size_v$ = 276
win_size_v$ = 308
grab_h_pixels$ = 340
grab_h_norm$ = 372
held$ = 404
hovered$ = 436
scroll_max$ = 468
scroll_ratio$ = 500
grab_v_norm$ = 532
scrollbar_pos_v$7 = 564
mouse_pos_v$8 = 596
clicked_v_norm$9 = 628
seek_absolute$10 = 660
scroll_v_norm$11 = 692
bg_col$ = 724
grab_col$ = 756
grab_rect$ = 792
$T12 = 1220
$T13 = 1252
$T14 = 1300
tv364 = 1332
tv344 = 1332
tv279 = 1332
tv232 = 1332
tv165 = 1332
tv158 = 1332
tv94 = 1332
tv375 = 1336
tv362 = 1336
tv342 = 1336
tv323 = 1336
tv276 = 1336
tv220 = 1336
tv156 = 1336
tv273 = 1340
__$ArrayPad$ = 1344
bb_frame$ = 1392
id$ = 1400
axis$ = 1408
p_scroll_v$ = 1416
size_avail_v$ = 1424
size_contents_v$ = 1432
flags$ = 1440
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z PROC ; ImGui::ScrollbarEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 908
$LN26:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1408				; 00000580H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 244				; 000000f4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1448]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 909
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 910
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 911
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ScrollbarE
; Line 912
	xor	al, al
	jmp	$LN1@ScrollbarE
$LN2@ScrollbarE:
; Line 914
	mov	rcx, QWORD PTR bb_frame$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR bb_frame_width$[rbp], xmm0
; Line 915
	mov	rcx, QWORD PTR bb_frame$[rbp]
	call	?GetHeight@ImRect@@QEBAMXZ		; ImRect::GetHeight
	movss	DWORD PTR bb_frame_height$[rbp], xmm0
; Line 916
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR bb_frame_width$[rbp]
	jae	SHORT $LN4@ScrollbarE
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR bb_frame_height$[rbp]
	jb	SHORT $LN3@ScrollbarE
$LN4@ScrollbarE:
; Line 917
	xor	al, al
	jmp	$LN1@ScrollbarE
$LN3@ScrollbarE:
; Line 920
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR alpha$[rbp], xmm0
; Line 921
	cmp	DWORD PTR axis$[rbp], 1
	jne	SHORT $LN5@ScrollbarE
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	comiss	xmm0, DWORD PTR bb_frame_height$[rbp]
	jbe	SHORT $LN5@ScrollbarE
; Line 922
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR bb_frame_height$[rbp]
	subss	xmm0, DWORD PTR [rax+6528]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	divss	xmm0, xmm1
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR alpha$[rbp], xmm0
$LN5@ScrollbarE:
; Line 923
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR alpha$[rbp]
	jb	SHORT $LN6@ScrollbarE
; Line 924
	xor	al, al
	jmp	$LN1@ScrollbarE
$LN6@ScrollbarE:
; Line 926
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 927
	movss	xmm0, DWORD PTR alpha$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN15@ScrollbarE
	mov	BYTE PTR tv94[rbp], 1
	jmp	SHORT $LN16@ScrollbarE
$LN15@ScrollbarE:
	mov	BYTE PTR tv94[rbp], 0
$LN16@ScrollbarE:
	movzx	eax, BYTE PTR tv94[rbp]
	mov	BYTE PTR allow_interaction$[rbp], al
; Line 929
	lea	rax, QWORD PTR bb$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR bb_frame$[rbp]
	mov	ecx, 16
	rep movsb
; Line 930
	movss	xmm0, DWORD PTR bb_frame_height$[rbp]
	subss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm2, DWORD PTR __real@40400000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv158[rbp], xmm0
	movss	xmm0, DWORD PTR bb_frame_width$[rbp]
	subss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm2, DWORD PTR __real@40400000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv156[rbp], xmm0
	movss	xmm2, DWORD PTR tv158[rbp]
	movss	xmm1, DWORD PTR tv156[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	lea	rcx, QWORD PTR bb$[rbp]
	call	?Expand@ImRect@@QEAAXAEBUImVec2@@@Z	; ImRect::Expand
; Line 933
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN17@ScrollbarE
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR tv165[rbp], xmm0
	jmp	SHORT $LN18@ScrollbarE
$LN17@ScrollbarE:
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetHeight@ImRect@@QEBAMXZ		; ImRect::GetHeight
	movss	DWORD PTR tv165[rbp], xmm0
$LN18@ScrollbarE:
	movss	xmm0, DWORD PTR tv165[rbp]
	movss	DWORD PTR scrollbar_size_v$[rbp], xmm0
; Line 937
	movss	xmm1, DWORD PTR size_avail_v$[rbp]
	movss	xmm0, DWORD PTR size_contents_v$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN19@ScrollbarE
	mov	eax, DWORD PTR ?__LINE__Var@?0??ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z@4JA
	add	eax, 29
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FI@OFJDJLOI@?$AAI?$AAm?$AAM?$AAa?$AAx?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@ScrollbarE:
; Line 938
	movss	xmm1, DWORD PTR size_avail_v$[rbp]
	movss	xmm0, DWORD PTR size_contents_v$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR win_size_v$[rbp], xmm0
; Line 939
	movss	xmm0, DWORD PTR size_avail_v$[rbp]
	divss	xmm0, DWORD PTR win_size_v$[rbp]
	movss	xmm1, DWORD PTR scrollbar_size_v$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm2, DWORD PTR scrollbar_size_v$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+120]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR grab_h_pixels$[rbp], xmm0
; Line 940
	movss	xmm0, DWORD PTR grab_h_pixels$[rbp]
	divss	xmm0, DWORD PTR scrollbar_size_v$[rbp]
	movss	DWORD PTR grab_h_norm$[rbp], xmm0
; Line 943
	mov	BYTE PTR held$[rbp], 0
; Line 944
	mov	BYTE PTR hovered$[rbp], 0
; Line 945
	mov	DWORD PTR [rsp+32], 262144		; 00040000H
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
; Line 947
	movss	xmm0, DWORD PTR size_contents_v$[rbp]
	subss	xmm0, DWORD PTR size_avail_v$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR scroll_max$[rbp], xmm0
; Line 948
	mov	rax, QWORD PTR p_scroll_v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR scroll_max$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR scroll_ratio$[rbp], xmm0
; Line 949
	movss	xmm0, DWORD PTR scrollbar_size_v$[rbp]
	subss	xmm0, DWORD PTR grab_h_pixels$[rbp]
	movss	xmm1, DWORD PTR scroll_ratio$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR scrollbar_size_v$[rbp]
	movss	DWORD PTR grab_v_norm$[rbp], xmm0
; Line 950
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	$LN7@ScrollbarE
	movzx	eax, BYTE PTR allow_interaction$[rbp]
	test	eax, eax
	je	$LN7@ScrollbarE
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR grab_h_norm$[rbp]
	jbe	$LN7@ScrollbarE
; Line 952
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR bb$[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR scrollbar_pos_v$7[rbp], xmm0
; Line 953
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	QWORD PTR tv220[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv220[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR mouse_pos_v$8[rbp], xmm0
; Line 956
	movss	xmm0, DWORD PTR mouse_pos_v$8[rbp]
	subss	xmm0, DWORD PTR scrollbar_pos_v$7[rbp]
	divss	xmm0, DWORD PTR scrollbar_size_v$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR clicked_v_norm$9[rbp], xmm0
; Line 957
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetHoveredID@ImGui@@YAXI@Z		; ImGui::SetHoveredID
; Line 959
	mov	BYTE PTR seek_absolute$10[rbp], 0
; Line 960
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7272]
	test	eax, eax
	je	$LN8@ScrollbarE
; Line 963
	movss	xmm0, DWORD PTR grab_v_norm$[rbp]
	comiss	xmm0, DWORD PTR clicked_v_norm$9[rbp]
	ja	SHORT $LN20@ScrollbarE
	movss	xmm0, DWORD PTR grab_v_norm$[rbp]
	addss	xmm0, DWORD PTR grab_h_norm$[rbp]
	movss	xmm1, DWORD PTR clicked_v_norm$9[rbp]
	comiss	xmm1, xmm0
	ja	SHORT $LN20@ScrollbarE
	mov	DWORD PTR tv232[rbp], 0
	jmp	SHORT $LN21@ScrollbarE
$LN20@ScrollbarE:
	mov	DWORD PTR tv232[rbp], 1
$LN21@ScrollbarE:
	movzx	eax, BYTE PTR tv232[rbp]
	mov	BYTE PTR seek_absolute$10[rbp], al
; Line 964
	movzx	eax, BYTE PTR seek_absolute$10[rbp]
	test	eax, eax
	je	SHORT $LN9@ScrollbarE
; Line 965
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12324], xmm0
	jmp	SHORT $LN10@ScrollbarE
$LN9@ScrollbarE:
; Line 967
	movss	xmm0, DWORD PTR clicked_v_norm$9[rbp]
	subss	xmm0, DWORD PTR grab_v_norm$[rbp]
	movss	xmm1, DWORD PTR grab_h_norm$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12324], xmm0
$LN10@ScrollbarE:
$LN8@ScrollbarE:
; Line 972
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR clicked_v_norm$9[rbp]
	subss	xmm0, DWORD PTR [rax+12324]
	movss	xmm1, DWORD PTR grab_h_norm$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, DWORD PTR grab_h_norm$[rbp]
	divss	xmm0, xmm1
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR scroll_v_norm$11[rbp], xmm0
; Line 973
	movss	xmm0, DWORD PTR scroll_v_norm$11[rbp]
	mulss	xmm0, DWORD PTR scroll_max$[rbp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR p_scroll_v$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 976
	mov	rax, QWORD PTR p_scroll_v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR scroll_max$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR scroll_ratio$[rbp], xmm0
; Line 977
	movss	xmm0, DWORD PTR scrollbar_size_v$[rbp]
	subss	xmm0, DWORD PTR grab_h_pixels$[rbp]
	movss	xmm1, DWORD PTR scroll_ratio$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	divss	xmm0, DWORD PTR scrollbar_size_v$[rbp]
	movss	DWORD PTR grab_v_norm$[rbp], xmm0
; Line 980
	movzx	eax, BYTE PTR seek_absolute$10[rbp]
	test	eax, eax
	je	SHORT $LN11@ScrollbarE
; Line 981
	movss	xmm0, DWORD PTR clicked_v_norm$9[rbp]
	subss	xmm0, DWORD PTR grab_v_norm$[rbp]
	movss	xmm1, DWORD PTR grab_h_norm$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+12324], xmm0
$LN11@ScrollbarE:
$LN7@ScrollbarE:
; Line 985
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 14
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col$[rbp], eax
; Line 986
	movss	xmm0, DWORD PTR alpha$[rbp]
	movss	DWORD PTR tv279[rbp], xmm0
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN24@ScrollbarE
	mov	DWORD PTR tv276[rbp], 17
	jmp	SHORT $LN25@ScrollbarE
$LN24@ScrollbarE:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN22@ScrollbarE
	mov	DWORD PTR tv273[rbp], 16
	jmp	SHORT $LN23@ScrollbarE
$LN22@ScrollbarE:
	mov	DWORD PTR tv273[rbp], 15
$LN23@ScrollbarE:
	mov	eax, DWORD PTR tv273[rbp]
	mov	DWORD PTR tv276[rbp], eax
$LN25@ScrollbarE:
	movss	xmm1, DWORD PTR tv279[rbp]
	mov	ecx, DWORD PTR tv276[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR grab_col$[rbp], eax
; Line 987
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv323[rbp], rax
	mov	rax, QWORD PTR bb_frame$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR bb_frame$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	rdx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rdx+72]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR bg_col$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR tv323[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 988
	lea	rcx, QWORD PTR grab_rect$[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
; Line 989
	cmp	DWORD PTR axis$[rbp], 0
	jne	$LN12@ScrollbarE
; Line 990
	movss	xmm2, DWORD PTR grab_v_norm$[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+8]
	movss	xmm0, DWORD PTR bb$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	addss	xmm0, DWORD PTR grab_h_pixels$[rbp]
	movss	DWORD PTR tv344[rbp], xmm0
	movss	xmm2, DWORD PTR grab_v_norm$[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+8]
	movss	xmm0, DWORD PTR bb$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR tv342[rbp], xmm0
	movss	xmm0, DWORD PTR bb$[rbp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR tv344[rbp]
	movss	xmm2, DWORD PTR bb$[rbp+4]
	movss	xmm1, DWORD PTR tv342[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	lea	rcx, QWORD PTR grab_rect$[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	jmp	$LN13@ScrollbarE
$LN12@ScrollbarE:
; Line 992
	movss	xmm2, DWORD PTR grab_v_norm$[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+12]
	movss	xmm0, DWORD PTR bb$[rbp+4]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	addss	xmm0, DWORD PTR grab_h_pixels$[rbp]
	movss	DWORD PTR tv364[rbp], xmm0
	movss	xmm2, DWORD PTR grab_v_norm$[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+12]
	movss	xmm0, DWORD PTR bb$[rbp+4]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR tv362[rbp], xmm0
	movss	xmm0, DWORD PTR tv364[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR bb$[rbp+8]
	movss	xmm2, DWORD PTR tv362[rbp]
	movss	xmm1, DWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	lea	rcx, QWORD PTR grab_rect$[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN13@ScrollbarE:
; Line 993
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv375[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+116]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR grab_col$[rbp]
	lea	r8, QWORD PTR grab_rect$[rbp+8]
	lea	rdx, QWORD PTR grab_rect$[rbp]
	mov	rcx, QWORD PTR tv375[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 995
	movzx	eax, BYTE PTR held$[rbp]
$LN1@ScrollbarE:
; Line 996
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1360]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z ENDP ; ImGui::ScrollbarEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
id$ = 68
bb$ = 104
rounding_corners$ = 148
size_avail$ = 180
size_contents$ = 212
tv164 = 424
tv144 = 424
tv128 = 424
tv151 = 432
tv136 = 432
tv152 = 440
tv132 = 440
__$ArrayPad$ = 448
axis$ = 496
?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z PROC		; ImGui::Scrollbar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 873
$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+568]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 874
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 875
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 877
	mov	edx, DWORD PTR axis$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetWindowScrollbarID@ImGui@@YAIPEAUImGuiWindow@@W4ImGuiAxis@@@Z ; ImGui::GetWindowScrollbarID
	mov	DWORD PTR id$[rbp], eax
; Line 878
	mov	ecx, DWORD PTR id$[rbp]
	call	?KeepAliveID@ImGui@@YAXI@Z		; ImGui::KeepAliveID
; Line 881
	mov	r8d, DWORD PTR axis$[rbp]
	mov	rdx, QWORD PTR window$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetWindowScrollbarRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@W4ImGuiAxis@@@Z ; ImGui::GetWindowScrollbarRect
; Line 882
	mov	DWORD PTR rounding_corners$[rbp], 256	; 00000100H
; Line 883
	cmp	DWORD PTR axis$[rbp], 0
	jne	SHORT $LN2@Scrollbar
; Line 885
	mov	eax, DWORD PTR rounding_corners$[rbp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR rounding_corners$[rbp], eax
; Line 886
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+141]
	test	eax, eax
	jne	SHORT $LN4@Scrollbar
; Line 887
	mov	eax, DWORD PTR rounding_corners$[rbp]
	bts	eax, 7
	mov	DWORD PTR rounding_corners$[rbp], eax
$LN4@Scrollbar:
; Line 888
	jmp	SHORT $LN3@Scrollbar
$LN2@Scrollbar:
; Line 891
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@Scrollbar
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN5@Scrollbar
; Line 892
	mov	eax, DWORD PTR rounding_corners$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR rounding_corners$[rbp], eax
$LN5@Scrollbar:
; Line 893
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+140]
	test	eax, eax
	jne	SHORT $LN6@Scrollbar
; Line 894
	mov	eax, DWORD PTR rounding_corners$[rbp]
	bts	eax, 7
	mov	DWORD PTR rounding_corners$[rbp], eax
$LN6@Scrollbar:
$LN3@Scrollbar:
; Line 896
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 536				; 00000218H
	mov	QWORD PTR tv128[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 528				; 00000210H
	mov	QWORD PTR tv136[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv136[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	mov	QWORD PTR tv132[rbp], rax
	movsxd	rcx, DWORD PTR axis$[rbp]
	mov	rdx, rcx
	mov	rcx, QWORD PTR tv128[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv132[rbp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR size_avail$[rbp], xmm0
; Line 897
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv144[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR tv151[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv151[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv152[rbp], xmm0
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv144[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR tv152[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR size_contents$[rbp], xmm0
; Line 898
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 92					; 0000005cH
	mov	QWORD PTR tv164[rbp], rax
	movsxd	rax, DWORD PTR axis$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv164[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	mov	ecx, DWORD PTR rounding_corners$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	movss	xmm0, DWORD PTR size_contents$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR size_avail$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, rax
	mov	r8d, DWORD PTR axis$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ScrollbarEx@ImGui@@YA_NAEBUImRect@@IW4ImGuiAxis@@PEAMMMH@Z ; ImGui::ScrollbarEx
; Line 899
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?Scrollbar@ImGui@@YAXW4ImGuiAxis@@@Z ENDP		; ImGui::Scrollbar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
id$ = 68
bb$ = 104
default_size$ = 148
hovered$ = 180
held$ = 212
pressed$ = 244
bg_col$ = 276
text_col$ = 308
$T6 = 532
$T7 = 564
$T8 = 596
$T9 = 632
tv187 = 644
tv149 = 644
tv88 = 644
tv185 = 648
tv148 = 648
tv195 = 656
__$ArrayPad$ = 664
str_id$ = 704
dir$ = 712
size$ = 720
flags$ = 728
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z PROC	; ImGui::ArrowButtonEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 754
$LN12:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 728				; 000002d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 755
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 756
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ArrowButto
; Line 757
	xor	al, al
	jmp	$LN1@ArrowButto
$LN2@ArrowButto:
; Line 759
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 760
	xor	r8d, r8d
	mov	rdx, QWORD PTR str_id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 761
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 762
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR default_size$[rbp], xmm0
; Line 763
	movss	xmm0, DWORD PTR size$[rbp+4]
	comiss	xmm0, DWORD PTR default_size$[rbp]
	jb	SHORT $LN6@ArrowButto
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	movss	DWORD PTR tv88[rbp], xmm0
	jmp	SHORT $LN7@ArrowButto
$LN6@ArrowButto:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv88[rbp], xmm0
$LN7@ArrowButto:
	movss	xmm1, DWORD PTR tv88[rbp]
	lea	rcx, QWORD PTR size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 764
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ArrowButto
; Line 765
	xor	al, al
	jmp	$LN1@ArrowButto
$LN3@ArrowButto:
; Line 767
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN4@ArrowButto
; Line 768
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 10
	mov	DWORD PTR flags$[rbp], eax
$LN4@ArrowButto:
; Line 771
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 774
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN8@ArrowButto
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN8@ArrowButto
	mov	DWORD PTR tv149[rbp], 23
	jmp	SHORT $LN11@ArrowButto
$LN8@ArrowButto:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN9@ArrowButto
	mov	DWORD PTR tv148[rbp], 22
	jmp	SHORT $LN10@ArrowButto
$LN9@ArrowButto:
	mov	DWORD PTR tv148[rbp], 21
$LN10@ArrowButto:
	mov	eax, DWORD PTR tv148[rbp]
	mov	DWORD PTR tv149[rbp], eax
$LN11@ArrowButto:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv149[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col$[rbp], eax
; Line 775
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$[rbp], eax
; Line 776
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 777
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5536]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR bg_col$[rbp]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 778
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR size$[rbp+4]
	subss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv187[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	subss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv185[rbp], xmm0
	movss	xmm2, DWORD PTR tv187[rbp]
	movss	xmm1, DWORD PTR tv185[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T9[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv195[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR dir$[rbp]
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T9[rbp]
	mov	rcx, QWORD PTR tv195[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
; Line 780
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@ArrowButto:
; Line 781
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+680]
	pop	rdi
	pop	rbp
	ret	0
?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z ENDP	; ImGui::ArrowButtonEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
bb$ = 72
hovered$ = 116
held$ = 148
pressed$ = 180
bg_col$ = 212
text_col$ = 244
center$ = 280
$T7 = 500
$T8 = 532
$T9 = 564
$T10 = 596
$T11 = 628
$T12 = 664
tv169 = 676
tv143 = 676
tv182 = 680
tv164 = 680
tv142 = 680
tv90 = 680
tv88 = 688
__$ArrayPad$ = 696
id$ = 736
pos$ = 744
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z PROC		; ImGui::CollapseButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 829
$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 760				; 000002f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+792]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 830
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 831
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 833
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5528				; 00001598H
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	QWORD PTR tv90[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv88[rbp], rax
	mov	r8, QWORD PTR tv90[rbp]
	mov	rdx, QWORD PTR tv88[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	mov	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 834
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
; Line 836
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 839
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN6@CollapseBu
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN6@CollapseBu
	mov	DWORD PTR tv143[rbp], 23
	jmp	SHORT $LN9@CollapseBu
$LN6@CollapseBu:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN7@CollapseBu
	mov	DWORD PTR tv142[rbp], 22
	jmp	SHORT $LN8@CollapseBu
$LN7@CollapseBu:
	mov	DWORD PTR tv142[rbp], 21
$LN8@CollapseBu:
	mov	eax, DWORD PTR tv142[rbp]
	mov	DWORD PTR tv143[rbp], eax
$LN9@CollapseBu:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv143[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col$[rbp], eax
; Line 840
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$[rbp], eax
; Line 841
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetCenter@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetCenter
; Line 842
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN3@CollapseBu
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN2@CollapseBu
$LN3@CollapseBu:
; Line 843
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv164[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR __real@3f800000
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, DWORD PTR bg_col$[rbp]
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv164[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
$LN2@CollapseBu:
; Line 844
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+145]
	test	eax, eax
	je	SHORT $LN10@CollapseBu
	mov	DWORD PTR tv169[rbp], 1
	jmp	SHORT $LN11@CollapseBu
$LN10@CollapseBu:
	mov	DWORD PTR tv169[rbp], 3
$LN11@CollapseBu:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5528				; 00001598H
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T12[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv182[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv169[rbp]
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T12[rbp]
	mov	rcx, QWORD PTR tv182[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
; Line 847
	call	?IsItemActive@ImGui@@YA_NXZ		; ImGui::IsItemActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@CollapseBu
	movss	xmm1, DWORD PTR __real@bf800000
	xor	ecx, ecx
	call	?IsMouseDragging@ImGui@@YA_NHM@Z	; ImGui::IsMouseDragging
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@CollapseBu
; Line 848
	mov	rcx, QWORD PTR window$[rbp]
	call	?StartMouseMovingWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::StartMouseMovingWindow
$LN4@CollapseBu:
; Line 850
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 851
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+712]
	pop	rdi
	pop	rbp
	ret	0
?CollapseButton@ImGui@@YA_NIAEBUImVec2@@@Z ENDP		; ImGui::CollapseButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
bb$ = 72
bb_interact$ = 120
area_to_visible_ratio$ = 164
is_clipped$ = 196
hovered$ = 228
held$ = 260
pressed$ = 292
col$ = 324
center$ = 360
cross_extent$ = 388
cross_col$ = 420
$T8 = 836
$T9 = 868
$T10 = 900
$T11 = 932
$T12 = 964
$T13 = 996
$T14 = 1028
$T15 = 1060
$T16 = 1092
$T17 = 1124
$T18 = 1156
$T19 = 1188
$T20 = 1220
$T21 = 1252
$T22 = 1284
$T23 = 1316
tv164 = 1332
tv150 = 1332
tv94 = 1332
tv290 = 1336
tv228 = 1336
tv185 = 1336
tv90 = 1336
tv288 = 1344
tv226 = 1344
tv183 = 1344
tv88 = 1344
tv254 = 1352
tv224 = 1352
__$ArrayPad$ = 1360
id$ = 1408
pos$ = 1416
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z PROC		; ImGui::CloseButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 791
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1424				; 00000590H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 248				; 000000f8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+1464]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 792
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 793
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 797
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5528				; 00001598H
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	QWORD PTR tv90[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv88[rbp], rax
	mov	r8, QWORD PTR tv90[rbp]
	mov	rdx, QWORD PTR tv88[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	mov	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 798
	lea	rax, QWORD PTR bb_interact$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 799
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 512				; 00000200H
	mov	rcx, rax
	call	?GetArea@ImRect@@QEBAMXZ		; ImRect::GetArea
	movss	DWORD PTR tv94[rbp], xmm0
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetArea@ImRect@@QEBAMXZ		; ImRect::GetArea
	movss	xmm1, DWORD PTR tv94[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR area_to_visible_ratio$[rbp], xmm0
; Line 800
	movss	xmm0, DWORD PTR __real@3fc00000
	comiss	xmm0, DWORD PTR area_to_visible_ratio$[rbp]
	jbe	SHORT $LN2@CloseButto
; Line 801
	lea	rdx, QWORD PTR $T12[rbp]
	lea	rcx, QWORD PTR bb_interact$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	movss	xmm2, DWORD PTR __real@be800000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rbp]
	call	?ImFloor@@YA?AUImVec2@@AEBU1@@Z		; ImFloor
	mov	rdx, rax
	lea	rcx, QWORD PTR bb_interact$[rbp]
	call	?Expand@ImRect@@QEAAXAEBUImVec2@@@Z	; ImRect::Expand
$LN2@CloseButto:
; Line 805
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb_interact$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@CloseButto
	mov	DWORD PTR tv150[rbp], 1
	jmp	SHORT $LN7@CloseButto
$LN6@CloseButto:
	mov	DWORD PTR tv150[rbp], 0
$LN7@CloseButto:
	movzx	eax, BYTE PTR tv150[rbp]
	mov	BYTE PTR is_clipped$[rbp], al
; Line 808
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb_interact$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 809
	movzx	eax, BYTE PTR is_clipped$[rbp]
	test	eax, eax
	je	SHORT $LN3@CloseButto
; Line 810
	movzx	eax, BYTE PTR pressed$[rbp]
	jmp	$LN1@CloseButto
$LN3@CloseButto:
; Line 814
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN8@CloseButto
	mov	DWORD PTR tv164[rbp], 23
	jmp	SHORT $LN9@CloseButto
$LN8@CloseButto:
	mov	DWORD PTR tv164[rbp], 22
$LN9@CloseButto:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv164[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$[rbp], eax
; Line 815
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetCenter@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetCenter
; Line 816
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN4@CloseButto
; Line 817
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv185[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@40000000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv183[rbp], xmm0
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, DWORD PTR col$[rbp]
	movss	xmm2, DWORD PTR tv183[rbp]
	lea	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv185[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
$LN4@CloseButto:
; Line 819
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3f350481
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR cross_extent$[rbp], xmm0
; Line 820
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR cross_col$[rbp], eax
; Line 821
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	lea	rcx, QWORD PTR center$[rbp]
	call	??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z	; operator-=
; Line 822
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv228[rbp], rax
	movss	xmm0, DWORD PTR cross_extent$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm1, DWORD PTR cross_extent$[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv226[rbp], rax
	movss	xmm2, DWORD PTR cross_extent$[rbp]
	movss	xmm1, DWORD PTR cross_extent$[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv224[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR cross_col$[rbp]
	mov	r8, QWORD PTR tv226[rbp]
	mov	rdx, QWORD PTR tv224[rbp]
	mov	rcx, QWORD PTR tv228[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 823
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv290[rbp], rax
	movss	xmm0, DWORD PTR cross_extent$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	xmm2, DWORD PTR cross_extent$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv288[rbp], rax
	movss	xmm0, DWORD PTR cross_extent$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR cross_extent$[rbp]
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv254[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR cross_col$[rbp]
	mov	r8, QWORD PTR tv288[rbp]
	mov	rdx, QWORD PTR tv254[rbp]
	mov	rcx, QWORD PTR tv290[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 825
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@CloseButto:
; Line 826
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1376]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z ENDP		; ImGui::CloseButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
label_size$ = 136
pos$ = 168
size$ = 200
bb$ = 232
hovered$ = 276
held$ = 308
pressed$ = 340
col$ = 372
$T9 = 596
$T10 = 628
$T11 = 660
tv175 = 676
tv212 = 680
tv174 = 680
tv210 = 688
__$ArrayPad$ = 696
label$ = 736
size_arg$ = 744
flags$ = 752
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z PROC		; ImGui::ButtonEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 671
$LN12:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 776				; 00000308H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 130				; 00000082H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+808]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 672
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 673
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ButtonEx
; Line 674
	xor	al, al
	jmp	$LN1@ButtonEx
$LN2@ButtonEx:
; Line 676
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 677
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 678
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 679
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 681
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 682
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN3@ButtonEx
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+272]
	comiss	xmm0, DWORD PTR [rcx+60]
	jbe	SHORT $LN3@ButtonEx
; Line 683
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+272]
	subss	xmm0, DWORD PTR [rcx+60]
	movss	xmm1, DWORD PTR pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR pos$[rbp+4], xmm0
$LN3@ButtonEx:
; Line 684
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+56]
	mulss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR label_size$[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	rax, QWORD PTR size_arg$[rbp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, QWORD PTR size$[rbp]
	call	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z ; ImGui::CalcItemSize
; Line 686
	lea	r8, QWORD PTR size$[rbp]
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 687
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 688
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@ButtonEx
; Line 689
	xor	al, al
	jmp	$LN1@ButtonEx
$LN4@ButtonEx:
; Line 691
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN5@ButtonEx
; Line 692
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 10
	mov	DWORD PTR flags$[rbp], eax
$LN5@ButtonEx:
; Line 694
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 697
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN8@ButtonEx
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN8@ButtonEx
	mov	DWORD PTR tv175[rbp], 23
	jmp	SHORT $LN11@ButtonEx
$LN8@ButtonEx:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN9@ButtonEx
	mov	DWORD PTR tv174[rbp], 22
	jmp	SHORT $LN10@ButtonEx
$LN9@ButtonEx:
	mov	DWORD PTR tv174[rbp], 21
$LN10@ButtonEx:
	mov	eax, DWORD PTR tv174[rbp]
	mov	DWORD PTR tv175[rbp], eax
$LN11@ButtonEx:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv175[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$[rbp], eax
; Line 698
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 699
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR col$[rbp]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 701
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN6@ButtonEx
; Line 702
	lea	rdx, OFFSET FLAT:??_C@_01LBDDMOBJ@?$FN@
	lea	rcx, OFFSET FLAT:??_C@_01OHGJGJJP@?$FL@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
$LN6@ButtonEx:
; Line 703
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv212[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv210[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 148				; 00000094H
	lea	rcx, QWORD PTR bb$[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR label_size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR label$[rbp]
	mov	rdx, QWORD PTR tv212[rbp]
	mov	rcx, QWORD PTR tv210[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 710
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@ButtonEx:
; Line 711
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+712]
	pop	rdi
	pop	rbp
	ret	0
?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ENDP		; ImGui::ButtonEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextEx@ImGui@@YAXPEBD0H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
text_begin$ = 72
text_pos$ = 104
wrap_pos_x$ = 132
wrap_enabled$ = 164
line$10 = 200
line_height$11 = 228
text_size$12 = 264
pos$13 = 296
lines_skippable$14 = 324
lines_skipped$15 = 356
line_end$16 = 392
line_rect$17 = 424
line_end$18 = 472
lines_skipped$19 = 500
line_end$20 = 536
bb$21 = 568
wrap_width$22 = 612
text_size$23 = 648
bb$24 = 680
$T25 = 1108
$T26 = 1140
$T27 = 1172
$T28 = 1204
$T29 = 1236
$T30 = 1268
$T31 = 1300
$T32 = 1332
tv294 = 1348
tv93 = 1348
tv349 = 1352
tv350 = 1360
__$ArrayPad$ = 1368
text$ = 1408
text_end$ = 1416
flags$ = 1424
?TextEx@ImGui@@YAXPEBD0H@Z PROC				; ImGui::TextEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 151
$LN29:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1432				; 00000598H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 250				; 000000faH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1464]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 152
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 153
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN8@TextEx
; Line 154
	jmp	$LN1@TextEx
$LN8@TextEx:
; Line 156
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 157
	cmp	QWORD PTR text$[rbp], 0
	jne	SHORT $LN23@TextEx
	mov	eax, DWORD PTR ?__LINE__Var@?0??TextEx@ImGui@@YAXPEBD0H@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BE@HMGDGFIB@?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@TextEx:
; Line 158
	mov	rax, QWORD PTR text$[rbp]
	mov	QWORD PTR text_begin$[rbp], rax
; Line 159
	cmp	QWORD PTR text_end$[rbp], 0
	jne	SHORT $LN9@TextEx
; Line 160
	mov	rax, QWORD PTR text$[rbp]
	mov	QWORD PTR tv349[rbp], rax
	mov	QWORD PTR tv350[rbp], -1
$LL28@TextEx:
	inc	QWORD PTR tv350[rbp]
	mov	rax, QWORD PTR tv349[rbp]
	mov	rcx, QWORD PTR tv350[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL28@TextEx
	mov	rax, QWORD PTR tv350[rbp]
	mov	rcx, QWORD PTR text$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_end$[rbp], rax
$LN9@TextEx:
; Line 162
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	addss	xmm0, DWORD PTR [rcx+272]
	movaps	xmm2, xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	lea	rcx, QWORD PTR text_pos$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 163
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+456]
	movss	DWORD PTR wrap_pos_x$[rbp], xmm0
; Line 164
	movss	xmm0, DWORD PTR wrap_pos_x$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN24@TextEx
	mov	BYTE PTR tv93[rbp], 1
	jmp	SHORT $LN25@TextEx
$LN24@TextEx:
	mov	BYTE PTR tv93[rbp], 0
$LN25@TextEx:
	movzx	eax, BYTE PTR tv93[rbp]
	mov	BYTE PTR wrap_enabled$[rbp], al
; Line 165
	mov	rax, QWORD PTR text$[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 2000				; 000007d0H
	jle	$LN10@TextEx
	movzx	eax, BYTE PTR wrap_enabled$[rbp]
	test	eax, eax
	jne	$LN10@TextEx
; Line 172
	mov	rax, QWORD PTR text$[rbp]
	mov	QWORD PTR line$10[rbp], rax
; Line 173
	call	?GetTextLineHeight@ImGui@@YAMXZ		; ImGui::GetTextLineHeight
	movss	DWORD PTR line_height$11[rbp], xmm0
; Line 174
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR text_size$12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 177
	mov	rax, QWORD PTR text_pos$[rbp]
	mov	QWORD PTR pos$13[rbp], rax
; Line 178
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	jne	$LN12@TextEx
; Line 180
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+596]
	subss	xmm0, DWORD PTR text_pos$[rbp+4]
	divss	xmm0, DWORD PTR line_height$11[rbp]
	cvttss2si eax, xmm0
	mov	DWORD PTR lines_skippable$14[rbp], eax
; Line 181
	cmp	DWORD PTR lines_skippable$14[rbp], 0
	jle	$LN13@TextEx
; Line 183
	mov	DWORD PTR lines_skipped$15[rbp], 0
$LN2@TextEx:
; Line 184
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR line$10[rbp], rax
	jae	$LN3@TextEx
	mov	eax, DWORD PTR lines_skippable$14[rbp]
	cmp	DWORD PTR lines_skipped$15[rbp], eax
	jge	$LN3@TextEx
; Line 186
	mov	rax, QWORD PTR line$10[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, 10
	mov	rcx, QWORD PTR line$10[rbp]
	call	memchr
	mov	QWORD PTR line_end$16[rbp], rax
; Line 187
	cmp	QWORD PTR line_end$16[rbp], 0
	jne	SHORT $LN14@TextEx
; Line 188
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR line_end$16[rbp], rax
$LN14@TextEx:
; Line 189
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN15@TextEx
; Line 190
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR line_end$16[rbp]
	mov	rdx, QWORD PTR line$10[rbp]
	lea	rcx, QWORD PTR $T25[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	movss	xmm1, DWORD PTR [rax]
	movss	xmm0, DWORD PTR text_size$12[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR text_size$12[rbp], xmm0
$LN15@TextEx:
; Line 191
	mov	rax, QWORD PTR line_end$16[rbp]
	inc	rax
	mov	QWORD PTR line$10[rbp], rax
; Line 192
	mov	eax, DWORD PTR lines_skipped$15[rbp]
	inc	eax
	mov	DWORD PTR lines_skipped$15[rbp], eax
; Line 193
	jmp	$LN2@TextEx
$LN3@TextEx:
; Line 194
	cvtsi2ss xmm0, DWORD PTR lines_skipped$15[rbp]
	mulss	xmm0, DWORD PTR line_height$11[rbp]
	movss	xmm1, DWORD PTR pos$13[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR pos$13[rbp+4], xmm0
$LN13@TextEx:
$LN12@TextEx:
; Line 199
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR line$10[rbp], rax
	jae	$LN16@TextEx
; Line 201
	movss	xmm2, DWORD PTR line_height$11[rbp]
	movss	xmm1, DWORD PTR __real@7f7fffff
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$13[rbp]
	lea	rcx, QWORD PTR $T27[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$13[rbp]
	lea	rcx, QWORD PTR line_rect$17[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
$LN4@TextEx:
; Line 202
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR line$10[rbp], rax
	jae	$LN5@TextEx
; Line 204
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR line_rect$17[rbp]
	call	?IsClippedEx@ImGui@@YA_NAEBUImRect@@I_N@Z ; ImGui::IsClippedEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN17@TextEx
; Line 205
	jmp	$LN5@TextEx
$LN17@TextEx:
; Line 207
	mov	rax, QWORD PTR line$10[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, 10
	mov	rcx, QWORD PTR line$10[rbp]
	call	memchr
	mov	QWORD PTR line_end$18[rbp], rax
; Line 208
	cmp	QWORD PTR line_end$18[rbp], 0
	jne	SHORT $LN18@TextEx
; Line 209
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR line_end$18[rbp], rax
$LN18@TextEx:
; Line 210
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR line_end$18[rbp]
	mov	rdx, QWORD PTR line$10[rbp]
	lea	rcx, QWORD PTR $T28[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	movss	xmm1, DWORD PTR [rax]
	movss	xmm0, DWORD PTR text_size$12[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR text_size$12[rbp], xmm0
; Line 211
	xor	r9d, r9d
	mov	r8, QWORD PTR line_end$18[rbp]
	mov	rdx, QWORD PTR line$10[rbp]
	mov	rcx, QWORD PTR pos$13[rbp]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
; Line 212
	mov	rax, QWORD PTR line_end$18[rbp]
	inc	rax
	mov	QWORD PTR line$10[rbp], rax
; Line 213
	movss	xmm0, DWORD PTR line_rect$17[rbp+4]
	addss	xmm0, DWORD PTR line_height$11[rbp]
	movss	DWORD PTR line_rect$17[rbp+4], xmm0
; Line 214
	movss	xmm0, DWORD PTR line_rect$17[rbp+12]
	addss	xmm0, DWORD PTR line_height$11[rbp]
	movss	DWORD PTR line_rect$17[rbp+12], xmm0
; Line 215
	movss	xmm0, DWORD PTR pos$13[rbp+4]
	addss	xmm0, DWORD PTR line_height$11[rbp]
	movss	DWORD PTR pos$13[rbp+4], xmm0
; Line 216
	jmp	$LN4@TextEx
$LN5@TextEx:
; Line 219
	mov	DWORD PTR lines_skipped$19[rbp], 0
$LN6@TextEx:
; Line 220
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR line$10[rbp], rax
	jae	$LN7@TextEx
; Line 222
	mov	rax, QWORD PTR line$10[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, 10
	mov	rcx, QWORD PTR line$10[rbp]
	call	memchr
	mov	QWORD PTR line_end$20[rbp], rax
; Line 223
	cmp	QWORD PTR line_end$20[rbp], 0
	jne	SHORT $LN19@TextEx
; Line 224
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR line_end$20[rbp], rax
$LN19@TextEx:
; Line 225
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN20@TextEx
; Line 226
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR line_end$20[rbp]
	mov	rdx, QWORD PTR line$10[rbp]
	lea	rcx, QWORD PTR $T29[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	movss	xmm1, DWORD PTR [rax]
	movss	xmm0, DWORD PTR text_size$12[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR text_size$12[rbp], xmm0
$LN20@TextEx:
; Line 227
	mov	rax, QWORD PTR line_end$20[rbp]
	inc	rax
	mov	QWORD PTR line$10[rbp], rax
; Line 228
	mov	eax, DWORD PTR lines_skipped$19[rbp]
	inc	eax
	mov	DWORD PTR lines_skipped$19[rbp], eax
; Line 229
	jmp	$LN6@TextEx
$LN7@TextEx:
; Line 230
	cvtsi2ss xmm0, DWORD PTR lines_skipped$19[rbp]
	mulss	xmm0, DWORD PTR line_height$11[rbp]
	movss	xmm1, DWORD PTR pos$13[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR pos$13[rbp+4], xmm0
$LN16@TextEx:
; Line 232
	lea	r8, QWORD PTR text_pos$[rbp]
	lea	rdx, QWORD PTR pos$13[rbp]
	lea	rcx, QWORD PTR $T30[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR text_size$12[rbp+4], xmm0
; Line 234
	lea	r8, QWORD PTR text_size$12[rbp]
	lea	rdx, QWORD PTR text_pos$[rbp]
	lea	rcx, QWORD PTR $T31[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR text_pos$[rbp]
	lea	rcx, QWORD PTR bb$21[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 235
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR text_size$12[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 236
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$21[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
; Line 237
	jmp	$LN11@TextEx
$LN10@TextEx:
; Line 240
	movzx	eax, BYTE PTR wrap_enabled$[rbp]
	test	eax, eax
	je	SHORT $LN26@TextEx
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	movss	xmm1, DWORD PTR wrap_pos_x$[rbp]
	mov	rcx, rax
	call	?CalcWrapWidthForPos@ImGui@@YAMAEBUImVec2@@M@Z ; ImGui::CalcWrapWidthForPos
	movss	DWORD PTR tv294[rbp], xmm0
	jmp	SHORT $LN27@TextEx
$LN26@TextEx:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv294[rbp], xmm0
$LN27@TextEx:
	movss	xmm0, DWORD PTR tv294[rbp]
	movss	DWORD PTR wrap_width$22[rbp], xmm0
; Line 241
	movss	xmm0, DWORD PTR wrap_width$22[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR text_begin$[rbp]
	lea	rcx, QWORD PTR text_size$23[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 243
	lea	r8, QWORD PTR text_size$23[rbp]
	lea	rdx, QWORD PTR text_pos$[rbp]
	lea	rcx, QWORD PTR $T32[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR text_pos$[rbp]
	lea	rcx, QWORD PTR bb$24[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 244
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR text_size$23[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 245
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$24[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN21@TextEx
; Line 246
	jmp	SHORT $LN1@TextEx
$LN21@TextEx:
; Line 249
	movss	xmm3, DWORD PTR wrap_width$22[rbp]
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR text_begin$[rbp]
	mov	rcx, QWORD PTR bb$24[rbp]
	call	?RenderTextWrapped@ImGui@@YAXUImVec2@@PEBD1M@Z ; ImGui::RenderTextWrapped
$LN11@TextEx:
$LN1@TextEx:
; Line 251
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TextEx@ImGui@@YAXPEBD0H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1384]
	pop	rdi
	pop	rbp
	ret	0
?TextEx@ImGui@@YAXPEBD0H@Z ENDP				; ImGui::TextEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z
_TEXT	SEGMENT
g$ = 8
label_size$ = 40
text_pixel_clip_bb$ = 72
text_ellipsis_clip_bb$ = 120
button_sz$ = 164
button_pos$ = 200
close_button_pressed$ = 228
close_button_visible$ = 260
unsaved_marker_visible$ = 292
last_item_backup$9 = 328
bullet_bb$10 = 392
ellipsis_max_x$ = 436
$T11 = 852
$T12 = 884
$T13 = 916
$T14 = 948
$T15 = 980
$T16 = 1016
tv282 = 1028
tv277 = 1028
tv269 = 1028
tv263 = 1028
tv172 = 1028
tv151 = 1028
tv147 = 1028
tv93 = 1028
tv89 = 1028
tv218 = 1032
tv145 = 1032
tv216 = 1040
__$ArrayPad$ = 1048
draw_list$ = 1088
bb$ = 1096
flags$ = 1104
frame_padding$ = 1112
label$ = 1120
tab_id$ = 1128
close_button_id$ = 1136
is_contents_visible$ = 1144
out_just_closed$ = 1152
out_text_clipped$ = 1160
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z PROC ; ImGui::TabItemLabelAndCloseButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 8059
$LN30:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1120				; 00000460H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 168				; 000000a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 8060
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 8061
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 8063
	cmp	QWORD PTR out_just_closed$[rbp], 0
	je	SHORT $LN2@TabItemLab
; Line 8064
	mov	rax, QWORD PTR out_just_closed$[rbp]
	mov	BYTE PTR [rax], 0
$LN2@TabItemLab:
; Line 8065
	cmp	QWORD PTR out_text_clipped$[rbp], 0
	je	SHORT $LN3@TabItemLab
; Line 8066
	mov	rax, QWORD PTR out_text_clipped$[rbp]
	mov	BYTE PTR [rax], 0
$LN3@TabItemLab:
; Line 8068
	mov	rcx, QWORD PTR bb$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	xmm1, DWORD PTR __real@3f800000
	comiss	xmm1, xmm0
	jb	SHORT $LN4@TabItemLab
; Line 8069
	jmp	$LN1@TabItemLab
$LN4@TabItemLab:
; Line 8080
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR frame_padding$[rbp]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR frame_padding$[rbp+4]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, DWORD PTR frame_padding$[rbp]
	movss	DWORD PTR tv89[rbp], xmm2
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm3, DWORD PTR [rax+12]
	movss	DWORD PTR [rsp+32], xmm3
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv89[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR text_pixel_clip_bb$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 8081
	lea	rax, QWORD PTR text_ellipsis_clip_bb$[rbp]
	lea	rcx, QWORD PTR text_pixel_clip_bb$[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 8084
	cmp	QWORD PTR out_text_clipped$[rbp], 0
	je	SHORT $LN5@TabItemLab
; Line 8086
	movss	xmm0, DWORD PTR text_ellipsis_clip_bb$[rbp]
	addss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR text_pixel_clip_bb$[rbp+8]
	jbe	SHORT $LN20@TabItemLab
	mov	DWORD PTR tv93[rbp], 1
	jmp	SHORT $LN21@TabItemLab
$LN20@TabItemLab:
	mov	DWORD PTR tv93[rbp], 0
$LN21@TabItemLab:
	mov	rax, QWORD PTR out_text_clipped$[rbp]
	movzx	ecx, BYTE PTR tv93[rbp]
	mov	BYTE PTR [rax], cl
$LN5@TabItemLab:
; Line 8090
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR button_sz$[rbp], xmm0
; Line 8091
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv147[rbp], xmm0
	movss	xmm0, DWORD PTR frame_padding$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	subss	xmm0, DWORD PTR button_sz$[rbp]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv145[rbp], xmm0
	movss	xmm2, DWORD PTR tv147[rbp]
	movss	xmm1, DWORD PTR tv145[rbp]
	lea	rcx, QWORD PTR button_pos$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 8098
	mov	BYTE PTR close_button_pressed$[rbp], 0
; Line 8099
	mov	BYTE PTR close_button_visible$[rbp], 0
; Line 8100
	cmp	DWORD PTR close_button_id$[rbp], 0
	je	$LN6@TabItemLab
; Line 8101
	movzx	eax, BYTE PTR is_contents_visible$[rbp]
	test	eax, eax
	jne	SHORT $LN8@TabItemLab
	mov	rcx, QWORD PTR bb$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR tv151[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5612]
	movss	xmm0, DWORD PTR button_sz$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv151[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN7@TabItemLab
$LN8@TabItemLab:
; Line 8102
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR tab_id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	je	SHORT $LN10@TabItemLab
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR close_button_id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	je	SHORT $LN10@TabItemLab
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR tab_id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN10@TabItemLab
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR close_button_id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN9@TabItemLab
$LN10@TabItemLab:
; Line 8103
	mov	BYTE PTR close_button_visible$[rbp], 1
$LN9@TabItemLab:
$LN7@TabItemLab:
$LN6@TabItemLab:
; Line 8104
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN22@TabItemLab
	movss	xmm0, DWORD PTR button_pos$[rbp]
	addss	xmm0, DWORD PTR button_sz$[rbp]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	comiss	xmm1, xmm0
	jb	SHORT $LN22@TabItemLab
	mov	DWORD PTR tv172[rbp], 1
	jmp	SHORT $LN23@TabItemLab
$LN22@TabItemLab:
	mov	DWORD PTR tv172[rbp], 0
$LN23@TabItemLab:
	movzx	eax, BYTE PTR tv172[rbp]
	mov	BYTE PTR unsaved_marker_visible$[rbp], al
; Line 8106
	movzx	eax, BYTE PTR close_button_visible$[rbp]
	test	eax, eax
	je	SHORT $LN11@TabItemLab
; Line 8108
	lea	rcx, QWORD PTR last_item_backup$9[rbp]
	call	??0ImGuiLastItemDataBackup@@QEAA@XZ	; ImGuiLastItemDataBackup::ImGuiLastItemDataBackup
; Line 8109
	lea	rdx, QWORD PTR frame_padding$[rbp]
	mov	ecx, 10
	call	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z	; ImGui::PushStyleVar
; Line 8110
	lea	rdx, QWORD PTR button_pos$[rbp]
	mov	ecx, DWORD PTR close_button_id$[rbp]
	call	?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z	; ImGui::CloseButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@TabItemLab
; Line 8111
	mov	BYTE PTR close_button_pressed$[rbp], 1
$LN13@TabItemLab:
; Line 8112
	mov	ecx, 1
	call	?PopStyleVar@ImGui@@YAXH@Z		; ImGui::PopStyleVar
; Line 8113
	lea	rcx, QWORD PTR last_item_backup$9[rbp]
	call	?Restore@ImGuiLastItemDataBackup@@QEBAXXZ ; ImGuiLastItemDataBackup::Restore
; Line 8116
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN14@TabItemLab
	xor	edx, edx
	mov	ecx, 2
	call	?IsMouseClicked@ImGui@@YA_NH_N@Z	; ImGui::IsMouseClicked
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@TabItemLab
; Line 8117
	mov	BYTE PTR close_button_pressed$[rbp], 1
$LN14@TabItemLab:
; Line 8118
	jmp	$LN12@TabItemLab
$LN11@TabItemLab:
; Line 8119
	movzx	eax, BYTE PTR unsaved_marker_visible$[rbp]
	test	eax, eax
	je	$LN15@TabItemLab
; Line 8121
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5528				; 00001598H
	movss	xmm2, DWORD PTR __real@40000000
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	QWORD PTR tv218[rbp], rax
	movss	xmm2, DWORD PTR button_sz$[rbp]
	movss	xmm1, DWORD PTR button_sz$[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR button_pos$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv216[rbp], rax
	mov	r8, QWORD PTR tv218[rbp]
	mov	rdx, QWORD PTR tv216[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR button_pos$[rbp]
	lea	rcx, QWORD PTR bullet_bb$10[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 8122
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv263[rbp], eax
	lea	rdx, QWORD PTR $T15[rbp]
	lea	rcx, QWORD PTR bullet_bb$10[rbp]
	call	?GetCenter@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetCenter
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T16[rbp], rax
	mov	r8d, DWORD PTR tv263[rbp]
	mov	rdx, QWORD PTR $T16[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
$LN15@TabItemLab:
$LN12@TabItemLab:
; Line 8128
	movzx	eax, BYTE PTR close_button_visible$[rbp]
	test	eax, eax
	je	SHORT $LN24@TabItemLab
	movss	xmm0, DWORD PTR text_pixel_clip_bb$[rbp+8]
	movss	DWORD PTR tv269[rbp], xmm0
	jmp	SHORT $LN25@TabItemLab
$LN24@TabItemLab:
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv269[rbp], xmm0
$LN25@TabItemLab:
	movss	xmm0, DWORD PTR tv269[rbp]
	movss	DWORD PTR ellipsis_max_x$[rbp], xmm0
; Line 8129
	movzx	eax, BYTE PTR close_button_visible$[rbp]
	test	eax, eax
	jne	SHORT $LN17@TabItemLab
	movzx	eax, BYTE PTR unsaved_marker_visible$[rbp]
	test	eax, eax
	je	$LN16@TabItemLab
$LN17@TabItemLab:
; Line 8131
	movzx	eax, BYTE PTR close_button_visible$[rbp]
	test	eax, eax
	je	SHORT $LN26@TabItemLab
	movss	xmm0, DWORD PTR button_sz$[rbp]
	movss	DWORD PTR tv277[rbp], xmm0
	jmp	SHORT $LN27@TabItemLab
$LN26@TabItemLab:
	movss	xmm0, DWORD PTR button_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv277[rbp], xmm0
$LN27@TabItemLab:
	movss	xmm0, DWORD PTR text_pixel_clip_bb$[rbp+8]
	subss	xmm0, DWORD PTR tv277[rbp]
	movss	DWORD PTR text_pixel_clip_bb$[rbp+8], xmm0
; Line 8132
	movzx	eax, BYTE PTR unsaved_marker_visible$[rbp]
	test	eax, eax
	je	SHORT $LN28@TabItemLab
	movss	xmm0, DWORD PTR button_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR tv282[rbp], xmm0
	jmp	SHORT $LN29@TabItemLab
$LN28@TabItemLab:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv282[rbp], xmm0
$LN29@TabItemLab:
	movss	xmm0, DWORD PTR text_ellipsis_clip_bb$[rbp+8]
	subss	xmm0, DWORD PTR tv282[rbp]
	movss	DWORD PTR text_ellipsis_clip_bb$[rbp+8], xmm0
; Line 8133
	movss	xmm0, DWORD PTR text_pixel_clip_bb$[rbp+8]
	movss	DWORD PTR ellipsis_max_x$[rbp], xmm0
$LN16@TabItemLab:
; Line 8135
	lea	rax, QWORD PTR label_size$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR label$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR ellipsis_max_x$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR text_pixel_clip_bb$[rbp+8]
	lea	r8, QWORD PTR text_ellipsis_clip_bb$[rbp+8]
	lea	rdx, QWORD PTR text_ellipsis_clip_bb$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderTextEllipsis@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1MMPEBD2PEBU3@@Z ; ImGui::RenderTextEllipsis
; Line 8142
	cmp	QWORD PTR out_just_closed$[rbp], 0
	je	SHORT $LN18@TabItemLab
; Line 8143
	mov	rax, QWORD PTR out_just_closed$[rbp]
	movzx	ecx, BYTE PTR close_button_pressed$[rbp]
	mov	BYTE PTR [rax], cl
$LN18@TabItemLab:
$LN1@TabItemLab:
; Line 8144
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1056]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z ENDP ; ImGui::TabItemLabelAndCloseButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z
_TEXT	SEGMENT
g$ = 8
width$ = 36
rounding$ = 68
y1$ = 100
y2$ = 132
$T1 = 356
$T2 = 388
$T3 = 420
$T4 = 452
$T5 = 484
$T6 = 516
$T7 = 548
$T8 = 580
tv234 = 596
tv86 = 596
tv232 = 600
tv83 = 600
draw_list$ = 640
bb$ = 648
flags$ = 656
col$ = 664
?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z PROC ; ImGui::TabItemBackground, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 8032
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 664				; 00000298H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 8034
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 8035
	mov	rcx, QWORD PTR bb$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR width$[rbp], xmm0
; Line 8037
	movss	xmm0, DWORD PTR width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN4@TabItemBac
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@HMBBPDPB@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0?$AAf@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@TabItemBac:
; Line 8038
	movss	xmm0, DWORD PTR width$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv86[rbp], xmm0
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN5@TabItemBac
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5536]
	movss	DWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN6@TabItemBac
$LN5@TabItemBac:
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5604]
	movss	DWORD PTR tv83[rbp], xmm0
$LN6@TabItemBac:
	movss	xmm1, DWORD PTR tv86[rbp]
	movss	xmm0, DWORD PTR tv83[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR rounding$[rbp], xmm0
; Line 8039
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y1$[rbp], xmm0
; Line 8040
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y2$[rbp], xmm0
; Line 8041
	movss	xmm2, DWORD PTR y2$[rbp]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 8042
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR rounding$[rbp]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 6
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 8043
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR rounding$[rbp]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, 9
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 8044
	movss	xmm2, DWORD PTR y2$[rbp]
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 8045
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
; Line 8046
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5608]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN2@TabItemBac
; Line 8048
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR y2$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 8049
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR rounding$[rbp]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR rounding$[rbp]
	addss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 6
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 8050
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR rounding$[rbp]
	addss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR rounding$[rbp]
	subss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, 9
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 8051
	mov	rax, QWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR y2$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 8052
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5608]
	movss	DWORD PTR tv234[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 5
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv232[rbp], eax
	movss	xmm3, DWORD PTR tv234[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR tv232[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN2@TabItemBac:
; Line 8054
	lea	rsp, QWORD PTR [rbp+616]
	pop	rdi
	pop	rbp
	ret	0
?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z ENDP ; ImGui::TabItemBackground
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z
_TEXT	SEGMENT
g$ = 8
label_size$ = 40
size$ = 72
__$ArrayPad$ = 280
__$ReturnUdt$ = 320
label$ = 328
has_close_button$ = 336
?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z PROC	; ImGui::TabItemCalcSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 8020
$LN5:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+376]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 8021
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 8022
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 8023
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR label_size$[rbp]
	addss	xmm1, DWORD PTR [rax+5528]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 8024
	movzx	eax, BYTE PTR has_close_button$[rbp]
	test	eax, eax
	je	SHORT $LN2@TabItemCal
; Line 8025
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5552]
	addss	xmm0, DWORD PTR [rcx+6528]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR size$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR size$[rbp], xmm0
	jmp	SHORT $LN3@TabItemCal
$LN2@TabItemCal:
; Line 8027
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5528]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR size$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR size$[rbp], xmm0
$LN3@TabItemCal:
; Line 8028
	call	?TabBarCalcMaxTabWidth@ImGui@@YAMXZ	; ImGui::TabBarCalcMaxTabWidth
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR size$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	xmm2, DWORD PTR size$[rbp+4]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 8029
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z ENDP	; ImGui::TabItemCalcSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
style$ = 72
id$ = 100
size$ = 136
tab$ = 168
tab_is_new$ = 196
tab_bar_appearing$ = 228
tab_bar_focused$ = 260
tab_appearing$ = 292
is_tab_button$ = 324
tab_contents_visible$ = 356
backup_main_cursor_pos$ = 392
is_central_section$ = 420
pos$ = 456
bb$ = 488
want_clip_rect$ = 532
backup_cursor_max_pos$ = 568
button_flags$ = 596
hovered$ = 628
held$ = 660
pressed$ = 692
display_draw_list$ = 728
tab_col$ = 756
hovered_unblocked$ = 788
close_button_id$ = 820
just_closed$ = 852
text_clipped$ = 884
$T12 = 1492
$T13 = 1540
$T14 = 1604
$T15 = 1652
$T16 = 1684
$T17 = 1716
$T18 = 1748
$T19 = 1780
$T20 = 1812
$T21 = 1844
$T22 = 1876
tv531 = 1892
tv490 = 1892
tv435 = 1892
tv415 = 1892
tv399 = 1892
tv330 = 1892
tv276 = 1892
tv233 = 1892
tv192 = 1892
tv189 = 1892
tv184 = 1892
tv180 = 1892
tv175 = 1892
tv140 = 1892
tv496 = 1896
tv397 = 1896
tv385 = 1896
tv209 = 1896
tv166 = 1896
tv153 = 1896
tv493 = 1900
tv635 = 1904
tv497 = 1904
tv342 = 1904
tv636 = 1912
tv351 = 1912
__$ArrayPad$ = 1920
tab_bar$ = 1968
label$ = 1976
p_open$ = 1984
flags$ = 1992
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z PROC ; ImGui::TabItemEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7791
$LN80:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 2024				; 000007e8H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 342				; 00000156H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2056]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7793
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, BYTE PTR [rax+107]
	test	eax, eax
	je	SHORT $LN2@TabItemEx
; Line 7794
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z ; ImGui::TabBarLayout
$LN2@TabItemEx:
; Line 7796
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7797
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7798
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN3@TabItemEx
; Line 7799
	xor	al, al
	jmp	$LN1@TabItemEx
$LN3@TabItemEx:
; Line 7801
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 7802
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z ; ImGui::TabBarCalcTabID
	mov	DWORD PTR id$[rbp], eax
; Line 7807
	cmp	QWORD PTR p_open$[rbp], 0
	je	SHORT $LN4@TabItemEx
	mov	rax, QWORD PTR p_open$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN4@TabItemEx
; Line 7809
	mov	dl, 1
	mov	ecx, 24
	call	?PushItemFlag@ImGui@@YAXH_N@Z		; ImGui::PushItemFlag
; Line 7810
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, rax
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
; Line 7811
	call	?PopItemFlag@ImGui@@YAXXZ		; ImGui::PopItemFlag
; Line 7812
	xor	al, al
	jmp	$LN1@TabItemEx
$LN4@TabItemEx:
; Line 7815
	cmp	QWORD PTR p_open$[rbp], 0
	je	SHORT $LN45@TabItemEx
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN45@TabItemEx
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z@4JA
	add	eax, 24
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FO@JEBFCDGI@?$AA?$CB?$AAp?$AA_?$AAo?$AAp?$AAe?$AAn?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CB?$AA?$CI?$AAf?$AAl@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN45@TabItemEx:
; Line 7816
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 192				; 000000c0H
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN46@TabItemEx
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z@4JA
	add	eax, 25
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1PO@BEHLBGBB@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@TabItemEx:
; Line 7819
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN5@TabItemEx
; Line 7820
	mov	QWORD PTR p_open$[rbp], 0
	jmp	SHORT $LN6@TabItemEx
$LN5@TabItemEx:
; Line 7821
	cmp	QWORD PTR p_open$[rbp], 0
	jne	SHORT $LN7@TabItemEx
; Line 7822
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 20
	mov	DWORD PTR flags$[rbp], eax
$LN7@TabItemEx:
$LN6@TabItemEx:
; Line 7825
	cmp	QWORD PTR p_open$[rbp], 0
	je	SHORT $LN47@TabItemEx
	mov	BYTE PTR tv140[rbp], 1
	jmp	SHORT $LN48@TabItemEx
$LN47@TabItemEx:
	mov	BYTE PTR tv140[rbp], 0
$LN48@TabItemEx:
	movzx	r8d, BYTE PTR tv140[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR size$[rbp]
	call	?TabItemCalcSize@ImGui@@YA?AUImVec2@@PEBD_N@Z ; ImGui::TabItemCalcSize
; Line 7828
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
	mov	QWORD PTR tab$[rbp], rax
; Line 7829
	mov	BYTE PTR tab_is_new$[rbp], 0
; Line 7830
	cmp	QWORD PTR tab$[rbp], 0
	jne	SHORT $LN8@TabItemEx
; Line 7832
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv153[rbp], rax
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImGuiTabItem@@QEAA@XZ		; ImGuiTabItem::ImGuiTabItem
	mov	rdx, rax
	mov	rcx, QWORD PTR tv153[rbp]
	call	?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z ; ImVector<ImGuiTabItem>::push_back
; Line 7833
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, rax
	call	?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ ; ImVector<ImGuiTabItem>::back
	mov	QWORD PTR tab$[rbp], rax
; Line 7834
	mov	rax, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 7835
	mov	rax, QWORD PTR tab$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 7836
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+109], 1
; Line 7837
	mov	BYTE PTR tab_is_new$[rbp], 1
$LN8@TabItemEx:
; Line 7839
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv166[rbp], rax
	mov	rdx, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tv166[rbp]
	call	?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z ; ImVector<ImGuiTabItem>::index_from_ptr
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	WORD PTR [rcx+112], ax
; Line 7840
	mov	rax, QWORD PTR tab$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 7841
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, WORD PTR [rax+110]
	mov	WORD PTR tv175[rbp], ax
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, WORD PTR [rax+110]
	inc	ax
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	WORD PTR [rcx+110], ax
	mov	rax, QWORD PTR tab$[rbp]
	movzx	ecx, WORD PTR tv175[rbp]
	mov	WORD PTR [rax+32], cx
; Line 7843
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	rcx, QWORD PTR g$[rbp]
	cmp	eax, DWORD PTR [rcx+7056]
	jge	SHORT $LN49@TabItemEx
	mov	BYTE PTR tv180[rbp], 1
	jmp	SHORT $LN50@TabItemEx
$LN49@TabItemEx:
	mov	BYTE PTR tv180[rbp], 0
$LN50@TabItemEx:
	movzx	eax, BYTE PTR tv180[rbp]
	mov	BYTE PTR tab_bar_appearing$[rbp], al
; Line 7844
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN51@TabItemEx
	mov	BYTE PTR tv184[rbp], 1
	jmp	SHORT $LN52@TabItemEx
$LN51@TabItemEx:
	mov	BYTE PTR tv184[rbp], 0
$LN52@TabItemEx:
	movzx	eax, BYTE PTR tv184[rbp]
	mov	BYTE PTR tab_bar_focused$[rbp], al
; Line 7845
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR g$[rbp]
	cmp	eax, DWORD PTR [rcx+7056]
	jge	SHORT $LN53@TabItemEx
	mov	BYTE PTR tv189[rbp], 1
	jmp	SHORT $LN54@TabItemEx
$LN53@TabItemEx:
	mov	BYTE PTR tv189[rbp], 0
$LN54@TabItemEx:
	movzx	eax, BYTE PTR tv189[rbp]
	mov	BYTE PTR tab_appearing$[rbp], al
; Line 7846
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN55@TabItemEx
	mov	BYTE PTR tv192[rbp], 1
	jmp	SHORT $LN56@TabItemEx
$LN55@TabItemEx:
	mov	BYTE PTR tv192[rbp], 0
$LN56@TabItemEx:
	movzx	eax, BYTE PTR tv192[rbp]
	mov	BYTE PTR is_tab_button$[rbp], al
; Line 7847
	mov	rax, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7056]
	mov	DWORD PTR [rax+8], ecx
; Line 7848
	mov	rax, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rax+4], ecx
; Line 7851
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 136				; 00000088H
	mov	rcx, rax
	call	?size@ImGuiTextBuffer@@QEBAHXZ		; ImGuiTextBuffer::size
	mov	rcx, QWORD PTR tab$[rbp]
	mov	DWORD PTR [rcx+28], eax
; Line 7852
	mov	rax, QWORD PTR tab_bar$[rbp]
	add	rax, 136				; 00000088H
	mov	QWORD PTR tv209[rbp], rax
	mov	rax, QWORD PTR label$[rbp]
	mov	QWORD PTR tv635[rbp], rax
	mov	QWORD PTR tv636[rbp], -1
$LL79@TabItemEx:
	inc	QWORD PTR tv636[rbp]
	mov	rax, QWORD PTR tv635[rbp]
	mov	rcx, QWORD PTR tv636[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL79@TabItemEx
	mov	rax, QWORD PTR tv636[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	r8, rax
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR tv209[rbp]
	call	?append@ImGuiTextBuffer@@QEAAXPEBD0@Z	; ImGuiTextBuffer::append
; Line 7855
	movzx	eax, BYTE PTR tab_appearing$[rbp]
	test	eax, eax
	je	SHORT $LN9@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN9@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+28], 0
	jne	SHORT $LN9@TabItemEx
; Line 7856
	movzx	eax, BYTE PTR tab_bar_appearing$[rbp]
	test	eax, eax
	je	SHORT $LN11@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN10@TabItemEx
$LN11@TabItemEx:
; Line 7857
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	jne	SHORT $LN12@TabItemEx
; Line 7858
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+28], ecx
$LN12@TabItemEx:
$LN10@TabItemEx:
$LN9@TabItemEx:
; Line 7859
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN13@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+24], ecx
	je	SHORT $LN13@TabItemEx
; Line 7860
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	jne	SHORT $LN14@TabItemEx
; Line 7861
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+28], ecx
$LN14@TabItemEx:
$LN13@TabItemEx:
; Line 7865
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+32], ecx
	jne	SHORT $LN57@TabItemEx
	mov	DWORD PTR tv233[rbp], 1
	jmp	SHORT $LN58@TabItemEx
$LN57@TabItemEx:
	mov	DWORD PTR tv233[rbp], 0
$LN58@TabItemEx:
	movzx	eax, BYTE PTR tv233[rbp]
	mov	BYTE PTR tab_contents_visible$[rbp], al
; Line 7866
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
	test	eax, eax
	je	SHORT $LN15@TabItemEx
; Line 7867
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+108], 1
$LN15@TabItemEx:
; Line 7870
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
	test	eax, eax
	jne	SHORT $LN16@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN16@TabItemEx
	movzx	eax, BYTE PTR tab_bar_appearing$[rbp]
	test	eax, eax
	je	SHORT $LN16@TabItemEx
; Line 7871
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN17@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN17@TabItemEx
; Line 7872
	mov	BYTE PTR tab_contents_visible$[rbp], 1
$LN17@TabItemEx:
$LN16@TabItemEx:
; Line 7876
	movzx	eax, BYTE PTR tab_appearing$[rbp]
	test	eax, eax
	je	SHORT $LN18@TabItemEx
	movzx	eax, BYTE PTR tab_bar_appearing$[rbp]
	test	eax, eax
	je	SHORT $LN19@TabItemEx
	movzx	eax, BYTE PTR tab_is_new$[rbp]
	test	eax, eax
	je	SHORT $LN18@TabItemEx
$LN19@TabItemEx:
; Line 7878
	mov	dl, 1
	mov	ecx, 24
	call	?PushItemFlag@ImGui@@YAXH_N@Z		; ImGui::PushItemFlag
; Line 7879
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, rax
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
; Line 7880
	call	?PopItemFlag@ImGui@@YAXXZ		; ImGui::PopItemFlag
; Line 7881
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	je	SHORT $LN20@TabItemEx
; Line 7882
	xor	al, al
	jmp	$LN1@TabItemEx
$LN20@TabItemEx:
; Line 7883
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
	jmp	$LN1@TabItemEx
$LN18@TabItemEx:
; Line 7886
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+24], ecx
	jne	SHORT $LN21@TabItemEx
; Line 7887
	mov	rax, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7056]
	mov	DWORD PTR [rax+12], ecx
$LN21@TabItemEx:
; Line 7890
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR backup_main_cursor_pos$[rbp], rax
; Line 7893
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 192				; 000000c0H
	test	eax, eax
	jne	SHORT $LN59@TabItemEx
	mov	BYTE PTR tv276[rbp], 1
	jmp	SHORT $LN60@TabItemEx
$LN59@TabItemEx:
	mov	BYTE PTR tv276[rbp], 0
$LN60@TabItemEx:
	movzx	eax, BYTE PTR tv276[rbp]
	mov	BYTE PTR is_central_section$[rbp], al
; Line 7894
	mov	rax, QWORD PTR tab$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR size$[rbp], xmm0
; Line 7895
	movzx	eax, BYTE PTR is_central_section$[rbp]
	test	eax, eax
	je	SHORT $LN22@TabItemEx
; Line 7896
	mov	rax, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	subss	xmm0, DWORD PTR [rcx+76]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR tab_bar$[rbp]
	add	rcx, 44					; 0000002cH
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T16[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
	jmp	SHORT $LN23@TabItemEx
$LN22@TabItemEx:
; Line 7898
	xorps	xmm2, xmm2
	mov	rax, QWORD PTR tab$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR tab_bar$[rbp]
	add	rcx, 44					; 0000002cH
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
$LN23@TabItemEx:
; Line 7899
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 7900
	lea	r8, QWORD PTR size$[rbp]
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 7903
	movzx	eax, BYTE PTR is_central_section$[rbp]
	test	eax, eax
	je	SHORT $LN62@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+92]
	comiss	xmm0, DWORD PTR bb$[rbp]
	ja	SHORT $LN61@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR bb$[rbp+8]
	comiss	xmm0, DWORD PTR [rax+96]
	jbe	SHORT $LN62@TabItemEx
$LN61@TabItemEx:
	mov	BYTE PTR tv330[rbp], 1
	jmp	SHORT $LN63@TabItemEx
$LN62@TabItemEx:
	mov	BYTE PTR tv330[rbp], 0
$LN63@TabItemEx:
	movzx	eax, BYTE PTR tv330[rbp]
	mov	BYTE PTR want_clip_rect$[rbp], al
; Line 7904
	movzx	eax, BYTE PTR want_clip_rect$[rbp]
	test	eax, eax
	je	$LN24@TabItemEx
; Line 7905
	movss	xmm2, DWORD PTR bb$[rbp+12]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+96]
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv385[rbp], rax
	movss	xmm0, DWORD PTR bb$[rbp+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv342[rbp], xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+92]
	movss	xmm0, DWORD PTR bb$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv342[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv351[rbp], rax
	mov	r8b, 1
	mov	rdx, QWORD PTR tv385[rbp]
	mov	rcx, QWORD PTR tv351[rbp]
	call	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z ; ImGui::PushClipRect
$LN24@TabItemEx:
; Line 7907
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+240]
	mov	QWORD PTR backup_cursor_max_pos$[rbp], rax
; Line 7908
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	movss	DWORD PTR tv399[rbp], xmm0
	lea	rdx, QWORD PTR $T22[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	mov	QWORD PTR tv397[rbp], rax
	movss	xmm1, DWORD PTR tv399[rbp]
	mov	rcx, QWORD PTR tv397[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 7909
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR backup_cursor_max_pos$[rbp]
	mov	QWORD PTR [rax+240], rcx
; Line 7911
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN25@TabItemEx
; Line 7913
	movzx	eax, BYTE PTR want_clip_rect$[rbp]
	test	eax, eax
	je	SHORT $LN26@TabItemEx
; Line 7914
	call	?PopClipRect@ImGui@@YAXXZ		; ImGui::PopClipRect
$LN26@TabItemEx:
; Line 7915
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR backup_main_cursor_pos$[rbp]
	mov	QWORD PTR [rax+216], rcx
; Line 7916
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
	jmp	$LN1@TabItemEx
$LN25@TabItemEx:
; Line 7920
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	je	SHORT $LN64@TabItemEx
	mov	DWORD PTR tv415[rbp], 32		; 00000020H
	jmp	SHORT $LN65@TabItemEx
$LN64@TabItemEx:
	mov	DWORD PTR tv415[rbp], 16
$LN65@TabItemEx:
	mov	eax, DWORD PTR tv415[rbp]
	bts	eax, 12
	mov	DWORD PTR button_flags$[rbp], eax
; Line 7921
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+8012]
	test	eax, eax
	je	SHORT $LN27@TabItemEx
; Line 7922
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 9
	mov	DWORD PTR button_flags$[rbp], eax
$LN27@TabItemEx:
; Line 7924
	mov	eax, DWORD PTR button_flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 7925
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN28@TabItemEx
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	jne	SHORT $LN28@TabItemEx
; Line 7926
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+28], ecx
$LN28@TabItemEx:
; Line 7927
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	jne	SHORT $LN66@TabItemEx
	mov	DWORD PTR tv435[rbp], 1
	jmp	SHORT $LN67@TabItemEx
$LN66@TabItemEx:
	mov	DWORD PTR tv435[rbp], 0
$LN67@TabItemEx:
	movzx	eax, BYTE PTR hovered$[rbp]
	or	eax, DWORD PTR tv435[rbp]
	mov	BYTE PTR hovered$[rbp], al
; Line 7930
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN29@TabItemEx
; Line 7931
	call	?SetItemAllowOverlap@ImGui@@YAXXZ	; ImGui::SetItemAllowOverlap
$LN29@TabItemEx:
; Line 7934
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	$LN30@TabItemEx
	movzx	eax, BYTE PTR tab_appearing$[rbp]
	test	eax, eax
	jne	$LN30@TabItemEx
	movss	xmm1, DWORD PTR __real@bf800000
	xor	ecx, ecx
	call	?IsMouseDragging@ImGui@@YA_NHM@Z	; ImGui::IsMouseDragging
	movzx	eax, al
	test	eax, eax
	je	$LN30@TabItemEx
; Line 7936
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+8012]
	test	eax, eax
	jne	$LN31@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1
	test	eax, eax
	je	$LN31@TabItemEx
; Line 7939
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+952]
	jbe	SHORT $LN32@TabItemEx
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR bb$[rbp]
	comiss	xmm0, DWORD PTR [rax+296]
	jbe	SHORT $LN32@TabItemEx
; Line 7941
	mov	rax, QWORD PTR g$[rbp]
	mov	r8, QWORD PTR [rax+296]
	mov	rdx, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z ; ImGui::TabBarQueueReorderFromMousePos
; Line 7942
	jmp	SHORT $LN33@TabItemEx
$LN32@TabItemEx:
; Line 7943
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+952]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN34@TabItemEx
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	comiss	xmm0, DWORD PTR bb$[rbp+8]
	jbe	SHORT $LN34@TabItemEx
; Line 7945
	mov	rax, QWORD PTR g$[rbp]
	mov	r8, QWORD PTR [rax+296]
	mov	rdx, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z ; ImGui::TabBarQueueReorderFromMousePos
$LN34@TabItemEx:
$LN33@TabItemEx:
$LN31@TabItemEx:
$LN30@TabItemEx:
; Line 7961
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR display_draw_list$[rbp], rax
; Line 7962
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	jne	$LN68@TabItemEx
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN68@TabItemEx
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
	test	eax, eax
	je	SHORT $LN73@TabItemEx
	movzx	eax, BYTE PTR tab_bar_focused$[rbp]
	test	eax, eax
	je	SHORT $LN69@TabItemEx
	mov	DWORD PTR tv490[rbp], 35		; 00000023H
	jmp	SHORT $LN70@TabItemEx
$LN69@TabItemEx:
	mov	DWORD PTR tv490[rbp], 37		; 00000025H
$LN70@TabItemEx:
	mov	eax, DWORD PTR tv490[rbp]
	mov	DWORD PTR tv496[rbp], eax
	jmp	SHORT $LN74@TabItemEx
$LN73@TabItemEx:
	movzx	eax, BYTE PTR tab_bar_focused$[rbp]
	test	eax, eax
	je	SHORT $LN71@TabItemEx
	mov	DWORD PTR tv493[rbp], 33		; 00000021H
	jmp	SHORT $LN72@TabItemEx
$LN71@TabItemEx:
	mov	DWORD PTR tv493[rbp], 36		; 00000024H
$LN72@TabItemEx:
	mov	eax, DWORD PTR tv493[rbp]
	mov	DWORD PTR tv496[rbp], eax
$LN74@TabItemEx:
	mov	eax, DWORD PTR tv496[rbp]
	mov	DWORD PTR tv497[rbp], eax
	jmp	SHORT $LN75@TabItemEx
$LN68@TabItemEx:
	mov	DWORD PTR tv497[rbp], 34		; 00000022H
$LN75@TabItemEx:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv497[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tab_col$[rbp], eax
; Line 7963
	mov	r9d, DWORD PTR tab_col$[rbp]
	mov	r8d, DWORD PTR flags$[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR display_draw_list$[rbp]
	call	?TabItemBackground@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HI@Z ; ImGui::TabItemBackground
; Line 7964
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 7967
	mov	ecx, 8
	call	?IsItemHovered@ImGui@@YA_NH@Z		; ImGui::IsItemHovered
	mov	BYTE PTR hovered_unblocked$[rbp], al
; Line 7968
	movzx	eax, BYTE PTR hovered_unblocked$[rbp]
	test	eax, eax
	je	SHORT $LN35@TabItemEx
	xor	edx, edx
	mov	ecx, 1
	call	?IsMouseClicked@ImGui@@YA_NH_N@Z	; ImGui::IsMouseClicked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@TabItemEx
	mov	ecx, 1
	call	?IsMouseReleased@ImGui@@YA_NH@Z		; ImGui::IsMouseReleased
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN35@TabItemEx
$LN36@TabItemEx:
; Line 7969
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	jne	SHORT $LN37@TabItemEx
; Line 7970
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+28], ecx
$LN37@TabItemEx:
$LN35@TabItemEx:
; Line 7972
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN38@TabItemEx
; Line 7973
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 4
	mov	DWORD PTR flags$[rbp], eax
$LN38@TabItemEx:
; Line 7976
	cmp	QWORD PTR p_open$[rbp], 0
	je	SHORT $LN76@TabItemEx
	mov	r8d, DWORD PTR id$[rbp]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_06KIIKKNMI@?$CDCLOSE@
	call	?GetIDWithSeed@ImGui@@YAIPEBD0I@Z	; ImGui::GetIDWithSeed
	mov	DWORD PTR tv531[rbp], eax
	jmp	SHORT $LN77@TabItemEx
$LN76@TabItemEx:
	mov	DWORD PTR tv531[rbp], 0
$LN77@TabItemEx:
	mov	eax, DWORD PTR tv531[rbp]
	mov	DWORD PTR close_button_id$[rbp], eax
; Line 7979
	lea	rax, QWORD PTR text_clipped$[rbp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR just_closed$[rbp]
	mov	QWORD PTR [rsp+64], rax
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
	mov	BYTE PTR [rsp+56], al
	mov	eax, DWORD PTR close_button_id$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR id$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR label$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	r9, QWORD PTR [rax+120]
	mov	r8d, DWORD PTR flags$[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR display_draw_list$[rbp]
	call	?TabItemLabelAndCloseButton@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@HUImVec2@@PEBDII_NPEA_N5@Z ; ImGui::TabItemLabelAndCloseButton
; Line 7980
	movzx	eax, BYTE PTR just_closed$[rbp]
	test	eax, eax
	je	SHORT $LN39@TabItemEx
	cmp	QWORD PTR p_open$[rbp], 0
	je	SHORT $LN39@TabItemEx
; Line 7982
	mov	rax, QWORD PTR p_open$[rbp]
	mov	BYTE PTR [rax], 0
; Line 7983
	mov	rdx, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z ; ImGui::TabBarCloseTab
$LN39@TabItemEx:
; Line 7987
	movzx	eax, BYTE PTR want_clip_rect$[rbp]
	test	eax, eax
	je	SHORT $LN40@TabItemEx
; Line 7988
	call	?PopClipRect@ImGui@@YAXXZ		; ImGui::PopClipRect
$LN40@TabItemEx:
; Line 7989
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR backup_main_cursor_pos$[rbp]
	mov	QWORD PTR [rax+216], rcx
; Line 7993
	movzx	eax, BYTE PTR text_clipped$[rbp]
	test	eax, eax
	je	$LN41@TabItemEx
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	jne	SHORT $LN41@TabItemEx
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	jne	SHORT $LN41@TabItemEx
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7256]
	comiss	xmm0, DWORD PTR [rcx+12332]
	jbe	SHORT $LN41@TabItemEx
	xor	ecx, ecx
	call	?IsItemHovered@ImGui@@YA_NH@Z		; ImGui::IsItemHovered
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@TabItemEx
; Line 7994
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN42@TabItemEx
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN42@TabItemEx
; Line 7995
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	sub	rax, QWORD PTR label$[rbp]
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_04EBNJJJJI@?$CF?4?$CKs@
	call	?SetTooltip@ImGui@@YAXPEBDZZ		; ImGui::SetTooltip
$LN42@TabItemEx:
$LN41@TabItemEx:
; Line 7997
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	je	SHORT $LN78@TabItemEx
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+24], ecx
	jne	SHORT $LN78@TabItemEx
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	je	SHORT $LN78@TabItemEx
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z@4JA
	add	eax, 206				; 000000ceH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JA@BHHCJLLE@?$AA?$CB?$AAi?$AAs?$AA_?$AAt?$AAa?$AAb?$AA_?$AAb?$AAu?$AAt?$AAt?$AAo?$AAn?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN78@TabItemEx:
; Line 7998
	movzx	eax, BYTE PTR is_tab_button$[rbp]
	test	eax, eax
	je	SHORT $LN43@TabItemEx
; Line 7999
	movzx	eax, BYTE PTR pressed$[rbp]
	jmp	SHORT $LN1@TabItemEx
$LN43@TabItemEx:
; Line 8000
	movzx	eax, BYTE PTR tab_contents_visible$[rbp]
$LN1@TabItemEx:
; Line 8001
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1944]
	pop	rdi
	pop	rbp
	ret	0
?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z ENDP ; ImGui::TabItemEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z
_TEXT	SEGMENT
tab1$ = 8
tab2_order$ = 36
tab2$ = 72
item_tmp$ = 104
src_tab$ = 168
dst_tab$ = 200
move_count$ = 228
tv147 = 436
tv138 = 440
tv133 = 440
tv87 = 440
__$ArrayPad$ = 448
tab_bar$ = 496
?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z PROC ; ImGui::TabBarProcessReorder, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7589
$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 496				; 000001f0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+536]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7590
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	edx, DWORD PTR [rax+100]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
	mov	QWORD PTR tab1$[rbp], rax
; Line 7591
	cmp	QWORD PTR tab1$[rbp], 0
	je	SHORT $LN3@TabBarProc
	mov	rax, QWORD PTR tab1$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN2@TabBarProc
$LN3@TabBarProc:
; Line 7592
	xor	al, al
	jmp	$LN1@TabBarProc
$LN2@TabBarProc:
; Line 7595
	mov	rdx, QWORD PTR tab1$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z ; ImGuiTabBar::GetTabOrder
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movsx	ecx, WORD PTR [rcx+104]
	add	eax, ecx
	mov	DWORD PTR tab2_order$[rbp], eax
; Line 7596
	cmp	DWORD PTR tab2_order$[rbp], 0
	jl	SHORT $LN5@TabBarProc
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR tab2_order$[rbp], eax
	jl	SHORT $LN4@TabBarProc
$LN5@TabBarProc:
; Line 7597
	xor	al, al
	jmp	$LN1@TabBarProc
$LN4@TabBarProc:
; Line 7601
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv87[rbp], rax
	mov	edx, DWORD PTR tab2_order$[rbp]
	mov	rcx, QWORD PTR tv87[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab2$[rbp], rax
; Line 7602
	mov	rax, QWORD PTR tab2$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN6@TabBarProc
; Line 7603
	xor	al, al
	jmp	$LN1@TabBarProc
$LN6@TabBarProc:
; Line 7604
	mov	rax, QWORD PTR tab1$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 192				; 000000c0H
	mov	rcx, QWORD PTR tab2$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	and	ecx, 192				; 000000c0H
	cmp	eax, ecx
	je	SHORT $LN7@TabBarProc
; Line 7605
	xor	al, al
	jmp	$LN1@TabBarProc
$LN7@TabBarProc:
; Line 7607
	lea	rax, QWORD PTR item_tmp$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tab1$[rbp]
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 7608
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+104]
	test	eax, eax
	jle	SHORT $LN10@TabBarProc
	mov	rax, QWORD PTR tab1$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv133[rbp], rax
	jmp	SHORT $LN11@TabBarProc
$LN10@TabBarProc:
	mov	rax, QWORD PTR tab2$[rbp]
	mov	QWORD PTR tv133[rbp], rax
$LN11@TabBarProc:
	mov	rax, QWORD PTR tv133[rbp]
	mov	QWORD PTR src_tab$[rbp], rax
; Line 7609
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+104]
	test	eax, eax
	jle	SHORT $LN12@TabBarProc
	mov	rax, QWORD PTR tab1$[rbp]
	mov	QWORD PTR tv138[rbp], rax
	jmp	SHORT $LN13@TabBarProc
$LN12@TabBarProc:
	mov	rax, QWORD PTR tab2$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv138[rbp], rax
$LN13@TabBarProc:
	mov	rax, QWORD PTR tv138[rbp]
	mov	QWORD PTR dst_tab$[rbp], rax
; Line 7610
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+104]
	test	eax, eax
	jle	SHORT $LN14@TabBarProc
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+104]
	mov	DWORD PTR tv147[rbp], eax
	jmp	SHORT $LN15@TabBarProc
$LN14@TabBarProc:
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+104]
	neg	eax
	mov	DWORD PTR tv147[rbp], eax
$LN15@TabBarProc:
	mov	eax, DWORD PTR tv147[rbp]
	mov	DWORD PTR move_count$[rbp], eax
; Line 7611
	movsxd	rax, DWORD PTR move_count$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	r8, rax
	mov	rdx, QWORD PTR src_tab$[rbp]
	mov	rcx, QWORD PTR dst_tab$[rbp]
	call	memmove
; Line 7612
	lea	rax, QWORD PTR item_tmp$[rbp]
	mov	rdi, QWORD PTR tab2$[rbp]
	mov	rsi, rax
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 7614
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	SHORT $LN8@TabBarProc
; Line 7615
	call	?MarkIniSettingsDirty@ImGui@@YAXXZ	; ImGui::MarkIniSettingsDirty
$LN8@TabBarProc:
; Line 7616
	mov	al, 1
$LN1@TabBarProc:
; Line 7617
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+464]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TabBarProcessReorder@ImGui@@YA_NPEAUImGuiTabBar@@@Z ENDP ; ImGui::TabBarProcessReorder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z
_TEXT	SEGMENT
g$ = 8
is_central_section$ = 36
bar_offset$ = 68
dir$ = 100
src_idx$ = 132
dst_idx$ = 164
i$1 = 196
dst_tab$2 = 232
x1$3 = 260
x2$4 = 292
tv89 = 500
tv84 = 500
tv77 = 500
tv138 = 504
tv95 = 504
tab_bar$ = 544
src_tab$ = 552
mouse_pos$ = 560
?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z PROC ; ImGui::TabBarQueueReorderFromMousePos, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7553
$LN20:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7554
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7555
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+100], 0
	je	SHORT $LN13@TabBarQueu
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EE@NGAACFPK@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAR?$AAe?$AAo?$AAr?$AAd?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@TabBarQueu:
; Line 7556
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@TabBarQueu
; Line 7557
	jmp	$LN1@TabBarQueu
$LN5@TabBarQueu:
; Line 7559
	mov	rax, QWORD PTR src_tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 192				; 000000c0H
	test	eax, eax
	jne	SHORT $LN14@TabBarQueu
	mov	BYTE PTR tv77[rbp], 1
	jmp	SHORT $LN15@TabBarQueu
$LN14@TabBarQueu:
	mov	BYTE PTR tv77[rbp], 0
$LN15@TabBarQueu:
	movzx	eax, BYTE PTR tv77[rbp]
	mov	BYTE PTR is_central_section$[rbp], al
; Line 7560
	movzx	eax, BYTE PTR is_central_section$[rbp]
	test	eax, eax
	je	SHORT $LN16@TabBarQueu
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN17@TabBarQueu
$LN16@TabBarQueu:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv84[rbp], xmm0
$LN17@TabBarQueu:
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+44]
	subss	xmm0, DWORD PTR tv84[rbp]
	movss	DWORD PTR bar_offset$[rbp], xmm0
; Line 7563
	mov	rax, QWORD PTR src_tab$[rbp]
	movss	xmm0, DWORD PTR bar_offset$[rbp]
	addss	xmm0, DWORD PTR [rax+16]
	comiss	xmm0, DWORD PTR mouse_pos$[rbp]
	jbe	SHORT $LN18@TabBarQueu
	mov	DWORD PTR tv89[rbp], -1
	jmp	SHORT $LN19@TabBarQueu
$LN18@TabBarQueu:
	mov	DWORD PTR tv89[rbp], 1
$LN19@TabBarQueu:
	mov	eax, DWORD PTR tv89[rbp]
	mov	DWORD PTR dir$[rbp], eax
; Line 7564
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv95[rbp], rax
	mov	rdx, QWORD PTR src_tab$[rbp]
	mov	rcx, QWORD PTR tv95[rbp]
	call	?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z ; ImVector<ImGuiTabItem>::index_from_ptr
	mov	DWORD PTR src_idx$[rbp], eax
; Line 7565
	mov	eax, DWORD PTR src_idx$[rbp]
	mov	DWORD PTR dst_idx$[rbp], eax
; Line 7566
	mov	eax, DWORD PTR src_idx$[rbp]
	mov	DWORD PTR i$1[rbp], eax
	jmp	SHORT $LN4@TabBarQueu
$LN2@TabBarQueu:
	mov	eax, DWORD PTR dir$[rbp]
	mov	ecx, DWORD PTR i$1[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$1[rbp], eax
$LN4@TabBarQueu:
	cmp	DWORD PTR i$1[rbp], 0
	jl	$LN3@TabBarQueu
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@TabBarQueu
; Line 7569
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv138[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv138[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR dst_tab$2[rbp], rax
; Line 7570
	mov	rax, QWORD PTR dst_tab$2[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN6@TabBarQueu
; Line 7571
	jmp	$LN3@TabBarQueu
$LN6@TabBarQueu:
; Line 7572
	mov	rax, QWORD PTR dst_tab$2[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 192				; 000000c0H
	mov	rcx, QWORD PTR src_tab$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	and	ecx, 192				; 000000c0H
	cmp	eax, ecx
	je	SHORT $LN7@TabBarQueu
; Line 7573
	jmp	$LN3@TabBarQueu
$LN7@TabBarQueu:
; Line 7574
	mov	eax, DWORD PTR i$1[rbp]
	mov	DWORD PTR dst_idx$[rbp], eax
; Line 7577
	mov	rax, QWORD PTR dst_tab$2[rbp]
	movss	xmm0, DWORD PTR bar_offset$[rbp]
	addss	xmm0, DWORD PTR [rax+16]
	mov	rax, QWORD PTR g$[rbp]
	subss	xmm0, DWORD PTR [rax+5552]
	movss	DWORD PTR x1$3[rbp], xmm0
; Line 7578
	mov	rax, QWORD PTR dst_tab$2[rbp]
	movss	xmm0, DWORD PTR bar_offset$[rbp]
	addss	xmm0, DWORD PTR [rax+16]
	mov	rax, QWORD PTR dst_tab$2[rbp]
	addss	xmm0, DWORD PTR [rax+20]
	mov	rax, QWORD PTR g$[rbp]
	addss	xmm0, DWORD PTR [rax+5552]
	movss	DWORD PTR x2$4[rbp], xmm0
; Line 7580
	cmp	DWORD PTR dir$[rbp], 0
	jge	SHORT $LN10@TabBarQueu
	movss	xmm0, DWORD PTR mouse_pos$[rbp]
	comiss	xmm0, DWORD PTR x1$3[rbp]
	ja	SHORT $LN9@TabBarQueu
$LN10@TabBarQueu:
	cmp	DWORD PTR dir$[rbp], 0
	jle	SHORT $LN8@TabBarQueu
	movss	xmm0, DWORD PTR x2$4[rbp]
	comiss	xmm0, DWORD PTR mouse_pos$[rbp]
	jbe	SHORT $LN8@TabBarQueu
$LN9@TabBarQueu:
; Line 7581
	jmp	SHORT $LN3@TabBarQueu
$LN8@TabBarQueu:
; Line 7582
	jmp	$LN2@TabBarQueu
$LN3@TabBarQueu:
; Line 7584
	mov	eax, DWORD PTR src_idx$[rbp]
	cmp	DWORD PTR dst_idx$[rbp], eax
	je	SHORT $LN11@TabBarQueu
; Line 7585
	mov	eax, DWORD PTR src_idx$[rbp]
	mov	ecx, DWORD PTR dst_idx$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR src_tab$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z ; ImGui::TabBarQueueReorder
$LN11@TabBarQueu:
$LN1@TabBarQueu:
; Line 7586
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
?TabBarQueueReorderFromMousePos@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@UImVec2@@@Z ENDP ; ImGui::TabBarQueueReorderFromMousePos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z
_TEXT	SEGMENT
tab_bar$ = 224
tab$ = 232
offset$ = 240
?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z PROC ; ImGui::TabBarQueueReorder, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7545
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7546
	cmp	DWORD PTR offset$[rbp], 0
	jne	SHORT $LN3@TabBarQueu
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BI@DOPCJBFN@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@TabBarQueu:
; Line 7547
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+100], 0
	je	SHORT $LN4@TabBarQueu
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EE@NGAACFPK@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAR?$AAe?$AAo?$AAr?$AAd?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@TabBarQueu:
; Line 7548
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+100], ecx
; Line 7549
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	ecx, WORD PTR offset$[rbp]
	mov	WORD PTR [rax+104], cx
; Line 7550
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TabBarQueueReorder@ImGui@@YAXPEAUImGuiTabBar@@PEBUImGuiTabItem@@H@Z ENDP ; ImGui::TabBarQueueReorder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z
_TEXT	SEGMENT
tab_bar$ = 224
tab$ = 232
?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z PROC ; ImGui::TabBarCloseTab, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7482
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7483
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN7@TabBarClos
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@JMLJLLDN@?$AA?$CB?$AA?$CI?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@TabBarClos:
; Line 7484
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@TabBarClos
; Line 7488
	mov	rax, QWORD PTR tab$[rbp]
	mov	BYTE PTR [rax+36], 1
; Line 7489
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+32], ecx
	jne	SHORT $LN4@TabBarClos
; Line 7491
	mov	rax, QWORD PTR tab$[rbp]
	mov	DWORD PTR [rax+8], -1
; Line 7492
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+28], 0
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+24], 0
$LN4@TabBarClos:
; Line 7494
	jmp	SHORT $LN3@TabBarClos
$LN2@TabBarClos:
; Line 7498
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+32], ecx
	je	SHORT $LN5@TabBarClos
; Line 7499
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+28], ecx
$LN5@TabBarClos:
$LN3@TabBarClos:
; Line 7501
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TabBarCloseTab@ImGui@@YAXPEAUImGuiTabBar@@PEAUImGuiTabItem@@@Z ENDP ; ImGui::TabBarCloseTab
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z
_TEXT	SEGMENT
tab$1 = 8
tv73 = 216
tab_bar$ = 256
tab_id$ = 264
?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z PROC	; ImGui::TabBarRemoveTab, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7472
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7473
	mov	edx, DWORD PTR tab_id$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
	mov	QWORD PTR tab$1[rbp], rax
	cmp	QWORD PTR tab$1[rbp], 0
	je	SHORT $LN2@TabBarRemo
; Line 7474
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv73[rbp], rax
	mov	rdx, QWORD PTR tab$1[rbp]
	mov	rcx, QWORD PTR tv73[rbp]
	call	?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z ; ImVector<ImGuiTabItem>::erase
$LN2@TabBarRemo:
; Line 7475
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR tab_id$[rbp]
	cmp	DWORD PTR [rax+32], ecx
	jne	SHORT $LN3@TabBarRemo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+32], 0
$LN3@TabBarRemo:
; Line 7476
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR tab_id$[rbp]
	cmp	DWORD PTR [rax+24], ecx
	jne	SHORT $LN4@TabBarRemo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+24], 0
$LN4@TabBarRemo:
; Line 7477
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR tab_id$[rbp]
	cmp	DWORD PTR [rax+28], ecx
	jne	SHORT $LN5@TabBarRemo
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	DWORD PTR [rax+28], 0
$LN5@TabBarRemo:
; Line 7478
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TabBarRemoveTab@ImGui@@YAXPEAUImGuiTabBar@@I@Z ENDP	; ImGui::TabBarRemoveTab
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z
_TEXT	SEGMENT
n$1 = 4
tv82 = 216
tv74 = 216
tab_bar$ = 256
tab_id$ = 264
?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z PROC ; ImGui::TabBarFindTabByID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7462
$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7463
	cmp	DWORD PTR tab_id$[rbp], 0
	je	SHORT $LN5@TabBarFind
; Line 7464
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@TabBarFind
$LN2@TabBarFind:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@TabBarFind:
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@TabBarFind
; Line 7465
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	mov	edx, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	ecx, DWORD PTR tab_id$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN6@TabBarFind
; Line 7466
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv82[rbp], rax
	mov	edx, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR tv82[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	jmp	SHORT $LN1@TabBarFind
$LN6@TabBarFind:
	jmp	SHORT $LN2@TabBarFind
$LN3@TabBarFind:
$LN5@TabBarFind:
; Line 7467
	xor	eax, eax
$LN1@TabBarFind:
; Line 7468
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ENDP ; ImGui::TabBarFindTabByID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
col$ = 68
y$ = 100
separator_min_x$1 = 132
separator_max_x$2 = 164
$T3 = 392
$T4 = 436
$T5 = 468
$T6 = 500
$T7 = 532
tv204 = 548
tv249 = 552
tv79 = 552
tv247 = 560
tv245 = 568
tab_bar$ = 608
tab_bar_bb$ = 616
flags$ = 624
?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z PROC ; ImGui::BeginTabBarEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7111
$LN12:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 624				; 00000270H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7112
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7113
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7114
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginTabBa
; Line 7115
	xor	al, al
	jmp	$LN1@BeginTabBa
$LN2@BeginTabBa:
; Line 7117
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN3@BeginTabBa
; Line 7118
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rax+20]
	call	?PushOverrideID@ImGui@@YAXI@Z		; ImGui::PushOverrideID
$LN3@BeginTabBa:
; Line 7121
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8328				; 00002088H
	mov	QWORD PTR tv79[rbp], rax
	mov	rdx, QWORD PTR tab_bar$[rbp]
	lea	rcx, QWORD PTR $T3[rbp]
	call	?GetTabBarRefFromTabBar@@YA?AUImGuiPtrOrIndex@@PEAUImGuiTabBar@@@Z ; GetTabBarRefFromTabBar
	mov	rdx, rax
	mov	rcx, QWORD PTR tv79[rbp]
	call	?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z ; ImVector<ImGuiPtrOrIndex>::push_back
; Line 7122
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR [rax+8280], rcx
; Line 7125
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR [rcx+128], rax
; Line 7126
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7056]
	cmp	DWORD PTR [rax+36], ecx
	jne	SHORT $LN4@BeginTabBa
; Line 7128
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	addss	xmm0, DWORD PTR [rcx+116]
	movaps	xmm2, xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+44]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 7129
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, BYTE PTR [rax+106]
	inc	al
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rcx+106], al
; Line 7130
	mov	al, 1
	jmp	$LN1@BeginTabBa
$LN4@BeginTabBa:
; Line 7134
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+16]
	and	ecx, 1
	cmp	eax, ecx
	jne	SHORT $LN6@BeginTabBa
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, BYTE PTR [rax+109]
	test	eax, eax
	je	SHORT $LN5@BeginTabBa
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@BeginTabBa
$LN6@BeginTabBa:
; Line 7135
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax], 1
	jle	SHORT $LN7@BeginTabBa
; Line 7136
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsxd	rax, DWORD PTR [rax]
	lea	r9, OFFSET FLAT:?TabItemComparerByBeginOrder@@YAHPEBX0@Z ; TabItemComparerByBeginOrder
	mov	r8d, 40					; 00000028H
	mov	rdx, rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_qsort
$LN7@BeginTabBa:
$LN5@BeginTabBa:
; Line 7137
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+109], 0
; Line 7140
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 192				; 000000c0H
	test	eax, eax
	jne	SHORT $LN8@BeginTabBa
; Line 7141
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR flags$[rbp], eax
$LN8@BeginTabBa:
; Line 7143
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rax+16], ecx
; Line 7144
	mov	rax, QWORD PTR tab_bar$[rbp]
	lea	rdi, QWORD PTR [rax+44]
	mov	rsi, QWORD PTR tab_bar_bb$[rbp]
	mov	ecx, 16
	rep movsb
; Line 7145
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+107], 1
; Line 7146
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rax+40], ecx
; Line 7147
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7056]
	mov	DWORD PTR [rax+36], ecx
; Line 7148
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rcx+60]
	movss	DWORD PTR [rax+64], xmm0
; Line 7149
	mov	rax, QWORD PTR tab_bar$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+60], xmm0
; Line 7150
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+5548]
	movss	DWORD PTR [rax+116], xmm0
; Line 7151
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+5528]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR [rcx+120], rax
; Line 7152
	xor	eax, eax
	mov	rcx, QWORD PTR tab_bar$[rbp]
	mov	WORD PTR [rcx+110], ax
; Line 7153
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	BYTE PTR [rax+106], 1
; Line 7156
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	addss	xmm0, DWORD PTR [rcx+116]
	movaps	xmm2, xmm0
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+44]
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 7159
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN10@BeginTabBa
	mov	DWORD PTR tv204[rbp], 35		; 00000023H
	jmp	SHORT $LN11@BeginTabBa
$LN10@BeginTabBa:
	mov	DWORD PTR tv204[rbp], 37		; 00000025H
$LN11@BeginTabBa:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv204[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$[rbp], eax
; Line 7160
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y$[rbp], xmm0
; Line 7162
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+44]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR separator_min_x$1[rbp], xmm0
; Line 7163
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+52]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR separator_max_x$2[rbp], xmm0
; Line 7164
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv249[rbp], rax
	movss	xmm2, DWORD PTR y$[rbp]
	movss	xmm1, DWORD PTR separator_max_x$2[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv247[rbp], rax
	movss	xmm2, DWORD PTR y$[rbp]
	movss	xmm1, DWORD PTR separator_min_x$1[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv245[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv247[rbp]
	mov	rdx, QWORD PTR tv245[rbp]
	mov	rcx, QWORD PTR tv249[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 7166
	mov	al, 1
$LN1@BeginTabBa:
; Line 7167
	lea	rsp, QWORD PTR [rbp+576]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z ENDP ; ImGui::BeginTabBarEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z
_TEXT	SEGMENT
tv68 = 192
n$ = 240
rm$ = 248
?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z PROC ; ImGui::IsNavInputTest, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2475
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	edx, DWORD PTR rm$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	call	?GetNavInputAmount@ImGui@@YAMHW4ImGuiInputReadMode@@@Z ; ImGui::GetNavInputAmount
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@IsNavInput
	mov	DWORD PTR tv68[rbp], 1
	jmp	SHORT $LN4@IsNavInput
$LN3@IsNavInput:
	mov	DWORD PTR tv68[rbp], 0
$LN4@IsNavInput:
	movzx	eax, BYTE PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?IsNavInputTest@ImGui@@YA_NHW4ImGuiInputReadMode@@@Z ENDP ; ImGui::IsNavInputTest
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsNavInputDown@ImGui@@YA_NH@Z
_TEXT	SEGMENT
g$ = 8
tv70 = 212
n$ = 256
?IsNavInputDown@ImGui@@YA_NH@Z PROC			; ImGui::IsNavInputDown, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2474
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+836]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@IsNavInput
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN4@IsNavInput
$LN3@IsNavInput:
	mov	DWORD PTR tv70[rbp], 0
$LN4@IsNavInput:
	movzx	eax, BYTE PTR tv70[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?IsNavInputDown@ImGui@@YA_NH@Z ENDP			; ImGui::IsNavInputDown
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsKeyPressedMap@ImGui@@YA_NH_N@Z
_TEXT	SEGMENT
g$ = 8
key_index$ = 36
tv73 = 244
key$ = 288
repeat$ = 296
?IsKeyPressedMap@ImGui@@YA_NH_N@Z PROC			; ImGui::IsKeyPressedMap, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2473
$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	movsxd	rax, DWORD PTR key$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4+60]
	mov	DWORD PTR key_index$[rbp], eax
	cmp	DWORD PTR key_index$[rbp], 0
	jl	SHORT $LN3@IsKeyPress
	movzx	edx, BYTE PTR repeat$[rbp]
	mov	ecx, DWORD PTR key_index$[rbp]
	call	?IsKeyPressed@ImGui@@YA_NH_N@Z		; ImGui::IsKeyPressed
	mov	BYTE PTR tv73[rbp], al
	jmp	SHORT $LN4@IsKeyPress
$LN3@IsKeyPress:
	mov	BYTE PTR tv73[rbp], 0
$LN4@IsKeyPress:
	movzx	eax, BYTE PTR tv73[rbp]
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?IsKeyPressedMap@ImGui@@YA_NH_N@Z ENDP			; ImGui::IsKeyPressedMap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndComboPreview@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
preview_data$ = 72
draw_list$ = 104
$T1 = 328
$T2 = 360
$T3 = 404
$T4 = 436
tv136 = 472
tv94 = 480
?EndComboPreview@ImGui@@YAXXZ PROC			; ImGui::EndComboPreview, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1727
$LN5:
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 528				; 00000210H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1728
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1729
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 1730
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12260				; 00002fe4H
	mov	QWORD PTR preview_data$[rbp], rax
; Line 1733
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR draw_list$[rbp], rax
; Line 1734
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx+240]
	jbe	$LN2@EndComboPr
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+244]
	jbe	$LN2@EndComboPr
; Line 1735
	mov	rax, QWORD PTR draw_list$[rbp]
	cmp	DWORD PTR [rax], 1
	jle	$LN3@EndComboPr
; Line 1737
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	QWORD PTR tv136[rbp], rax
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 2
	mov	edx, eax
	mov	rcx, QWORD PTR tv136[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	lea	rcx, QWORD PTR $T2[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	QWORD PTR tv94[rbp], rax
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv94[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	mov	QWORD PTR $T1[rbp], rax
	lea	rax, QWORD PTR $T2[rbp]
	mov	rdi, QWORD PTR $T1[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR draw_list$[rbp]
	lea	rdi, QWORD PTR [rax+136]
	mov	rsi, QWORD PTR $T1[rbp]
	mov	ecx, 16
	rep movsb
; Line 1738
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ	; ImDrawList::_TryMergeDrawCmds
$LN3@EndComboPr:
$LN2@EndComboPr:
; Line 1740
	call	?PopClipRect@ImGui@@YAXXZ		; ImGui::PopClipRect
; Line 1741
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 1742
	mov	rax, QWORD PTR preview_data$[rbp]
	add	rax, 24
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 240				; 000000f0H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T3[rbp]
	call	?ImMax@@YA?AUImVec2@@AEBU1@0@Z		; ImMax
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+240], rax
; Line 1743
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+224], rax
; Line 1744
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR preview_data$[rbp]
	movss	xmm0, DWORD PTR [rcx+40]
	movss	DWORD PTR [rax+276], xmm0
; Line 1745
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR preview_data$[rbp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax+436], ecx
; Line 1746
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rdi, QWORD PTR preview_data$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1747
	lea	rsp, QWORD PTR [rbp+496]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?EndComboPreview@ImGui@@YAXXZ ENDP			; ImGui::EndComboPreview
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginComboPreview@ImGui@@YA_NXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
preview_data$ = 72
$T1 = 292
tv138 = 312
tv76 = 312
?BeginComboPreview@ImGui@@YA_NXZ PROC			; ImGui::BeginComboPreview, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1701
$LN9:
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1702
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1703
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 1704
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12260				; 00002fe4H
	mov	QWORD PTR preview_data$[rbp], rax
; Line 1706
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	jne	SHORT $LN3@BeginCombo
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 592				; 00000250H
	mov	QWORD PTR tv76[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 300				; 0000012cH
	mov	rdx, rax
	mov	rcx, QWORD PTR tv76[rbp]
	call	?Overlaps@ImRect@@QEBA_NAEBU1@@Z	; ImRect::Overlaps
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@BeginCombo
$LN3@BeginCombo:
; Line 1707
	xor	al, al
	jmp	$LN1@BeginCombo
$LN2@BeginCombo:
; Line 1708
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR preview_data$[rbp]
	movss	xmm0, DWORD PTR [rax+300]
	ucomiss	xmm0, DWORD PTR [rcx]
	jp	SHORT $LN6@BeginCombo
	jne	SHORT $LN6@BeginCombo
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR preview_data$[rbp]
	movss	xmm0, DWORD PTR [rax+304]
	ucomiss	xmm0, DWORD PTR [rcx+4]
	jp	SHORT $LN8@BeginCombo
	je	SHORT $LN7@BeginCombo
$LN8@BeginCombo:
$LN6@BeginCombo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginComboPreview@ImGui@@YA_NXZ@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BAK@KIIFLADI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAL?$AAa?$AAs?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@BeginCombo:
; Line 1709
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 592				; 00000250H
	mov	QWORD PTR tv138[rbp], rax
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv138[rbp]
	call	?Contains@ImRect@@QEBA_NAEBU1@@Z	; ImRect::Contains
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@BeginCombo
; Line 1710
	xor	al, al
	jmp	$LN1@BeginCombo
$LN4@BeginCombo:
; Line 1713
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	rcx, QWORD PTR preview_data$[rbp]
	mov	QWORD PTR [rcx+16], rax
; Line 1714
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+240]
	mov	rcx, QWORD PTR preview_data$[rbp]
	mov	QWORD PTR [rcx+24], rax
; Line 1715
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+224]
	mov	rcx, QWORD PTR preview_data$[rbp]
	mov	QWORD PTR [rcx+32], rax
; Line 1716
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+276]
	movss	DWORD PTR [rax+40], xmm0
; Line 1717
	mov	rax, QWORD PTR preview_data$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+436]
	mov	DWORD PTR [rax+44], ecx
; Line 1718
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5528				; 00001598H
	mov	rcx, QWORD PTR preview_data$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 1719
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+240], rax
; Line 1720
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+436], 0
; Line 1721
	mov	rax, QWORD PTR preview_data$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR preview_data$[rbp]
	mov	r8b, 1
	mov	rdx, rax
	call	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z ; ImGui::PushClipRect
; Line 1723
	mov	al, 1
$LN1@BeginCombo:
; Line 1724
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?BeginComboPreview@ImGui@@YA_NXZ ENDP			; ImGui::BeginComboPreview
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z
_TEXT	SEGMENT
g$ = 8
w$ = 36
popup_max_height_in_items$7 = 68
name$ = 104
popup_window$8 = 152
size_expected$9 = 184
r_outer$10 = 216
pos$11 = 264
window_flags$ = 292
ret$ = 324
$T12 = 740
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
tv174 = 884
tv181 = 888
tv156 = 888
tv154 = 896
__$ArrayPad$ = 904
popup_id$ = 944
bb$ = 952
flags$ = 960
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z PROC	; ImGui::BeginComboPopup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1635
$LN19:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 984				; 000003d8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 134				; 00000086H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+1016]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1636
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1637
	xor	edx, edx
	mov	ecx, DWORD PTR popup_id$[rbp]
	call	?IsPopupOpen@ImGui@@YA_NIH@Z		; ImGui::IsPopupOpen
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@BeginCombo
; Line 1639
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7344				; 00001cb0H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextWindowData@@QEAAXXZ ; ImGuiNextWindowData::ClearFlags
; Line 1640
	xor	al, al
	jmp	$LN1@BeginCombo
$LN2@BeginCombo:
; Line 1644
	mov	rcx, QWORD PTR bb$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR w$[rbp], xmm0
; Line 1645
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7344]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN3@BeginCombo
; Line 1647
	movss	xmm1, DWORD PTR w$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7404]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR g$[rbp]
	movss	DWORD PTR [rax+7404], xmm0
; Line 1648
	jmp	$LN4@BeginCombo
$LN3@BeginCombo:
; Line 1651
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 30
	test	eax, eax
	jne	SHORT $LN5@BeginCombo
; Line 1652
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 4
	mov	DWORD PTR flags$[rbp], eax
$LN5@BeginCombo:
; Line 1653
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 30
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@BeginCombo
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GI@IOEAHNLK@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@BeginCombo:
; Line 1654
	mov	DWORD PTR popup_max_height_in_items$7[rbp], -1
; Line 1655
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN6@BeginCombo
	mov	DWORD PTR popup_max_height_in_items$7[rbp], 8
	jmp	SHORT $LN7@BeginCombo
$LN6@BeginCombo:
; Line 1656
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN8@BeginCombo
	mov	DWORD PTR popup_max_height_in_items$7[rbp], 4
	jmp	SHORT $LN9@BeginCombo
$LN8@BeginCombo:
; Line 1657
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN10@BeginCombo
	mov	DWORD PTR popup_max_height_in_items$7[rbp], 20
$LN10@BeginCombo:
$LN9@BeginCombo:
$LN7@BeginCombo:
; Line 1658
	mov	ecx, DWORD PTR popup_max_height_in_items$7[rbp]
	call	?CalcMaxPopupHeightFromItemCount@@YAMH@Z ; CalcMaxPopupHeightFromItemCount
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR __real@7f7fffff
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv156[rbp], rax
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR w$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv154[rbp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv156[rbp]
	mov	rcx, QWORD PTR tv154[rbp]
	call	?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN4@BeginCombo:
; Line 1663
	mov	rax, QWORD PTR g$[rbp]
	mov	r9d, DWORD PTR [rax+7592]
	lea	r8, OFFSET FLAT:??_C@_0N@JOGGDHMO@?$CD?$CDCombo_?$CF02d@
	mov	edx, 16
	lea	rcx, QWORD PTR name$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 1668
	lea	rcx, QWORD PTR name$[rbp]
	call	?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z ; ImGui::FindWindowByName
	mov	QWORD PTR popup_window$8[rbp], rax
	cmp	QWORD PTR popup_window$8[rbp], 0
	je	$LN11@BeginCombo
; Line 1669
	mov	rax, QWORD PTR popup_window$8[rbp]
	movzx	eax, BYTE PTR [rax+143]
	test	eax, eax
	je	$LN12@BeginCombo
; Line 1672
	mov	rdx, QWORD PTR popup_window$8[rbp]
	lea	rcx, QWORD PTR size_expected$9[rbp]
	call	?CalcWindowNextAutoFitSize@ImGui@@YA?AUImVec2@@PEAUImGuiWindow@@@Z ; ImGui::CalcWindowNextAutoFitSize
; Line 1673
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@BeginCombo
	mov	DWORD PTR tv174[rbp], 0
	jmp	SHORT $LN17@BeginCombo
$LN16@BeginCombo:
	mov	DWORD PTR tv174[rbp], 3
$LN17@BeginCombo:
	mov	rax, QWORD PTR popup_window$8[rbp]
	mov	ecx, DWORD PTR tv174[rbp]
	mov	DWORD PTR [rax+172], ecx
; Line 1674
	mov	rdx, QWORD PTR popup_window$8[rbp]
	lea	rcx, QWORD PTR r_outer$10[rbp]
	call	?GetPopupAllowedExtentRect@ImGui@@YA?AUImRect@@PEAUImGuiWindow@@@Z ; ImGui::GetPopupAllowedExtentRect
; Line 1675
	mov	rax, QWORD PTR popup_window$8[rbp]
	add	rax, 172				; 000000acH
	mov	QWORD PTR tv181[rbp], rax
	lea	rdx, QWORD PTR $T14[rbp]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?GetBL@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetBL
	mov	DWORD PTR [rsp+48], 1
	mov	rcx, QWORD PTR bb$[rbp]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, QWORD PTR r_outer$10[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv181[rbp]
	mov	r9, rcx
	lea	r8, QWORD PTR size_expected$9[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR pos$11[rbp]
	call	?FindBestWindowPosForPopupEx@ImGui@@YA?AUImVec2@@AEBU2@0PEAHAEBUImRect@@2W4ImGuiPopupPositionPolicy@@@Z ; ImGui::FindBestWindowPosForPopupEx
; Line 1676
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR pos$11[rbp]
	call	?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos
$LN12@BeginCombo:
$LN11@BeginCombo:
; Line 1680
	mov	DWORD PTR window_flags$[rbp], 67109191	; 04000147H
; Line 1681
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+5480]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5528]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	ecx, 1
	call	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z	; ImGui::PushStyleVar
; Line 1682
	mov	r8d, DWORD PTR window_flags$[rbp]
	xor	edx, edx
	lea	rcx, QWORD PTR name$[rbp]
	call	?Begin@ImGui@@YA_NPEBDPEA_NH@Z		; ImGui::Begin
	mov	BYTE PTR ret$[rbp], al
; Line 1683
	mov	ecx, 1
	call	?PopStyleVar@ImGui@@YAXH@Z		; ImGui::PopStyleVar
; Line 1684
	movzx	eax, BYTE PTR ret$[rbp]
	test	eax, eax
	jne	SHORT $LN13@BeginCombo
; Line 1686
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
; Line 1687
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@BeginCombo
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z@4JA
	add	eax, 52					; 00000034H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@BeginCombo:
; Line 1688
	xor	al, al
	jmp	SHORT $LN1@BeginCombo
$LN13@BeginCombo:
; Line 1690
	mov	al, 1
$LN1@BeginCombo:
; Line 1691
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+920]
	pop	rdi
	pop	rbp
	ret	0
?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z ENDP	; ImGui::BeginComboPopup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z
_TEXT	SEGMENT
bar_window$ = 8
viewport$6 = 40
avail_rect$7 = 72
axis$8 = 116
pos$9 = 152
size$10 = 184
is_open$ = 212
$T11 = 436
$T12 = 468
tv128 = 484
tv83 = 484
tv163 = 488
tv152 = 488
tv78 = 488
tv164 = 496
tv153 = 496
__$ArrayPad$ = 504
name$ = 544
viewport_p$ = 552
dir$ = 560
axis_size$ = 568
window_flags$ = 576
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z PROC ; ImGui::BeginViewportSideBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6705
$LN17:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+584]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6706
	cmp	DWORD PTR dir$[rbp], -1
	jne	SHORT $LN12@BeginViewp
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CK@MCAEPPML@?$AAd?$AAi?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAD?$AAi?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@BeginViewp:
; Line 6708
	mov	rcx, QWORD PTR name$[rbp]
	call	?FindWindowByName@ImGui@@YAPEAUImGuiWindow@@PEBD@Z ; ImGui::FindWindowByName
	mov	QWORD PTR bar_window$[rbp], rax
; Line 6709
	cmp	QWORD PTR bar_window$[rbp], 0
	je	SHORT $LN3@BeginViewp
	mov	rax, QWORD PTR bar_window$[rbp]
	movsx	eax, WORD PTR [rax+154]
	test	eax, eax
	jne	$LN2@BeginViewp
$LN3@BeginViewp:
; Line 6712
	cmp	QWORD PTR viewport_p$[rbp], 0
	je	SHORT $LN13@BeginViewp
	mov	rax, QWORD PTR viewport_p$[rbp]
	mov	QWORD PTR tv78[rbp], rax
	jmp	SHORT $LN14@BeginViewp
$LN13@BeginViewp:
	call	?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
	mov	QWORD PTR tv78[rbp], rax
$LN14@BeginViewp:
	mov	rax, QWORD PTR tv78[rbp]
	mov	QWORD PTR viewport$6[rbp], rax
; Line 6713
	lea	rdx, QWORD PTR avail_rect$7[rbp]
	mov	rcx, QWORD PTR viewport$6[rbp]
	call	?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ ; ImGuiViewportP::GetBuildWorkRect
; Line 6714
	cmp	DWORD PTR dir$[rbp], 2
	je	SHORT $LN15@BeginViewp
	cmp	DWORD PTR dir$[rbp], 3
	je	SHORT $LN15@BeginViewp
	mov	DWORD PTR tv83[rbp], 0
	jmp	SHORT $LN16@BeginViewp
$LN15@BeginViewp:
	mov	DWORD PTR tv83[rbp], 1
$LN16@BeginViewp:
	mov	eax, DWORD PTR tv83[rbp]
	mov	DWORD PTR axis$8[rbp], eax
; Line 6715
	mov	rax, QWORD PTR avail_rect$7[rbp]
	mov	QWORD PTR pos$9[rbp], rax
; Line 6716
	cmp	DWORD PTR dir$[rbp], 1
	je	SHORT $LN5@BeginViewp
	cmp	DWORD PTR dir$[rbp], 3
	jne	SHORT $LN4@BeginViewp
$LN5@BeginViewp:
; Line 6717
	movsxd	rax, DWORD PTR axis$8[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR avail_rect$7[rbp+8]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR axis_size$[rbp]
	movss	DWORD PTR tv128[rbp], xmm0
	movsxd	rax, DWORD PTR axis$8[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR pos$9[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR tv128[rbp]
	movss	DWORD PTR [rax], xmm0
$LN4@BeginViewp:
; Line 6718
	lea	rdx, QWORD PTR size$10[rbp]
	lea	rcx, QWORD PTR avail_rect$7[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
; Line 6719
	movsxd	rax, DWORD PTR axis$8[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR size$10[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	movss	xmm0, DWORD PTR axis_size$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 6720
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR pos$9[rbp]
	call	?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos
; Line 6721
	xor	edx, edx
	lea	rcx, QWORD PTR size$10[rbp]
	call	?SetNextWindowSize@ImGui@@YAXAEBUImVec2@@H@Z ; ImGui::SetNextWindowSize
; Line 6724
	cmp	DWORD PTR dir$[rbp], 2
	je	SHORT $LN8@BeginViewp
	cmp	DWORD PTR dir$[rbp], 0
	jne	SHORT $LN6@BeginViewp
$LN8@BeginViewp:
; Line 6725
	mov	rax, QWORD PTR viewport$6[rbp]
	add	rax, 160				; 000000a0H
	mov	QWORD PTR tv152[rbp], rax
	movsxd	rax, DWORD PTR axis$8[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv152[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	mov	QWORD PTR tv153[rbp], rax
	mov	rax, QWORD PTR tv153[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR axis_size$[rbp]
	mov	rax, QWORD PTR tv153[rbp]
	movss	DWORD PTR [rax], xmm0
	jmp	SHORT $LN7@BeginViewp
$LN6@BeginViewp:
; Line 6726
	cmp	DWORD PTR dir$[rbp], 3
	je	SHORT $LN10@BeginViewp
	cmp	DWORD PTR dir$[rbp], 1
	jne	SHORT $LN9@BeginViewp
$LN10@BeginViewp:
; Line 6727
	mov	rax, QWORD PTR viewport$6[rbp]
	add	rax, 168				; 000000a8H
	mov	QWORD PTR tv163[rbp], rax
	movsxd	rax, DWORD PTR axis$8[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv163[rbp]
	call	??AImVec2@@QEAAAEAM_K@Z			; ImVec2::operator[]
	mov	QWORD PTR tv164[rbp], rax
	mov	rax, QWORD PTR tv164[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR axis_size$[rbp]
	mov	rax, QWORD PTR tv164[rbp]
	movss	DWORD PTR [rax], xmm0
$LN9@BeginViewp:
$LN7@BeginViewp:
$LN2@BeginViewp:
; Line 6730
	mov	eax, DWORD PTR window_flags$[rbp]
	or	eax, 7
	mov	DWORD PTR window_flags$[rbp], eax
; Line 6731
	xorps	xmm1, xmm1
	mov	ecx, 2
	call	?PushStyleVar@ImGui@@YAXHM@Z		; ImGui::PushStyleVar
; Line 6732
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	ecx, 4
	call	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z	; ImGui::PushStyleVar
; Line 6733
	mov	r8d, DWORD PTR window_flags$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR name$[rbp]
	call	?Begin@ImGui@@YA_NPEBDPEA_NH@Z		; ImGui::Begin
	mov	BYTE PTR is_open$[rbp], al
; Line 6734
	mov	ecx, 2
	call	?PopStyleVar@ImGui@@YAXH@Z		; ImGui::PopStyleVar
; Line 6736
	movzx	eax, BYTE PTR is_open$[rbp]
; Line 6737
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z ENDP ; ImGui::BeginViewportSideBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z
_TEXT	SEGMENT
count_same_width$ = 4
max_width_to_remove_per_item$1 = 36
width_to_remove_per_item$2 = 68
item_n$3 = 100
n$4 = 132
width_rounded$5 = 164
n$6 = 196
tv146 = 404
items$ = 448
count$ = 456
width_excess$ = 464
?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z PROC ; ImGui::ShrinkWidths, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1502
$LN23:
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1503
	cmp	DWORD PTR count$[rbp], 1
	jne	SHORT $LN15@ShrinkWidt
; Line 1505
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN16@ShrinkWidt
; Line 1506
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+4]
	subss	xmm0, DWORD PTR width_excess$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR items$[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
$LN16@ShrinkWidt:
; Line 1507
	jmp	$LN1@ShrinkWidt
$LN15@ShrinkWidt:
; Line 1509
	movsxd	rax, DWORD PTR count$[rbp]
	lea	r9, OFFSET FLAT:?ShrinkWidthItemComparer@@YAHPEBX0@Z ; ShrinkWidthItemComparer
	mov	r8d, 8
	mov	rdx, rax
	mov	rcx, QWORD PTR items$[rbp]
	call	QWORD PTR __imp_qsort
; Line 1510
	mov	DWORD PTR count_same_width$[rbp], 1
$LN2@ShrinkWidt:
; Line 1511
	movss	xmm0, DWORD PTR width_excess$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN3@ShrinkWidt
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR count_same_width$[rbp], eax
	jge	$LN3@ShrinkWidt
$LN4@ShrinkWidt:
; Line 1513
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR count_same_width$[rbp], eax
	jge	SHORT $LN5@ShrinkWidt
	mov	eax, 8
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR count_same_width$[rbp]
	mov	rdx, QWORD PTR items$[rbp]
	mov	r8, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx*8+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jb	SHORT $LN5@ShrinkWidt
; Line 1514
	mov	eax, DWORD PTR count_same_width$[rbp]
	inc	eax
	mov	DWORD PTR count_same_width$[rbp], eax
	jmp	SHORT $LN4@ShrinkWidt
$LN5@ShrinkWidt:
; Line 1515
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR count_same_width$[rbp], eax
	jge	SHORT $LN21@ShrinkWidt
	movsxd	rax, DWORD PTR count_same_width$[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN21@ShrinkWidt
	mov	eax, 8
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR count_same_width$[rbp]
	mov	rdx, QWORD PTR items$[rbp]
	mov	r8, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rdx+rax+4]
	subss	xmm0, DWORD PTR [r8+rcx*8+4]
	movss	DWORD PTR tv146[rbp], xmm0
	jmp	SHORT $LN22@ShrinkWidt
$LN21@ShrinkWidt:
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+4]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv146[rbp], xmm0
$LN22@ShrinkWidt:
	movss	xmm0, DWORD PTR tv146[rbp]
	movss	DWORD PTR max_width_to_remove_per_item$1[rbp], xmm0
; Line 1516
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR max_width_to_remove_per_item$1[rbp]
	jb	SHORT $LN17@ShrinkWidt
; Line 1517
	jmp	$LN3@ShrinkWidt
$LN17@ShrinkWidt:
; Line 1518
	cvtsi2ss xmm0, DWORD PTR count_same_width$[rbp]
	movss	xmm1, DWORD PTR width_excess$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR max_width_to_remove_per_item$1[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR width_to_remove_per_item$2[rbp], xmm0
; Line 1519
	mov	DWORD PTR item_n$3[rbp], 0
	jmp	SHORT $LN8@ShrinkWidt
$LN6@ShrinkWidt:
	mov	eax, DWORD PTR item_n$3[rbp]
	inc	eax
	mov	DWORD PTR item_n$3[rbp], eax
$LN8@ShrinkWidt:
	mov	eax, DWORD PTR count_same_width$[rbp]
	cmp	DWORD PTR item_n$3[rbp], eax
	jge	SHORT $LN7@ShrinkWidt
; Line 1520
	movsxd	rax, DWORD PTR item_n$3[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	subss	xmm0, DWORD PTR width_to_remove_per_item$2[rbp]
	movsxd	rax, DWORD PTR item_n$3[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
	jmp	SHORT $LN6@ShrinkWidt
$LN7@ShrinkWidt:
; Line 1521
	cvtsi2ss xmm0, DWORD PTR count_same_width$[rbp]
	movss	xmm1, DWORD PTR width_to_remove_per_item$2[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR width_excess$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR width_excess$[rbp], xmm0
; Line 1522
	jmp	$LN2@ShrinkWidt
$LN3@ShrinkWidt:
; Line 1526
	xorps	xmm0, xmm0
	movss	DWORD PTR width_excess$[rbp], xmm0
; Line 1527
	mov	DWORD PTR n$4[rbp], 0
	jmp	SHORT $LN11@ShrinkWidt
$LN9@ShrinkWidt:
	mov	eax, DWORD PTR n$4[rbp]
	inc	eax
	mov	DWORD PTR n$4[rbp], eax
$LN11@ShrinkWidt:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR n$4[rbp], eax
	jge	SHORT $LN10@ShrinkWidt
; Line 1529
	movsxd	rax, DWORD PTR n$4[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR width_rounded$5[rbp], xmm0
; Line 1530
	movsxd	rax, DWORD PTR n$4[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	subss	xmm0, DWORD PTR width_rounded$5[rbp]
	movss	xmm1, DWORD PTR width_excess$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR width_excess$[rbp], xmm0
; Line 1531
	movsxd	rax, DWORD PTR n$4[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR width_rounded$5[rbp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
; Line 1532
	jmp	$LN9@ShrinkWidt
$LN10@ShrinkWidt:
; Line 1533
	movss	xmm0, DWORD PTR width_excess$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN18@ShrinkWidt
; Line 1534
	mov	DWORD PTR n$6[rbp], 0
	jmp	SHORT $LN14@ShrinkWidt
$LN12@ShrinkWidt:
	mov	eax, DWORD PTR n$6[rbp]
	inc	eax
	mov	DWORD PTR n$6[rbp], eax
$LN14@ShrinkWidt:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR n$6[rbp], eax
	jge	SHORT $LN13@ShrinkWidt
; Line 1535
	movsxd	rax, DWORD PTR n$6[rbp]
	movss	xmm0, DWORD PTR width_excess$[rbp]
	addss	xmm0, DWORD PTR __real@3c23d70a
	cvttss2si ecx, xmm0
	mov	rdx, QWORD PTR items$[rbp]
	cmp	DWORD PTR [rdx+rax*8], ecx
	jge	SHORT $LN19@ShrinkWidt
; Line 1536
	movsxd	rax, DWORD PTR n$6[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	addss	xmm0, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR n$6[rbp]
	mov	rcx, QWORD PTR items$[rbp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
$LN19@ShrinkWidt:
	jmp	SHORT $LN12@ShrinkWidt
$LN13@ShrinkWidt:
$LN18@ShrinkWidt:
$LN1@ShrinkWidt:
; Line 1537
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?ShrinkWidths@ImGui@@YAXPEAUImGuiShrinkWidthItem@@HM@Z ENDP ; ImGui::ShrinkWidths
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ
_TEXT	SEGMENT
g$ = 8
?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ PROC	; ImGui::GetCurrentWindow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2317
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	BYTE PTR [rax+144], 1
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ENDP	; ImGui::GetCurrentWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z
_TEXT	SEGMENT
this$ = 224
tab$ = 232
?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z PROC ; ImGuiTabBar::GetTabName, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2045
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
; Line 2046
	mov	rax, QWORD PTR tab$[rbp]
	cmp	DWORD PTR [rax+28], -1
	je	SHORT $LN3@GetTabName
	mov	rax, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+136]
	cmp	DWORD PTR [rax+28], ecx
	jl	SHORT $LN4@GetTabName
$LN3@GetTabName:
	mov	r8d, 2046				; 000007feH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HM@PJKJLKEH@?$AAt?$AAa?$AAb?$AA?9?$AA?$DO?$AAN?$AAa?$AAm?$AAe?$AAO?$AAf?$AAf?$AAs?$AAe?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GetTabName:
; Line 2047
	mov	rax, QWORD PTR tab$[rbp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+144]
; Line 2048
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetTabName@ImGuiTabBar@@QEBAPEBDPEBUImGuiTabItem@@@Z ENDP ; ImGuiTabBar::GetTabName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z
_TEXT	SEGMENT
tv69 = 192
this$ = 240
tab$ = 248
?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z PROC ; ImGuiTabBar::GetTabOrder, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2043
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR tab$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z ; ImVector<ImGuiTabItem>::index_from_ptr
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetTabOrder@ImGuiTabBar@@QEBAHPEBUImGuiTabItem@@@Z ENDP ; ImGuiTabBar::GetTabOrder
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTabBar@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTabBar@@QEAA@XZ PROC				; ImGuiTabBar::ImGuiTabBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7053
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ	; ImVector<ImGuiTabItem>::ImVector<ImGuiTabItem>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 128				; 00000080H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 136				; 00000088H
	mov	rcx, rax
	call	??0ImGuiTextBuffer@@QEAA@XZ		; ImGuiTextBuffer::ImGuiTextBuffer
; Line 7054
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 152				; 00000098H
	rep stosb
; Line 7055
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+40], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+36], -1
; Line 7056
	mov	eax, -1
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+112], ax
; Line 7057
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTabBar@@QEAA@XZ ENDP				; ImGuiTabBar::ImGuiTabBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA PROC		; `ImGuiTabBar::ImGuiTabBar'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ	; ImVector<ImGuiTabItem>::~ImVector<ImGuiTabItem>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImGuiTabBar@@QEAA@XZ@4HA ENDP		; `ImGuiTabBar::ImGuiTabBar'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z
_TEXT	SEGMENT
off$ = 8
this$ = 256
it$ = 264
?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z PROC ; ImVector<ImGuiTabItem>::index_from_ptr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1726
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN3@index_from
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN4@index_from
$LN3@index_from:
	mov	r8d, 1726				; 000006beH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@index_from:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR it$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 40					; 00000028H
	idiv	rcx
	mov	QWORD PTR off$[rbp], rax
	mov	eax, DWORD PTR off$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?index_from_ptr@?$ImVector@UImGuiTabItem@@@@QEBAHPEBUImGuiTabItem@@@Z ENDP ; ImVector<ImGuiTabItem>::index_from_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z
_TEXT	SEGMENT
off$ = 8
tv95 = 216
this$ = 256
it$ = 264
?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z PROC ; ImVector<ImGuiTabItem>::erase, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1717
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN3@erase
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN4@erase
$LN3@erase:
	mov	r8d, 1717				; 000006b5H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@erase:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR it$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 40					; 00000028H
	idiv	rcx
	mov	QWORD PTR off$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	sub	rax, QWORD PTR off$[rbp]
	dec	rax
	imul	rax, rax, 40				; 00000028H
	imul	rcx, QWORD PTR off$[rbp], 40		; 00000028H
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+40]
	imul	rdx, QWORD PTR off$[rbp], 40		; 00000028H
	mov	r8, QWORD PTR this$[rbp]
	add	rdx, QWORD PTR [r8+8]
	mov	QWORD PTR tv95[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv95[rbp]
	mov	rcx, rax
	call	memmove
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	imul	rax, QWORD PTR off$[rbp], 40		; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?erase@?$ImVector@UImGuiTabItem@@@@QEAAPEAUImGuiTabItem@@PEBU2@@Z ENDP ; ImVector<ImGuiTabItem>::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z PROC ; ImVector<ImGuiTabItem>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z ; ImVector<ImGuiTabItem>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z ; ImVector<ImGuiTabItem>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 40					; 00000028H
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImGuiTabItem@@@@QEAAXAEBUImGuiTabItem@@@Z ENDP ; ImVector<ImGuiTabItem>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z PROC	; ImVector<ImGuiTabItem>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z ENDP	; ImVector<ImGuiTabItem>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z PROC	; ImVector<ImGuiTabItem>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z ; ImVector<ImGuiTabItem>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z ; ImVector<ImGuiTabItem>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiTabItem@@@@QEAAXH@Z ENDP	; ImVector<ImGuiTabItem>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z PROC ; ImVector<ImGuiTabItem>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiTabItem@@@@QEBAHH@Z ENDP ; ImVector<ImGuiTabItem>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ PROC ; ImVector<ImGuiTabItem>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@XZ ENDP ; ImVector<ImGuiTabItem>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z PROC ; ImVector<ImGuiTabItem>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ENDP ; ImVector<ImGuiTabItem>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ PROC		; ImVector<ImGuiTabItem>::~ImVector<ImGuiTabItem>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImGuiTabItem@@@@QEAA@XZ ENDP		; ImVector<ImGuiTabItem>::~ImVector<ImGuiTabItem>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ PROC		; ImVector<ImGuiTabItem>::ImVector<ImGuiTabItem>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImGuiTabItem@@@@QEAA@XZ ENDP		; ImVector<ImGuiTabItem>::ImVector<ImGuiTabItem>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTabItem@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTabItem@@QEAA@XZ PROC				; ImGuiTabItem::ImGuiTabItem, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2004
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+12], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+8], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+28], -1
	mov	eax, -1
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+34], ax
	mov	eax, -1
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+32], ax
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTabItem@@QEAA@XZ ENDP				; ImGuiTabItem::ImGuiTabItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Restore@ImGuiLastItemDataBackup@@QEBAXXZ
_TEXT	SEGMENT
window$ = 8
this$ = 256
?Restore@ImGuiLastItemDataBackup@@QEBAXXZ PROC		; ImGuiLastItemDataBackup::Restore, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1966
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+292], ecx
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+296], ecx
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	lea	rdi, QWORD PTR [rax+300]
	lea	rsi, QWORD PTR [rcx+8]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	lea	rdi, QWORD PTR [rax+316]
	lea	rsi, QWORD PTR [rcx+24]
	mov	ecx, 16
	rep movsb
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?Restore@ImGuiLastItemDataBackup@@QEBAXXZ ENDP		; ImGuiLastItemDataBackup::Restore
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Backup@ImGuiLastItemDataBackup@@QEAAXXZ
_TEXT	SEGMENT
window$ = 8
this$ = 256
?Backup@ImGuiLastItemDataBackup@@QEAAXXZ PROC		; ImGuiLastItemDataBackup::Backup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1965
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+292]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+296]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+8]
	lea	rsi, QWORD PTR [rcx+300]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+24]
	lea	rsi, QWORD PTR [rcx+316]
	mov	ecx, 16
	rep movsb
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?Backup@ImGuiLastItemDataBackup@@QEAAXXZ ENDP		; ImGuiLastItemDataBackup::Backup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiLastItemDataBackup@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiLastItemDataBackup@@QEAA@XZ PROC		; ImGuiLastItemDataBackup::ImGuiLastItemDataBackup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1964
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rcx, QWORD PTR this$[rbp]
	call	?Backup@ImGuiLastItemDataBackup@@QEAAXXZ ; ImGuiLastItemDataBackup::Backup
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiLastItemDataBackup@@QEAA@XZ ENDP		; ImGuiLastItemDataBackup::ImGuiLastItemDataBackup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ
_TEXT	SEGMENT
y1$ = 4
tv88 = 212
tv90 = 216
tv86 = 220
this$ = 256
__$ReturnUdt$ = 264
?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ PROC	; ImGuiWindow::MenuBarRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1953
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?TitleBarHeight@ImGuiWindow@@QEBAMXZ	; ImGuiWindow::TitleBarHeight
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+20]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y1$[rbp], xmm0
	mov	rcx, QWORD PTR this$[rbp]
	call	?MenuBarHeight@ImGuiWindow@@QEBAMXZ	; ImGuiWindow::MenuBarHeight
	movss	xmm1, DWORD PTR y1$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv88[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+32]
	movss	DWORD PTR tv90[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv86[rbp], xmm0
	movss	xmm0, DWORD PTR tv88[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR tv90[rbp]
	movss	xmm2, DWORD PTR y1$[rbp]
	movss	xmm1, DWORD PTR tv86[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ ENDP	; ImGuiWindow::MenuBarRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MenuBarHeight@ImGuiWindow@@QEBAMXZ
_TEXT	SEGMENT
g$ = 8
tv78 = 212
this$ = 256
?MenuBarHeight@ImGuiWindow@@QEBAMXZ PROC		; ImGuiWindow::MenuBarHeight, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1952
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN3@MenuBarHei
	mov	rcx, QWORD PTR this$[rbp]
	call	?CalcFontSize@ImGuiWindow@@QEBAMXZ	; ImGuiWindow::CalcFontSize
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+352]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN4@MenuBarHei
$LN3@MenuBarHei:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv78[rbp], xmm0
$LN4@MenuBarHei:
	movss	xmm0, DWORD PTR tv78[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?MenuBarHeight@ImGuiWindow@@QEBAMXZ ENDP		; ImGuiWindow::MenuBarHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TitleBarHeight@ImGuiWindow@@QEBAMXZ
_TEXT	SEGMENT
g$ = 8
tv74 = 212
this$ = 256
?TitleBarHeight@ImGuiWindow@@QEBAMXZ PROC		; ImGuiWindow::TitleBarHeight, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1950
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@TitleBarHe
	xorps	xmm0, xmm0
	movss	DWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN4@TitleBarHe
$LN3@TitleBarHe:
	mov	rcx, QWORD PTR this$[rbp]
	call	?CalcFontSize@ImGuiWindow@@QEBAMXZ	; ImGuiWindow::CalcFontSize
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR tv74[rbp], xmm0
$LN4@TitleBarHe:
	movss	xmm0, DWORD PTR tv74[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TitleBarHeight@ImGuiWindow@@QEBAMXZ ENDP		; ImGuiWindow::TitleBarHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcFontSize@ImGuiWindow@@QEBAMXZ
_TEXT	SEGMENT
g$ = 8
scale$ = 36
this$ = 288
?CalcFontSize@ImGuiWindow@@QEBAMXZ PROC			; ImGuiWindow::CalcFontSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1949
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+6532]
	mulss	xmm0, DWORD PTR [rcx+680]
	movss	DWORD PTR scale$[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+896], 0
	je	SHORT $LN2@CalcFontSi
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+896]
	movss	xmm0, DWORD PTR scale$[rbp]
	mulss	xmm0, DWORD PTR [rax+680]
	movss	DWORD PTR scale$[rbp], xmm0
$LN2@CalcFontSi:
	movss	xmm0, DWORD PTR scale$[rbp]
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?CalcFontSize@ImGuiWindow@@QEBAMXZ ENDP			; ImGuiWindow::CalcFontSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ PROC		; ImGuiWindow::Rect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1948
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR [rcx+28]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	addss	xmm1, DWORD PTR [rcx+24]
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm2, DWORD PTR [rax+20]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ ENDP		; ImGuiWindow::Rect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z PROC ; ImVector<ImGuiShrinkWidthItem>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z ENDP ; ImVector<ImGuiShrinkWidthItem>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z PROC ; ImVector<ImGuiShrinkWidthItem>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z ; ImVector<ImGuiShrinkWidthItem>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z ; ImVector<ImGuiShrinkWidthItem>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiShrinkWidthItem@@@@QEAAXH@Z ENDP ; ImVector<ImGuiShrinkWidthItem>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z PROC ; ImVector<ImGuiShrinkWidthItem>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiShrinkWidthItem@@@@QEBAHH@Z ENDP ; ImVector<ImGuiShrinkWidthItem>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z PROC ; ImVector<ImGuiShrinkWidthItem>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiShrinkWidthItem@@@@QEAAAEAUImGuiShrinkWidthItem@@H@Z ENDP ; ImVector<ImGuiShrinkWidthItem>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ PROC	; ImVector<ImGuiPtrOrIndex>::pop_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1715
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@pop_back
	mov	r8d, 1715				; 000006b3H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@pop_back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ ENDP	; ImVector<ImGuiPtrOrIndex>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z PROC ; ImVector<ImGuiPtrOrIndex>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z ; ImVector<ImGuiPtrOrIndex>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z ; ImVector<ImGuiPtrOrIndex>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXAEBUImGuiPtrOrIndex@@@Z ENDP ; ImVector<ImGuiPtrOrIndex>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z PROC	; ImVector<ImGuiPtrOrIndex>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 16
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXH@Z ENDP	; ImVector<ImGuiPtrOrIndex>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z PROC ; ImVector<ImGuiPtrOrIndex>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiPtrOrIndex@@@@QEBAHH@Z ENDP ; ImVector<ImGuiPtrOrIndex>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ PROC ; ImVector<ImGuiPtrOrIndex>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ ENDP ; ImVector<ImGuiPtrOrIndex>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ PROC	; ImVector<ImGuiPtrOrIndex>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ ENDP	; ImVector<ImGuiPtrOrIndex>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ
_TEXT	SEGMENT
idx$ = 4
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
tv148 = 376
tv95 = 376
tv86 = 376
tv75 = 376
tv139 = 384
this$ = 432
?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ PROC ; ImPool<ImGuiTabBar>::Add, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 625
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR idx$[rbp], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR idx$[rbp], eax
	jne	SHORT $LN2@Add
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv75[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv75[rbp]
	call	?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z ; ImVector<ImGuiTabBar>::resize
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+32], eax
	jmp	SHORT $LN3@Add
$LN2@Add:
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv86[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv86[rbp]
	call	??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ; ImVector<ImGuiTabBar>::operator[]
	mov	rcx, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx+32], eax
$LN3@Add:
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv95[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv95[rbp]
	call	??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ; ImVector<ImGuiTabBar>::operator[]
	mov	QWORD PTR $T3[rbp], rax
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR $T4[rbp], rax
	mov	r8, QWORD PTR $T3[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 152				; 00000098H
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T2[rbp], rax
	cmp	QWORD PTR $T2[rbp], 0
	je	SHORT $LN5@Add
	mov	rcx, QWORD PTR $T2[rbp]
	call	??0ImGuiTabBar@@QEAA@XZ			; ImGuiTabBar::ImGuiTabBar
	mov	QWORD PTR tv139[rbp], rax
	jmp	SHORT $LN6@Add
$LN5@Add:
	mov	QWORD PTR tv139[rbp], 0
$LN6@Add:
	mov	rax, QWORD PTR tv139[rbp]
	mov	QWORD PTR $T1[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+36], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv148[rbp]
	call	??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ; ImVector<ImGuiTabBar>::operator[]
	lea	rsp, QWORD PTR [rbp+408]
	pop	rdi
	pop	rbp
	ret	0
?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ ENDP ; ImPool<ImGuiTabBar>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
idx$ = 4
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
tv148 = 376
tv95 = 376
tv86 = 376
tv75 = 376
tv139 = 384
this$ = 432
?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA PROC ; `ImPool<ImGuiTabBar>::Add'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR $T3[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ@4HA ENDP ; `ImPool<ImGuiTabBar>::Add'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z
_TEXT	SEGMENT
tv75 = 192
this$ = 240
p$ = 248
?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z PROC ; ImPool<ImGuiTabBar>::Contains, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 623
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 152				; 00000098H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR p$[rbp], rax
	jae	SHORT $LN3@Contains
	mov	DWORD PTR tv75[rbp], 1
	jmp	SHORT $LN4@Contains
$LN3@Contains:
	mov	DWORD PTR tv75[rbp], 0
$LN4@Contains:
	movzx	eax, BYTE PTR tv75[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?Contains@?$ImPool@UImGuiTabBar@@@@QEBA_NPEBUImGuiTabBar@@@Z ENDP ; ImPool<ImGuiTabBar>::Contains
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z
_TEXT	SEGMENT
p_idx$ = 8
tv77 = 216
tv70 = 216
this$ = 256
key$ = 264
?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z PROC ; ImPool<ImGuiTabBar>::GetOrAddByKey, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 622
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv70[rbp], rax
	mov	r8d, -1
	mov	edx, DWORD PTR key$[rbp]
	mov	rcx, QWORD PTR tv70[rbp]
	call	?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z	; ImGuiStorage::GetIntRef
	mov	QWORD PTR p_idx$[rbp], rax
	mov	rax, QWORD PTR p_idx$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN2@GetOrAddBy
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv77[rbp], rax
	mov	rax, QWORD PTR p_idx$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv77[rbp]
	call	??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ; ImVector<ImGuiTabBar>::operator[]
	jmp	SHORT $LN1@GetOrAddBy
$LN2@GetOrAddBy:
	mov	rax, QWORD PTR p_idx$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+32]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR this$[rbp]
	call	?Add@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@XZ ; ImPool<ImGuiTabBar>::Add
$LN1@GetOrAddBy:
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z ENDP ; ImPool<ImGuiTabBar>::GetOrAddByKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z
_TEXT	SEGMENT
this$ = 224
p$ = 232
?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z PROC ; ImPool<ImGuiTabBar>::GetIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 621
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@GetIndex
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 152				; 00000098H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@GetIndex
$LN3@GetIndex:
	mov	r8d, 621				; 0000026dH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GetIndex:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR p$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 152				; 00000098H
	idiv	rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetIndex@?$ImPool@UImGuiTabBar@@@@QEBAHPEBUImGuiTabBar@@@Z ENDP ; ImPool<ImGuiTabBar>::GetIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z
_TEXT	SEGMENT
tv69 = 192
this$ = 240
n$ = 248
?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z PROC ; ImPool<ImGuiTabBar>::GetByIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 620
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ; ImVector<ImGuiTabBar>::operator[]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetByIndex@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@H@Z ENDP ; ImPool<ImGuiTabBar>::GetByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z PROC	; ImVector<ImGuiTabBar>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 152				; 00000098H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 152				; 00000098H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z ENDP	; ImVector<ImGuiTabBar>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z PROC	; ImVector<ImGuiTabBar>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z ; ImVector<ImGuiTabBar>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z ; ImVector<ImGuiTabBar>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiTabBar@@@@QEAAXH@Z ENDP	; ImVector<ImGuiTabBar>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z PROC ; ImVector<ImGuiTabBar>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiTabBar@@@@QEBAHH@Z ENDP ; ImVector<ImGuiTabBar>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z PROC ; ImVector<ImGuiTabBar>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 152				; 00000098H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiTabBar@@@@QEAAAEAUImGuiTabBar@@H@Z ENDP ; ImVector<ImGuiTabBar>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z PROC ; ImVector<ImGuiPopupData>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z ENDP ; ImVector<ImGuiPopupData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ PROC ; ImVector<ImGuiGroupData>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ ENDP ; ImVector<ImGuiGroupData>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ
_TEXT	SEGMENT
pos$ = 8
size$ = 40
__$ArrayPad$ = 248
this$ = 288
__$ReturnUdt$ = 296
?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ PROC ; ImGuiViewportP::GetBuildWorkRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1286
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 160				; 000000a0H
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z ; ImGuiViewportP::CalcWorkRectPos
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 168				; 000000a8H
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 160				; 000000a0H
	mov	r9, rax
	mov	r8, rcx
	lea	rdx, QWORD PTR size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z ; ImGuiViewportP::CalcWorkRectSize
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR size$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	addss	xmm1, DWORD PTR size$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?GetBuildWorkRect@ImGuiViewportP@@QEBA?AUImRect@@XZ ENDP ; ImGuiViewportP::GetBuildWorkRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z
_TEXT	SEGMENT
tv129 = 192
tv95 = 196
this$ = 240
__$ReturnUdt$ = 248
off_min$ = 256
off_max$ = 264
?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z PROC ; ImGuiViewportP::CalcWorkRectSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1280
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR off_min$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR off_max$[rbp]
	addss	xmm0, DWORD PTR [rax+4]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv129[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR off_min$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR off_max$[rbp]
	addss	xmm0, DWORD PTR [rax]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv95[rbp], xmm0
	movss	xmm2, DWORD PTR tv129[rbp]
	movss	xmm1, DWORD PTR tv95[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?CalcWorkRectSize@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@0@Z ENDP ; ImGuiViewportP::CalcWorkRectSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
off_min$ = 240
?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z PROC ; ImGuiViewportP::CalcWorkRectPos, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1279
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR off_min$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR off_min$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CalcWorkRectPos@ImGuiViewportP@@QEBA?AUImVec2@@AEBU2@@Z ENDP ; ImGuiViewportP::CalcWorkRectPos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiPtrOrIndex@@QEAA@H@Z
_TEXT	SEGMENT
this$ = 224
index$ = 232
??0ImGuiPtrOrIndex@@QEAA@H@Z PROC			; ImGuiPtrOrIndex::ImGuiPtrOrIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1182
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR index$[rbp]
	mov	DWORD PTR [rax+8], ecx
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiPtrOrIndex@@QEAA@H@Z ENDP			; ImGuiPtrOrIndex::ImGuiPtrOrIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiPtrOrIndex@@QEAA@PEAX@Z
_TEXT	SEGMENT
this$ = 224
ptr$ = 232
??0ImGuiPtrOrIndex@@QEAA@PEAX@Z PROC			; ImGuiPtrOrIndex::ImGuiPtrOrIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1181
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR ptr$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+8], -1
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiPtrOrIndex@@QEAA@PEAX@Z ENDP			; ImGuiPtrOrIndex::ImGuiPtrOrIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearFlags@ImGuiNextItemData@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearFlags@ImGuiNextItemData@@QEAAXXZ PROC		; ImGuiNextItemData::ClearFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1167
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearFlags@ImGuiNextItemData@@QEAAXXZ ENDP		; ImGuiNextItemData::ClearFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearFlags@ImGuiNextWindowData@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearFlags@ImGuiNextWindowData@@QEAAXXZ PROC		; ImGuiNextWindowData::ClearFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1148
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearFlags@ImGuiNextWindowData@@QEAAXXZ ENDP		; ImGuiNextWindowData::ClearFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@H@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@H@@YAHHH@Z PROC				; ImMin<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR rhs$[rbp]
	cmp	DWORD PTR lhs$[rbp], eax
	jge	SHORT $LN3@ImMin
	mov	eax, DWORD PTR lhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	eax, DWORD PTR rhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
$LN4@ImMin:
	mov	eax, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@H@@YAHHH@Z ENDP				; ImMin<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SelectAll@ImGuiInputTextState@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?SelectAll@ImGuiInputTextState@@QEAAXXZ PROC		; ImGuiInputTextState::SelectAll, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1084
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+80], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+84], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+84]
	mov	DWORD PTR [rax+76], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+98], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SelectAll@ImGuiInputTextState@@QEAAXXZ ENDP		; ImGuiInputTextState::SelectAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearSelection@ImGuiInputTextState@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearSelection@ImGuiInputTextState@@QEAAXXZ PROC	; ImGuiInputTextState::ClearSelection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1080
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+76]
	mov	DWORD PTR [rax+84], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+84]
	mov	DWORD PTR [rax+80], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearSelection@ImGuiInputTextState@@QEAAXXZ ENDP	; ImGuiInputTextState::ClearSelection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?HasSelection@ImGuiInputTextState@@QEBA_NXZ
_TEXT	SEGMENT
tv69 = 192
this$ = 240
?HasSelection@ImGuiInputTextState@@QEBA_NXZ PROC	; ImGuiInputTextState::HasSelection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1079
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+84]
	cmp	DWORD PTR [rax+80], ecx
	je	SHORT $LN3@HasSelecti
	mov	DWORD PTR tv69[rbp], 1
	jmp	SHORT $LN4@HasSelecti
$LN3@HasSelecti:
	mov	DWORD PTR tv69[rbp], 0
$LN4@HasSelecti:
	movzx	eax, BYTE PTR tv69[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?HasSelection@ImGuiInputTextState@@QEBA_NXZ ENDP	; ImGuiInputTextState::HasSelection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CursorClamp@ImGuiInputTextState@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?CursorClamp@ImGuiInputTextState@@QEAAXXZ PROC		; ImGuiInputTextState::CursorClamp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1078
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rax+76]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+76], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rax+80]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+80], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rax+84]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+84], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CursorClamp@ImGuiInputTextState@@QEAAXXZ ENDP		; ImGuiInputTextState::CursorClamp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ PROC	; ImGuiInputTextState::CursorAnimReset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1077
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@be99999a
	movss	DWORD PTR [rax+3704], xmm0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ ENDP	; ImGuiInputTextState::CursorAnimReset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
key$ = 232
?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z PROC	; ImGuiInputTextState::OnKeyPressed, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3777
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3778
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 76					; 0000004cH
	mov	r8d, DWORD PTR key$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?stb_textedit_key@ImStb@@YAXPEAUImGuiInputTextState@@PEAUSTB_TexteditState@1@H@Z ; ImStb::stb_textedit_key
; Line 3779
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+3708], 1
; Line 3780
	mov	rcx, QWORD PTR this$[rbp]
	call	?CursorAnimReset@ImGuiInputTextState@@QEAAXXZ ; ImGuiInputTextState::CursorAnimReset
; Line 3781
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?OnKeyPressed@ImGuiInputTextState@@QEAAXH@Z ENDP	; ImGuiInputTextState::OnKeyPressed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z
_TEXT	SEGMENT
this$ = 224
avail_w$ = 232
?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z PROC		; ImGuiMenuColumns::CalcExtraSpace, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6624
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6625
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR avail_w$[rbp]
	subss	xmm0, DWORD PTR [rax+4]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
; Line 6626
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CalcExtraSpace@ImGuiMenuColumns@@QEBAMM@Z ENDP		; ImGuiMenuColumns::CalcExtraSpace
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z
_TEXT	SEGMENT
i$1 = 4
tv138 = 212
this$ = 256
w0$ = 264
w1$ = 272
w2$ = 280
?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z PROC		; ImGuiMenuColumns::DeclColumns, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6613
$LN8:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6614
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
; Line 6615
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm1, DWORD PTR w0$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+24]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	movss	DWORD PTR [rcx+rax+24], xmm0
; Line 6616
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm1, DWORD PTR w1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+24]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	movss	DWORD PTR [rcx+rax+24], xmm0
; Line 6617
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm1, DWORD PTR w2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+24]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	movss	DWORD PTR [rcx+rax+24], xmm0
; Line 6618
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@DeclColumn
$LN2@DeclColumn:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@DeclColumn:
	cmp	DWORD PTR i$1[rbp], 3
	jge	SHORT $LN3@DeclColumn
; Line 6619
	cmp	DWORD PTR i$1[rbp], 0
	jle	SHORT $LN6@DeclColumn
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@DeclColumn
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv138[rbp], xmm0
	jmp	SHORT $LN7@DeclColumn
$LN6@DeclColumn:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv138[rbp], xmm0
$LN7@DeclColumn:
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+24]
	addss	xmm0, DWORD PTR tv138[rbp]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	jmp	$LN2@DeclColumn
$LN3@DeclColumn:
; Line 6620
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
; Line 6621
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z ENDP		; ImGuiMenuColumns::DeclColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Update@ImGuiMenuColumns@@QEAAXHM_N@Z
_TEXT	SEGMENT
i$1 = 4
this$ = 256
count$ = 264
spacing$ = 272
clear$ = 280
?Update@ImGuiMenuColumns@@QEAAXHM_N@Z PROC		; ImGuiMenuColumns::Update, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6595
$LN9:
	mov	BYTE PTR [rsp+32], r9b
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6596
	cmp	DWORD PTR count$[rbp], 3
	je	SHORT $LN8@Update
	mov	eax, DWORD PTR ?__LINE__Var@?0??Update@ImGuiMenuColumns@@QEAAXHM_N@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FO@NFEGNMHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@Update:
; Line 6598
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
; Line 6599
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR spacing$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 6600
	movzx	eax, BYTE PTR clear$[rbp]
	test	eax, eax
	je	SHORT $LN5@Update
; Line 6601
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 12
	rep stosb
$LN5@Update:
; Line 6602
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@Update
$LN2@Update:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@Update:
	cmp	DWORD PTR i$1[rbp], 3
	jge	$LN3@Update
; Line 6604
	cmp	DWORD PTR i$1[rbp], 0
	jle	SHORT $LN6@Update
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@Update
; Line 6605
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+4], xmm0
$LN6@Update:
; Line 6606
	mov	rax, QWORD PTR this$[rbp]
	cvttss2si eax, DWORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	DWORD PTR [rcx+rax*4+12], xmm0
; Line 6607
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rcx+4]
	addss	xmm0, DWORD PTR [rdx+rax*4+24]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 6608
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax*4+24], xmm0
; Line 6609
	jmp	$LN2@Update
$LN3@Update:
; Line 6610
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?Update@ImGuiMenuColumns@@QEAAXHM_N@Z ENDP		; ImGuiMenuColumns::Update
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ClipWith@ImRect@@QEAAXAEBU1@@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 72
this$ = 96
r$ = 104
?ClipWith@ImRect@@QEAAXAEBU1@@Z PROC			; ImRect::ClipWith, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 502
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rbp]
	call	?ImMax@@YA?AUImVec2@@AEBU1@0@Z		; ImMax
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR r$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rbp]
	call	?ImMin@@YA?AUImVec2@@AEBU1@0@Z		; ImMin
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+8], rax
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ClipWith@ImRect@@QEAAXAEBU1@@Z ENDP			; ImRect::ClipWith
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Translate@ImRect@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 80
d$ = 88
?Translate@ImRect@@QEAAXAEBUImVec2@@@Z PROC		; ImRect::Translate, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 499
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR d$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?Translate@ImRect@@QEAAXAEBUImVec2@@@Z ENDP		; ImRect::Translate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Expand@ImRect@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 80
amount$ = 88
?Expand@ImRect@@QEAAXAEBUImVec2@@@Z PROC		; ImRect::Expand, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 498
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR amount$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR amount$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR amount$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR amount$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?Expand@ImRect@@QEAAXAEBUImVec2@@@Z ENDP		; ImRect::Expand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Expand@ImRect@@QEAAXM@Z
_TEXT	SEGMENT
this$ = 80
amount$ = 88
?Expand@ImRect@@QEAAXM@Z PROC				; ImRect::Expand, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 497
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR amount$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR amount$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR amount$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR amount$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?Expand@ImRect@@QEAAXM@Z ENDP				; ImRect::Expand
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Overlaps@ImRect@@QEBA_NAEBU1@@Z
_TEXT	SEGMENT
tv84 = 64
this$ = 96
r$ = 104
?Overlaps@ImRect@@QEBA_NAEBU1@@Z PROC			; ImRect::Overlaps, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 494
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@Overlaps
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@Overlaps
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@Overlaps
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@Overlaps
	mov	DWORD PTR tv84[rbp], 1
	jmp	SHORT $LN4@Overlaps
$LN3@Overlaps:
	mov	DWORD PTR tv84[rbp], 0
$LN4@Overlaps:
	movzx	eax, BYTE PTR tv84[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?Overlaps@ImRect@@QEBA_NAEBU1@@Z ENDP			; ImRect::Overlaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Contains@ImRect@@QEBA_NAEBU1@@Z
_TEXT	SEGMENT
tv84 = 64
this$ = 96
r$ = 104
?Contains@ImRect@@QEBA_NAEBU1@@Z PROC			; ImRect::Contains, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 493
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx+8]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+12]
	jb	SHORT $LN3@Contains
	mov	DWORD PTR tv84[rbp], 1
	jmp	SHORT $LN4@Contains
$LN3@Contains:
	mov	DWORD PTR tv84[rbp], 0
$LN4@Contains:
	movzx	eax, BYTE PTR tv84[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?Contains@ImRect@@QEBA_NAEBU1@@Z ENDP			; ImRect::Contains
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z
_TEXT	SEGMENT
tv80 = 64
this$ = 96
p$ = 104
?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z PROC		; ImRect::Contains, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 492
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@Contains
	mov	DWORD PTR tv80[rbp], 1
	jmp	SHORT $LN4@Contains
$LN3@Contains:
	mov	DWORD PTR tv80[rbp], 0
$LN4@Contains:
	movzx	eax, BYTE PTR tv80[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?Contains@ImRect@@QEBA_NAEBUImVec2@@@Z ENDP		; ImRect::Contains
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetBR@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetBR@ImRect@@QEBA?AUImVec2@@XZ PROC			; ImRect::GetBR, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 491
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetBR@ImRect@@QEBA?AUImVec2@@XZ ENDP			; ImRect::GetBR
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetBL@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetBL@ImRect@@QEBA?AUImVec2@@XZ PROC			; ImRect::GetBL, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 490
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetBL@ImRect@@QEBA?AUImVec2@@XZ ENDP			; ImRect::GetBL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetTR@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetTR@ImRect@@QEBA?AUImVec2@@XZ PROC			; ImRect::GetTR, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 489
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetTR@ImRect@@QEBA?AUImVec2@@XZ ENDP			; ImRect::GetTR
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetTL@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetTL@ImRect@@QEBA?AUImVec2@@XZ PROC			; ImRect::GetTL, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 488
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetTL@ImRect@@QEBA?AUImVec2@@XZ ENDP			; ImRect::GetTL
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetArea@ImRect@@QEBAMXZ
_TEXT	SEGMENT
this$ = 80
?GetArea@ImRect@@QEBAMXZ PROC				; ImRect::GetArea, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 487
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	subss	xmm1, DWORD PTR [rcx+4]
	mulss	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetArea@ImRect@@QEBAMXZ ENDP				; ImRect::GetArea
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHeight@ImRect@@QEBAMXZ
_TEXT	SEGMENT
this$ = 80
?GetHeight@ImRect@@QEBAMXZ PROC				; ImRect::GetHeight, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 486
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+4]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetHeight@ImRect@@QEBAMXZ ENDP				; ImRect::GetHeight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetWidth@ImRect@@QEBAMXZ
_TEXT	SEGMENT
this$ = 80
?GetWidth@ImRect@@QEBAMXZ PROC				; ImRect::GetWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 485
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetWidth@ImRect@@QEBAMXZ ENDP				; ImRect::GetWidth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetSize@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetSize@ImRect@@QEBA?AUImVec2@@XZ PROC			; ImRect::GetSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 484
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetSize@ImRect@@QEBA?AUImVec2@@XZ ENDP			; ImRect::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetCenter@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetCenter@ImRect@@QEBA?AUImVec2@@XZ PROC		; ImRect::GetCenter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 483
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetCenter@ImRect@@QEBA?AUImVec2@@XZ ENDP		; ImRect::GetCenter
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@MMMM@Z
_TEXT	SEGMENT
tv76 = 64
tv70 = 64
this$ = 96
x1$ = 104
y1$ = 112
x2$ = 120
y2$ = 128
??0ImRect@@QEAA@MMMM@Z PROC				; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 481
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv70[rbp], rax
	movss	xmm2, DWORD PTR y1$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	mov	rcx, QWORD PTR tv70[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv76[rbp], rax
	movss	xmm2, DWORD PTR y2$[rbp]
	movss	xmm1, DWORD PTR x2$[rbp]
	mov	rcx, QWORD PTR tv76[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
??0ImRect@@QEAA@MMMM@Z ENDP				; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@AEBUImVec4@@@Z
_TEXT	SEGMENT
tv80 = 64
tv72 = 64
this$ = 96
v$ = 104
??0ImRect@@QEAA@AEBUImVec4@@@Z PROC			; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 480
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv72[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR tv80[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
??0ImRect@@QEAA@AEBUImVec4@@@Z ENDP			; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@AEBUImVec2@@0@Z
_TEXT	SEGMENT
this$ = 80
min$ = 88
max$ = 96
??0ImRect@@QEAA@AEBUImVec2@@0@Z PROC			; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 479
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR min$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR max$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImRect@@QEAA@AEBUImVec2@@0@Z ENDP			; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@XZ
_TEXT	SEGMENT
tv76 = 64
tv70 = 64
this$ = 96
??0ImRect@@QEAA@XZ PROC					; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 478
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv70[rbp], rax
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR tv70[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv76[rbp], rax
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR tv76[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
??0ImRect@@QEAA@XZ ENDP					; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMax@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@M@@YAMMM@Z PROC				; ImMax<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 413
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR lhs$[rbp]
	comiss	xmm0, DWORD PTR rhs$[rbp]
	jb	SHORT $LN3@ImMax
	movss	xmm0, DWORD PTR lhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	movss	xmm0, DWORD PTR rhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN4@ImMax:
	movss	xmm0, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMax@M@@YAMMM@Z ENDP				; ImMax<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@M@@YAMMM@Z PROC				; ImMin<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR rhs$[rbp]
	comiss	xmm0, DWORD PTR lhs$[rbp]
	jbe	SHORT $LN3@ImMin
	movss	xmm0, DWORD PTR lhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	movss	xmm0, DWORD PTR rhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN4@ImMin:
	movss	xmm0, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@M@@YAMMM@Z ENDP				; ImMin<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLinearSweep@@YAMMMM@Z
_TEXT	SEGMENT
current$ = 80
target$ = 88
speed$ = 96
?ImLinearSweep@@YAMMMM@Z PROC				; ImLinearSweep, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 436
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR target$[rbp]
	comiss	xmm0, DWORD PTR current$[rbp]
	jbe	SHORT $LN2@ImLinearSw
	movss	xmm0, DWORD PTR current$[rbp]
	addss	xmm0, DWORD PTR speed$[rbp]
	movss	xmm1, DWORD PTR target$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	jmp	SHORT $LN1@ImLinearSw
$LN2@ImLinearSw:
	movss	xmm0, DWORD PTR current$[rbp]
	comiss	xmm0, DWORD PTR target$[rbp]
	jbe	SHORT $LN3@ImLinearSw
	movss	xmm0, DWORD PTR current$[rbp]
	subss	xmm0, DWORD PTR speed$[rbp]
	movss	xmm1, DWORD PTR target$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	jmp	SHORT $LN1@ImLinearSw
$LN3@ImLinearSw:
	movss	xmm0, DWORD PTR current$[rbp]
$LN1@ImLinearSw:
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLinearSweep@@YAMMMM@Z ENDP				; ImLinearSweep
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
cos_a$ = 96
sin_a$ = 104
?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z PROC			; ImRotate, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 435
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR sin_a$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR cos_a$[rbp]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR cos_a$[rbp]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR sin_a$[rbp]
	subss	xmm1, xmm2
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z ENDP			; ImRotate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImFloor@@YA?AUImVec2@@AEBU1@@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
v$ = 88
?ImFloor@@YA?AUImVec2@@AEBU1@@Z PROC			; ImFloor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 432
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR v$[rbp]
	cvttss2si eax, DWORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR v$[rbp]
	cvttss2si eax, DWORD PTR [rax]
	cvtsi2ss xmm1, eax
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImFloor@@YA?AUImVec2@@AEBU1@@Z ENDP			; ImFloor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImFloor@@YAMM@Z
_TEXT	SEGMENT
f$ = 80
?ImFloor@@YAMM@Z PROC					; ImFloor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 430
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cvttss2si eax, DWORD PTR f$[rbp]
	cvtsi2ss xmm0, eax
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImFloor@@YAMM@Z ENDP					; ImFloor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLengthSqr@@YAMAEBUImVec2@@@Z
_TEXT	SEGMENT
lhs$ = 80
?ImLengthSqr@@YAMAEBUImVec2@@@Z PROC			; ImLengthSqr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 427
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLengthSqr@@YAMAEBUImVec2@@@Z ENDP			; ImLengthSqr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImSaturate@@YAMM@Z
_TEXT	SEGMENT
tv67 = 64
tv66 = 68
f$ = 96
?ImSaturate@@YAMM@Z PROC				; ImSaturate, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 426
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR f$[rbp]
	jbe	SHORT $LN5@ImSaturate
	xorps	xmm0, xmm0
	movss	DWORD PTR tv67[rbp], xmm0
	jmp	SHORT $LN6@ImSaturate
$LN5@ImSaturate:
	movss	xmm0, DWORD PTR f$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jbe	SHORT $LN3@ImSaturate
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv66[rbp], xmm0
	jmp	SHORT $LN4@ImSaturate
$LN3@ImSaturate:
	movss	xmm0, DWORD PTR f$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
$LN4@ImSaturate:
	movss	xmm0, DWORD PTR tv66[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
$LN6@ImSaturate:
	movss	xmm0, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImSaturate@@YAMM@Z ENDP				; ImSaturate
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLerp@@YA?AUImVec2@@AEBU1@00@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
t$ = 104
?ImLerp@@YA?AUImVec2@@AEBU1@00@Z PROC			; ImLerp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 424
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR t$[rbp]
	mulss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR t$[rbp]
	mulss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLerp@@YA?AUImVec2@@AEBU1@00@Z ENDP			; ImLerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
a$ = 88
b$ = 96
t$ = 104
?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z PROC			; ImLerp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 423
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm0, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z ENDP			; ImLerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMax@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMax, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 421
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jb	SHORT $LN3@ImMax
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
$LN4@ImMax:
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN5@ImMax
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN6@ImMax
$LN5@ImMax:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
$LN6@ImMax:
	movss	xmm2, DWORD PTR tv71[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImMax@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMax
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMin@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMin, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 420
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
$LN4@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN5@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN6@ImMin
$LN5@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
$LN6@ImMin:
	movss	xmm2, DWORD PTR tv71[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImMin@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImAbs@@YANN@Z
_TEXT	SEGMENT
x$ = 80
?ImAbs@@YANN@Z PROC					; ImAbs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 400
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsd	xmm0, QWORD PTR x$[rbp]
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImAbs@@YANN@Z ENDP					; ImAbs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImAbs@@YAMM@Z
_TEXT	SEGMENT
x$ = 80
?ImAbs@@YAMM@Z PROC					; ImAbs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 399
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR x$[rbp]
	call	fabsf
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImAbs@@YAMM@Z ENDP					; ImAbs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLog@@YANN@Z
_TEXT	SEGMENT
x$ = 80
?ImLog@@YANN@Z PROC					; ImLog, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 397
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsd	xmm0, QWORD PTR x$[rbp]
	call	log
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLog@@YANN@Z ENDP					; ImLog
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLog@@YAMM@Z
_TEXT	SEGMENT
x$ = 80
?ImLog@@YAMM@Z PROC					; ImLog, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 396
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR x$[rbp]
	call	logf
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLog@@YAMM@Z ENDP					; ImLog
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImPow@@YANNN@Z
_TEXT	SEGMENT
x$ = 80
y$ = 88
?ImPow@@YANNN@Z PROC					; ImPow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 395
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsd	xmm1, QWORD PTR y$[rbp]
	movsd	xmm0, QWORD PTR x$[rbp]
	call	pow
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImPow@@YANNN@Z ENDP					; ImPow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImPow@@YAMMM@Z
_TEXT	SEGMENT
x$ = 80
y$ = 88
?ImPow@@YAMMM@Z PROC					; ImPow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 394
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm1, DWORD PTR y$[rbp]
	movss	xmm0, DWORD PTR x$[rbp]
	call	powf
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImPow@@YAMMM@Z ENDP					; ImPow
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z
_TEXT	SEGMENT
lhs$ = 80
rhs$ = 88
??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z PROC			; operator-=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 349
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z ENDP			; operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
_TEXT	SEGMENT
lhs$ = 80
rhs$ = 88
??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z PROC			; operator+=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 348
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z ENDP			; operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??G@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??G@YA?AUImVec2@@AEBU0@0@Z PROC				; operator-, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 343
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??G@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??H@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??H@YA?AUImVec2@@AEBU0@0@Z PROC				; operator+, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 342
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??H@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??D@YA?AUImVec2@@AEBU0@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??D@YA?AUImVec2@@AEBU0@M@Z PROC				; operator*, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 340
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR rhs$[rbp]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR rhs$[rbp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??D@YA?AUImVec2@@AEBU0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImCharIsBlankW@@YA_NI@Z
_TEXT	SEGMENT
tv67 = 192
c$ = 240
?ImCharIsBlankW@@YA_NI@Z PROC				; ImCharIsBlankW, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 324
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR c$[rbp], 32			; 00000020H
	je	SHORT $LN3@ImCharIsBl
	cmp	DWORD PTR c$[rbp], 9
	je	SHORT $LN3@ImCharIsBl
	cmp	DWORD PTR c$[rbp], 12288		; 00003000H
	je	SHORT $LN3@ImCharIsBl
	mov	DWORD PTR tv67[rbp], 0
	jmp	SHORT $LN4@ImCharIsBl
$LN3@ImCharIsBl:
	mov	DWORD PTR tv67[rbp], 1
$LN4@ImCharIsBl:
	movzx	eax, BYTE PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?ImCharIsBlankW@@YA_NI@Z ENDP				; ImCharIsBlankW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImCharIsBlankA@@YA_ND@Z
_TEXT	SEGMENT
tv68 = 192
c$ = 240
?ImCharIsBlankA@@YA_ND@Z PROC				; ImCharIsBlankA, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 323
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, BYTE PTR c$[rbp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@ImCharIsBl
	movsx	eax, BYTE PTR c$[rbp]
	cmp	eax, 9
	je	SHORT $LN3@ImCharIsBl
	mov	DWORD PTR tv68[rbp], 0
	jmp	SHORT $LN4@ImCharIsBl
$LN3@ImCharIsBl:
	mov	DWORD PTR tv68[rbp], 1
$LN4@ImCharIsBl:
	movzx	eax, BYTE PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?ImCharIsBlankA@@YA_ND@Z ENDP				; ImCharIsBlankA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImParseFormatPrecision@@YAHPEBDH@Z
_TEXT	SEGMENT
precision$ = 4
tv94 = 212
__$ArrayPad$ = 216
fmt$ = 256
default_precision$ = 264
?ImParseFormatPrecision@@YAHPEBDH@Z PROC		; ImParseFormatPrecision, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3326
$LN15:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 10
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+296]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3327
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt$[rbp], rax
; Line 3328
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN4@ImParseFor
; Line 3329
	mov	eax, DWORD PTR default_precision$[rbp]
	jmp	$LN1@ImParseFor
$LN4@ImParseFor:
; Line 3330
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	mov	QWORD PTR fmt$[rbp], rax
$LN2@ImParseFor:
; Line 3331
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@ImParseFor
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@ImParseFor
; Line 3332
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	mov	QWORD PTR fmt$[rbp], rax
	jmp	SHORT $LN2@ImParseFor
$LN3@ImParseFor:
; Line 3333
	mov	DWORD PTR precision$[rbp], 2147483647	; 7fffffffH
; Line 3334
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN5@ImParseFor
; Line 3336
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	lea	rdx, QWORD PTR precision$[rbp]
	mov	rcx, rax
	call	??$ImAtoi@H@@YAPEBDPEBDPEAH@Z		; ImAtoi<int>
	mov	QWORD PTR fmt$[rbp], rax
; Line 3337
	cmp	DWORD PTR precision$[rbp], 0
	jl	SHORT $LN7@ImParseFor
	cmp	DWORD PTR precision$[rbp], 99		; 00000063H
	jle	SHORT $LN6@ImParseFor
$LN7@ImParseFor:
; Line 3338
	mov	eax, DWORD PTR default_precision$[rbp]
	mov	DWORD PTR precision$[rbp], eax
$LN6@ImParseFor:
$LN5@ImParseFor:
; Line 3340
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 101				; 00000065H
	je	SHORT $LN9@ImParseFor
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN8@ImParseFor
$LN9@ImParseFor:
; Line 3341
	mov	DWORD PTR precision$[rbp], -1
$LN8@ImParseFor:
; Line 3342
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 103				; 00000067H
	je	SHORT $LN11@ImParseFor
	mov	rax, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN10@ImParseFor
$LN11@ImParseFor:
	cmp	DWORD PTR precision$[rbp], 2147483647	; 7fffffffH
	jne	SHORT $LN10@ImParseFor
; Line 3343
	mov	DWORD PTR precision$[rbp], -1
$LN10@ImParseFor:
; Line 3344
	cmp	DWORD PTR precision$[rbp], 2147483647	; 7fffffffH
	jne	SHORT $LN13@ImParseFor
	mov	eax, DWORD PTR default_precision$[rbp]
	mov	DWORD PTR tv94[rbp], eax
	jmp	SHORT $LN14@ImParseFor
$LN13@ImParseFor:
	mov	eax, DWORD PTR precision$[rbp]
	mov	DWORD PTR tv94[rbp], eax
$LN14@ImParseFor:
	mov	eax, DWORD PTR tv94[rbp]
$LN1@ImParseFor:
; Line 3345
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ImParseFormatPrecision@@YAHPEBDH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImParseFormatPrecision@@YAHPEBDH@Z ENDP		; ImParseFormatPrecision
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z
_TEXT	SEGMENT
fmt_start$ = 8
fmt_end$ = 40
fmt$ = 288
buf$ = 296
buf_size$ = 304
?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z PROC	; ImParseFormatTrimDecorations, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3312
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3313
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?ImParseFormatFindStart@@YAPEBDPEBD@Z	; ImParseFormatFindStart
	mov	QWORD PTR fmt_start$[rbp], rax
; Line 3314
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_start$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN2@ImParseFor
; Line 3315
	mov	rax, QWORD PTR fmt$[rbp]
	jmp	SHORT $LN1@ImParseFor
$LN2@ImParseFor:
; Line 3316
	mov	rcx, QWORD PTR fmt_start$[rbp]
	call	?ImParseFormatFindEnd@@YAPEBDPEBD@Z	; ImParseFormatFindEnd
	mov	QWORD PTR fmt_end$[rbp], rax
; Line 3317
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt_end$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN3@ImParseFor
; Line 3318
	mov	rax, QWORD PTR fmt_start$[rbp]
	jmp	SHORT $LN1@ImParseFor
$LN3@ImParseFor:
; Line 3319
	mov	rax, QWORD PTR fmt_start$[rbp]
	mov	rcx, QWORD PTR fmt_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	inc	rax
	mov	rdx, QWORD PTR buf_size$[rbp]
	mov	rcx, rax
	call	??$ImMin@_K@@YA_K_K0@Z			; ImMin<unsigned __int64>
	mov	r8, rax
	mov	rdx, QWORD PTR fmt_start$[rbp]
	mov	rcx, QWORD PTR buf$[rbp]
	call	?ImStrncpy@@YAXPEADPEBD_K@Z		; ImStrncpy
; Line 3320
	mov	rax, QWORD PTR buf$[rbp]
$LN1@ImParseFor:
; Line 3321
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?ImParseFormatTrimDecorations@@YAPEBDPEBDPEAD_K@Z ENDP	; ImParseFormatTrimDecorations
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImParseFormatFindEnd@@YAPEBDPEBD@Z
_TEXT	SEGMENT
ignored_uppercase_mask$ = 4
ignored_lowercase_mask$ = 36
c$1 = 68
tv140 = 276
tv134 = 276
fmt$ = 320
?ImParseFormatFindEnd@@YAPEBDPEBD@Z PROC		; ImParseFormatFindEnd, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3290
$LN9:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3292
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN5@ImParseFor
; Line 3293
	mov	rax, QWORD PTR fmt$[rbp]
	jmp	$LN1@ImParseFor
$LN5@ImParseFor:
; Line 3294
	mov	DWORD PTR ignored_uppercase_mask$[rbp], 2304 ; 00000900H
; Line 3295
	mov	DWORD PTR ignored_lowercase_mask$[rbp], 38275712 ; 02480a80H
; Line 3296
	jmp	SHORT $LN4@ImParseFor
$LN2@ImParseFor:
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	mov	QWORD PTR fmt$[rbp], rax
$LN4@ImParseFor:
	mov	rax, QWORD PTR fmt$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$1[rbp], al
	movsx	eax, BYTE PTR c$1[rbp]
	test	eax, eax
	je	$LN3@ImParseFor
; Line 3298
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN6@ImParseFor
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 90					; 0000005aH
	jg	SHORT $LN6@ImParseFor
	movsx	eax, BYTE PTR c$1[rbp]
	sub	eax, 65					; 00000041H
	mov	ecx, 1
	mov	DWORD PTR tv134[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv134[rbp]
	shl	eax, cl
	and	eax, 2304				; 00000900H
	test	eax, eax
	jne	SHORT $LN6@ImParseFor
; Line 3299
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	jmp	SHORT $LN1@ImParseFor
$LN6@ImParseFor:
; Line 3300
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN7@ImParseFor
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN7@ImParseFor
	movsx	eax, BYTE PTR c$1[rbp]
	sub	eax, 97					; 00000061H
	mov	ecx, 1
	mov	DWORD PTR tv140[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv140[rbp]
	shl	eax, cl
	and	eax, 38275712				; 02480a80H
	test	eax, eax
	jne	SHORT $LN7@ImParseFor
; Line 3301
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	jmp	SHORT $LN1@ImParseFor
$LN7@ImParseFor:
; Line 3302
	jmp	$LN2@ImParseFor
$LN3@ImParseFor:
; Line 3303
	mov	rax, QWORD PTR fmt$[rbp]
$LN1@ImParseFor:
; Line 3304
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ImParseFormatFindEnd@@YAPEBDPEBD@Z ENDP		; ImParseFormatFindEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImParseFormatFindStart@@YAPEBDPEBD@Z
_TEXT	SEGMENT
c$1 = 4
fmt$ = 256
?ImParseFormatFindStart@@YAPEBDPEBD@Z PROC		; ImParseFormatFindStart, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3277
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
$LN2@ImParseFor:
; Line 3278
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR c$1[rbp], al
	movsx	eax, BYTE PTR c$1[rbp]
	test	eax, eax
	je	SHORT $LN3@ImParseFor
; Line 3280
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN4@ImParseFor
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN4@ImParseFor
; Line 3281
	mov	rax, QWORD PTR fmt$[rbp]
	jmp	SHORT $LN1@ImParseFor
	jmp	SHORT $LN5@ImParseFor
$LN4@ImParseFor:
; Line 3282
	movsx	eax, BYTE PTR c$1[rbp]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN6@ImParseFor
; Line 3283
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	mov	QWORD PTR fmt$[rbp], rax
$LN6@ImParseFor:
$LN5@ImParseFor:
; Line 3284
	mov	rax, QWORD PTR fmt$[rbp]
	inc	rax
	mov	QWORD PTR fmt$[rbp], rax
; Line 3285
	jmp	SHORT $LN2@ImParseFor
$LN3@ImParseFor:
; Line 3286
	mov	rax, QWORD PTR fmt$[rbp]
$LN1@ImParseFor:
; Line 3287
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImParseFormatFindStart@@YAPEBDPEBD@Z ENDP		; ImParseFormatFindStart
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImIsPowerOfTwo@@YA_NH@Z
_TEXT	SEGMENT
tv68 = 192
v$ = 240
?ImIsPowerOfTwo@@YA_NH@Z PROC				; ImIsPowerOfTwo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 300
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR v$[rbp], 0
	je	SHORT $LN3@ImIsPowerO
	mov	eax, DWORD PTR v$[rbp]
	dec	eax
	mov	ecx, DWORD PTR v$[rbp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@ImIsPowerO
	mov	DWORD PTR tv68[rbp], 1
	jmp	SHORT $LN4@ImIsPowerO
$LN3@ImIsPowerO:
	mov	DWORD PTR tv68[rbp], 0
$LN4@ImIsPowerO:
	movzx	eax, BYTE PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?ImIsPowerOfTwo@@YA_NH@Z ENDP				; ImIsPowerOfTwo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT fabsf
_TEXT	SEGMENT
_X$ = 224
fabsf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; Line 679
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__BB16330F_corecrt_math@h
	call	__CheckForDebuggerJustMyCode
; Line 680
	cvtss2sd xmm0, DWORD PTR _X$[rbp]
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtsd2ss xmm0, xmm0
; Line 681
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Buffer$ = 320
_Format$ = 328
sscanf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; Line 2247
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C1EC35D3_stdio@h
	call	__CheckForDebuggerJustMyCode
; Line 2250
	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax
; Line 2251
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, QWORD PTR _Buffer$[rbp]
	call	_vsscanf_l
	mov	DWORD PTR _Result$[rbp], eax
; Line 2252
	mov	QWORD PTR _ArgList$[rbp], 0
; Line 2253
	mov	eax, DWORD PTR _Result$[rbp]
; Line 2254
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:sscanf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vsscanf_l PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; Line 2152
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__C1EC35D3_stdio@h
	call	__CheckForDebuggerJustMyCode
; Line 2153
	call	__local_stdio_scanf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rbp]
	mov	r8, -1
	mov	rdx, QWORD PTR _Buffer$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsscanf
; Line 2156
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
; Line 100
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__44420885_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode
; Line 102
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 103
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z
_TEXT	SEGMENT
slider_flags$ = 4
label$ = 256
data_type$ = 264
v$ = 272
components$ = 280
v_min$ = 288
v_max$ = 296
format$ = 304
power$ = 312
?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z PROC	; ImGui::SliderScalarN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3242
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3243
	mov	DWORD PTR slider_flags$[rbp], 0
; Line 3244
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN6@SliderScal
	je	SHORT $LN2@SliderScal
$LN6@SliderScal:
; Line 3246
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN4@SliderScal
	jne	SHORT $LN4@SliderScal
	lea	rax, OFFSET FLAT:??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@
	test	rax, rax
	jne	SHORT $LN5@SliderScal
$LN4@SliderScal:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@SliderScal:
; Line 3247
	mov	eax, DWORD PTR slider_flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR slider_flags$[rbp], eax
$LN2@SliderScal:
; Line 3249
	mov	eax, DWORD PTR slider_flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR components$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3250
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20M@Z ENDP	; ImGui::SliderScalarN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z
_TEXT	SEGMENT
slider_flags$ = 4
label$ = 256
data_type$ = 264
p_data$ = 272
p_min$ = 280
p_max$ = 288
format$ = 296
power$ = 304
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z PROC	; ImGui::SliderScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3231
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3232
	mov	DWORD PTR slider_flags$[rbp], 0
; Line 3233
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN6@SliderScal
	je	SHORT $LN2@SliderScal
$LN6@SliderScal:
; Line 3235
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN4@SliderScal
	jne	SHORT $LN4@SliderScal
	lea	rax, OFFSET FLAT:??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@
	test	rax, rax
	jne	SHORT $LN5@SliderScal
$LN4@SliderScal:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@SliderScal:
; Line 3236
	mov	eax, DWORD PTR slider_flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR slider_flags$[rbp], eax
$LN2@SliderScal:
; Line 3238
	mov	eax, DWORD PTR slider_flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_min$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar
; Line 3239
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20M@Z ENDP	; ImGui::SliderScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z
_TEXT	SEGMENT
drag_flags$ = 4
label$ = 256
data_type$ = 264
p_data$ = 272
components$ = 280
v_speed$ = 288
p_min$ = 296
p_max$ = 304
format$ = 312
power$ = 320
?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z PROC	; ImGui::DragScalarN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2618
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2619
	mov	DWORD PTR drag_flags$[rbp], 0
; Line 2620
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN8@DragScalar
	je	$LN2@DragScalar
$LN8@DragScalar:
; Line 2622
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN4@DragScalar
	jne	SHORT $LN4@DragScalar
	lea	rax, OFFSET FLAT:??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@
	test	rax, rax
	jne	SHORT $LN5@DragScalar
$LN4@DragScalar:
	mov	eax, DWORD PTR ?__LINE__Var@?0??DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@DragScalar:
; Line 2623
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN6@DragScalar
	cmp	QWORD PTR p_max$[rbp], 0
	jne	SHORT $LN7@DragScalar
$LN6@DragScalar:
	mov	eax, DWORD PTR ?__LINE__Var@?0??DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@IAANKGPJ@?$AAp?$AA_?$AAm?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@DragScalar:
; Line 2624
	mov	eax, DWORD PTR drag_flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR drag_flags$[rbp], eax
$LN2@DragScalar:
; Line 2626
	mov	eax, DWORD PTR drag_flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR components$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2627
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20M@Z ENDP	; ImGui::DragScalarN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z
_TEXT	SEGMENT
drag_flags$ = 4
label$ = 256
data_type$ = 264
p_data$ = 272
v_speed$ = 280
p_min$ = 288
p_max$ = 296
format$ = 304
power$ = 312
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z PROC		; ImGui::DragScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2606
$LN9:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2607
	mov	DWORD PTR drag_flags$[rbp], 0
; Line 2608
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN8@DragScalar
	je	$LN2@DragScalar
$LN8@DragScalar:
; Line 2610
	movss	xmm0, DWORD PTR power$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN4@DragScalar
	jne	SHORT $LN4@DragScalar
	lea	rax, OFFSET FLAT:??_C@_0GH@JOLPKMDA@Call?5function?5with?5ImGuiSliderF@
	test	rax, rax
	jne	SHORT $LN5@DragScalar
$LN4@DragScalar:
	mov	eax, DWORD PTR ?__LINE__Var@?0??DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1PE@DLDNNIOM@?$AAp?$AAo?$AAw?$AAe?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?4?$AA0?$AAf?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@DragScalar:
; Line 2611
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN6@DragScalar
	cmp	QWORD PTR p_max$[rbp], 0
	jne	SHORT $LN7@DragScalar
$LN6@DragScalar:
	mov	eax, DWORD PTR ?__LINE__Var@?0??DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@IAANKGPJ@?$AAp?$AA_?$AAm?$AAi?$AAn?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@DragScalar:
; Line 2612
	mov	eax, DWORD PTR drag_flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR drag_flags$[rbp], eax
$LN2@DragScalar:
; Line 2614
	mov	eax, DWORD PTR drag_flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
; Line 2615
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20M@Z ENDP		; ImGui::DragScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ListBoxHeader@ImGui@@YA_NPEBDHH@Z
_TEXT	SEGMENT
g$ = 8
height_in_items_f$ = 36
size$ = 72
tv68 = 276
__$ArrayPad$ = 280
label$ = 320
items_count$ = 328
height_in_items$ = 336
?ListBoxHeader@ImGui@@YA_NPEBDHH@Z PROC			; ImGui::ListBoxHeader, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6303
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6305
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6306
	cmp	DWORD PTR height_in_items$[rbp], 0
	jge	SHORT $LN3@ListBoxHea
	mov	edx, 7
	mov	ecx, DWORD PTR items_count$[rbp]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	DWORD PTR tv68[rbp], eax
	jmp	SHORT $LN4@ListBoxHea
$LN3@ListBoxHea:
	mov	eax, DWORD PTR height_in_items$[rbp]
	mov	DWORD PTR tv68[rbp], eax
$LN4@ListBoxHea:
	cvtsi2ss xmm0, DWORD PTR tv68[rbp]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR height_in_items_f$[rbp], xmm0
; Line 6307
	lea	rcx, QWORD PTR size$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
; Line 6308
	xorps	xmm0, xmm0
	movss	DWORD PTR size$[rbp], xmm0
; Line 6309
	call	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
	mulss	xmm0, DWORD PTR height_in_items_f$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR size$[rbp+4], xmm0
; Line 6310
	lea	rdx, QWORD PTR size$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::BeginListBox
; Line 6311
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ListBoxHeader@ImGui@@YA_NPEBDHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ListBoxHeader@ImGui@@YA_NPEBDHH@Z ENDP			; ImGui::ListBoxHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCharAdvance@ImFont@@QEBAMG@Z
_TEXT	SEGMENT
tv74 = 192
tv76 = 200
this$ = 240
c$ = 248
?GetCharAdvance@ImFont@@QEBAMG@Z PROC			; ImFont::GetCharAdvance, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2739
$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	movzx	eax, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN3@GetCharAdv
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	movzx	eax, WORD PTR c$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv74[rbp]
	call	??A?$ImVector@M@@QEBAAEBMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv76[rbp], xmm0
	jmp	SHORT $LN4@GetCharAdv
$LN3@GetCharAdv:
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv76[rbp], xmm0
$LN4@GetCharAdv:
	movss	xmm0, DWORD PTR tv76[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetCharAdvance@ImFont@@QEBAMG@Z ENDP			; ImFont::GetCharAdvance
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ PROC		; ImVector<ImFontGlyph>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@UImFontGlyph@@@@QEBA_NXZ ENDP		; ImVector<ImFontGlyph>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@M@@QEBAAEBMH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@M@@QEBAAEBMH@Z PROC			; ImVector<float>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1695
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1695				; 0000069fH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@M@@QEBAAEBMH@Z ENDP			; ImVector<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@M@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@M@@QEBA_NXZ PROC			; ImVector<float>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@M@@QEBA_NXZ ENDP			; ImVector<float>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?contains@?$ImVector@I@@QEBA_NAEBI@Z
_TEXT	SEGMENT
data$ = 8
data_end$ = 40
tv73 = 244
tv74 = 248
tv75 = 252
this$ = 288
v$ = 296
?contains@?$ImVector@I@@QEBA_NAEBI@Z PROC		; ImVector<unsigned int>::contains, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1721
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR data_end$[rbp], rax
$LN2@contains:
	mov	rax, QWORD PTR data_end$[rbp]
	cmp	QWORD PTR data$[rbp], rax
	jae	SHORT $LN3@contains
	mov	rax, QWORD PTR data$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv73[rbp], eax
	mov	rax, QWORD PTR v$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv74[rbp], eax
	mov	rax, QWORD PTR data$[rbp]
	add	rax, 4
	mov	QWORD PTR data$[rbp], rax
	mov	eax, DWORD PTR tv74[rbp]
	cmp	DWORD PTR tv73[rbp], eax
	jne	SHORT $LN6@contains
	mov	DWORD PTR tv75[rbp], 1
	jmp	SHORT $LN7@contains
$LN6@contains:
	mov	DWORD PTR tv75[rbp], 0
$LN7@contains:
	cmp	DWORD PTR tv75[rbp], 0
	je	SHORT $LN4@contains
	mov	al, 1
	jmp	SHORT $LN1@contains
$LN4@contains:
	jmp	SHORT $LN2@contains
$LN3@contains:
	xor	al, al
$LN1@contains:
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?contains@?$ImVector@I@@QEBA_NAEBI@Z ENDP		; ImVector<unsigned int>::contains
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@I@@QEAAXAEBI@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@I@@QEAAXAEBI@Z PROC		; ImVector<unsigned int>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@I@@QEBAHH@Z	; ImVector<unsigned int>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@I@@QEAAXH@Z		; ImVector<unsigned int>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@I@@QEAAXAEBI@Z ENDP		; ImVector<unsigned int>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@I@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@I@@QEAAXH@Z PROC			; ImVector<unsigned int>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@I@@QEAAXH@Z ENDP			; ImVector<unsigned int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@I@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@I@@QEBAHH@Z PROC		; ImVector<unsigned int>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@I@@QEBAHH@Z ENDP		; ImVector<unsigned int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@I@@QEAAAEAIXZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@I@@QEAAAEAIXZ PROC			; ImVector<unsigned int>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@I@@QEAAAEAIXZ ENDP			; ImVector<unsigned int>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
uv$ = 240
col$ = 248
?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z PROC		; ImDrawList::PrimVtx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2468
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rax+52]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR uv$[rbp]
	mov	rdx, QWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ENDP		; ImDrawList::PrimVtx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimWriteIdx@ImDrawList@@QEAAXG@Z
_TEXT	SEGMENT
this$ = 224
idx$ = 232
?PrimWriteIdx@ImDrawList@@QEAAXG@Z PROC			; ImDrawList::PrimWriteIdx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2467
$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	movzx	ecx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PrimWriteIdx@ImDrawList@@QEAAXG@Z ENDP			; ImDrawList::PrimWriteIdx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
uv$ = 240
col$ = 248
?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z PROC	; ImDrawList::PrimWriteVtx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2466
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR pos$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR uv$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	mov	ecx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ENDP	; ImDrawList::PrimWriteVtx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathStroke@ImDrawList@@QEAAXIHM@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
flags$ = 240
thickness$ = 248
?PathStroke@ImDrawList@@QEAAXIHM@Z PROC			; ImDrawList::PathStroke, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2436
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR thickness$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR col$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	mov	r8d, DWORD PTR [rax+120]
	mov	rax, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ; ImDrawList::AddPolyline
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+120], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PathStroke@ImDrawList@@QEAAXIHM@Z ENDP			; ImDrawList::PathStroke
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathFillConvex@ImDrawList@@QEAAXI@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
?PathFillConvex@ImDrawList@@QEAAXI@Z PROC		; ImDrawList::PathFillConvex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2435
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	r9d, DWORD PTR col$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	mov	r8d, DWORD PTR [rax+120]
	mov	rax, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ; ImDrawList::AddConvexPolyFilled
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+120], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PathFillConvex@ImDrawList@@QEAAXI@Z ENDP		; ImDrawList::PathFillConvex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
tv68 = 192
this$ = 240
pos$ = 248
?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z PROC	; ImDrawList::PathLineTo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2433
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv68[rbp], rax
	mov	rdx, QWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR tv68[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ENDP	; ImDrawList::PathLineTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z PROC ; ImVector<ImVec2>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ENDP ; ImVector<ImVec2>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z PROC	; ImVector<ImVec2>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ENDP	; ImVector<ImVec2>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z PROC	; ImVector<ImDrawCmd>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ENDP	; ImVector<ImDrawCmd>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@ImGuiTextBuffer@@QEBAHXZ
_TEXT	SEGMENT
tv70 = 192
this$ = 240
?size@ImGuiTextBuffer@@QEBAHXZ PROC			; ImGuiTextBuffer::size, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2077
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN3@size
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@size
$LN3@size:
	mov	DWORD PTR tv70[rbp], 0
$LN4@size:
	mov	eax, DWORD PTR tv70[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?size@ImGuiTextBuffer@@QEBAHXZ ENDP			; ImGuiTextBuffer::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTextBuffer@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTextBuffer@@QEAA@XZ PROC			; ImGuiTextBuffer::ImGuiTextBuffer, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2073
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@D@@QEAA@XZ		; ImVector<char>::ImVector<char>
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTextBuffer@@QEAA@XZ ENDP			; ImGuiTextBuffer::ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@D@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@D@@QEAAXH@Z PROC			; ImVector<char>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@D@@QEAAXH@Z ENDP			; ImVector<char>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@D@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@D@@QEAAXH@Z PROC			; ImVector<char>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@D@@QEBAHH@Z	; ImVector<char>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@D@@QEAAXH@Z ENDP			; ImVector<char>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@D@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@D@@QEBAHH@Z PROC		; ImVector<char>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@D@@QEBAHH@Z ENDP		; ImVector<char>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@D@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@D@@QEAA@XZ PROC				; ImVector<char>::ImVector<char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@D@@QEAA@XZ ENDP				; ImVector<char>::ImVector<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z
_TEXT	SEGMENT
is_resizable$ = 4
new_text_len$ = 36
g$1 = 72
edit_state$2 = 104
new_buf_size$3 = 132
tv74 = 340
tv67 = 340
tv217 = 344
tv172 = 344
tv149 = 344
tv218 = 352
this$ = 400
pos$ = 408
new_text$ = 416
new_text_end$ = 424
?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z PROC ; ImGuiInputTextCallbackData::InsertChars, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3810
$LN15:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 400				; 00000190H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3811
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 262144				; 00040000H
	test	eax, eax
	je	SHORT $LN7@InsertChar
	mov	BYTE PTR tv67[rbp], 1
	jmp	SHORT $LN8@InsertChar
$LN7@InsertChar:
	mov	BYTE PTR tv67[rbp], 0
$LN8@InsertChar:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR is_resizable$[rbp], al
; Line 3812
	cmp	QWORD PTR new_text_end$[rbp], 0
	je	SHORT $LN9@InsertChar
	mov	rax, QWORD PTR new_text$[rbp]
	mov	rcx, QWORD PTR new_text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR tv74[rbp], eax
	jmp	SHORT $LN10@InsertChar
$LN9@InsertChar:
	mov	rax, QWORD PTR new_text$[rbp]
	mov	QWORD PTR tv217[rbp], rax
	mov	QWORD PTR tv218[rbp], -1
$LL14@InsertChar:
	inc	QWORD PTR tv218[rbp]
	mov	rax, QWORD PTR tv217[rbp]
	mov	rcx, QWORD PTR tv218[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL14@InsertChar
	mov	rax, QWORD PTR tv218[rbp]
	mov	DWORD PTR tv74[rbp], eax
$LN10@InsertChar:
	mov	eax, DWORD PTR tv74[rbp]
	mov	DWORD PTR new_text_len$[rbp], eax
; Line 3813
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	ecx, DWORD PTR new_text_len$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	cmp	eax, DWORD PTR [rcx+36]
	jl	$LN2@InsertChar
; Line 3815
	movzx	eax, BYTE PTR is_resizable$[rbp]
	test	eax, eax
	jne	SHORT $LN3@InsertChar
; Line 3816
	jmp	$LN1@InsertChar
$LN3@InsertChar:
; Line 3819
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$1[rbp], rax
; Line 3820
	mov	rax, QWORD PTR g$1[rbp]
	add	rax, 8368				; 000020b0H
	mov	QWORD PTR edit_state$2[rbp], rax
; Line 3821
	mov	rax, QWORD PTR edit_state$2[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN11@InsertChar
	mov	rax, QWORD PTR g$1[rbp]
	mov	rcx, QWORD PTR edit_state$2[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN12@InsertChar
$LN11@InsertChar:
	mov	eax, DWORD PTR ?__LINE__Var@?0??InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z@4JA
	add	eax, 11
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GI@EFFMAEBL@?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@InsertChar:
; Line 3822
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR edit_state$2[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	cmp	QWORD PTR [rax+24], rcx
	je	SHORT $LN13@InsertChar
	mov	eax, DWORD PTR ?__LINE__Var@?0??InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z@4JA
	add	eax, 12
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DM@LDGOBGNL@?$AAB?$AAu?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAe?$AAd?$AAi?$AAt?$AA_?$AAs?$AAt?$AAa@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@InsertChar:
; Line 3823
	mov	edx, DWORD PTR new_text_len$[rbp]
	mov	ecx, 256				; 00000100H
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	ecx, DWORD PTR new_text_len$[rbp]
	shl	ecx, 2
	mov	r8d, eax
	mov	edx, 32					; 00000020H
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	DWORD PTR new_buf_size$3[rbp], eax
; Line 3824
	mov	rax, QWORD PTR edit_state$2[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv149[rbp], rax
	mov	eax, DWORD PTR new_buf_size$3[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv149[rbp]
	call	?reserve@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::reserve
; Line 3825
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR edit_state$2[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+24], rcx
; Line 3826
	mov	rax, QWORD PTR edit_state$2[rbp]
	mov	ecx, DWORD PTR new_buf_size$3[rbp]
	mov	DWORD PTR [rax+68], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_buf_size$3[rbp]
	mov	DWORD PTR [rax+36], ecx
$LN2@InsertChar:
; Line 3829
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	cmp	DWORD PTR [rax+32], ecx
	je	SHORT $LN4@InsertChar
; Line 3830
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	add	rcx, QWORD PTR [rdx+24]
	movsxd	rdx, DWORD PTR pos$[rbp]
	mov	r8, QWORD PTR this$[rbp]
	mov	r8, QWORD PTR [r8+24]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR new_text_len$[rbp]
	add	rdx, r8
	mov	QWORD PTR tv172[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv172[rbp]
	mov	rcx, rax
	call	memmove
$LN4@InsertChar:
; Line 3831
	movsxd	rax, DWORD PTR new_text_len$[rbp]
	movsxd	rcx, DWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdi, rcx
	mov	rsi, QWORD PTR new_text$[rbp]
	mov	rcx, rax
	rep movsb
; Line 3832
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, DWORD PTR new_text_len$[rbp]
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax], 0
; Line 3834
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	cmp	DWORD PTR [rax+44], ecx
	jl	SHORT $LN5@InsertChar
; Line 3835
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+44]
	add	eax, DWORD PTR new_text_len$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+44], eax
$LN5@InsertChar:
; Line 3836
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax+52], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax+48], ecx
; Line 3837
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+40], 1
; Line 3838
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, DWORD PTR new_text_len$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+32], eax
$LN1@InsertChar:
; Line 3839
	lea	rsp, QWORD PTR [rbp+368]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?InsertChars@ImGuiInputTextCallbackData@@QEAAXHPEBD0@Z ENDP ; ImGuiInputTextCallbackData::InsertChars
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z
_TEXT	SEGMENT
dst$ = 8
src$ = 40
c$1 = 68
tv82 = 276
this$ = 320
pos$ = 328
bytes_count$ = 336
?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z PROC	; ImGuiInputTextCallbackData::DeleteChars, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3792
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3793
	mov	eax, DWORD PTR bytes_count$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	cmp	eax, DWORD PTR [rcx+32]
	jle	SHORT $LN8@DeleteChar
	mov	eax, DWORD PTR ?__LINE__Var@?0??DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EA@OOMMGKHM@?$AAp?$AAo?$AAs?$AA?5?$AA?$CL?$AA?5?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAc?$AAo?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@DeleteChar:
; Line 3794
	movsxd	rax, DWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR dst$[rbp], rax
; Line 3795
	movsxd	rax, DWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR bytes_count$[rbp]
	add	rax, rcx
	mov	QWORD PTR src$[rbp], rax
$LN2@DeleteChar:
; Line 3796
	mov	rax, QWORD PTR src$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv82[rbp], al
	mov	rax, QWORD PTR src$[rbp]
	inc	rax
	mov	QWORD PTR src$[rbp], rax
	movzx	eax, BYTE PTR tv82[rbp]
	mov	BYTE PTR c$1[rbp], al
	movsx	eax, BYTE PTR c$1[rbp]
	test	eax, eax
	je	SHORT $LN3@DeleteChar
; Line 3797
	mov	rax, QWORD PTR dst$[rbp]
	movzx	ecx, BYTE PTR c$1[rbp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR dst$[rbp]
	inc	rax
	mov	QWORD PTR dst$[rbp], rax
	jmp	SHORT $LN2@DeleteChar
$LN3@DeleteChar:
; Line 3798
	mov	rax, QWORD PTR dst$[rbp]
	mov	BYTE PTR [rax], 0
; Line 3800
	mov	eax, DWORD PTR bytes_count$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rcx+44], eax
	jl	SHORT $LN4@DeleteChar
; Line 3801
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR bytes_count$[rbp]
	mov	eax, DWORD PTR [rax+44]
	sub	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+44], eax
	jmp	SHORT $LN5@DeleteChar
$LN4@DeleteChar:
; Line 3802
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	cmp	DWORD PTR [rax+44], ecx
	jl	SHORT $LN6@DeleteChar
; Line 3803
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR pos$[rbp]
	mov	DWORD PTR [rax+44], ecx
$LN6@DeleteChar:
$LN5@DeleteChar:
; Line 3804
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax+52], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax+48], ecx
; Line 3805
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+40], 1
; Line 3806
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR bytes_count$[rbp]
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 3807
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?DeleteChars@ImGuiInputTextCallbackData@@QEAAXHH@Z ENDP	; ImGuiInputTextCallbackData::DeleteChars
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiInputTextCallbackData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiInputTextCallbackData@@QEAA@XZ PROC		; ImGuiInputTextCallbackData::ImGuiInputTextCallbackData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3784
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3785
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 56					; 00000038H
	rep stosb
; Line 3786
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiInputTextCallbackData@@QEAA@XZ ENDP		; ImGuiInputTextCallbackData::ImGuiInputTextCallbackData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?contains@?$ImVector@G@@QEBA_NAEBG@Z
_TEXT	SEGMENT
data$ = 8
data_end$ = 40
tv75 = 244
tv76 = 248
tv77 = 252
this$ = 288
v$ = 296
?contains@?$ImVector@G@@QEBA_NAEBG@Z PROC		; ImVector<unsigned short>::contains, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1721
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR data_end$[rbp], rax
$LN2@contains:
	mov	rax, QWORD PTR data_end$[rbp]
	cmp	QWORD PTR data$[rbp], rax
	jae	SHORT $LN3@contains
	mov	rax, QWORD PTR data$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv75[rbp], eax
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv76[rbp], eax
	mov	rax, QWORD PTR data$[rbp]
	add	rax, 2
	mov	QWORD PTR data$[rbp], rax
	mov	eax, DWORD PTR tv76[rbp]
	cmp	DWORD PTR tv75[rbp], eax
	jne	SHORT $LN6@contains
	mov	DWORD PTR tv77[rbp], 1
	jmp	SHORT $LN7@contains
$LN6@contains:
	mov	DWORD PTR tv77[rbp], 0
$LN7@contains:
	cmp	DWORD PTR tv77[rbp], 0
	je	SHORT $LN4@contains
	mov	al, 1
	jmp	SHORT $LN1@contains
$LN4@contains:
	jmp	SHORT $LN2@contains
$LN3@contains:
	xor	al, al
$LN1@contains:
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?contains@?$ImVector@G@@QEBA_NAEBG@Z ENDP		; ImVector<unsigned short>::contains
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 1
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@G@@QEBAHH@Z	; ImVector<unsigned short>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@G@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@G@@QEBAHH@Z PROC		; ImVector<unsigned short>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@G@@QEBAHH@Z ENDP		; ImVector<unsigned short>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@G@@QEBAAEBGH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@G@@QEBAAEBGH@Z PROC			; ImVector<unsigned short>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1695
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1695				; 0000069fH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*2]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@G@@QEBAAEBGH@Z ENDP			; ImVector<unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@G@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@G@@QEAAAEAGH@Z PROC			; ImVector<unsigned short>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*2]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@G@@QEAAAEAGH@Z ENDP			; ImVector<unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@G@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@G@@QEBA_NXZ PROC			; ImVector<unsigned short>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@G@@QEBA_NXZ ENDP			; ImVector<unsigned short>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@G@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@G@@QEAA@XZ PROC				; ImVector<unsigned short>::~ImVector<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@G@@QEAA@XZ ENDP				; ImVector<unsigned short>::~ImVector<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@G@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@G@@QEAA@XZ PROC				; ImVector<unsigned short>::ImVector<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@G@@QEAA@XZ ENDP				; ImVector<unsigned short>::ImVector<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPEAXUImNewWrapper@@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??3@YAXPEAXUImNewWrapper@@0@Z PROC			; operator delete, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1648
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??3@YAXPEAXUImNewWrapper@@0@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2@YAPEAX_KUImNewWrapper@@PEAX@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
ptr$ = 240
??2@YAPEAX_KUImNewWrapper@@PEAX@Z PROC			; operator new, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1647
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ptr$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??2@YAPEAX_KUImNewWrapper@@PEAX@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetTabItemClosed@ImGui@@YAXPEBD@Z
_TEXT	SEGMENT
g$ = 8
is_within_manual_tab_bar$ = 36
tab_bar$1 = 72
tab_id$2 = 100
tab$3 = 136
tv70 = 340
label$ = 384
?SetTabItemClosed@ImGui@@YAXPEBD@Z PROC			; ImGui::SetTabItemClosed, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 8007
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 8008
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 8009
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+8280], 0
	je	SHORT $LN5@SetTabItem
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8280]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN5@SetTabItem
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN6@SetTabItem
$LN5@SetTabItem:
	mov	DWORD PTR tv70[rbp], 0
$LN6@SetTabItem:
	movzx	eax, BYTE PTR tv70[rbp]
	mov	BYTE PTR is_within_manual_tab_bar$[rbp], al
; Line 8010
	movzx	eax, BYTE PTR is_within_manual_tab_bar$[rbp]
	test	eax, eax
	je	SHORT $LN2@SetTabItem
; Line 8012
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8280]
	mov	QWORD PTR tab_bar$1[rbp], rax
; Line 8013
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR tab_bar$1[rbp]
	call	?TabBarCalcTabID@ImGui@@YAIPEAUImGuiTabBar@@PEBD@Z ; ImGui::TabBarCalcTabID
	mov	DWORD PTR tab_id$2[rbp], eax
; Line 8014
	mov	edx, DWORD PTR tab_id$2[rbp]
	mov	rcx, QWORD PTR tab_bar$1[rbp]
	call	?TabBarFindTabByID@ImGui@@YAPEAUImGuiTabItem@@PEAUImGuiTabBar@@I@Z ; ImGui::TabBarFindTabByID
	mov	QWORD PTR tab$3[rbp], rax
	cmp	QWORD PTR tab$3[rbp], 0
	je	SHORT $LN3@SetTabItem
; Line 8015
	mov	rax, QWORD PTR tab$3[rbp]
	mov	BYTE PTR [rax+36], 1
$LN3@SetTabItem:
$LN2@SetTabItem:
; Line 8017
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?SetTabItemClosed@ImGui@@YAXPEBD@Z ENDP			; ImGui::SetTabItemClosed
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TabItemButton@ImGui@@YA_NPEBDH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
tab_bar$ = 72
label$ = 320
flags$ = 328
?TabItemButton@ImGui@@YA_NPEBDH@Z PROC			; ImGui::TabItemButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7775
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7776
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7777
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7778
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TabItemBut
; Line 7779
	xor	al, al
	jmp	SHORT $LN1@TabItemBut
$LN2@TabItemBut:
; Line 7781
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8280]
	mov	QWORD PTR tab_bar$[rbp], rax
; Line 7782
	cmp	QWORD PTR tab_bar$[rbp], 0
	jne	SHORT $LN3@TabItemBut
; Line 7784
	cmp	QWORD PTR tab_bar$[rbp], 0
	je	SHORT $LN5@TabItemBut
	lea	rax, OFFSET FLAT:??_C@_0DK@EHILAJFJ@Needs?5to?5be?5called?5between?5Begi@
	test	rax, rax
	jne	SHORT $LN6@TabItemBut
$LN5@TabItemBut:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TabItemButton@ImGui@@YA_NPEBDH@Z@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JM@OHPMLLD@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@TabItemBut:
; Line 7785
	xor	al, al
	jmp	SHORT $LN1@TabItemBut
$LN3@TabItemBut:
; Line 7787
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 21
	or	eax, 32					; 00000020H
	mov	r9d, eax
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z ; ImGui::TabItemEx
$LN1@TabItemBut:
; Line 7788
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TabItemButton@ImGui@@YA_NPEBDH@Z ENDP			; ImGui::TabItemButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndTabItem@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
tab_bar$ = 72
tab$ = 104
tv92 = 312
?EndTabItem@ImGui@@YAXXZ PROC				; ImGui::EndTabItem, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7756
$LN9:
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7757
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7758
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7759
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@EndTabItem
; Line 7760
	jmp	$LN1@EndTabItem
$LN2@EndTabItem:
; Line 7762
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8280]
	mov	QWORD PTR tab_bar$[rbp], rax
; Line 7763
	cmp	QWORD PTR tab_bar$[rbp], 0
	jne	SHORT $LN3@EndTabItem
; Line 7765
	cmp	QWORD PTR tab_bar$[rbp], 0
	je	SHORT $LN6@EndTabItem
	lea	rax, OFFSET FLAT:??_C@_0DK@EHILAJFJ@Needs?5to?5be?5called?5between?5Begi@
	test	rax, rax
	jne	SHORT $LN7@EndTabItem
$LN6@EndTabItem:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTabItem@ImGui@@YAXXZ@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JM@OHPMLLD@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@EndTabItem:
; Line 7766
	jmp	SHORT $LN1@EndTabItem
$LN3@EndTabItem:
; Line 7768
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+112]
	test	eax, eax
	jge	SHORT $LN8@EndTabItem
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTabItem@ImGui@@YAXXZ@4JA
	add	eax, 12
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@HGEILAOB@?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?9?$AA?$DO?$AAL?$AAa?$AAs?$AAt?$AAT?$AAa@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@EndTabItem:
; Line 7769
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv92[rbp], rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+112]
	mov	edx, eax
	mov	rcx, QWORD PTR tv92[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$[rbp], rax
; Line 7770
	mov	rax, QWORD PTR tab$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN4@EndTabItem
; Line 7771
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
$LN4@EndTabItem:
$LN1@EndTabItem:
; Line 7772
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?EndTabItem@ImGui@@YAXXZ ENDP				; ImGui::EndTabItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
tab_bar$ = 72
ret$ = 100
tab$1 = 136
tv132 = 344
label$ = 384
p_open$ = 392
flags$ = 400
?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z PROC		; ImGui::BeginTabItem, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7732
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7733
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7734
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7735
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginTabIt
; Line 7736
	xor	al, al
	jmp	$LN1@BeginTabIt
$LN2@BeginTabIt:
; Line 7738
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8280]
	mov	QWORD PTR tab_bar$[rbp], rax
; Line 7739
	cmp	QWORD PTR tab_bar$[rbp], 0
	jne	SHORT $LN3@BeginTabIt
; Line 7741
	cmp	QWORD PTR tab_bar$[rbp], 0
	je	SHORT $LN6@BeginTabIt
	lea	rax, OFFSET FLAT:??_C@_0DK@EHILAJFJ@Needs?5to?5be?5called?5between?5Begi@
	test	rax, rax
	jne	SHORT $LN7@BeginTabIt
$LN6@BeginTabIt:
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JC@EEMJDIKN@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@BeginTabIt:
; Line 7742
	xor	al, al
	jmp	$LN1@BeginTabIt
$LN3@BeginTabIt:
; Line 7744
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN8@BeginTabIt
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z@4JA
	add	eax, 12
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EI@NKMOAMGI@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@BeginTabIt:
; Line 7746
	mov	r9d, DWORD PTR flags$[rbp]
	mov	r8, QWORD PTR p_open$[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabItemEx@ImGui@@YA_NPEAUImGuiTabBar@@PEBDPEA_NH@Z ; ImGui::TabItemEx
	mov	BYTE PTR ret$[rbp], al
; Line 7747
	movzx	eax, BYTE PTR ret$[rbp]
	test	eax, eax
	je	SHORT $LN4@BeginTabIt
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN4@BeginTabIt
; Line 7749
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	QWORD PTR tv132[rbp], rax
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, WORD PTR [rax+112]
	mov	edx, eax
	mov	rcx, QWORD PTR tv132[rbp]
	call	??A?$ImVector@UImGuiTabItem@@@@QEAAAEAUImGuiTabItem@@H@Z ; ImVector<ImGuiTabItem>::operator[]
	mov	QWORD PTR tab$1[rbp], rax
; Line 7750
	mov	rax, QWORD PTR tab$1[rbp]
	mov	ecx, DWORD PTR [rax]
	call	?PushOverrideID@ImGui@@YAXI@Z		; ImGui::PushOverrideID
$LN4@BeginTabIt:
; Line 7752
	movzx	eax, BYTE PTR ret$[rbp]
$LN1@BeginTabIt:
; Line 7753
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?BeginTabItem@ImGui@@YA_NPEBDPEA_NH@Z ENDP		; ImGui::BeginTabItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndTabBar@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
tab_bar$ = 72
tab_bar_appearing$ = 100
tv85 = 308
tv176 = 312
?EndTabBar@ImGui@@YAXXZ PROC				; ImGui::EndTabBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7170
$LN17:
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7171
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7172
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7173
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@EndTabBar
; Line 7174
	jmp	$LN1@EndTabBar
$LN2@EndTabBar:
; Line 7176
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8280]
	mov	QWORD PTR tab_bar$[rbp], rax
; Line 7177
	cmp	QWORD PTR tab_bar$[rbp], 0
	jne	SHORT $LN3@EndTabBar
; Line 7179
	cmp	QWORD PTR tab_bar$[rbp], 0
	je	SHORT $LN11@EndTabBar
	lea	rax, OFFSET FLAT:??_C@_0CG@DPIPLNLI@Mismatched?5BeginTabBar?$CI?$CJ?1EndTab@
	test	rax, rax
	jne	SHORT $LN12@EndTabBar
$LN11@EndTabBar:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTabBar@ImGui@@YAXXZ@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HE@HMPOLDED@?$AA?$CI?$AAt?$AAa?$AAb?$AA_?$AAb?$AAa?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$CJ?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@EndTabBar:
; Line 7180
	jmp	$LN1@EndTabBar
$LN3@EndTabBar:
; Line 7184
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, BYTE PTR [rax+107]
	test	eax, eax
	je	SHORT $LN4@EndTabBar
; Line 7185
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?TabBarLayout@ImGui@@YAXPEAUImGuiTabBar@@@Z ; ImGui::TabBarLayout
$LN4@EndTabBar:
; Line 7188
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	rcx, QWORD PTR g$[rbp]
	cmp	eax, DWORD PTR [rcx+7056]
	jge	SHORT $LN13@EndTabBar
	mov	BYTE PTR tv85[rbp], 1
	jmp	SHORT $LN14@EndTabBar
$LN13@EndTabBar:
	mov	BYTE PTR tv85[rbp], 0
$LN14@EndTabBar:
	movzx	eax, BYTE PTR tv85[rbp]
	mov	BYTE PTR tab_bar_appearing$[rbp], al
; Line 7189
	mov	rax, QWORD PTR tab_bar$[rbp]
	movzx	eax, BYTE PTR [rax+108]
	test	eax, eax
	jne	SHORT $LN7@EndTabBar
	mov	rax, QWORD PTR tab_bar$[rbp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN7@EndTabBar
	movzx	eax, BYTE PTR tab_bar_appearing$[rbp]
	test	eax, eax
	je	SHORT $LN5@EndTabBar
$LN7@EndTabBar:
; Line 7191
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	subss	xmm0, DWORD PTR [rcx+56]
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR tab_bar$[rbp]
	movss	DWORD PTR [rax+60], xmm0
; Line 7192
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	addss	xmm0, DWORD PTR [rcx+60]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+220], xmm0
; Line 7193
	jmp	SHORT $LN6@EndTabBar
$LN5@EndTabBar:
; Line 7196
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	addss	xmm0, DWORD PTR [rcx+64]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+220], xmm0
$LN6@EndTabBar:
; Line 7198
	mov	rax, QWORD PTR tab_bar$[rbp]
	movsx	eax, BYTE PTR [rax+106]
	cmp	eax, 1
	jle	SHORT $LN8@EndTabBar
; Line 7199
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	rax, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
$LN8@EndTabBar:
; Line 7201
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN9@EndTabBar
; Line 7202
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
$LN9@EndTabBar:
; Line 7204
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8328				; 00002088H
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAXXZ ; ImVector<ImGuiPtrOrIndex>::pop_back
; Line 7205
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8328				; 00002088H
	mov	rcx, rax
	call	?empty@?$ImVector@UImGuiPtrOrIndex@@@@QEBA_NXZ ; ImVector<ImGuiPtrOrIndex>::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@EndTabBar
	mov	QWORD PTR tv176[rbp], 0
	jmp	SHORT $LN16@EndTabBar
$LN15@EndTabBar:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8328				; 00002088H
	mov	rcx, rax
	call	?back@?$ImVector@UImGuiPtrOrIndex@@@@QEAAAEAUImGuiPtrOrIndex@@XZ ; ImVector<ImGuiPtrOrIndex>::back
	mov	rcx, rax
	call	?GetTabBarFromTabBarRef@@YAPEAUImGuiTabBar@@AEBUImGuiPtrOrIndex@@@Z ; GetTabBarFromTabBarRef
	mov	QWORD PTR tv176[rbp], rax
$LN16@EndTabBar:
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR tv176[rbp]
	mov	QWORD PTR [rax+8280], rcx
$LN1@EndTabBar:
; Line 7206
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?EndTabBar@ImGui@@YAXXZ ENDP				; ImGui::EndTabBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginTabBar@ImGui@@YA_NPEBDH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
id$ = 68
tab_bar$ = 104
tab_bar_bb$ = 136
tv77 = 360
__$ArrayPad$ = 368
str_id$ = 416
flags$ = 424
?BeginTabBar@ImGui@@YA_NPEBDH@Z PROC			; ImGui::BeginTabBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7097
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7098
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 7099
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 7100
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginTabBa
; Line 7101
	xor	al, al
	jmp	$LN1@BeginTabBa
$LN2@BeginTabBa:
; Line 7103
	xor	r8d, r8d
	mov	rdx, QWORD PTR str_id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 7104
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8288				; 00002060H
	mov	QWORD PTR tv77[rbp], rax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv77[rbp]
	call	?GetOrAddByKey@?$ImPool@UImGuiTabBar@@@@QEAAPEAUImGuiTabBar@@I@Z ; ImPool<ImGuiTabBar>::GetOrAddByKey
	mov	QWORD PTR tab_bar$[rbp], rax
; Line 7105
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	addss	xmm0, DWORD PTR [rcx+6528]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm3, DWORD PTR [rax+568]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm2, DWORD PTR [rax+220]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	lea	rcx, QWORD PTR tab_bar_bb$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 7106
	mov	rax, QWORD PTR tab_bar$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+20], ecx
; Line 7107
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 21
	mov	r8d, eax
	lea	rdx, QWORD PTR tab_bar_bb$[rbp]
	mov	rcx, QWORD PTR tab_bar$[rbp]
	call	?BeginTabBarEx@ImGui@@YA_NPEAUImGuiTabBar@@AEBUImRect@@H@Z ; ImGui::BeginTabBarEx
$LN1@BeginTabBa:
; Line 7108
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BeginTabBar@ImGui@@YA_NPEBDH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?BeginTabBar@ImGui@@YA_NPEBDH@Z ENDP			; ImGui::BeginTabBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z
_TEXT	SEGMENT
tv78 = 192
tv72 = 192
tv67 = 193
label$ = 240
shortcut$ = 248
p_selected$ = 256
enabled$ = 264
?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z PROC		; ImGui::MenuItem, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 7003
$LN9:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 7004
	movzx	eax, BYTE PTR enabled$[rbp]
	mov	BYTE PTR tv72[rbp], al
	cmp	QWORD PTR p_selected$[rbp], 0
	je	SHORT $LN5@MenuItem
	mov	rax, QWORD PTR p_selected$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv67[rbp], al
	jmp	SHORT $LN6@MenuItem
$LN5@MenuItem:
	mov	BYTE PTR tv67[rbp], 0
$LN6@MenuItem:
	movzx	r9d, BYTE PTR tv72[rbp]
	movzx	r8d, BYTE PTR tv67[rbp]
	mov	rdx, QWORD PTR shortcut$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?MenuItem@ImGui@@YA_NPEBD0_N1@Z		; ImGui::MenuItem
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@MenuItem
; Line 7006
	cmp	QWORD PTR p_selected$[rbp], 0
	je	SHORT $LN3@MenuItem
; Line 7007
	mov	rax, QWORD PTR p_selected$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN7@MenuItem
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN8@MenuItem
$LN7@MenuItem:
	mov	DWORD PTR tv78[rbp], 0
$LN8@MenuItem:
	mov	rax, QWORD PTR p_selected$[rbp]
	movzx	ecx, BYTE PTR tv78[rbp]
	mov	BYTE PTR [rax], cl
$LN3@MenuItem:
; Line 7008
	mov	al, 1
	jmp	SHORT $LN1@MenuItem
$LN2@MenuItem:
; Line 7010
	xor	al, al
$LN1@MenuItem:
; Line 7011
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?MenuItem@ImGui@@YA_NPEBD0PEA_N_N@Z ENDP		; ImGui::MenuItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?MenuItem@ImGui@@YA_NPEBD0_N1@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
pos$ = 104
label_size$ = 136
flags$ = 164
pressed$ = 196
w$5 = 228
shortcut_w$6 = 260
min_w$7 = 292
extra_w$8 = 324
$T9 = 740
$T10 = 772
$T11 = 804
$T12 = 836
$T13 = 868
$T14 = 900
$T15 = 932
$T16 = 964
$T17 = 996
$T18 = 1032
$T19 = 1064
$T20 = 1096
tv273 = 1108
tv171 = 1108
tv79 = 1108
tv239 = 1112
tv186 = 1112
tv269 = 1116
tv266 = 1120
__$ArrayPad$ = 1128
label$ = 1168
shortcut$ = 1176
selected$ = 1184
enabled$ = 1192
?MenuItem@ImGui@@YA_NPEBD0_N1@Z PROC			; ImGui::MenuItem, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6954
$LN14:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1192				; 000004a8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1224]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6955
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6956
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@MenuItem
; Line 6957
	xor	al, al
	jmp	$LN1@MenuItem
$LN2@MenuItem:
; Line 6959
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6960
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 6961
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 6962
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 6966
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	je	SHORT $LN8@MenuItem
	mov	DWORD PTR tv79[rbp], 0
	jmp	SHORT $LN9@MenuItem
$LN8@MenuItem:
	mov	DWORD PTR tv79[rbp], 8
$LN9@MenuItem:
	mov	eax, DWORD PTR tv79[rbp]
	or	eax, 75497472				; 04800000H
	mov	DWORD PTR flags$[rbp], eax
; Line 6968
	mov	rax, QWORD PTR window$[rbp]
	cmp	DWORD PTR [rax+436], 0
	jne	$LN3@MenuItem
; Line 6972
	movss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR w$5[rbp], xmm0
; Line 6973
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 6974
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm2, DWORD PTR [rax+76]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	ecx, 13
	call	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z	; ImGui::PushStyleVar
; Line 6975
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR w$5[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, rax
	mov	r8d, DWORD PTR flags$[rbp]
	movzx	edx, BYTE PTR selected$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	mov	BYTE PTR pressed$[rbp], al
; Line 6976
	mov	ecx, 1
	call	?PopStyleVar@ImGui@@YAXH@Z		; ImGui::PopStyleVar
; Line 6977
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	mulss	xmm0, DWORD PTR __real@bf000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 6978
	jmp	$LN4@MenuItem
$LN3@MenuItem:
; Line 6984
	cmp	QWORD PTR shortcut$[rbp], 0
	je	SHORT $LN10@MenuItem
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR shortcut$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv171[rbp], xmm0
	jmp	SHORT $LN11@MenuItem
$LN10@MenuItem:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv171[rbp], xmm0
$LN11@MenuItem:
	movss	xmm0, DWORD PTR tv171[rbp]
	movss	DWORD PTR shortcut_w$6[rbp], xmm0
; Line 6985
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 356				; 00000164H
	mov	QWORD PTR tv186[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f99999a
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR shortcut_w$6[rbp]
	movss	xmm1, DWORD PTR label_size$[rbp]
	mov	rcx, QWORD PTR tv186[rbp]
	call	?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z ; ImGuiMenuColumns::DeclColumns
	movss	DWORD PTR min_w$7[rbp], xmm0
; Line 6986
	lea	rcx, QWORD PTR $T12[rbp]
	call	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR min_w$7[rbp]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR extra_w$8[rbp], xmm0
; Line 6987
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR min_w$7[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	ecx, DWORD PTR flags$[rbp]
	bts	ecx, 24
	mov	r9, rax
	mov	r8d, ecx
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	mov	BYTE PTR pressed$[rbp], al
; Line 6988
	movss	xmm0, DWORD PTR shortcut_w$6[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@MenuItem
; Line 6990
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+5668]
	mov	rdx, rax
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 6991
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+368]
	addss	xmm0, DWORD PTR extra_w$8[rbp]
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR shortcut$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
; Line 6992
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
$LN5@MenuItem:
; Line 6994
	movzx	eax, BYTE PTR selected$[rbp]
	test	eax, eax
	je	$LN6@MenuItem
; Line 6995
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f5db22d
	movss	DWORD PTR tv273[rbp], xmm0
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	je	SHORT $LN12@MenuItem
	mov	DWORD PTR tv239[rbp], 0
	jmp	SHORT $LN13@MenuItem
$LN12@MenuItem:
	mov	DWORD PTR tv239[rbp], 1
$LN13@MenuItem:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv239[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv269[rbp], eax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3e09374c
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax+368]
	addss	xmm1, DWORD PTR extra_w$8[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	mulss	xmm2, DWORD PTR __real@3ecccccd
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T18[rbp], rax
	mov	rax, QWORD PTR $T18[rbp]
	mov	QWORD PTR $T19[rbp], rax
	mov	rax, QWORD PTR $T19[rbp]
	mov	QWORD PTR $T20[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv266[rbp], rax
	movss	xmm3, DWORD PTR tv273[rbp]
	mov	r8d, DWORD PTR tv269[rbp]
	mov	rdx, QWORD PTR $T20[rbp]
	mov	rcx, QWORD PTR tv266[rbp]
	call	?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z ; ImGui::RenderCheckMark
$LN6@MenuItem:
$LN4@MenuItem:
; Line 6999
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@MenuItem:
; Line 7000
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?MenuItem@ImGui@@YA_NPEBD0_N1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1144]
	pop	rdi
	pop	rbp
	ret	0
?MenuItem@ImGui@@YA_NPEBD0_N1@Z ENDP			; ImGui::MenuItem
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndMenu@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
?EndMenu@ImGui@@YAXXZ PROC				; ImGui::EndMenu, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6938
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6942
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6943
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 6944
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+7624], 0
	je	SHORT $LN2@EndMenu
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7624]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+896], rcx
	jne	SHORT $LN2@EndMenu
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 0
	jne	SHORT $LN2@EndMenu
	call	?NavMoveRequestButNoResultYet@ImGui@@YA_NXZ ; ImGui::NavMoveRequestButNoResultYet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@EndMenu
	mov	rax, QWORD PTR window$[rbp]
	cmp	DWORD PTR [rax+436], 1
	jne	SHORT $LN2@EndMenu
; Line 6946
	mov	dl, 1
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rax+7592]
	call	?ClosePopupToLevel@ImGui@@YAXH_N@Z	; ImGui::ClosePopupToLevel
; Line 6947
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN2@EndMenu:
; Line 6950
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
; Line 6951
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?EndMenu@ImGui@@YAXXZ ENDP				; ImGui::EndMenu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginMenu@ImGui@@YA_NPEBD_N@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
menu_is_open$ = 132
flags$ = 164
label_size$ = 200
pressed$ = 228
menuset_is_open$ = 260
backed_nav_window$ = 296
popup_pos$ = 328
pos$ = 360
w$11 = 388
min_w$12 = 420
extra_w$13 = 452
text_col$14 = 484
hovered$ = 516
want_open$ = 548
want_close$ = 580
moving_toward_other_child_menu$15 = 612
child_menu_window$16 = 648
next_window_rect$17 = 680
ta$18 = 728
tb$19 = 760
tc$20 = 792
extra$21 = 820
$T22 = 1428
$T23 = 1460
$T24 = 1492
$T25 = 1524
$T26 = 1556
$T27 = 1588
$T28 = 1620
$T29 = 1652
$T30 = 1688
$T31 = 1720
$T32 = 1748
$T33 = 1780
$T34 = 1816
$T35 = 1844
$T36 = 1876
$T37 = 1908
tv500 = 1924
tv451 = 1924
tv333 = 1924
tv296 = 1924
tv175 = 1924
tv436 = 1928
tv423 = 1928
tv384 = 1928
tv322 = 1928
tv291 = 1928
tv269 = 1928
tv232 = 1928
tv192 = 1928
tv152 = 1928
tv131 = 1928
tv85 = 1928
tv190 = 1932
tv394 = 1936
tv285 = 1936
tv226 = 1936
tv147 = 1936
tv396 = 1944
tv158 = 1944
__$ArrayPad$ = 1952
label$ = 2000
enabled$ = 2008
?BeginMenu@ImGui@@YA_NPEBD_N@Z PROC			; ImGui::BeginMenu, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6774
$LN53:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 2024				; 000007e8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 350				; 0000015eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2056]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6775
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6776
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginMenu
; Line 6777
	xor	al, al
	jmp	$LN1@BeginMenu
$LN2@BeginMenu:
; Line 6779
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6780
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 6781
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 6782
	xor	edx, edx
	mov	ecx, DWORD PTR id$[rbp]
	call	?IsPopupOpen@ImGui@@YA_NIH@Z		; ImGui::IsPopupOpen
	mov	BYTE PTR menu_is_open$[rbp], al
; Line 6785
	mov	DWORD PTR flags$[rbp], 268960069	; 10080145H
; Line 6786
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 335544320				; 14000000H
	test	eax, eax
	je	SHORT $LN3@BeginMenu
; Line 6787
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 24
	mov	DWORD PTR flags$[rbp], eax
$LN3@BeginMenu:
; Line 6792
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12352				; 00003040H
	mov	QWORD PTR tv85[rbp], rax
	lea	rdx, QWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv85[rbp]
	call	?contains@?$ImVector@I@@QEBA_NAEBI@Z	; ImVector<unsigned int>::contains
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@BeginMenu
; Line 6794
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN5@BeginMenu
; Line 6795
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?BeginPopupEx@ImGui@@YA_NIH@Z		; ImGui::BeginPopupEx
	mov	BYTE PTR menu_is_open$[rbp], al
	jmp	SHORT $LN6@BeginMenu
$LN5@BeginMenu:
; Line 6797
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7344				; 00001cb0H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextWindowData@@QEAAXXZ ; ImGuiNextWindowData::ClearFlags
$LN6@BeginMenu:
; Line 6798
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	jmp	$LN1@BeginMenu
$LN4@BeginMenu:
; Line 6802
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12352				; 00003040H
	mov	QWORD PTR tv131[rbp], rax
	lea	rdx, QWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv131[rbp]
	call	?push_back@?$ImVector@I@@QEAAXAEBI@Z	; ImVector<unsigned int>::push_back
; Line 6804
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 6806
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	jne	SHORT $LN33@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7592]
	cmp	DWORD PTR [rax+7576], ecx
	jle	SHORT $LN33@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7576				; 00001d98H
	mov	QWORD PTR tv152[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	edx, DWORD PTR [rax+7592]
	mov	rcx, QWORD PTR tv152[rbp]
	call	??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z ; ImVector<ImGuiPopupData>::operator[]
	mov	QWORD PTR tv147[rbp], rax
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 200				; 000000c8H
	call	?back@?$ImVector@I@@QEAAAEAIXZ		; ImVector<unsigned int>::back
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv147[rbp]
	cmp	DWORD PTR [rcx+28], eax
	jne	SHORT $LN33@BeginMenu
	mov	DWORD PTR tv158[rbp], 1
	jmp	SHORT $LN34@BeginMenu
$LN33@BeginMenu:
	mov	DWORD PTR tv158[rbp], 0
$LN34@BeginMenu:
	movzx	eax, BYTE PTR tv158[rbp]
	mov	BYTE PTR menuset_is_open$[rbp], al
; Line 6807
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7624]
	mov	QWORD PTR backed_nav_window$[rbp], rax
; Line 6808
	movzx	eax, BYTE PTR menuset_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN7@BeginMenu
; Line 6809
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rax+7624], rcx
$LN7@BeginMenu:
; Line 6814
	lea	rcx, QWORD PTR popup_pos$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 6815
	mov	rax, QWORD PTR window$[rbp]
	cmp	DWORD PTR [rax+436], 0
	jne	$LN8@BeginMenu
; Line 6820
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR pos$[rbp+4]
	subss	xmm0, DWORD PTR [rax+60]
	movss	DWORD PTR tv175[rbp], xmm0
	mov	rcx, QWORD PTR window$[rbp]
	call	?MenuBarHeight@ImGuiWindow@@QEBAMXZ	; ImGuiWindow::MenuBarHeight
	movss	xmm1, DWORD PTR tv175[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv192[rbp], xmm0
	movss	xmm0, DWORD PTR pos$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	mulss	xmm1, DWORD PTR __real@3f000000
	cvttss2si eax, xmm1
	cvtsi2ss xmm1, eax
	subss	xmm0, xmm1
	movss	DWORD PTR tv190[rbp], xmm0
	movss	xmm2, DWORD PTR tv192[rbp]
	movss	xmm1, DWORD PTR tv190[rbp]
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR popup_pos$[rbp], rax
; Line 6821
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 6822
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm2, DWORD PTR [rax+76]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	ecx, 13
	call	?PushStyleVar@ImGui@@YAXHAEBUImVec2@@@Z	; ImGui::PushStyleVar
; Line 6823
	movss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR w$11[rbp], xmm0
; Line 6824
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR w$11[rbp]
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv232[rbp], rax
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	jne	SHORT $LN35@BeginMenu
	mov	DWORD PTR tv226[rbp], 8
	jmp	SHORT $LN36@BeginMenu
$LN35@BeginMenu:
	mov	DWORD PTR tv226[rbp], 0
$LN36@BeginMenu:
	mov	eax, DWORD PTR tv226[rbp]
	or	eax, 5242881				; 00500001H
	mov	r9, QWORD PTR tv232[rbp]
	mov	r8d, eax
	movzx	edx, BYTE PTR menu_is_open$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	mov	BYTE PTR pressed$[rbp], al
; Line 6825
	mov	ecx, 1
	call	?PopStyleVar@ImGui@@YAXH@Z		; ImGui::PopStyleVar
; Line 6826
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	mulss	xmm0, DWORD PTR __real@bf000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+216]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 6827
	jmp	$LN9@BeginMenu
$LN8@BeginMenu:
; Line 6833
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR pos$[rbp+4]
	subss	xmm0, DWORD PTR [rax+8]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T25[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR popup_pos$[rbp], rax
; Line 6834
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 356				; 00000164H
	mov	QWORD PTR tv269[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f99999a
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm3, xmm0
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR label_size$[rbp]
	mov	rcx, QWORD PTR tv269[rbp]
	call	?DeclColumns@ImGuiMenuColumns@@QEAAMMMM@Z ; ImGuiMenuColumns::DeclColumns
	movss	DWORD PTR min_w$12[rbp], xmm0
; Line 6835
	lea	rcx, QWORD PTR $T26[rbp]
	call	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR min_w$12[rbp]
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR extra_w$13[rbp], xmm0
; Line 6836
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR min_w$12[rbp]
	lea	rcx, QWORD PTR $T27[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv291[rbp], rax
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	jne	SHORT $LN37@BeginMenu
	mov	DWORD PTR tv285[rbp], 8
	jmp	SHORT $LN38@BeginMenu
$LN37@BeginMenu:
	mov	DWORD PTR tv285[rbp], 0
$LN38@BeginMenu:
	mov	eax, DWORD PTR tv285[rbp]
	or	eax, 22020097				; 01500001H
	mov	r9, QWORD PTR tv291[rbp]
	mov	r8d, eax
	movzx	edx, BYTE PTR menu_is_open$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	mov	BYTE PTR pressed$[rbp], al
; Line 6837
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	je	SHORT $LN39@BeginMenu
	mov	DWORD PTR tv296[rbp], 0
	jmp	SHORT $LN40@BeginMenu
$LN39@BeginMenu:
	mov	DWORD PTR tv296[rbp], 1
$LN40@BeginMenu:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv296[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$14[rbp], eax
; Line 6838
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax+368]
	addss	xmm0, DWORD PTR extra_w$13[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	mulss	xmm1, DWORD PTR __real@3e99999a
	addss	xmm0, xmm1
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T28[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T29[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T30[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv322[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 1
	mov	r8d, DWORD PTR text_col$14[rbp]
	mov	rdx, QWORD PTR $T30[rbp]
	mov	rcx, QWORD PTR tv322[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
$LN9@BeginMenu:
; Line 6841
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	je	SHORT $LN41@BeginMenu
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 300				; 0000012cH
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, rax
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@BeginMenu
	mov	BYTE PTR tv333[rbp], 1
	jmp	SHORT $LN42@BeginMenu
$LN41@BeginMenu:
	mov	BYTE PTR tv333[rbp], 0
$LN42@BeginMenu:
	movzx	eax, BYTE PTR tv333[rbp]
	mov	BYTE PTR hovered$[rbp], al
; Line 6842
	movzx	eax, BYTE PTR menuset_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN10@BeginMenu
; Line 6843
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR backed_nav_window$[rbp]
	mov	QWORD PTR [rax+7624], rcx
$LN10@BeginMenu:
; Line 6845
	mov	BYTE PTR want_open$[rbp], 0
; Line 6846
	mov	BYTE PTR want_close$[rbp], 0
; Line 6847
	mov	rax, QWORD PTR window$[rbp]
	cmp	DWORD PTR [rax+436], 1
	jne	$LN11@BeginMenu
; Line 6851
	mov	BYTE PTR moving_toward_other_child_menu$15[rbp], 0
; Line 6853
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7576]
	cmp	DWORD PTR [rax+7592], ecx
	jge	SHORT $LN43@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7576				; 00001d98H
	mov	QWORD PTR tv384[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	edx, DWORD PTR [rax+7592]
	mov	rcx, QWORD PTR tv384[rbp]
	call	??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z ; ImVector<ImGuiPopupData>::operator[]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+16], rcx
	jne	SHORT $LN43@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7576				; 00001d98H
	mov	QWORD PTR tv394[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	edx, DWORD PTR [rax+7592]
	mov	rcx, QWORD PTR tv394[rbp]
	call	??A?$ImVector@UImGuiPopupData@@@@QEAAAEAUImGuiPopupData@@H@Z ; ImVector<ImGuiPopupData>::operator[]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv396[rbp], rax
	jmp	SHORT $LN44@BeginMenu
$LN43@BeginMenu:
	mov	QWORD PTR tv396[rbp], 0
$LN44@BeginMenu:
	mov	rax, QWORD PTR tv396[rbp]
	mov	QWORD PTR child_menu_window$16[rbp], rax
; Line 6854
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+7192], rcx
	jne	$LN13@BeginMenu
	cmp	QWORD PTR child_menu_window$16[rbp], 0
	je	$LN13@BeginMenu
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	$LN13@BeginMenu
; Line 6857
	lea	rdx, QWORD PTR next_window_rect$17[rbp]
	mov	rcx, QWORD PTR child_menu_window$16[rbp]
	call	?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ	; ImGuiWindow::Rect
; Line 6858
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 952				; 000003b8H
	mov	rcx, QWORD PTR g$[rbp]
	add	rcx, 296				; 00000128H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR ta$18[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 6859
	mov	rax, QWORD PTR child_menu_window$16[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	comiss	xmm0, DWORD PTR [rcx+16]
	jbe	SHORT $LN45@BeginMenu
	lea	rdx, QWORD PTR $T32[rbp]
	lea	rcx, QWORD PTR next_window_rect$17[rbp]
	call	?GetTL@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetTL
	mov	QWORD PTR tv423[rbp], rax
	jmp	SHORT $LN46@BeginMenu
$LN45@BeginMenu:
	lea	rdx, QWORD PTR $T33[rbp]
	lea	rcx, QWORD PTR next_window_rect$17[rbp]
	call	?GetTR@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetTR
	mov	QWORD PTR tv423[rbp], rax
$LN46@BeginMenu:
	mov	rax, QWORD PTR tv423[rbp]
	mov	QWORD PTR $T31[rbp], rax
	mov	rax, QWORD PTR $T31[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tb$19[rbp], rax
; Line 6860
	mov	rax, QWORD PTR child_menu_window$16[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	comiss	xmm0, DWORD PTR [rcx+16]
	jbe	SHORT $LN47@BeginMenu
	lea	rdx, QWORD PTR $T35[rbp]
	lea	rcx, QWORD PTR next_window_rect$17[rbp]
	call	?GetBL@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetBL
	mov	QWORD PTR tv436[rbp], rax
	jmp	SHORT $LN48@BeginMenu
$LN47@BeginMenu:
	lea	rdx, QWORD PTR $T36[rbp]
	lea	rcx, QWORD PTR next_window_rect$17[rbp]
	call	?GetBR@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetBR
	mov	QWORD PTR tv436[rbp], rax
$LN48@BeginMenu:
	mov	rax, QWORD PTR tv436[rbp]
	mov	QWORD PTR $T34[rbp], rax
	mov	rax, QWORD PTR $T34[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tc$20[rbp], rax
; Line 6861
	movss	xmm0, DWORD PTR ta$18[rbp]
	subss	xmm0, DWORD PTR tb$19[rbp]
	call	fabsf
	mulss	xmm0, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@41f00000
	movss	xmm1, DWORD PTR __real@40a00000
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR extra$21[rbp], xmm0
; Line 6862
	mov	rax, QWORD PTR child_menu_window$16[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	comiss	xmm0, DWORD PTR [rcx+16]
	jbe	SHORT $LN49@BeginMenu
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv451[rbp], xmm0
	jmp	SHORT $LN50@BeginMenu
$LN49@BeginMenu:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv451[rbp], xmm0
$LN50@BeginMenu:
	movss	xmm0, DWORD PTR ta$18[rbp]
	addss	xmm0, DWORD PTR tv451[rbp]
	movss	DWORD PTR ta$18[rbp], xmm0
; Line 6863
	movss	xmm0, DWORD PTR tb$19[rbp+4]
	subss	xmm0, DWORD PTR extra$21[rbp]
	subss	xmm0, DWORD PTR ta$18[rbp+4]
	movss	xmm1, DWORD PTR __real@c2c80000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR ta$18[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tb$19[rbp+4], xmm0
; Line 6864
	movss	xmm0, DWORD PTR tc$20[rbp+4]
	addss	xmm0, DWORD PTR extra$21[rbp]
	subss	xmm0, DWORD PTR ta$18[rbp+4]
	movss	xmm1, DWORD PTR __real@42c80000
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	xmm1, DWORD PTR ta$18[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tc$20[rbp+4], xmm0
; Line 6865
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	mov	r9, rax
	lea	r8, QWORD PTR tc$20[rbp]
	lea	rdx, QWORD PTR tb$19[rbp]
	lea	rcx, QWORD PTR ta$18[rbp]
	call	?ImTriangleContainsPoint@@YA_NAEBUImVec2@@000@Z ; ImTriangleContainsPoint
	mov	BYTE PTR moving_toward_other_child_menu$15[rbp], al
$LN13@BeginMenu:
; Line 6868
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN14@BeginMenu
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN14@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+7192], rcx
	jne	SHORT $LN14@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7244], 0
	je	SHORT $LN14@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7244], ecx
	je	SHORT $LN14@BeginMenu
	movzx	eax, BYTE PTR moving_toward_other_child_menu$15[rbp]
	test	eax, eax
	jne	SHORT $LN14@BeginMenu
; Line 6869
	mov	BYTE PTR want_close$[rbp], 1
$LN14@BeginMenu:
; Line 6871
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN15@BeginMenu
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN15@BeginMenu
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN15@BeginMenu
; Line 6872
	mov	BYTE PTR want_open$[rbp], 1
	jmp	SHORT $LN16@BeginMenu
$LN15@BeginMenu:
; Line 6873
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN17@BeginMenu
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN17@BeginMenu
	movzx	eax, BYTE PTR moving_toward_other_child_menu$15[rbp]
	test	eax, eax
	jne	SHORT $LN17@BeginMenu
; Line 6874
	mov	BYTE PTR want_open$[rbp], 1
$LN17@BeginMenu:
$LN16@BeginMenu:
; Line 6876
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	jne	SHORT $LN18@BeginMenu
; Line 6878
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	mov	BYTE PTR want_close$[rbp], al
; Line 6879
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN51@BeginMenu
	mov	DWORD PTR tv500[rbp], 1
	jmp	SHORT $LN52@BeginMenu
$LN51@BeginMenu:
	mov	DWORD PTR tv500[rbp], 0
$LN52@BeginMenu:
	movzx	eax, BYTE PTR tv500[rbp]
	mov	BYTE PTR want_open$[rbp], al
$LN18@BeginMenu:
; Line 6881
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7632], ecx
	jne	SHORT $LN19@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7736]
	test	eax, eax
	je	SHORT $LN19@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 1
	jne	SHORT $LN19@BeginMenu
; Line 6883
	mov	BYTE PTR want_open$[rbp], 1
; Line 6884
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN19@BeginMenu:
; Line 6886
	jmp	$LN12@BeginMenu
$LN11@BeginMenu:
; Line 6890
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN20@BeginMenu
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN20@BeginMenu
	movzx	eax, BYTE PTR menuset_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN20@BeginMenu
; Line 6892
	mov	BYTE PTR want_close$[rbp], 1
; Line 6893
	mov	BYTE PTR menu_is_open$[rbp], 0
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	mov	BYTE PTR want_open$[rbp], al
; Line 6894
	jmp	SHORT $LN21@BeginMenu
$LN20@BeginMenu:
; Line 6895
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	jne	SHORT $LN24@BeginMenu
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN22@BeginMenu
	movzx	eax, BYTE PTR menuset_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN22@BeginMenu
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN22@BeginMenu
$LN24@BeginMenu:
; Line 6897
	mov	BYTE PTR want_open$[rbp], 1
; Line 6898
	jmp	SHORT $LN23@BeginMenu
$LN22@BeginMenu:
; Line 6899
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7632], ecx
	jne	SHORT $LN25@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7736]
	test	eax, eax
	je	SHORT $LN25@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 3
	jne	SHORT $LN25@BeginMenu
; Line 6901
	mov	BYTE PTR want_open$[rbp], 1
; Line 6902
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN25@BeginMenu:
$LN23@BeginMenu:
$LN21@BeginMenu:
$LN12@BeginMenu:
; Line 6906
	movzx	eax, BYTE PTR enabled$[rbp]
	test	eax, eax
	jne	SHORT $LN26@BeginMenu
; Line 6907
	mov	BYTE PTR want_close$[rbp], 1
$LN26@BeginMenu:
; Line 6908
	movzx	eax, BYTE PTR want_close$[rbp]
	test	eax, eax
	je	SHORT $LN27@BeginMenu
	xor	edx, edx
	mov	ecx, DWORD PTR id$[rbp]
	call	?IsPopupOpen@ImGui@@YA_NIH@Z		; ImGui::IsPopupOpen
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@BeginMenu
; Line 6909
	mov	dl, 1
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rax+7592]
	call	?ClosePopupToLevel@ImGui@@YAXH_N@Z	; ImGui::ClosePopupToLevel
$LN27@BeginMenu:
; Line 6913
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	jne	SHORT $LN28@BeginMenu
	movzx	eax, BYTE PTR want_open$[rbp]
	test	eax, eax
	je	SHORT $LN28@BeginMenu
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7592]
	cmp	DWORD PTR [rax+7576], ecx
	jle	SHORT $LN28@BeginMenu
; Line 6916
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?OpenPopup@ImGui@@YAXPEBDH@Z		; ImGui::OpenPopup
; Line 6917
	xor	al, al
	jmp	$LN1@BeginMenu
$LN28@BeginMenu:
; Line 6920
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	movzx	ecx, BYTE PTR want_open$[rbp]
	or	eax, ecx
	mov	BYTE PTR menu_is_open$[rbp], al
; Line 6921
	movzx	eax, BYTE PTR want_open$[rbp]
	test	eax, eax
	je	SHORT $LN29@BeginMenu
; Line 6922
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?OpenPopup@ImGui@@YAXPEBDH@Z		; ImGui::OpenPopup
$LN29@BeginMenu:
; Line 6924
	movzx	eax, BYTE PTR menu_is_open$[rbp]
	test	eax, eax
	je	SHORT $LN30@BeginMenu
; Line 6926
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T37[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	edx, 1
	lea	rcx, QWORD PTR popup_pos$[rbp]
	call	?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos
; Line 6927
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?BeginPopupEx@ImGui@@YA_NIH@Z		; ImGui::BeginPopupEx
	mov	BYTE PTR menu_is_open$[rbp], al
; Line 6928
	jmp	SHORT $LN31@BeginMenu
$LN30@BeginMenu:
; Line 6931
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7344				; 00001cb0H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextWindowData@@QEAAXXZ ; ImGuiNextWindowData::ClearFlags
$LN31@BeginMenu:
; Line 6934
	movzx	eax, BYTE PTR menu_is_open$[rbp]
$LN1@BeginMenu:
; Line 6935
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BeginMenu@ImGui@@YA_NPEBD_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1976]
	pop	rdi
	pop	rbp
	ret	0
?BeginMenu@ImGui@@YA_NPEBD_N@Z ENDP			; ImGui::BeginMenu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndMainMenuBar@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
?EndMainMenuBar@ImGui@@YAXXZ PROC			; ImGui::EndMainMenuBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6761
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6762
	call	?EndMenuBar@ImGui@@YAXXZ		; ImGui::EndMenuBar
; Line 6766
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6767
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR [rcx+7624]
	cmp	QWORD PTR [rax+7184], rcx
	jne	SHORT $LN2@EndMainMen
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7700], 0
	jne	SHORT $LN2@EndMainMen
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7712]
	test	eax, eax
	jne	SHORT $LN2@EndMainMen
; Line 6768
	xor	edx, edx
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR [rax+7624]
	call	?FocusTopMostWindowUnderOne@ImGui@@YAXPEAUImGuiWindow@@0@Z ; ImGui::FocusTopMostWindowUnderOne
$LN2@EndMainMen:
; Line 6770
	call	?End@ImGui@@YAXXZ			; ImGui::End
; Line 6771
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?EndMainMenuBar@ImGui@@YAXXZ ENDP			; ImGui::EndMainMenuBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginMainMenuBar@ImGui@@YA_NXZ
_TEXT	SEGMENT
g$ = 8
viewport$ = 40
window_flags$ = 68
height$ = 100
is_open$ = 132
$T1 = 356
$T2 = 388
tv87 = 404
tv85 = 408
?BeginMainMenuBar@ImGui@@YA_NXZ PROC			; ImGui::BeginMainMenuBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6740
$LN5:
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6741
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6742
	call	?GetMainViewport@ImGui@@YAPEAUImGuiViewport@@XZ ; ImGui::GetMainViewport
	mov	QWORD PTR viewport$[rbp], rax
; Line 6747
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5648]
	subss	xmm0, DWORD PTR [rcx+5532]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv87[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5644]
	movss	DWORD PTR tv85[rbp], xmm0
	movss	xmm2, DWORD PTR tv87[rbp]
	movss	xmm1, DWORD PTR tv85[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+7444], rax
; Line 6748
	mov	DWORD PTR window_flags$[rbp], 1288	; 00000508H
; Line 6749
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR height$[rbp], xmm0
; Line 6750
	mov	eax, DWORD PTR window_flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR height$[rbp]
	mov	r8d, 2
	mov	rdx, QWORD PTR viewport$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0O@BKOLOJFE@?$CD?$CDMainMenuBar@
	call	?BeginViewportSideBar@ImGui@@YA_NPEBDPEAUImGuiViewport@@HMH@Z ; ImGui::BeginViewportSideBar
	mov	BYTE PTR is_open$[rbp], al
; Line 6751
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR g$[rbp]
	mov	QWORD PTR [rcx+7444], rax
; Line 6753
	movzx	eax, BYTE PTR is_open$[rbp]
	test	eax, eax
	je	SHORT $LN2@BeginMainM
; Line 6754
	call	?BeginMenuBar@ImGui@@YA_NXZ		; ImGui::BeginMenuBar
	jmp	SHORT $LN3@BeginMainM
$LN2@BeginMainM:
; Line 6756
	call	?End@ImGui@@YAXXZ			; ImGui::End
$LN3@BeginMainM:
; Line 6757
	movzx	eax, BYTE PTR is_open$[rbp]
; Line 6758
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?BeginMainMenuBar@ImGui@@YA_NXZ ENDP			; ImGui::BeginMainMenuBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndMenuBar@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
g$ = 40
nav_earliest_child$1 = 72
layer$2 = 100
?EndMenuBar@ImGui@@YAXXZ PROC				; ImGui::EndMenuBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6661
$LN12:
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6662
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6663
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN4@EndMenuBar
; Line 6664
	jmp	$LN1@EndMenuBar
$LN4@EndMenuBar:
; Line 6665
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6668
	call	?NavMoveRequestButNoResultYet@ImGui@@YA_NXZ ; ImGui::NavMoveRequestButNoResultYet
	movzx	eax, al
	test	eax, eax
	je	$LN5@EndMenuBar
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 0
	je	SHORT $LN6@EndMenuBar
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 1
	jne	$LN5@EndMenuBar
$LN6@EndMenuBar:
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7624]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	$LN5@EndMenuBar
; Line 6670
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7624]
	mov	QWORD PTR nav_earliest_child$1[rbp], rax
$LN2@EndMenuBar:
; Line 6671
	mov	rax, QWORD PTR nav_earliest_child$1[rbp]
	cmp	QWORD PTR [rax+896], 0
	je	SHORT $LN3@EndMenuBar
	mov	rax, QWORD PTR nav_earliest_child$1[rbp]
	mov	rax, QWORD PTR [rax+896]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	SHORT $LN3@EndMenuBar
; Line 6672
	mov	rax, QWORD PTR nav_earliest_child$1[rbp]
	mov	rax, QWORD PTR [rax+896]
	mov	QWORD PTR nav_earliest_child$1[rbp], rax
	jmp	SHORT $LN2@EndMenuBar
$LN3@EndMenuBar:
; Line 6673
	mov	rax, QWORD PTR nav_earliest_child$1[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+896], rcx
	jne	$LN7@EndMenuBar
	mov	rax, QWORD PTR nav_earliest_child$1[rbp]
	cmp	DWORD PTR [rax+440], 0
	jne	$LN7@EndMenuBar
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7744], 0
	jne	$LN7@EndMenuBar
; Line 6677
	mov	DWORD PTR layer$2[rbp], 1
; Line 6678
	mov	rax, QWORD PTR window$[rbp]
	movsx	eax, WORD PTR [rax+338]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN9@EndMenuBar
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndMenuBar@ImGui@@YAXXZ@4JA
	add	eax, 17
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GE@MKPILOEH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAN?$AAa?$AAv?$AAL@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@EndMenuBar:
; Line 6679
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
; Line 6680
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR window$[rbp]
	lea	rax, QWORD PTR [rcx+rax+944]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	r9, rax
	xor	r8d, r8d
	mov	edx, 1
	mov	rax, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rax+rcx+936]
	call	?SetNavID@ImGui@@YAXIW4ImGuiNavLayer@@IAEBUImRect@@@Z ; ImGui::SetNavID
; Line 6681
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7710], 1
; Line 6682
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7709], 1
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7711], 1
; Line 6683
	mov	rax, QWORD PTR g$[rbp]
	mov	DWORD PTR [rax+7744], 1
; Line 6684
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN7@EndMenuBar:
$LN5@EndMenuBar:
; Line 6689
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN10@EndMenuBar
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndMenuBar@ImGui@@YAXXZ@4JA
	add	eax, 28
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@MMAFNJJP@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@EndMenuBar:
; Line 6690
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+346]
	test	eax, eax
	jne	SHORT $LN11@EndMenuBar
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndMenuBar@ImGui@@YAXXZ@4JA
	add	eax, 29
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@HJHPMKIH@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@EndMenuBar:
; Line 6691
	call	?PopClipRect@ImGui@@YAXXZ		; ImGui::PopClipRect
; Line 6692
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 6693
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+216]
	subss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+348], xmm0
; Line 6694
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7560				; 00001d88H
	mov	rcx, rax
	call	?back@?$ImVector@UImGuiGroupData@@@@QEAAAEAUImGuiGroupData@@XZ ; ImVector<ImGuiGroupData>::back
	mov	BYTE PTR [rax+46], 0
; Line 6695
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 6696
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+436], 1
; Line 6697
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+332], 0
; Line 6698
	mov	rax, QWORD PTR window$[rbp]
	mov	BYTE PTR [rax+346], 0
$LN1@EndMenuBar:
; Line 6699
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?EndMenuBar@ImGui@@YAXXZ ENDP				; ImGui::EndMenuBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginMenuBar@ImGui@@YA_NXZ
_TEXT	SEGMENT
window$ = 8
bar_rect$ = 40
clip_rect$ = 88
$T5 = 324
tv157 = 340
tv159 = 344
tv155 = 348
__$ArrayPad$ = 352
?BeginMenuBar@ImGui@@YA_NXZ PROC			; ImGui::BeginMenuBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6633
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6634
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6635
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginMenuB
; Line 6636
	xor	al, al
	jmp	$LN1@BeginMenuB
$LN2@BeginMenuB:
; Line 6637
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN3@BeginMenuB
; Line 6638
	xor	al, al
	jmp	$LN1@BeginMenuB
$LN3@BeginMenuB:
; Line 6640
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+346]
	test	eax, eax
	je	SHORT $LN5@BeginMenuB
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginMenuBar@ImGui@@YA_NXZ@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@MIADNLCN@?$AA?$CB?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAM?$AAe?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@BeginMenuB:
; Line 6641
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 6642
	lea	rcx, OFFSET FLAT:??_C@_09FHPMMDGK@?$CD?$CDmenubar@
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 6646
	lea	rdx, QWORD PTR bar_rect$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?MenuBarRect@ImGuiWindow@@QEBA?AUImRect@@XZ ; ImGuiWindow::MenuBarRect
; Line 6647
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+76]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR bar_rect$[rbp+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR bar_rect$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv157[rbp], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR bar_rect$[rbp+4]
	addss	xmm0, DWORD PTR [rax+76]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv159[rbp], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR bar_rect$[rbp]
	addss	xmm0, DWORD PTR [rax+76]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR tv155[rbp], xmm0
	movss	xmm0, DWORD PTR bar_rect$[rbp+12]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR tv157[rbp]
	movss	xmm2, DWORD PTR tv159[rbp]
	movss	xmm1, DWORD PTR tv155[rbp]
	lea	rcx, QWORD PTR clip_rect$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 6648
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 512				; 00000200H
	mov	rdx, rax
	lea	rcx, QWORD PTR clip_rect$[rbp]
	call	?ClipWith@ImRect@@QEAAXAEBU1@@Z		; ImRect::ClipWith
; Line 6649
	xor	r8d, r8d
	lea	rdx, QWORD PTR clip_rect$[rbp+8]
	lea	rcx, QWORD PTR clip_rect$[rbp]
	call	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z ; ImGui::PushClipRect
; Line 6652
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR bar_rect$[rbp+4]
	addss	xmm0, DWORD PTR [rax+352]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR bar_rect$[rbp]
	addss	xmm1, DWORD PTR [rax+348]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+240], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+240]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 6653
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+436], 0
; Line 6654
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+332], 1
; Line 6655
	mov	rax, QWORD PTR window$[rbp]
	mov	BYTE PTR [rax+346], 1
; Line 6656
	call	?AlignTextToFramePadding@ImGui@@YAXXZ	; ImGui::AlignTextToFramePadding
; Line 6657
	mov	al, 1
$LN1@BeginMenuB:
; Line 6658
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BeginMenuBar@ImGui@@YA_NXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?BeginMenuBar@ImGui@@YA_NXZ ENDP			; ImGui::BeginMenuBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Value@ImGui@@YAXPEBDM0@Z
_TEXT	SEGMENT
fmt$4 = 16
__$ArrayPad$ = 280
prefix$ = 320
v$ = 328
float_format$ = 336
?Value@ImGui@@YAXPEBDM0@Z PROC				; ImGui::Value, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6567
$LN5:
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6568
	cmp	QWORD PTR float_format$[rbp], 0
	je	SHORT $LN2@Value
; Line 6571
	mov	r9, QWORD PTR float_format$[rbp]
	lea	r8, OFFSET FLAT:??_C@_07EKEPIENH@?$CF?$CFs?3?5?$CFs@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR fmt$4[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 6572
	cvtss2sd xmm0, DWORD PTR v$[rbp]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	mov	rdx, QWORD PTR prefix$[rbp]
	lea	rcx, QWORD PTR fmt$4[rbp]
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
; Line 6573
	jmp	SHORT $LN3@Value
$LN2@Value:
; Line 6576
	cvtss2sd xmm0, DWORD PTR v$[rbp]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	mov	rdx, QWORD PTR prefix$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_08KELGKKHF@?$CFs?3?5?$CF?43f@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
$LN3@Value:
; Line 6578
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?Value@ImGui@@YAXPEBDM0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?Value@ImGui@@YAXPEBDM0@Z ENDP				; ImGui::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Value@ImGui@@YAXPEBDI@Z
_TEXT	SEGMENT
prefix$ = 224
v$ = 232
?Value@ImGui@@YAXPEBDI@Z PROC				; ImGui::Value, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6562
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6563
	mov	r8d, DWORD PTR v$[rbp]
	mov	rdx, QWORD PTR prefix$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
; Line 6564
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Value@ImGui@@YAXPEBDI@Z ENDP				; ImGui::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Value@ImGui@@YAXPEBDH@Z
_TEXT	SEGMENT
prefix$ = 224
v$ = 232
?Value@ImGui@@YAXPEBDH@Z PROC				; ImGui::Value, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6557
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6558
	mov	r8d, DWORD PTR v$[rbp]
	mov	rdx, QWORD PTR prefix$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06GBEGMGE@?$CFs?3?5?$CFd@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
; Line 6559
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Value@ImGui@@YAXPEBDH@Z ENDP				; ImGui::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Value@ImGui@@YAXPEBD_N@Z
_TEXT	SEGMENT
tv66 = 192
prefix$ = 240
b$ = 248
?Value@ImGui@@YAXPEBD_N@Z PROC				; ImGui::Value, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6552
$LN5:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6553
	movzx	eax, BYTE PTR b$[rbp]
	test	eax, eax
	je	SHORT $LN3@Value
	lea	rax, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@Value
$LN3@Value:
	lea	rax, OFFSET FLAT:??_C@_05LAPONLG@false@
	mov	QWORD PTR tv66[rbp], rax
$LN4@Value:
	mov	r8, QWORD PTR tv66[rbp]
	mov	rdx, QWORD PTR prefix$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06DJHOIPC@?$CFs?3?5?$CFs@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
; Line 6554
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?Value@ImGui@@YAXPEBD_N@Z ENDP				; ImGui::Value
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z
_TEXT	SEGMENT
label$ = 224
values_getter$ = 232
data$ = 240
values_count$ = 248
values_offset$ = 256
overlay_text$ = 264
scale_min$ = 272
scale_max$ = 280
graph_size$ = 288
?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z PROC ; ImGui::PlotHistogram, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6540
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6541
	mov	rax, QWORD PTR graph_size$[rbp]
	mov	QWORD PTR [rsp+72], rax
	movss	xmm0, DWORD PTR scale_max$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR scale_min$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR overlay_text$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR values_offset$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR values_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR data$[rbp]
	mov	r8, QWORD PTR values_getter$[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	mov	ecx, 1
	call	?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z ; ImGui::PlotEx
; Line 6542
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PlotHistogram@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z ENDP ; ImGui::PlotHistogram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z
_TEXT	SEGMENT
data$ = 8
__$ArrayPad$ = 232
label$ = 272
values$ = 280
values_count$ = 288
values_offset$ = 296
overlay_text$ = 304
scale_min$ = 312
scale_max$ = 320
graph_size$ = 328
stride$ = 336
?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z PROC	; ImGui::PlotHistogram, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6534
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6535
	mov	r8d, DWORD PTR stride$[rbp]
	mov	rdx, QWORD PTR values$[rbp]
	lea	rcx, QWORD PTR data$[rbp]
	call	??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z ; ImGuiPlotArrayGetterData::ImGuiPlotArrayGetterData
; Line 6536
	mov	rax, QWORD PTR graph_size$[rbp]
	mov	QWORD PTR [rsp+72], rax
	movss	xmm0, DWORD PTR scale_max$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR scale_min$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR overlay_text$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR values_offset$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR values_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR data$[rbp]
	lea	r8, OFFSET FLAT:?Plot_ArrayGetter@@YAMPEAXH@Z ; Plot_ArrayGetter
	mov	rdx, QWORD PTR label$[rbp]
	mov	ecx, 1
	call	?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z ; ImGui::PlotEx
; Line 6537
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?PlotHistogram@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ENDP	; ImGui::PlotHistogram
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z
_TEXT	SEGMENT
label$ = 224
values_getter$ = 232
data$ = 240
values_count$ = 248
values_offset$ = 256
overlay_text$ = 264
scale_min$ = 272
scale_max$ = 280
graph_size$ = 288
?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z PROC ; ImGui::PlotLines, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6529
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6530
	mov	rax, QWORD PTR graph_size$[rbp]
	mov	QWORD PTR [rsp+72], rax
	movss	xmm0, DWORD PTR scale_max$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR scale_min$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR overlay_text$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR values_offset$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR values_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR data$[rbp]
	mov	r8, QWORD PTR values_getter$[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	xor	ecx, ecx
	call	?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z ; ImGui::PlotEx
; Line 6531
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PlotLines@ImGui@@YAXPEBDP6AMPEAXH@Z1HH0MMUImVec2@@@Z ENDP ; ImGui::PlotLines
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z
_TEXT	SEGMENT
data$ = 8
__$ArrayPad$ = 232
label$ = 272
values$ = 280
values_count$ = 288
values_offset$ = 296
overlay_text$ = 304
scale_min$ = 312
scale_max$ = 320
graph_size$ = 328
stride$ = 336
?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z PROC	; ImGui::PlotLines, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6523
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6524
	mov	r8d, DWORD PTR stride$[rbp]
	mov	rdx, QWORD PTR values$[rbp]
	lea	rcx, QWORD PTR data$[rbp]
	call	??0ImGuiPlotArrayGetterData@@QEAA@PEBMH@Z ; ImGuiPlotArrayGetterData::ImGuiPlotArrayGetterData
; Line 6525
	mov	rax, QWORD PTR graph_size$[rbp]
	mov	QWORD PTR [rsp+72], rax
	movss	xmm0, DWORD PTR scale_max$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR scale_min$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR overlay_text$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR values_offset$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR values_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR data$[rbp]
	lea	r8, OFFSET FLAT:?Plot_ArrayGetter@@YAMPEAXH@Z ; Plot_ArrayGetter
	mov	rdx, QWORD PTR label$[rbp]
	xor	ecx, ecx
	call	?PlotEx@ImGui@@YAHW4ImGuiPlotType@@PEBDP6AMPEAXH@Z2HH1MMUImVec2@@@Z ; ImGui::PlotEx
; Line 6526
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?PlotLines@ImGui@@YAXPEBDPEBMHH0MMUImVec2@@H@Z ENDP	; ImGui::PlotLines
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
_TEXT	SEGMENT
g$ = 8
height_in_items_f$ = 36
size$ = 72
value_changed$ = 100
clipper$ = 136
i$6 = 196
item_text$7 = 232
item_selected$8 = 260
$T9 = 484
$T10 = 516
tv142 = 532
tv155 = 536
tv137 = 536
tv153 = 544
__$ArrayPad$ = 552
label$ = 592
current_item$ = 600
items_getter$ = 608
data$ = 616
items_count$ = 624
height_in_items$ = 632
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z PROC ; ImGui::ListBox, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6334
$LN17:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+632]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6335
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6338
	cmp	DWORD PTR height_in_items$[rbp], 0
	jge	SHORT $LN7@ListBox
; Line 6339
	mov	edx, 7
	mov	ecx, DWORD PTR items_count$[rbp]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	DWORD PTR height_in_items$[rbp], eax
$LN7@ListBox:
; Line 6340
	cvtsi2ss xmm0, DWORD PTR height_in_items$[rbp]
	addss	xmm0, DWORD PTR __real@3e800000
	movss	DWORD PTR height_in_items_f$[rbp], xmm0
; Line 6341
	call	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
	mulss	xmm0, DWORD PTR height_in_items_f$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	call	?ImFloor@@YAMM@Z			; ImFloor
	movaps	xmm2, xmm0
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6343
	lea	rdx, QWORD PTR size$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z ; ImGui::BeginListBox
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@ListBox
; Line 6344
	xor	al, al
	jmp	$LN1@ListBox
$LN8@ListBox:
; Line 6348
	mov	BYTE PTR value_changed$[rbp], 0
; Line 6349
	lea	rcx, QWORD PTR clipper$[rbp]
	call	??0ImGuiListClipper@@QEAA@XZ		; ImGuiListClipper::ImGuiListClipper
	npad	1
; Line 6350
	call	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
	movaps	xmm2, xmm0
	mov	edx, DWORD PTR items_count$[rbp]
	lea	rcx, QWORD PTR clipper$[rbp]
	call	?Begin@ImGuiListClipper@@QEAAXHM@Z	; ImGuiListClipper::Begin
$LN2@ListBox:
; Line 6351
	lea	rcx, QWORD PTR clipper$[rbp]
	call	?Step@ImGuiListClipper@@QEAA_NXZ	; ImGuiListClipper::Step
	movzx	eax, al
	test	eax, eax
	je	$LN3@ListBox
; Line 6352
	mov	eax, DWORD PTR clipper$[rbp]
	mov	DWORD PTR i$6[rbp], eax
	jmp	SHORT $LN6@ListBox
$LN4@ListBox:
	mov	eax, DWORD PTR i$6[rbp]
	inc	eax
	mov	DWORD PTR i$6[rbp], eax
$LN6@ListBox:
	mov	eax, DWORD PTR clipper$[rbp+4]
	cmp	DWORD PTR i$6[rbp], eax
	jge	$LN5@ListBox
; Line 6355
	mov	rax, QWORD PTR items_getter$[rbp]
	mov	QWORD PTR tv137[rbp], rax
	lea	r8, QWORD PTR item_text$7[rbp]
	mov	edx, DWORD PTR i$6[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv137[rbp]
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@ListBox
; Line 6356
	lea	rax, OFFSET FLAT:??_C@_0P@HFPOEILF@?$CKUnknown?5item?$CK@
	mov	QWORD PTR item_text$7[rbp], rax
$LN9@ListBox:
; Line 6358
	mov	ecx, DWORD PTR i$6[rbp]
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 6359
	mov	rax, QWORD PTR current_item$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$6[rbp], eax
	jne	SHORT $LN14@ListBox
	mov	BYTE PTR tv142[rbp], 1
	jmp	SHORT $LN15@ListBox
$LN14@ListBox:
	mov	BYTE PTR tv142[rbp], 0
$LN15@ListBox:
	movzx	eax, BYTE PTR tv142[rbp]
	mov	BYTE PTR item_selected$8[rbp], al
; Line 6360
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv155[rbp], rax
	mov	rax, QWORD PTR item_text$7[rbp]
	mov	QWORD PTR tv153[rbp], rax
	mov	r9, QWORD PTR tv155[rbp]
	xor	r8d, r8d
	movzx	edx, BYTE PTR item_selected$8[rbp]
	mov	rcx, QWORD PTR tv153[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@ListBox
; Line 6362
	mov	rax, QWORD PTR current_item$[rbp]
	mov	ecx, DWORD PTR i$6[rbp]
	mov	DWORD PTR [rax], ecx
; Line 6363
	mov	BYTE PTR value_changed$[rbp], 1
$LN10@ListBox:
; Line 6365
	movzx	eax, BYTE PTR item_selected$8[rbp]
	test	eax, eax
	je	SHORT $LN11@ListBox
; Line 6366
	call	?SetItemDefaultFocus@ImGui@@YAXXZ	; ImGui::SetItemDefaultFocus
$LN11@ListBox:
; Line 6367
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 6368
	jmp	$LN4@ListBox
$LN5@ListBox:
	jmp	$LN2@ListBox
$LN3@ListBox:
; Line 6369
	call	?EndListBox@ImGui@@YAXXZ		; ImGui::EndListBox
; Line 6370
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN12@ListBox
; Line 6371
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	ecx, DWORD PTR [rax+292]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN12@ListBox:
; Line 6373
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	BYTE PTR $T10[rbp], al
	lea	rcx, QWORD PTR clipper$[rbp]
	call	??1ImGuiListClipper@@QEAA@XZ		; ImGuiListClipper::~ImGuiListClipper
	movzx	eax, BYTE PTR $T10[rbp]
$LN1@ListBox:
; Line 6374
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+568]
	pop	rdi
	pop	rbp
	ret	0
?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ENDP ; ImGui::ListBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g$ = 8
height_in_items_f$ = 36
size$ = 72
value_changed$ = 100
clipper$ = 136
i$6 = 196
item_text$7 = 232
item_selected$8 = 260
$T9 = 484
$T10 = 516
tv142 = 532
tv155 = 536
tv137 = 536
tv153 = 544
__$ArrayPad$ = 552
label$ = 592
current_item$ = 600
items_getter$ = 608
data$ = 616
items_count$ = 624
height_in_items$ = 632
?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA PROC ; `ImGui::ListBox'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR clipper$[rbp]
	call	??1ImGuiListClipper@@QEAA@XZ		; ImGuiListClipper::~ImGuiListClipper
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z@4HA ENDP ; `ImGui::ListBox'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z
_TEXT	SEGMENT
value_changed$ = 4
label$ = 256
current_item$ = 264
items$ = 272
items_count$ = 280
height_items$ = 288
?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z PROC		; ImGui::ListBox, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6326
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6327
	mov	eax, DWORD PTR height_items$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR items_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR items$[rbp]
	lea	r8, OFFSET FLAT:?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z ; Items_ArrayGetter
	mov	rdx, QWORD PTR current_item$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?ListBox@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ; ImGui::ListBox
	mov	BYTE PTR value_changed$[rbp], al
; Line 6328
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 6329
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ListBox@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ENDP		; ImGui::ListBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndListBox@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
?EndListBox@ImGui@@YAXXZ PROC				; ImGui::EndListBox, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6315
$LN5:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6316
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6317
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 6318
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN3@EndListBox
	lea	rax, OFFSET FLAT:??_C@_0FJ@FLEOOEOG@Mismatched?5BeginListBox?1EndList@
	test	rax, rax
	jne	SHORT $LN4@EndListBox
$LN3@EndListBox:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndListBox@ImGui@@YAXXZ@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BBK@DDPDAAPA@?$AA?$CI?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@EndListBox:
; Line 6321
	call	?EndChildFrame@ImGui@@YAXXZ		; ImGui::EndChildFrame
; Line 6322
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 6323
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?EndListBox@ImGui@@YAXXZ ENDP				; ImGui::EndListBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
style$ = 72
id$ = 100
label_size$ = 136
size$ = 168
frame_size$ = 200
frame_bb$ = 232
bb$ = 280
label_pos$9 = 328
$T10 = 740
$T11 = 776
$T12 = 808
$T13 = 836
$T14 = 868
$T15 = 900
$T16 = 932
$T17 = 964
$T18 = 996
$T19 = 1028
tv178 = 1044
tv155 = 1044
tv94 = 1044
tv176 = 1048
tv91 = 1048
__$ArrayPad$ = 1056
label$ = 1104
size_arg$ = 1112
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z PROC	; ImGui::BeginListBox, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6262
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1128				; 00000468H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 174				; 000000aeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6263
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6264
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6265
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginListB
; Line 6266
	xor	al, al
	jmp	$LN1@BeginListB
$LN2@BeginListB:
; Line 6268
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 6269
	mov	rcx, QWORD PTR label$[rbp]
	call	?GetID@ImGui@@YAIPEBD@Z			; ImGui::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 6270
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 6274
	call	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
	mulss	xmm0, DWORD PTR __real@40e80000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR tv94[rbp], xmm0
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR tv91[rbp], xmm0
	mov	rax, QWORD PTR size_arg$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T11[rbp], rax
	mov	rax, QWORD PTR $T11[rbp]
	mov	QWORD PTR $T12[rbp], rax
	movss	xmm3, DWORD PTR tv94[rbp]
	movss	xmm2, DWORD PTR tv91[rbp]
	mov	rdx, QWORD PTR $T12[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z ; ImGui::CalcItemSize
	mov	rdx, rax
	lea	rcx, QWORD PTR size$[rbp]
	call	?ImFloor@@YA?AUImVec2@@AEBU1@@Z		; ImFloor
; Line 6275
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	movss	xmm0, DWORD PTR size$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR size$[rbp]
	lea	rcx, QWORD PTR frame_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6276
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR frame_size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 6277
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@BeginListB
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv155[rbp], xmm0
	jmp	SHORT $LN7@BeginListB
$LN6@BeginListB:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv155[rbp], xmm0
$LN7@BeginListB:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR tv155[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 6278
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7456				; 00001d20H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextItemData@@QEAAXXZ	; ImGuiNextItemData::ClearFlags
; Line 6280
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?IsRectVisible@ImGui@@YA_NAEBUImVec2@@0@Z ; ImGui::IsRectVisible
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@BeginListB
; Line 6282
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	movss	DWORD PTR tv178[rbp], xmm0
	lea	rdx, QWORD PTR $T16[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	mov	QWORD PTR tv176[rbp], rax
	movss	xmm1, DWORD PTR tv178[rbp]
	mov	rcx, QWORD PTR tv176[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 6283
	xor	r9d, r9d
	lea	r8, QWORD PTR frame_bb$[rbp]
	xor	edx, edx
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
; Line 6284
	xor	al, al
	jmp	$LN1@BeginListB
$LN3@BeginListB:
; Line 6288
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 6289
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN4@BeginListB
; Line 6291
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR label_pos$9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6292
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR label_pos$9[rbp]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
; Line 6293
	lea	r8, QWORD PTR label_size$[rbp]
	lea	rdx, QWORD PTR label_pos$9[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 240				; 000000f0H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T18[rbp]
	call	?ImMax@@YA?AUImVec2@@AEBU1@0@Z		; ImMax
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+240], rax
$LN4@BeginListB:
; Line 6296
	lea	rdx, QWORD PTR $T19[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	xor	r8d, r8d
	mov	rdx, rax
	mov	ecx, DWORD PTR id$[rbp]
	call	?BeginChildFrame@ImGui@@YA_NIAEBUImVec2@@H@Z ; ImGui::BeginChildFrame
; Line 6297
	mov	al, 1
$LN1@BeginListB:
; Line 6298
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1080]
	pop	rdi
	pop	rbp
	ret	0
?BeginListBox@ImGui@@YA_NPEBDAEBUImVec2@@@Z ENDP	; ImGui::BeginListBox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z
_TEXT	SEGMENT
tv73 = 192
label$ = 240
p_selected$ = 248
flags$ = 256
size_arg$ = 264
?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z PROC	; ImGui::Selectable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6242
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6243
	mov	r9, QWORD PTR size_arg$[rbp]
	mov	r8d, DWORD PTR flags$[rbp]
	mov	rax, QWORD PTR p_selected$[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@Selectable
; Line 6245
	mov	rax, QWORD PTR p_selected$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN4@Selectable
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN5@Selectable
$LN4@Selectable:
	mov	DWORD PTR tv73[rbp], 0
$LN5@Selectable:
	mov	rax, QWORD PTR p_selected$[rbp]
	movzx	ecx, BYTE PTR tv73[rbp]
	mov	BYTE PTR [rax], cl
; Line 6246
	mov	al, 1
	jmp	SHORT $LN1@Selectable
$LN2@Selectable:
; Line 6248
	xor	al, al
$LN1@Selectable:
; Line 6249
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?Selectable@ImGui@@YA_NPEBDPEA_NHAEBUImVec2@@@Z ENDP	; ImGui::Selectable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
label_size$ = 136
size$ = 168
pos$ = 200
span_all_columns$ = 228
min_x$ = 260
max_x$ = 292
text_min$ = 328
text_max$ = 360
bb$ = 392
spacing_x$11 = 436
spacing_y$12 = 468
spacing_L$13 = 500
spacing_U$14 = 532
backup_clip_rect_min_x$ = 564
backup_clip_rect_max_x$ = 596
item_add$ = 628
backup_item_flags$15 = 660
button_flags$ = 692
was_selected$ = 724
hovered$ = 756
held$ = 788
pressed$ = 820
col$16 = 852
$T17 = 1268
$T18 = 1316
$T19 = 1348
tv391 = 1364
tv171 = 1364
tv146 = 1364
tv137 = 1364
tv131 = 1364
tv83 = 1364
tv390 = 1368
tv345 = 1368
tv88 = 1368
tv343 = 1376
tv357 = 1384
tv359 = 1392
tv355 = 1396
__$ArrayPad$ = 1400
label$ = 1440
selected$ = 1448
flags$ = 1456
size_arg$ = 1464
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z PROC	; ImGui::Selectable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6087
$LN58:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1480				; 000005c8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 258				; 00000102H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1512]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6088
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6089
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Selectable
; Line 6090
	xor	al, al
	jmp	$LN1@Selectable
$LN2@Selectable:
; Line 6092
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6093
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 6096
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 6097
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 6098
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN57@Selectable
	je	SHORT $LN39@Selectable
$LN57@Selectable:
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN40@Selectable
$LN39@Selectable:
	movss	xmm0, DWORD PTR label_size$[rbp+4]
	movss	DWORD PTR tv83[rbp], xmm0
$LN40@Selectable:
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN56@Selectable
	je	SHORT $LN41@Selectable
$LN56@Selectable:
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv88[rbp], xmm0
	jmp	SHORT $LN42@Selectable
$LN41@Selectable:
	movss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv88[rbp], xmm0
$LN42@Selectable:
	movss	xmm2, DWORD PTR tv83[rbp]
	movss	xmm1, DWORD PTR tv88[rbp]
	lea	rcx, QWORD PTR size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6099
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 6100
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR [rax+272]
	movss	DWORD PTR pos$[rbp+4], xmm0
; Line 6101
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 6105
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN43@Selectable
	mov	BYTE PTR tv131[rbp], 1
	jmp	SHORT $LN44@Selectable
$LN43@Selectable:
	mov	BYTE PTR tv131[rbp], 0
$LN44@Selectable:
	movzx	eax, BYTE PTR tv131[rbp]
	mov	BYTE PTR span_all_columns$[rbp], al
; Line 6106
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN45@Selectable
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+576]
	movss	DWORD PTR tv137[rbp], xmm0
	jmp	SHORT $LN46@Selectable
$LN45@Selectable:
	movss	xmm0, DWORD PTR pos$[rbp]
	movss	DWORD PTR tv137[rbp], xmm0
$LN46@Selectable:
	movss	xmm0, DWORD PTR tv137[rbp]
	movss	DWORD PTR min_x$[rbp], xmm0
; Line 6107
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN47@Selectable
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+584]
	movss	DWORD PTR tv146[rbp], xmm0
	jmp	SHORT $LN48@Selectable
$LN47@Selectable:
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+568]
	movss	DWORD PTR tv146[rbp], xmm0
$LN48@Selectable:
	movss	xmm0, DWORD PTR tv146[rbp]
	movss	DWORD PTR max_x$[rbp], xmm0
; Line 6108
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN55@Selectable
	je	SHORT $LN4@Selectable
$LN55@Selectable:
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN3@Selectable
$LN4@Selectable:
; Line 6109
	movss	xmm0, DWORD PTR max_x$[rbp]
	subss	xmm0, DWORD PTR min_x$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR label_size$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR size$[rbp], xmm0
$LN3@Selectable:
; Line 6112
	mov	rax, QWORD PTR pos$[rbp]
	mov	QWORD PTR text_min$[rbp], rax
; Line 6113
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR size$[rbp+4]
	movss	xmm1, DWORD PTR min_x$[rbp]
	addss	xmm1, DWORD PTR size$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR text_max$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 6116
	movss	xmm0, DWORD PTR text_max$[rbp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR text_max$[rbp]
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movss	xmm1, DWORD PTR min_x$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 6117
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	$LN5@Selectable
; Line 6119
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN49@Selectable
	xorps	xmm0, xmm0
	movss	DWORD PTR tv171[rbp], xmm0
	jmp	SHORT $LN50@Selectable
$LN49@Selectable:
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	movss	DWORD PTR tv171[rbp], xmm0
$LN50@Selectable:
	movss	xmm0, DWORD PTR tv171[rbp]
	movss	DWORD PTR spacing_x$11[rbp], xmm0
; Line 6120
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	movss	DWORD PTR spacing_y$12[rbp], xmm0
; Line 6121
	movss	xmm0, DWORD PTR spacing_x$11[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR spacing_L$13[rbp], xmm0
; Line 6122
	movss	xmm0, DWORD PTR spacing_y$12[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR spacing_U$14[rbp], xmm0
; Line 6123
	movss	xmm0, DWORD PTR bb$[rbp]
	subss	xmm0, DWORD PTR spacing_L$13[rbp]
	movss	DWORD PTR bb$[rbp], xmm0
; Line 6124
	movss	xmm0, DWORD PTR bb$[rbp+4]
	subss	xmm0, DWORD PTR spacing_U$14[rbp]
	movss	DWORD PTR bb$[rbp+4], xmm0
; Line 6125
	movss	xmm0, DWORD PTR spacing_x$11[rbp]
	subss	xmm0, DWORD PTR spacing_L$13[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+8]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR bb$[rbp+8], xmm0
; Line 6126
	movss	xmm0, DWORD PTR spacing_y$12[rbp]
	subss	xmm0, DWORD PTR spacing_U$14[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR bb$[rbp+12], xmm0
$LN5@Selectable:
; Line 6131
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+592]
	movss	DWORD PTR backup_clip_rect_min_x$[rbp], xmm0
; Line 6132
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+600]
	movss	DWORD PTR backup_clip_rect_max_x$[rbp], xmm0
; Line 6133
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN6@Selectable
; Line 6135
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+576]
	movss	DWORD PTR [rax+592], xmm0
; Line 6136
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+584]
	movss	DWORD PTR [rax+600], xmm0
$LN6@Selectable:
; Line 6140
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN7@Selectable
; Line 6142
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	mov	DWORD PTR backup_item_flags$15[rbp], eax
; Line 6143
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	or	eax, 20
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7236], eax
; Line 6144
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	mov	BYTE PTR item_add$[rbp], al
; Line 6145
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR backup_item_flags$15[rbp]
	mov	DWORD PTR [rax+7236], ecx
; Line 6146
	jmp	SHORT $LN8@Selectable
$LN7@Selectable:
; Line 6149
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	mov	BYTE PTR item_add$[rbp], al
$LN8@Selectable:
; Line 6152
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN9@Selectable
; Line 6154
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR backup_clip_rect_min_x$[rbp]
	movss	DWORD PTR [rax+592], xmm0
; Line 6155
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR backup_clip_rect_max_x$[rbp]
	movss	DWORD PTR [rax+600], xmm0
$LN9@Selectable:
; Line 6158
	movzx	eax, BYTE PTR item_add$[rbp]
	test	eax, eax
	jne	SHORT $LN10@Selectable
; Line 6159
	xor	al, al
	jmp	$LN1@Selectable
$LN10@Selectable:
; Line 6163
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN11@Selectable
	mov	rax, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+424], 0
	je	SHORT $LN11@Selectable
; Line 6164
	call	?PushColumnsBackground@ImGui@@YAXXZ	; ImGui::PushColumnsBackground
	jmp	SHORT $LN12@Selectable
$LN11@Selectable:
; Line 6165
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN13@Selectable
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+8176], 0
	je	SHORT $LN13@Selectable
; Line 6166
	call	?TablePushBackgroundChannel@ImGui@@YAXXZ ; ImGui::TablePushBackgroundChannel
$LN13@Selectable:
$LN12@Selectable:
; Line 6169
	mov	DWORD PTR button_flags$[rbp], 0
; Line 6170
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN14@Selectable
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 17
	mov	DWORD PTR button_flags$[rbp], eax
$LN14@Selectable:
; Line 6171
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	SHORT $LN15@Selectable
	mov	eax, DWORD PTR button_flags$[rbp]
	or	eax, 16
	mov	DWORD PTR button_flags$[rbp], eax
$LN15@Selectable:
; Line 6172
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8388608				; 00800000H
	test	eax, eax
	je	SHORT $LN16@Selectable
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 7
	mov	DWORD PTR button_flags$[rbp], eax
$LN16@Selectable:
; Line 6173
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN17@Selectable
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 14
	mov	DWORD PTR button_flags$[rbp], eax
$LN17@Selectable:
; Line 6174
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN18@Selectable
	mov	eax, DWORD PTR button_flags$[rbp]
	or	eax, 288				; 00000120H
	mov	DWORD PTR button_flags$[rbp], eax
$LN18@Selectable:
; Line 6175
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN19@Selectable
	mov	eax, DWORD PTR button_flags$[rbp]
	bts	eax, 12
	mov	DWORD PTR button_flags$[rbp], eax
$LN19@Selectable:
; Line 6177
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN20@Selectable
; Line 6178
	mov	BYTE PTR selected$[rbp], 0
$LN20@Selectable:
; Line 6180
	movzx	eax, BYTE PTR selected$[rbp]
	mov	BYTE PTR was_selected$[rbp], al
; Line 6182
	mov	eax, DWORD PTR button_flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 6191
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN21@Selectable
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7660], 0
	je	SHORT $LN21@Selectable
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+340]
	cmp	DWORD PTR [rax+7664], ecx
	jne	SHORT $LN21@Selectable
; Line 6192
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7660], ecx
	jne	SHORT $LN22@Selectable
; Line 6193
	mov	BYTE PTR pressed$[rbp], 1
	movzx	eax, BYTE PTR pressed$[rbp]
	mov	BYTE PTR selected$[rbp], al
$LN22@Selectable:
$LN21@Selectable:
; Line 6196
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	jne	SHORT $LN24@Selectable
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	$LN23@Selectable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	$LN23@Selectable
$LN24@Selectable:
; Line 6198
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7711]
	test	eax, eax
	jne	$LN25@Selectable
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+7624], rcx
	jne	$LN25@Selectable
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+332]
	cmp	DWORD PTR [rax+7700], ecx
	jne	$LN25@Selectable
; Line 6200
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 16
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv345[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 16
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv343[rbp], rax
	mov	r8, QWORD PTR tv345[rbp]
	mov	rdx, QWORD PTR tv343[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
	mov	QWORD PTR tv357[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+340]
	mov	DWORD PTR tv359[rbp], eax
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+332]
	mov	DWORD PTR tv355[rbp], eax
	mov	r9, QWORD PTR tv357[rbp]
	mov	r8d, DWORD PTR tv359[rbp]
	mov	edx, DWORD PTR tv355[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetNavID@ImGui@@YAXIW4ImGuiNavLayer@@IAEBUImRect@@@Z ; ImGui::SetNavID
; Line 6201
	mov	rax, QWORD PTR g$[rbp]
	mov	BYTE PTR [rax+7710], 1
$LN25@Selectable:
$LN23@Selectable:
; Line 6204
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN26@Selectable
; Line 6205
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN26@Selectable:
; Line 6207
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN27@Selectable
; Line 6208
	call	?SetItemAllowOverlap@ImGui@@YAXXZ	; ImGui::SetItemAllowOverlap
$LN27@Selectable:
; Line 6211
	movzx	eax, BYTE PTR selected$[rbp]
	movzx	ecx, BYTE PTR was_selected$[rbp]
	cmp	eax, ecx
	je	SHORT $LN28@Selectable
; Line 6212
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	or	eax, 8
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+296], eax
$LN28@Selectable:
; Line 6215
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN29@Selectable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 33554432				; 02000000H
	test	eax, eax
	je	SHORT $LN29@Selectable
; Line 6216
	mov	BYTE PTR hovered$[rbp], 1
$LN29@Selectable:
; Line 6217
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN31@Selectable
	movzx	eax, BYTE PTR selected$[rbp]
	test	eax, eax
	je	$LN30@Selectable
$LN31@Selectable:
; Line 6219
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN51@Selectable
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN51@Selectable
	mov	DWORD PTR tv391[rbp], 26
	jmp	SHORT $LN54@Selectable
$LN51@Selectable:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN52@Selectable
	mov	DWORD PTR tv390[rbp], 25
	jmp	SHORT $LN53@Selectable
$LN52@Selectable:
	mov	DWORD PTR tv390[rbp], 24
$LN53@Selectable:
	mov	eax, DWORD PTR tv390[rbp]
	mov	DWORD PTR tv391[rbp], eax
$LN54@Selectable:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv391[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$16[rbp], eax
; Line 6220
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8d, DWORD PTR col$16[rbp]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
$LN30@Selectable:
; Line 6222
	mov	r8d, 10
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 6224
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN32@Selectable
	mov	rax, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+424], 0
	je	SHORT $LN32@Selectable
; Line 6225
	call	?PopColumnsBackground@ImGui@@YAXXZ	; ImGui::PopColumnsBackground
	jmp	SHORT $LN33@Selectable
$LN32@Selectable:
; Line 6226
	movzx	eax, BYTE PTR span_all_columns$[rbp]
	test	eax, eax
	je	SHORT $LN34@Selectable
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+8176], 0
	je	SHORT $LN34@Selectable
; Line 6227
	call	?TablePopBackgroundChannel@ImGui@@YAXXZ	; ImGui::TablePopBackgroundChannel
$LN34@Selectable:
$LN33@Selectable:
; Line 6229
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN35@Selectable
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR style$[rbp]
	lea	rax, QWORD PTR [rcx+rax+196]
	mov	rdx, rax
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
$LN35@Selectable:
; Line 6230
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 156				; 0000009cH
	lea	rcx, QWORD PTR bb$[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR label_size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR label$[rbp]
	lea	rdx, QWORD PTR text_max$[rbp]
	lea	rcx, QWORD PTR text_min$[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 6231
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN36@Selectable
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
$LN36@Selectable:
; Line 6234
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN37@Selectable
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN37@Selectable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN37@Selectable
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN37@Selectable
; Line 6235
	call	?CloseCurrentPopup@ImGui@@YAXXZ		; ImGui::CloseCurrentPopup
$LN37@Selectable:
; Line 6238
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@Selectable:
; Line 6239
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1416]
	pop	rdi
	pop	rbp
	ret	0
?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ENDP	; ImGui::Selectable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetNextItemOpen@ImGui@@YAX_NH@Z
_TEXT	SEGMENT
g$ = 8
tv78 = 212
is_open$ = 256
cond$ = 264
?SetNextItemOpen@ImGui@@YAX_NH@Z PROC			; ImGui::SetNextItemOpen, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6019
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6020
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6021
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@SetNextIte
; Line 6022
	jmp	SHORT $LN1@SetNextIte
$LN2@SetNextIte:
; Line 6023
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7456]
	or	eax, 2
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7456], eax
; Line 6024
	mov	rax, QWORD PTR g$[rbp]
	movzx	ecx, BYTE PTR is_open$[rbp]
	mov	BYTE PTR [rax+7472], cl
; Line 6025
	cmp	DWORD PTR cond$[rbp], 0
	je	SHORT $LN4@SetNextIte
	mov	eax, DWORD PTR cond$[rbp]
	mov	DWORD PTR tv78[rbp], eax
	jmp	SHORT $LN5@SetNextIte
$LN4@SetNextIte:
	mov	DWORD PTR tv78[rbp], 1
$LN5@SetNextIte:
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR tv78[rbp]
	mov	DWORD PTR [rax+7468], ecx
$LN1@SetNextIte:
; Line 6026
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?SetNextItemOpen@ImGui@@YAX_NH@Z ENDP			; ImGui::SetNextItemOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z
_TEXT	SEGMENT
window$ = 8
id$ = 36
is_open$ = 68
g$4 = 104
last_item_backup$5 = 136
button_size$6 = 196
button_x$7 = 228
button_y$8 = 260
close_button_id$9 = 292
$T10 = 516
__$ArrayPad$ = 536
label$ = 576
p_visible$ = 584
flags$ = 592
?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z PROC		; ImGui::CollapsingHeader, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6044
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 584				; 00000248H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 90					; 0000005aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+616]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6045
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6046
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Collapsing
; Line 6047
	xor	al, al
	jmp	$LN1@Collapsing
$LN2@Collapsing:
; Line 6049
	cmp	QWORD PTR p_visible$[rbp], 0
	je	SHORT $LN3@Collapsing
	mov	rax, QWORD PTR p_visible$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN3@Collapsing
; Line 6050
	xor	al, al
	jmp	$LN1@Collapsing
$LN3@Collapsing:
; Line 6052
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 6053
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 26
	mov	DWORD PTR flags$[rbp], eax
; Line 6054
	cmp	QWORD PTR p_visible$[rbp], 0
	je	SHORT $LN4@Collapsing
; Line 6055
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 1048580				; 00100004H
	mov	DWORD PTR flags$[rbp], eax
$LN4@Collapsing:
; Line 6056
	xor	r9d, r9d
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z	; ImGui::TreeNodeBehavior
	mov	BYTE PTR is_open$[rbp], al
; Line 6057
	cmp	QWORD PTR p_visible$[rbp], 0
	je	$LN5@Collapsing
; Line 6062
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$4[rbp], rax
; Line 6063
	lea	rcx, QWORD PTR last_item_backup$5[rbp]
	call	??0ImGuiLastItemDataBackup@@QEAA@XZ	; ImGuiLastItemDataBackup::ImGuiLastItemDataBackup
; Line 6064
	mov	rax, QWORD PTR g$4[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR button_size$6[rbp], xmm0
; Line 6065
	mov	rax, QWORD PTR g$4[rbp]
	movss	xmm0, DWORD PTR [rax+5528]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+308]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	subss	xmm0, DWORD PTR button_size$6[rbp]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+300]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR button_x$7[rbp], xmm0
; Line 6066
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+304]
	movss	DWORD PTR button_y$8[rbp], xmm0
; Line 6067
	mov	r8d, DWORD PTR id$[rbp]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_06KIIKKNMI@?$CDCLOSE@
	call	?GetIDWithSeed@ImGui@@YAIPEBD0I@Z	; ImGui::GetIDWithSeed
	mov	DWORD PTR close_button_id$9[rbp], eax
; Line 6068
	movss	xmm2, DWORD PTR button_y$8[rbp]
	movss	xmm1, DWORD PTR button_x$7[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	ecx, DWORD PTR close_button_id$9[rbp]
	call	?CloseButton@ImGui@@YA_NIAEBUImVec2@@@Z	; ImGui::CloseButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@Collapsing
; Line 6069
	mov	rax, QWORD PTR p_visible$[rbp]
	mov	BYTE PTR [rax], 0
$LN6@Collapsing:
; Line 6070
	lea	rcx, QWORD PTR last_item_backup$5[rbp]
	call	?Restore@ImGuiLastItemDataBackup@@QEBAXXZ ; ImGuiLastItemDataBackup::Restore
$LN5@Collapsing:
; Line 6073
	movzx	eax, BYTE PTR is_open$[rbp]
$LN1@Collapsing:
; Line 6074
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+552]
	pop	rdi
	pop	rbp
	ret	0
?CollapsingHeader@ImGui@@YA_NPEBDPEA_NH@Z ENDP		; ImGui::CollapsingHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CollapsingHeader@ImGui@@YA_NPEBDH@Z
_TEXT	SEGMENT
window$ = 8
tv71 = 212
label$ = 256
flags$ = 264
?CollapsingHeader@ImGui@@YA_NPEBDH@Z PROC		; ImGui::CollapsingHeader, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6031
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6032
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 6033
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Collapsing
; Line 6034
	xor	al, al
	jmp	SHORT $LN1@Collapsing
$LN2@Collapsing:
; Line 6036
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 26
	mov	DWORD PTR tv71[rbp], eax
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	xor	r9d, r9d
	mov	r8, QWORD PTR label$[rbp]
	mov	ecx, DWORD PTR tv71[rbp]
	mov	edx, ecx
	mov	ecx, eax
	call	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z	; ImGui::TreeNodeBehavior
$LN1@Collapsing:
; Line 6037
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?CollapsingHeader@ImGui@@YA_NPEBDH@Z ENDP		; ImGui::CollapsingHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ
_TEXT	SEGMENT
g$ = 8
?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ PROC		; ImGui::GetTreeNodeToLabelSpacing, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 6012
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 6013
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 6014
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5528]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 6015
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ ENDP		; ImGui::GetTreeNodeToLabelSpacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreePop@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
tree_depth_mask$ = 68
$T1 = 292
tv167 = 324
tv137 = 328
tv135 = 336
tv133 = 340
?TreePop@ImGui@@YAXXZ PROC				; ImGui::TreePop, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5989
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5990
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5991
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 5992
	xorps	xmm0, xmm0
	call	?Unindent@ImGui@@YAXM@Z			; ImGui::Unindent
; Line 5994
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+392]
	dec	eax
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+392], eax
; Line 5995
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+392]
	mov	ecx, 1
	mov	DWORD PTR tv167[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv167[rbp]
	shl	eax, cl
	mov	DWORD PTR tree_depth_mask$[rbp], eax
; Line 5998
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7752], 0
	jne	$LN2@TreePop
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+7624], rcx
	jne	$LN2@TreePop
	call	?NavMoveRequestButNoResultYet@ImGui@@YA_NXZ ; ImGui::NavMoveRequestButNoResultYet
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@TreePop
; Line 5999
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7708]
	test	eax, eax
	je	SHORT $LN3@TreePop
	mov	rax, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR tree_depth_mask$[rbp]
	mov	eax, DWORD PTR [rax+396]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN3@TreePop
; Line 6001
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	QWORD PTR tv137[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7700]
	mov	DWORD PTR tv135[rbp], eax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 200				; 000000c8H
	mov	rcx, rax
	call	?back@?$ImVector@I@@QEAAAEAIXZ		; ImVector<unsigned int>::back
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv133[rbp], eax
	mov	r9, QWORD PTR tv137[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR tv135[rbp]
	mov	ecx, DWORD PTR tv133[rbp]
	call	?SetNavID@ImGui@@YAXIW4ImGuiNavLayer@@IAEBUImRect@@@Z ; ImGui::SetNavID
; Line 6002
	call	?NavMoveRequestCancel@ImGui@@YAXXZ	; ImGui::NavMoveRequestCancel
$LN3@TreePop:
$LN2@TreePop:
; Line 6004
	mov	eax, DWORD PTR tree_depth_mask$[rbp]
	dec	eax
	mov	rcx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rcx+396]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+396], eax
; Line 6006
	mov	rax, QWORD PTR window$[rbp]
	cmp	DWORD PTR [rax+200], 1
	jg	SHORT $LN5@TreePop
	mov	eax, DWORD PTR ?__LINE__Var@?0??TreePop@ImGui@@YAXXZ@4JA
	add	eax, 17
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@KOOPJPAL@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAI?$AAD?$AAS?$AAt?$AAa?$AAc?$AAk@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@TreePop:
; Line 6007
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 6008
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?TreePop@ImGui@@YAXXZ ENDP				; ImGui::TreePop
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreePush@ImGui@@YAXPEBX@Z
_TEXT	SEGMENT
window$ = 8
tv74 = 216
ptr_id$ = 256
?TreePush@ImGui@@YAXPEBX@Z PROC				; ImGui::TreePush, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5972
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5973
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5974
	xorps	xmm0, xmm0
	call	?Indent@ImGui@@YAXM@Z			; ImGui::Indent
; Line 5975
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+392]
	inc	eax
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+392], eax
; Line 5976
	cmp	QWORD PTR ptr_id$[rbp], 0
	je	SHORT $LN3@TreePush
	mov	rax, QWORD PTR ptr_id$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	jmp	SHORT $LN4@TreePush
$LN3@TreePush:
	lea	rax, OFFSET FLAT:??_C@_09GHACPMKF@?$CDTreePush@
	mov	QWORD PTR tv74[rbp], rax
$LN4@TreePush:
	mov	rcx, QWORD PTR tv74[rbp]
	call	?PushID@ImGui@@YAXPEBX@Z		; ImGui::PushID
; Line 5977
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TreePush@ImGui@@YAXPEBX@Z ENDP				; ImGui::TreePush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreePush@ImGui@@YAXPEBD@Z
_TEXT	SEGMENT
window$ = 8
tv74 = 216
str_id$ = 256
?TreePush@ImGui@@YAXPEBD@Z PROC				; ImGui::TreePush, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5964
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5965
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5966
	xorps	xmm0, xmm0
	call	?Indent@ImGui@@YAXM@Z			; ImGui::Indent
; Line 5967
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+392]
	inc	eax
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+392], eax
; Line 5968
	cmp	QWORD PTR str_id$[rbp], 0
	je	SHORT $LN3@TreePush
	mov	rax, QWORD PTR str_id$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	jmp	SHORT $LN4@TreePush
$LN3@TreePush:
	lea	rax, OFFSET FLAT:??_C@_09GHACPMKF@?$CDTreePush@
	mov	QWORD PTR tv74[rbp], rax
$LN4@TreePush:
	mov	rcx, QWORD PTR tv74[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 5969
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TreePush@ImGui@@YAXPEBD@Z ENDP				; ImGui::TreePush
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
label_end$ = 72
tv79 = 280
ptr_id$ = 320
flags$ = 328
fmt$ = 336
args$ = 344
?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z PROC		; ImGui::TreeNodeExV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5720
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5721
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5722
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TreeNodeEx
; Line 5723
	xor	al, al
	jmp	SHORT $LN1@TreeNodeEx
$LN2@TreeNodeEx:
; Line 5725
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5726
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, 3073				; 00000c01H
	mov	rcx, rax
	call	?ImFormatStringV@@YAHPEAD_KPEBD0@Z	; ImFormatStringV
	cdqe
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+13076]
	mov	QWORD PTR label_end$[rbp], rax
; Line 5727
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	QWORD PTR tv79[rbp], rax
	mov	rdx, QWORD PTR ptr_id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBX@Z		; ImGuiWindow::GetID
	mov	r9, QWORD PTR label_end$[rbp]
	mov	rcx, QWORD PTR tv79[rbp]
	mov	r8, rcx
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, eax
	call	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z	; ImGui::TreeNodeBehavior
$LN1@TreeNodeEx:
; Line 5728
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z ENDP		; ImGui::TreeNodeExV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
label_end$ = 72
tv79 = 280
str_id$ = 320
flags$ = 328
fmt$ = 336
args$ = 344
?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z PROC		; ImGui::TreeNodeExV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5709
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5710
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5711
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TreeNodeEx
; Line 5712
	xor	al, al
	jmp	$LN1@TreeNodeEx
$LN2@TreeNodeEx:
; Line 5714
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5715
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, 3073				; 00000c01H
	mov	rcx, rax
	call	?ImFormatStringV@@YAHPEAD_KPEBD0@Z	; ImFormatStringV
	cdqe
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+13076]
	mov	QWORD PTR label_end$[rbp], rax
; Line 5716
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	QWORD PTR tv79[rbp], rax
	xor	r8d, r8d
	mov	rdx, QWORD PTR str_id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	r9, QWORD PTR label_end$[rbp]
	mov	rcx, QWORD PTR tv79[rbp]
	mov	r8, rcx
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, eax
	call	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z	; ImGui::TreeNodeBehavior
$LN1@TreeNodeEx:
; Line 5717
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z ENDP		; ImGui::TreeNodeExV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ
_TEXT	SEGMENT
args$ = 8
is_open$ = 36
__$ArrayPad$ = 280
ptr_id$ = 320
flags$ = 328
fmt$ = 336
?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ PROC			; ImGui::TreeNodeEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5700
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5702
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 5703
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR ptr_id$[rbp]
	call	?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z	; ImGui::TreeNodeExV
	mov	BYTE PTR is_open$[rbp], al
; Line 5704
	mov	QWORD PTR args$[rbp], 0
; Line 5705
	movzx	eax, BYTE PTR is_open$[rbp]
; Line 5706
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeEx@ImGui@@YA_NPEBXHPEBDZZ ENDP			; ImGui::TreeNodeEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ
_TEXT	SEGMENT
args$ = 8
is_open$ = 36
__$ArrayPad$ = 280
str_id$ = 320
flags$ = 328
fmt$ = 336
?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ PROC			; ImGui::TreeNodeEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5691
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5693
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 5694
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z	; ImGui::TreeNodeExV
	mov	BYTE PTR is_open$[rbp], al
; Line 5695
	mov	QWORD PTR args$[rbp], 0
; Line 5696
	movzx	eax, BYTE PTR is_open$[rbp]
; Line 5697
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeEx@ImGui@@YA_NPEBDH0ZZ ENDP			; ImGui::TreeNodeEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeEx@ImGui@@YA_NPEBDH@Z
_TEXT	SEGMENT
window$ = 8
label$ = 256
flags$ = 264
?TreeNodeEx@ImGui@@YA_NPEBDH@Z PROC			; ImGui::TreeNodeEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5682
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5683
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5684
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TreeNodeEx
; Line 5685
	xor	al, al
	jmp	SHORT $LN1@TreeNodeEx
$LN2@TreeNodeEx:
; Line 5687
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	xor	r9d, r9d
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	mov	ecx, eax
	call	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z	; ImGui::TreeNodeBehavior
$LN1@TreeNodeEx:
; Line 5688
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeEx@ImGui@@YA_NPEBDH@Z ENDP			; ImGui::TreeNodeEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z
_TEXT	SEGMENT
ptr_id$ = 224
fmt$ = 232
args$ = 240
?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z PROC		; ImGui::TreeNodeV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5677
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5678
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR ptr_id$[rbp]
	call	?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z	; ImGui::TreeNodeExV
; Line 5679
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeV@ImGui@@YA_NPEBXPEBDPEAD@Z ENDP		; ImGui::TreeNodeV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z
_TEXT	SEGMENT
str_id$ = 224
fmt$ = 232
args$ = 240
?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z PROC			; ImGui::TreeNodeV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5672
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5673
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z	; ImGui::TreeNodeExV
; Line 5674
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TreeNodeV@ImGui@@YA_NPEBD0PEAD@Z ENDP			; ImGui::TreeNodeV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNode@ImGui@@YA_NPEBXPEBDZZ
_TEXT	SEGMENT
args$ = 8
is_open$ = 36
__$ArrayPad$ = 280
ptr_id$ = 320
fmt$ = 328
?TreeNode@ImGui@@YA_NPEBXPEBDZZ PROC			; ImGui::TreeNode, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5655
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5657
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 5658
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR ptr_id$[rbp]
	call	?TreeNodeExV@ImGui@@YA_NPEBXHPEBDPEAD@Z	; ImGui::TreeNodeExV
	mov	BYTE PTR is_open$[rbp], al
; Line 5659
	mov	QWORD PTR args$[rbp], 0
; Line 5660
	movzx	eax, BYTE PTR is_open$[rbp]
; Line 5661
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TreeNode@ImGui@@YA_NPEBXPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TreeNode@ImGui@@YA_NPEBXPEBDZZ ENDP			; ImGui::TreeNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNode@ImGui@@YA_NPEBD0ZZ
_TEXT	SEGMENT
args$ = 8
is_open$ = 36
__$ArrayPad$ = 280
str_id$ = 320
fmt$ = 328
?TreeNode@ImGui@@YA_NPEBD0ZZ PROC			; ImGui::TreeNode, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5646
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5648
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 5649
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?TreeNodeExV@ImGui@@YA_NPEBDH0PEAD@Z	; ImGui::TreeNodeExV
	mov	BYTE PTR is_open$[rbp], al
; Line 5650
	mov	QWORD PTR args$[rbp], 0
; Line 5651
	movzx	eax, BYTE PTR is_open$[rbp]
; Line 5652
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TreeNode@ImGui@@YA_NPEBD0ZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TreeNode@ImGui@@YA_NPEBD0ZZ ENDP			; ImGui::TreeNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TreeNode@ImGui@@YA_NPEBD@Z
_TEXT	SEGMENT
window$ = 8
label$ = 256
?TreeNode@ImGui@@YA_NPEBD@Z PROC			; ImGui::TreeNode, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5664
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5665
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5666
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TreeNode
; Line 5667
	xor	al, al
	jmp	SHORT $LN1@TreeNode
$LN2@TreeNode:
; Line 5668
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	xor	r9d, r9d
	mov	r8, QWORD PTR label$[rbp]
	xor	edx, edx
	mov	ecx, eax
	call	?TreeNodeBehavior@ImGui@@YA_NIHPEBD0@Z	; ImGui::TreeNodeBehavior
$LN1@TreeNode:
; Line 5669
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TreeNode@ImGui@@YA_NPEBD@Z ENDP			; ImGui::TreeNode
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetColorEditOptions@ImGui@@YAXH@Z
_TEXT	SEGMENT
g$ = 8
flags$ = 256
?SetColorEditOptions@ImGui@@YAXH@Z PROC			; ImGui::SetColorEditOptions, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5489
$LN11:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5490
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5491
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	test	eax, eax
	jne	SHORT $LN2@SetColorEd
; Line 5492
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 20
	mov	DWORD PTR flags$[rbp], eax
$LN2@SetColorEd:
; Line 5493
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 25165824				; 01800000H
	test	eax, eax
	jne	SHORT $LN3@SetColorEd
; Line 5494
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 23
	mov	DWORD PTR flags$[rbp], eax
$LN3@SetColorEd:
; Line 5495
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 100663296				; 06000000H
	test	eax, eax
	jne	SHORT $LN4@SetColorEd
; Line 5496
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 25
	mov	DWORD PTR flags$[rbp], eax
$LN4@SetColorEd:
; Line 5497
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	test	eax, eax
	jne	SHORT $LN5@SetColorEd
; Line 5498
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 27
	mov	DWORD PTR flags$[rbp], eax
$LN5@SetColorEd:
; Line 5499
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@SetColorEd
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA
	add	eax, 10
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HC@IFIJNDDD@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@SetColorEd:
; Line 5500
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 25165824				; 01800000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@SetColorEd
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA
	add	eax, 11
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HE@ECJOEGME@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@SetColorEd:
; Line 5501
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 100663296				; 06000000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@SetColorEd
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA
	add	eax, 12
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HA@IEGAFBEB@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@SetColorEd:
; Line 5502
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN10@SetColorEd
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColorEditOptions@ImGui@@YAXH@Z@4JA
	add	eax, 13
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GO@CDHIBPHM@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@SetColorEd:
; Line 5503
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rax+12220], ecx
; Line 5504
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?SetColorEditOptions@ImGui@@YAXH@Z ENDP			; ImGui::SetColorEditOptions
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
id$ = 68
default_size$ = 100
bb$ = 136
hovered$ = 180
held$ = 212
pressed$ = 244
col_rgb$ = 280
col_rgb_without_alpha$ = 328
grid_step$ = 372
rounding$ = 404
bb_inner$ = 440
off$ = 484
mid_x$10 = 516
col_source$11 = 552
$T12 = 1172
$T13 = 1204
$T14 = 1236
$T15 = 1272
$T16 = 1304
$T17 = 1336
$T18 = 1368
$T19 = 1400
$T20 = 1432
$T21 = 1460
$T22 = 1496
$T23 = 1524
$T24 = 1560
$T25 = 1592
$T26 = 1620
tv284 = 1636
tv236 = 1636
tv90 = 1636
tv325 = 1640
tv299 = 1640
tv282 = 1640
tv263 = 1640
tv260 = 1640
tv233 = 1640
tv323 = 1648
tv297 = 1648
tv258 = 1648
tv256 = 1656
__$ArrayPad$ = 1664
desc_id$ = 1712
col$ = 1720
flags$ = 1728
size$ = 1736
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z PROC ; ImGui::ColorButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5405
$LN25:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5406
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5407
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ColorButto
; Line 5408
	xor	al, al
	jmp	$LN1@ColorButto
$LN2@ColorButto:
; Line 5410
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5411
	xor	r8d, r8d
	mov	rdx, QWORD PTR desc_id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 5412
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR default_size$[rbp], xmm0
; Line 5413
	movss	xmm0, DWORD PTR size$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN3@ColorButto
	jne	SHORT $LN3@ColorButto
; Line 5414
	movss	xmm0, DWORD PTR default_size$[rbp]
	movss	DWORD PTR size$[rbp], xmm0
$LN3@ColorButto:
; Line 5415
	movss	xmm0, DWORD PTR size$[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@ColorButto
	jne	SHORT $LN4@ColorButto
; Line 5416
	movss	xmm0, DWORD PTR default_size$[rbp]
	movss	DWORD PTR size$[rbp+4], xmm0
$LN4@ColorButto:
; Line 5417
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 5418
	movss	xmm0, DWORD PTR size$[rbp+4]
	comiss	xmm0, DWORD PTR default_size$[rbp]
	jb	SHORT $LN21@ColorButto
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	movss	DWORD PTR tv90[rbp], xmm0
	jmp	SHORT $LN22@ColorButto
$LN21@ColorButto:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv90[rbp], xmm0
$LN22@ColorButto:
	movss	xmm1, DWORD PTR tv90[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 5419
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@ColorButto
; Line 5420
	xor	al, al
	jmp	$LN1@ColorButto
$LN5@ColorButto:
; Line 5423
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 5425
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@ColorButto
; Line 5426
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, -393217				; fffffffffff9ffffH
	mov	DWORD PTR flags$[rbp], eax
$LN6@ColorButto:
; Line 5428
	lea	rax, QWORD PTR col_rgb$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR col$[rbp]
	mov	ecx, 16
	rep movsb
; Line 5429
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	SHORT $LN7@ColorButto
; Line 5430
	lea	rax, QWORD PTR col_rgb$[rbp+8]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR col_rgb$[rbp+4]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR col_rgb$[rbp]
	movss	xmm2, DWORD PTR col_rgb$[rbp+8]
	movss	xmm1, DWORD PTR col_rgb$[rbp+4]
	movss	xmm0, DWORD PTR col_rgb$[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
$LN7@ColorButto:
; Line 5432
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR col_rgb$[rbp+8]
	movss	xmm2, DWORD PTR col_rgb$[rbp+4]
	movss	xmm1, DWORD PTR col_rgb$[rbp]
	lea	rcx, QWORD PTR col_rgb_without_alpha$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 5433
	movss	xmm1, DWORD PTR size$[rbp+4]
	movss	xmm0, DWORD PTR size$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	divss	xmm0, DWORD PTR __real@403f5c29
	movss	DWORD PTR grid_step$[rbp], xmm0
; Line 5434
	movss	xmm0, DWORD PTR grid_step$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5536]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR rounding$[rbp], xmm0
; Line 5435
	lea	rax, QWORD PTR bb_inner$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 5436
	xorps	xmm0, xmm0
	movss	DWORD PTR off$[rbp], xmm0
; Line 5437
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN8@ColorButto
; Line 5439
	movss	xmm0, DWORD PTR __real@bf400000
	movss	DWORD PTR off$[rbp], xmm0
; Line 5440
	movss	xmm1, DWORD PTR off$[rbp]
	lea	rcx, QWORD PTR bb_inner$[rbp]
	call	?Expand@ImRect@@QEAAXM@Z		; ImRect::Expand
$LN8@ColorButto:
; Line 5442
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 262144				; 00040000H
	test	eax, eax
	je	$LN9@ColorButto
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR col_rgb$[rbp+12]
	jbe	$LN9@ColorButto
; Line 5444
	movss	xmm0, DWORD PTR bb_inner$[rbp]
	addss	xmm0, DWORD PTR bb_inner$[rbp+8]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR mid_x$10[rbp], xmm0
; Line 5445
	movss	xmm0, DWORD PTR grid_step$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	addss	xmm0, DWORD PTR off$[rbp]
	movss	xmm2, DWORD PTR off$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T16[rbp], rax
	mov	rax, QWORD PTR $T16[rbp]
	mov	QWORD PTR $T19[rbp], rax
	mov	rax, QWORD PTR $T19[rbp]
	mov	QWORD PTR $T20[rbp], rax
	lea	rcx, QWORD PTR col_rgb$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv236[rbp], eax
	movss	xmm0, DWORD PTR bb_inner$[rbp]
	addss	xmm0, DWORD PTR grid_step$[rbp]
	movss	xmm2, DWORD PTR bb_inner$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T15[rbp], rax
	mov	rax, QWORD PTR $T15[rbp]
	mov	QWORD PTR $T17[rbp], rax
	mov	rax, QWORD PTR $T17[rbp]
	mov	QWORD PTR $T18[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv233[rbp], rax
	mov	DWORD PTR [rsp+56], 160			; 000000a0H
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	mov	rax, QWORD PTR $T20[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR grid_step$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv236[rbp]
	mov	r8, QWORD PTR bb_inner$[rbp+8]
	mov	rdx, QWORD PTR $T18[rbp]
	mov	rcx, QWORD PTR tv233[rbp]
	call	?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ; ImGui::RenderColorRectWithAlphaCheckerboard
; Line 5446
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv260[rbp], rax
	lea	rcx, QWORD PTR col_rgb_without_alpha$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv258[rbp], eax
	movss	xmm2, DWORD PTR bb_inner$[rbp+12]
	movss	xmm1, DWORD PTR mid_x$10[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv256[rbp], rax
	mov	DWORD PTR [rsp+40], 80			; 00000050H
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv258[rbp]
	mov	r8, QWORD PTR tv256[rbp]
	lea	rdx, QWORD PTR bb_inner$[rbp]
	mov	rcx, QWORD PTR tv260[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 5447
	jmp	$LN10@ColorButto
$LN9@ColorButto:
; Line 5451
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131072				; 00020000H
	test	eax, eax
	je	SHORT $LN23@ColorButto
	lea	rax, QWORD PTR col_rgb$[rbp]
	mov	QWORD PTR tv263[rbp], rax
	jmp	SHORT $LN24@ColorButto
$LN23@ColorButto:
	lea	rax, QWORD PTR col_rgb_without_alpha$[rbp]
	mov	QWORD PTR tv263[rbp], rax
$LN24@ColorButto:
	mov	rax, QWORD PTR tv263[rbp]
	mov	QWORD PTR $T22[rbp], rax
	lea	rax, QWORD PTR col_source$11[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T22[rbp]
	mov	ecx, 16
	rep movsb
; Line 5452
	movss	xmm0, DWORD PTR __real@3f800000
	comiss	xmm0, DWORD PTR col_source$11[rbp+12]
	jbe	$LN11@ColorButto
; Line 5453
	movss	xmm2, DWORD PTR off$[rbp]
	movss	xmm1, DWORD PTR off$[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T24[rbp], rax
	mov	rax, QWORD PTR $T24[rbp]
	mov	QWORD PTR $T25[rbp], rax
	lea	rcx, QWORD PTR col_source$11[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv284[rbp], eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv282[rbp], rax
	mov	DWORD PTR [rsp+56], 0
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	mov	rax, QWORD PTR $T25[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR grid_step$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv284[rbp]
	mov	r8, QWORD PTR bb_inner$[rbp+8]
	mov	rdx, QWORD PTR bb_inner$[rbp]
	mov	rcx, QWORD PTR tv282[rbp]
	call	?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ; ImGui::RenderColorRectWithAlphaCheckerboard
	jmp	SHORT $LN12@ColorButto
$LN11@ColorButto:
; Line 5455
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv299[rbp], rax
	lea	rcx, QWORD PTR col_source$11[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv297[rbp], eax
	mov	DWORD PTR [rsp+40], 0
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv297[rbp]
	lea	r8, QWORD PTR bb_inner$[rbp+8]
	lea	rdx, QWORD PTR bb_inner$[rbp]
	mov	rcx, QWORD PTR tv299[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN12@ColorButto:
$LN10@ColorButto:
; Line 5457
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 5458
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	$LN13@ColorButto
; Line 5460
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5540]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@ColorButto
; Line 5461
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z ; ImGui::RenderFrameBorder
	jmp	SHORT $LN15@ColorButto
$LN14@ColorButto:
; Line 5463
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv325[rbp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 7
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv323[rbp], eax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+48], xmm0
	mov	DWORD PTR [rsp+40], 0
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv323[rbp]
	lea	r8, QWORD PTR bb$[rbp+8]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR tv325[rbp]
	call	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
$LN15@ColorButto:
$LN13@ColorButto:
; Line 5468
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	$LN16@ColorButto
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	$LN16@ColorButto
	xor	ecx, ecx
	call	?BeginDragDropSource@ImGui@@YA_NH@Z	; ImGui::BeginDragDropSource
	movzx	eax, al
	test	eax, eax
	je	$LN16@ColorButto
; Line 5470
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN17@ColorButto
; Line 5471
	mov	r9d, 2
	mov	r8d, 12
	lea	rdx, QWORD PTR col_rgb$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06LFKNFKEK@_COL3F@
	call	?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z ; ImGui::SetDragDropPayload
	jmp	SHORT $LN18@ColorButto
$LN17@ColorButto:
; Line 5473
	mov	r9d, 2
	mov	r8d, 16
	lea	rdx, QWORD PTR col_rgb$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06LAOCEMMP@_COL4F@
	call	?SetDragDropPayload@ImGui@@YA_NPEBDPEBX_KH@Z ; ImGui::SetDragDropPayload
$LN18@ColorButto:
; Line 5474
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, QWORD PTR [rax]
	mov	r8d, DWORD PTR flags$[rbp]
	mov	rdx, QWORD PTR col$[rbp]
	mov	rcx, QWORD PTR desc_id$[rbp]
	call	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
; Line 5475
	movss	xmm1, DWORD PTR __real@bf800000
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 5476
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_05PDOBBJNA@Color@
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
; Line 5477
	call	?EndDragDropSource@ImGui@@YAXXZ		; ImGui::EndDragDropSource
$LN16@ColorButto:
; Line 5481
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN19@ColorButto
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN19@ColorButto
; Line 5482
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 403046402				; 18060002H
	mov	rcx, QWORD PTR col$[rbp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR desc_id$[rbp]
	call	?ColorTooltip@ImGui@@YAXPEBDPEBMH@Z	; ImGui::ColorTooltip
$LN19@ColorButto:
; Line 5484
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@ColorButto:
; Line 5485
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ENDP ; ImGui::ColorButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
draw_list$ = 72
style$ = 104
io$ = 136
width$ = 164
components$ = 196
alpha_bar$ = 228
picker_pos$ = 264
square_sz$ = 292
bars_width$ = 324
sv_picker_size$ = 356
bar0_pos_x$ = 388
bar1_pos_x$ = 420
bars_triangles_half_sz$ = 452
backup_initial_col$ = 488
wheel_thickness$ = 532
wheel_r_outer$ = 564
wheel_r_inner$ = 596
wheel_center$ = 632
triangle_r$ = 660
triangle_pa$ = 696
triangle_pb$ = 728
triangle_pc$ = 760
H$ = 788
S$ = 820
V$ = 852
R$ = 884
G$ = 916
B$ = 948
value_changed$ = 980
value_changed_h$ = 1012
value_changed_sv$ = 1044
initial_off$37 = 1080
current_off$38 = 1112
initial_dist2$39 = 1140
cos_hue_angle$40 = 1172
sin_hue_angle$41 = 1204
current_off_unrotated$42 = 1240
uu$43 = 1268
vv$44 = 1300
ww$45 = 1332
label_display_end$46 = 1368
col_v4$47 = 1400
sub_flags_to_forward$48 = 1444
ref_col_v4$49 = 1480
value_changed_fix_hue_wrap$ = 1524
sub_flags_to_forward$50 = 1556
sub_flags$51 = 1588
new_H$52 = 1620
new_S$53 = 1652
new_V$54 = 1684
style_alpha8$ = 1716
col_black$ = 1748
col_white$ = 1780
col_midgrey$ = 1812
col_hues$ = 1848
hue_color_f$ = 1912
hue_color32$ = 1956
user_col32_striped_of_alpha$ = 1988
sv_cursor_pos$ = 2024
aeps$55 = 2052
segment_per_arc$56 = 2084
n$57 = 2116
a0$58 = 2148
a1$59 = 2180
vert_start_idx$60 = 2212
vert_end_idx$61 = 2244
gradient_p0$62 = 2280
gradient_p1$63 = 2312
cos_hue_angle$64 = 2340
sin_hue_angle$65 = 2372
hue_cursor_pos$66 = 2408
hue_cursor_rad$67 = 2436
hue_cursor_segments$68 = 2468
tra$69 = 2504
trb$70 = 2536
trc$71 = 2568
uv_white$72 = 2600
i$73 = 2628
bar0_line_y$74 = 2660
sv_cursor_rad$ = 2692
alpha$75 = 2724
bar1_bb$76 = 2760
bar1_line_y$77 = 2804
$T78 = 4372
$T79 = 4404
$T80 = 4436
$T81 = 4468
$T82 = 4500
$T83 = 4532
$T84 = 4564
$T85 = 4596
$T86 = 4628
$T87 = 4660
$T88 = 4692
$T89 = 4740
$T90 = 4772
$T91 = 4804
$T92 = 4836
$T93 = 4868
$T94 = 4900
$T95 = 4932
$T96 = 4964
$T97 = 4996
$T98 = 5028
$T99 = 5060
$T100 = 5096
$T101 = 5128
$T102 = 5156
$T103 = 5188
$T104 = 5220
$T105 = 5252
$T106 = 5288
$T107 = 5320
$T108 = 5348
$T109 = 5380
$T110 = 5416
$T111 = 5448
$T112 = 5480
$T113 = 5512
$T114 = 5540
$T115 = 5576
$T116 = 5604
$T117 = 5636
$T118 = 5672
$T119 = 5704
$T120 = 5736
$T121 = 5768
tv1447 = 5780
tv1373 = 5780
tv1325 = 5780
tv1321 = 5780
tv1278 = 5780
tv1211 = 5780
tv1195 = 5780
tv1114 = 5780
tv1012 = 5780
tv969 = 5780
tv958 = 5780
tv711 = 5780
tv698 = 5780
tv692 = 5780
tv670 = 5780
tv586 = 5780
tv522 = 5780
tv173 = 5780
tv164 = 5780
tv159 = 5780
tv129 = 5780
tv88 = 5780
tv1276 = 5784
tv1213 = 5784
tv1197 = 5784
tv1112 = 5784
tv780 = 5784
tv758 = 5784
tv645 = 5784
tv181 = 5784
tv1274 = 5788
tv1272 = 5792
tv782 = 5792
tv760 = 5792
tv647 = 5792
tv1270 = 5800
tv784 = 5800
tv756 = 5800
tv643 = 5800
tv1268 = 5808
tv778 = 5808
tv751 = 5808
tv633 = 5808
tv774 = 5812
tv636 = 5812
tv640 = 5816
__$ArrayPad$ = 5824
label$ = 5872
col$ = 5880
flags$ = 5888
ref_col$ = 5896
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z PROC		; ImGui::ColorPicker4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5026
$LN109:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	mov	eax, 5904				; 00001710H
	call	__chkstk
	sub	rsp, rax
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 1076				; 00000434H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+5944]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5027
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 5028
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 5029
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN8@ColorPicke
; Line 5030
	xor	al, al
	jmp	$LN1@ColorPicke
$LN8@ColorPicke:
; Line 5032
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR draw_list$[rbp], rax
; Line 5033
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 5034
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8
	mov	QWORD PTR io$[rbp], rax
; Line 5036
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR width$[rbp], xmm0
; Line 5037
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7456				; 00001d20H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextItemData@@QEAAXXZ	; ImGuiNextItemData::ClearFlags
; Line 5039
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 5040
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 5042
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	jne	SHORT $LN9@ColorPicke
; Line 5043
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 16
	mov	DWORD PTR flags$[rbp], eax
$LN9@ColorPicke:
; Line 5046
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN10@ColorPicke
; Line 5047
	mov	edx, DWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR col$[rbp]
	call	?ColorPickerOptionsPopup@ImGui@@YAXPEBMH@Z ; ImGui::ColorPickerOptionsPopup
$LN10@ColorPicke:
; Line 5050
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 100663296				; 06000000H
	test	eax, eax
	jne	SHORT $LN11@ColorPicke
; Line 5051
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 100663296				; 06000000H
	test	eax, eax
	je	SHORT $LN74@ColorPicke
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	mov	DWORD PTR tv88[rbp], eax
	jmp	SHORT $LN75@ColorPicke
$LN74@ColorPicke:
	mov	DWORD PTR tv88[rbp], 177209344		; 0a900000H
$LN75@ColorPicke:
	mov	eax, DWORD PTR tv88[rbp]
	and	eax, 100663296				; 06000000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN11@ColorPicke:
; Line 5052
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	test	eax, eax
	jne	SHORT $LN12@ColorPicke
; Line 5053
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 402653184				; 18000000H
	test	eax, eax
	je	SHORT $LN76@ColorPicke
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	mov	DWORD PTR tv129[rbp], eax
	jmp	SHORT $LN77@ColorPicke
$LN76@ColorPicke:
	mov	DWORD PTR tv129[rbp], 177209344		; 0a900000H
$LN77@ColorPicke:
	mov	eax, DWORD PTR tv129[rbp]
	and	eax, 402653184				; 18000000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN12@ColorPicke:
; Line 5054
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 100663296				; 06000000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN78@ColorPicke
	mov	eax, DWORD PTR ?__LINE__Var@?0??ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z@4JA
	add	eax, 28
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HA@IEGAFBEB@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN78@ColorPicke:
; Line 5055
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN79@ColorPicke
	mov	eax, DWORD PTR ?__LINE__Var@?0??ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z@4JA
	add	eax, 29
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GO@CDHIBPHM@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN79@ColorPicke:
; Line 5056
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN13@ColorPicke
; Line 5057
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 65536				; 00010000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN13@ColorPicke:
; Line 5060
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN80@ColorPicke
	mov	DWORD PTR tv159[rbp], 3
	jmp	SHORT $LN81@ColorPicke
$LN80@ColorPicke:
	mov	DWORD PTR tv159[rbp], 4
$LN81@ColorPicke:
	mov	eax, DWORD PTR tv159[rbp]
	mov	DWORD PTR components$[rbp], eax
; Line 5061
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 65536				; 00010000H
	test	eax, eax
	je	SHORT $LN82@ColorPicke
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN82@ColorPicke
	mov	DWORD PTR tv164[rbp], 1
	jmp	SHORT $LN83@ColorPicke
$LN82@ColorPicke:
	mov	DWORD PTR tv164[rbp], 0
$LN83@ColorPicke:
	movzx	eax, BYTE PTR tv164[rbp]
	mov	BYTE PTR alpha_bar$[rbp], al
; Line 5062
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR picker_pos$[rbp], rax
; Line 5063
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR square_sz$[rbp], xmm0
; Line 5064
	movss	xmm0, DWORD PTR square_sz$[rbp]
	movss	DWORD PTR bars_width$[rbp], xmm0
; Line 5065
	movzx	eax, BYTE PTR alpha_bar$[rbp]
	test	eax, eax
	je	SHORT $LN84@ColorPicke
	mov	DWORD PTR tv173[rbp], 2
	jmp	SHORT $LN85@ColorPicke
$LN84@ColorPicke:
	mov	DWORD PTR tv173[rbp], 1
$LN85@ColorPicke:
	cvtsi2ss xmm0, DWORD PTR tv173[rbp]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR bars_width$[rbp]
	addss	xmm1, DWORD PTR [rax+80]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR width$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR bars_width$[rbp]
	mulss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR tv181[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv181[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR sv_picker_size$[rbp], xmm0
; Line 5066
	movss	xmm0, DWORD PTR picker_pos$[rbp]
	addss	xmm0, DWORD PTR sv_picker_size$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR bar0_pos_x$[rbp], xmm0
; Line 5067
	movss	xmm0, DWORD PTR bar0_pos_x$[rbp]
	addss	xmm0, DWORD PTR bars_width$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR bar1_pos_x$[rbp], xmm0
; Line 5068
	movss	xmm0, DWORD PTR bars_width$[rbp]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR bars_triangles_half_sz$[rbp], xmm0
; Line 5071
	movsxd	rax, DWORD PTR components$[rbp]
	shl	rax, 2
	lea	rcx, QWORD PTR backup_initial_col$[rbp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR col$[rbp]
	mov	rcx, rax
	rep movsb
; Line 5073
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	mulss	xmm0, DWORD PTR __real@3da3d70a
	movss	DWORD PTR wheel_thickness$[rbp], xmm0
; Line 5074
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR wheel_r_outer$[rbp], xmm0
; Line 5075
	movss	xmm0, DWORD PTR wheel_r_outer$[rbp]
	subss	xmm0, DWORD PTR wheel_thickness$[rbp]
	movss	DWORD PTR wheel_r_inner$[rbp], xmm0
; Line 5076
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	addss	xmm1, DWORD PTR bars_width$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR picker_pos$[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR wheel_center$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5079
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	mulss	xmm0, DWORD PTR __real@3cdd2f1b
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR wheel_r_inner$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR triangle_r$[rbp], xmm0
; Line 5080
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR triangle_r$[rbp]
	lea	rcx, QWORD PTR triangle_pa$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5081
	movss	xmm0, DWORD PTR triangle_r$[rbp]
	mulss	xmm0, DWORD PTR __real@bf5db3d0
	movss	xmm1, DWORD PTR triangle_r$[rbp]
	mulss	xmm1, DWORD PTR __real@bf000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR triangle_pb$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5082
	movss	xmm0, DWORD PTR triangle_r$[rbp]
	mulss	xmm0, DWORD PTR __real@3f5db3d0
	movss	xmm1, DWORD PTR triangle_r$[rbp]
	mulss	xmm1, DWORD PTR __real@bf000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR triangle_pc$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5084
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR H$[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR S$[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR V$[rbp], xmm0
; Line 5085
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR R$[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR G$[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR B$[rbp], xmm0
; Line 5086
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	je	$LN14@ColorPicke
; Line 5089
	lea	rax, QWORD PTR V$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR S$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR H$[rbp]
	movss	xmm2, DWORD PTR B$[rbp]
	movss	xmm1, DWORD PTR G$[rbp]
	movss	xmm0, DWORD PTR R$[rbp]
	call	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertRGBtoHSV
; Line 5090
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12232				; 00002fc8H
	mov	r8d, 12
	mov	rdx, QWORD PTR col$[rbp]
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN16@ColorPicke
; Line 5092
	movss	xmm0, DWORD PTR S$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN17@ColorPicke
	jne	SHORT $LN17@ColorPicke
; Line 5093
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12224]
	movss	DWORD PTR H$[rbp], xmm0
$LN17@ColorPicke:
; Line 5094
	movss	xmm0, DWORD PTR V$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN18@ColorPicke
	jne	SHORT $LN18@ColorPicke
; Line 5095
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12228]
	movss	DWORD PTR S$[rbp], xmm0
$LN18@ColorPicke:
$LN16@ColorPicke:
; Line 5097
	jmp	SHORT $LN15@ColorPicke
$LN14@ColorPicke:
; Line 5098
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	SHORT $LN19@ColorPicke
; Line 5100
	lea	rax, QWORD PTR B$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR G$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR R$[rbp]
	movss	xmm2, DWORD PTR V$[rbp]
	movss	xmm1, DWORD PTR S$[rbp]
	movss	xmm0, DWORD PTR H$[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
$LN19@ColorPicke:
$LN15@ColorPicke:
; Line 5103
	mov	BYTE PTR value_changed$[rbp], 0
	mov	BYTE PTR value_changed_h$[rbp], 0
	mov	BYTE PTR value_changed_sv$[rbp], 0
; Line 5105
	mov	dl, 1
	mov	ecx, 8
	call	?PushItemFlag@ImGui@@YAXH_N@Z		; ImGui::PushItemFlag
; Line 5106
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	$LN20@ColorPicke
; Line 5109
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR bars_width$[rbp]
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T78[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_03PPLPHHG@hsv@
	call	?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton
; Line 5110
	call	?IsItemActive@ImGui@@YA_NXZ		; ImGui::IsItemActive
	movzx	eax, al
	test	eax, eax
	je	$LN22@ColorPicke
; Line 5112
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+972]
	lea	r8, QWORD PTR wheel_center$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR initial_off$37[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 5113
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 296				; 00000128H
	lea	r8, QWORD PTR wheel_center$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR current_off$38[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 5114
	lea	rcx, QWORD PTR initial_off$37[rbp]
	call	?ImLengthSqr@@YAMAEBUImVec2@@@Z		; ImLengthSqr
	movss	DWORD PTR initial_dist2$39[rbp], xmm0
; Line 5115
	movss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR wheel_r_inner$[rbp]
	subss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR initial_dist2$39[rbp]
	comiss	xmm1, xmm0
	jb	$LN23@ColorPicke
	movss	xmm0, DWORD PTR wheel_r_outer$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR wheel_r_outer$[rbp]
	addss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm0, xmm1
	comiss	xmm0, DWORD PTR initial_dist2$39[rbp]
	jb	SHORT $LN23@ColorPicke
; Line 5118
	movss	xmm1, DWORD PTR current_off$38[rbp]
	movss	xmm0, DWORD PTR current_off$38[rbp+4]
	call	atan2f
	divss	xmm0, DWORD PTR __real@40490fdb
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR H$[rbp], xmm0
; Line 5119
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR H$[rbp]
	jbe	SHORT $LN24@ColorPicke
; Line 5120
	movss	xmm0, DWORD PTR H$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR H$[rbp], xmm0
$LN24@ColorPicke:
; Line 5121
	mov	BYTE PTR value_changed_h$[rbp], 1
	movzx	eax, BYTE PTR value_changed_h$[rbp]
	mov	BYTE PTR value_changed$[rbp], al
$LN23@ColorPicke:
; Line 5123
	movss	xmm0, DWORD PTR H$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	call	cosf
	movss	DWORD PTR cos_hue_angle$40[rbp], xmm0
; Line 5124
	movss	xmm0, DWORD PTR H$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	call	sinf
	movss	DWORD PTR sin_hue_angle$41[rbp], xmm0
; Line 5125
	movss	xmm3, DWORD PTR sin_hue_angle$41[rbp]
	movss	xmm2, DWORD PTR cos_hue_angle$40[rbp]
	lea	rdx, QWORD PTR initial_off$37[rbp]
	lea	rcx, QWORD PTR $T79[rbp]
	call	?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z	; ImRotate
	mov	r9, rax
	lea	r8, QWORD PTR triangle_pc$[rbp]
	lea	rdx, QWORD PTR triangle_pb$[rbp]
	lea	rcx, QWORD PTR triangle_pa$[rbp]
	call	?ImTriangleContainsPoint@@YA_NAEBUImVec2@@000@Z ; ImTriangleContainsPoint
	movzx	eax, al
	test	eax, eax
	je	$LN25@ColorPicke
; Line 5128
	movss	xmm3, DWORD PTR sin_hue_angle$41[rbp]
	movss	xmm2, DWORD PTR cos_hue_angle$40[rbp]
	lea	rdx, QWORD PTR current_off$38[rbp]
	lea	rcx, QWORD PTR current_off_unrotated$42[rbp]
	call	?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z	; ImRotate
; Line 5129
	lea	r9, QWORD PTR current_off_unrotated$42[rbp]
	lea	r8, QWORD PTR triangle_pc$[rbp]
	lea	rdx, QWORD PTR triangle_pb$[rbp]
	lea	rcx, QWORD PTR triangle_pa$[rbp]
	call	?ImTriangleContainsPoint@@YA_NAEBUImVec2@@000@Z ; ImTriangleContainsPoint
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN26@ColorPicke
; Line 5130
	lea	rax, QWORD PTR current_off_unrotated$42[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR triangle_pc$[rbp]
	lea	r8, QWORD PTR triangle_pb$[rbp]
	lea	rdx, QWORD PTR triangle_pa$[rbp]
	lea	rcx, QWORD PTR $T80[rbp]
	call	?ImTriangleClosestPoint@@YA?AUImVec2@@AEBU1@000@Z ; ImTriangleClosestPoint
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR current_off_unrotated$42[rbp], rax
$LN26@ColorPicke:
; Line 5132
	lea	rax, QWORD PTR ww$45[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR vv$44[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR uu$43[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR current_off_unrotated$42[rbp]
	lea	r8, QWORD PTR triangle_pc$[rbp]
	lea	rdx, QWORD PTR triangle_pb$[rbp]
	lea	rcx, QWORD PTR triangle_pa$[rbp]
	call	?ImTriangleBarycentricCoords@@YAXAEBUImVec2@@000AEAM11@Z ; ImTriangleBarycentricCoords
; Line 5133
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR vv$44[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@38d1b717
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR V$[rbp], xmm0
; Line 5134
	movss	xmm0, DWORD PTR uu$43[rbp]
	divss	xmm0, DWORD PTR V$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@38d1b717
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR S$[rbp], xmm0
; Line 5135
	mov	BYTE PTR value_changed_sv$[rbp], 1
	movzx	eax, BYTE PTR value_changed_sv$[rbp]
	mov	BYTE PTR value_changed$[rbp], al
$LN25@ColorPicke:
$LN22@ColorPicke:
; Line 5138
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN27@ColorPicke
; Line 5139
	mov	edx, 1
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z	; ImGui::OpenPopupOnItemClick
$LN27@ColorPicke:
; Line 5140
	jmp	$LN21@ColorPicke
$LN20@ColorPicke:
; Line 5141
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 33554432				; 02000000H
	test	eax, eax
	je	$LN28@ColorPicke
; Line 5144
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	lea	rcx, QWORD PTR $T81[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_02CPGMCOJE@sv@
	call	?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton
; Line 5145
	call	?IsItemActive@ImGui@@YA_NXZ		; ImGui::IsItemActive
	movzx	eax, al
	test	eax, eax
	je	$LN29@ColorPicke
; Line 5147
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+288]
	subss	xmm0, DWORD PTR picker_pos$[rbp]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR S$[rbp], xmm0
; Line 5148
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+292]
	subss	xmm0, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR V$[rbp], xmm0
; Line 5149
	mov	BYTE PTR value_changed_sv$[rbp], 1
	movzx	eax, BYTE PTR value_changed_sv$[rbp]
	mov	BYTE PTR value_changed$[rbp], al
$LN29@ColorPicke:
; Line 5151
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN30@ColorPicke
; Line 5152
	mov	edx, 1
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z	; ImGui::OpenPopupOnItemClick
$LN30@ColorPicke:
; Line 5155
	movss	xmm2, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR bar0_pos_x$[rbp]
	lea	rcx, QWORD PTR $T82[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, rax
	call	?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetCursorScreenPos
; Line 5156
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR bars_width$[rbp]
	lea	rcx, QWORD PTR $T83[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_03GKJJMKFG@hue@
	call	?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton
; Line 5157
	call	?IsItemActive@ImGui@@YA_NXZ		; ImGui::IsItemActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@ColorPicke
; Line 5159
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+292]
	subss	xmm0, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR H$[rbp], xmm0
; Line 5160
	mov	BYTE PTR value_changed_h$[rbp], 1
	movzx	eax, BYTE PTR value_changed_h$[rbp]
	mov	BYTE PTR value_changed$[rbp], al
$LN31@ColorPicke:
$LN28@ColorPicke:
$LN21@ColorPicke:
; Line 5165
	movzx	eax, BYTE PTR alpha_bar$[rbp]
	test	eax, eax
	je	$LN32@ColorPicke
; Line 5167
	movss	xmm2, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR bar1_pos_x$[rbp]
	lea	rcx, QWORD PTR $T84[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, rax
	call	?SetCursorScreenPos@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetCursorScreenPos
; Line 5168
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR bars_width$[rbp]
	lea	rcx, QWORD PTR $T85[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_05IAEKHIAN@alpha@
	call	?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::InvisibleButton
; Line 5169
	call	?IsItemActive@ImGui@@YA_NXZ		; ImGui::IsItemActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@ColorPicke
; Line 5171
	mov	rax, QWORD PTR io$[rbp]
	movss	xmm0, DWORD PTR [rax+292]
	subss	xmm0, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	subss	xmm1, DWORD PTR __real@3f800000
	divss	xmm0, xmm1
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 5172
	mov	BYTE PTR value_changed$[rbp], 1
$LN33@ColorPicke:
$LN32@ColorPicke:
; Line 5175
	call	?PopItemFlag@ImGui@@YAXXZ		; ImGui::PopItemFlag
; Line 5177
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	jne	SHORT $LN34@ColorPicke
; Line 5179
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 5180
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
$LN34@ColorPicke:
; Line 5183
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN35@ColorPicke
; Line 5185
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_display_end$46[rbp], rax
; Line 5186
	mov	rax, QWORD PTR label_display_end$46[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	SHORT $LN36@ColorPicke
; Line 5188
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN37@ColorPicke
; Line 5189
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
$LN37@ColorPicke:
; Line 5190
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_display_end$46[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN36@ColorPicke:
$LN35@ColorPicke:
; Line 5194
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 256				; 00000100H
	test	eax, eax
	jne	$LN38@ColorPicke
; Line 5196
	mov	dl, 1
	mov	ecx, 16
	call	?PushItemFlag@ImGui@@YAXH_N@Z		; ImGui::PushItemFlag
; Line 5197
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN86@ColorPicke
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv522[rbp], xmm0
	jmp	SHORT $LN87@ColorPicke
$LN86@ColorPicke:
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv522[rbp], xmm0
$LN87@ColorPicke:
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 0
	movss	xmm0, DWORD PTR tv522[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rdi, QWORD PTR col$[rbp]
	movss	xmm3, DWORD PTR [rdi+rax]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm2, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm1, DWORD PTR [rax+rdx]
	lea	rcx, QWORD PTR col_v4$47[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 5198
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN39@ColorPicke
; Line 5199
	lea	rcx, OFFSET FLAT:??_C@_07EDIFFIJI@Current@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
$LN39@ColorPicke:
; Line 5201
	mov	DWORD PTR sub_flags_to_forward$48[rbp], 403570752 ; 180e0040H
; Line 5202
	movss	xmm0, DWORD PTR square_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR square_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@40400000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T86[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	ecx, DWORD PTR sub_flags_to_forward$48[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	and	edx, ecx
	mov	ecx, edx
	mov	r9, QWORD PTR [rax]
	mov	r8d, ecx
	lea	rdx, QWORD PTR col_v4$47[rbp]
	lea	rcx, OFFSET FLAT:??_C@_09CDENILGE@?$CD?$CDcurrent@
	call	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
; Line 5203
	cmp	QWORD PTR ref_col$[rbp], 0
	je	$LN40@ColorPicke
; Line 5205
	lea	rcx, OFFSET FLAT:??_C@_08DCPBJHAO@Original@
	call	?Text@ImGui@@YAXPEBDZZ			; ImGui::Text
; Line 5206
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN88@ColorPicke
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv586[rbp], xmm0
	jmp	SHORT $LN89@ColorPicke
$LN88@ColorPicke:
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR ref_col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv586[rbp], xmm0
$LN89@ColorPicke:
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 0
	movss	xmm0, DWORD PTR tv586[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rdi, QWORD PTR ref_col$[rbp]
	movss	xmm3, DWORD PTR [rdi+rax]
	mov	rax, QWORD PTR ref_col$[rbp]
	movss	xmm2, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR ref_col$[rbp]
	movss	xmm1, DWORD PTR [rax+rdx]
	lea	rcx, QWORD PTR ref_col_v4$49[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 5207
	movss	xmm0, DWORD PTR square_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR square_sz$[rbp]
	mulss	xmm1, DWORD PTR __real@40400000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T87[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	ecx, DWORD PTR sub_flags_to_forward$48[rbp]
	mov	edx, DWORD PTR flags$[rbp]
	and	edx, ecx
	mov	ecx, edx
	mov	r9, QWORD PTR [rax]
	mov	r8d, ecx
	lea	rdx, QWORD PTR ref_col_v4$49[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0L@IGJKOBOK@?$CD?$CDoriginal@
	call	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN41@ColorPicke
; Line 5209
	movsxd	rax, DWORD PTR components$[rbp]
	shl	rax, 2
	mov	rdi, QWORD PTR col$[rbp]
	mov	rsi, QWORD PTR ref_col$[rbp]
	mov	rcx, rax
	rep movsb
; Line 5210
	mov	BYTE PTR value_changed$[rbp], 1
$LN41@ColorPicke:
$LN40@ColorPicke:
; Line 5213
	call	?PopItemFlag@ImGui@@YAXXZ		; ImGui::PopItemFlag
; Line 5214
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
$LN38@ColorPicke:
; Line 5218
	movzx	eax, BYTE PTR value_changed_h$[rbp]
	test	eax, eax
	jne	SHORT $LN43@ColorPicke
	movzx	eax, BYTE PTR value_changed_sv$[rbp]
	test	eax, eax
	je	$LN42@ColorPicke
$LN43@ColorPicke:
; Line 5220
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	je	$LN44@ColorPicke
; Line 5222
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv645[rbp], rax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv647[rbp], rax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv643[rbp], rax
	movss	xmm0, DWORD PTR V$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN90@ColorPicke
	movss	xmm0, DWORD PTR V$[rbp]
	movss	DWORD PTR tv633[rbp], xmm0
	jmp	SHORT $LN91@ColorPicke
$LN90@ColorPicke:
	movss	xmm0, DWORD PTR __real@358637bd
	movss	DWORD PTR tv633[rbp], xmm0
$LN91@ColorPicke:
	movss	xmm0, DWORD PTR S$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN92@ColorPicke
	movss	xmm0, DWORD PTR S$[rbp]
	movss	DWORD PTR tv636[rbp], xmm0
	jmp	SHORT $LN93@ColorPicke
$LN92@ColorPicke:
	movss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR tv636[rbp], xmm0
$LN93@ColorPicke:
	movss	xmm0, DWORD PTR H$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN94@ColorPicke
	movss	xmm0, DWORD PTR H$[rbp]
	subss	xmm0, DWORD PTR __real@3727c5ac
	movss	DWORD PTR tv640[rbp], xmm0
	jmp	SHORT $LN95@ColorPicke
$LN94@ColorPicke:
	movss	xmm0, DWORD PTR H$[rbp]
	movss	DWORD PTR tv640[rbp], xmm0
$LN95@ColorPicke:
	mov	rax, QWORD PTR tv645[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv647[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv643[rbp]
	movss	xmm2, DWORD PTR tv633[rbp]
	movss	xmm1, DWORD PTR tv636[rbp]
	movss	xmm0, DWORD PTR tv640[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
; Line 5223
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR H$[rbp]
	movss	DWORD PTR [rax+12224], xmm0
; Line 5224
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR S$[rbp]
	movss	DWORD PTR [rax+12228], xmm0
; Line 5225
	mov	rax, QWORD PTR g$[rbp]
	lea	rdi, QWORD PTR [rax+12232]
	mov	rsi, QWORD PTR col$[rbp]
	mov	ecx, 12
	rep movsb
; Line 5226
	jmp	SHORT $LN45@ColorPicke
$LN44@ColorPicke:
; Line 5227
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	SHORT $LN46@ColorPicke
; Line 5229
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR H$[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 5230
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR S$[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 5231
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR V$[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
$LN46@ColorPicke:
$LN45@ColorPicke:
$LN42@ColorPicke:
; Line 5236
	mov	BYTE PTR value_changed_fix_hue_wrap$[rbp], 0
; Line 5237
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	$LN47@ColorPicke
; Line 5239
	movzx	eax, BYTE PTR alpha_bar$[rbp]
	test	eax, eax
	je	SHORT $LN96@ColorPicke
	movss	xmm0, DWORD PTR bar1_pos_x$[rbp]
	movss	DWORD PTR tv670[rbp], xmm0
	jmp	SHORT $LN97@ColorPicke
$LN96@ColorPicke:
	movss	xmm0, DWORD PTR bar0_pos_x$[rbp]
	movss	DWORD PTR tv670[rbp], xmm0
$LN97@ColorPicke:
	movss	xmm0, DWORD PTR tv670[rbp]
	addss	xmm0, DWORD PTR bars_width$[rbp]
	subss	xmm0, DWORD PTR picker_pos$[rbp]
	call	?PushItemWidth@ImGui@@YAXM@Z		; ImGui::PushItemWidth
; Line 5240
	mov	DWORD PTR sub_flags_to_forward$50[rbp], 428736538 ; 198e001aH
; Line 5241
	mov	eax, DWORD PTR sub_flags_to_forward$50[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	and	ecx, eax
	mov	eax, ecx
	or	eax, 4
	mov	DWORD PTR sub_flags$51[rbp], eax
; Line 5242
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN49@ColorPicke
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	test	eax, eax
	jne	SHORT $LN48@ColorPicke
$LN49@ColorPicke:
; Line 5243
	mov	eax, DWORD PTR sub_flags$51[rbp]
	bts	eax, 20
	mov	r8d, eax
	mov	rdx, QWORD PTR col$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_05JCABMAIH@?$CD?$CDrgb@
	call	?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z	; ImGui::ColorEdit4
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN50@ColorPicke
; Line 5247
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7260], 0
	je	SHORT $LN98@ColorPicke
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+7273]
	test	eax, eax
	jne	SHORT $LN98@ColorPicke
	mov	DWORD PTR tv692[rbp], 1
	jmp	SHORT $LN99@ColorPicke
$LN98@ColorPicke:
	mov	DWORD PTR tv692[rbp], 0
$LN99@ColorPicke:
	movzx	eax, BYTE PTR tv692[rbp]
	mov	BYTE PTR value_changed_fix_hue_wrap$[rbp], al
; Line 5248
	mov	BYTE PTR value_changed$[rbp], 1
$LN50@ColorPicke:
$LN48@ColorPicke:
; Line 5250
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	jne	SHORT $LN52@ColorPicke
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	test	eax, eax
	jne	SHORT $LN51@ColorPicke
$LN52@ColorPicke:
; Line 5251
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv698[rbp], eax
	mov	ecx, DWORD PTR sub_flags$51[rbp]
	bts	ecx, 21
	mov	r8d, ecx
	mov	rdx, QWORD PTR col$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_05JICEKLIF@?$CD?$CDhsv@
	call	?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z	; ImGui::ColorEdit4
	movzx	eax, al
	mov	ecx, DWORD PTR tv698[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
$LN51@ColorPicke:
; Line 5252
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	jne	SHORT $LN54@ColorPicke
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	test	eax, eax
	jne	SHORT $LN53@ColorPicke
$LN54@ColorPicke:
; Line 5253
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv711[rbp], eax
	mov	ecx, DWORD PTR sub_flags$51[rbp]
	bts	ecx, 22
	mov	r8d, ecx
	mov	rdx, QWORD PTR col$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_05BOAMFJMJ@?$CD?$CDhex@
	call	?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z	; ImGui::ColorEdit4
	movzx	eax, al
	mov	ecx, DWORD PTR tv711[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
$LN53@ColorPicke:
; Line 5254
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
$LN47@ColorPicke:
; Line 5258
	movzx	eax, BYTE PTR value_changed_fix_hue_wrap$[rbp]
	test	eax, eax
	je	$LN55@ColorPicke
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	je	$LN55@ColorPicke
; Line 5261
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	rdi, QWORD PTR new_V$54[rbp]
	mov	QWORD PTR [rsp+40], rdi
	lea	rdi, QWORD PTR new_S$53[rbp]
	mov	QWORD PTR [rsp+32], rdi
	lea	r9, QWORD PTR new_H$52[rbp]
	mov	rdi, QWORD PTR col$[rbp]
	movss	xmm2, DWORD PTR [rdi+rax]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rax+rdx]
	call	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertRGBtoHSV
; Line 5262
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR new_H$52[rbp]
	jb	$LN56@ColorPicke
	movss	xmm0, DWORD PTR H$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN56@ColorPicke
; Line 5264
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR new_V$54[rbp]
	jb	$LN57@ColorPicke
	movss	xmm0, DWORD PTR V$[rbp]
	ucomiss	xmm0, DWORD PTR new_V$54[rbp]
	jp	SHORT $LN108@ColorPicke
	je	$LN57@ColorPicke
$LN108@ColorPicke:
; Line 5265
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv758[rbp], rax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv760[rbp], rax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv756[rbp], rax
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR new_V$54[rbp]
	jb	SHORT $LN100@ColorPicke
	movss	xmm0, DWORD PTR V$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv751[rbp], xmm0
	jmp	SHORT $LN101@ColorPicke
$LN100@ColorPicke:
	movss	xmm0, DWORD PTR new_V$54[rbp]
	movss	DWORD PTR tv751[rbp], xmm0
$LN101@ColorPicke:
	mov	rax, QWORD PTR tv758[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv760[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv756[rbp]
	movss	xmm2, DWORD PTR tv751[rbp]
	movss	xmm1, DWORD PTR S$[rbp]
	movss	xmm0, DWORD PTR H$[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
	jmp	$LN58@ColorPicke
$LN57@ColorPicke:
; Line 5266
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR new_S$53[rbp]
	jb	$LN59@ColorPicke
; Line 5267
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv780[rbp], rax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv782[rbp], rax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv784[rbp], rax
	movss	xmm0, DWORD PTR new_V$54[rbp]
	movss	DWORD PTR tv778[rbp], xmm0
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR new_S$53[rbp]
	jb	SHORT $LN102@ColorPicke
	movss	xmm0, DWORD PTR S$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv774[rbp], xmm0
	jmp	SHORT $LN103@ColorPicke
$LN102@ColorPicke:
	movss	xmm0, DWORD PTR new_S$53[rbp]
	movss	DWORD PTR tv774[rbp], xmm0
$LN103@ColorPicke:
	mov	rax, QWORD PTR tv780[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv782[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv784[rbp]
	movss	xmm2, DWORD PTR tv778[rbp]
	movss	xmm1, DWORD PTR tv774[rbp]
	movss	xmm0, DWORD PTR H$[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
$LN59@ColorPicke:
$LN58@ColorPicke:
$LN56@ColorPicke:
$LN55@ColorPicke:
; Line 5271
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	$LN60@ColorPicke
; Line 5273
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	je	$LN61@ColorPicke
; Line 5275
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR R$[rbp], xmm0
; Line 5276
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR G$[rbp], xmm0
; Line 5277
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR B$[rbp], xmm0
; Line 5278
	lea	rax, QWORD PTR V$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR S$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR H$[rbp]
	movss	xmm2, DWORD PTR B$[rbp]
	movss	xmm1, DWORD PTR G$[rbp]
	movss	xmm0, DWORD PTR R$[rbp]
	call	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertRGBtoHSV
; Line 5279
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12232				; 00002fc8H
	mov	r8d, 12
	mov	rdx, QWORD PTR col$[rbp]
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN63@ColorPicke
; Line 5281
	movss	xmm0, DWORD PTR S$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN64@ColorPicke
	jne	SHORT $LN64@ColorPicke
; Line 5282
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12224]
	movss	DWORD PTR H$[rbp], xmm0
$LN64@ColorPicke:
; Line 5283
	movss	xmm0, DWORD PTR V$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN65@ColorPicke
	jne	SHORT $LN65@ColorPicke
; Line 5284
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+12228]
	movss	DWORD PTR S$[rbp], xmm0
$LN65@ColorPicke:
$LN63@ColorPicke:
; Line 5286
	jmp	$LN62@ColorPicke
$LN61@ColorPicke:
; Line 5287
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	$LN66@ColorPicke
; Line 5289
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR H$[rbp], xmm0
; Line 5290
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR S$[rbp], xmm0
; Line 5291
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR V$[rbp], xmm0
; Line 5292
	lea	rax, QWORD PTR B$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR G$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR R$[rbp]
	movss	xmm2, DWORD PTR V$[rbp]
	movss	xmm1, DWORD PTR S$[rbp]
	movss	xmm0, DWORD PTR H$[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
$LN66@ColorPicke:
$LN62@ColorPicke:
$LN60@ColorPicke:
; Line 5296
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	mov	DWORD PTR style_alpha8$[rbp], eax
; Line 5297
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	mov	DWORD PTR col_black$[rbp], eax
; Line 5298
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	or	eax, 65280				; 0000ff00H
	or	eax, 255				; 000000ffH
	mov	DWORD PTR col_white$[rbp], eax
; Line 5299
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	bts	eax, 23
	bts	eax, 15
	bts	eax, 7
	mov	DWORD PTR col_midgrey$[rbp], eax
; Line 5300
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 255				; 000000ffH
	mov	DWORD PTR col_hues$[rbp], eax
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 65280				; 0000ff00H
	or	eax, 255				; 000000ffH
	mov	DWORD PTR col_hues$[rbp+4], eax
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 65280				; 0000ff00H
	mov	DWORD PTR col_hues$[rbp+8], eax
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	or	eax, 65280				; 0000ff00H
	mov	DWORD PTR col_hues$[rbp+12], eax
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	mov	DWORD PTR col_hues$[rbp+16], eax
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	or	eax, 255				; 000000ffH
	mov	DWORD PTR col_hues$[rbp+20], eax
	mov	eax, DWORD PTR style_alpha8$[rbp]
	shl	eax, 24
	or	eax, 255				; 000000ffH
	mov	DWORD PTR col_hues$[rbp+24], eax
; Line 5302
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR hue_color_f$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	lea	rax, QWORD PTR hue_color_f$[rbp+8]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR hue_color_f$[rbp+4]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR hue_color_f$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR H$[rbp]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
; Line 5303
	lea	rcx, QWORD PTR hue_color_f$[rbp]
	call	?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z ; ImGui::ColorConvertFloat4ToU32
	mov	DWORD PTR hue_color32$[rbp], eax
; Line 5304
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR B$[rbp]
	movss	xmm2, DWORD PTR G$[rbp]
	movss	xmm1, DWORD PTR R$[rbp]
	lea	rcx, QWORD PTR $T88[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	rcx, rax
	call	?ColorConvertFloat4ToU32@ImGui@@YAIAEBUImVec4@@@Z ; ImGui::ColorConvertFloat4ToU32
	mov	DWORD PTR user_col32_striped_of_alpha$[rbp], eax
; Line 5306
	lea	rcx, QWORD PTR sv_cursor_pos$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
; Line 5308
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	$LN67@ColorPicke
; Line 5311
	movss	xmm0, DWORD PTR __real@3f000000
	divss	xmm0, DWORD PTR wheel_r_outer$[rbp]
	movss	DWORD PTR aeps$55[rbp], xmm0
; Line 5312
	cvttss2si eax, DWORD PTR wheel_r_outer$[rbp]
	cdq
	mov	ecx, 12
	idiv	ecx
	mov	edx, eax
	mov	ecx, 4
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR segment_per_arc$56[rbp], eax
; Line 5313
	mov	DWORD PTR n$57[rbp], 0
	jmp	SHORT $LN4@ColorPicke
$LN2@ColorPicke:
	mov	eax, DWORD PTR n$57[rbp]
	inc	eax
	mov	DWORD PTR n$57[rbp], eax
$LN4@ColorPicke:
	cmp	DWORD PTR n$57[rbp], 6
	jge	$LN3@ColorPicke
; Line 5315
	cvtsi2ss xmm0, DWORD PTR n$57[rbp]
	divss	xmm0, DWORD PTR __real@40c00000
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	subss	xmm0, DWORD PTR aeps$55[rbp]
	movss	DWORD PTR a0$58[rbp], xmm0
; Line 5316
	cvtsi2ss xmm0, DWORD PTR n$57[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR __real@40c00000
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	addss	xmm0, DWORD PTR aeps$55[rbp]
	movss	DWORD PTR a1$59[rbp], xmm0
; Line 5317
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR vert_start_idx$60[rbp], eax
; Line 5318
	movss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	addss	xmm0, DWORD PTR wheel_r_outer$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	eax, DWORD PTR segment_per_arc$56[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm1, DWORD PTR a1$59[rbp]
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR a0$58[rbp]
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR wheel_center$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
; Line 5319
	movss	xmm3, DWORD PTR wheel_thickness$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR col_white$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
; Line 5320
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR vert_end_idx$61[rbp], eax
; Line 5323
	movss	xmm0, DWORD PTR a0$58[rbp]
	call	sinf
	mulss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	movss	xmm1, DWORD PTR wheel_center$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv958[rbp], xmm0
	movss	xmm0, DWORD PTR a0$58[rbp]
	call	cosf
	mulss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	movss	xmm1, DWORD PTR wheel_center$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv958[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR gradient_p0$62[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5324
	movss	xmm0, DWORD PTR a1$59[rbp]
	call	sinf
	mulss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	movss	xmm1, DWORD PTR wheel_center$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv969[rbp], xmm0
	movss	xmm0, DWORD PTR a1$59[rbp]
	call	cosf
	mulss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	movss	xmm1, DWORD PTR wheel_center$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv969[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR gradient_p1$63[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5325
	mov	eax, DWORD PTR n$57[rbp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR n$57[rbp]
	mov	eax, DWORD PTR col_hues$[rbp+rax*4]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR col_hues$[rbp+rcx*4]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR gradient_p1$63[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR gradient_p0$62[rbp]
	mov	r8d, DWORD PTR vert_end_idx$61[rbp]
	mov	edx, DWORD PTR vert_start_idx$60[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
; Line 5326
	jmp	$LN2@ColorPicke
$LN3@ColorPicke:
; Line 5329
	movss	xmm0, DWORD PTR H$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	call	cosf
	movss	DWORD PTR cos_hue_angle$64[rbp], xmm0
; Line 5330
	movss	xmm0, DWORD PTR H$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	call	sinf
	movss	DWORD PTR sin_hue_angle$65[rbp], xmm0
; Line 5331
	movss	xmm0, DWORD PTR wheel_r_inner$[rbp]
	addss	xmm0, DWORD PTR wheel_r_outer$[rbp]
	movss	xmm1, DWORD PTR sin_hue_angle$65[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR wheel_center$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR wheel_r_inner$[rbp]
	addss	xmm1, DWORD PTR wheel_r_outer$[rbp]
	movss	xmm2, DWORD PTR cos_hue_angle$64[rbp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR wheel_center$[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR hue_cursor_pos$66[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 5332
	movzx	eax, BYTE PTR value_changed_h$[rbp]
	test	eax, eax
	je	SHORT $LN104@ColorPicke
	movss	xmm0, DWORD PTR wheel_thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR tv1012[rbp], xmm0
	jmp	SHORT $LN105@ColorPicke
$LN104@ColorPicke:
	movss	xmm0, DWORD PTR wheel_thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3f0ccccd
	movss	DWORD PTR tv1012[rbp], xmm0
$LN105@ColorPicke:
	movss	xmm0, DWORD PTR tv1012[rbp]
	movss	DWORD PTR hue_cursor_rad$67[rbp], xmm0
; Line 5333
	movss	xmm0, DWORD PTR hue_cursor_rad$67[rbp]
	divss	xmm0, DWORD PTR __real@3fb33333
	cvttss2si eax, xmm0
	mov	r8d, 32					; 00000020H
	mov	edx, 9
	mov	ecx, eax
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR hue_cursor_segments$68[rbp], eax
; Line 5334
	mov	eax, DWORD PTR hue_cursor_segments$68[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR hue_color32$[rbp]
	movss	xmm2, DWORD PTR hue_cursor_rad$67[rbp]
	lea	rdx, QWORD PTR hue_cursor_pos$66[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
; Line 5335
	movss	xmm0, DWORD PTR hue_cursor_rad$67[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+40], xmm1
	mov	eax, DWORD PTR hue_cursor_segments$68[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR col_midgrey$[rbp]
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR hue_cursor_pos$66[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
; Line 5336
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR hue_cursor_segments$68[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR col_white$[rbp]
	movss	xmm2, DWORD PTR hue_cursor_rad$67[rbp]
	lea	rdx, QWORD PTR hue_cursor_pos$66[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
; Line 5339
	movss	xmm3, DWORD PTR sin_hue_angle$65[rbp]
	movss	xmm2, DWORD PTR cos_hue_angle$64[rbp]
	lea	rdx, QWORD PTR triangle_pa$[rbp]
	lea	rcx, QWORD PTR $T89[rbp]
	call	?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z	; ImRotate
	mov	r8, rax
	lea	rdx, QWORD PTR wheel_center$[rbp]
	lea	rcx, QWORD PTR tra$69[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
; Line 5340
	movss	xmm3, DWORD PTR sin_hue_angle$65[rbp]
	movss	xmm2, DWORD PTR cos_hue_angle$64[rbp]
	lea	rdx, QWORD PTR triangle_pb$[rbp]
	lea	rcx, QWORD PTR $T90[rbp]
	call	?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z	; ImRotate
	mov	r8, rax
	lea	rdx, QWORD PTR wheel_center$[rbp]
	lea	rcx, QWORD PTR trb$70[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
; Line 5341
	movss	xmm3, DWORD PTR sin_hue_angle$65[rbp]
	movss	xmm2, DWORD PTR cos_hue_angle$64[rbp]
	lea	rdx, QWORD PTR triangle_pc$[rbp]
	lea	rcx, QWORD PTR $T91[rbp]
	call	?ImRotate@@YA?AUImVec2@@AEBU1@MM@Z	; ImRotate
	mov	r8, rax
	lea	rdx, QWORD PTR wheel_center$[rbp]
	lea	rcx, QWORD PTR trc$71[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
; Line 5342
	lea	rcx, QWORD PTR uv_white$72[rbp]
	call	?GetFontTexUvWhitePixel@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetFontTexUvWhitePixel
; Line 5343
	mov	r8d, 6
	mov	edx, 6
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 5344
	mov	r9d, DWORD PTR hue_color32$[rbp]
	lea	r8, QWORD PTR uv_white$72[rbp]
	lea	rdx, QWORD PTR tra$69[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimVtx
; Line 5345
	mov	r9d, DWORD PTR hue_color32$[rbp]
	lea	r8, QWORD PTR uv_white$72[rbp]
	lea	rdx, QWORD PTR trb$70[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimVtx
; Line 5346
	mov	r9d, DWORD PTR col_white$[rbp]
	lea	r8, QWORD PTR uv_white$72[rbp]
	lea	rdx, QWORD PTR trc$71[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimVtx
; Line 5347
	xor	r9d, r9d
	lea	r8, QWORD PTR uv_white$72[rbp]
	lea	rdx, QWORD PTR tra$69[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimVtx
; Line 5348
	mov	r9d, DWORD PTR col_black$[rbp]
	lea	r8, QWORD PTR uv_white$72[rbp]
	lea	rdx, QWORD PTR trb$70[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimVtx
; Line 5349
	xor	r9d, r9d
	lea	r8, QWORD PTR uv_white$72[rbp]
	lea	rdx, QWORD PTR trc$71[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimVtx
; Line 5350
	movss	xmm0, DWORD PTR __real@3fc00000
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR col_midgrey$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR trc$71[rbp]
	lea	r8, QWORD PTR trb$70[rbp]
	lea	rdx, QWORD PTR tra$69[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z ; ImDrawList::AddTriangle
; Line 5351
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR V$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR tv1114[rbp], xmm0
	movss	xmm0, DWORD PTR S$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movaps	xmm3, xmm0
	lea	r8, QWORD PTR tra$69[rbp]
	lea	rdx, QWORD PTR trc$71[rbp]
	lea	rcx, QWORD PTR $T92[rbp]
	call	?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z	; ImLerp
	mov	QWORD PTR tv1112[rbp], rax
	movss	xmm3, DWORD PTR tv1114[rbp]
	lea	r8, QWORD PTR trb$70[rbp]
	mov	rdx, QWORD PTR tv1112[rbp]
	lea	rcx, QWORD PTR $T93[rbp]
	call	?ImLerp@@YA?AUImVec2@@AEBU1@0M@Z	; ImLerp
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR sv_cursor_pos$[rbp], rax
; Line 5352
	jmp	$LN68@ColorPicke
$LN67@ColorPicke:
; Line 5353
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 33554432				; 02000000H
	test	eax, eax
	je	$LN69@ColorPicke
; Line 5356
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	lea	rcx, QWORD PTR $T94[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR picker_pos$[rbp]
	lea	rcx, QWORD PTR $T95[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	ecx, DWORD PTR col_white$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR hue_color32$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR hue_color32$[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR col_white$[rbp]
	mov	r8, rax
	lea	rdx, QWORD PTR picker_pos$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor
; Line 5357
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	lea	rcx, QWORD PTR $T96[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR picker_pos$[rbp]
	lea	rcx, QWORD PTR $T97[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	ecx, DWORD PTR col_black$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR col_black$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, rax
	lea	rdx, QWORD PTR picker_pos$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor
; Line 5358
	movss	xmm2, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR sv_picker_size$[rbp]
	lea	rcx, QWORD PTR $T98[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR picker_pos$[rbp]
	lea	rcx, QWORD PTR $T99[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T101[rbp], rax
	mov	rax, QWORD PTR picker_pos$[rbp]
	mov	QWORD PTR $T100[rbp], rax
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR $T101[rbp]
	mov	rcx, QWORD PTR $T100[rbp]
	call	?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z ; ImGui::RenderFrameBorder
; Line 5359
	movss	xmm0, DWORD PTR picker_pos$[rbp]
	addss	xmm0, DWORD PTR sv_picker_size$[rbp]
	subss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1195[rbp], xmm0
	movss	xmm1, DWORD PTR picker_pos$[rbp]
	addss	xmm1, DWORD PTR __real@40000000
	movss	DWORD PTR tv1197[rbp], xmm1
	movss	xmm0, DWORD PTR S$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR picker_pos$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv1195[rbp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR tv1197[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR sv_cursor_pos$[rbp], xmm0
; Line 5360
	movss	xmm0, DWORD PTR picker_pos$[rbp+4]
	addss	xmm0, DWORD PTR sv_picker_size$[rbp]
	subss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1211[rbp], xmm0
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, DWORD PTR __real@40000000
	movss	DWORD PTR tv1213[rbp], xmm1
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, DWORD PTR V$[rbp]
	movaps	xmm0, xmm2
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	mulss	xmm0, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR tv1211[rbp]
	movaps	xmm2, xmm1
	movss	xmm1, DWORD PTR tv1213[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR sv_cursor_pos$[rbp+4], xmm0
; Line 5363
	mov	DWORD PTR i$73[rbp], 0
	jmp	SHORT $LN7@ColorPicke
$LN5@ColorPicke:
	mov	eax, DWORD PTR i$73[rbp]
	inc	eax
	mov	DWORD PTR i$73[rbp], eax
$LN7@ColorPicke:
	cmp	DWORD PTR i$73[rbp], 6
	jge	$LN6@ColorPicke
; Line 5364
	mov	eax, DWORD PTR i$73[rbp]
	inc	eax
	cdqe
	mov	eax, DWORD PTR col_hues$[rbp+rax*4]
	mov	DWORD PTR tv1278[rbp], eax
	mov	eax, DWORD PTR i$73[rbp]
	inc	eax
	cdqe
	mov	eax, DWORD PTR col_hues$[rbp+rax*4]
	mov	DWORD PTR tv1276[rbp], eax
	movsxd	rax, DWORD PTR i$73[rbp]
	mov	eax, DWORD PTR col_hues$[rbp+rax*4]
	mov	DWORD PTR tv1274[rbp], eax
	movsxd	rax, DWORD PTR i$73[rbp]
	mov	eax, DWORD PTR col_hues$[rbp+rax*4]
	mov	DWORD PTR tv1272[rbp], eax
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	divss	xmm0, DWORD PTR __real@40c00000
	mov	eax, DWORD PTR i$73[rbp]
	inc	eax
	cvtsi2ss xmm1, eax
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR bar0_pos_x$[rbp]
	addss	xmm1, DWORD PTR bars_width$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T102[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv1270[rbp], rax
	movss	xmm0, DWORD PTR sv_picker_size$[rbp]
	divss	xmm0, DWORD PTR __real@40c00000
	cvtsi2ss xmm1, DWORD PTR i$73[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR bar0_pos_x$[rbp]
	lea	rcx, QWORD PTR $T103[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv1268[rbp], rax
	mov	eax, DWORD PTR tv1278[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR tv1276[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR tv1274[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tv1272[rbp]
	mov	r8, QWORD PTR tv1270[rbp]
	mov	rdx, QWORD PTR tv1268[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor
	jmp	$LN5@ColorPicke
$LN6@ColorPicke:
; Line 5365
	movss	xmm0, DWORD PTR H$[rbp]
	mulss	xmm0, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR bar0_line_y$74[rbp], xmm0
; Line 5366
	movss	xmm0, DWORD PTR picker_pos$[rbp+4]
	addss	xmm0, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR bar0_pos_x$[rbp]
	addss	xmm1, DWORD PTR bars_width$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T104[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T107[rbp], rax
	movss	xmm2, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR bar0_pos_x$[rbp]
	lea	rcx, QWORD PTR $T105[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T106[rbp], rax
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR $T107[rbp]
	mov	rcx, QWORD PTR $T106[rbp]
	call	?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z ; ImGui::RenderFrameBorder
; Line 5367
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv1321[rbp], xmm0
	movss	xmm0, DWORD PTR bars_triangles_half_sz$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR bars_triangles_half_sz$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T108[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T111[rbp], rax
	mov	rax, QWORD PTR $T111[rbp]
	mov	QWORD PTR $T113[rbp], rax
	movss	xmm0, DWORD PTR bar0_pos_x$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR bar0_line_y$74[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T109[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T110[rbp], rax
	mov	rax, QWORD PTR $T110[rbp]
	mov	QWORD PTR $T112[rbp], rax
	movss	xmm0, DWORD PTR bars_width$[rbp]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1321[rbp]
	movss	DWORD PTR [rsp+32], xmm1
	movaps	xmm3, xmm0
	mov	r8, QWORD PTR $T113[rbp]
	mov	rdx, QWORD PTR $T112[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z ; RenderArrowsForVerticalBar
$LN69@ColorPicke:
$LN68@ColorPicke:
; Line 5371
	movzx	eax, BYTE PTR value_changed_sv$[rbp]
	test	eax, eax
	je	SHORT $LN106@ColorPicke
	movss	xmm0, DWORD PTR __real@41200000
	movss	DWORD PTR tv1325[rbp], xmm0
	jmp	SHORT $LN107@ColorPicke
$LN106@ColorPicke:
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR tv1325[rbp], xmm0
$LN107@ColorPicke:
	movss	xmm0, DWORD PTR tv1325[rbp]
	movss	DWORD PTR sv_cursor_rad$[rbp], xmm0
; Line 5372
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, DWORD PTR user_col32_striped_of_alpha$[rbp]
	movss	xmm2, DWORD PTR sv_cursor_rad$[rbp]
	lea	rdx, QWORD PTR sv_cursor_pos$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
; Line 5373
	movss	xmm0, DWORD PTR sv_cursor_rad$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+40], xmm1
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, DWORD PTR col_midgrey$[rbp]
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR sv_cursor_pos$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
; Line 5374
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+40], xmm0
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, DWORD PTR col_white$[rbp]
	movss	xmm2, DWORD PTR sv_cursor_rad$[rbp]
	lea	rdx, QWORD PTR sv_cursor_pos$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
; Line 5377
	movzx	eax, BYTE PTR alpha_bar$[rbp]
	test	eax, eax
	je	$LN70@ColorPicke
; Line 5379
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR alpha$75[rbp], xmm0
; Line 5380
	movss	xmm0, DWORD PTR picker_pos$[rbp+4]
	addss	xmm0, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR bar1_pos_x$[rbp]
	addss	xmm1, DWORD PTR bars_width$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm2, DWORD PTR picker_pos$[rbp+4]
	movss	xmm1, DWORD PTR bar1_pos_x$[rbp]
	lea	rcx, QWORD PTR bar1_bb$76[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 5381
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T114[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T115[rbp], rax
	lea	rcx, QWORD PTR bar1_bb$76[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR tv1373[rbp], xmm0
	mov	DWORD PTR [rsp+56], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	mov	rax, QWORD PTR $T115[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR tv1373[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR bar1_bb$76[rbp+8]
	mov	rdx, QWORD PTR bar1_bb$76[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ; ImGui::RenderColorRectWithAlphaCheckerboard
; Line 5382
	mov	eax, DWORD PTR user_col32_striped_of_alpha$[rbp]
	and	eax, 16777215				; 00ffffffH
	mov	ecx, DWORD PTR user_col32_striped_of_alpha$[rbp]
	and	ecx, 16777215				; 00ffffffH
	mov	DWORD PTR [rsp+48], eax
	mov	DWORD PTR [rsp+40], ecx
	mov	eax, DWORD PTR user_col32_striped_of_alpha$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR user_col32_striped_of_alpha$[rbp]
	lea	r8, QWORD PTR bar1_bb$76[rbp+8]
	lea	rdx, QWORD PTR bar1_bb$76[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor
; Line 5383
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR alpha$75[rbp]
	mulss	xmm0, DWORD PTR sv_picker_size$[rbp]
	movss	xmm1, DWORD PTR picker_pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR bar1_line_y$77[rbp], xmm0
; Line 5384
	xorps	xmm2, xmm2
	mov	rdx, QWORD PTR bar1_bb$76[rbp+8]
	mov	rcx, QWORD PTR bar1_bb$76[rbp]
	call	?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z ; ImGui::RenderFrameBorder
; Line 5385
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv1447[rbp], xmm0
	movss	xmm0, DWORD PTR bars_triangles_half_sz$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR bars_triangles_half_sz$[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T116[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T119[rbp], rax
	mov	rax, QWORD PTR $T119[rbp]
	mov	QWORD PTR $T121[rbp], rax
	movss	xmm0, DWORD PTR bar1_pos_x$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR bar1_line_y$77[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T117[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T118[rbp], rax
	mov	rax, QWORD PTR $T118[rbp]
	mov	QWORD PTR $T120[rbp], rax
	movss	xmm0, DWORD PTR bars_width$[rbp]
	addss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR tv1447[rbp]
	movss	DWORD PTR [rsp+32], xmm1
	movaps	xmm3, xmm0
	mov	r8, QWORD PTR $T121[rbp]
	mov	rdx, QWORD PTR $T120[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?RenderArrowsForVerticalBar@@YAXPEAUImDrawList@@UImVec2@@1MM@Z ; RenderArrowsForVerticalBar
$LN70@ColorPicke:
; Line 5388
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 5390
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN71@ColorPicke
	movsxd	rax, DWORD PTR components$[rbp]
	shl	rax, 2
	mov	r8, rax
	mov	rdx, QWORD PTR col$[rbp]
	lea	rcx, QWORD PTR backup_initial_col$[rbp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN71@ColorPicke
; Line 5391
	mov	BYTE PTR value_changed$[rbp], 0
$LN71@ColorPicke:
; Line 5392
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN72@ColorPicke
; Line 5393
	mov	rax, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rax+292]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN72@ColorPicke:
; Line 5395
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 5397
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@ColorPicke:
; Line 5398
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+5840]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z ENDP		; ImGui::ColorPicker4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z
_TEXT	SEGMENT
col4$ = 8
__$ArrayPad$ = 232
label$ = 272
col$ = 280
flags$ = 288
?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z PROC		; ImGui::ColorPicker3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 5003
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 14
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 5004
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR col4$[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR col4$[rbp+4], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR col4$[rbp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR col4$[rbp+12], xmm0
; Line 5005
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 2
	xor	r9d, r9d
	mov	r8d, eax
	lea	rdx, QWORD PTR col4$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z ; ImGui::ColorPicker4
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ColorPicke
; Line 5006
	xor	al, al
	jmp	SHORT $LN1@ColorPicke
$LN2@ColorPicke:
; Line 5007
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR col4$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR col4$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR col4$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 5008
	mov	al, 1
$LN1@ColorPicke:
; Line 5009
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?ColorPicker3@ImGui@@YA_NPEBDQEAMH@Z ENDP		; ImGui::ColorPicker3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
square_sz$ = 100
w_full$ = 132
w_button$ = 164
w_inputs$ = 196
label_display_end$ = 232
flags_untouched$ = 260
alpha$ = 292
hdr$ = 324
components$ = 356
f$ = 392
i$ = 440
value_changed$ = 484
value_changed_as_float$ = 516
pos$ = 552
inputs_offset_x$ = 580
w_item_one$8 = 612
w_item_last$9 = 644
hide_prefix$10 = 676
fmt_idx$11 = 708
n$12 = 740
buf$13 = 784
p$14 = 872
r$15 = 900
picker_active_window$ = 936
button_offset_x$16 = 964
col_v4$17 = 1000
picker_flags_to_forward$18 = 1044
picker_flags$19 = 1076
text_offset_x$20 = 1108
n$21 = 1140
accepted_drag_drop$22 = 1172
payload$23 = 1208
payload$24 = 1240
$T25 = 2036
$T26 = 2068
$T27 = 2100
$T28 = 2132
$T29 = 2164
$T30 = 2196
$T31 = 2228
$T32 = 2260
tv724 = 2276
tv705 = 2276
tv627 = 2276
tv612 = 2276
tv545 = 2276
tv515 = 2276
tv463 = 2276
tv428 = 2276
tv396 = 2276
tv386 = 2276
tv378 = 2276
tv297 = 2276
tv288 = 2276
tv278 = 2276
tv268 = 2276
tv258 = 2276
tv187 = 2276
tv176 = 2276
tv173 = 2276
tv170 = 2276
tv76 = 2276
tv684 = 2280
tv543 = 2280
tv513 = 2280
tv460 = 2280
tv425 = 2280
tv383 = 2280
tv373 = 2280
tv226 = 2280
tv204 = 2280
tv541 = 2284
tv511 = 2284
tv679 = 2288
tv509 = 2288
tv447 = 2288
tv412 = 2288
tv380 = 2288
tv935 = 2296
tv933 = 2296
tv673 = 2296
tv677 = 2304
tv682 = 2312
__$ArrayPad$ = 2320
label$ = 2368
col$ = 2376
flags$ = 2384
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z PROC			; ImGui::ColorEdit4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 4763
$LN98:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2400				; 00000960H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 392				; 00000188H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2440]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 4764
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 4765
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN10@ColorEdit4
; Line 4766
	xor	al, al
	jmp	$LN1@ColorEdit4
$LN10@ColorEdit4:
; Line 4768
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 4769
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 4770
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR square_sz$[rbp], xmm0
; Line 4771
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR w_full$[rbp], xmm0
; Line 4772
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN56@ColorEdit4
	xorps	xmm0, xmm0
	movss	DWORD PTR tv76[rbp], xmm0
	jmp	SHORT $LN57@ColorEdit4
$LN56@ColorEdit4:
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR square_sz$[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR tv76[rbp], xmm0
$LN57@ColorEdit4:
	movss	xmm0, DWORD PTR tv76[rbp]
	movss	DWORD PTR w_button$[rbp], xmm0
; Line 4773
	movss	xmm0, DWORD PTR w_full$[rbp]
	subss	xmm0, DWORD PTR w_button$[rbp]
	movss	DWORD PTR w_inputs$[rbp], xmm0
; Line 4774
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_display_end$[rbp], rax
; Line 4775
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7456				; 00001d20H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextItemData@@QEAAXXZ	; ImGuiNextItemData::ClearFlags
; Line 4777
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 4778
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 4781
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR flags_untouched$[rbp], eax
; Line 4782
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN11@ColorEdit4
; Line 4783
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, -7340033				; ffffffffff8fffffH
	bts	eax, 20
	or	eax, 8
	mov	DWORD PTR flags$[rbp], eax
$LN11@ColorEdit4:
; Line 4786
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN12@ColorEdit4
; Line 4787
	mov	edx, DWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR col$[rbp]
	call	?ColorEditOptionsPopup@ImGui@@YAXPEBMH@Z ; ImGui::ColorEditOptionsPopup
$LN12@ColorEdit4:
; Line 4790
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	test	eax, eax
	jne	SHORT $LN13@ColorEdit4
; Line 4791
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 7340032				; 00700000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN13@ColorEdit4:
; Line 4792
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 25165824				; 01800000H
	test	eax, eax
	jne	SHORT $LN14@ColorEdit4
; Line 4793
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 25165824				; 01800000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN14@ColorEdit4:
; Line 4794
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 100663296				; 06000000H
	test	eax, eax
	jne	SHORT $LN15@ColorEdit4
; Line 4795
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 100663296				; 06000000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN15@ColorEdit4:
; Line 4796
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	test	eax, eax
	jne	SHORT $LN16@ColorEdit4
; Line 4797
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, 402653184				; 18000000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN16@ColorEdit4:
; Line 4798
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12220]
	and	eax, -535822337				; ffffffffe00fffffH
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
; Line 4799
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 7340032				; 00700000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN58@ColorEdit4
	mov	eax, DWORD PTR ?__LINE__Var@?0??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4JA
	add	eax, 36					; 00000024H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HC@IFIJNDDD@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN58@ColorEdit4:
; Line 4800
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 402653184				; 18000000H
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN59@ColorEdit4
	mov	eax, DWORD PTR ?__LINE__Var@?0??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4JA
	add	eax, 37					; 00000025H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GO@CDHIBPHM@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN59@ColorEdit4:
; Line 4802
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN60@ColorEdit4
	mov	BYTE PTR tv170[rbp], 1
	jmp	SHORT $LN61@ColorEdit4
$LN60@ColorEdit4:
	mov	BYTE PTR tv170[rbp], 0
$LN61@ColorEdit4:
	movzx	eax, BYTE PTR tv170[rbp]
	mov	BYTE PTR alpha$[rbp], al
; Line 4803
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 524288				; 00080000H
	test	eax, eax
	je	SHORT $LN62@ColorEdit4
	mov	BYTE PTR tv173[rbp], 1
	jmp	SHORT $LN63@ColorEdit4
$LN62@ColorEdit4:
	mov	BYTE PTR tv173[rbp], 0
$LN63@ColorEdit4:
	movzx	eax, BYTE PTR tv173[rbp]
	mov	BYTE PTR hdr$[rbp], al
; Line 4804
	movzx	eax, BYTE PTR alpha$[rbp]
	test	eax, eax
	je	SHORT $LN64@ColorEdit4
	mov	DWORD PTR tv176[rbp], 4
	jmp	SHORT $LN65@ColorEdit4
$LN64@ColorEdit4:
	mov	DWORD PTR tv176[rbp], 3
$LN65@ColorEdit4:
	mov	eax, DWORD PTR tv176[rbp]
	mov	DWORD PTR components$[rbp], eax
; Line 4807
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR f$[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR f$[rbp+4], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR f$[rbp+8], xmm0
	movzx	eax, BYTE PTR alpha$[rbp]
	test	eax, eax
	je	SHORT $LN66@ColorEdit4
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv187[rbp], xmm0
	jmp	SHORT $LN67@ColorEdit4
$LN66@ColorEdit4:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv187[rbp], xmm0
$LN67@ColorEdit4:
	movss	xmm0, DWORD PTR tv187[rbp]
	movss	DWORD PTR f$[rbp+12], xmm0
; Line 4808
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	$LN17@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	$LN17@ColorEdit4
; Line 4809
	mov	eax, 4
	imul	rax, rax, 2
	lea	rax, QWORD PTR f$[rbp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR f$[rbp+rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	rdx, QWORD PTR f$[rbp+rdx]
	mov	r8d, 4
	imul	r8, r8, 2
	mov	r9d, 4
	imul	r9, r9, 1
	mov	QWORD PTR tv204[rbp], r9
	mov	r10d, 4
	imul	r10, r10, 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	movss	xmm2, DWORD PTR f$[rbp+r8]
	mov	rax, QWORD PTR tv204[rbp]
	movss	xmm1, DWORD PTR f$[rbp+rax]
	movss	xmm0, DWORD PTR f$[rbp+r10]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
	jmp	$LN18@ColorEdit4
$LN17@ColorEdit4:
; Line 4810
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	je	$LN19@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	$LN19@ColorEdit4
; Line 4813
	mov	eax, 4
	imul	rax, rax, 2
	lea	rax, QWORD PTR f$[rbp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR f$[rbp+rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	rdx, QWORD PTR f$[rbp+rdx]
	mov	r8d, 4
	imul	r8, r8, 2
	mov	r9d, 4
	imul	r9, r9, 1
	mov	QWORD PTR tv226[rbp], r9
	mov	r10d, 4
	imul	r10, r10, 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	movss	xmm2, DWORD PTR f$[rbp+r8]
	mov	rax, QWORD PTR tv226[rbp]
	movss	xmm1, DWORD PTR f$[rbp+rax]
	movss	xmm0, DWORD PTR f$[rbp+r10]
	call	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertRGBtoHSV
; Line 4814
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12232				; 00002fc8H
	mov	r8d, 12
	mov	rdx, QWORD PTR col$[rbp]
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN20@ColorEdit4
; Line 4816
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR f$[rbp+rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN21@ColorEdit4
	jne	SHORT $LN21@ColorEdit4
; Line 4817
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+12224]
	movss	DWORD PTR f$[rbp+rax], xmm0
$LN21@ColorEdit4:
; Line 4818
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR f$[rbp+rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN22@ColorEdit4
	jne	SHORT $LN22@ColorEdit4
; Line 4819
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+12228]
	movss	DWORD PTR f$[rbp+rax], xmm0
$LN22@ColorEdit4:
$LN20@ColorEdit4:
$LN19@ColorEdit4:
$LN18@ColorEdit4:
; Line 4822
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR f$[rbp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN68@ColorEdit4
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv258[rbp], xmm0
	jmp	SHORT $LN69@ColorEdit4
$LN68@ColorEdit4:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv258[rbp], xmm0
$LN69@ColorEdit4:
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR f$[rbp+rax]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR tv258[rbp]
	cvttss2si eax, xmm0
	mov	DWORD PTR i$[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR f$[rbp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN70@ColorEdit4
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv268[rbp], xmm0
	jmp	SHORT $LN71@ColorEdit4
$LN70@ColorEdit4:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv268[rbp], xmm0
$LN71@ColorEdit4:
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR f$[rbp+rax]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR tv268[rbp]
	cvttss2si eax, xmm0
	mov	DWORD PTR i$[rbp+4], eax
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR f$[rbp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN72@ColorEdit4
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv278[rbp], xmm0
	jmp	SHORT $LN73@ColorEdit4
$LN72@ColorEdit4:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv278[rbp], xmm0
$LN73@ColorEdit4:
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR f$[rbp+rax]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR tv278[rbp]
	cvttss2si eax, xmm0
	mov	DWORD PTR i$[rbp+8], eax
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR f$[rbp+rax]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN74@ColorEdit4
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv288[rbp], xmm0
	jmp	SHORT $LN75@ColorEdit4
$LN74@ColorEdit4:
	movss	xmm0, DWORD PTR __real@bf000000
	movss	DWORD PTR tv288[rbp], xmm0
$LN75@ColorEdit4:
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR f$[rbp+rax]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR tv288[rbp]
	cvttss2si eax, xmm0
	mov	DWORD PTR i$[rbp+12], eax
; Line 4824
	mov	BYTE PTR value_changed$[rbp], 0
; Line 4825
	mov	BYTE PTR value_changed_as_float$[rbp], 0
; Line 4827
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 4828
	mov	rax, QWORD PTR style$[rbp]
	cmp	DWORD PTR [rax+144], 0
	jne	SHORT $LN76@ColorEdit4
	movss	xmm0, DWORD PTR w_button$[rbp]
	movss	DWORD PTR tv297[rbp], xmm0
	jmp	SHORT $LN77@ColorEdit4
$LN76@ColorEdit4:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv297[rbp], xmm0
$LN77@ColorEdit4:
	movss	xmm0, DWORD PTR tv297[rbp]
	movss	DWORD PTR inputs_offset_x$[rbp], xmm0
; Line 4829
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR inputs_offset_x$[rbp]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 4831
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 3145728				; 00300000H
	test	eax, eax
	je	$LN23@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	$LN23@ColorEdit4
; Line 4834
	mov	eax, DWORD PTR components$[rbp]
	dec	eax
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR w_inputs$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR components$[rbp]
	divss	xmm0, xmm1
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR w_item_one$8[rbp], xmm0
; Line 4835
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR w_item_one$8[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	mov	eax, DWORD PTR components$[rbp]
	dec	eax
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR w_inputs$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR w_item_last$9[rbp], xmm0
; Line 4837
	movss	xmm0, DWORD PTR w_item_one$8[rbp]
	movss	DWORD PTR tv378[rbp], xmm0
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN78@ColorEdit4
	lea	rax, OFFSET FLAT:??_C@_07FFNLLALM@M?30?4000@
	mov	QWORD PTR tv373[rbp], rax
	jmp	SHORT $LN79@ColorEdit4
$LN78@ColorEdit4:
	lea	rax, OFFSET FLAT:??_C@_05BNGMMMAL@M?3000@
	mov	QWORD PTR tv373[rbp], rax
$LN79@ColorEdit4:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv373[rbp]
	lea	rcx, QWORD PTR $T25[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR tv378[rbp]
	jb	SHORT $LN80@ColorEdit4
	mov	BYTE PTR tv380[rbp], 1
	jmp	SHORT $LN81@ColorEdit4
$LN80@ColorEdit4:
	mov	BYTE PTR tv380[rbp], 0
$LN81@ColorEdit4:
	movzx	eax, BYTE PTR tv380[rbp]
	mov	BYTE PTR hide_prefix$10[rbp], al
; Line 4851
	movzx	eax, BYTE PTR hide_prefix$10[rbp]
	test	eax, eax
	je	SHORT $LN84@ColorEdit4
	mov	DWORD PTR tv386[rbp], 0
	jmp	SHORT $LN85@ColorEdit4
$LN84@ColorEdit4:
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN82@ColorEdit4
	mov	DWORD PTR tv383[rbp], 2
	jmp	SHORT $LN83@ColorEdit4
$LN82@ColorEdit4:
	mov	DWORD PTR tv383[rbp], 1
$LN83@ColorEdit4:
	mov	eax, DWORD PTR tv383[rbp]
	mov	DWORD PTR tv386[rbp], eax
$LN85@ColorEdit4:
	mov	eax, DWORD PTR tv386[rbp]
	mov	DWORD PTR fmt_idx$11[rbp], eax
; Line 4853
	mov	DWORD PTR n$12[rbp], 0
	jmp	SHORT $LN4@ColorEdit4
$LN2@ColorEdit4:
	mov	eax, DWORD PTR n$12[rbp]
	inc	eax
	mov	DWORD PTR n$12[rbp], eax
$LN4@ColorEdit4:
	mov	eax, DWORD PTR components$[rbp]
	cmp	DWORD PTR n$12[rbp], eax
	jge	$LN3@ColorEdit4
; Line 4855
	cmp	DWORD PTR n$12[rbp], 0
	jle	SHORT $LN25@ColorEdit4
; Line 4856
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
$LN25@ColorEdit4:
; Line 4857
	mov	eax, DWORD PTR n$12[rbp]
	inc	eax
	cmp	eax, DWORD PTR components$[rbp]
	jge	SHORT $LN86@ColorEdit4
	movss	xmm0, DWORD PTR w_item_one$8[rbp]
	movss	DWORD PTR tv396[rbp], xmm0
	jmp	SHORT $LN87@ColorEdit4
$LN86@ColorEdit4:
	movss	xmm0, DWORD PTR w_item_last$9[rbp]
	movss	DWORD PTR tv396[rbp], xmm0
$LN87@ColorEdit4:
	movss	xmm0, DWORD PTR tv396[rbp]
	call	?SetNextItemWidth@ImGui@@YAXM@Z		; ImGui::SetNextItemWidth
; Line 4860
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	$LN26@ColorEdit4
; Line 4862
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv428[rbp], eax
	movsxd	rax, DWORD PTR fmt_idx$11[rbp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?fmt_table_float@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAY03PEBDA
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR n$12[rbp]
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv425[rbp], rax
	movzx	eax, BYTE PTR hdr$[rbp]
	test	eax, eax
	je	SHORT $LN88@ColorEdit4
	xorps	xmm0, xmm0
	movss	DWORD PTR tv412[rbp], xmm0
	jmp	SHORT $LN89@ColorEdit4
$LN88@ColorEdit4:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv412[rbp], xmm0
$LN89@ColorEdit4:
	movsxd	rax, DWORD PTR n$12[rbp]
	lea	rax, QWORD PTR f$[rbp+rax*4]
	movsxd	rcx, DWORD PTR n$12[rbp]
	lea	rdx, OFFSET FLAT:?ids@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAPEBDA
	mov	QWORD PTR tv933[rbp], rdx
	mov	DWORD PTR [rsp+48], 0
	mov	r8, QWORD PTR tv425[rbp]
	mov	QWORD PTR [rsp+40], r8
	movss	xmm0, DWORD PTR tv412[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3b808081
	mov	rdx, rax
	mov	rax, QWORD PTR tv933[rbp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z	; ImGui::DragFloat
	movzx	eax, al
	mov	ecx, DWORD PTR tv428[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 4863
	movzx	eax, BYTE PTR value_changed_as_float$[rbp]
	movzx	ecx, BYTE PTR value_changed$[rbp]
	or	eax, ecx
	mov	BYTE PTR value_changed_as_float$[rbp], al
; Line 4864
	jmp	$LN27@ColorEdit4
$LN26@ColorEdit4:
; Line 4867
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv463[rbp], eax
	movsxd	rax, DWORD PTR fmt_idx$11[rbp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?fmt_table_int@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAY03PEBDA
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR n$12[rbp]
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv460[rbp], rax
	movzx	eax, BYTE PTR hdr$[rbp]
	test	eax, eax
	je	SHORT $LN90@ColorEdit4
	mov	DWORD PTR tv447[rbp], 0
	jmp	SHORT $LN91@ColorEdit4
$LN90@ColorEdit4:
	mov	DWORD PTR tv447[rbp], 255		; 000000ffH
$LN91@ColorEdit4:
	movsxd	rax, DWORD PTR n$12[rbp]
	lea	rax, QWORD PTR i$[rbp+rax*4]
	movsxd	rcx, DWORD PTR n$12[rbp]
	lea	rdx, OFFSET FLAT:?ids@?CA@??ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z@4PAPEBDA
	mov	QWORD PTR tv935[rbp], rdx
	mov	DWORD PTR [rsp+48], 0
	mov	r8, QWORD PTR tv460[rbp]
	mov	QWORD PTR [rsp+40], r8
	mov	r8d, DWORD PTR tv447[rbp]
	mov	DWORD PTR [rsp+32], r8d
	xor	r9d, r9d
	movss	xmm2, DWORD PTR __real@3f800000
	mov	rdx, rax
	mov	rax, QWORD PTR tv935[rbp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z	; ImGui::DragInt
	movzx	eax, al
	mov	ecx, DWORD PTR tv463[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
$LN27@ColorEdit4:
; Line 4869
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN28@ColorEdit4
; Line 4870
	mov	edx, 1
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z	; ImGui::OpenPopupOnItemClick
$LN28@ColorEdit4:
; Line 4871
	jmp	$LN2@ColorEdit4
$LN3@ColorEdit4:
; Line 4872
	jmp	$LN24@ColorEdit4
$LN23@ColorEdit4:
; Line 4873
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	$LN29@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	$LN29@ColorEdit4
; Line 4877
	movzx	eax, BYTE PTR alpha$[rbp]
	test	eax, eax
	je	$LN30@ColorEdit4
; Line 4878
	mov	eax, 4
	imul	rax, rax, 3
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv515[rbp], eax
	mov	eax, 4
	imul	rax, rax, 2
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv513[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv511[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv509[rbp], eax
	mov	eax, DWORD PTR tv515[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR tv513[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR tv511[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tv509[rbp]
	lea	r8, OFFSET FLAT:??_C@_0BC@CKPCOFBK@?$CD?$CF02X?$CF02X?$CF02X?$CF02X@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$13[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
	jmp	$LN31@ColorEdit4
$LN30@ColorEdit4:
; Line 4880
	mov	eax, 4
	imul	rax, rax, 2
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv545[rbp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv543[rbp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	r8d, 255				; 000000ffH
	xor	edx, edx
	mov	ecx, DWORD PTR i$[rbp+rax]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv541[rbp], eax
	mov	eax, DWORD PTR tv545[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR tv543[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tv541[rbp]
	lea	r8, OFFSET FLAT:??_C@_0O@MBPBDFLP@?$CD?$CF02X?$CF02X?$CF02X@
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$13[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
$LN31@ColorEdit4:
; Line 4881
	movss	xmm0, DWORD PTR w_inputs$[rbp]
	call	?SetNextItemWidth@ImGui@@YAXM@Z		; ImGui::SetNextItemWidth
; Line 4882
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 6
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR buf$13[rbp]
	lea	rcx, OFFSET FLAT:??_C@_06MNCEJPDI@?$CD?$CDText@
	call	?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
	movzx	eax, al
	test	eax, eax
	je	$LN32@ColorEdit4
; Line 4884
	mov	BYTE PTR value_changed$[rbp], 1
; Line 4885
	lea	rax, QWORD PTR buf$13[rbp]
	mov	QWORD PTR p$14[rbp], rax
$LN5@ColorEdit4:
; Line 4886
	mov	rax, QWORD PTR p$14[rbp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN33@ColorEdit4
	mov	rax, QWORD PTR p$14[rbp]
	movzx	ecx, BYTE PTR [rax]
	call	?ImCharIsBlankA@@YA_ND@Z		; ImCharIsBlankA
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@ColorEdit4
$LN33@ColorEdit4:
; Line 4887
	mov	rax, QWORD PTR p$14[rbp]
	inc	rax
	mov	QWORD PTR p$14[rbp], rax
	jmp	SHORT $LN5@ColorEdit4
$LN6@ColorEdit4:
; Line 4888
	mov	eax, 4
	imul	rax, rax, 2
	mov	DWORD PTR i$[rbp+rax], 0
	mov	eax, 4
	imul	rax, rax, 1
	mov	DWORD PTR i$[rbp+rax], 0
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR i$[rbp+rax], 0
; Line 4889
	mov	eax, 4
	imul	rax, rax, 3
	mov	DWORD PTR i$[rbp+rax], 255		; 000000ffH
; Line 4891
	movzx	eax, BYTE PTR alpha$[rbp]
	test	eax, eax
	je	SHORT $LN34@ColorEdit4
; Line 4892
	mov	eax, 4
	imul	rax, rax, 3
	lea	rax, QWORD PTR i$[rbp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR i$[rbp+rcx]
	mov	edx, 4
	imul	rdx, rdx, 1
	lea	rdx, QWORD PTR i$[rbp+rdx]
	mov	r8d, 4
	imul	r8, r8, 0
	lea	r8, QWORD PTR i$[rbp+r8]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, OFFSET FLAT:??_C@_0BB@DDMGLOLI@?$CF02X?$CF02X?$CF02X?$CF02X@
	mov	rcx, QWORD PTR p$14[rbp]
	call	sscanf
	mov	DWORD PTR r$15[rbp], eax
	jmp	SHORT $LN35@ColorEdit4
$LN34@ColorEdit4:
; Line 4894
	mov	eax, 4
	imul	rax, rax, 2
	lea	rax, QWORD PTR i$[rbp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR i$[rbp+rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	rdx, QWORD PTR i$[rbp+rdx]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	lea	rdx, OFFSET FLAT:??_C@_0N@KODLFHPJ@?$CF02X?$CF02X?$CF02X@
	mov	rcx, QWORD PTR p$14[rbp]
	call	sscanf
	mov	DWORD PTR r$15[rbp], eax
$LN35@ColorEdit4:
$LN32@ColorEdit4:
; Line 4897
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN36@ColorEdit4
; Line 4898
	mov	edx, 1
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z	; ImGui::OpenPopupOnItemClick
$LN36@ColorEdit4:
$LN29@ColorEdit4:
$LN24@ColorEdit4:
; Line 4901
	mov	QWORD PTR picker_active_window$[rbp], 0
; Line 4902
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	jne	$LN37@ColorEdit4
; Line 4904
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN92@ColorEdit4
	mov	rax, QWORD PTR style$[rbp]
	cmp	DWORD PTR [rax+144], 0
	je	SHORT $LN92@ColorEdit4
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR w_inputs$[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR tv612[rbp], xmm0
	jmp	SHORT $LN93@ColorEdit4
$LN92@ColorEdit4:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv612[rbp], xmm0
$LN93@ColorEdit4:
	movss	xmm0, DWORD PTR tv612[rbp]
	movss	DWORD PTR button_offset_x$16[rbp], xmm0
; Line 4905
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR button_offset_x$16[rbp]
	movss	xmm2, DWORD PTR pos$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 4907
	movzx	eax, BYTE PTR alpha$[rbp]
	test	eax, eax
	je	SHORT $LN94@ColorEdit4
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv627[rbp], xmm0
	jmp	SHORT $LN95@ColorEdit4
$LN94@ColorEdit4:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv627[rbp], xmm0
$LN95@ColorEdit4:
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 4
	imul	rdx, rdx, 0
	movss	xmm0, DWORD PTR tv627[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r8, QWORD PTR col$[rbp]
	movss	xmm3, DWORD PTR [r8+rax]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm2, DWORD PTR [rax+rcx]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm1, DWORD PTR [rax+rdx]
	lea	rcx, QWORD PTR col_v4$17[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 4908
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T27[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, QWORD PTR [rax]
	mov	r8d, DWORD PTR flags$[rbp]
	lea	rdx, QWORD PTR col_v4$17[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0O@GLNBIEEK@?$CD?$CDColorButton@
	call	?ColorButton@ImGui@@YA_NPEBDAEBUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
	movzx	eax, al
	test	eax, eax
	je	$LN38@ColorEdit4
; Line 4910
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	jne	$LN39@ColorEdit4
; Line 4913
	mov	rax, QWORD PTR g$[rbp]
	lea	rcx, QWORD PTR col_v4$17[rbp]
	lea	rdi, QWORD PTR [rax+12244]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 4914
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_06MAKAMBBI@picker@
	call	?OpenPopup@ImGui@@YAXPEBDH@Z		; ImGui::OpenPopup
; Line 4915
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T28[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv684[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm2, DWORD PTR [rax+76]
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR $T29[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv679[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 300				; 0000012cH
	mov	QWORD PTR tv673[rbp], rax
	lea	rdx, QWORD PTR $T30[rbp]
	mov	rcx, QWORD PTR tv673[rbp]
	call	?GetBL@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetBL
	mov	QWORD PTR tv677[rbp], rax
	mov	r8, QWORD PTR tv679[rbp]
	mov	rdx, QWORD PTR tv677[rbp]
	lea	rcx, QWORD PTR $T31[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv682[rbp], rax
	mov	r8, QWORD PTR tv684[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR tv682[rbp]
	call	?SetNextWindowPos@ImGui@@YAXAEBUImVec2@@H0@Z ; ImGui::SetNextWindowPos
$LN39@ColorEdit4:
$LN38@ColorEdit4:
; Line 4918
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN40@ColorEdit4
; Line 4919
	mov	edx, 1
	lea	rcx, OFFSET FLAT:??_C@_07JKKCBBMM@context@
	call	?OpenPopupOnItemClick@ImGui@@YAXPEBDH@Z	; ImGui::OpenPopupOnItemClick
$LN40@ColorEdit4:
; Line 4921
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_06MAKAMBBI@picker@
	call	?BeginPopup@ImGui@@YA_NPEBDH@Z		; ImGui::BeginPopup
	movzx	eax, al
	test	eax, eax
	je	$LN41@ColorEdit4
; Line 4923
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR picker_active_window$[rbp], rax
; Line 4924
	mov	rax, QWORD PTR label_display_end$[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	SHORT $LN42@ColorEdit4
; Line 4926
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_display_end$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
; Line 4927
	call	?Spacing@ImGui@@YAXXZ			; ImGui::Spacing
$LN42@ColorEdit4:
; Line 4929
	mov	DWORD PTR picker_flags_to_forward$18[rbp], 529072130 ; 1f890002H
; Line 4930
	mov	eax, DWORD PTR picker_flags_to_forward$18[rbp]
	mov	ecx, DWORD PTR flags_untouched$[rbp]
	and	ecx, eax
	mov	eax, ecx
	or	eax, 7340032				; 00700000H
	bts	eax, 7
	bts	eax, 18
	mov	DWORD PTR picker_flags$19[rbp], eax
; Line 4931
	movss	xmm0, DWORD PTR square_sz$[rbp]
	mulss	xmm0, DWORD PTR __real@41400000
	call	?SetNextItemWidth@ImGui@@YAXM@Z		; ImGui::SetNextItemWidth
; Line 4932
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv705[rbp], eax
	mov	rcx, QWORD PTR g$[rbp]
	add	rcx, 12244				; 00002fd4H
	mov	r9, rcx
	mov	r8d, DWORD PTR picker_flags$19[rbp]
	mov	rdx, QWORD PTR col$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_08HHEANBBL@?$CD?$CDpicker@
	call	?ColorPicker4@ImGui@@YA_NPEBDQEAMHPEBM@Z ; ImGui::ColorPicker4
	movzx	eax, al
	mov	ecx, DWORD PTR tv705[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 4933
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
$LN41@ColorEdit4:
$LN37@ColorEdit4:
; Line 4937
	mov	rax, QWORD PTR label_display_end$[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	$LN43@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	$LN43@ColorEdit4
; Line 4939
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN96@ColorEdit4
	movss	xmm0, DWORD PTR w_button$[rbp]
	movss	DWORD PTR tv724[rbp], xmm0
	jmp	SHORT $LN97@ColorEdit4
$LN96@ColorEdit4:
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR w_full$[rbp]
	addss	xmm0, DWORD PTR [rax+80]
	movss	DWORD PTR tv724[rbp], xmm0
$LN97@ColorEdit4:
	movss	xmm0, DWORD PTR tv724[rbp]
	movss	DWORD PTR text_offset_x$20[rbp], xmm0
; Line 4940
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	movss	xmm1, DWORD PTR pos$[rbp]
	addss	xmm1, DWORD PTR text_offset_x$20[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T32[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 4941
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_display_end$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN43@ColorEdit4:
; Line 4945
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	$LN44@ColorEdit4
	cmp	QWORD PTR picker_active_window$[rbp], 0
	jne	$LN44@ColorEdit4
; Line 4947
	movzx	eax, BYTE PTR value_changed_as_float$[rbp]
	test	eax, eax
	jne	SHORT $LN45@ColorEdit4
; Line 4948
	mov	DWORD PTR n$21[rbp], 0
	jmp	SHORT $LN9@ColorEdit4
$LN7@ColorEdit4:
	mov	eax, DWORD PTR n$21[rbp]
	inc	eax
	mov	DWORD PTR n$21[rbp], eax
$LN9@ColorEdit4:
	cmp	DWORD PTR n$21[rbp], 4
	jge	SHORT $LN8@ColorEdit4
; Line 4949
	movsxd	rax, DWORD PTR n$21[rbp]
	cvtsi2ss xmm0, DWORD PTR i$[rbp+rax*4]
	divss	xmm0, DWORD PTR __real@437f0000
	movsxd	rax, DWORD PTR n$21[rbp]
	movss	DWORD PTR f$[rbp+rax*4], xmm0
	jmp	SHORT $LN7@ColorEdit4
$LN8@ColorEdit4:
$LN45@ColorEdit4:
; Line 4950
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	$LN46@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	je	$LN46@ColorEdit4
; Line 4952
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR f$[rbp+rax]
	movss	DWORD PTR [rcx+12224], xmm0
; Line 4953
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR f$[rbp+rax]
	movss	DWORD PTR [rcx+12228], xmm0
; Line 4954
	mov	eax, 4
	imul	rax, rax, 2
	lea	rax, QWORD PTR f$[rbp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR f$[rbp+rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	rdx, QWORD PTR f$[rbp+rdx]
	mov	edi, 4
	imul	rdi, rdi, 2
	mov	esi, 4
	imul	rsi, rsi, 1
	mov	r8d, 4
	imul	r8, r8, 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	movss	xmm2, DWORD PTR f$[rbp+rdi]
	movss	xmm1, DWORD PTR f$[rbp+rsi]
	movss	xmm0, DWORD PTR f$[rbp+r8]
	call	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertHSVtoRGB
; Line 4955
	mov	rax, QWORD PTR g$[rbp]
	lea	rcx, QWORD PTR f$[rbp]
	lea	rdi, QWORD PTR [rax+12232]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
$LN46@ColorEdit4:
; Line 4957
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	$LN47@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	SHORT $LN47@ColorEdit4
; Line 4958
	mov	eax, 4
	imul	rax, rax, 2
	lea	rax, QWORD PTR f$[rbp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	lea	rcx, QWORD PTR f$[rbp+rcx]
	mov	edx, 4
	imul	rdx, rdx, 0
	lea	rdx, QWORD PTR f$[rbp+rdx]
	mov	edi, 4
	imul	rdi, rdi, 2
	mov	esi, 4
	imul	rsi, rsi, 1
	mov	r8d, 4
	imul	r8, r8, 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	movss	xmm2, DWORD PTR f$[rbp+rdi]
	movss	xmm1, DWORD PTR f$[rbp+rsi]
	movss	xmm0, DWORD PTR f$[rbp+r8]
	call	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertRGBtoHSV
$LN47@ColorEdit4:
; Line 4960
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR f$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 4961
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR f$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 4962
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR f$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
; Line 4963
	movzx	eax, BYTE PTR alpha$[rbp]
	test	eax, eax
	je	SHORT $LN48@ColorEdit4
; Line 4964
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR f$[rbp+rax]
	movss	DWORD PTR [rdx+rcx], xmm0
$LN48@ColorEdit4:
$LN44@ColorEdit4:
; Line 4967
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 4968
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 4972
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	and	eax, 1
	test	eax, eax
	je	$LN49@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	$LN49@ColorEdit4
	call	?BeginDragDropTarget@ImGui@@YA_NXZ	; ImGui::BeginDragDropTarget
	movzx	eax, al
	test	eax, eax
	je	$LN49@ColorEdit4
; Line 4974
	mov	BYTE PTR accepted_drag_drop$22[rbp], 0
; Line 4975
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_06LFKNFKEK@_COL3F@
	call	?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z ; ImGui::AcceptDragDropPayload
	mov	QWORD PTR payload$23[rbp], rax
	cmp	QWORD PTR payload$23[rbp], 0
	je	SHORT $LN50@ColorEdit4
; Line 4977
	mov	rax, QWORD PTR payload$23[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rdi, QWORD PTR col$[rbp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
; Line 4978
	mov	BYTE PTR accepted_drag_drop$22[rbp], 1
	movzx	eax, BYTE PTR accepted_drag_drop$22[rbp]
	mov	BYTE PTR value_changed$[rbp], al
$LN50@ColorEdit4:
; Line 4980
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_06LAOCEMMP@_COL4F@
	call	?AcceptDragDropPayload@ImGui@@YAPEBUImGuiPayload@@PEBDH@Z ; ImGui::AcceptDragDropPayload
	mov	QWORD PTR payload$24[rbp], rax
	cmp	QWORD PTR payload$24[rbp], 0
	je	SHORT $LN51@ColorEdit4
; Line 4982
	movsxd	rax, DWORD PTR components$[rbp]
	shl	rax, 2
	mov	rcx, QWORD PTR payload$24[rbp]
	mov	rdi, QWORD PTR col$[rbp]
	mov	rsi, QWORD PTR [rcx]
	mov	rcx, rax
	rep movsb
; Line 4983
	mov	BYTE PTR accepted_drag_drop$22[rbp], 1
	movzx	eax, BYTE PTR accepted_drag_drop$22[rbp]
	mov	BYTE PTR value_changed$[rbp], al
$LN51@ColorEdit4:
; Line 4987
	movzx	eax, BYTE PTR accepted_drag_drop$22[rbp]
	test	eax, eax
	je	$LN52@ColorEdit4
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 268435456				; 10000000H
	test	eax, eax
	je	$LN52@ColorEdit4
; Line 4988
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR col$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR col$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 4
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR col$[rbp]
	add	rdi, rdx
	mov	rdx, rdi
	mov	edi, 4
	imul	rdi, rdi, 2
	mov	esi, 4
	imul	rsi, rsi, 1
	mov	r8d, 4
	imul	r8, r8, 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm2, DWORD PTR [rax+rdi]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm1, DWORD PTR [rax+rsi]
	mov	rax, QWORD PTR col$[rbp]
	movss	xmm0, DWORD PTR [rax+r8]
	call	?ColorConvertRGBtoHSV@ImGui@@YAXMMMAEAM00@Z ; ImGui::ColorConvertRGBtoHSV
$LN52@ColorEdit4:
; Line 4989
	call	?EndDragDropTarget@ImGui@@YAXXZ		; ImGui::EndDragDropTarget
$LN49@ColorEdit4:
; Line 4993
	cmp	QWORD PTR picker_active_window$[rbp], 0
	je	SHORT $LN53@ColorEdit4
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+7260], 0
	je	SHORT $LN53@ColorEdit4
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR picker_active_window$[rbp]
	cmp	QWORD PTR [rax+7304], rcx
	jne	SHORT $LN53@ColorEdit4
; Line 4994
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7260]
	mov	DWORD PTR [rax+292], ecx
$LN53@ColorEdit4:
; Line 4996
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN54@ColorEdit4
; Line 4997
	mov	rax, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rax+292]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN54@ColorEdit4:
; Line 4999
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@ColorEdit4:
; Line 5000
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2336]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z ENDP			; ImGui::ColorEdit4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z
_TEXT	SEGMENT
label$ = 224
col$ = 232
flags$ = 240
?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z PROC			; ImGui::ColorEdit3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 4755
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 4756
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 2
	mov	r8d, eax
	mov	rdx, QWORD PTR col$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?ColorEdit4@ImGui@@YA_NPEBDQEAMH@Z	; ImGui::ColorEdit4
; Line 4757
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ColorEdit3@ImGui@@YA_NPEBDQEAMH@Z ENDP			; ImGui::ColorEdit3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
value_changed$ = 68
type_size$ = 104
i$1 = 132
label_end$ = 168
tv85 = 372
label$ = 416
data_type$ = 424
p_data$ = 432
components$ = 440
p_step$ = 448
p_step_fast$ = 456
format$ = 464
flags$ = 472
?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z PROC	; ImGui::InputScalarN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3484
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3485
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3486
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN5@InputScala
; Line 3487
	xor	al, al
	jmp	$LN1@InputScala
$LN5@InputScala:
; Line 3489
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3490
	mov	BYTE PTR value_changed$[rbp], 0
; Line 3491
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 3492
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 3493
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR components$[rbp]
	call	?PushMultiItemsWidths@ImGui@@YAXHM@Z	; ImGui::PushMultiItemsWidths
; Line 3494
	movsxd	rax, DWORD PTR data_type$[rbp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?GDataTypeInfo@@3QBUImGuiDataTypeInfo@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR type_size$[rbp], rax
; Line 3495
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@InputScala
$LN2@InputScala:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@InputScala:
	mov	eax, DWORD PTR components$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@InputScala
; Line 3497
	mov	ecx, DWORD PTR i$1[rbp]
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 3498
	cmp	DWORD PTR i$1[rbp], 0
	jle	SHORT $LN6@InputScala
; Line 3499
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
$LN6@InputScala:
; Line 3500
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv85[rbp], eax
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR p_step_fast$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR p_step$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	call	?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar
	movzx	eax, al
	mov	ecx, DWORD PTR tv85[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 3501
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 3502
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 3503
	mov	rax, QWORD PTR type_size$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p_data$[rbp], rax
; Line 3504
	jmp	$LN2@InputScala
$LN3@InputScala:
; Line 3505
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 3507
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_end$[rbp], rax
; Line 3508
	mov	rax, QWORD PTR label_end$[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	SHORT $LN7@InputScala
; Line 3510
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 3511
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_end$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN7@InputScala:
; Line 3514
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 3515
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@InputScala:
; Line 3516
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ENDP	; ImGui::InputScalarN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
buf$ = 112
value_changed$ = 196
button_size$5 = 228
backup_frame_padding$6 = 264
button_flags$7 = 292
label_end$8 = 328
$T9 = 548
$T10 = 580
tv199 = 600
tv174 = 600
__$ArrayPad$ = 608
label$ = 656
data_type$ = 664
p_data$ = 672
p_step$ = 680
p_step_fast$ = 688
format$ = 696
flags$ = 704
?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z PROC		; ImGui::InputScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3412
$LN19:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 680				; 000002a8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+712]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3413
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3414
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@InputScala
; Line 3415
	xor	al, al
	jmp	$LN1@InputScala
$LN2@InputScala:
; Line 3417
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3418
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 3420
	cmp	QWORD PTR format$[rbp], 0
	jne	SHORT $LN3@InputScala
; Line 3421
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR format$[rbp], rax
$LN3@InputScala:
; Line 3424
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR buf$[rbp]
	call	?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ; ImGui::DataTypeFormatString
; Line 3426
	mov	BYTE PTR value_changed$[rbp], 0
; Line 3427
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131074				; 00020002H
	test	eax, eax
	jne	SHORT $LN4@InputScala
; Line 3428
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 1
	mov	DWORD PTR flags$[rbp], eax
$LN4@InputScala:
; Line 3429
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 16
	mov	DWORD PTR flags$[rbp], eax
; Line 3430
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 27
	mov	DWORD PTR flags$[rbp], eax
; Line 3432
	cmp	QWORD PTR p_step$[rbp], 0
	je	$LN5@InputScala
; Line 3434
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR button_size$5[rbp], xmm0
; Line 3436
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 3437
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 3438
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR button_size$5[rbp]
	addss	xmm1, DWORD PTR [rax+80]
	mulss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	call	?SetNextItemWidth@ImGui@@YAXM@Z		; ImGui::SetNextItemWidth
; Line 3439
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR flags$[rbp]
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR buf$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	call	?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@InputScala
; Line 3440
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR [rax+8424]
	lea	rcx, QWORD PTR buf$[rbp]
	call	?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z ; ImGui::DataTypeApplyOpFromText
	mov	BYTE PTR value_changed$[rbp], al
$LN7@InputScala:
; Line 3443
	mov	rax, QWORD PTR style$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR backup_frame_padding$6[rbp], rax
; Line 3444
	mov	rax, QWORD PTR style$[rbp]
	mov	rcx, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rcx+60]
	movss	DWORD PTR [rax+56], xmm0
; Line 3445
	mov	DWORD PTR button_flags$7[rbp], 9216	; 00002400H
; Line 3446
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16384				; 00004000H
	test	eax, eax
	je	SHORT $LN8@InputScala
; Line 3447
	mov	eax, DWORD PTR button_flags$7[rbp]
	bts	eax, 14
	mov	DWORD PTR button_flags$7[rbp], eax
$LN8@InputScala:
; Line 3448
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 3449
	movss	xmm2, DWORD PTR button_size$5[rbp]
	movss	xmm1, DWORD PTR button_size$5[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8d, DWORD PTR button_flags$7[rbp]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
	call	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::ButtonEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@InputScala
; Line 3451
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+320]
	test	eax, eax
	je	SHORT $LN15@InputScala
	cmp	QWORD PTR p_step_fast$[rbp], 0
	je	SHORT $LN15@InputScala
	mov	rax, QWORD PTR p_step_fast$[rbp]
	mov	QWORD PTR tv174[rbp], rax
	jmp	SHORT $LN16@InputScala
$LN15@InputScala:
	mov	rax, QWORD PTR p_step$[rbp]
	mov	QWORD PTR tv174[rbp], rax
$LN16@InputScala:
	mov	rax, QWORD PTR tv174[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, 45					; 0000002dH
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z ; ImGui::DataTypeApplyOp
; Line 3452
	mov	BYTE PTR value_changed$[rbp], 1
$LN9@InputScala:
; Line 3454
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 3455
	movss	xmm2, DWORD PTR button_size$5[rbp]
	movss	xmm1, DWORD PTR button_size$5[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8d, DWORD PTR button_flags$7[rbp]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL@
	call	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::ButtonEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@InputScala
; Line 3457
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+320]
	test	eax, eax
	je	SHORT $LN17@InputScala
	cmp	QWORD PTR p_step_fast$[rbp], 0
	je	SHORT $LN17@InputScala
	mov	rax, QWORD PTR p_step_fast$[rbp]
	mov	QWORD PTR tv199[rbp], rax
	jmp	SHORT $LN18@InputScala
$LN17@InputScala:
	mov	rax, QWORD PTR p_step$[rbp]
	mov	QWORD PTR tv199[rbp], rax
$LN18@InputScala:
	mov	rax, QWORD PTR tv199[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, 43					; 0000002bH
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeApplyOp@ImGui@@YAXHHPEAXPEBX1@Z ; ImGui::DataTypeApplyOp
; Line 3458
	mov	BYTE PTR value_changed$[rbp], 1
$LN10@InputScala:
; Line 3461
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_end$8[rbp], rax
; Line 3462
	mov	rax, QWORD PTR label_end$8[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	SHORT $LN11@InputScala
; Line 3464
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 3465
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_end$8[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN11@InputScala:
; Line 3467
	mov	rax, QWORD PTR style$[rbp]
	mov	rcx, QWORD PTR backup_frame_padding$6[rbp]
	mov	QWORD PTR [rax+56], rcx
; Line 3469
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 3470
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 3471
	jmp	SHORT $LN6@InputScala
$LN5@InputScala:
; Line 3474
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR flags$[rbp]
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR buf$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputText
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@InputScala
; Line 3475
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR [rax+8424]
	lea	rcx, QWORD PTR buf$[rbp]
	call	?DataTypeApplyOpFromText@ImGui@@YA_NPEBD0HPEAX0@Z ; ImGui::DataTypeApplyOpFromText
	mov	BYTE PTR value_changed$[rbp], al
$LN12@InputScala:
$LN6@InputScala:
; Line 3477
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN13@InputScala
; Line 3478
	mov	rax, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR [rax+292]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN13@InputScala:
; Line 3480
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@InputScala:
; Line 3481
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+632]
	pop	rdi
	pop	rbp
	ret	0
?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ENDP		; ImGui::InputScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z
_TEXT	SEGMENT
tv78 = 192
tv69 = 200
tv72 = 208
label$ = 256
v$ = 264
step$ = 272
step_fast$ = 280
format$ = 288
flags$ = 296
?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z PROC		; ImGui::InputDouble, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3562
$LN7:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3563
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 17
	mov	DWORD PTR flags$[rbp], eax
; Line 3564
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv78[rbp], rax
	movsd	xmm0, QWORD PTR step_fast$[rbp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN3@InputDoubl
	lea	rax, QWORD PTR step_fast$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	jmp	SHORT $LN4@InputDoubl
$LN3@InputDoubl:
	mov	QWORD PTR tv69[rbp], 0
$LN4@InputDoubl:
	movsd	xmm0, QWORD PTR step$[rbp]
	comisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN5@InputDoubl
	lea	rax, QWORD PTR step$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	jmp	SHORT $LN6@InputDoubl
$LN5@InputDoubl:
	mov	QWORD PTR tv72[rbp], 0
$LN6@InputDoubl:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv78[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv69[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv72[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 9
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar
; Line 3565
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?InputDouble@ImGui@@YA_NPEBDPEANNN0H@Z ENDP		; ImGui::InputDouble
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputInt4@ImGui@@YA_NPEBDQEAHH@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
flags$ = 240
?InputInt4@ImGui@@YA_NPEBDQEAHH@Z PROC			; ImGui::InputInt4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3557
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3558
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	lea	rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::InputScalarN
; Line 3559
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputInt4@ImGui@@YA_NPEBDQEAHH@Z ENDP			; ImGui::InputInt4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputInt3@ImGui@@YA_NPEBDQEAHH@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
flags$ = 240
?InputInt3@ImGui@@YA_NPEBDQEAHH@Z PROC			; ImGui::InputInt3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3552
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3553
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	lea	rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 3
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::InputScalarN
; Line 3554
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputInt3@ImGui@@YA_NPEBDQEAHH@Z ENDP			; ImGui::InputInt3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputInt2@ImGui@@YA_NPEBDQEAHH@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
flags$ = 240
?InputInt2@ImGui@@YA_NPEBDQEAHH@Z PROC			; ImGui::InputInt2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3547
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3548
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	lea	rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 2
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::InputScalarN
; Line 3549
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputInt2@ImGui@@YA_NPEBDQEAHH@Z ENDP			; ImGui::InputInt2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z
_TEXT	SEGMENT
format$ = 8
tv80 = 216
tv66 = 216
tv71 = 224
tv74 = 232
label$ = 272
v$ = 280
step$ = 288
step_fast$ = 296
flags$ = 304
?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z PROC			; ImGui::InputInt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3540
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3542
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN3@InputInt
	lea	rax, OFFSET FLAT:??_C@_04JIMNDDED@?$CF08X@
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@InputInt
$LN3@InputInt:
	lea	rax, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	mov	QWORD PTR tv66[rbp], rax
$LN4@InputInt:
	mov	rax, QWORD PTR tv66[rbp]
	mov	QWORD PTR format$[rbp], rax
; Line 3543
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv80[rbp], rax
	cmp	DWORD PTR step_fast$[rbp], 0
	jle	SHORT $LN5@InputInt
	lea	rax, QWORD PTR step_fast$[rbp]
	mov	QWORD PTR tv71[rbp], rax
	jmp	SHORT $LN6@InputInt
$LN5@InputInt:
	mov	QWORD PTR tv71[rbp], 0
$LN6@InputInt:
	cmp	DWORD PTR step$[rbp], 0
	jle	SHORT $LN7@InputInt
	lea	rax, QWORD PTR step$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	jmp	SHORT $LN8@InputInt
$LN7@InputInt:
	mov	QWORD PTR tv74[rbp], 0
$LN8@InputInt:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv80[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv71[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv74[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar
; Line 3544
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?InputInt@ImGui@@YA_NPEBDPEAHHHH@Z ENDP			; ImGui::InputInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
format$ = 240
flags$ = 248
?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z PROC		; ImGui::InputFloat4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3535
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3536
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::InputScalarN
; Line 3537
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputFloat4@ImGui@@YA_NPEBDQEAM0H@Z ENDP		; ImGui::InputFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
format$ = 240
flags$ = 248
?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z PROC		; ImGui::InputFloat3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3530
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3531
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 3
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::InputScalarN
; Line 3532
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputFloat3@ImGui@@YA_NPEBDQEAM0H@Z ENDP		; ImGui::InputFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
format$ = 240
flags$ = 248
?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z PROC		; ImGui::InputFloat2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3525
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3526
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, 2
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::InputScalarN
; Line 3527
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputFloat2@ImGui@@YA_NPEBDQEAM0H@Z ENDP		; ImGui::InputFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z
_TEXT	SEGMENT
tv78 = 192
tv69 = 200
tv72 = 208
label$ = 256
v$ = 264
step$ = 272
step_fast$ = 280
format$ = 288
flags$ = 296
?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z PROC		; ImGui::InputFloat, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3519
$LN7:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3520
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 17
	mov	DWORD PTR flags$[rbp], eax
; Line 3521
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv78[rbp], rax
	movss	xmm0, DWORD PTR step_fast$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@InputFloat
	lea	rax, QWORD PTR step_fast$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	jmp	SHORT $LN4@InputFloat
$LN3@InputFloat:
	mov	QWORD PTR tv69[rbp], 0
$LN4@InputFloat:
	movss	xmm0, DWORD PTR step$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@InputFloat
	lea	rax, QWORD PTR step$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	jmp	SHORT $LN6@InputFloat
$LN5@InputFloat:
	mov	QWORD PTR tv72[rbp], 0
$LN6@InputFloat:
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv78[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv69[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv72[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::InputScalar
; Line 3522
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?InputFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ENDP		; ImGui::InputFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
_TEXT	SEGMENT
$T1 = 196
label$ = 256
hint$ = 264
buf$ = 272
buf_size$ = 280
flags$ = 288
callback$ = 296
user_data$ = 304
?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z PROC ; ImGui::InputTextWithHint, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3588
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3589
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN3@InputTextW
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@IFNBIILP@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@InputTextW:
; Line 3590
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR user_data$[rbp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR callback$[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR buf_size$[rbp]
	mov	r8, QWORD PTR buf$[rbp]
	mov	rdx, QWORD PTR hint$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextEx
; Line 3591
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?InputTextWithHint@ImGui@@YA_NPEBD0PEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ENDP ; ImGui::InputTextWithHint
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
_TEXT	SEGMENT
label$ = 224
buf$ = 232
buf_size$ = 240
size$ = 248
flags$ = 256
callback$ = 264
user_data$ = 272
?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z PROC ; ImGui::InputTextMultiline, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3583
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3584
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 26
	mov	rcx, QWORD PTR user_data$[rbp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR callback$[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR buf_size$[rbp]
	mov	r8, QWORD PTR buf$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextEx
; Line 3585
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?InputTextMultiline@ImGui@@YA_NPEBDPEAD_KAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ENDP ; ImGui::InputTextMultiline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z
_TEXT	SEGMENT
$T1 = 196
label$ = 256
buf$ = 264
buf_size$ = 272
flags$ = 280
callback$ = 288
user_data$ = 296
?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z PROC ; ImGui::InputText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3577
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3578
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	je	SHORT $LN3@InputText
	mov	eax, DWORD PTR ?__LINE__Var@?0??InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@IFNBIILP@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@InputText:
; Line 3579
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR user_data$[rbp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR callback$[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR buf_size$[rbp]
	mov	r8, QWORD PTR buf$[rbp]
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?InputTextEx@ImGui@@YA_NPEBD0PEADHAEBUImVec2@@HP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ; ImGui::InputTextEx
; Line 3580
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?InputText@ImGui@@YA_NPEBDPEAD_KHP6AHPEAUImGuiInputTextCallbackData@@@ZPEAX@Z ENDP ; ImGui::InputText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
label_size$ = 136
frame_bb$ = 168
bb$ = 216
hovered$ = 260
frame_col$ = 292
grab_bb$ = 328
value_changed$ = 372
value_buf$ = 416
value_buf_end$ = 504
$T8 = 916
$T9 = 948
$T10 = 980
$T11 = 1012
$T12 = 1044
$T13 = 1076
tv189 = 1092
tv131 = 1092
tv298 = 1096
tv268 = 1096
tv188 = 1096
tv296 = 1104
tv264 = 1104
tv258 = 1108
tv266 = 1112
__$ArrayPad$ = 1120
label$ = 1168
size$ = 1176
data_type$ = 1184
p_data$ = 1192
p_min$ = 1200
p_max$ = 1208
format$ = 1216
flags$ = 1224
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z PROC ; ImGui::VSliderScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3159
$LN25:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1224				; 000004c8H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3160
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3161
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@VSliderSca
; Line 3162
	xor	al, al
	jmp	$LN1@VSliderSca
$LN2@VSliderSca:
; Line 3164
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3165
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 3166
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 3168
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 3169
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	mov	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3170
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN14@VSliderSca
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv131[rbp], xmm0
	jmp	SHORT $LN15@VSliderSca
$LN14@VSliderSca:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv131[rbp], xmm0
$LN15@VSliderSca:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR tv131[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3172
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 3173
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@VSliderSca
; Line 3174
	xor	al, al
	jmp	$LN1@VSliderSca
$LN3@VSliderSca:
; Line 3177
	cmp	QWORD PTR format$[rbp], 0
	jne	SHORT $LN4@VSliderSca
; Line 3178
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR format$[rbp], rax
	jmp	SHORT $LN5@VSliderSca
$LN4@VSliderSca:
; Line 3179
	cmp	DWORD PTR data_type$[rbp], 4
	jne	SHORT $LN6@VSliderSca
	mov	rax, QWORD PTR format$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	sub	rcx, rax
$LL22@VSliderSca:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+rcx]
	jne	SHORT $LN24@VSliderSca
	inc	rax
	test	dl, dl
	jne	SHORT $LL22@VSliderSca
	xor	eax, eax
	jmp	SHORT $LN23@VSliderSca
$LN24@VSliderSca:
	sbb	eax, eax
	or	eax, 1
$LN23@VSliderSca:
	test	eax, eax
	je	SHORT $LN6@VSliderSca
; Line 3180
	mov	rcx, QWORD PTR format$[rbp]
	call	?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z ; PatchFormatStringFloatToInt
	mov	QWORD PTR format$[rbp], rax
$LN6@VSliderSca:
$LN5@VSliderSca:
; Line 3182
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR hovered$[rbp], al
; Line 3183
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN9@VSliderSca
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1056]
	test	eax, eax
	jne	SHORT $LN8@VSliderSca
$LN9@VSliderSca:
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	je	SHORT $LN8@VSliderSca
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7652], ecx
	jne	SHORT $LN7@VSliderSca
$LN8@VSliderSca:
; Line 3185
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
; Line 3186
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetFocusID
; Line 3187
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
; Line 3188
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7280]
	or	eax, 12
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7280], eax
$LN7@VSliderSca:
; Line 3192
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN18@VSliderSca
	mov	DWORD PTR tv189[rbp], 9
	jmp	SHORT $LN19@VSliderSca
$LN18@VSliderSca:
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	jne	SHORT $LN16@VSliderSca
	mov	DWORD PTR tv188[rbp], 8
	jmp	SHORT $LN17@VSliderSca
$LN16@VSliderSca:
	mov	DWORD PTR tv188[rbp], 7
$LN17@VSliderSca:
	mov	eax, DWORD PTR tv188[rbp]
	mov	DWORD PTR tv189[rbp], eax
$LN19@VSliderSca:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv189[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR frame_col$[rbp], eax
; Line 3193
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 3194
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5536]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR frame_col$[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 3197
	lea	rcx, QWORD PTR grab_bb$[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
; Line 3198
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 20
	lea	rcx, QWORD PTR grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rcx
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z ; ImGui::SliderBehavior
	mov	BYTE PTR value_changed$[rbp], al
; Line 3199
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN10@VSliderSca
; Line 3200
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN10@VSliderSca:
; Line 3203
	movss	xmm0, DWORD PTR grab_bb$[rbp+12]
	comiss	xmm0, DWORD PTR grab_bb$[rbp+4]
	jbe	$LN11@VSliderSca
; Line 3204
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv268[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+124]
	movss	DWORD PTR tv264[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN20@VSliderSca
	mov	DWORD PTR tv258[rbp], 20
	jmp	SHORT $LN21@VSliderSca
$LN20@VSliderSca:
	mov	DWORD PTR tv258[rbp], 19
$LN21@VSliderSca:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv258[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv266[rbp], eax
	mov	DWORD PTR [rsp+40], 0
	movss	xmm0, DWORD PTR tv264[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv266[rbp]
	lea	r8, QWORD PTR grab_bb$[rbp+8]
	lea	rdx, QWORD PTR grab_bb$[rbp]
	mov	rcx, QWORD PTR tv268[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN11@VSliderSca:
; Line 3209
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR value_buf$[rbp]
	call	?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ; ImGui::DataTypeFormatString
	cdqe
	lea	rax, QWORD PTR value_buf$[rbp+rax]
	mov	QWORD PTR value_buf_end$[rbp], rax
; Line 3210
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv298[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv296[rbp], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR tv298[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR value_buf_end$[rbp]
	lea	r8, QWORD PTR value_buf$[rbp]
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR tv296[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 3211
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@VSliderSca
; Line 3212
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN12@VSliderSca:
; Line 3214
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@VSliderSca:
; Line 3215
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1144]
	pop	rdi
	pop	rbp
	ret	0
?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z ENDP ; ImGui::VSliderScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z
_TEXT	SEGMENT
label$ = 224
size$ = 232
v$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z PROC	; ImGui::VSliderInt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3223
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3224
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v$[rbp]
	mov	r8d, 4
	mov	rdx, QWORD PTR size$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z ; ImGui::VSliderScalar
; Line 3225
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?VSliderInt@ImGui@@YA_NPEBDAEBUImVec2@@PEAHHH0H@Z ENDP	; ImGui::VSliderInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z
_TEXT	SEGMENT
label$ = 224
size$ = 232
v$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z PROC ; ImGui::VSliderFloat, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3218
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3219
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR v$[rbp]
	mov	r8d, 8
	mov	rdx, QWORD PTR size$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?VSliderScalar@ImGui@@YA_NPEBDAEBUImVec2@@HPEAXPEBX30H@Z ; ImGui::VSliderScalar
; Line 3220
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?VSliderFloat@ImGui@@YA_NPEBDAEBUImVec2@@PEAMMM0H@Z ENDP ; ImGui::VSliderFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
value_changed$ = 68
type_size$ = 104
i$1 = 132
label_end$ = 168
tv85 = 372
label$ = 416
data_type$ = 424
v$ = 432
components$ = 440
v_min$ = 448
v_max$ = 456
format$ = 464
flags$ = 472
?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z PROC	; ImGui::SliderScalarN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3074
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3075
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3076
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN5@SliderScal
; Line 3077
	xor	al, al
	jmp	$LN1@SliderScal
$LN5@SliderScal:
; Line 3079
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3080
	mov	BYTE PTR value_changed$[rbp], 0
; Line 3081
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 3082
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 3083
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR components$[rbp]
	call	?PushMultiItemsWidths@ImGui@@YAXHM@Z	; ImGui::PushMultiItemsWidths
; Line 3084
	movsxd	rax, DWORD PTR data_type$[rbp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?GDataTypeInfo@@3QBUImGuiDataTypeInfo@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR type_size$[rbp], rax
; Line 3085
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@SliderScal
$LN2@SliderScal:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@SliderScal:
	mov	eax, DWORD PTR components$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@SliderScal
; Line 3087
	mov	ecx, DWORD PTR i$1[rbp]
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 3088
	cmp	DWORD PTR i$1[rbp], 0
	jle	SHORT $LN6@SliderScal
; Line 3089
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
$LN6@SliderScal:
; Line 3090
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv85[rbp], eax
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR v_min$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	call	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar
	movzx	eax, al
	mov	ecx, DWORD PTR tv85[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 3091
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 3092
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 3093
	mov	rax, QWORD PTR type_size$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$[rbp], rax
; Line 3094
	jmp	$LN2@SliderScal
$LN3@SliderScal:
; Line 3095
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 3097
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_end$[rbp], rax
; Line 3098
	mov	rax, QWORD PTR label_end$[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	SHORT $LN7@SliderScal
; Line 3100
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 3101
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_end$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN7@SliderScal:
; Line 3104
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 3105
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@SliderScal:
; Line 3106
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ENDP	; ImGui::SliderScalarN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
w$ = 132
label_size$ = 168
frame_bb$ = 200
total_bb$ = 248
temp_input_allowed$ = 292
hovered$ = 324
temp_input_is_active$ = 356
focus_requested$8 = 388
clicked$9 = 420
is_clamp_input$10 = 452
frame_col$ = 484
grab_bb$ = 520
value_changed$ = 564
value_buf$ = 608
value_buf_end$ = 696
$T11 = 1108
$T12 = 1140
$T13 = 1172
$T14 = 1204
$T15 = 1236
$T16 = 1268
tv258 = 1284
tv235 = 1284
tv202 = 1284
tv193 = 1284
tv183 = 1284
tv156 = 1284
tv148 = 1284
tv140 = 1284
tv336 = 1288
tv257 = 1288
tv239 = 1288
tv332 = 1296
tv243 = 1296
tv326 = 1300
tv334 = 1304
__$ArrayPad$ = 1312
label$ = 1360
data_type$ = 1368
p_data$ = 1376
p_min$ = 1384
p_max$ = 1392
format$ = 1400
flags$ = 1408
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z PROC	; ImGui::SliderScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2993
$LN46:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1416				; 00000588H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 238				; 000000eeH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1448]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2994
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 2995
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@SliderScal
; Line 2996
	xor	al, al
	jmp	$LN1@SliderScal
$LN2@SliderScal:
; Line 2998
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2999
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 3000
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 3001
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR w$[rbp], xmm0
; Line 3003
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 3004
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR w$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T12[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3005
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN19@SliderScal
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv140[rbp], xmm0
	jmp	SHORT $LN20@SliderScal
$LN19@SliderScal:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv140[rbp], xmm0
$LN20@SliderScal:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR tv140[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3007
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN21@SliderScal
	mov	BYTE PTR tv148[rbp], 1
	jmp	SHORT $LN22@SliderScal
$LN21@SliderScal:
	mov	BYTE PTR tv148[rbp], 0
$LN22@SliderScal:
	movzx	eax, BYTE PTR tv148[rbp]
	mov	BYTE PTR temp_input_allowed$[rbp], al
; Line 3008
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 3009
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN23@SliderScal
	mov	DWORD PTR tv156[rbp], 1
	jmp	SHORT $LN24@SliderScal
$LN23@SliderScal:
	mov	DWORD PTR tv156[rbp], 0
$LN24@SliderScal:
	mov	r9d, DWORD PTR tv156[rbp]
	lea	r8, QWORD PTR frame_bb$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@SliderScal
; Line 3010
	xor	al, al
	jmp	$LN1@SliderScal
$LN3@SliderScal:
; Line 3013
	cmp	QWORD PTR format$[rbp], 0
	jne	SHORT $LN4@SliderScal
; Line 3014
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR format$[rbp], rax
	jmp	SHORT $LN5@SliderScal
$LN4@SliderScal:
; Line 3015
	cmp	DWORD PTR data_type$[rbp], 4
	jne	SHORT $LN6@SliderScal
	mov	rax, QWORD PTR format$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	sub	rcx, rax
$LL43@SliderScal:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+rcx]
	jne	SHORT $LN45@SliderScal
	inc	rax
	test	dl, dl
	jne	SHORT $LL43@SliderScal
	xor	eax, eax
	jmp	SHORT $LN44@SliderScal
$LN45@SliderScal:
	sbb	eax, eax
	or	eax, 1
$LN44@SliderScal:
	test	eax, eax
	je	SHORT $LN6@SliderScal
; Line 3016
	mov	rcx, QWORD PTR format$[rbp]
	call	?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z ; PatchFormatStringFloatToInt
	mov	QWORD PTR format$[rbp], rax
$LN6@SliderScal:
$LN5@SliderScal:
; Line 3019
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR hovered$[rbp], al
; Line 3020
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN25@SliderScal
	mov	ecx, DWORD PTR id$[rbp]
	call	?TempInputIsActive@ImGui@@YA_NI@Z	; ImGui::TempInputIsActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN25@SliderScal
	mov	DWORD PTR tv183[rbp], 1
	jmp	SHORT $LN26@SliderScal
$LN25@SliderScal:
	mov	DWORD PTR tv183[rbp], 0
$LN26@SliderScal:
	movzx	eax, BYTE PTR tv183[rbp]
	mov	BYTE PTR temp_input_is_active$[rbp], al
; Line 3021
	movzx	eax, BYTE PTR temp_input_is_active$[rbp]
	test	eax, eax
	jne	$LN7@SliderScal
; Line 3023
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN27@SliderScal
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	and	eax, 768				; 00000300H
	test	eax, eax
	je	SHORT $LN27@SliderScal
	mov	BYTE PTR tv193[rbp], 1
	jmp	SHORT $LN28@SliderScal
$LN27@SliderScal:
	mov	BYTE PTR tv193[rbp], 0
$LN28@SliderScal:
	movzx	eax, BYTE PTR tv193[rbp]
	mov	BYTE PTR focus_requested$8[rbp], al
; Line 3024
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN29@SliderScal
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1056]
	test	eax, eax
	je	SHORT $LN29@SliderScal
	mov	BYTE PTR tv202[rbp], 1
	jmp	SHORT $LN30@SliderScal
$LN29@SliderScal:
	mov	BYTE PTR tv202[rbp], 0
$LN30@SliderScal:
	movzx	eax, BYTE PTR tv202[rbp]
	mov	BYTE PTR clicked$9[rbp], al
; Line 3025
	movzx	eax, BYTE PTR focus_requested$8[rbp]
	test	eax, eax
	jne	SHORT $LN9@SliderScal
	movzx	eax, BYTE PTR clicked$9[rbp]
	test	eax, eax
	jne	SHORT $LN9@SliderScal
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	je	SHORT $LN9@SliderScal
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7652], ecx
	jne	SHORT $LN8@SliderScal
$LN9@SliderScal:
; Line 3027
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
; Line 3028
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetFocusID
; Line 3029
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
; Line 3030
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7280]
	or	eax, 3
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+7280], eax
; Line 3031
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN10@SliderScal
	movzx	eax, BYTE PTR focus_requested$8[rbp]
	test	eax, eax
	jne	SHORT $LN11@SliderScal
	movzx	eax, BYTE PTR clicked$9[rbp]
	test	eax, eax
	je	SHORT $LN12@SliderScal
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+320]
	test	eax, eax
	jne	SHORT $LN11@SliderScal
$LN12@SliderScal:
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7652], ecx
	jne	SHORT $LN10@SliderScal
$LN11@SliderScal:
; Line 3032
	mov	BYTE PTR temp_input_is_active$[rbp], 1
$LN10@SliderScal:
$LN8@SliderScal:
$LN7@SliderScal:
; Line 3036
	movzx	eax, BYTE PTR temp_input_is_active$[rbp]
	test	eax, eax
	je	$LN13@SliderScal
; Line 3039
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN31@SliderScal
	mov	BYTE PTR tv235[rbp], 1
	jmp	SHORT $LN32@SliderScal
$LN31@SliderScal:
	mov	BYTE PTR tv235[rbp], 0
$LN32@SliderScal:
	movzx	eax, BYTE PTR tv235[rbp]
	mov	BYTE PTR is_clamp_input$10[rbp], al
; Line 3040
	movzx	eax, BYTE PTR is_clamp_input$10[rbp]
	test	eax, eax
	je	SHORT $LN33@SliderScal
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR tv239[rbp], rax
	jmp	SHORT $LN34@SliderScal
$LN33@SliderScal:
	mov	QWORD PTR tv239[rbp], 0
$LN34@SliderScal:
	movzx	eax, BYTE PTR is_clamp_input$10[rbp]
	test	eax, eax
	je	SHORT $LN35@SliderScal
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR tv243[rbp], rax
	jmp	SHORT $LN36@SliderScal
$LN35@SliderScal:
	mov	QWORD PTR tv243[rbp], 0
$LN36@SliderScal:
	mov	rax, QWORD PTR tv239[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR tv243[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_data$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR data_type$[rbp]
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z ; ImGui::TempInputScalar
	jmp	$LN1@SliderScal
$LN13@SliderScal:
; Line 3044
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN39@SliderScal
	mov	DWORD PTR tv258[rbp], 9
	jmp	SHORT $LN40@SliderScal
$LN39@SliderScal:
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	jne	SHORT $LN37@SliderScal
	mov	DWORD PTR tv257[rbp], 8
	jmp	SHORT $LN38@SliderScal
$LN37@SliderScal:
	mov	DWORD PTR tv257[rbp], 7
$LN38@SliderScal:
	mov	eax, DWORD PTR tv257[rbp]
	mov	DWORD PTR tv258[rbp], eax
$LN40@SliderScal:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv258[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR frame_col$[rbp], eax
; Line 3045
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 3046
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5536]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR frame_col$[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 3049
	lea	rcx, QWORD PTR grab_bb$[rbp]
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
; Line 3050
	lea	rax, QWORD PTR grab_bb$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?SliderBehavior@ImGui@@YA_NAEBUImRect@@IHPEAXPEBX2PEBDHPEAU2@@Z ; ImGui::SliderBehavior
	mov	BYTE PTR value_changed$[rbp], al
; Line 3051
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN14@SliderScal
; Line 3052
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN14@SliderScal:
; Line 3055
	movss	xmm0, DWORD PTR grab_bb$[rbp+8]
	comiss	xmm0, DWORD PTR grab_bb$[rbp]
	jbe	$LN15@SliderScal
; Line 3056
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv336[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+124]
	movss	DWORD PTR tv332[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN41@SliderScal
	mov	DWORD PTR tv326[rbp], 20
	jmp	SHORT $LN42@SliderScal
$LN41@SliderScal:
	mov	DWORD PTR tv326[rbp], 19
$LN42@SliderScal:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv326[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv334[rbp], eax
	mov	DWORD PTR [rsp+40], 0
	movss	xmm0, DWORD PTR tv332[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv334[rbp]
	lea	r8, QWORD PTR grab_bb$[rbp+8]
	lea	rdx, QWORD PTR grab_bb$[rbp]
	mov	rcx, QWORD PTR tv336[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN15@SliderScal:
; Line 3060
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR value_buf$[rbp]
	call	?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ; ImGui::DataTypeFormatString
	cdqe
	lea	rax, QWORD PTR value_buf$[rbp+rax]
	mov	QWORD PTR value_buf_end$[rbp], rax
; Line 3061
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN16@SliderScal
; Line 3062
	lea	rdx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN@
	lea	rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
$LN16@SliderScal:
; Line 3063
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR value_buf_end$[rbp]
	lea	r8, QWORD PTR value_buf$[rbp]
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 3065
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN17@SliderScal
; Line 3066
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN17@SliderScal:
; Line 3069
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@SliderScal:
; Line 3070
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1336]
	pop	rdi
	pop	rbp
	ret	0
?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ENDP	; ImGui::SliderScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z PROC		; ImGui::SliderInt4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3154
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3155
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3156
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderInt4@ImGui@@YA_NPEBDQEAHHH0H@Z ENDP		; ImGui::SliderInt4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z PROC		; ImGui::SliderInt3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3149
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3150
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3151
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderInt3@ImGui@@YA_NPEBDQEAHHH0H@Z ENDP		; ImGui::SliderInt3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z PROC		; ImGui::SliderInt2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3144
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3145
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 2
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3146
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderInt2@ImGui@@YA_NPEBDQEAHHH0H@Z ENDP		; ImGui::SliderInt2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z PROC		; ImGui::SliderInt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3139
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3140
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR v_min$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar
; Line 3141
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderInt@ImGui@@YA_NPEBDPEAHHH0H@Z ENDP		; ImGui::SliderInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z
_TEXT	SEGMENT
v_deg$ = 4
value_changed$ = 36
__$ArrayPad$ = 248
label$ = 288
v_rad$ = 296
v_degrees_min$ = 304
v_degrees_max$ = 312
format$ = 320
flags$ = 328
?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z PROC		; ImGui::SliderAngle, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3129
$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3130
	cmp	QWORD PTR format$[rbp], 0
	jne	SHORT $LN2@SliderAngl
; Line 3131
	lea	rax, OFFSET FLAT:??_C@_08FKIHKODH@?$CF?40f?5deg@
	mov	QWORD PTR format$[rbp], rax
$LN2@SliderAngl:
; Line 3132
	mov	rax, QWORD PTR v_rad$[rbp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR __real@43b40000
	divss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR v_deg$[rbp], xmm0
; Line 3133
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_degrees_max$[rbp]
	movss	xmm2, DWORD PTR v_degrees_min$[rbp]
	lea	rdx, QWORD PTR v_deg$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z	; ImGui::SliderFloat
	mov	BYTE PTR value_changed$[rbp], al
; Line 3134
	movss	xmm0, DWORD PTR v_deg$[rbp]
	mulss	xmm0, DWORD PTR __real@40c90fdb
	divss	xmm0, DWORD PTR __real@43b40000
	mov	rax, QWORD PTR v_rad$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 3135
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 3136
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?SliderAngle@ImGui@@YA_NPEBDPEAMMM0H@Z ENDP		; ImGui::SliderAngle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z PROC		; ImGui::SliderFloat4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3124
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3125
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3126
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderFloat4@ImGui@@YA_NPEBDQEAMMM0H@Z ENDP		; ImGui::SliderFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z PROC		; ImGui::SliderFloat3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3119
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3120
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3121
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderFloat3@ImGui@@YA_NPEBDQEAMMM0H@Z ENDP		; ImGui::SliderFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z PROC		; ImGui::SliderFloat2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3114
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3115
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 2
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalarN@ImGui@@YA_NPEBDHPEAXHPEBX20H@Z ; ImGui::SliderScalarN
; Line 3116
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderFloat2@ImGui@@YA_NPEBDQEAMMM0H@Z ENDP		; ImGui::SliderFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_min$ = 240
v_max$ = 248
format$ = 256
flags$ = 264
?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z PROC		; ImGui::SliderFloat, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 3109
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3110
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR v_min$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?SliderScalar@ImGui@@YA_NPEBDHPEAXPEBX20H@Z ; ImGui::SliderScalar
; Line 3111
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SliderFloat@ImGui@@YA_NPEBDPEAMMM0H@Z ENDP		; ImGui::SliderFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
value_changed$ = 68
type_size$ = 104
i$1 = 132
label_end$ = 168
tv85 = 372
label$ = 416
data_type$ = 424
p_data$ = 432
components$ = 440
v_speed$ = 448
p_min$ = 456
p_max$ = 464
format$ = 472
flags$ = 480
?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z PROC	; ImGui::DragScalarN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2462
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2463
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 2464
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN5@DragScalar
; Line 2465
	xor	al, al
	jmp	$LN1@DragScalar
$LN5@DragScalar:
; Line 2467
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2468
	mov	BYTE PTR value_changed$[rbp], 0
; Line 2469
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 2470
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 2471
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movaps	xmm1, xmm0
	mov	ecx, DWORD PTR components$[rbp]
	call	?PushMultiItemsWidths@ImGui@@YAXHM@Z	; ImGui::PushMultiItemsWidths
; Line 2472
	movsxd	rax, DWORD PTR data_type$[rbp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?GDataTypeInfo@@3QBUImGuiDataTypeInfo@@B
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR type_size$[rbp], rax
; Line 2473
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@DragScalar
$LN2@DragScalar:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@DragScalar:
	mov	eax, DWORD PTR components$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@DragScalar
; Line 2475
	mov	ecx, DWORD PTR i$1[rbp]
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 2476
	cmp	DWORD PTR i$1[rbp], 0
	jle	SHORT $LN6@DragScalar
; Line 2477
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
$LN6@DragScalar:
; Line 2478
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv85[rbp], eax
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], ecx
	mov	rcx, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR p_min$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_00CNPNBAHC@@
	call	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
	movzx	eax, al
	mov	ecx, DWORD PTR tv85[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 2479
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 2480
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 2481
	mov	rax, QWORD PTR type_size$[rbp]
	mov	rcx, QWORD PTR p_data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p_data$[rbp], rax
; Line 2482
	jmp	$LN2@DragScalar
$LN3@DragScalar:
; Line 2483
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 2485
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_end$[rbp], rax
; Line 2486
	mov	rax, QWORD PTR label_end$[rbp]
	cmp	QWORD PTR label$[rbp], rax
	je	SHORT $LN7@DragScalar
; Line 2488
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 2489
	xor	r8d, r8d
	mov	rdx, QWORD PTR label_end$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN7@DragScalar:
; Line 2492
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 2493
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@DragScalar:
; Line 2494
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ENDP	; ImGui::DragScalarN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
w$ = 132
label_size$ = 168
frame_bb$ = 200
total_bb$ = 248
temp_input_allowed$ = 292
hovered$ = 324
temp_input_is_active$ = 356
focus_requested$7 = 388
clicked$8 = 420
double_clicked$9 = 452
is_clamp_input$10 = 484
frame_col$ = 516
value_changed$ = 548
value_buf$ = 592
value_buf_end$ = 680
$T11 = 1092
$T12 = 1124
$T13 = 1156
$T14 = 1188
$T15 = 1220
$T16 = 1252
tv335 = 1268
tv280 = 1268
tv211 = 1268
tv202 = 1268
tv193 = 1268
tv183 = 1268
tv156 = 1268
tv148 = 1268
tv140 = 1268
tv334 = 1272
tv284 = 1272
tv320 = 1280
__$ArrayPad$ = 1288
label$ = 1328
data_type$ = 1336
p_data$ = 1344
v_speed$ = 1352
p_min$ = 1360
p_max$ = 1368
format$ = 1376
flags$ = 1384
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z PROC		; ImGui::DragScalar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2378
$LN48:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1368				; 00000558H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 230				; 000000e6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1400]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2379
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 2380
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@DragScalar
; Line 2381
	xor	al, al
	jmp	$LN1@DragScalar
$LN2@DragScalar:
; Line 2383
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2384
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 2385
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 2386
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR w$[rbp], xmm0
; Line 2388
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 2389
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR w$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T12[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 2390
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@DragScalar
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv140[rbp], xmm0
	jmp	SHORT $LN21@DragScalar
$LN20@DragScalar:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv140[rbp], xmm0
$LN21@DragScalar:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR tv140[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR frame_bb$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 2392
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN22@DragScalar
	mov	BYTE PTR tv148[rbp], 1
	jmp	SHORT $LN23@DragScalar
$LN22@DragScalar:
	mov	BYTE PTR tv148[rbp], 0
$LN23@DragScalar:
	movzx	eax, BYTE PTR tv148[rbp]
	mov	BYTE PTR temp_input_allowed$[rbp], al
; Line 2393
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 2394
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN24@DragScalar
	mov	DWORD PTR tv156[rbp], 1
	jmp	SHORT $LN25@DragScalar
$LN24@DragScalar:
	mov	DWORD PTR tv156[rbp], 0
$LN25@DragScalar:
	mov	r9d, DWORD PTR tv156[rbp]
	lea	r8, QWORD PTR frame_bb$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@DragScalar
; Line 2395
	xor	al, al
	jmp	$LN1@DragScalar
$LN3@DragScalar:
; Line 2398
	cmp	QWORD PTR format$[rbp], 0
	jne	SHORT $LN4@DragScalar
; Line 2399
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeGetInfo@ImGui@@YAPEBUImGuiDataTypeInfo@@H@Z ; ImGui::DataTypeGetInfo
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR format$[rbp], rax
	jmp	SHORT $LN5@DragScalar
$LN4@DragScalar:
; Line 2400
	cmp	DWORD PTR data_type$[rbp], 4
	jne	SHORT $LN6@DragScalar
	mov	rax, QWORD PTR format$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	sub	rcx, rax
$LL45@DragScalar:
	movzx	edx, BYTE PTR [rax]
	cmp	dl, BYTE PTR [rax+rcx]
	jne	SHORT $LN47@DragScalar
	inc	rax
	test	dl, dl
	jne	SHORT $LL45@DragScalar
	xor	eax, eax
	jmp	SHORT $LN46@DragScalar
$LN47@DragScalar:
	sbb	eax, eax
	or	eax, 1
$LN46@DragScalar:
	test	eax, eax
	je	SHORT $LN6@DragScalar
; Line 2401
	mov	rcx, QWORD PTR format$[rbp]
	call	?PatchFormatStringFloatToInt@@YAPEBDPEBD@Z ; PatchFormatStringFloatToInt
	mov	QWORD PTR format$[rbp], rax
$LN6@DragScalar:
$LN5@DragScalar:
; Line 2404
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR hovered$[rbp], al
; Line 2405
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN26@DragScalar
	mov	ecx, DWORD PTR id$[rbp]
	call	?TempInputIsActive@ImGui@@YA_NI@Z	; ImGui::TempInputIsActive
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@DragScalar
	mov	DWORD PTR tv183[rbp], 1
	jmp	SHORT $LN27@DragScalar
$LN26@DragScalar:
	mov	DWORD PTR tv183[rbp], 0
$LN27@DragScalar:
	movzx	eax, BYTE PTR tv183[rbp]
	mov	BYTE PTR temp_input_is_active$[rbp], al
; Line 2406
	movzx	eax, BYTE PTR temp_input_is_active$[rbp]
	test	eax, eax
	jne	$LN7@DragScalar
; Line 2408
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN28@DragScalar
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+296]
	and	eax, 768				; 00000300H
	test	eax, eax
	je	SHORT $LN28@DragScalar
	mov	BYTE PTR tv193[rbp], 1
	jmp	SHORT $LN29@DragScalar
$LN28@DragScalar:
	mov	BYTE PTR tv193[rbp], 0
$LN29@DragScalar:
	movzx	eax, BYTE PTR tv193[rbp]
	mov	BYTE PTR focus_requested$7[rbp], al
; Line 2409
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN30@DragScalar
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1056]
	test	eax, eax
	je	SHORT $LN30@DragScalar
	mov	BYTE PTR tv202[rbp], 1
	jmp	SHORT $LN31@DragScalar
$LN30@DragScalar:
	mov	BYTE PTR tv202[rbp], 0
$LN31@DragScalar:
	movzx	eax, BYTE PTR tv202[rbp]
	mov	BYTE PTR clicked$8[rbp], al
; Line 2410
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN32@DragScalar
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1061]
	test	eax, eax
	je	SHORT $LN32@DragScalar
	mov	BYTE PTR tv211[rbp], 1
	jmp	SHORT $LN33@DragScalar
$LN32@DragScalar:
	mov	BYTE PTR tv211[rbp], 0
$LN33@DragScalar:
	movzx	eax, BYTE PTR tv211[rbp]
	mov	BYTE PTR double_clicked$9[rbp], al
; Line 2411
	movzx	eax, BYTE PTR focus_requested$7[rbp]
	test	eax, eax
	jne	SHORT $LN9@DragScalar
	movzx	eax, BYTE PTR clicked$8[rbp]
	test	eax, eax
	jne	SHORT $LN9@DragScalar
	movzx	eax, BYTE PTR double_clicked$9[rbp]
	test	eax, eax
	jne	SHORT $LN9@DragScalar
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	je	SHORT $LN9@DragScalar
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7652], ecx
	jne	$LN8@DragScalar
$LN9@DragScalar:
; Line 2413
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetActiveID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetActiveID
; Line 2414
	mov	rdx, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?SetFocusID@ImGui@@YAXIPEAUImGuiWindow@@@Z ; ImGui::SetFocusID
; Line 2415
	mov	rcx, QWORD PTR window$[rbp]
	call	?FocusWindow@ImGui@@YAXPEAUImGuiWindow@@@Z ; ImGui::FocusWindow
; Line 2416
	mov	rax, QWORD PTR g$[rbp]
	mov	DWORD PTR [rax+7280], 3
; Line 2417
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN10@DragScalar
	movzx	eax, BYTE PTR focus_requested$7[rbp]
	test	eax, eax
	jne	SHORT $LN11@DragScalar
	movzx	eax, BYTE PTR clicked$8[rbp]
	test	eax, eax
	je	SHORT $LN12@DragScalar
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+320]
	test	eax, eax
	jne	SHORT $LN11@DragScalar
$LN12@DragScalar:
	movzx	eax, BYTE PTR double_clicked$9[rbp]
	test	eax, eax
	jne	SHORT $LN11@DragScalar
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7652], ecx
	jne	SHORT $LN10@DragScalar
$LN11@DragScalar:
; Line 2418
	mov	BYTE PTR temp_input_is_active$[rbp], 1
$LN10@DragScalar:
$LN8@DragScalar:
; Line 2422
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+203]
	test	eax, eax
	je	SHORT $LN13@DragScalar
	movzx	eax, BYTE PTR temp_input_allowed$[rbp]
	test	eax, eax
	je	SHORT $LN13@DragScalar
	movzx	eax, BYTE PTR temp_input_is_active$[rbp]
	test	eax, eax
	jne	SHORT $LN13@DragScalar
; Line 2423
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN14@DragScalar
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN14@DragScalar
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+1066]
	test	eax, eax
	je	SHORT $LN14@DragScalar
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@3f000000
	movaps	xmm1, xmm0
	xor	ecx, ecx
	call	?IsMouseDragPastThreshold@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragPastThreshold
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@DragScalar
; Line 2425
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax+7652], ecx
; Line 2426
	mov	BYTE PTR temp_input_is_active$[rbp], 1
$LN14@DragScalar:
$LN13@DragScalar:
$LN7@DragScalar:
; Line 2430
	movzx	eax, BYTE PTR temp_input_is_active$[rbp]
	test	eax, eax
	je	$LN15@DragScalar
; Line 2433
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN35@DragScalar
	cmp	QWORD PTR p_min$[rbp], 0
	je	SHORT $LN34@DragScalar
	cmp	QWORD PTR p_max$[rbp], 0
	je	SHORT $LN34@DragScalar
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	ecx, DWORD PTR data_type$[rbp]
	call	?DataTypeCompare@ImGui@@YAHHPEBX0@Z	; ImGui::DataTypeCompare
	test	eax, eax
	jge	SHORT $LN35@DragScalar
$LN34@DragScalar:
	mov	BYTE PTR tv280[rbp], 1
	jmp	SHORT $LN36@DragScalar
$LN35@DragScalar:
	mov	BYTE PTR tv280[rbp], 0
$LN36@DragScalar:
	movzx	eax, BYTE PTR tv280[rbp]
	mov	BYTE PTR is_clamp_input$10[rbp], al
; Line 2434
	movzx	eax, BYTE PTR is_clamp_input$10[rbp]
	test	eax, eax
	je	SHORT $LN37@DragScalar
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR tv284[rbp], rax
	jmp	SHORT $LN38@DragScalar
$LN37@DragScalar:
	mov	QWORD PTR tv284[rbp], 0
$LN38@DragScalar:
	movzx	eax, BYTE PTR is_clamp_input$10[rbp]
	test	eax, eax
	je	SHORT $LN39@DragScalar
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR tv320[rbp], rax
	jmp	SHORT $LN40@DragScalar
$LN39@DragScalar:
	mov	QWORD PTR tv320[rbp], 0
$LN40@DragScalar:
	mov	rax, QWORD PTR tv284[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR tv320[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_data$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR data_type$[rbp]
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?TempInputScalar@ImGui@@YA_NAEBUImRect@@IPEBDHPEAX1PEBX3@Z ; ImGui::TempInputScalar
	jmp	$LN1@DragScalar
$LN15@DragScalar:
; Line 2438
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	jne	SHORT $LN43@DragScalar
	mov	DWORD PTR tv335[rbp], 9
	jmp	SHORT $LN44@DragScalar
$LN43@DragScalar:
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7240], ecx
	jne	SHORT $LN41@DragScalar
	mov	DWORD PTR tv334[rbp], 8
	jmp	SHORT $LN42@DragScalar
$LN41@DragScalar:
	mov	DWORD PTR tv334[rbp], 7
$LN42@DragScalar:
	mov	eax, DWORD PTR tv334[rbp]
	mov	DWORD PTR tv335[rbp], eax
$LN44@DragScalar:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv335[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR frame_col$[rbp], eax
; Line 2439
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 2440
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR frame_col$[rbp]
	mov	rdx, QWORD PTR frame_bb$[rbp+8]
	mov	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 2443
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR p_data$[rbp]
	mov	edx, DWORD PTR data_type$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?DragBehavior@ImGui@@YA_NIHPEAXMPEBX1PEBDH@Z ; ImGui::DragBehavior
	mov	BYTE PTR value_changed$[rbp], al
; Line 2444
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN16@DragScalar
; Line 2445
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN16@DragScalar:
; Line 2449
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_data$[rbp]
	mov	r8d, DWORD PTR data_type$[rbp]
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR value_buf$[rbp]
	call	?DataTypeFormatString@ImGui@@YAHPEADHHPEBXPEBD@Z ; ImGui::DataTypeFormatString
	cdqe
	lea	rax, QWORD PTR value_buf$[rbp+rax]
	mov	QWORD PTR value_buf_end$[rbp], rax
; Line 2450
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN17@DragScalar
; Line 2451
	lea	rdx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN@
	lea	rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
$LN17@DragScalar:
; Line 2452
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR value_buf_end$[rbp]
	lea	r8, QWORD PTR value_buf$[rbp]
	lea	rdx, QWORD PTR frame_bb$[rbp+8]
	lea	rcx, QWORD PTR frame_bb$[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 2454
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN18@DragScalar
; Line 2455
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR frame_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR frame_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN18@DragScalar:
; Line 2458
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@DragScalar:
; Line 2459
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1304]
	pop	rdi
	pop	rbp
	ret	0
?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ENDP		; ImGui::DragScalar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
min_min$ = 68
min_max$ = 100
min_flags$ = 132
value_changed$ = 164
max_min$ = 196
max_max$ = 228
max_flags$ = 260
tv152 = 468
tv135 = 468
tv133 = 468
tv131 = 468
tv80 = 468
tv78 = 468
tv73 = 468
tv149 = 472
tv141 = 480
label$ = 528
v_current_min$ = 536
v_current_max$ = 544
v_speed$ = 552
v_min$ = 560
v_max$ = 568
format$ = 576
format_max$ = 584
flags$ = 592
?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z PROC	; ImGui::DragIntRange2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2571
$LN18:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2572
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 2573
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@DragIntRan
; Line 2574
	xor	al, al
	jmp	$LN1@DragIntRan
$LN2@DragIntRan:
; Line 2576
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2577
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 2578
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 2579
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movaps	xmm1, xmm0
	mov	ecx, 2
	call	?PushMultiItemsWidths@ImGui@@YAXHM@Z	; ImGui::PushMultiItemsWidths
; Line 2581
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jl	SHORT $LN4@DragIntRan
	mov	DWORD PTR tv73[rbp], -2147483648	; ffffffff80000000H
	jmp	SHORT $LN5@DragIntRan
$LN4@DragIntRan:
	mov	eax, DWORD PTR v_min$[rbp]
	mov	DWORD PTR tv73[rbp], eax
$LN5@DragIntRan:
	mov	eax, DWORD PTR tv73[rbp]
	mov	DWORD PTR min_min$[rbp], eax
; Line 2582
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jl	SHORT $LN6@DragIntRan
	mov	rax, QWORD PTR v_current_max$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv78[rbp], eax
	jmp	SHORT $LN7@DragIntRan
$LN6@DragIntRan:
	mov	rax, QWORD PTR v_current_max$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR v_max$[rbp]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	mov	DWORD PTR tv78[rbp], eax
$LN7@DragIntRan:
	mov	eax, DWORD PTR tv78[rbp]
	mov	DWORD PTR min_max$[rbp], eax
; Line 2583
	mov	eax, DWORD PTR min_max$[rbp]
	cmp	DWORD PTR min_min$[rbp], eax
	jne	SHORT $LN8@DragIntRan
	mov	DWORD PTR tv80[rbp], 2097152		; 00200000H
	jmp	SHORT $LN9@DragIntRan
$LN8@DragIntRan:
	mov	DWORD PTR tv80[rbp], 0
$LN9@DragIntRan:
	mov	eax, DWORD PTR tv80[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR min_flags$[rbp], eax
; Line 2584
	mov	eax, DWORD PTR min_flags$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR min_max$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR min_min$[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR v_current_min$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_05DMFAOFEI@?$CD?$CDmin@
	call	?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z	; ImGui::DragInt
	mov	BYTE PTR value_changed$[rbp], al
; Line 2585
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 2586
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 2588
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jl	SHORT $LN10@DragIntRan
	mov	rax, QWORD PTR v_current_min$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv131[rbp], eax
	jmp	SHORT $LN11@DragIntRan
$LN10@DragIntRan:
	mov	rax, QWORD PTR v_current_min$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR v_min$[rbp]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR tv131[rbp], eax
$LN11@DragIntRan:
	mov	eax, DWORD PTR tv131[rbp]
	mov	DWORD PTR max_min$[rbp], eax
; Line 2589
	mov	eax, DWORD PTR v_max$[rbp]
	cmp	DWORD PTR v_min$[rbp], eax
	jl	SHORT $LN12@DragIntRan
	mov	DWORD PTR tv133[rbp], 2147483647	; 7fffffffH
	jmp	SHORT $LN13@DragIntRan
$LN12@DragIntRan:
	mov	eax, DWORD PTR v_max$[rbp]
	mov	DWORD PTR tv133[rbp], eax
$LN13@DragIntRan:
	mov	eax, DWORD PTR tv133[rbp]
	mov	DWORD PTR max_max$[rbp], eax
; Line 2590
	mov	eax, DWORD PTR max_max$[rbp]
	cmp	DWORD PTR max_min$[rbp], eax
	jne	SHORT $LN14@DragIntRan
	mov	DWORD PTR tv135[rbp], 2097152		; 00200000H
	jmp	SHORT $LN15@DragIntRan
$LN14@DragIntRan:
	mov	DWORD PTR tv135[rbp], 0
$LN15@DragIntRan:
	mov	eax, DWORD PTR tv135[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR max_flags$[rbp], eax
; Line 2591
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv152[rbp], eax
	mov	eax, DWORD PTR max_flags$[rbp]
	mov	DWORD PTR tv149[rbp], eax
	cmp	QWORD PTR format_max$[rbp], 0
	je	SHORT $LN16@DragIntRan
	mov	rax, QWORD PTR format_max$[rbp]
	mov	QWORD PTR tv141[rbp], rax
	jmp	SHORT $LN17@DragIntRan
$LN16@DragIntRan:
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv141[rbp], rax
$LN17@DragIntRan:
	mov	eax, DWORD PTR tv149[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR tv141[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR max_max$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR max_min$[rbp]
	movss	xmm2, DWORD PTR v_speed$[rbp]
	mov	rdx, QWORD PTR v_current_max$[rbp]
	lea	rcx, OFFSET FLAT:??_C@_05CONLABCH@?$CD?$CDmax@
	call	?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z	; ImGui::DragInt
	movzx	eax, al
	mov	ecx, DWORD PTR tv152[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 2592
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 2593
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 2595
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
; Line 2596
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 2597
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 2599
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@DragIntRan:
; Line 2600
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?DragIntRange2@ImGui@@YA_NPEBDPEAH1MHH00H@Z ENDP	; ImGui::DragIntRange2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z PROC		; ImGui::DragInt4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2565
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2566
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 4
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2567
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragInt4@ImGui@@YA_NPEBDQEAHMHH0H@Z ENDP		; ImGui::DragInt4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z PROC		; ImGui::DragInt3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2560
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2561
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 3
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2562
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragInt3@ImGui@@YA_NPEBDQEAHMHH0H@Z ENDP		; ImGui::DragInt3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z PROC		; ImGui::DragInt2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2555
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2556
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 2
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2557
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragInt2@ImGui@@YA_NPEBDQEAHMHH0H@Z ENDP		; ImGui::DragInt2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z PROC		; ImGui::DragInt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2550
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2551
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 4
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
; Line 2552
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragInt@ImGui@@YA_NPEBDPEAHMHH0H@Z ENDP		; ImGui::DragInt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
min_min$ = 68
min_max$ = 100
min_flags$ = 132
value_changed$ = 164
max_min$ = 196
max_max$ = 228
max_flags$ = 260
tv154 = 468
tv136 = 468
tv134 = 468
tv132 = 468
tv80 = 468
tv78 = 468
tv73 = 468
tv151 = 472
tv142 = 480
__$ArrayPad$ = 488
label$ = 528
v_current_min$ = 536
v_current_max$ = 544
v_speed$ = 552
v_min$ = 560
v_max$ = 568
format$ = 576
format_max$ = 584
flags$ = 592
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z PROC	; ImGui::DragFloatRange2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2518
$LN18:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2519
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 2520
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@DragFloatR
; Line 2521
	xor	al, al
	jmp	$LN1@DragFloatR
$LN2@DragFloatR:
; Line 2523
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2524
	mov	rcx, QWORD PTR label$[rbp]
	call	?PushID@ImGui@@YAXPEBD@Z		; ImGui::PushID
; Line 2525
	call	?BeginGroup@ImGui@@YAXXZ		; ImGui::BeginGroup
; Line 2526
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movaps	xmm1, xmm0
	mov	ecx, 2
	call	?PushMultiItemsWidths@ImGui@@YAXHM@Z	; ImGui::PushMultiItemsWidths
; Line 2528
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jb	SHORT $LN4@DragFloatR
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR tv73[rbp], xmm0
	jmp	SHORT $LN5@DragFloatR
$LN4@DragFloatR:
	movss	xmm0, DWORD PTR v_min$[rbp]
	movss	DWORD PTR tv73[rbp], xmm0
$LN5@DragFloatR:
	movss	xmm0, DWORD PTR tv73[rbp]
	movss	DWORD PTR min_min$[rbp], xmm0
; Line 2529
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jb	SHORT $LN6@DragFloatR
	mov	rax, QWORD PTR v_current_max$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN7@DragFloatR
$LN6@DragFloatR:
	mov	rax, QWORD PTR v_current_max$[rbp]
	movss	xmm1, DWORD PTR [rax]
	movss	xmm0, DWORD PTR v_max$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv78[rbp], xmm0
$LN7@DragFloatR:
	movss	xmm0, DWORD PTR tv78[rbp]
	movss	DWORD PTR min_max$[rbp], xmm0
; Line 2530
	movss	xmm0, DWORD PTR min_min$[rbp]
	ucomiss	xmm0, DWORD PTR min_max$[rbp]
	jp	SHORT $LN8@DragFloatR
	jne	SHORT $LN8@DragFloatR
	mov	DWORD PTR tv80[rbp], 2097152		; 00200000H
	jmp	SHORT $LN9@DragFloatR
$LN8@DragFloatR:
	mov	DWORD PTR tv80[rbp], 0
$LN9@DragFloatR:
	mov	eax, DWORD PTR tv80[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR min_flags$[rbp], eax
; Line 2531
	mov	eax, DWORD PTR min_flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR min_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR min_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR v_current_min$[rbp]
	mov	edx, 8
	lea	rcx, OFFSET FLAT:??_C@_05DMFAOFEI@?$CD?$CDmin@
	call	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
	mov	BYTE PTR value_changed$[rbp], al
; Line 2532
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 2533
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 2535
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jb	SHORT $LN10@DragFloatR
	mov	rax, QWORD PTR v_current_min$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv132[rbp], xmm0
	jmp	SHORT $LN11@DragFloatR
$LN10@DragFloatR:
	mov	rax, QWORD PTR v_current_min$[rbp]
	movss	xmm1, DWORD PTR [rax]
	movss	xmm0, DWORD PTR v_min$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv132[rbp], xmm0
$LN11@DragFloatR:
	movss	xmm0, DWORD PTR tv132[rbp]
	movss	DWORD PTR max_min$[rbp], xmm0
; Line 2536
	movss	xmm0, DWORD PTR v_min$[rbp]
	comiss	xmm0, DWORD PTR v_max$[rbp]
	jb	SHORT $LN12@DragFloatR
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR tv134[rbp], xmm0
	jmp	SHORT $LN13@DragFloatR
$LN12@DragFloatR:
	movss	xmm0, DWORD PTR v_max$[rbp]
	movss	DWORD PTR tv134[rbp], xmm0
$LN13@DragFloatR:
	movss	xmm0, DWORD PTR tv134[rbp]
	movss	DWORD PTR max_max$[rbp], xmm0
; Line 2537
	movss	xmm0, DWORD PTR max_min$[rbp]
	ucomiss	xmm0, DWORD PTR max_max$[rbp]
	jp	SHORT $LN14@DragFloatR
	jne	SHORT $LN14@DragFloatR
	mov	DWORD PTR tv136[rbp], 2097152		; 00200000H
	jmp	SHORT $LN15@DragFloatR
$LN14@DragFloatR:
	mov	DWORD PTR tv136[rbp], 0
$LN15@DragFloatR:
	mov	eax, DWORD PTR tv136[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR max_flags$[rbp], eax
; Line 2538
	movzx	eax, BYTE PTR value_changed$[rbp]
	mov	DWORD PTR tv154[rbp], eax
	mov	eax, DWORD PTR max_flags$[rbp]
	mov	DWORD PTR tv151[rbp], eax
	cmp	QWORD PTR format_max$[rbp], 0
	je	SHORT $LN16@DragFloatR
	mov	rax, QWORD PTR format_max$[rbp]
	mov	QWORD PTR tv142[rbp], rax
	jmp	SHORT $LN17@DragFloatR
$LN16@DragFloatR:
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR tv142[rbp], rax
$LN17@DragFloatR:
	mov	eax, DWORD PTR tv151[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR tv142[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR max_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR max_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR v_current_max$[rbp]
	mov	edx, 8
	lea	rcx, OFFSET FLAT:??_C@_05CONLABCH@?$CD?$CDmax@
	call	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
	movzx	eax, al
	mov	ecx, DWORD PTR tv154[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	BYTE PTR value_changed$[rbp], al
; Line 2539
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 2540
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5552]
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 2542
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR label$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
; Line 2543
	call	?EndGroup@ImGui@@YAXXZ			; ImGui::EndGroup
; Line 2544
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 2545
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@DragFloatR:
; Line 2546
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?DragFloatRange2@ImGui@@YA_NPEBDPEAM1MMM00H@Z ENDP	; ImGui::DragFloatRange2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z PROC		; ImGui::DragFloat4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2512
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2513
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 4
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2514
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragFloat4@ImGui@@YA_NPEBDQEAMMMM0H@Z ENDP		; ImGui::DragFloat4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z PROC		; ImGui::DragFloat3, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2507
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2508
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 3
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2509
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragFloat3@ImGui@@YA_NPEBDQEAMMMM0H@Z ENDP		; ImGui::DragFloat3
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z PROC		; ImGui::DragFloat2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2502
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2503
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR v_speed$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 2
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalarN@ImGui@@YA_NPEBDHPEAXHMPEBX20H@Z ; ImGui::DragScalarN
; Line 2504
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragFloat2@ImGui@@YA_NPEBDQEAMMMM0H@Z ENDP		; ImGui::DragFloat2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z
_TEXT	SEGMENT
label$ = 224
v$ = 232
v_speed$ = 240
v_min$ = 248
v_max$ = 256
format$ = 264
flags$ = 272
?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z PROC		; ImGui::DragFloat, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 2497
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2498
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR format$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR v_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR v_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR v_speed$[rbp]
	mov	r8, QWORD PTR v$[rbp]
	mov	edx, 8
	mov	rcx, QWORD PTR label$[rbp]
	call	?DragScalar@ImGui@@YA_NPEBDHPEAXMPEBX20H@Z ; ImGui::DragScalar
; Line 2499
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DragFloat@ImGui@@YA_NPEBDPEAMMMM0H@Z ENDP		; ImGui::DragFloat
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z
_TEXT	SEGMENT
g$ = 8
preview_value$ = 40
value_changed$ = 68
i$5 = 100
item_selected$6 = 132
item_text$7 = 168
$T8 = 388
$T9 = 420
$T10 = 452
tv137 = 468
tv158 = 472
tv143 = 472
tv93 = 472
tv71 = 472
tv156 = 480
tv91 = 480
__$ArrayPad$ = 488
label$ = 528
current_item$ = 536
items_getter$ = 544
data$ = 552
items_count$ = 560
popup_max_height_in_items$ = 568
?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z PROC	; ImGui::Combo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1781
$LN15:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+568]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1782
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1785
	mov	QWORD PTR preview_value$[rbp], 0
; Line 1786
	mov	rax, QWORD PTR current_item$[rbp]
	cmp	DWORD PTR [rax], 0
	jl	SHORT $LN5@Combo
	mov	rax, QWORD PTR current_item$[rbp]
	mov	ecx, DWORD PTR items_count$[rbp]
	cmp	DWORD PTR [rax], ecx
	jge	SHORT $LN5@Combo
; Line 1787
	mov	rax, QWORD PTR items_getter$[rbp]
	mov	QWORD PTR tv71[rbp], rax
	lea	r8, QWORD PTR preview_value$[rbp]
	mov	rax, QWORD PTR current_item$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv71[rbp]
$LN5@Combo:
; Line 1790
	cmp	DWORD PTR popup_max_height_in_items$[rbp], -1
	je	SHORT $LN6@Combo
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7344]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN6@Combo
; Line 1791
	mov	ecx, DWORD PTR popup_max_height_in_items$[rbp]
	call	?CalcMaxPopupHeightFromItemCount@@YAMH@Z ; CalcMaxPopupHeightFromItemCount
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR __real@7f7fffff
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv93[rbp], rax
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv91[rbp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv93[rbp]
	mov	rcx, QWORD PTR tv91[rbp]
	call	?SetNextWindowSizeConstraints@ImGui@@YAXAEBUImVec2@@0P6AXPEAUImGuiSizeCallbackData@@@ZPEAX@Z ; ImGui::SetNextWindowSizeConstraints
$LN6@Combo:
; Line 1793
	xor	r8d, r8d
	mov	rdx, QWORD PTR preview_value$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?BeginCombo@ImGui@@YA_NPEBD0H@Z		; ImGui::BeginCombo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@Combo
; Line 1794
	xor	al, al
	jmp	$LN1@Combo
$LN7@Combo:
; Line 1798
	mov	BYTE PTR value_changed$[rbp], 0
; Line 1799
	mov	DWORD PTR i$5[rbp], 0
	jmp	SHORT $LN4@Combo
$LN2@Combo:
	mov	eax, DWORD PTR i$5[rbp]
	inc	eax
	mov	DWORD PTR i$5[rbp], eax
$LN4@Combo:
	mov	eax, DWORD PTR items_count$[rbp]
	cmp	DWORD PTR i$5[rbp], eax
	jge	$LN3@Combo
; Line 1801
	movsxd	rax, DWORD PTR i$5[rbp]
	mov	rcx, rax
	call	?PushID@ImGui@@YAXPEBX@Z		; ImGui::PushID
; Line 1802
	mov	rax, QWORD PTR current_item$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$5[rbp], eax
	jne	SHORT $LN13@Combo
	mov	BYTE PTR tv137[rbp], 1
	jmp	SHORT $LN14@Combo
$LN13@Combo:
	mov	BYTE PTR tv137[rbp], 0
$LN14@Combo:
	movzx	eax, BYTE PTR tv137[rbp]
	mov	BYTE PTR item_selected$6[rbp], al
; Line 1804
	mov	rax, QWORD PTR items_getter$[rbp]
	mov	QWORD PTR tv143[rbp], rax
	lea	r8, QWORD PTR item_text$7[rbp]
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	QWORD PTR tv143[rbp]
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@Combo
; Line 1805
	lea	rax, OFFSET FLAT:??_C@_0P@HFPOEILF@?$CKUnknown?5item?$CK@
	mov	QWORD PTR item_text$7[rbp], rax
$LN8@Combo:
; Line 1806
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv158[rbp], rax
	mov	rax, QWORD PTR item_text$7[rbp]
	mov	QWORD PTR tv156[rbp], rax
	mov	r9, QWORD PTR tv158[rbp]
	xor	r8d, r8d
	movzx	edx, BYTE PTR item_selected$6[rbp]
	mov	rcx, QWORD PTR tv156[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@Combo
; Line 1808
	mov	BYTE PTR value_changed$[rbp], 1
; Line 1809
	mov	rax, QWORD PTR current_item$[rbp]
	mov	ecx, DWORD PTR i$5[rbp]
	mov	DWORD PTR [rax], ecx
$LN9@Combo:
; Line 1811
	movzx	eax, BYTE PTR item_selected$6[rbp]
	test	eax, eax
	je	SHORT $LN10@Combo
; Line 1812
	call	?SetItemDefaultFocus@ImGui@@YAXXZ	; ImGui::SetItemDefaultFocus
$LN10@Combo:
; Line 1813
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 1814
	jmp	$LN2@Combo
$LN3@Combo:
; Line 1816
	call	?EndCombo@ImGui@@YAXXZ			; ImGui::EndCombo
; Line 1817
	movzx	eax, BYTE PTR value_changed$[rbp]
	test	eax, eax
	je	SHORT $LN11@Combo
; Line 1818
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	ecx, DWORD PTR [rax+292]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN11@Combo:
; Line 1820
	movzx	eax, BYTE PTR value_changed$[rbp]
$LN1@Combo:
; Line 1821
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ENDP	; ImGui::Combo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Combo@ImGui@@YA_NPEBDPEAH0H@Z
_TEXT	SEGMENT
items_count$ = 4
p$ = 40
value_changed$ = 68
tv82 = 280
tv83 = 288
label$ = 336
current_item$ = 344
items_separated_by_zeros$ = 352
height_in_items$ = 360
?Combo@ImGui@@YA_NPEBDPEAH0H@Z PROC			; ImGui::Combo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1832
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1833
	mov	DWORD PTR items_count$[rbp], 0
; Line 1834
	mov	rax, QWORD PTR items_separated_by_zeros$[rbp]
	mov	QWORD PTR p$[rbp], rax
$LN2@Combo:
; Line 1835
	mov	rax, QWORD PTR p$[rbp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@Combo
; Line 1837
	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR tv82[rbp], rax
	mov	QWORD PTR tv83[rbp], -1
$LL5@Combo:
	inc	QWORD PTR tv83[rbp]
	mov	rax, QWORD PTR tv82[rbp]
	mov	rcx, QWORD PTR tv83[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL5@Combo
	mov	rax, QWORD PTR tv83[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	QWORD PTR p$[rbp], rax
; Line 1838
	mov	eax, DWORD PTR items_count$[rbp]
	inc	eax
	mov	DWORD PTR items_count$[rbp], eax
; Line 1839
	jmp	SHORT $LN2@Combo
$LN3@Combo:
; Line 1840
	mov	eax, DWORD PTR height_in_items$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR items_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR items_separated_by_zeros$[rbp]
	lea	r8, OFFSET FLAT:?Items_SingleStringGetter@@YA_NPEAXHPEAPEBD@Z ; Items_SingleStringGetter
	mov	rdx, QWORD PTR current_item$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ; ImGui::Combo
	mov	BYTE PTR value_changed$[rbp], al
; Line 1841
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 1842
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?Combo@ImGui@@YA_NPEBDPEAH0H@Z ENDP			; ImGui::Combo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z
_TEXT	SEGMENT
value_changed$ = 4
label$ = 256
current_item$ = 264
items$ = 272
items_count$ = 280
height_in_items$ = 288
?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z PROC		; ImGui::Combo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1825
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1826
	mov	eax, DWORD PTR height_in_items$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR items_count$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR items$[rbp]
	lea	r8, OFFSET FLAT:?Items_ArrayGetter@@YA_NPEAXHPEAPEBD@Z ; Items_ArrayGetter
	mov	rdx, QWORD PTR current_item$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?Combo@ImGui@@YA_NPEBDPEAHP6A_NPEAXHPEAPEBD@Z2HH@Z ; ImGui::Combo
	mov	BYTE PTR value_changed$[rbp], al
; Line 1827
	movzx	eax, BYTE PTR value_changed$[rbp]
; Line 1828
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?Combo@ImGui@@YA_NPEBDPEAHQEBQEBDHH@Z ENDP		; ImGui::Combo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndCombo@ImGui@@YAXXZ
_TEXT	SEGMENT
?EndCombo@ImGui@@YAXXZ PROC				; ImGui::EndCombo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1694
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1695
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
; Line 1696
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?EndCombo@ImGui@@YAXXZ ENDP				; ImGui::EndCombo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginCombo@ImGui@@YA_NPEBD0H@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
backup_next_window_data_flags$ = 68
style$ = 104
id$ = 132
arrow_size$ = 164
label_size$ = 200
w$ = 228
bb$ = 264
total_bb$ = 312
hovered$ = 356
held$ = 388
pressed$ = 420
popup_id$ = 452
popup_open$ = 484
frame_col$ = 516
value_x2$ = 548
bg_col$8 = 580
text_col$9 = 612
$T10 = 1220
$T11 = 1252
$T12 = 1284
$T13 = 1316
$T14 = 1348
$T15 = 1380
$T16 = 1412
$T17 = 1448
$T18 = 1476
$T19 = 1524
$T20 = 1556
$T21 = 1588
$T22 = 1620
tv272 = 1636
tv200 = 1636
tv158 = 1636
tv128 = 1636
tv87 = 1636
tv379 = 1640
tv319 = 1640
tv296 = 1640
tv263 = 1640
tv377 = 1648
tv280 = 1648
tv215 = 1648
tv294 = 1652
tv261 = 1652
tv375 = 1656
tv292 = 1656
tv259 = 1656
__$ArrayPad$ = 1664
label$ = 1712
preview_value$ = 1720
flags$ = 1728
?BeginCombo@ImGui@@YA_NPEBD0H@Z PROC			; ImGui::BeginCombo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1560
$LN31:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1744				; 000006d0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 276				; 00000114H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1561
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1562
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1564
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7344]
	mov	DWORD PTR backup_next_window_data_flags$[rbp], eax
; Line 1565
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 7344				; 00001cb0H
	mov	rcx, rax
	call	?ClearFlags@ImGuiNextWindowData@@QEAAXXZ ; ImGuiNextWindowData::ClearFlags
; Line 1566
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BeginCombo
; Line 1567
	xor	al, al
	jmp	$LN1@BeginCombo
$LN2@BeginCombo:
; Line 1569
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 1570
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 1571
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 96					; 00000060H
	cmp	eax, 96					; 00000060H
	jne	SHORT $LN15@BeginCombo
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginCombo@ImGui@@YA_NPEBD0H@Z@4JA
	add	eax, 11
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BAK@ONBANIIG@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AAI?$AAm?$AAG?$AAu?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@BeginCombo:
; Line 1573
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN16@BeginCombo
	xorps	xmm0, xmm0
	movss	DWORD PTR tv87[rbp], xmm0
	jmp	SHORT $LN17@BeginCombo
$LN16@BeginCombo:
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR tv87[rbp], xmm0
$LN17@BeginCombo:
	movss	xmm0, DWORD PTR tv87[rbp]
	movss	DWORD PTR arrow_size$[rbp], xmm0
; Line 1574
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 1575
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN18@BeginCombo
	movss	xmm0, DWORD PTR arrow_size$[rbp]
	movss	DWORD PTR tv128[rbp], xmm0
	jmp	SHORT $LN19@BeginCombo
$LN18@BeginCombo:
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR tv128[rbp], xmm0
$LN19@BeginCombo:
	movss	xmm0, DWORD PTR tv128[rbp]
	movss	DWORD PTR w$[rbp], xmm0
; Line 1576
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR w$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T11[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1577
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@BeginCombo
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv158[rbp], xmm0
	jmp	SHORT $LN21@BeginCombo
$LN20@BeginCombo:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv158[rbp], xmm0
$LN21@BeginCombo:
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR tv158[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1578
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 1579
	xor	r9d, r9d
	lea	r8, QWORD PTR bb$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@BeginCombo
; Line 1580
	xor	al, al
	jmp	$LN1@BeginCombo
$LN3@BeginCombo:
; Line 1584
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 1585
	mov	r8d, DWORD PTR id$[rbp]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_0N@LNBMNBNO@?$CD?$CDComboPopup@
	call	?ImHashStr@@YAIPEBD_KI@Z		; ImHashStr
	mov	DWORD PTR popup_id$[rbp], eax
; Line 1586
	xor	edx, edx
	mov	ecx, DWORD PTR popup_id$[rbp]
	call	?IsPopupOpen@ImGui@@YA_NIH@Z		; ImGui::IsPopupOpen
	mov	BYTE PTR popup_open$[rbp], al
; Line 1587
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	jne	SHORT $LN5@BeginCombo
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7640], ecx
	jne	SHORT $LN4@BeginCombo
$LN5@BeginCombo:
	movzx	eax, BYTE PTR popup_open$[rbp]
	test	eax, eax
	jne	SHORT $LN4@BeginCombo
; Line 1589
	xor	edx, edx
	mov	ecx, DWORD PTR popup_id$[rbp]
	call	?OpenPopupEx@ImGui@@YAXIH@Z		; ImGui::OpenPopupEx
; Line 1590
	mov	BYTE PTR popup_open$[rbp], 1
$LN4@BeginCombo:
; Line 1594
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN22@BeginCombo
	mov	DWORD PTR tv200[rbp], 8
	jmp	SHORT $LN23@BeginCombo
$LN22@BeginCombo:
	mov	DWORD PTR tv200[rbp], 7
$LN23@BeginCombo:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv200[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR frame_col$[rbp], eax
; Line 1595
	movss	xmm0, DWORD PTR bb$[rbp+8]
	subss	xmm0, DWORD PTR arrow_size$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR bb$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR value_x2$[rbp], xmm0
; Line 1596
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 1597
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	$LN6@BeginCombo
; Line 1598
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv263[rbp], rax
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN24@BeginCombo
	mov	DWORD PTR tv215[rbp], 240		; 000000f0H
	jmp	SHORT $LN25@BeginCombo
$LN24@BeginCombo:
	mov	DWORD PTR tv215[rbp], 80		; 00000050H
$LN25@BeginCombo:
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv261[rbp], xmm0
	movss	xmm2, DWORD PTR bb$[rbp+12]
	movss	xmm1, DWORD PTR value_x2$[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv259[rbp], rax
	mov	eax, DWORD PTR tv215[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR tv261[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR frame_col$[rbp]
	mov	r8, QWORD PTR tv259[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR tv263[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN6@BeginCombo:
; Line 1599
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	$LN7@BeginCombo
; Line 1601
	movzx	eax, BYTE PTR popup_open$[rbp]
	test	eax, eax
	jne	SHORT $LN26@BeginCombo
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN26@BeginCombo
	mov	DWORD PTR tv272[rbp], 21
	jmp	SHORT $LN27@BeginCombo
$LN26@BeginCombo:
	mov	DWORD PTR tv272[rbp], 22
$LN27@BeginCombo:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv272[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col$8[rbp], eax
; Line 1602
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$9[rbp], eax
; Line 1603
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv296[rbp], rax
	movss	xmm0, DWORD PTR arrow_size$[rbp]
	comiss	xmm0, DWORD PTR w$[rbp]
	jb	SHORT $LN28@BeginCombo
	mov	DWORD PTR tv280[rbp], 240		; 000000f0H
	jmp	SHORT $LN29@BeginCombo
$LN28@BeginCombo:
	mov	DWORD PTR tv280[rbp], 160		; 000000a0H
$LN29@BeginCombo:
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv294[rbp], xmm0
	movss	xmm2, DWORD PTR bb$[rbp+4]
	movss	xmm1, DWORD PTR value_x2$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv292[rbp], rax
	mov	eax, DWORD PTR tv280[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR tv294[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR bg_col$8[rbp]
	lea	r8, QWORD PTR bb$[rbp+8]
	mov	rdx, QWORD PTR tv292[rbp]
	mov	rcx, QWORD PTR tv296[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 1604
	movss	xmm0, DWORD PTR value_x2$[rbp]
	addss	xmm0, DWORD PTR arrow_size$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	subss	xmm0, DWORD PTR [rax+56]
	movss	xmm1, DWORD PTR bb$[rbp+8]
	comiss	xmm1, xmm0
	jb	SHORT $LN8@BeginCombo
; Line 1605
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR value_x2$[rbp]
	addss	xmm1, DWORD PTR [rax+60]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T17[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv319[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, 3
	mov	r8d, DWORD PTR text_col$9[rbp]
	mov	rdx, QWORD PTR $T17[rbp]
	mov	rcx, QWORD PTR tv319[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
$LN8@BeginCombo:
$LN7@BeginCombo:
; Line 1607
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm2, DWORD PTR [rax+64]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrameBorder@ImGui@@YAXUImVec2@@0M@Z ; ImGui::RenderFrameBorder
; Line 1610
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	$LN9@BeginCombo
; Line 1612
	movss	xmm0, DWORD PTR bb$[rbp+12]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR value_x2$[rbp]
	movss	xmm2, DWORD PTR bb$[rbp+4]
	movss	xmm1, DWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rcx, QWORD PTR g$[rbp]
	lea	rdi, QWORD PTR [rcx+12260]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1613
	cmp	QWORD PTR preview_value$[rbp], 0
	je	SHORT $LN30@BeginCombo
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR preview_value$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN30@BeginCombo
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginCombo@ImGui@@YA_NPEBD0H@Z@4JA
	add	eax, 53					; 00000035H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FI@HOFLGIJG@?$AAp?$AAr?$AAe?$AAv?$AAi?$AAe?$AAw?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN30@BeginCombo:
; Line 1614
	mov	QWORD PTR preview_value$[rbp], 0
$LN9@BeginCombo:
; Line 1618
	cmp	QWORD PTR preview_value$[rbp], 0
	je	$LN10@BeginCombo
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	$LN10@BeginCombo
; Line 1620
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN11@BeginCombo
; Line 1621
	lea	rdx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN@
	lea	rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL@
	call	?LogSetNextTextDecoration@ImGui@@YAXPEBD0@Z ; ImGui::LogSetNextTextDecoration
$LN11@BeginCombo:
; Line 1622
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv379[rbp], rax
	movss	xmm2, DWORD PTR bb$[rbp+12]
	movss	xmm1, DWORD PTR value_x2$[rbp]
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv377[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv375[rbp], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR tv379[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR preview_value$[rbp]
	mov	rdx, QWORD PTR tv377[rbp]
	mov	rcx, QWORD PTR tv375[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
$LN10@BeginCombo:
; Line 1624
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN12@BeginCombo
; Line 1625
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN12@BeginCombo:
; Line 1627
	movzx	eax, BYTE PTR popup_open$[rbp]
	test	eax, eax
	jne	SHORT $LN13@BeginCombo
; Line 1628
	xor	al, al
	jmp	SHORT $LN1@BeginCombo
$LN13@BeginCombo:
; Line 1630
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR backup_next_window_data_flags$[rbp]
	mov	DWORD PTR [rax+7344], ecx
; Line 1631
	mov	r8d, DWORD PTR flags$[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	ecx, DWORD PTR popup_id$[rbp]
	call	?BeginComboPopup@ImGui@@YA_NIAEBUImRect@@H@Z ; ImGui::BeginComboPopup
$LN1@BeginCombo:
; Line 1632
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?BeginCombo@ImGui@@YA_NPEBD0H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1680]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?BeginCombo@ImGui@@YA_NPEBD0H@Z ENDP			; ImGui::BeginCombo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Bullet@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
line_height$ = 100
bb$ = 136
text_col$ = 180
$T4 = 404
$T5 = 436
$T6 = 468
$T7 = 500
$T8 = 536
tv88 = 548
tv173 = 552
tv86 = 552
__$ArrayPad$ = 560
?Bullet@ImGui@@YAXXZ PROC				; ImGui::Bullet, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1275
$LN5:
	push	rbp
	push	rdi
	sub	rsp, 616				; 00000268H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 98					; 00000062H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1276
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1277
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Bullet
; Line 1278
	jmp	$LN1@Bullet
$LN2@Bullet:
; Line 1280
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1281
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 1282
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR tv88[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+260]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv86[rbp], xmm0
	movss	xmm1, DWORD PTR tv88[rbp]
	movss	xmm0, DWORD PTR tv86[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR line_height$[rbp], xmm0
; Line 1283
	movss	xmm2, DWORD PTR line_height$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T5[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1284
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 1285
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Bullet
; Line 1287
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@40000000
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
; Line 1288
	jmp	$LN1@Bullet
$LN3@Bullet:
; Line 1292
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$[rbp], eax
; Line 1293
	movss	xmm0, DWORD PTR line_height$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	mulss	xmm1, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm2, DWORD PTR [rax+56]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T8[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv173[rbp], rax
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T8[rbp]
	mov	rcx, QWORD PTR tv173[rbp]
	call	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
; Line 1294
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@40000000
	movaps	xmm1, xmm0
	xorps	xmm0, xmm0
	call	?SameLine@ImGui@@YAXMM@Z		; ImGui::SameLine
$LN1@Bullet:
; Line 1295
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?Bullet@ImGui@@YAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+584]
	pop	rdi
	pop	rbp
	ret	0
?Bullet@ImGui@@YAXXZ ENDP				; ImGui::Bullet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
pos$ = 104
size$ = 136
bb$ = 168
fill_br$ = 216
overlay_buf$ = 248
overlay_size$ = 312
$T9 = 728
$T10 = 760
$T11 = 788
$T12 = 820
$T13 = 852
$T14 = 884
tv186 = 900
tv152 = 900
tv88 = 900
tv230 = 904
tv184 = 904
tv150 = 904
tv85 = 904
tv223 = 912
tv182 = 912
tv228 = 920
__$ArrayPad$ = 928
fraction$ = 976
size_arg$ = 984
overlay$ = 992
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z PROC		; ImGui::ProgressBar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1239
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 1016				; 000003f8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 142				; 0000008eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1240
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1241
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ProgressBa
; Line 1242
	jmp	$LN1@ProgressBa
$LN2@ProgressBa:
; Line 1244
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1245
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 1247
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 1248
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv88[rbp], xmm0
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR tv85[rbp], xmm0
	mov	rax, QWORD PTR size_arg$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T9[rbp], rax
	mov	rax, QWORD PTR $T9[rbp]
	mov	QWORD PTR $T10[rbp], rax
	movss	xmm3, DWORD PTR tv88[rbp]
	movss	xmm2, DWORD PTR tv85[rbp]
	mov	rdx, QWORD PTR $T10[rbp]
	lea	rcx, QWORD PTR size$[rbp]
	call	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z ; ImGui::CalcItemSize
; Line 1249
	lea	r8, QWORD PTR size$[rbp]
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1250
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 1251
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@ProgressBa
; Line 1252
	jmp	$LN1@ProgressBa
$LN3@ProgressBa:
; Line 1255
	movss	xmm0, DWORD PTR fraction$[rbp]
	call	?ImSaturate@@YAMM@Z			; ImSaturate
	movss	DWORD PTR fraction$[rbp], xmm0
; Line 1256
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv152[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 7
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv150[rbp], eax
	movss	xmm0, DWORD PTR tv152[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR tv150[rbp]
	mov	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 1257
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+68]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	lea	rcx, QWORD PTR bb$[rbp]
	call	?Expand@ImRect@@QEAAXAEBUImVec2@@@Z	; ImRect::Expand
; Line 1258
	movss	xmm2, DWORD PTR fraction$[rbp]
	movss	xmm1, DWORD PTR bb$[rbp+8]
	movss	xmm0, DWORD PTR bb$[rbp]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	xmm2, DWORD PTR bb$[rbp+12]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR fill_br$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1259
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv186[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 40					; 00000028H
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv184[rbp], eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv182[rbp], rax
	movss	xmm0, DWORD PTR tv186[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR fraction$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	mov	r8d, DWORD PTR tv184[rbp]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR tv182[rbp]
	call	?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z ; ImGui::RenderRectFilledRangeH
; Line 1263
	cmp	QWORD PTR overlay$[rbp], 0
	jne	SHORT $LN4@ProgressBa
; Line 1265
	movss	xmm0, DWORD PTR fraction$[rbp]
	mulss	xmm0, DWORD PTR __real@42c80000
	addss	xmm0, DWORD PTR __real@3c23d70a
	cvtss2sd xmm0, xmm0
	movaps	xmm3, xmm0
	movq	r9, xmm3
	lea	r8, OFFSET FLAT:??_C@_06KLKJBGEJ@?$CF?40f?$CF?$CF@
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR overlay_buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 1266
	lea	rax, QWORD PTR overlay_buf$[rbp]
	mov	QWORD PTR overlay$[rbp], rax
$LN4@ProgressBa:
; Line 1269
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR overlay$[rbp]
	lea	rcx, QWORD PTR overlay_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 1270
	movss	xmm0, DWORD PTR overlay_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@ProgressBa
; Line 1271
	movss	xmm2, DWORD PTR __real@3f000000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv230[rbp], rax
	movss	xmm0, DWORD PTR bb$[rbp+8]
	subss	xmm0, DWORD PTR overlay_size$[rbp]
	mov	rax, QWORD PTR style$[rbp]
	subss	xmm0, DWORD PTR [rax+80]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR fill_br$[rbp]
	addss	xmm1, DWORD PTR [rax+72]
	movss	DWORD PTR tv223[rbp], xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR bb$[rbp]
	movss	xmm0, DWORD PTR tv223[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	xmm2, DWORD PTR bb$[rbp+4]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv228[rbp], rax
	lea	rax, QWORD PTR bb$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR tv230[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR overlay_size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR overlay$[rbp]
	lea	rdx, QWORD PTR bb$[rbp+8]
	mov	rcx, QWORD PTR tv228[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
$LN5@ProgressBa:
$LN1@ProgressBa:
; Line 1272
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+952]
	pop	rdi
	pop	rbp
	ret	0
?ProgressBar@ImGui@@YAXMAEBUImVec2@@PEBD@Z ENDP		; ImGui::ProgressBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RadioButton@ImGui@@YA_NPEBDPEAHH@Z
_TEXT	SEGMENT
pressed$ = 4
tv66 = 212
label$ = 256
v$ = 264
v_button$ = 272
?RadioButton@ImGui@@YA_NPEBDPEAHH@Z PROC		; ImGui::RadioButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1230
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1231
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_button$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN4@RadioButto
	mov	BYTE PTR tv66[rbp], 1
	jmp	SHORT $LN5@RadioButto
$LN4@RadioButto:
	mov	BYTE PTR tv66[rbp], 0
$LN5@RadioButto:
	movzx	edx, BYTE PTR tv66[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?RadioButton@ImGui@@YA_NPEBD_N@Z	; ImGui::RadioButton
	mov	BYTE PTR pressed$[rbp], al
; Line 1232
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN2@RadioButto
; Line 1233
	mov	rax, QWORD PTR v$[rbp]
	mov	ecx, DWORD PTR v_button$[rbp]
	mov	DWORD PTR [rax], ecx
$LN2@RadioButto:
; Line 1234
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 1235
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?RadioButton@ImGui@@YA_NPEBDPEAHH@Z ENDP		; ImGui::RadioButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RadioButton@ImGui@@YA_NPEBD_N@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
label_size$ = 136
square_sz$ = 164
pos$ = 200
check_bb$ = 232
total_bb$ = 280
center$ = 328
radius$ = 356
hovered$ = 388
held$ = 420
pressed$ = 452
pad$11 = 484
label_pos$ = 520
$T12 = 932
$T13 = 964
$T14 = 996
$T15 = 1028
$T16 = 1060
$T17 = 1092
tv143 = 1108
tv321 = 1112
tv273 = 1112
tv256 = 1112
tv227 = 1112
tv203 = 1112
tv139 = 1112
tv271 = 1120
tv254 = 1120
tv225 = 1120
tv195 = 1120
tv269 = 1124
tv252 = 1124
tv194 = 1124
tv250 = 1128
tv201 = 1128
__$ArrayPad$ = 1136
label$ = 1184
active$ = 1192
?RadioButton@ImGui@@YA_NPEBD_N@Z PROC			; ImGui::RadioButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1176
$LN18:
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1208				; 000004b8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 194				; 000000c2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1240]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1177
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1178
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@RadioButto
; Line 1179
	xor	al, al
	jmp	$LN1@RadioButto
$LN2@RadioButto:
; Line 1181
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1182
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 1183
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 1184
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 1186
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR square_sz$[rbp], xmm0
; Line 1187
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 1188
	movss	xmm2, DWORD PTR square_sz$[rbp]
	movss	xmm1, DWORD PTR square_sz$[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR check_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1189
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv143[rbp], xmm0
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN10@RadioButto
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv139[rbp], xmm0
	jmp	SHORT $LN11@RadioButto
$LN10@RadioButto:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv139[rbp], xmm0
$LN11@RadioButto:
	movss	xmm0, DWORD PTR square_sz$[rbp]
	addss	xmm0, DWORD PTR tv139[rbp]
	movss	xmm2, DWORD PTR tv143[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1190
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 1191
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@RadioButto
; Line 1192
	xor	al, al
	jmp	$LN1@RadioButto
$LN3@RadioButto:
; Line 1194
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR check_bb$[rbp]
	call	?GetCenter@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetCenter
; Line 1195
	movss	xmm0, DWORD PTR center$[rbp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR center$[rbp], xmm0
; Line 1196
	movss	xmm0, DWORD PTR center$[rbp+4]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR center$[rbp+4], xmm0
; Line 1197
	movss	xmm0, DWORD PTR square_sz$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR radius$[rbp], xmm0
; Line 1200
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 1201
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN4@RadioButto
; Line 1202
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN4@RadioButto:
; Line 1204
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 1205
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv203[rbp], rax
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN12@RadioButto
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN12@RadioButto
	mov	DWORD PTR tv195[rbp], 9
	jmp	SHORT $LN15@RadioButto
$LN12@RadioButto:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN13@RadioButto
	mov	DWORD PTR tv194[rbp], 8
	jmp	SHORT $LN14@RadioButto
$LN13@RadioButto:
	mov	DWORD PTR tv194[rbp], 7
$LN14@RadioButto:
	mov	eax, DWORD PTR tv194[rbp]
	mov	DWORD PTR tv195[rbp], eax
$LN15@RadioButto:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv195[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv201[rbp], eax
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR tv201[rbp]
	movss	xmm2, DWORD PTR radius$[rbp]
	lea	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv203[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
; Line 1206
	movzx	eax, BYTE PTR active$[rbp]
	test	eax, eax
	je	$LN5@RadioButto
; Line 1208
	movss	xmm0, DWORD PTR square_sz$[rbp]
	divss	xmm0, DWORD PTR __real@40c00000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR pad$11[rbp], xmm0
; Line 1209
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv227[rbp], rax
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 18
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv225[rbp], eax
	movss	xmm0, DWORD PTR radius$[rbp]
	subss	xmm0, DWORD PTR pad$11[rbp]
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR tv225[rbp]
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv227[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
$LN5@RadioButto:
; Line 1212
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN6@RadioButto
; Line 1214
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv256[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	movss	DWORD PTR tv254[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 6
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv252[rbp], eax
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv250[rbp], rax
	movss	xmm0, DWORD PTR tv254[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR tv252[rbp]
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR tv250[rbp]
	mov	rcx, QWORD PTR tv256[rbp]
	call	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
; Line 1215
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv273[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	movss	DWORD PTR tv271[rbp], xmm0
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 5
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv269[rbp], eax
	movss	xmm0, DWORD PTR tv271[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR tv269[rbp]
	movss	xmm2, DWORD PTR radius$[rbp]
	lea	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv273[rbp]
	call	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ; ImDrawList::AddCircle
$LN6@RadioButto:
; Line 1218
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR check_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR check_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR label_pos$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1219
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN7@RadioButto
; Line 1220
	movzx	eax, BYTE PTR active$[rbp]
	test	eax, eax
	je	SHORT $LN16@RadioButto
	lea	rax, OFFSET FLAT:??_C@_03KFJJABDB@?$CIx?$CJ@
	mov	QWORD PTR tv321[rbp], rax
	jmp	SHORT $LN17@RadioButto
$LN16@RadioButto:
	lea	rax, OFFSET FLAT:??_C@_03MHDGHODJ@?$CI?5?$CJ@
	mov	QWORD PTR tv321[rbp], rax
$LN17@RadioButto:
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv321[rbp]
	lea	rcx, QWORD PTR label_pos$[rbp]
	call	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z ; ImGui::LogRenderedText
$LN7@RadioButto:
; Line 1221
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN8@RadioButto
; Line 1222
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR label_pos$[rbp]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN8@RadioButto:
; Line 1225
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@RadioButto:
; Line 1226
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?RadioButton@ImGui@@YA_NPEBD_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1160]
	pop	rdi
	pop	rbp
	ret	0
?RadioButton@ImGui@@YA_NPEBD_N@Z ENDP			; ImGui::RadioButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z
_TEXT	SEGMENT
label$ = 224
flags$ = 232
flags_value$ = 240
?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z PROC		; ImGui::CheckboxFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1161
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1162
	mov	r8d, DWORD PTR flags_value$[rbp]
	mov	rdx, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	??$CheckboxFlagsT@I@ImGui@@YA_NPEBDPEAII@Z ; ImGui::CheckboxFlagsT<unsigned int>
; Line 1163
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CheckboxFlags@ImGui@@YA_NPEBDPEAII@Z ENDP		; ImGui::CheckboxFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z
_TEXT	SEGMENT
label$ = 224
flags$ = 232
flags_value$ = 240
?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z PROC		; ImGui::CheckboxFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1156
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1157
	mov	r8d, DWORD PTR flags_value$[rbp]
	mov	rdx, QWORD PTR flags$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	??$CheckboxFlagsT@H@ImGui@@YA_NPEBDPEAHH@Z ; ImGui::CheckboxFlagsT<int>
; Line 1158
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?CheckboxFlags@ImGui@@YA_NPEBDPEAHH@Z ENDP		; ImGui::CheckboxFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Checkbox@ImGui@@YA_NPEBDPEA_N@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
id$ = 100
label_size$ = 136
square_sz$ = 164
pos$ = 200
total_bb$ = 232
hovered$ = 276
held$ = 308
pressed$ = 340
check_bb$ = 376
check_col$ = 420
mixed_value$ = 452
pad$11 = 488
pad$12 = 516
label_pos$ = 552
$T13 = 964
$T14 = 996
$T15 = 1028
$T16 = 1060
$T17 = 1092
$T18 = 1124
$T19 = 1156
$T20 = 1188
$T21 = 1224
tv229 = 1236
tv202 = 1236
tv195 = 1236
tv158 = 1236
tv132 = 1236
tv331 = 1240
tv279 = 1240
tv252 = 1240
tv227 = 1240
tv187 = 1240
tv128 = 1240
tv186 = 1244
tv328 = 1248
tv250 = 1248
tv193 = 1248
tv248 = 1256
tv246 = 1264
__$ArrayPad$ = 1272
label$ = 1312
v$ = 1320
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z PROC			; ImGui::Checkbox, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1070
$LN25:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1336				; 00000538H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 226				; 000000e2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1368]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1071
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1072
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Checkbox
; Line 1073
	xor	al, al
	jmp	$LN1@Checkbox
$LN2@Checkbox:
; Line 1075
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1076
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 1077
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 1078
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 1080
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR square_sz$[rbp], xmm0
; Line 1081
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 1082
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv132[rbp], xmm0
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN11@Checkbox
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv128[rbp], xmm0
	jmp	SHORT $LN12@Checkbox
$LN11@Checkbox:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv128[rbp], xmm0
$LN12@Checkbox:
	movss	xmm0, DWORD PTR square_sz$[rbp]
	addss	xmm0, DWORD PTR tv128[rbp]
	movss	xmm2, DWORD PTR tv132[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1083
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 1084
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@Checkbox
; Line 1087
	xor	al, al
	jmp	$LN1@Checkbox
$LN3@Checkbox:
; Line 1091
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 1092
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN4@Checkbox
; Line 1094
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN13@Checkbox
	mov	DWORD PTR tv158[rbp], 1
	jmp	SHORT $LN14@Checkbox
$LN13@Checkbox:
	mov	DWORD PTR tv158[rbp], 0
$LN14@Checkbox:
	mov	rax, QWORD PTR v$[rbp]
	movzx	ecx, BYTE PTR tv158[rbp]
	mov	BYTE PTR [rax], cl
; Line 1095
	mov	ecx, DWORD PTR id$[rbp]
	call	?MarkItemEdited@ImGui@@YAXI@Z		; ImGui::MarkItemEdited
$LN4@Checkbox:
; Line 1098
	movss	xmm2, DWORD PTR square_sz$[rbp]
	movss	xmm1, DWORD PTR square_sz$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR check_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1099
	mov	r8d, 1
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 1100
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv195[rbp], xmm0
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN15@Checkbox
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN15@Checkbox
	mov	DWORD PTR tv187[rbp], 9
	jmp	SHORT $LN18@Checkbox
$LN15@Checkbox:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN16@Checkbox
	mov	DWORD PTR tv186[rbp], 8
	jmp	SHORT $LN17@Checkbox
$LN16@Checkbox:
	mov	DWORD PTR tv186[rbp], 7
$LN17@Checkbox:
	mov	eax, DWORD PTR tv186[rbp]
	mov	DWORD PTR tv187[rbp], eax
$LN18@Checkbox:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv187[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv193[rbp], eax
	movss	xmm0, DWORD PTR tv195[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8d, DWORD PTR tv193[rbp]
	mov	rdx, QWORD PTR check_bb$[rbp+8]
	mov	rcx, QWORD PTR check_bb$[rbp]
	call	?RenderFrame@ImGui@@YAXUImVec2@@0I_NM@Z	; ImGui::RenderFrame
; Line 1101
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 18
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR check_col$[rbp], eax
; Line 1102
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+7236]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN19@Checkbox
	mov	DWORD PTR tv202[rbp], 1
	jmp	SHORT $LN20@Checkbox
$LN19@Checkbox:
	mov	DWORD PTR tv202[rbp], 0
$LN20@Checkbox:
	movzx	eax, BYTE PTR tv202[rbp]
	mov	BYTE PTR mixed_value$[rbp], al
; Line 1103
	movzx	eax, BYTE PTR mixed_value$[rbp]
	test	eax, eax
	je	$LN5@Checkbox
; Line 1107
	movss	xmm0, DWORD PTR square_sz$[rbp]
	divss	xmm0, DWORD PTR __real@40666666
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv229[rbp], xmm0
	movss	xmm0, DWORD PTR square_sz$[rbp]
	divss	xmm0, DWORD PTR __real@40666666
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv227[rbp], xmm0
	movss	xmm2, DWORD PTR tv229[rbp]
	movss	xmm1, DWORD PTR tv227[rbp]
	lea	rcx, QWORD PTR pad$11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1108
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv252[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	movss	DWORD PTR tv250[rbp], xmm0
	lea	r8, QWORD PTR pad$11[rbp]
	lea	rdx, QWORD PTR check_bb$[rbp+8]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv248[rbp], rax
	lea	r8, QWORD PTR pad$11[rbp]
	lea	rdx, QWORD PTR check_bb$[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv246[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	movss	xmm0, DWORD PTR tv250[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR check_col$[rbp]
	mov	r8, QWORD PTR tv248[rbp]
	mov	rdx, QWORD PTR tv246[rbp]
	mov	rcx, QWORD PTR tv252[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 1109
	jmp	$LN6@Checkbox
$LN5@Checkbox:
; Line 1110
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN7@Checkbox
; Line 1112
	movss	xmm0, DWORD PTR square_sz$[rbp]
	divss	xmm0, DWORD PTR __real@40c00000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR pad$12[rbp], xmm0
; Line 1113
	movss	xmm2, DWORD PTR pad$12[rbp]
	movss	xmm1, DWORD PTR pad$12[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR check_bb$[rbp]
	lea	rcx, QWORD PTR $T20[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T21[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv279[rbp], rax
	movss	xmm0, DWORD PTR pad$12[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR square_sz$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm3, xmm0
	mov	r8d, DWORD PTR check_col$[rbp]
	mov	rdx, QWORD PTR $T21[rbp]
	mov	rcx, QWORD PTR tv279[rbp]
	call	?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z ; ImGui::RenderCheckMark
$LN7@Checkbox:
$LN6@Checkbox:
; Line 1116
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR check_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR check_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR label_pos$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1117
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN8@Checkbox
; Line 1118
	movzx	eax, BYTE PTR mixed_value$[rbp]
	test	eax, eax
	je	SHORT $LN23@Checkbox
	lea	rax, OFFSET FLAT:??_C@_03JDMNMOAD@?$FL?$HO?$FN@
	mov	QWORD PTR tv331[rbp], rax
	jmp	SHORT $LN24@Checkbox
$LN23@Checkbox:
	mov	rax, QWORD PTR v$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN21@Checkbox
	lea	rax, OFFSET FLAT:??_C@_03JHEALCLB@?$FLx?$FN@
	mov	QWORD PTR tv328[rbp], rax
	jmp	SHORT $LN22@Checkbox
$LN21@Checkbox:
	lea	rax, OFFSET FLAT:??_C@_03PFOPMNLJ@?$FL?5?$FN@
	mov	QWORD PTR tv328[rbp], rax
$LN22@Checkbox:
	mov	rax, QWORD PTR tv328[rbp]
	mov	QWORD PTR tv331[rbp], rax
$LN24@Checkbox:
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv331[rbp]
	lea	rcx, QWORD PTR label_pos$[rbp]
	call	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z ; ImGui::LogRenderedText
$LN8@Checkbox:
; Line 1119
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@Checkbox
; Line 1120
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR label_pos$[rbp]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN9@Checkbox:
; Line 1123
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@Checkbox:
; Line 1124
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?Checkbox@ImGui@@YA_NPEBDPEA_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1288]
	pop	rdi
	pop	rbp
	ret	0
?Checkbox@ImGui@@YA_NPEBDPEA_N@Z ENDP			; ImGui::Checkbox
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
id$ = 68
padding$ = 104
$T4 = 328
$T5 = 356
$T6 = 388
tv83 = 408
__$ArrayPad$ = 416
user_texture_id$ = 464
size$ = 472
uv0$ = 480
uv1$ = 488
frame_padding$ = 496
bg_col$ = 504
tint_col$ = 512
?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z PROC ; ImGui::ImageButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1054
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 62					; 0000003eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+536]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1055
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1056
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 1057
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@ImageButto
; Line 1058
	xor	al, al
	jmp	$LN1@ImageButto
$LN2@ImageButto:
; Line 1061
	mov	rcx, QWORD PTR user_texture_id$[rbp]
	call	?PushID@ImGui@@YAXPEBX@Z		; ImGui::PushID
; Line 1062
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_06EBHDMMP@?$CDimage@
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 1063
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 1065
	cmp	DWORD PTR frame_padding$[rbp], 0
	jl	SHORT $LN4@ImageButto
	cvtsi2ss xmm0, DWORD PTR frame_padding$[rbp]
	cvtsi2ss xmm1, DWORD PTR frame_padding$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv83[rbp], rax
	jmp	SHORT $LN5@ImageButto
$LN4@ImageButto:
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+5528]
	mov	QWORD PTR $T6[rbp], rax
	lea	rax, QWORD PTR $T6[rbp]
	mov	QWORD PTR tv83[rbp], rax
$LN5@ImageButto:
	mov	rax, QWORD PTR tv83[rbp]
	mov	QWORD PTR $T4[rbp], rax
	mov	rax, QWORD PTR $T4[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR padding$[rbp], rax
; Line 1066
	mov	rax, QWORD PTR tint_col$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR bg_col$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR padding$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR uv1$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR uv0$[rbp]
	mov	r8, QWORD PTR size$[rbp]
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?ImageButtonEx@ImGui@@YA_NIPEAXAEBUImVec2@@111AEBUImVec4@@2@Z ; ImGui::ImageButtonEx
$LN1@ImageButto:
; Line 1067
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+440]
	pop	rdi
	pop	rbp
	ret	0
?ImageButton@ImGui@@YA_NPEAXAEBUImVec2@@11HAEBUImVec4@@2@Z ENDP ; ImGui::ImageButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z
_TEXT	SEGMENT
window$ = 8
bb$ = 40
$T4 = 276
$T5 = 308
$T6 = 340
$T7 = 372
$T8 = 404
$T9 = 436
tv191 = 456
tv177 = 456
tv143 = 456
tv189 = 464
tv175 = 464
tv141 = 464
tv173 = 472
tv171 = 480
__$ArrayPad$ = 488
user_texture_id$ = 528
size$ = 536
uv0$ = 544
uv1$ = 552
tint_col$ = 560
border_col$ = 568
?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z PROC	; ImGui::Image, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 999
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1000
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1001
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Image
; Line 1002
	jmp	$LN1@Image
$LN2@Image:
; Line 1004
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	mov	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1005
	mov	rax, QWORD PTR border_col$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@Image
; Line 1006
	movss	xmm2, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	lea	rcx, QWORD PTR bb$[rbp+8]
	call	??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z	; operator+=
$LN3@Image:
; Line 1007
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 1008
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Image
; Line 1009
	jmp	$LN1@Image
$LN4@Image:
; Line 1011
	mov	rax, QWORD PTR border_col$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN5@Image
; Line 1013
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv143[rbp], rax
	mov	rcx, QWORD PTR border_col$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv141[rbp], eax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+48], xmm0
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv141[rbp]
	lea	r8, QWORD PTR bb$[rbp+8]
	lea	rdx, QWORD PTR bb$[rbp]
	mov	rcx, QWORD PTR tv143[rbp]
	call	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
; Line 1014
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv177[rbp], rax
	mov	rcx, QWORD PTR tint_col$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv175[rbp], eax
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp+8]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv173[rbp], rax
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv171[rbp], rax
	mov	eax, DWORD PTR tv175[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR uv1$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR uv0$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv173[rbp]
	mov	r8, QWORD PTR tv171[rbp]
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	rcx, QWORD PTR tv177[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 1015
	jmp	SHORT $LN6@Image
$LN5@Image:
; Line 1018
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv191[rbp], rax
	mov	rcx, QWORD PTR tint_col$[rbp]
	call	?GetColorU32@ImGui@@YAIAEBUImVec4@@@Z	; ImGui::GetColorU32
	mov	DWORD PTR tv189[rbp], eax
	mov	eax, DWORD PTR tv189[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR uv1$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR uv0$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR bb$[rbp+8]
	lea	r8, QWORD PTR bb$[rbp]
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	rcx, QWORD PTR tv191[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
$LN6@Image:
$LN1@Image:
; Line 1020
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?Image@ImGui@@YAXPEAXAEBUImVec2@@11AEBUImVec4@@2@Z ENDP	; ImGui::Image
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ArrowButton@ImGui@@YA_NPEBDH@Z
_TEXT	SEGMENT
sz$ = 4
$T1 = 228
str_id$ = 288
dir$ = 296
?ArrowButton@ImGui@@YA_NPEBDH@Z PROC			; ImGui::ArrowButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 784
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 785
	call	?GetFrameHeight@ImGui@@YAMXZ		; ImGui::GetFrameHeight
	movss	DWORD PTR sz$[rbp], xmm0
; Line 786
	movss	xmm2, DWORD PTR sz$[rbp]
	movss	xmm1, DWORD PTR sz$[rbp]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xor	r9d, r9d
	mov	r8, QWORD PTR [rax]
	mov	edx, DWORD PTR dir$[rbp]
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?ArrowButtonEx@ImGui@@YA_NPEBDHUImVec2@@H@Z ; ImGui::ArrowButtonEx
; Line 787
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?ArrowButton@ImGui@@YA_NPEBDH@Z ENDP			; ImGui::ArrowButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z
_TEXT	SEGMENT
window$ = 8
id$ = 36
size$ = 72
bb$ = 104
hovered$ = 148
held$ = 180
pressed$ = 212
$T7 = 436
__$ArrayPad$ = 456
str_id$ = 496
size_arg$ = 504
flags$ = 512
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z PROC	; ImGui::InvisibleButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 732
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 70					; 00000046H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+552]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 733
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 734
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@InvisibleB
; Line 735
	xor	al, al
	jmp	$LN1@InvisibleB
$LN2@InvisibleB:
; Line 738
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN7@InvisibleB
	je	SHORT $LN5@InvisibleB
$LN7@InvisibleB:
	mov	rax, QWORD PTR size_arg$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN6@InvisibleB
	jne	SHORT $LN6@InvisibleB
$LN5@InvisibleB:
	mov	eax, DWORD PTR ?__LINE__Var@?0??InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1HA@CBNDCJDO@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@KJEAANOI@?$AAs?$AAi?$AAz?$AAe?$AA_?$AAa?$AAr?$AAg?$AA?4?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@InvisibleB:
; Line 740
	xor	r8d, r8d
	mov	rdx, QWORD PTR str_id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 741
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	mov	rax, QWORD PTR size_arg$[rbp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, QWORD PTR size$[rbp]
	call	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z ; ImGui::CalcItemSize
; Line 742
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 743
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 744
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@InvisibleB
; Line 745
	xor	al, al
	jmp	SHORT $LN1@InvisibleB
$LN3@InvisibleB:
; Line 748
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 750
	movzx	eax, BYTE PTR pressed$[rbp]
$LN1@InvisibleB:
; Line 751
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?InvisibleButton@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ENDP	; ImGui::InvisibleButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SmallButton@ImGui@@YA_NPEBD@Z
_TEXT	SEGMENT
g$ = 8
backup_padding_y$ = 36
pressed$ = 68
$T1 = 292
label$ = 352
?SmallButton@ImGui@@YA_NPEBD@Z PROC			; ImGui::SmallButton, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 720
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 721
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 722
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	movss	DWORD PTR backup_padding_y$[rbp], xmm0
; Line 723
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+5532], xmm0
; Line 724
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8d, 32768				; 00008000H
	mov	rdx, rax
	mov	rcx, QWORD PTR label$[rbp]
	call	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::ButtonEx
	mov	BYTE PTR pressed$[rbp], al
; Line 725
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR backup_padding_y$[rbp]
	movss	DWORD PTR [rax+5532], xmm0
; Line 726
	movzx	eax, BYTE PTR pressed$[rbp]
; Line 727
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?SmallButton@ImGui@@YA_NPEBD@Z ENDP			; ImGui::SmallButton
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z
_TEXT	SEGMENT
label$ = 224
size_arg$ = 232
?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z PROC		; ImGui::Button, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 714
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 715
	xor	r8d, r8d
	mov	rdx, QWORD PTR size_arg$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?ButtonEx@ImGui@@YA_NPEBDAEBUImVec2@@H@Z ; ImGui::ButtonEx
; Line 716
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Button@ImGui@@YA_NPEBDAEBUImVec2@@@Z ENDP		; ImGui::Button
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BulletTextV@ImGui@@YAXPEBDPEAD@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
text_begin$ = 104
text_end$ = 136
label_size$ = 168
total_size$ = 200
pos$ = 232
bb$ = 264
text_col$ = 308
$T7 = 724
$T8 = 756
$T9 = 788
$T10 = 824
$T11 = 852
$T12 = 884
tv128 = 900
tv173 = 904
tv92 = 904
__$ArrayPad$ = 912
fmt$ = 960
args$ = 968
?BulletTextV@ImGui@@YAXPEBDPEAD@Z PROC			; ImGui::BulletTextV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 383
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 984				; 000003d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1016]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 384
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 385
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@BulletText
; Line 386
	jmp	$LN1@BulletText
$LN2@BulletText:
; Line 388
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 389
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 391
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	QWORD PTR text_begin$[rbp], rax
; Line 392
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, 3073				; 00000c01H
	mov	rcx, rax
	call	?ImFormatStringV@@YAHPEAD_KPEBD0@Z	; ImFormatStringV
	cdqe
	mov	rcx, QWORD PTR text_begin$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_end$[rbp], rax
; Line 393
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR text_begin$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 394
	movss	xmm0, DWORD PTR label_size$[rbp+4]
	movss	DWORD PTR tv128[rbp], xmm0
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN5@BulletText
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR label_size$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv92[rbp], xmm0
	jmp	SHORT $LN6@BulletText
$LN5@BulletText:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv92[rbp], xmm0
$LN6@BulletText:
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	addss	xmm0, DWORD PTR tv92[rbp]
	movss	xmm2, DWORD PTR tv128[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR total_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 395
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 396
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR [rax+272]
	movss	DWORD PTR pos$[rbp+4], xmm0
; Line 397
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR total_size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 398
	lea	r8, QWORD PTR total_size$[rbp]
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 399
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@BulletText
; Line 400
	jmp	$LN1@BulletText
$LN3@BulletText:
; Line 403
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR text_col$[rbp], eax
; Line 404
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	mulss	xmm1, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm2, DWORD PTR [rax+56]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T10[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv173[rbp], rax
	mov	r8d, DWORD PTR text_col$[rbp]
	mov	rdx, QWORD PTR $T10[rbp]
	mov	rcx, QWORD PTR tv173[rbp]
	call	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
; Line 405
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR bb$[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	xor	r9d, r9d
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR text_begin$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN1@BulletText:
; Line 406
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BulletTextV@ImGui@@YAXPEBDPEAD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+936]
	pop	rdi
	pop	rbp
	ret	0
?BulletTextV@ImGui@@YAXPEBDPEAD@Z ENDP			; ImGui::BulletTextV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BulletText@ImGui@@YAXPEBDZZ
_TEXT	SEGMENT
args$ = 8
__$ArrayPad$ = 248
fmt$ = 288
?BulletText@ImGui@@YAXPEBDZZ PROC			; ImGui::BulletText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 374
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 376
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 377
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?BulletTextV@ImGui@@YAXPEBDPEAD@Z	; ImGui::BulletTextV
; Line 378
	mov	QWORD PTR args$[rbp], 0
; Line 379
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?BulletText@ImGui@@YAXPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?BulletText@ImGui@@YAXPEBDZZ ENDP			; ImGui::BulletText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?LabelTextV@ImGui@@YAXPEBD0PEAD@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
style$ = 72
w$ = 100
value_text_begin$ = 136
value_text_end$ = 168
value_size$ = 200
label_size$ = 232
pos$ = 264
value_bb$ = 296
total_bb$ = 344
$T8 = 772
$T9 = 804
$T10 = 836
$T11 = 868
$T12 = 900
$T13 = 932
$T14 = 964
tv162 = 980
tv199 = 984
tv158 = 984
tv164 = 988
tv197 = 992
__$ArrayPad$ = 1000
label$ = 1040
fmt$ = 1048
args$ = 1056
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z PROC			; ImGui::LabelTextV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 346
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1080				; 00000438H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 158				; 0000009eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 347
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 348
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@LabelTextV
; Line 349
	jmp	$LN1@LabelTextV
$LN2@LabelTextV:
; Line 351
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 352
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 5472				; 00001560H
	mov	QWORD PTR style$[rbp], rax
; Line 353
	call	?CalcItemWidth@ImGui@@YAMXZ		; ImGui::CalcItemWidth
	movss	DWORD PTR w$[rbp], xmm0
; Line 355
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+13076]
	mov	QWORD PTR value_text_begin$[rbp], rax
; Line 356
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, 3073				; 00000c01H
	mov	rcx, rax
	call	?ImFormatStringV@@YAHPEAD_KPEBD0@Z	; ImFormatStringV
	cdqe
	mov	rcx, QWORD PTR value_text_begin$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR value_text_end$[rbp], rax
; Line 357
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	mov	r8, QWORD PTR value_text_end$[rbp]
	mov	rdx, QWORD PTR value_text_begin$[rbp]
	lea	rcx, QWORD PTR value_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 358
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 360
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR pos$[rbp], rax
; Line 361
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+60]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR value_size$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR w$[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR value_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 362
	movss	xmm1, DWORD PTR label_size$[rbp+4]
	movss	xmm0, DWORD PTR value_size$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	DWORD PTR tv162[rbp], xmm0
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN6@LabelTextV
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	addss	xmm0, DWORD PTR label_size$[rbp]
	movss	DWORD PTR tv158[rbp], xmm0
	jmp	SHORT $LN7@LabelTextV
$LN6@LabelTextV:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv158[rbp], xmm0
$LN7@LabelTextV:
	movss	xmm0, DWORD PTR w$[rbp]
	addss	xmm0, DWORD PTR tv158[rbp]
	movss	DWORD PTR tv164[rbp], xmm0
	movss	xmm2, DWORD PTR tv162[rbp]
	movss	xmm1, DWORD PTR tv164[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 363
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR [rax+60]
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 364
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR total_bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@LabelTextV
; Line 365
	jmp	$LN1@LabelTextV
$LN3@LabelTextV:
; Line 368
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv199[rbp], rax
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR value_bb$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv197[rbp], rax
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR tv199[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR value_size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR value_text_end$[rbp]
	mov	r8, QWORD PTR value_text_begin$[rbp]
	lea	rdx, QWORD PTR value_bb$[rbp+8]
	mov	rcx, QWORD PTR tv197[rbp]
	call	?RenderTextClipped@ImGui@@YAXAEBUImVec2@@0PEBD1PEBU2@0PEBUImRect@@@Z ; ImGui::RenderTextClipped
; Line 369
	movss	xmm0, DWORD PTR label_size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@LabelTextV
; Line 370
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm0, DWORD PTR value_bb$[rbp+4]
	addss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR style$[rbp]
	movss	xmm1, DWORD PTR value_bb$[rbp+8]
	addss	xmm1, DWORD PTR [rax+80]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
$LN4@LabelTextV:
$LN1@LabelTextV:
; Line 371
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?LabelTextV@ImGui@@YAXPEBD0PEAD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1016]
	pop	rdi
	pop	rbp
	ret	0
?LabelTextV@ImGui@@YAXPEBD0PEAD@Z ENDP			; ImGui::LabelTextV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?LabelText@ImGui@@YAXPEBD0ZZ
_TEXT	SEGMENT
args$ = 8
__$ArrayPad$ = 248
label$ = 288
fmt$ = 296
?LabelText@ImGui@@YAXPEBD0ZZ PROC			; ImGui::LabelText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 337
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 339
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 340
	mov	r8, QWORD PTR args$[rbp]
	mov	rdx, QWORD PTR fmt$[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	call	?LabelTextV@ImGui@@YAXPEBD0PEAD@Z	; ImGui::LabelTextV
; Line 341
	mov	QWORD PTR args$[rbp], 0
; Line 342
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?LabelText@ImGui@@YAXPEBD0ZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?LabelText@ImGui@@YAXPEBD0ZZ ENDP			; ImGui::LabelText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextWrappedV@ImGui@@YAXPEBDPEAD@Z
_TEXT	SEGMENT
g$ = 8
need_backup$ = 36
tv68 = 244
tv93 = 248
fmt$ = 288
args$ = 296
?TextWrappedV@ImGui@@YAXPEBDPEAD@Z PROC			; ImGui::TextWrappedV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 323
$LN11:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 324
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 325
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+456]
	jbe	SHORT $LN7@TextWrappe
	mov	DWORD PTR tv68[rbp], 1
	jmp	SHORT $LN8@TextWrappe
$LN7@TextWrappe:
	mov	DWORD PTR tv68[rbp], 0
$LN8@TextWrappe:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR need_backup$[rbp], al
; Line 326
	movzx	eax, BYTE PTR need_backup$[rbp]
	test	eax, eax
	je	SHORT $LN2@TextWrappe
; Line 327
	xorps	xmm0, xmm0
	call	?PushTextWrapPos@ImGui@@YAXM@Z		; ImGui::PushTextWrapPos
$LN2@TextWrappe:
; Line 328
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	$LN3@TextWrappe
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 115				; 00000073H
	jne	$LN3@TextWrappe
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN3@TextWrappe
; Line 329
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN9@TextWrappe
	mov	rax, QWORD PTR args$[rbp]
	add	rax, 8
	mov	QWORD PTR args$[rbp], rax
	mov	rax, QWORD PTR args$[rbp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rbp], rax
	jmp	SHORT $LN10@TextWrappe
$LN9@TextWrappe:
	mov	rax, QWORD PTR args$[rbp]
	add	rax, 8
	mov	QWORD PTR args$[rbp], rax
	mov	rax, QWORD PTR args$[rbp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv93[rbp], rax
$LN10@TextWrappe:
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv93[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
	jmp	SHORT $LN4@TextWrappe
$LN3@TextWrappe:
; Line 331
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?TextV@ImGui@@YAXPEBDPEAD@Z		; ImGui::TextV
$LN4@TextWrappe:
; Line 332
	movzx	eax, BYTE PTR need_backup$[rbp]
	test	eax, eax
	je	SHORT $LN5@TextWrappe
; Line 333
	call	?PopTextWrapPos@ImGui@@YAXXZ		; ImGui::PopTextWrapPos
$LN5@TextWrappe:
; Line 334
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TextWrappedV@ImGui@@YAXPEBDPEAD@Z ENDP			; ImGui::TextWrappedV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextWrapped@ImGui@@YAXPEBDZZ
_TEXT	SEGMENT
args$ = 8
__$ArrayPad$ = 248
fmt$ = 288
?TextWrapped@ImGui@@YAXPEBDZZ PROC			; ImGui::TextWrapped, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 315
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 317
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 318
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?TextWrappedV@ImGui@@YAXPEBDPEAD@Z	; ImGui::TextWrappedV
; Line 319
	mov	QWORD PTR args$[rbp], 0
; Line 320
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TextWrapped@ImGui@@YAXPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TextWrapped@ImGui@@YAXPEBDZZ ENDP			; ImGui::TextWrapped
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextDisabledV@ImGui@@YAXPEBDPEAD@Z
_TEXT	SEGMENT
g$ = 8
tv90 = 216
fmt$ = 256
args$ = 264
?TextDisabledV@ImGui@@YAXPEBDPEAD@Z PROC		; ImGui::TextDisabledV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 304
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 305
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 306
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+5668]
	mov	rdx, rax
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 307
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	$LN2@TextDisabl
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 115				; 00000073H
	jne	$LN2@TextDisabl
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@TextDisabl
; Line 308
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@TextDisabl
	mov	rax, QWORD PTR args$[rbp]
	add	rax, 8
	mov	QWORD PTR args$[rbp], rax
	mov	rax, QWORD PTR args$[rbp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv90[rbp], rax
	jmp	SHORT $LN6@TextDisabl
$LN5@TextDisabl:
	mov	rax, QWORD PTR args$[rbp]
	add	rax, 8
	mov	QWORD PTR args$[rbp], rax
	mov	rax, QWORD PTR args$[rbp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv90[rbp], rax
$LN6@TextDisabl:
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv90[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
	jmp	SHORT $LN3@TextDisabl
$LN2@TextDisabl:
; Line 310
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?TextV@ImGui@@YAXPEBDPEAD@Z		; ImGui::TextV
$LN3@TextDisabl:
; Line 311
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
; Line 312
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TextDisabledV@ImGui@@YAXPEBDPEAD@Z ENDP		; ImGui::TextDisabledV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextDisabled@ImGui@@YAXPEBDZZ
_TEXT	SEGMENT
args$ = 8
__$ArrayPad$ = 248
fmt$ = 288
?TextDisabled@ImGui@@YAXPEBDZZ PROC			; ImGui::TextDisabled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 296
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 298
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 299
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?TextDisabledV@ImGui@@YAXPEBDPEAD@Z	; ImGui::TextDisabledV
; Line 300
	mov	QWORD PTR args$[rbp], 0
; Line 301
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TextDisabled@ImGui@@YAXPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TextDisabled@ImGui@@YAXPEBDZZ ENDP			; ImGui::TextDisabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z
_TEXT	SEGMENT
tv86 = 192
col$ = 240
fmt$ = 248
args$ = 256
?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z PROC	; ImGui::TextColoredV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 286
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 287
	mov	rdx, QWORD PTR col$[rbp]
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
; Line 288
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	$LN2@TextColore
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 115				; 00000073H
	jne	$LN2@TextColore
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR fmt$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@TextColore
; Line 289
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN5@TextColore
	mov	rax, QWORD PTR args$[rbp]
	add	rax, 8
	mov	QWORD PTR args$[rbp], rax
	mov	rax, QWORD PTR args$[rbp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv86[rbp], rax
	jmp	SHORT $LN6@TextColore
$LN5@TextColore:
	mov	rax, QWORD PTR args$[rbp]
	add	rax, 8
	mov	QWORD PTR args$[rbp], rax
	mov	rax, QWORD PTR args$[rbp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv86[rbp], rax
$LN6@TextColore:
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv86[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
	jmp	SHORT $LN3@TextColore
$LN2@TextColore:
; Line 291
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?TextV@ImGui@@YAXPEBDPEAD@Z		; ImGui::TextV
$LN3@TextColore:
; Line 292
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
; Line 293
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z ENDP	; ImGui::TextColoredV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ
_TEXT	SEGMENT
args$ = 8
__$ArrayPad$ = 248
col$ = 288
fmt$ = 296
?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ PROC		; ImGui::TextColored, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 278
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 280
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 281
	mov	r8, QWORD PTR args$[rbp]
	mov	rdx, QWORD PTR fmt$[rbp]
	mov	rcx, QWORD PTR col$[rbp]
	call	?TextColoredV@ImGui@@YAXAEBUImVec4@@PEBDPEAD@Z ; ImGui::TextColoredV
; Line 282
	mov	QWORD PTR args$[rbp], 0
; Line 283
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TextColored@ImGui@@YAXAEBUImVec4@@PEBDZZ ENDP		; ImGui::TextColored
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextV@ImGui@@YAXPEBDPEAD@Z
_TEXT	SEGMENT
window$ = 8
g$ = 40
text_end$ = 72
fmt$ = 320
args$ = 328
?TextV@ImGui@@YAXPEBDPEAD@Z PROC			; ImGui::TextV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 267
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 268
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 269
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TextV
; Line 270
	jmp	SHORT $LN1@TextV
$LN2@TextV:
; Line 272
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 273
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	r9, QWORD PTR args$[rbp]
	mov	r8, QWORD PTR fmt$[rbp]
	mov	edx, 3073				; 00000c01H
	mov	rcx, rax
	call	?ImFormatStringV@@YAHPEAD_KPEBD0@Z	; ImFormatStringV
	cdqe
	mov	rcx, QWORD PTR g$[rbp]
	lea	rax, QWORD PTR [rcx+rax+13076]
	mov	QWORD PTR text_end$[rbp], rax
; Line 274
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 13076				; 00003314H
	mov	r8d, 1
	mov	rdx, QWORD PTR text_end$[rbp]
	mov	rcx, rax
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
$LN1@TextV:
; Line 275
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TextV@ImGui@@YAXPEBDPEAD@Z ENDP			; ImGui::TextV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Text@ImGui@@YAXPEBDZZ
_TEXT	SEGMENT
args$ = 8
__$ArrayPad$ = 248
fmt$ = 288
?Text@ImGui@@YAXPEBDZZ PROC				; ImGui::Text, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 259
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 18
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+328]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 261
	lea	rax, QWORD PTR fmt$[rbp+8]
	mov	QWORD PTR args$[rbp], rax
; Line 262
	mov	rdx, QWORD PTR args$[rbp]
	mov	rcx, QWORD PTR fmt$[rbp]
	call	?TextV@ImGui@@YAXPEBDPEAD@Z		; ImGui::TextV
; Line 263
	mov	QWORD PTR args$[rbp], 0
; Line 264
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?Text@ImGui@@YAXPEBDZZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?Text@ImGui@@YAXPEBDZZ ENDP				; ImGui::Text
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TextUnformatted@ImGui@@YAXPEBD0@Z
_TEXT	SEGMENT
text$ = 224
text_end$ = 232
?TextUnformatted@ImGui@@YAXPEBD0@Z PROC			; ImGui::TextUnformatted, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 254
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 255
	mov	r8d, 1
	mov	rdx, QWORD PTR text_end$[rbp]
	mov	rcx, QWORD PTR text$[rbp]
	call	?TextEx@ImGui@@YAXPEBD0H@Z		; ImGui::TextEx
; Line 256
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TextUnformatted@ImGui@@YAXPEBD0@Z ENDP			; ImGui::TextUnformatted
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AlignTextToFramePadding@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
g$ = 40
?AlignTextToFramePadding@ImGui@@YAXXZ PROC		; ImGui::AlignTextToFramePadding, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1346
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1347
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1348
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@AlignTextT
; Line 1349
	jmp	SHORT $LN1@AlignTextT
$LN2@AlignTextT:
; Line 1351
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1352
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5532]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+6528]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+260]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+260], xmm0
; Line 1353
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5532]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+272]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+272], xmm0
$LN1@AlignTextT:
; Line 1354
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?AlignTextToFramePadding@ImGui@@YAXXZ ENDP		; ImGui::AlignTextToFramePadding
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Dummy@ImGui@@YAXAEBUImVec2@@@Z
_TEXT	SEGMENT
window$ = 8
bb$ = 40
$T4 = 276
__$ArrayPad$ = 296
size$ = 336
?Dummy@ImGui@@YAXAEBUImVec2@@@Z PROC			; ImGui::Dummy, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1319
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+376]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1320
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1321
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Dummy
; Line 1322
	jmp	SHORT $LN1@Dummy
$LN2@Dummy:
; Line 1324
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	mov	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 1325
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, QWORD PTR size$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 1326
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
$LN1@Dummy:
; Line 1327
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?Dummy@ImGui@@YAXAEBUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?Dummy@ImGui@@YAXAEBUImVec2@@@Z ENDP			; ImGui::Dummy
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Spacing@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
$T1 = 228
?Spacing@ImGui@@YAXXZ PROC				; ImGui::Spacing, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1311
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1312
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1313
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Spacing
; Line 1314
	jmp	SHORT $LN1@Spacing
$LN2@Spacing:
; Line 1315
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
$LN1@Spacing:
; Line 1316
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?Spacing@ImGui@@YAXXZ ENDP				; ImGui::Spacing
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NewLine@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
g$ = 40
backup_layout_type$ = 68
$T1 = 292
$T2 = 324
?NewLine@ImGui@@YAXXZ PROC				; ImGui::NewLine, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1330
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1331
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 1332
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@NewLine
; Line 1333
	jmp	$LN1@NewLine
$LN2@NewLine:
; Line 1335
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1336
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+436]
	mov	DWORD PTR backup_layout_type$[rbp], eax
; Line 1337
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+436], 1
; Line 1338
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+260]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@NewLine
; Line 1339
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
	jmp	SHORT $LN4@NewLine
$LN3@NewLine:
; Line 1341
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm2, DWORD PTR [rax+6528]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
$LN4@NewLine:
; Line 1342
	mov	rax, QWORD PTR window$[rbp]
	mov	ecx, DWORD PTR backup_layout_type$[rbp]
	mov	DWORD PTR [rax+436], ecx
$LN1@NewLine:
; Line 1343
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?NewLine@ImGui@@YAXXZ ENDP				; ImGui::NewLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Separator@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
flags$ = 68
tv71 = 276
?Separator@ImGui@@YAXXZ PROC				; ImGui::Separator, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_widgets.cpp
; Line 1418
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__938265FB_imgui_widgets@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1419
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1420
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 1421
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@Separator
; Line 1422
	jmp	SHORT $LN1@Separator
$LN2@Separator:
; Line 1425
	mov	rax, QWORD PTR window$[rbp]
	cmp	DWORD PTR [rax+436], 0
	jne	SHORT $LN4@Separator
	mov	DWORD PTR tv71[rbp], 2
	jmp	SHORT $LN5@Separator
$LN4@Separator:
	mov	DWORD PTR tv71[rbp], 1
$LN5@Separator:
	mov	eax, DWORD PTR tv71[rbp]
	mov	DWORD PTR flags$[rbp], eax
; Line 1426
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 4
	mov	DWORD PTR flags$[rbp], eax
; Line 1427
	mov	ecx, DWORD PTR flags$[rbp]
	call	?SeparatorEx@ImGui@@YAXH@Z		; ImGui::SeparatorEx
$LN1@Separator:
; Line 1428
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?Separator@ImGui@@YAXXZ ENDP				; ImGui::Separator
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec4@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
_z$ = 104
_w$ = 112
??0ImVec4@@QEAA@MMMM@Z PROC				; ImVec4::ImVec4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 261
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _z$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _w$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec4@@QEAA@MMMM@Z ENDP				; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec4@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec4@@QEAA@XZ PROC					; ImVec4::ImVec4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 260
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec4@@QEAA@XZ ENDP					; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??AImVec2@@QEAAAEAM_K@Z
_TEXT	SEGMENT
this$ = 80
idx$ = 88
??AImVec2@@QEAAAEAM_K@Z PROC				; ImVec2::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 250
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR idx$[rbp], 1
	jbe	SHORT $LN3@operator
	mov	r8d, 250				; 000000faH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@IIGHOJGM@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR idx$[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??AImVec2@@QEAAAEAM_K@Z ENDP				; ImVec2::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??AImVec2@@QEBAM_K@Z
_TEXT	SEGMENT
this$ = 80
idx$ = 88
??AImVec2@@QEBAM_K@Z PROC				; ImVec2::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 249
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR idx$[rbp], 1
	jbe	SHORT $LN3@operator
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@IIGHOJGM@?$AAi?$AAd?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@operator:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR idx$[rbp]
	movss	xmm0, DWORD PTR [rax+rcx*4]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??AImVec2@@QEBAM_K@Z ENDP				; ImVec2::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 248
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec2@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec2@@QEAA@XZ PROC					; ImVec2::ImVec2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 247
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec2@@QEAA@XZ ENDP					; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv72 = 192
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
$LN2@vector:
	mov	rax, QWORD PTR __n$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	mov	rax, QWORD PTR __n$[rbp]
	dec	rax
	mov	QWORD PTR __n$[rbp], rax
	cmp	QWORD PTR tv66[rbp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rbp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rbp], 0
	je	SHORT $LN3@vector
	mov	rax, QWORD PTR __f$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	mov	rcx, QWORD PTR __t$[rbp]
	call	QWORD PTR tv72[rbp]
	mov	rax, QWORD PTR __s$[rbp]
	mov	rcx, QWORD PTR __t$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rbp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
