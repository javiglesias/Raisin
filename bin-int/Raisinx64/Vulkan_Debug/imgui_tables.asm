; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31630.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__A52B8F80_imconfig@h DB 01H
__529D0EAA_concurrencysal@h DB 01H
__7EC34687_sal@h DB 01H
__35A2D2DF_vadefs@h DB 01H
__5F022EB5_vcruntime@h DB 01H
__1B0272D9_corecrt@h DB 01H
__B9985323_float@h DB 01H
__79700276_stdarg@h DB 01H
__13F5961F_stddef@h DB 01H
__61CC25A1_errno@h DB 01H
__74AC4223_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__19139D6C_assert@h DB 01H
__21D911DF_imgui@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__F3D99286_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__F75BE1FA_mmintrin@h DB 01H
__FA77ED4C_malloc@h DB 01H
__DFD742E1_xmmintrin@h DB 01H
__BAB5CB2D_emmintrin@h DB 01H
__6514A3A4_pmmintrin@h DB 01H
__D5CDD026_tmmintrin@h DB 01H
__FCF6C5A5_smmintrin@h DB 01H
__99944C69_nmmintrin@h DB 01H
__4C2FB627_wmmintrin@h DB 01H
__87BBFB20_zmmintrin@h DB 01H
__B0AF59EA_immintrin@h DB 01H
__40756020_imstb_textedit@h DB 01H
__D68E48C9_imgui_internal@h DB 01H
__4DAFBCB9_stdint@h DB 01H
__8DF776F5_imgui_tables@cpp DB 01H
msvcjmc	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0ImVec2@@QEAA@XZ				; ImVec2::ImVec2
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??0ImVec4@@QEAA@MMMM@Z				; ImVec4::ImVec4
PUBLIC	?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z	; ImGui::BeginTable
PUBLIC	?EndTable@ImGui@@YAXXZ				; ImGui::EndTable
PUBLIC	?TableNextRow@ImGui@@YAXHM@Z			; ImGui::TableNextRow
PUBLIC	?TableNextColumn@ImGui@@YA_NXZ			; ImGui::TableNextColumn
PUBLIC	?TableSetColumnIndex@ImGui@@YA_NH@Z		; ImGui::TableSetColumnIndex
PUBLIC	?TableSetupColumn@ImGui@@YAXPEBDHMI@Z		; ImGui::TableSetupColumn
PUBLIC	?TableSetupScrollFreeze@ImGui@@YAXHH@Z		; ImGui::TableSetupScrollFreeze
PUBLIC	?TableHeadersRow@ImGui@@YAXXZ			; ImGui::TableHeadersRow
PUBLIC	?TableHeader@ImGui@@YAXPEBD@Z			; ImGui::TableHeader
PUBLIC	?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ ; ImGui::TableGetSortSpecs
PUBLIC	?TableGetColumnCount@ImGui@@YAHXZ		; ImGui::TableGetColumnCount
PUBLIC	?TableGetColumnIndex@ImGui@@YAHXZ		; ImGui::TableGetColumnIndex
PUBLIC	?TableGetRowIndex@ImGui@@YAHXZ			; ImGui::TableGetRowIndex
PUBLIC	?TableGetColumnName@ImGui@@YAPEBDH@Z		; ImGui::TableGetColumnName
PUBLIC	?TableGetColumnFlags@ImGui@@YAHH@Z		; ImGui::TableGetColumnFlags
PUBLIC	?TableSetColumnEnabled@ImGui@@YAXH_N@Z		; ImGui::TableSetColumnEnabled
PUBLIC	?TableSetBgColor@ImGui@@YAXHIH@Z		; ImGui::TableSetBgColor
PUBLIC	?Columns@ImGui@@YAXHPEBD_N@Z			; ImGui::Columns
PUBLIC	?NextColumn@ImGui@@YAXXZ			; ImGui::NextColumn
PUBLIC	?GetColumnIndex@ImGui@@YAHXZ			; ImGui::GetColumnIndex
PUBLIC	?GetColumnWidth@ImGui@@YAMH@Z			; ImGui::GetColumnWidth
PUBLIC	?SetColumnWidth@ImGui@@YAXHM@Z			; ImGui::SetColumnWidth
PUBLIC	?GetColumnOffset@ImGui@@YAMH@Z			; ImGui::GetColumnOffset
PUBLIC	?SetColumnOffset@ImGui@@YAXHM@Z			; ImGui::SetColumnOffset
PUBLIC	?GetColumnsCount@ImGui@@YAHXZ			; ImGui::GetColumnsCount
PUBLIC	??2@YAPEAX_KUImNewWrapper@@PEAX@Z		; operator new
PUBLIC	??3@YAXPEAXUImNewWrapper@@0@Z			; operator delete
PUBLIC	??0ImGuiTableColumnSortSpecs@@QEAA@XZ		; ImGuiTableColumnSortSpecs::ImGuiTableColumnSortSpecs
PUBLIC	??0ImGuiTableSortSpecs@@QEAA@XZ			; ImGuiTableSortSpecs::ImGuiTableSortSpecs
PUBLIC	??0?$ImVector@D@@QEAA@XZ			; ImVector<char>::ImVector<char>
PUBLIC	??1?$ImVector@D@@QEAA@XZ			; ImVector<char>::~ImVector<char>
PUBLIC	?clear@?$ImVector@D@@QEAAXXZ			; ImVector<char>::clear
PUBLIC	??A?$ImVector@D@@QEBAAEBDH@Z			; ImVector<char>::operator[]
PUBLIC	?swap@?$ImVector@D@@QEAAXAEAU1@@Z		; ImVector<char>::swap
PUBLIC	?_grow_capacity@?$ImVector@D@@QEBAHH@Z		; ImVector<char>::_grow_capacity
PUBLIC	?resize@?$ImVector@D@@QEAAXH@Z			; ImVector<char>::resize
PUBLIC	?reserve@?$ImVector@D@@QEAAXH@Z			; ImVector<char>::reserve
PUBLIC	??0ImGuiTextBuffer@@QEAA@XZ			; ImGuiTextBuffer::ImGuiTextBuffer
PUBLIC	?size@ImGuiTextBuffer@@QEBAHXZ			; ImGuiTextBuffer::size
PUBLIC	?clear@ImGuiTextBuffer@@QEAAXXZ			; ImGuiTextBuffer::clear
PUBLIC	?reserve@ImGuiTextBuffer@@QEAAXH@Z		; ImGuiTextBuffer::reserve
PUBLIC	??1ImGuiTextBuffer@@QEAA@XZ			; ImGuiTextBuffer::~ImGuiTextBuffer
PUBLIC	??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z ; ImVector<ImGuiStorage::ImGuiStoragePair>::operator[]
PUBLIC	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
PUBLIC	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
PUBLIC	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ	; ImVector<ImDrawCmd>::pop_back
PUBLIC	??0?$ImVector@UImDrawChannel@@@@QEAA@XZ		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
PUBLIC	??1?$ImVector@UImDrawChannel@@@@QEAA@XZ		; ImVector<ImDrawChannel>::~ImVector<ImDrawChannel>
PUBLIC	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ; ImVector<ImDrawChannel>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z	; ImVector<ImDrawChannel>::resize
PUBLIC	?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z	; ImVector<ImDrawChannel>::reserve
PUBLIC	??0ImDrawListSplitter@@QEAA@XZ			; ImDrawListSplitter::ImDrawListSplitter
PUBLIC	??1ImDrawListSplitter@@QEAA@XZ			; ImDrawListSplitter::~ImDrawListSplitter
PUBLIC	?Clear@ImDrawListSplitter@@QEAAXXZ		; ImDrawListSplitter::Clear
PUBLIC	?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ	; ImVector<ImVec4>::back
PUBLIC	?back@?$ImVector@I@@QEAAAEAIXZ			; ImVector<unsigned int>::back
PUBLIC	??A?$ImVector@M@@QEAAAEAMH@Z			; ImVector<float>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@M@@QEBAHH@Z		; ImVector<float>::_grow_capacity
PUBLIC	?resize@?$ImVector@M@@QEAAXHAEBM@Z		; ImVector<float>::resize
PUBLIC	?reserve@?$ImVector@M@@QEAAXH@Z			; ImVector<float>::reserve
PUBLIC	__local_stdio_scanf_options
PUBLIC	_vsscanf_l
PUBLIC	sscanf
PUBLIC	??0ImVec1@@QEAA@XZ				; ImVec1::ImVec1
PUBLIC	??0ImRect@@QEAA@XZ				; ImRect::ImRect
PUBLIC	??0ImRect@@QEAA@AEBUImVec2@@0@Z			; ImRect::ImRect
PUBLIC	??0ImRect@@QEAA@AEBUImVec4@@@Z			; ImRect::ImRect
PUBLIC	??0ImRect@@QEAA@MMMM@Z				; ImRect::ImRect
PUBLIC	?GetSize@ImRect@@QEBA?AUImVec2@@XZ		; ImRect::GetSize
PUBLIC	?GetWidth@ImRect@@QEBAMXZ			; ImRect::GetWidth
PUBLIC	?GetHeight@ImRect@@QEBAMXZ			; ImRect::GetHeight
PUBLIC	?Contains@ImRect@@QEBA_NAEBU1@@Z		; ImRect::Contains
PUBLIC	?Overlaps@ImRect@@QEBA_NAEBU1@@Z		; ImRect::Overlaps
PUBLIC	?Add@ImRect@@QEAAXAEBU1@@Z			; ImRect::Add
PUBLIC	?ClipWith@ImRect@@QEAAXAEBU1@@Z			; ImRect::ClipWith
PUBLIC	?ClipWithFull@ImRect@@QEAAXAEBU1@@Z		; ImRect::ClipWithFull
PUBLIC	?ToVec4@ImRect@@QEBA?AUImVec4@@XZ		; ImRect::ToVec4
PUBLIC	?ImBitArrayTestBit@@YA_NPEBIH@Z			; ImBitArrayTestBit
PUBLIC	?ImBitArrayClearBit@@YAXPEAIH@Z			; ImBitArrayClearBit
PUBLIC	?ImBitArraySetBit@@YAXPEAIH@Z			; ImBitArraySetBit
PUBLIC	?ImBitArraySetBitRange@@YAXPEAIHH@Z		; ImBitArraySetBitRange
PUBLIC	??0ImGuiOldColumnData@@QEAA@XZ			; ImGuiOldColumnData::ImGuiOldColumnData
PUBLIC	??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ	; ImVector<ImGuiOldColumnData>::ImVector<ImGuiOldColumnData>
PUBLIC	??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ	; ImVector<ImGuiOldColumnData>::~ImVector<ImGuiOldColumnData>
PUBLIC	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z ; ImVector<ImGuiOldColumnData>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ; ImVector<ImGuiOldColumnData>::resize
PUBLIC	?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ; ImVector<ImGuiOldColumnData>::reserve
PUBLIC	?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z ; ImVector<ImGuiOldColumnData>::push_back
PUBLIC	??0ImGuiOldColumns@@QEAA@XZ			; ImGuiOldColumns::ImGuiOldColumns
PUBLIC	??1ImGuiOldColumns@@QEAA@XZ			; ImGuiOldColumns::~ImGuiOldColumns
PUBLIC	??0ImGuiSettingsHandler@@QEAA@XZ		; ImGuiSettingsHandler::ImGuiSettingsHandler
PUBLIC	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z ; ImVector<ImGuiTable>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z	; ImVector<ImGuiTable>::resize
PUBLIC	?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z	; ImVector<ImGuiTable>::reserve
PUBLIC	?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z ; ImPool<ImGuiTable>::GetByKey
PUBLIC	?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ; ImPool<ImGuiTable>::GetByIndex
PUBLIC	?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::GetIndex
PUBLIC	?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z ; ImPool<ImGuiTable>::GetOrAddByKey
PUBLIC	?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ ; ImPool<ImGuiTable>::Add
PUBLIC	?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::Remove
PUBLIC	?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z	; ImPool<ImGuiTable>::Remove
PUBLIC	?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ	; ImPool<ImGuiTable>::GetMapSize
PUBLIC	?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ; ImPool<ImGuiTable>::TryGetMapData
PUBLIC	??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z ; ImVector<ImGuiTableTempData>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z ; ImVector<ImGuiTableTempData>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z ; ImVector<ImGuiTableTempData>::resize
PUBLIC	?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z ; ImVector<ImGuiTableTempData>::reserve
PUBLIC	?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z ; ImVector<ImGuiSettingsHandler>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z ; ImVector<ImGuiSettingsHandler>::reserve
PUBLIC	?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z ; ImVector<ImGuiSettingsHandler>::push_back
PUBLIC	?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ ; ImChunkStream<ImGuiTableSettings>::clear
PUBLIC	?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z ; ImChunkStream<ImGuiTableSettings>::alloc_chunk
PUBLIC	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
PUBLIC	?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z ; ImChunkStream<ImGuiTableSettings>::next_chunk
PUBLIC	?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ; ImChunkStream<ImGuiTableSettings>::chunk_size
PUBLIC	?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::end
PUBLIC	?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ; ImChunkStream<ImGuiTableSettings>::offset_from_ptr
PUBLIC	?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z ; ImChunkStream<ImGuiTableSettings>::ptr_from_offset
PUBLIC	?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z ; ImChunkStream<ImGuiTableSettings>::swap
PUBLIC	??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ ; ImChunkStream<ImGuiTableSettings>::ImChunkStream<ImGuiTableSettings>
PUBLIC	??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ ; ImChunkStream<ImGuiTableSettings>::~ImChunkStream<ImGuiTableSettings>
PUBLIC	??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z ; ImVector<ImGuiOldColumns>::operator[]
PUBLIC	?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ ; ImVector<ImGuiOldColumns>::back
PUBLIC	?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z ; ImVector<ImGuiOldColumns>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z ; ImVector<ImGuiOldColumns>::reserve
PUBLIC	?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z ; ImVector<ImGuiOldColumns>::push_back
PUBLIC	?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ		; ImGuiWindow::Rect
PUBLIC	??0ImGuiTableColumn@@QEAA@XZ			; ImGuiTableColumn::ImGuiTableColumn
PUBLIC	??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ	; ImSpan<ImGuiTableColumn>::ImSpan<ImGuiTableColumn>
PUBLIC	?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z ; ImSpan<ImGuiTableColumn>::set
PUBLIC	?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ	; ImSpan<ImGuiTableColumn>::size
PUBLIC	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
PUBLIC	??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
PUBLIC	?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z ; ImSpan<ImGuiTableColumn>::index_from_ptr
PUBLIC	??0?$ImSpan@C@@QEAA@XZ				; ImSpan<signed char>::ImSpan<signed char>
PUBLIC	?set@?$ImSpan@C@@QEAAXPEAC0@Z			; ImSpan<signed char>::set
PUBLIC	??A?$ImSpan@C@@QEAAAEACH@Z			; ImSpan<signed char>::operator[]
PUBLIC	??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ	; ImSpan<ImGuiTableCellData>::ImSpan<ImGuiTableCellData>
PUBLIC	?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z ; ImSpan<ImGuiTableCellData>::set
PUBLIC	??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z ; ImSpan<ImGuiTableCellData>::operator[]
PUBLIC	??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ; ImVector<ImGuiTableColumnSortSpecs>::ImVector<ImGuiTableColumnSortSpecs>
PUBLIC	??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ; ImVector<ImGuiTableColumnSortSpecs>::~ImVector<ImGuiTableColumnSortSpecs>
PUBLIC	?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ ; ImVector<ImGuiTableColumnSortSpecs>::clear
PUBLIC	?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z ; ImVector<ImGuiTableColumnSortSpecs>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z ; ImVector<ImGuiTableColumnSortSpecs>::resize
PUBLIC	?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z ; ImVector<ImGuiTableColumnSortSpecs>::reserve
PUBLIC	??0ImGuiTable@@QEAA@XZ				; ImGuiTable::ImGuiTable
PUBLIC	??1ImGuiTable@@QEAA@XZ				; ImGuiTable::~ImGuiTable
PUBLIC	??_GImGuiTable@@QEAAPEAXI@Z			; ImGuiTable::`scalar deleting destructor'
PUBLIC	??0ImGuiTableTempData@@QEAA@XZ			; ImGuiTableTempData::ImGuiTableTempData
PUBLIC	??1ImGuiTableTempData@@QEAA@XZ			; ImGuiTableTempData::~ImGuiTableTempData
PUBLIC	??0ImGuiTableColumnSettings@@QEAA@XZ		; ImGuiTableColumnSettings::ImGuiTableColumnSettings
PUBLIC	??0ImGuiTableSettings@@QEAA@XZ			; ImGuiTableSettings::ImGuiTableSettings
PUBLIC	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
PUBLIC	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
PUBLIC	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ	; ImGui::GetCurrentWindow
PUBLIC	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
PUBLIC	?BeginColumns@ImGui@@YAXPEBDHH@Z		; ImGui::BeginColumns
PUBLIC	?EndColumns@ImGui@@YAXXZ			; ImGui::EndColumns
PUBLIC	?PushColumnClipRect@ImGui@@YAXH@Z		; ImGui::PushColumnClipRect
PUBLIC	?PushColumnsBackground@ImGui@@YAXXZ		; ImGui::PushColumnsBackground
PUBLIC	?PopColumnsBackground@ImGui@@YAXXZ		; ImGui::PopColumnsBackground
PUBLIC	?GetColumnsID@ImGui@@YAIPEBDH@Z			; ImGui::GetColumnsID
PUBLIC	?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z ; ImGui::FindOrCreateColumns
PUBLIC	?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ; ImGui::GetColumnOffsetFromNorm
PUBLIC	?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ; ImGui::GetColumnNormFromOffset
PUBLIC	?TableOpenContextMenu@ImGui@@YAXH@Z		; ImGui::TableOpenContextMenu
PUBLIC	?TableSetColumnWidth@ImGui@@YAXHM@Z		; ImGui::TableSetColumnWidth
PUBLIC	?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z	; ImGui::TableSetColumnSortDirection
PUBLIC	?TableGetHoveredColumn@ImGui@@YAHXZ		; ImGui::TableGetHoveredColumn
PUBLIC	?TableGetHeaderRowHeight@ImGui@@YAMXZ		; ImGui::TableGetHeaderRowHeight
PUBLIC	?TablePushBackgroundChannel@ImGui@@YAXXZ	; ImGui::TablePushBackgroundChannel
PUBLIC	?TablePopBackgroundChannel@ImGui@@YAXXZ		; ImGui::TablePopBackgroundChannel
PUBLIC	?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z	; ImGui::TableFindByID
PUBLIC	?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z	; ImGui::BeginTableEx
PUBLIC	?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableBeginInitMemory
PUBLIC	?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableBeginApplyRequests
PUBLIC	?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSetupDrawChannels
PUBLIC	?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableUpdateLayout
PUBLIC	?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateBorders
PUBLIC	?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateColumnsWeightFromWidth
PUBLIC	?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableDrawBorders
PUBLIC	?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableDrawContextMenu
PUBLIC	?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableMergeDrawChannels
PUBLIC	?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSortSpecsSanitize
PUBLIC	?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSortSpecsBuild
PUBLIC	?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z ; ImGui::TableGetColumnNextSortDirection
PUBLIC	?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ; ImGui::TableFixColumnSortDirection
PUBLIC	?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ; ImGui::TableGetColumnWidthAuto
PUBLIC	?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableBeginRow
PUBLIC	?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableEndRow
PUBLIC	?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z	; ImGui::TableBeginCell
PUBLIC	?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableEndCell
PUBLIC	?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z ; ImGui::TableGetCellBgRect
PUBLIC	?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z ; ImGui::TableGetColumnName
PUBLIC	?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z ; ImGui::TableGetColumnResizeID
PUBLIC	?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z ; ImGui::TableGetMaxColumnWidth
PUBLIC	?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableSetColumnWidthAutoSingle
PUBLIC	?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSetColumnWidthAutoAll
PUBLIC	?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableRemove
PUBLIC	?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableGcCompactTransientBuffers
PUBLIC	?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z ; ImGui::TableGcCompactTransientBuffers
PUBLIC	?TableGcCompactSettings@ImGui@@YAXXZ		; ImGui::TableGcCompactSettings
PUBLIC	?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableLoadSettings
PUBLIC	?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::TableSaveSettings
PUBLIC	?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableResetSettings
PUBLIC	?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z ; ImGui::TableGetBoundSettings
PUBLIC	?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z ; ImGui::TableSettingsInstallHandler
PUBLIC	?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z ; ImGui::TableSettingsCreate
PUBLIC	?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z ; ImGui::TableSettingsFindByID
PUBLIC	?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z	; ImGui::DebugNodeTable
PUBLIC	?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z ; ImGui::DebugNodeTableSettings
PUBLIC	?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z		; TableFixFlags
PUBLIC	??0?$ImSpanAllocator@$02@@QEAA@XZ		; ImSpanAllocator<3>::ImSpanAllocator<3>
PUBLIC	?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z	; ImSpanAllocator<3>::Reserve
PUBLIC	?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ ; ImSpanAllocator<3>::GetArenaSizeInBytes
PUBLIC	?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z ; ImSpanAllocator<3>::SetArenaBasePtr
PUBLIC	?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrBegin
PUBLIC	?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrEnd
PUBLIC	??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z ; ImSpanAllocator<3>::GetSpan<ImGuiTableColumn>
PUBLIC	??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z ; ImSpanAllocator<3>::GetSpan<signed char>
PUBLIC	??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z ; ImSpanAllocator<3>::GetSpan<ImGuiTableCellData>
PUBLIC	??0?$ImBitArray@$0IE@@@QEAA@XZ			; ImBitArray<132>::ImBitArray<132>
PUBLIC	?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ	; ImBitArray<132>::ClearAllBits
PUBLIC	?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z		; ImBitArray<132>::TestBit
PUBLIC	?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z		; ImBitArray<132>::SetBit
PUBLIC	?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z		; ImBitArray<132>::ClearBit
PUBLIC	?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z	; ImBitArray<132>::SetBitRange
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA ; `ImGui::BeginTableEx'::`1'::__LINE__Var
PUBLIC	??_C@_0BM@KIFJOLIL@Only?51?4?464?5columns?5allowed?$CB@ ; `string'
PUBLIC	??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1JE@NJACGDPG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@ ; `string'
PUBLIC	??_C@_1CI@NLGBMAGB@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_0EN@HCDJLOKE@BeginTable?$CI?$CJ?3?5Cannot?5change?5col@ ; `string'
PUBLIC	??_C@_1OO@LHJMPKOL@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AAC@ ; `string'
PUBLIC	??_C@_1BBG@HLLCHCOP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?0??TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableBeginApplyRequests'::`1'::__LINE__Var
PUBLIC	??_C@_1EO@CLPKFPLH@?$AAr?$AAe?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAd?$AAi?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1FG@FFJIEHAF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1GI@FDBBNGED@?$AAd?$AAs?$AAt?$AA_?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAD?$AAi?$AAs@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z@4JA ; `TableSetupColumnFlags'::`1'::__LINE__Var
PUBLIC	??_C@_1HC@EONHDNHI@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ ; `string'
PUBLIC	?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableUpdateLayout'::`1'::__LINE__Var
PUBLIC	??_C@_1DO@DEAGPPGG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@ ; `string'
PUBLIC	??_C@_1GM@PGNFGMB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAI?$AAn?$AAd?$AAe?$AAx?$AAW?$AAi@ ; `string'
PUBLIC	??_C@_1JA@JKJMNFJF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1BI@PMBHHKFI@?$AA?$CB?$AAi?$AAs?$AA_?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_0O@BMOANCPA@?$CD?$CDContextMenu@		; `string'
PUBLIC	?__LINE__Var@?0??TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableUpdateBorders'::`1'::__LINE__Var
PUBLIC	??_C@_1FC@BMHMHKON@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA	; `ImGui::EndTable'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@JFFDACDB@Only?5call?5EndTable?$CI?$CJ?5if?5BeginTa@ ; `string'
PUBLIC	??_C@_1IG@CGOKCKPM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ ; `string'
PUBLIC	??_C@_1EA@FGAGBNK@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	??_C@_1JG@DEMMNCCK@?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	??_C@_1GA@MJADNMBJ@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAR?$AAo?$AAw?$AAP?$AAo?$AAs?$AAY?$AA2@ ; `string'
PUBLIC	??_C@_0BK@MHDEDKFO@Mismatching?5PushID?1PopID?$CB@ ; `string'
PUBLIC	??_C@_1MI@BOIHHKDM@?$AA?$CI?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_0BH@GAFFHFPC@Too?5many?5PopItemWidth?$CB@	; `string'
PUBLIC	??_C@_1NM@BLFPKGHB@?$AA?$CI?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1FM@ICPCKIED@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_1HG@JFMKDCJB@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@ ; `string'
PUBLIC	??_C@_1DI@LJLDEHIA@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AAS@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA ; `ImGui::TableSetupColumn'::`1'::__LINE__Var
PUBLIC	??_C@_0DE@JMKEADIJ@Need?5to?5call?5TableSetupColumn?$CI?$CJ@ ; `string'
PUBLIC	??_C@_1II@MMHPDEP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ ; `string'
PUBLIC	??_C@_0DH@KOGIGLHC@Need?5to?5call?5call?5TableSetupCol@ ; `string'
PUBLIC	??_C@_1LG@IFCOIHC@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@ ; `string'
PUBLIC	??_C@_0DI@CBJAIEBI@Illegal?5to?5pass?5StatusMask?5valu@ ; `string'
PUBLIC	??_C@_1NM@DDJLAMJK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAT@ ; `string'
PUBLIC	??_C@_0CK@FPBLGODL@Called?5TableSetupColumn?$CI?$CJ?5too?5m@ ; `string'
PUBLIC	??_C@_1LO@INHFIFIG@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAD?$AAe?$AAc?$AAl?$AAC?$AAo?$AAl@ ; `string'
PUBLIC	??_C@_0FM@GOCDHGH@Can?5only?5specify?5width?1weight?5i@ ; `string'
PUBLIC	??_C@_1PM@LKIEMPHI@?$AAi?$AAn?$AAi?$AAt?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA_?$AAo?$AAr?$AA_?$AAw@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA ; `ImGui::TableSetupScrollFreeze'::`1'::__LINE__Var
PUBLIC	??_C@_0DC@CMJJAIP@Need?5to?5call?5TableSetupColumn?$CI?$CJ@ ; `string'
PUBLIC	??_C@_1KM@MPIBPMGF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@ ; `string'
PUBLIC	??_C@_1DK@IBKBIPFD@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@ ; `string'
PUBLIC	??_C@_1DA@CGNBCADH@?$AAr?$AAo?$AAw?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	?__LINE__Var@?0??TableSetColumnEnabled@ImGui@@YAXH_N@Z@4JA ; `ImGui::TableSetColumnEnabled'::`1'::__LINE__Var
PUBLIC	??_C@_1BG@IPNBPJPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1FA@FCMNFGAM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1GA@OFNPMLNE@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ ; `string'
PUBLIC	?__LINE__Var@?0??TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z@4JA ; `ImGui::TableGetColumnResizeID'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??TableSetBgColor@ImGui@@YAXHIH@Z@4JA ; `ImGui::TableSetBgColor'::`1'::__LINE__Var
PUBLIC	??_C@_1EE@NMABAIJJ@?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@ ; `string'
PUBLIC	??_C@_1BO@EGJMPMHM@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9?$AA1@ ; `string'
PUBLIC	?__LINE__Var@?0??TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableBeginRow'::`1'::__LINE__Var
PUBLIC	??_C@_1CI@JLDNLAAM@?$AA?$CB?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableEndRow'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@GFLHACMC@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAa?$AAb?$AAl?$AAe@ ; `string'
PUBLIC	??_C@_1CG@HHNDIFPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_01DNKMNLPK@?$HM@				; `string'
PUBLIC	??_C@_1DO@BPCFJEPF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAU?$AAn?$AAf?$AAr?$AAo?$AAz@ ; `string'
PUBLIC	??_C@_1JC@PCOAPGIF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AA2?$AAC?$AAl?$AAi?$AAp?$AAR@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetColumnIndex@ImGui@@YA_NH@Z@4JA ; `ImGui::TableSetColumnIndex'::`1'::__LINE__Var
PUBLIC	??_C@_1EK@MBNMJGKK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA ; `ImGui::TableSetColumnWidth'::`1'::__LINE__Var
PUBLIC	??_C@_1FK@MHBOMDGH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt@ ; `string'
PUBLIC	??_C@_1DK@PGHMBBCD@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAi?$AAn?$AAC?$AAo?$AAl?$AAu?$AAm@ ; `string'
PUBLIC	??_C@_1FO@DCOODALF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AA0?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableUpdateColumnsWeightFromWidth'::`1'::__LINE__Var
PUBLIC	??_C@_1JM@ELMLJHLO@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@ ; `string'
PUBLIC	??_C@_1DK@MOAONJGL@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAt?$AAr?$AAe?$AAt?$AAc?$AAh@ ; `string'
PUBLIC	??_C@_1FM@OBNODAI@?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe?$AA_?$AAw?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableSetupDrawChannels'::`1'::__LINE__Var
PUBLIC	??_C@_1GG@NCDBECJP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableMergeDrawChannels'::`1'::__LINE__Var
PUBLIC	??_C@_1DA@GEHLCBHG@?$AAs?$AAp?$AAl?$AAi?$AAt?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AA_?$AAC?$AAu?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1DE@IDMPCNHD@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA_?$AAn?$AAo?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA4@ ; `string'
PUBLIC	??_C@_1LA@JABKDEHA@?$AAh?$AAa?$AAs?$AA_?$AAf?$AAr?$AAe?$AAe?$AAz?$AAe?$AA_?$AAv?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	??_C@_1MG@IJOOMOFE@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AA_?$AAC?$AAm?$AAd?$AAB?$AAu@ ; `string'
PUBLIC	??_C@_1KG@FHCGPPO@?$AAd?$AAs?$AAt?$AA_?$AAt?$AAm?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAg?$AA?4?$AAD?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?0??TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ@4JA ; `ImGui::TableGetSortSpecs'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z@4JA ; `TableGetColumnAvailSortDirection'::`1'::__LINE__Var
PUBLIC	??_C@_1EK@EKGOAIAF@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?0??TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z@4JA ; `ImGui::TableGetColumnNextSortDirection'::`1'::__LINE__Var
PUBLIC	??_C@_1EK@NEPNAPMF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAD?$AAi?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSetColumnSortDirection@ImGui@@YAXHH_N@Z@4JA ; `ImGui::TableSetColumnSortDirection'::`1'::__LINE__Var
PUBLIC	??_C@_1FE@KIEHIAAN@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableSortSpecsSanitize'::`1'::__LINE__Var
PUBLIC	??_C@_1FA@NLOFMGNH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1GI@FLDFCCLG@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAc?$AAo?$AAu?$AAn@ ; `string'
PUBLIC	??_C@_1EM@BCBBNGI@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAw?$AAi?$AAt?$AAh?$AA_?$AAs?$AAm?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableSortSpecsBuild'::`1'::__LINE__Var
PUBLIC	??_C@_1FE@KLCJNJLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAO?$AAr?$AAd@ ; `string'
PUBLIC	?__LINE__Var@?0??TableHeadersRow@ImGui@@YAXXZ@4JA ; `ImGui::TableHeadersRow'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@NCKBBGOL@Need?5to?5call?5TableHeadersRow?$CI?$CJ?5@ ; `string'
PUBLIC	??_C@_1IG@FPFBNANE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ ; `string'
PUBLIC	?__LINE__Var@?0??TableHeader@ImGui@@YAXPEBD@Z@4JA ; `ImGui::TableHeader'::`1'::__LINE__Var
PUBLIC	??_C@_0CP@HLEIDDEE@Need?5to?5call?5TableHeader?$CI?$CJ?5afte@ ; `string'
PUBLIC	??_C@_1HO@PDHKEBPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ ; `string'
PUBLIC	??_C@_1DG@CDIJLMHK@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC@ ; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_04EBNJJJJI@?$CF?4?$CKs@			; `string'
PUBLIC	?__LINE__Var@?0??TableOpenContextMenu@ImGui@@YAXH@Z@4JA ; `ImGui::TableOpenContextMenu'::`1'::__LINE__Var
PUBLIC	??_C@_1GC@CPFLEHCP@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?5@ ; `string'
PUBLIC	??_C@_0BN@CNPDCOK@Size?5column?5to?5fit?$CD?$CD?$CDSizeOne@ ; `string'
PUBLIC	??_C@_0CC@MJIBPDCL@Size?5all?5columns?5to?5fit?$CD?$CD?$CDSizeA@ ; `string'
PUBLIC	??_C@_0CG@CFICKNDA@Size?5all?5columns?5to?5default?$CD?$CD?$CDS@ ; `string'
PUBLIC	??_C@_0M@ECFOHDE@Reset?5order@			; `string'
PUBLIC	??_C@_09MGFHLAFE@?$DMUnknown?$DO@		; `string'
PUBLIC	?__LINE__Var@?0??TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z@4JA ; `ImGui::TableGetBoundSettings'::`1'::__LINE__Var
PUBLIC	??_C@_1DE@KGKHJKNP@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	?__LINE__Var@?0??TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableSaveSettings'::`1'::__LINE__Var
PUBLIC	??_C@_1MK@NEOBPBEE@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm@ ; `string'
PUBLIC	??_C@_09BDLBIGPI@0x?$CF08X?0?$CFd@		; `string'
PUBLIC	??_C@_0M@LAOOHBLO@RefScale?$DN?$CFf@		; `string'
PUBLIC	??_C@_0M@JOECNJOM@Column?5?$CFd?$CFn@		; `string'
PUBLIC	??_C@_0BA@KAIOJKEL@UserID?$DN0x?$CF08X?$CFn@	; `string'
PUBLIC	??_C@_0L@LJLKPCDP@Width?$DN?$CFd?$CFn@		; `string'
PUBLIC	??_C@_0M@IJODOCHC@Weight?$DN?$CFf?$CFn@		; `string'
PUBLIC	??_C@_0N@EKALHFOF@Visible?$DN?$CFd?$CFn@	; `string'
PUBLIC	??_C@_0L@BHOFPJL@Order?$DN?$CFd?$CFn@		; `string'
PUBLIC	??_C@_0M@KGHCDDIO@Sort?$DN?$CFd?$CFc?$CFn@	; `string'
PUBLIC	??_C@_0BB@PGHPBJD@?$FL?$CFs?$FN?$FL0x?$CF08X?0?$CFd?$FN?6@ ; `string'
PUBLIC	??_C@_0N@NHEEPCEH@RefScale?$DN?$CFg?6@		; `string'
PUBLIC	??_C@_0M@JLNIJDCE@Column?5?$CF?92d@		; `string'
PUBLIC	??_C@_0N@PGBEGIHP@?5UserID?$DN?$CF08X@		; `string'
PUBLIC	??_C@_0N@MFKBBKPH@?5Weight?$DN?$CF?44f@		; `string'
PUBLIC	??_C@_09PBOBBCAP@?5Width?$DN?$CFd@		; `string'
PUBLIC	??_C@_0M@CIPDPODB@?5Visible?$DN?$CFd@		; `string'
PUBLIC	??_C@_09CFPCIBAG@?5Order?$DN?$CFd@		; `string'
PUBLIC	??_C@_0L@EAJILIBD@?5Sort?$DN?$CFd?$CFc@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6@				; `string'
PUBLIC	??_C@_05LFBINIGO@Table@				; `string'
PUBLIC	?__LINE__Var@?0??TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z@4JA ; `ImGui::TableGcCompactTransientBuffers'::`1'::__LINE__Var
PUBLIC	??_C@_1EA@HDPGNILG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo@ ; `string'
PUBLIC	??_C@_08CCPMLANI@FixedFit@			; `string'
PUBLIC	??_C@_09OOODJBFG@FixedSame@			; `string'
PUBLIC	??_C@_0M@IGAOBHEB@StretchProp@			; `string'
PUBLIC	??_C@_0M@LHDDKHJK@StretchSame@			; `string'
PUBLIC	??_C@_03HPADHAHE@N?1A@				; `string'
PUBLIC	??_C@_0M@MDILNFHC@?5?$CKInactive?$CK@		; `string'
PUBLIC	??_C@_0CF@DAHKPIHJ@Table?50x?$CF08X?5?$CI?$CFd?5columns?0?5in?5?8?$CF@ ; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0P@MDFKNKGM@Clear?5settings@		; `string'
PUBLIC	??_C@_0DL@BMMMGOOI@OuterRect?3?5Pos?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?5Siz@ ; `string'
PUBLIC	??_C@_07IOPDKCEG@?5?$CIauto?$CJ@		; `string'
PUBLIC	??_C@_0EH@GODPECNO@ColumnsGivenWidth?3?5?$CF?41f?0?5Column@ ; `string'
PUBLIC	??_C@_0EB@FOKPBOFF@CellPaddingX?3?5?$CF?41f?0?5CellSpacing@ ; `string'
PUBLIC	??_C@_0CP@NOMNLPPG@HoveredColumnBody?3?5?$CFd?0?5HoveredC@ ; `string'
PUBLIC	??_C@_0DL@PBPICJCB@ResizedColumn?3?5?$CFd?0?5ReorderColum@ ; `string'
PUBLIC	??_C@_09BHNPHONE@NoResize?5@			; `string'
PUBLIC	??_C@_0M@IGDNFKMD@WidthFixed?5@			; `string'
PUBLIC	??_C@_0O@PEPBBILL@WidthStretch?5@		; `string'
PUBLIC	??_C@_06FEBPAKFP@?5?$CIAsc?$CJ@			; `string'
PUBLIC	??_C@_06PFKLCOBM@?5?$CIDes?$CJ@			; `string'
PUBLIC	??_C@_09LODDIFJL@?5?$CIFrozen?$CJ@		; `string'
PUBLIC	??_C@_0BHH@CNHMONCM@Column?5?$CFd?5order?5?$CFd?5?8?$CFs?8?3?5offset@ ; `string'
PUBLIC	??_C@_0BN@LNKMILO@Settings?50x?$CF08X?5?$CI?$CFd?5columns?$CJ@ ; `string'
PUBLIC	??_C@_0BC@LJHOAHJA@SaveFlags?3?50x?$CF08X@	; `string'
PUBLIC	??_C@_0BK@OLKPLDMA@ColumnsCount?3?5?$CFd?5?$CImax?5?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_06ODJMJFLN@Weight@			; `string'
PUBLIC	??_C@_06PALFPBFG@Width?5@			; `string'
PUBLIC	??_C@_03OFHEPBNG@Asc@				; `string'
PUBLIC	??_C@_03IAMDMMHH@Des@				; `string'
PUBLIC	??_C@_03JMFMNIFM@?9?9?9@			; `string'
PUBLIC	??_C@_0EB@CNABLLAJ@Column?5?$CFd?5Order?5?$CFd?5SortOrder?5?$CFd@ ; `string'
PUBLIC	?__LINE__Var@?0??GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z@4JA ; `GetDraggedColumnOffset'::`1'::__LINE__Var
PUBLIC	??_C@_1CC@HNMGCLDB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5@ ; `string'
PUBLIC	??_C@_1GE@CFLLPKGA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc@ ; `string'
PUBLIC	?__LINE__Var@?0??GetColumnOffset@ImGui@@YAMH@Z@4JA ; `ImGui::GetColumnOffset'::`1'::__LINE__Var
PUBLIC	??_C@_1EK@FCGFMMCK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??SetColumnOffset@ImGui@@YAXHM@Z@4JA ; `ImGui::SetColumnOffset'::`1'::__LINE__Var
PUBLIC	??_C@_1BK@FLGDBJKG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??SetColumnWidth@ImGui@@YAXHM@Z@4JA ; `ImGui::SetColumnWidth'::`1'::__LINE__Var
PUBLIC	??_C@_07HIFEPIJN@columns@			; `string'
PUBLIC	?__LINE__Var@?0??BeginColumns@ImGui@@YAXPEBDHH@Z@4JA ; `ImGui::BeginColumns'::`1'::__LINE__Var
PUBLIC	??_C@_1CG@GDAJJGIO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@ ; `string'
PUBLIC	??_C@_1DO@BPFJENMI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAC?$AAu?$AAr?$AAr@ ; `string'
PUBLIC	??_C@_1CE@IJEAECLN@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??NextColumn@ImGui@@YAXXZ@4JA	; `ImGui::NextColumn'::`1'::__LINE__Var
PUBLIC	??_C@_1CM@HCFAHNAF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?0??EndColumns@ImGui@@YAXXZ@4JA	; `ImGui::EndColumns'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??Columns@ImGui@@YAXHPEBD_N@Z@4JA ; `ImGui::Columns'::`1'::__LINE__Var
PUBLIC	??_C@_1BK@GHAHDFIG@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAB?$AAI?$AAT?$AAC?$AAO?$AAU?$AAN?$AAT@ ; `string'
PUBLIC	??_C@_1DG@BODLFGJA@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAI?$AAd?$AAx?$AA?5?$AA?$CG?$AA?$CG@ ; `string'
PUBLIC	??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@ ; `string'
PUBLIC	??_C@_1DG@OANBFKML@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@ ; `string'
PUBLIC	??_C@_1DG@EPOMENA@?$AAo?$AAf?$AAf?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf@ ; `string'
PUBLIC	??_C@_1DE@BDDBABLK@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG@ ; `string'
PUBLIC	??_C@_1BE@OEELIPPM@?$AAp?$AA?5?$AA?$DM?$AA?5?$AAe?$AAn?$AAd?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@ ; `string'
PUBLIC	??_C@_1FE@GEHGFLGL@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?5?$AAC@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@00800000
PUBLIC	__real@3c23d70a
PUBLIC	__real@3d75c28f
PUBLIC	__real@3f000000
PUBLIC	__real@3f266666
PUBLIC	__real@3f333333
PUBLIC	__real@3f800000
PUBLIC	__real@40000000
PUBLIC	__real@40800000
PUBLIC	__real@42c80000
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf800000
PUBLIC	__real@ff7fffff
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__wassert:PROC
EXTRN	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ:PROC	; ImGui::GetStyle
EXTRN	?EndChild@ImGui@@YAXXZ:PROC			; ImGui::EndChild
EXTRN	?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z:PROC ; ImGui::SetNextWindowContentSize
EXTRN	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetContentRegionAvail
EXTRN	?PushStyleColor@ImGui@@YAXHI@Z:PROC		; ImGui::PushStyleColor
EXTRN	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z:PROC	; ImGui::PushStyleColor
EXTRN	?PopStyleColor@ImGui@@YAXH@Z:PROC		; ImGui::PopStyleColor
EXTRN	?PushItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::PushItemWidth
EXTRN	?PopItemWidth@ImGui@@YAXXZ:PROC			; ImGui::PopItemWidth
EXTRN	?GetColorU32@ImGui@@YAIHM@Z:PROC		; ImGui::GetColorU32
EXTRN	?GetStyleColorVec4@ImGui@@YAAEBUImVec4@@H@Z:PROC ; ImGui::GetStyleColorVec4
EXTRN	?Separator@ImGui@@YAXXZ:PROC			; ImGui::Separator
EXTRN	?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorScreenPos
EXTRN	?GetTextLineHeight@ImGui@@YAMXZ:PROC		; ImGui::GetTextLineHeight
EXTRN	?PushID@ImGui@@YAXH@Z:PROC			; ImGui::PushID
EXTRN	?PopID@ImGui@@YAXXZ:PROC			; ImGui::PopID
EXTRN	?GetID@ImGui@@YAIPEBD@Z:PROC			; ImGui::GetID
EXTRN	?BulletText@ImGui@@YAXPEBDZZ:PROC		; ImGui::BulletText
EXTRN	?SmallButton@ImGui@@YA_NPEBD@Z:PROC		; ImGui::SmallButton
EXTRN	?Bullet@ImGui@@YAXXZ:PROC			; ImGui::Bullet
EXTRN	?TreeNode@ImGui@@YA_NPEBXPEBDZZ:PROC		; ImGui::TreeNode
EXTRN	?TreePop@ImGui@@YAXXZ:PROC			; ImGui::TreePop
EXTRN	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z:PROC ; ImGui::Selectable
EXTRN	?MenuItem@ImGui@@YA_NPEBD0_N1@Z:PROC		; ImGui::MenuItem
EXTRN	?SetTooltip@ImGui@@YAXPEBDZZ:PROC		; ImGui::SetTooltip
EXTRN	?EndPopup@ImGui@@YAXXZ:PROC			; ImGui::EndPopup
EXTRN	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z:PROC	; ImGui::PushClipRect
EXTRN	?PopClipRect@ImGui@@YAXXZ:PROC			; ImGui::PopClipRect
EXTRN	?IsItemHovered@ImGui@@YA_NH@Z:PROC		; ImGui::IsItemHovered
EXTRN	?IsItemVisible@ImGui@@YA_NXZ:PROC		; ImGui::IsItemVisible
EXTRN	?IsAnyItemHovered@ImGui@@YA_NXZ:PROC		; ImGui::IsAnyItemHovered
EXTRN	?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectMin
EXTRN	?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectMax
EXTRN	?SetItemAllowOverlap@ImGui@@YAXXZ:PROC		; ImGui::SetItemAllowOverlap
EXTRN	?GetFrameCount@ImGui@@YAHXZ:PROC		; ImGui::GetFrameCount
EXTRN	?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ:PROC ; ImGui::GetForegroundDrawList
EXTRN	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z:PROC ; ImGui::CalcTextSize
EXTRN	?IsMouseReleased@ImGui@@YA_NH@Z:PROC		; ImGui::IsMouseReleased
EXTRN	?IsMouseDoubleClicked@ImGui@@YA_NH@Z:PROC	; ImGui::IsMouseDoubleClicked
EXTRN	?GetMousePos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetMousePos
EXTRN	?IsMouseDragging@ImGui@@YA_NHM@Z:PROC		; ImGui::IsMouseDragging
EXTRN	?SetMouseCursor@ImGui@@YAXH@Z:PROC		; ImGui::SetMouseCursor
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	?append@ImGuiTextBuffer@@QEAAXPEBD0@Z:PROC	; ImGuiTextBuffer::append
EXTRN	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ:PROC	; ImGuiTextBuffer::appendf
EXTRN	?GetInt@ImGuiStorage@@QEBAHIH@Z:PROC		; ImGuiStorage::GetInt
EXTRN	?SetInt@ImGuiStorage@@QEAAXIH@Z:PROC		; ImGuiStorage::SetInt
EXTRN	?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z:PROC	; ImGuiStorage::GetIntRef
EXTRN	?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ:PROC ; ImDrawListSplitter::ClearFreeMemory
EXTRN	?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z:PROC ; ImDrawListSplitter::Split
EXTRN	?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z:PROC ; ImDrawListSplitter::Merge
EXTRN	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z:PROC ; ImDrawListSplitter::SetCurrentChannel
EXTRN	?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z:PROC ; ImDrawList::PushClipRect
EXTRN	?PopClipRect@ImDrawList@@QEAAXXZ:PROC		; ImDrawList::PopClipRect
EXTRN	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z:PROC ; ImDrawList::AddLine
EXTRN	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z:PROC ; ImDrawList::AddRect
EXTRN	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z:PROC ; ImDrawList::AddRectFilled
EXTRN	__imp___stdio_common_vsscanf:PROC
EXTRN	?ImHashStr@@YAIPEBD_KI@Z:PROC			; ImHashStr
EXTRN	?ImStrSkipBlank@@YAPEBDPEBD@Z:PROC		; ImStrSkipBlank
EXTRN	?ImFormatString@@YAHPEAD_KPEBDZZ:PROC		; ImFormatString
EXTRN	?GetID@ImGuiWindow@@QEAAIPEBD0@Z:PROC		; ImGuiWindow::GetID
EXTRN	?MarkIniSettingsDirty@ImGui@@YAXXZ:PROC		; ImGui::MarkIniSettingsDirty
EXTRN	?SetNextWindowScroll@ImGui@@YAXAEBUImVec2@@@Z:PROC ; ImGui::SetNextWindowScroll
EXTRN	?SetScrollFromPosX@ImGui@@YAXPEAUImGuiWindow@@MM@Z:PROC ; ImGui::SetScrollFromPosX
EXTRN	?ClearActiveID@ImGui@@YAXXZ:PROC		; ImGui::ClearActiveID
EXTRN	?KeepAliveID@ImGui@@YAXI@Z:PROC			; ImGui::KeepAliveID
EXTRN	?PushOverrideID@ImGui@@YAXI@Z:PROC		; ImGui::PushOverrideID
EXTRN	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z:PROC	; ImGui::ItemSize
EXTRN	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z:PROC	; ImGui::ItemSize
EXTRN	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z:PROC	; ImGui::ItemAdd
EXTRN	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z:PROC	; ImGui::ItemHoverable
EXTRN	?IsClippedEx@ImGui@@YA_NAEBUImRect@@I_N@Z:PROC	; ImGui::IsClippedEx
EXTRN	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z:PROC	; ImGui::CalcItemSize
EXTRN	?PushItemFlag@ImGui@@YAXH_N@Z:PROC		; ImGui::PushItemFlag
EXTRN	?PopItemFlag@ImGui@@YAXXZ:PROC			; ImGui::PopItemFlag
EXTRN	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z:PROC ; ImGui::LogRenderedText
EXTRN	?BeginChildEx@ImGui@@YA_NPEBDIAEBUImVec2@@_NH@Z:PROC ; ImGui::BeginChildEx
EXTRN	?OpenPopupEx@ImGui@@YAXIH@Z:PROC		; ImGui::OpenPopupEx
EXTRN	?BeginPopupEx@ImGui@@YA_NIH@Z:PROC		; ImGui::BeginPopupEx
EXTRN	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z:PROC	; ImGui::RenderText
EXTRN	?RenderTextEllipsis@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1MMPEBD2PEBU3@@Z:PROC ; ImGui::RenderTextEllipsis
EXTRN	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z:PROC ; ImGui::RenderNavHighlight
EXTRN	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z:PROC	; ImGui::FindRenderedTextEnd
EXTRN	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z:PROC ; ImGui::RenderArrow
EXTRN	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z:PROC ; ImGui::ButtonBehavior
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	?GImGui@@3PEAUImGuiContext@@EA:QWORD		; GImGui
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+172
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0ImVec2@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??0ImVec4@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndTable@ImGui@@YAXXZ DD imagerel $LN65
	DD	imagerel $LN65+3985
	DD	imagerel $unwind$?EndTable@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableNextRow@ImGui@@YAXHM@Z DD imagerel $LN5
	DD	imagerel $LN5+365
	DD	imagerel $unwind$?TableNextRow@ImGui@@YAXHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableNextColumn@ImGui@@YA_NXZ DD imagerel $LN9
	DD	imagerel $LN9+258
	DD	imagerel $unwind$?TableNextColumn@ImGui@@YA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetColumnIndex@ImGui@@YA_NH@Z DD imagerel $LN10
	DD	imagerel $LN10+261
	DD	imagerel $unwind$?TableSetColumnIndex@ImGui@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetupColumn@ImGui@@YAXPEBDHMI@Z DD imagerel $LN31
	DD	imagerel $LN31+1205
	DD	imagerel $unwind$?TableSetupColumn@ImGui@@YAXPEBDHMI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetupScrollFreeze@ImGui@@YAXHH@Z DD imagerel $LN27
	DD	imagerel $LN27+989
	DD	imagerel $unwind$?TableSetupScrollFreeze@ImGui@@YAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableHeadersRow@ImGui@@YAXXZ DD imagerel $LN15
	DD	imagerel $LN15+554
	DD	imagerel $unwind$?TableHeadersRow@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableHeader@ImGui@@YAXPEBD@Z DD imagerel $LN54
	DD	imagerel $LN54+3190
	DD	imagerel $unwind$?TableHeader@ImGui@@YAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ DD imagerel $LN6
	DD	imagerel $LN6+165
	DD	imagerel $unwind$?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnCount@ImGui@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$?TableGetColumnCount@ImGui@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnIndex@ImGui@@YAHXZ DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$?TableGetColumnIndex@ImGui@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetRowIndex@ImGui@@YAHXZ DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$?TableGetRowIndex@ImGui@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnName@ImGui@@YAPEBDH@Z DD imagerel $LN5
	DD	imagerel $LN5+114
	DD	imagerel $unwind$?TableGetColumnName@ImGui@@YAPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnFlags@ImGui@@YAHH@Z DD imagerel $LN8
	DD	imagerel $LN8+198
	DD	imagerel $unwind$?TableGetColumnFlags@ImGui@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetColumnEnabled@ImGui@@YAXH_N@Z DD imagerel $LN9
	DD	imagerel $LN9+302
	DD	imagerel $unwind$?TableSetColumnEnabled@ImGui@@YAXH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetBgColor@ImGui@@YAXHIH@Z DD imagerel $LN21
	DD	imagerel $LN21+640
	DD	imagerel $unwind$?TableSetBgColor@ImGui@@YAXHIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Columns@ImGui@@YAXHPEBD_N@Z DD imagerel $LN9
	DD	imagerel $LN9+238
	DD	imagerel $unwind$?Columns@ImGui@@YAXHPEBD_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?NextColumn@ImGui@@YAXXZ DD imagerel $LN10
	DD	imagerel $LN10+798
	DD	imagerel $unwind$?NextColumn@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnIndex@ImGui@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+98
	DD	imagerel $unwind$?GetColumnIndex@ImGui@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnWidth@ImGui@@YAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+232
	DD	imagerel $unwind$?GetColumnWidth@ImGui@@YAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetColumnWidth@ImGui@@YAXHM@Z DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$?SetColumnWidth@ImGui@@YAXHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnOffset@ImGui@@YAMH@Z DD imagerel $LN6
	DD	imagerel $LN6+230
	DD	imagerel $unwind$?GetColumnOffset@ImGui@@YAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetColumnOffset@ImGui@@YAXHM@Z DD imagerel $LN12
	DD	imagerel $LN12+565
	DD	imagerel $unwind$?SetColumnOffset@ImGui@@YAXHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnsCount@ImGui@@YAHXZ DD imagerel $LN5
	DD	imagerel $LN5+98
	DD	imagerel $unwind$?GetColumnsCount@ImGui@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??3@YAXPEAXUImNewWrapper@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??3@YAXPEAXUImNewWrapper@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTableColumnSortSpecs@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0ImGuiTableColumnSortSpecs@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTableSortSpecs@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0ImGuiTableSortSpecs@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@D@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@D@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@D@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@D@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@D@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@D@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@D@@QEBAAEBDH@Z DD imagerel $LN5
	DD	imagerel $LN5+123
	DD	imagerel $unwind$??A?$ImVector@D@@QEBAAEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$ImVector@D@@QEAAXAEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+186
	DD	imagerel $unwind$?swap@?$ImVector@D@@QEAAXAEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@D@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@D@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@D@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@D@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@D@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+177
	DD	imagerel $unwind$?reserve@?$ImVector@D@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTextBuffer@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+63
	DD	imagerel $unwind$??0ImGuiTextBuffer@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@ImGuiTextBuffer@@QEBAHXZ DD imagerel $LN5
	DD	imagerel $LN5+88
	DD	imagerel $unwind$?size@ImGuiTextBuffer@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@ImGuiTextBuffer@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?clear@ImGuiTextBuffer@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@ImGuiTextBuffer@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?reserve@ImGuiTextBuffer@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImGuiTextBuffer@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1ImGuiTextBuffer@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawListSplitter@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$??0ImDrawListSplitter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImDrawListSplitter@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$??1ImDrawListSplitter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImDrawListSplitter@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?Clear@ImDrawListSplitter@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@I@@QEAAAEAIXZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@I@@QEAAAEAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@M@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@M@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@M@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@M@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@M@@QEAAXHAEBM@Z DD imagerel $LN8
	DD	imagerel $LN8+194
	DD	imagerel $unwind$?resize@?$ImVector@M@@QEAAXHAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@M@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@M@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_scanf_options DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$__local_stdio_scanf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsscanf_l DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$_vsscanf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sscanf DD imagerel $LN3
	DD	imagerel $LN3+184
	DD	imagerel $unwind$sscanf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImIsPowerOfTwo@@YA_NH@Z DD imagerel ?ImIsPowerOfTwo@@YA_NH@Z
	DD	imagerel ?ImIsPowerOfTwo@@YA_NH@Z+100
	DD	imagerel $unwind$?ImIsPowerOfTwo@@YA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??H@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??H@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??H@YA?AUImVec2@@AEBU0@0@Z+93
	DD	imagerel $unwind$??H@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z+160
	DD	imagerel $unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z+160
	DD	imagerel $unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z DD imagerel ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
	DD	imagerel ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z+238
	DD	imagerel $unwind$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloor@@YAMM@Z DD imagerel ?ImFloor@@YAMM@Z
	DD	imagerel ?ImFloor@@YAMM@Z+43
	DD	imagerel $unwind$?ImFloor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@M@@YAMMM@Z DD imagerel ??$ImMin@M@@YAMMM@Z
	DD	imagerel ??$ImMin@M@@YAMMM@Z+107
	DD	imagerel $unwind$??$ImMin@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@M@@YAMMM@Z DD imagerel ??$ImMax@M@@YAMMM@Z
	DD	imagerel ??$ImMax@M@@YAMMM@Z+107
	DD	imagerel $unwind$??$ImMax@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec1@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??0ImVec1@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$??0ImRect@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@AEBUImVec2@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0ImRect@@QEAA@AEBUImVec2@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@AEBUImVec4@@@Z DD imagerel $LN3
	DD	imagerel $LN3+115
	DD	imagerel $unwind$??0ImRect@@QEAA@AEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImRect@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$??0ImRect@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetSize@ImRect@@QEBA?AUImVec2@@XZ DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$?GetSize@ImRect@@QEBA?AUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetWidth@ImRect@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$?GetWidth@ImRect@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetHeight@ImRect@@QEBAMXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?GetHeight@ImRect@@QEBAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Contains@ImRect@@QEBA_NAEBU1@@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?Contains@ImRect@@QEBA_NAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Overlaps@ImRect@@QEBA_NAEBU1@@Z DD imagerel $LN5
	DD	imagerel $LN5+132
	DD	imagerel $unwind$?Overlaps@ImRect@@QEBA_NAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add@ImRect@@QEAAXAEBU1@@Z DD imagerel $LN7
	DD	imagerel $LN7+182
	DD	imagerel $unwind$?Add@ImRect@@QEAAXAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClipWith@ImRect@@QEAAXAEBU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$?ClipWith@ImRect@@QEAAXAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClipWithFull@ImRect@@QEAAXAEBU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$?ClipWithFull@ImRect@@QEAAXAEBU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ToVec4@ImRect@@QEBA?AUImVec4@@XZ DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$?ToVec4@ImRect@@QEBA?AUImVec4@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArrayTestBit@@YA_NPEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$?ImBitArrayTestBit@@YA_NPEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArrayClearBit@@YAXPEAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?ImBitArrayClearBit@@YAXPEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArraySetBit@@YAXPEAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?ImBitArraySetBit@@YAXPEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArraySetBitRange@@YAXPEAIHH@Z DD imagerel $LN7
	DD	imagerel $LN7+275
	DD	imagerel $unwind$?ImBitArraySetBitRange@@YAXPEAIHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@H@@YAHHH@Z DD imagerel ??$ImMin@H@@YAHHH@Z
	DD	imagerel ??$ImMin@H@@YAHHH@Z+90
	DD	imagerel $unwind$??$ImMin@H@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiOldColumnData@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$??0ImGuiOldColumnData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiOldColumns@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$??0ImGuiOldColumns@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImGuiOldColumns@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$??1ImGuiOldColumns@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiSettingsHandler@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0ImGuiSettingsHandler@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z DD imagerel $LN5
	DD	imagerel $LN5+152
	DD	imagerel $unwind$?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z DD imagerel $LN5
	DD	imagerel $LN5+165
	DD	imagerel $unwind$?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z DD imagerel $LN4
	DD	imagerel $LN4+162
	DD	imagerel $unwind$?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ DD imagerel $LN8
	DD	imagerel $LN8+363
	DD	imagerel $unwind$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA DD imagerel ?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA
	DD	imagerel ?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z DD imagerel $LN3
	DD	imagerel $LN3+239
	DD	imagerel $unwind$?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z DD imagerel $LN8
	DD	imagerel $LN8+206
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z DD imagerel $LN3
	DD	imagerel $LN3+199
	DD	imagerel $unwind$?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z DD imagerel $LN7
	DD	imagerel $LN7+250
	DD	imagerel $unwind$?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z DD imagerel $LN5
	DD	imagerel $LN5+147
	DD	imagerel $unwind$?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+117
	DD	imagerel $unwind$?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+82
	DD	imagerel $unwind$?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+51
	DD	imagerel $unwind$??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z DD imagerel $LN4
	DD	imagerel $LN4+174
	DD	imagerel $unwind$?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTableColumn@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+250
	DD	imagerel $unwind$??0ImGuiTableColumn@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z DD imagerel $LN5
	DD	imagerel $LN5+153
	DD	imagerel $unwind$?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImSpan@C@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$ImSpan@C@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set@?$ImSpan@C@@QEAAXPEAC0@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?set@?$ImSpan@C@@QEAAXPEAC0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImSpan@C@@QEAAAEACH@Z DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$??A?$ImSpan@C@@QEAAAEACH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+135
	DD	imagerel $unwind$??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTable@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+410
	DD	imagerel $unwind$??0ImGuiTable@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA+46
	DD	imagerel $unwind$?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImGuiTable@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+100
	DD	imagerel $unwind$??1ImGuiTable@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GImGuiTable@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_GImGuiTable@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTableTempData@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+237
	DD	imagerel $unwind$??0ImGuiTableTempData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImGuiTableTempData@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??1ImGuiTableTempData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTableColumnSettings@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+178
	DD	imagerel $unwind$??0ImGuiTableColumnSettings@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImGuiTableSettings@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0ImGuiTableSettings@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z DD imagerel $LN3
	DD	imagerel $LN3+262
	DD	imagerel $unwind$?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginColumns@ImGui@@YAXPEBDHH@Z DD imagerel $LN17
	DD	imagerel $LN17+1823
	DD	imagerel $unwind$?BeginColumns@ImGui@@YAXPEBDHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?EndColumns@ImGui@@YAXXZ DD imagerel $LN24
	DD	imagerel $LN24+1556
	DD	imagerel $unwind$?EndColumns@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushColumnClipRect@ImGui@@YAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+150
	DD	imagerel $unwind$?PushColumnClipRect@ImGui@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushColumnsBackground@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+162
	DD	imagerel $unwind$?PushColumnsBackground@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PopColumnsBackground@ImGui@@YAXXZ DD imagerel $LN4
	DD	imagerel $LN4+143
	DD	imagerel $unwind$?PopColumnsBackground@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnsID@ImGui@@YAIPEBDH@Z DD imagerel $LN7
	DD	imagerel $LN7+176
	DD	imagerel $unwind$?GetColumnsID@ImGui@@YAIPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z DD imagerel $LN8
	DD	imagerel $LN8+293
	DD	imagerel $unwind$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA DD imagerel ?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA
	DD	imagerel ?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableOpenContextMenu@ImGui@@YAXH@Z DD imagerel $LN8
	DD	imagerel $LN8+279
	DD	imagerel $unwind$?TableOpenContextMenu@ImGui@@YAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetColumnWidth@ImGui@@YAXHM@Z DD imagerel $LN23
	DD	imagerel $LN23+969
	DD	imagerel $unwind$?TableSetColumnWidth@ImGui@@YAXHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z DD imagerel $LN20
	DD	imagerel $LN20+598
	DD	imagerel $unwind$?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetHoveredColumn@ImGui@@YAHXZ DD imagerel $LN4
	DD	imagerel $LN4+88
	DD	imagerel $unwind$?TableGetHoveredColumn@ImGui@@YAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetHeaderRowHeight@ImGui@@YAMXZ DD imagerel $LN7
	DD	imagerel $LN7+220
	DD	imagerel $unwind$?TableGetHeaderRowHeight@ImGui@@YAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TablePushBackgroundChannel@ImGui@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+186
	DD	imagerel $unwind$?TablePushBackgroundChannel@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TablePopBackgroundChannel@ImGui@@YAXXZ DD imagerel $LN3
	DD	imagerel $LN3+190
	DD	imagerel $unwind$?TablePopBackgroundChannel@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z DD imagerel $LN3
	DD	imagerel $LN3+86
	DD	imagerel $unwind$?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z DD imagerel $LN84
	DD	imagerel $LN84+5338
	DD	imagerel $unwind$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA DD imagerel ?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA
	DD	imagerel ?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+393
	DD	imagerel $unwind$?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN25
	DD	imagerel $LN25+1343
	DD	imagerel $unwind$?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN22
	DD	imagerel $LN22+955
	DD	imagerel $unwind$?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN117
	DD	imagerel $LN117+7832
	DD	imagerel $unwind$?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN21
	DD	imagerel $LN21+1182
	DD	imagerel $unwind$?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN19
	DD	imagerel $LN19+603
	DD	imagerel $unwind$?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN46
	DD	imagerel $LN46+2349
	DD	imagerel $unwind$?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN34
	DD	imagerel $LN34+1040
	DD	imagerel $unwind$?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN62
	DD	imagerel $LN62+2952
	DD	imagerel $unwind$?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN36
	DD	imagerel $LN36+1329
	DD	imagerel $unwind$?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN16
	DD	imagerel $LN16+668
	DD	imagerel $unwind$?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z DD imagerel $LN10
	DD	imagerel $LN10+292
	DD	imagerel $unwind$?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z DD imagerel $LN5
	DD	imagerel $LN5+187
	DD	imagerel $unwind$?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z DD imagerel $LN7
	DD	imagerel $LN7+281
	DD	imagerel $unwind$?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN7
	DD	imagerel $LN7+545
	DD	imagerel $unwind$?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN54
	DD	imagerel $LN54+3460
	DD	imagerel $unwind$?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z DD imagerel $LN9
	DD	imagerel $LN9+772
	DD	imagerel $unwind$?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN7
	DD	imagerel $LN7+370
	DD	imagerel $unwind$?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+260
	DD	imagerel $unwind$?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+198
	DD	imagerel $unwind$?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z DD imagerel $LN7
	DD	imagerel $LN7+545
	DD	imagerel $unwind$?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z DD imagerel $LN4
	DD	imagerel $LN4+127
	DD	imagerel $unwind$?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN3
	DD	imagerel $LN3+180
	DD	imagerel $unwind$?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN7
	DD	imagerel $LN7+347
	DD	imagerel $unwind$?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z DD imagerel $LN3
	DD	imagerel $LN3+80
	DD	imagerel $unwind$?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGcCompactSettings@ImGui@@YAXXZ DD imagerel $LN13
	DD	imagerel $LN13+483
	DD	imagerel $unwind$?TableGcCompactSettings@ImGui@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA DD imagerel ?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA
	DD	imagerel ?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN27
	DD	imagerel $LN27+1052
	DD	imagerel $unwind$?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN25
	DD	imagerel $LN25+997
	DD	imagerel $unwind$?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z DD imagerel $LN6
	DD	imagerel $LN6+201
	DD	imagerel $unwind$?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z DD imagerel $LN3
	DD	imagerel $LN3+253
	DD	imagerel $unwind$?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z DD imagerel $LN7
	DD	imagerel $LN7+143
	DD	imagerel $unwind$?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z DD imagerel $LN38
	DD	imagerel $LN38+3350
	DD	imagerel $unwind$?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z DD imagerel $LN15
	DD	imagerel $LN15+554
	DD	imagerel $unwind$?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z DD imagerel $LN12
	DD	imagerel $LN12+337
	DD	imagerel $unwind$?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImSpanAllocator@$02@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$??0?$ImSpanAllocator@$02@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z DD imagerel $LN5
	DD	imagerel $LN5+252
	DD	imagerel $unwind$?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+133
	DD	imagerel $unwind$?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z DD imagerel ?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z
	DD	imagerel ?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z+955
	DD	imagerel $unwind$?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@M@@YAMMMM@Z DD imagerel ??$ImClamp@M@@YAMMMM@Z
	DD	imagerel ??$ImClamp@M@@YAMMMM@Z+164
	DD	imagerel $unwind$??$ImClamp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@C@@YAXAEAC0@Z DD imagerel ??$ImSwap@C@@YAXAEAC0@Z
	DD	imagerel ??$ImSwap@C@@YAXAEAC0@Z+91
	DD	imagerel $unwind$??$ImSwap@C@@YAXAEAC0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImBitArray@$0IE@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0?$ImBitArray@$0IE@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+106
	DD	imagerel $unwind$?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ DD imagerel ??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ
	DD	imagerel ??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ+96
	DD	imagerel $unwind$??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z DD imagerel ?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z
	DD	imagerel ?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z+129
	DD	imagerel $unwind$?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@C@@YACCC@Z DD imagerel ??$ImMax@C@@YACCC@Z
	DD	imagerel ??$ImMax@C@@YACCC@Z+97
	DD	imagerel $unwind$??$ImMax@C@@YACCC@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z DD imagerel ?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z
	DD	imagerel ?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z+381
	DD	imagerel $unwind$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA DD imagerel ?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA
	DD	imagerel ?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA DD imagerel ?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA
	DD	imagerel ?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA+53
	DD	imagerel $unwind$?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsCalcChunkSize@@YA_KH@Z DD imagerel ?TableSettingsCalcChunkSize@@YA_KH@Z
	DD	imagerel ?TableSettingsCalcChunkSize@@YA_KH@Z+55
	DD	imagerel $unwind$?TableSettingsCalcChunkSize@@YA_KH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z DD imagerel ?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z
	DD	imagerel ?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z+171
	DD	imagerel $unwind$?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z DD imagerel ?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z
	DD	imagerel ?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z+164
	DD	imagerel $unwind$?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z DD imagerel ?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z
	DD	imagerel ?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z+266
	DD	imagerel $unwind$?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z DD imagerel ?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z
	DD	imagerel ?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z+1103
	DD	imagerel $unwind$?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z DD imagerel ?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z
	DD	imagerel ?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z+1153
	DD	imagerel $unwind$?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z DD imagerel ?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z
	DD	imagerel ?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z+148
	DD	imagerel $unwind$?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z DD imagerel ?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z
	DD	imagerel ?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z+333
	DD	imagerel $unwind$?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@M@@YAMMMM@Z DD imagerel ??$ImLerp@M@@YAMMMM@Z
	DD	imagerel ??$ImLerp@M@@YAMMMM@Z+93
	DD	imagerel $unwind$??$ImLerp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z DD imagerel ?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z
	DD	imagerel ?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z+313
	DD	imagerel $unwind$?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z
pdata	ENDS
;	COMDAT __real@ff7fffff
CONST	SEGMENT
__real@ff7fffff DD 0ff7fffffr			; -3.40282e+38
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f266666
CONST	SEGMENT
__real@3f266666 DD 03f266666r			; 0.65
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@00800000
CONST	SEGMENT
__real@00800000 DD 000800000r			; 1.17549e-38
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1FE@GEHGFLGL@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?5?$AAC@
CONST	SEGMENT
??_C@_1FE@GEHGFLGL@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?5?$AAC@ DB 'n'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'C', 00H, 'H', 00H, 'U', 00H, 'N', 00H, 'K', 00H, 'S', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'C', 00H, 'H', 00H, 'U', 00H, 'N', 00H, 'K'
	DB	00H, 'S', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@ DB 'p'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'B', 00H, 'u', 00H
	DB	'f', 00H, '.', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'p', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'B', 00H, 'u', 00H, 'f', 00H, '.', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@OEELIPPM@?$AAp?$AA?5?$AA?$DM?$AA?5?$AAe?$AAn?$AAd?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BE@OEELIPPM@?$AAp?$AA?5?$AA?$DM?$AA?5?$AAe?$AAn?$AAd?$AA?$CI?$AA?$CJ@ DB 'p'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@BDDBABLK@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG@
CONST	SEGMENT
??_C@_1DE@BDDBABLK@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG@ DB 'p'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	'g', 00H, 'i', 00H, 'n', 00H, '(', 00H, ')', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'p', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, '(', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@EPOMENA@?$AAo?$AAf?$AAf?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf@
CONST	SEGMENT
??_C@_1DG@EPOMENA@?$AAo?$AAf?$AAf?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'B', 00H, 'u', 00H
	DB	'f', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
CONST	SEGMENT
??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@OANBFKML@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1DG@OANBFKML@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@
CONST	SEGMENT
??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@ DB 'p'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'p'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@BODLFGJA@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAI?$AAd?$AAx?$AA?5?$AA?$CG?$AA?$CG@
CONST	SEGMENT
??_C@_1DG@BODLFGJA@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAI?$AAd?$AAx?$AA?5?$AA?$CG?$AA?$CG@ DB 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'C', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'I', 00H, 'd', 00H, 'x', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'C', 00H, 'H', 00H, 'U', 00H, 'N', 00H, 'K', 00H, 'S', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@GHAHDFIG@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAB?$AAI?$AAT?$AAC?$AAO?$AAU?$AAN?$AAT@
CONST	SEGMENT
??_C@_1BK@GHAHDFIG@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAB?$AAI?$AAT?$AAC?$AAO?$AAU?$AAN?$AAT@ DB 'n'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'B', 00H, 'I', 00H, 'T', 00H
	DB	'C', 00H, 'O', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Columns@ImGui@@YAXHPEBD_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Columns@ImGui@@YAXHPEBD_N@Z@4JA DD 0fbdH ; `ImGui::Columns'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??EndColumns@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EndColumns@ImGui@@YAXXZ@4JA DD 0f71H	; `ImGui::EndColumns'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CM@HCFAHNAF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn@
CONST	SEGMENT
??_C@_1CM@HCFAHNAF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??NextColumn@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??NextColumn@ImGui@@YAXXZ@4JA DD 0f3aH	; `ImGui::NextColumn'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@IJEAECLN@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CE@IJEAECLN@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'I', 00H, 'D', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'i', 00H, 'd', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@BPFJENMI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAC?$AAu?$AAr?$AAr@
CONST	SEGMENT
??_C@_1DO@BPFJENMI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAC?$AAu?$AAr?$AAr@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H
	DB	'>', 00H, 'D', 00H, 'C', 00H, '.', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'C', 00H, 'o', 00H
	DB	'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GDAJJGIO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@
CONST	SEGMENT
??_C@_1CG@GDAJJGIO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginColumns@ImGui@@YAXPEBDHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginColumns@ImGui@@YAXPEBDHH@Z@4JA DD 0eedH ; `ImGui::BeginColumns'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_07HIFEPIJN@columns@
CONST	SEGMENT
??_C@_07HIFEPIJN@columns@ DB 'columns', 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetColumnWidth@ImGui@@YAXHM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetColumnWidth@ImGui@@YAXHM@Z@4JA DD 0ea3H ; `ImGui::SetColumnWidth'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BK@FLGDBJKG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BK@FLGDBJKG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetColumnOffset@ImGui@@YAXHM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetColumnOffset@ImGui@@YAXHM@Z@4JA DD 0e8dH ; `ImGui::SetColumnOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@FCGFMMCK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@
CONST	SEGMENT
??_C@_1EK@FCGFMMCK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H
	DB	'n', 00H, 's', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, '.', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetColumnOffset@ImGui@@YAMH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetColumnOffset@ImGui@@YAMH@Z@4JA DD 0e63H ; `ImGui::GetColumnOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GE@CFLLPKGA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1GE@CFLLPKGA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc@ DB 'g'
	DB	00H, '.', 00H, 'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H
	DB	'e', 00H, 'I', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'I', 00H, 'D', 00H, ' ', 00H, '+'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'I', 00H, 'D', 00H, '(', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 'm', 00H, 'n', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'e', 00H, 'x', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@HNMGCLDB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5@
CONST	SEGMENT
??_C@_1CC@HNMGCLDB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z@4JA DD 0e52H ; `GetDraggedColumnOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0EB@CNABLLAJ@Column?5?$CFd?5Order?5?$CFd?5SortOrder?5?$CFd@
CONST	SEGMENT
??_C@_0EB@CNABLLAJ@Column?5?$CFd?5Order?5?$CFd?5SortOrder?5?$CFd@ DB 'Col'
	DB	'umn %d Order %d SortOrder %d %s Vis %d %s %7.3f UserID 0x%08X'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03JMFMNIFM@?9?9?9@
CONST	SEGMENT
??_C@_03JMFMNIFM@?9?9?9@ DB '---', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IAMDMMHH@Des@
CONST	SEGMENT
??_C@_03IAMDMMHH@Des@ DB 'Des', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03OFHEPBNG@Asc@
CONST	SEGMENT
??_C@_03OFHEPBNG@Asc@ DB 'Asc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06PALFPBFG@Width?5@
CONST	SEGMENT
??_C@_06PALFPBFG@Width?5@ DB 'Width ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ODJMJFLN@Weight@
CONST	SEGMENT
??_C@_06ODJMJFLN@Weight@ DB 'Weight', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OLKPLDMA@ColumnsCount?3?5?$CFd?5?$CImax?5?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BK@OLKPLDMA@ColumnsCount?3?5?$CFd?5?$CImax?5?$CFd?$CJ@ DB 'Columns'
	DB	'Count: %d (max %d)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LJHOAHJA@SaveFlags?3?50x?$CF08X@
CONST	SEGMENT
??_C@_0BC@LJHOAHJA@SaveFlags?3?50x?$CF08X@ DB 'SaveFlags: 0x%08X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@LNKMILO@Settings?50x?$CF08X?5?$CI?$CFd?5columns?$CJ@
CONST	SEGMENT
??_C@_0BN@LNKMILO@Settings?50x?$CF08X?5?$CI?$CFd?5columns?$CJ@ DB 'Settin'
	DB	'gs 0x%08X (%d columns)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BHH@CNHMONCM@Column?5?$CFd?5order?5?$CFd?5?8?$CFs?8?3?5offset@
CONST	SEGMENT
??_C@_0BHH@CNHMONCM@Column?5?$CFd?5order?5?$CFd?5?8?$CFs?8?3?5offset@ DB 'C'
	DB	'olumn %d order %d ''%s'': offset %+.2f to %+.2f%s', 0aH, 'Ena'
	DB	'bled: %d, VisibleX/Y: %d/%d, RequestOutput: %d, SkipItems: %d'
	DB	', DrawChannels: %d,%d', 0aH, 'WidthGiven: %.1f, Request/Auto:'
	DB	' %.1f/%.1f, StretchWeight: %.3f (%.1f%%)', 0aH, 'MinX: %.1f, '
	DB	'MaxX: %.1f (%+.1f), ClipRect: %.1f to %.1f (+%.1f)', 0aH, 'Co'
	DB	'ntentWidth: %.1f,%.1f, HeadersUsed/Ideal %.1f/%.1f', 0aH, 'So'
	DB	'rt: %d%s, UserID: 0x%08X, Flags: 0x%04X: %s%s%s..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LODDIFJL@?5?$CIFrozen?$CJ@
CONST	SEGMENT
??_C@_09LODDIFJL@?5?$CIFrozen?$CJ@ DB ' (Frozen)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFKLCOBM@?5?$CIDes?$CJ@
CONST	SEGMENT
??_C@_06PFKLCOBM@?5?$CIDes?$CJ@ DB ' (Des)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FEBPAKFP@?5?$CIAsc?$CJ@
CONST	SEGMENT
??_C@_06FEBPAKFP@?5?$CIAsc?$CJ@ DB ' (Asc)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PEPBBILL@WidthStretch?5@
CONST	SEGMENT
??_C@_0O@PEPBBILL@WidthStretch?5@ DB 'WidthStretch ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGDNFKMD@WidthFixed?5@
CONST	SEGMENT
??_C@_0M@IGDNFKMD@WidthFixed?5@ DB 'WidthFixed ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BHNPHONE@NoResize?5@
CONST	SEGMENT
??_C@_09BHNPHONE@NoResize?5@ DB 'NoResize ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PBPICJCB@ResizedColumn?3?5?$CFd?0?5ReorderColum@
CONST	SEGMENT
??_C@_0DL@PBPICJCB@ResizedColumn?3?5?$CFd?0?5ReorderColum@ DB 'ResizedCol'
	DB	'umn: %d, ReorderColumn: %d, HeldHeaderColumn: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NOMNLPPG@HoveredColumnBody?3?5?$CFd?0?5HoveredC@
CONST	SEGMENT
??_C@_0CP@NOMNLPPG@HoveredColumnBody?3?5?$CFd?0?5HoveredC@ DB 'HoveredCol'
	DB	'umnBody: %d, HoveredColumnBorder: %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@FOKPBOFF@CellPaddingX?3?5?$CF?41f?0?5CellSpacing@
CONST	SEGMENT
??_C@_0EB@FOKPBOFF@CellPaddingX?3?5?$CF?41f?0?5CellSpacing@ DB 'CellPaddi'
	DB	'ngX: %.1f, CellSpacingX: %.1f/%.1f, OuterPaddingX: %.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@GODPECNO@ColumnsGivenWidth?3?5?$CF?41f?0?5Column@
CONST	SEGMENT
??_C@_0EH@GODPECNO@ColumnsGivenWidth?3?5?$CF?41f?0?5Column@ DB 'ColumnsGi'
	DB	'venWidth: %.1f, ColumnsAutoFitWidth: %.1f, InnerWidth: %.1f%s'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOPDKCEG@?5?$CIauto?$CJ@
CONST	SEGMENT
??_C@_07IOPDKCEG@?5?$CIauto?$CJ@ DB ' (auto)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@BMMMGOOI@OuterRect?3?5Pos?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?5Siz@
CONST	SEGMENT
??_C@_0DL@BMMMGOOI@OuterRect?3?5Pos?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?5Siz@ DB 'O'
	DB	'uterRect: Pos: (%.1f,%.1f) Size: (%.1f,%.1f) Sizing: ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MDFKNKGM@Clear?5settings@
CONST	SEGMENT
??_C@_0P@MDFKNKGM@Clear?5settings@ DB 'Clear settings', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DAHKPIHJ@Table?50x?$CF08X?5?$CI?$CFd?5columns?0?5in?5?8?$CF@
CONST	SEGMENT
??_C@_0CF@DAHKPIHJ@Table?50x?$CF08X?5?$CI?$CFd?5columns?0?5in?5?8?$CF@ DB 'T'
	DB	'able 0x%08X (%d columns, in ''%s'')%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MDILNFHC@?5?$CKInactive?$CK@
CONST	SEGMENT
??_C@_0M@MDILNFHC@?5?$CKInactive?$CK@ DB ' *Inactive*', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HPADHAHE@N?1A@
CONST	SEGMENT
??_C@_03HPADHAHE@N?1A@ DB 'N/A', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHDDKHJK@StretchSame@
CONST	SEGMENT
??_C@_0M@LHDDKHJK@StretchSame@ DB 'StretchSame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IGAOBHEB@StretchProp@
CONST	SEGMENT
??_C@_0M@IGAOBHEB@StretchProp@ DB 'StretchProp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OOODJBFG@FixedSame@
CONST	SEGMENT
??_C@_09OOODJBFG@FixedSame@ DB 'FixedSame', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCPMLANI@FixedFit@
CONST	SEGMENT
??_C@_08CCPMLANI@FixedFit@ DB 'FixedFit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@HDPGNILG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo@
CONST	SEGMENT
??_C@_1EA@HDPGNILG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'M', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y', 00H, 'C'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 0d84H ; `ImGui::TableGcCompactTransientBuffers'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05LFBINIGO@Table@
CONST	SEGMENT
??_C@_05LFBINIGO@Table@ DB 'Table', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EAJILIBD@?5Sort?$DN?$CFd?$CFc@
CONST	SEGMENT
??_C@_0L@EAJILIBD@?5Sort?$DN?$CFd?$CFc@ DB ' Sort=%d%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CFPCIBAG@?5Order?$DN?$CFd@
CONST	SEGMENT
??_C@_09CFPCIBAG@?5Order?$DN?$CFd@ DB ' Order=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIPDPODB@?5Visible?$DN?$CFd@
CONST	SEGMENT
??_C@_0M@CIPDPODB@?5Visible?$DN?$CFd@ DB ' Visible=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBOBBCAP@?5Width?$DN?$CFd@
CONST	SEGMENT
??_C@_09PBOBBCAP@?5Width?$DN?$CFd@ DB ' Width=%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MFKBBKPH@?5Weight?$DN?$CF?44f@
CONST	SEGMENT
??_C@_0N@MFKBBKPH@?5Weight?$DN?$CF?44f@ DB ' Weight=%.4f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGBEGIHP@?5UserID?$DN?$CF08X@
CONST	SEGMENT
??_C@_0N@PGBEGIHP@?5UserID?$DN?$CF08X@ DB ' UserID=%08X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLNIJDCE@Column?5?$CF?92d@
CONST	SEGMENT
??_C@_0M@JLNIJDCE@Column?5?$CF?92d@ DB 'Column %-2d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHEEPCEH@RefScale?$DN?$CFg?6@
CONST	SEGMENT
??_C@_0N@NHEEPCEH@RefScale?$DN?$CFg?6@ DB 'RefScale=%g', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PGHPBJD@?$FL?$CFs?$FN?$FL0x?$CF08X?0?$CFd?$FN?6@
CONST	SEGMENT
??_C@_0BB@PGHPBJD@?$FL?$CFs?$FN?$FL0x?$CF08X?0?$CFd?$FN?6@ DB '[%s][0x%08'
	DB	'X,%d]', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KGHCDDIO@Sort?$DN?$CFd?$CFc?$CFn@
CONST	SEGMENT
??_C@_0M@KGHCDDIO@Sort?$DN?$CFd?$CFc?$CFn@ DB 'Sort=%d%c%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BHOFPJL@Order?$DN?$CFd?$CFn@
CONST	SEGMENT
??_C@_0L@BHOFPJL@Order?$DN?$CFd?$CFn@ DB 'Order=%d%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKALHFOF@Visible?$DN?$CFd?$CFn@
CONST	SEGMENT
??_C@_0N@EKALHFOF@Visible?$DN?$CFd?$CFn@ DB 'Visible=%d%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IJODOCHC@Weight?$DN?$CFf?$CFn@
CONST	SEGMENT
??_C@_0M@IJODOCHC@Weight?$DN?$CFf?$CFn@ DB 'Weight=%f%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LJLKPCDP@Width?$DN?$CFd?$CFn@
CONST	SEGMENT
??_C@_0L@LJLKPCDP@Width?$DN?$CFd?$CFn@ DB 'Width=%d%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KAIOJKEL@UserID?$DN0x?$CF08X?$CFn@
CONST	SEGMENT
??_C@_0BA@KAIOJKEL@UserID?$DN0x?$CF08X?$CFn@ DB 'UserID=0x%08X%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JOECNJOM@Column?5?$CFd?$CFn@
CONST	SEGMENT
??_C@_0M@JOECNJOM@Column?5?$CFd?$CFn@ DB 'Column %d%n', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LAOOHBLO@RefScale?$DN?$CFf@
CONST	SEGMENT
??_C@_0M@LAOOHBLO@RefScale?$DN?$CFf@ DB 'RefScale=%f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BDLBIGPI@0x?$CF08X?0?$CFd@
CONST	SEGMENT
??_C@_09BDLBIGPI@0x?$CF08X?0?$CFd@ DB '0x%08X,%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@NEOBPBEE@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm@
CONST	SEGMENT
??_C@_1MK@NEOBPBEE@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm@ DB 's'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 'm', 00H, 'n', 00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 's', 00H, 'e', 00H, 't', 00H, 't'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 'M', 00H
	DB	'a', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 's'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 'm', 00H, 'n', 00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 0c7eH ; `ImGui::TableSaveSettings'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DE@KGKHJKNP@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1DE@KGKHJKNP@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN@ DB 's'
	DB	00H, 'e', 00H, 't', 00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'I', 00H, 'D', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, '-', 00H, '>', 00H, 'I', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z@4JA DD 0c67H ; `ImGui::TableGetBoundSettings'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_09MGFHLAFE@?$DMUnknown?$DO@
CONST	SEGMENT
??_C@_09MGFHLAFE@?$DMUnknown?$DO@ DB '<Unknown>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ECFOHDE@Reset?5order@
CONST	SEGMENT
??_C@_0M@ECFOHDE@Reset?5order@ DB 'Reset order', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CFICKNDA@Size?5all?5columns?5to?5default?$CD?$CD?$CDS@
CONST	SEGMENT
??_C@_0CG@CFICKNDA@Size?5all?5columns?5to?5default?$CD?$CD?$CDS@ DB 'Size'
	DB	' all columns to default###SizeAll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MJIBPDCL@Size?5all?5columns?5to?5fit?$CD?$CD?$CDSizeA@
CONST	SEGMENT
??_C@_0CC@MJIBPDCL@Size?5all?5columns?5to?5fit?$CD?$CD?$CDSizeA@ DB 'Size'
	DB	' all columns to fit###SizeAll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CNPDCOK@Size?5column?5to?5fit?$CD?$CD?$CDSizeOne@
CONST	SEGMENT
??_C@_0BN@CNPDCOK@Size?5column?5to?5fit?$CD?$CD?$CDSizeOne@ DB 'Size colu'
	DB	'mn to fit###SizeOne', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@CPFLEHCP@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?5@
CONST	SEGMENT
??_C@_1GC@CPFLEHCP@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?5@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '-', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H, 'n', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 'm', 00H, 'n', 00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableOpenContextMenu@ImGui@@YAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableOpenContextMenu@ImGui@@YAXH@Z@4JA DD 0bb9H ; `ImGui::TableOpenContextMenu'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04EBNJJJJI@?$CF?4?$CKs@
CONST	SEGMENT
??_C@_04EBNJJJJI@?$CF?4?$CKs@ DB '%.*s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@CDIJLMHK@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC@
CONST	SEGMENT
??_C@_1DG@CDIJLMHK@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't'
	DB	00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1HO@PDHKEBPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
CONST	SEGMENT
??_C@_1HO@PDHKEBPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '"', 00H, 'N', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, 'a', 00H, 'f', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, ' ', 00H, 'B', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n'
	DB	00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, '!', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@HLEIDDEE@Need?5to?5call?5TableHeader?$CI?$CJ?5afte@
CONST	SEGMENT
??_C@_0CP@HLEIDDEE@Need?5to?5call?5TableHeader?$CI?$CJ?5afte@ DB 'Need to'
	DB	' call TableHeader() after BeginTable()!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableHeader@ImGui@@YAXPEBD@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableHeader@ImGui@@YAXPEBD@Z@4JA DD 0b26H ; `ImGui::TableHeader'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1IG@FPFBNANE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
CONST	SEGMENT
??_C@_1IG@FPFBNANE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '"', 00H, 'N', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, 'R', 00H, 'o', 00H, 'w', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'a', 00H, 'f', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'B'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'T', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, '(', 00H, ')', 00H, '!', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@NCKBBGOL@Need?5to?5call?5TableHeadersRow?$CI?$CJ?5@
CONST	SEGMENT
??_C@_0DD@NCKBBGOL@Need?5to?5call?5TableHeadersRow?$CI?$CJ?5@ DB 'Need to'
	DB	' call TableHeadersRow() after BeginTable()!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableHeadersRow@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableHeadersRow@ImGui@@YAXXZ@4JA DD 0afcH ; `ImGui::TableHeadersRow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FE@KLCJNJLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAO?$AAr?$AAd@
CONST	SEGMENT
??_C@_1FE@KLCJNJLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAO?$AAr?$AAd@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '-', 00H
	DB	'>', 00H, 'S', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'O', 00H, 'r'
	DB	00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'S', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'S', 00H, 'p', 00H
	DB	'e', 00H, 'c', 00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 0abdH ; `ImGui::TableSortSpecsBuild'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EM@BCBBNGI@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAw?$AAi?$AAt?$AAh?$AA_?$AAs?$AAm?$AAa@
CONST	SEGMENT
??_C@_1EM@BCBBNGI@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAw?$AAi?$AAt?$AAh?$AA_?$AAs?$AAm?$AAa@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'w', 00H, 'i', 00H, 't', 00H, 'h', 00H, '_', 00H, 's', 00H, 'm'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 's', 00H, 't', 00H
	DB	'_', 00H, 's', 00H, 'o', 00H, 'r', 00H, 't', 00H, '_', 00H, 'o'
	DB	00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@FLDFCCLG@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAc?$AAo?$AAu?$AAn@
CONST	SEGMENT
??_C@_1GI@FLDFCCLG@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAc?$AAo?$AAu?$AAn@ DB 's'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, '_', 00H, 'o', 00H, 'r', 00H
	DB	'd', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u'
	DB	00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H
	DB	'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 'o', 00H, 'f', 00H, '(', 00H, 's', 00H, 'o', 00H
	DB	'r', 00H, 't', 00H, '_', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, '_', 00H, 'm', 00H, 'a', 00H, 's', 00H, 'k', 00H
	DB	')', 00H, ' ', 00H, '*', 00H, ' ', 00H, '8', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@NLOFMGNH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1FA@NLOFMGNH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'S', 00H, 'o', 00H
	DB	'r', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 0a7bH ; `ImGui::TableSortSpecsSanitize'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FE@KIEHIAAN@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5@
CONST	SEGMENT
??_C@_1FE@KIEHIAAN@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5@ DB 's'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, '_', 00H, 'd', 00H, 'i', 00H
	DB	'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'm', 00H
	DB	'G', 00H, 'u', 00H, 'i', 00H, 'S', 00H, 'o', 00H, 'r', 00H, 't'
	DB	00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, '_', 00H, 'N', 00H, 'o', 00H, 'n'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetColumnSortDirection@ImGui@@YAXHH_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetColumnSortDirection@ImGui@@YAXHH_N@Z@4JA DD 0a5aH ; `ImGui::TableSetColumnSortDirection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@NEPNAPMF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAD?$AAi?$AAr@
CONST	SEGMENT
??_C@_1EK@NEPNAPMF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAD?$AAi?$AAr@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '-', 00H
	DB	'>', 00H, 'S', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'D', 00H, 'i'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 'A', 00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z@4JA DD 0a4cH ; `ImGui::TableGetColumnNextSortDirection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@EKGOAIAF@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr@
CONST	SEGMENT
??_C@_1EK@EKGOAIAF@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr@ DB 'n'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'n', 00H, '-', 00H, '>', 00H, 'S', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, 'D', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'A'
	DB	00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z@4JA DD 0a39H ; `TableGetColumnAvailSortDirection'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ@4JA DD 0a27H ; `ImGui::TableGetSortSpecs'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1KG@FHCGPPO@?$AAd?$AAs?$AAt?$AA_?$AAt?$AAm?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAg?$AA?4?$AAD?$AAr@
CONST	SEGMENT
??_C@_1KG@FHCGPPO@?$AAd?$AAs?$AAt?$AA_?$AAt?$AAm?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAg?$AA?4?$AAD?$AAr@ DB 'd'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'g', 00H, '.', 00H, 'D'
	DB	00H, 'r', 00H, 'a', 00H, 'w', 00H, 'C', 00H, 'h', 00H, 'a', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H, 's', 00H, 'T', 00H, 'e'
	DB	00H, 'm', 00H, 'p', 00H, 'M', 00H, 'e', 00H, 'r', 00H, 'g', 00H
	DB	'e', 00H, 'B', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, '.', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 'g', 00H, '.', 00H, 'D', 00H, 'r', 00H, 'a'
	DB	00H, 'w', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, 's', 00H, 'T', 00H, 'e', 00H, 'm', 00H, 'p'
	DB	00H, 'M', 00H, 'e', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 'B', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '.', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1MG@IJOOMOFE@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AA_?$AAC?$AAm?$AAd?$AAB?$AAu@
CONST	SEGMENT
??_C@_1MG@IJOOMOFE@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AA_?$AAC?$AAm?$AAd?$AAB?$AAu@ DB 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'-', 00H, '>', 00H, '_', 00H, 'C', 00H, 'm', 00H, 'd', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '.', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'm', 00H, 'e', 00H, 'r', 00H, 'g', 00H, 'e', 00H, '_', 00H, 'c'
	DB	00H, 'l', 00H, 'i', 00H, 'p', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, 'a', 00H, 'i', 00H, 'n', 00H, 's', 00H, '(', 00H, 'I', 00H
	DB	'm', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, '(', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'-', 00H, '>', 00H, '_', 00H, 'C', 00H, 'm', 00H, 'd', 00H, 'B'
	DB	00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '[', 00H
	DB	'0', 00H, ']', 00H, '.', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p'
	DB	00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@JABKDEHA@?$AAh?$AAa?$AAs?$AA_?$AAf?$AAr?$AAe?$AAe?$AAz?$AAe?$AA_?$AAv?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1LA@JABKDEHA@?$AAh?$AAa?$AAs?$AA_?$AAf?$AAr?$AAe?$AAe?$AAz?$AAe?$AA_?$AAv?$AA?5?$AA?$DN?$AA?$DN@ DB 'h'
	DB	00H, 'a', 00H, 's', 00H, '_', 00H, 'f', 00H, 'r', 00H, 'e', 00H
	DB	'e', 00H, 'z', 00H, 'e', 00H, '_', 00H, 'v', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'l', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'B', 00H
	DB	'g', 00H, '2', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'C'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'U', 00H, 'n', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'z', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'T', 00H
	DB	'A', 00H, 'B', 00H, 'L', 00H, 'E', 00H, '_', 00H, 'D', 00H, 'R'
	DB	00H, 'A', 00H, 'W', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'N', 00H, 'E', 00H, 'L', 00H, '_', 00H, 'B', 00H, 'G'
	DB	00H, '2', 00H, '_', 00H, 'F', 00H, 'R', 00H, 'O', 00H, 'Z', 00H
	DB	'E', 00H, 'N', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@IDMPCNHD@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA_?$AAn?$AAo?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA4@
CONST	SEGMENT
??_C@_1DE@IDMPCNHD@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA_?$AAn?$AAo?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA4@ DB 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'_', 00H, 'n', 00H, 'o', 00H, ' ', 00H, '<', 00H, ' ', 00H, '('
	DB	00H, '4', 00H, ' ', 00H, '+', 00H, ' ', 00H, '6', 00H, '4', 00H
	DB	' ', 00H, '*', 00H, ' ', 00H, '2', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GEHLCBHG@?$AAs?$AAp?$AAl?$AAi?$AAt?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AA_?$AAC?$AAu?$AAr?$AAr@
CONST	SEGMENT
??_C@_1DA@GEHLCBHG@?$AAs?$AAp?$AAl?$AAi?$AAt?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AA_?$AAC?$AAu?$AAr?$AAr@ DB 's'
	DB	00H, 'p', 00H, 'l', 00H, 'i', 00H, 't', 00H, 't', 00H, 'e', 00H
	DB	'r', 00H, '-', 00H, '>', 00H, '_', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 0912H ; `ImGui::TableMergeDrawChannels'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GG@NCDBECJP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@
CONST	SEGMENT
??_C@_1GG@NCDBECJP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'B', 00H, 'g', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'M', 00H, 'i', 00H
	DB	'n', 00H, '.', 00H, 'y', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'B', 00H, 'g', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p'
	DB	00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'M', 00H
	DB	'a', 00H, 'x', 00H, '.', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 08ceH ; `ImGui::TableSetupDrawChannels'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FM@OBNODAI@?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe?$AA_?$AAw?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@
CONST	SEGMENT
??_C@_1FM@OBNODAI@?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe?$AA_?$AAw?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@ DB 'v'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'v', 00H, 'i'
	DB	00H, 's', 00H, 'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MOAONJGL@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAt?$AAr?$AAe?$AAt?$AAc?$AAh@
CONST	SEGMENT
??_C@_1DK@MOAONJGL@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAt?$AAr?$AAe?$AAt?$AAc?$AAh@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '-', 00H
	DB	'>', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 't', 00H, 'c'
	DB	00H, 'h', 00H, 'W', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H
	DB	't', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0'
	DB	00H, 'f', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1JM@ELMLJHLO@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@
CONST	SEGMENT
??_C@_1JM@ELMLJHLO@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'L', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'M', 00H, 'o', 00H, 's'
	DB	00H, 't', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'e', 00H, 't', 00H
	DB	'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'u', 00H, 'm', 00H, 'n', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, '-', 00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'R', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, 'M'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'e', 00H, 't', 00H, 'c', 00H, 'h', 00H, 'e', 00H, 'd', 00H, 'C'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 087dH ; `ImGui::TableUpdateColumnsWeightFromWidth'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FO@DCOODALF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AA0?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5@
CONST	SEGMENT
??_C@_1FO@DCOODALF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AA0?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'0', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H, '1', 00H
	DB	'_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@PGHMBBCD@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAi?$AAn?$AAC?$AAo?$AAl?$AAu?$AAm@
CONST	SEGMENT
??_C@_1DK@PGHMBBCD@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAi?$AAn?$AAC?$AAo?$AAl?$AAu?$AAm@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'M', 00H, 'i', 00H, 'n', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 'm', 00H, 'n', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0'
	DB	00H, 'f', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@MHBOMDGH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt@
CONST	SEGMENT
??_C@_1FK@MHBOMDGH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'I', 00H, 's', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'f'
	DB	00H, 'a', 00H, 'l', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA DD 0814H ; `ImGui::TableSetColumnWidth'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EK@MBNMJGKK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1EK@MBNMJGKK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetColumnIndex@ImGui@@YA_NH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetColumnIndex@ImGui@@YA_NH@Z@4JA DD 0758H ; `ImGui::TableSetColumnIndex'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JC@PCOAPGIF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AA2?$AAC?$AAl?$AAi?$AAp?$AAR@
CONST	SEGMENT
??_C@_1JC@PCOAPGIF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AA2?$AAC?$AAl?$AAi?$AAp?$AAR@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'B', 00H, 'g', 00H, '2', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p'
	DB	00H, 'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, 'F', 00H, 'o', 00H
	DB	'r', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'C', 00H, 'm'
	DB	00H, 'd', 00H, '.', 00H, 'M', 00H, 'i', 00H, 'n', 00H, '.', 00H
	DB	'y', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 't', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'B', 00H
	DB	'g', 00H, '2', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, 'F', 00H, 'o', 00H, 'r', 00H
	DB	'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'C', 00H, 'm', 00H, 'd'
	DB	00H, '.', 00H, 'M', 00H, 'a', 00H, 'x', 00H, '.', 00H, 'y', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@BPCFJEPF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAU?$AAn?$AAf?$AAr?$AAo?$AAz@
CONST	SEGMENT
??_C@_1DO@BPCFJEPF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAU?$AAn?$AAf?$AAr?$AAo?$AAz@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'I', 00H, 's', 00H, 'U', 00H, 'n', 00H, 'f', 00H, 'r', 00H, 'o'
	DB	00H, 'z', 00H, 'e', 00H, 'n', 00H, 'R', 00H, 'o', 00H, 'w', 00H
	DB	's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01DNKMNLPK@?$HM@
CONST	SEGMENT
??_C@_01DNKMNLPK@?$HM@ DB '|', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@HHNDIFPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd?$AAe@
CONST	SEGMENT
??_C@_1CG@HHNDIFPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd?$AAe@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'I', 00H, 's', 00H, 'I', 00H, 'n', 00H, 's', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, 'R', 00H, 'o', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@GFLHACMC@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAa?$AAb?$AAl?$AAe@
CONST	SEGMENT
??_C@_1DK@GFLHACMC@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAa?$AAb?$AAl?$AAe@ DB 'w'
	DB	00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l'
	DB	00H, 'e', 00H, '-', 00H, '>', 00H, 'I', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 06beH ; `ImGui::TableEndRow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@JLDNLAAM@?$AA?$CB?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd@
CONST	SEGMENT
??_C@_1CI@JLDNLAAM@?$AA?$CB?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd@ DB '!'
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'I', 00H, 's', 00H, 'I', 00H, 'n', 00H, 's', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, 'R', 00H, 'o', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 069dH ; `ImGui::TableBeginRow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BO@EGJMPMHM@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9?$AA1@
CONST	SEGMENT
??_C@_1BO@EGJMPMHM@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9?$AA1@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '-', 00H, '1'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@NMABAIJJ@?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
CONST	SEGMENT
??_C@_1EE@NMABAIJJ@?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@ DB 't'
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'B', 00H, 'g', 00H, 'T', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e'
	DB	00H, 't', 00H, '_', 00H, 'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetBgColor@ImGui@@YAXHIH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetBgColor@ImGui@@YAXHIH@Z@4JA DD 0646H ; `ImGui::TableSetBgColor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z@4JA DD 0635H ; `ImGui::TableGetColumnResizeID'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GA@OFNPMLNE@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1GA@OFNPMLNE@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '_', 00H
	DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'n', 00H, '_', 00H, 'n', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm'
	DB	00H, 'n', 00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@FCMNFGAM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1FA@FCMNFGAM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'H', 00H, 'i', 00H
	DB	'd', 00H, 'e', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@IPNBPJPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BG@IPNBPJPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetColumnEnabled@ImGui@@YAXH_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetColumnEnabled@ImGui@@YAXH_N@Z@4JA DD 0606H ; `ImGui::TableSetColumnEnabled'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@CGNBCADH@?$AAr?$AAo?$AAw?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo@
CONST	SEGMENT
??_C@_1DA@CGNBCADH@?$AAr?$AAo?$AAw?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo@ DB 'r'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r'
	DB	00H, 'o', 00H, 'w', 00H, 's', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'1', 00H, '2', 00H, '8', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@IBKBIPFD@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@
CONST	SEGMENT
??_C@_1DK@IBKBIPFD@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H
	DB	'm', 00H, 'n', 00H, 's', 00H, ' ', 00H, '<', 00H, ' ', 00H, '6'
	DB	00H, '4', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1KM@MPIBPMGF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@
CONST	SEGMENT
??_C@_1KM@MPIBPMGF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'I', 00H, 's', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '"', 00H, 'N', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, ' ', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, 'S', 00H, 'e', 00H, 't', 00H, 'u', 00H, 'p', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 'r', 00H, 'o', 00H, 'w', 00H, '!', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CMJJAIP@Need?5to?5call?5TableSetupColumn?$CI?$CJ@
CONST	SEGMENT
??_C@_0DC@CMJJAIP@Need?5to?5call?5TableSetupColumn?$CI?$CJ@ DB 'Need to c'
	DB	'all TableSetupColumn() before first row!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA DD 05bbH ; `ImGui::TableSetupScrollFreeze'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1PM@LKIEMPHI@?$AAi?$AAn?$AAi?$AAt?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA_?$AAo?$AAr?$AA_?$AAw@
CONST	SEGMENT
??_C@_1PM@LKIEMPHI@?$AAi?$AAn?$AAi?$AAt?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA_?$AAo?$AAr?$AA_?$AAw@ DB 'i'
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, '_', 00H, 'o', 00H, 'r', 00H, '_'
	DB	00H, 'w', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '0', 00H, '.', 00H, '0'
	DB	00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H
	DB	'C', 00H, 'a', 00H, 'n', 00H, ' ', 00H, 'o', 00H, 'n', 00H, 'l'
	DB	00H, 'y', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H
	DB	'i', 00H, 'f', 00H, 'y', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, '/', 00H, 'w', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, 'i', 00H, 'f', 00H, ' '
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	' ', 00H, 'p', 00H, 'o', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'y'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 's', 00H, 'e', 00H
	DB	't', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'l', 00H, 'i'
	DB	00H, 'c', 00H, 'i', 00H, 't', 00H, 'l', 00H, 'y', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'i', 00H, 't', 00H, 'h'
	DB	00H, 'e', 00H, 'r', 00H, ' ', 00H, 'T', 00H, 'a', 00H, 'b', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'C'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '.', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@GOCDHGH@Can?5only?5specify?5width?1weight?5i@
CONST	SEGMENT
??_C@_0FM@GOCDHGH@Can?5only?5specify?5width?1weight?5i@ DB 'Can only spec'
	DB	'ify width/weight if sizing policy is set explicitly in either'
	DB	' Table or Column.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1LO@INHFIFIG@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAD?$AAe?$AAc?$AAl?$AAC?$AAo?$AAl@
CONST	SEGMENT
??_C@_1LO@INHFIFIG@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAD?$AAe?$AAc?$AAl?$AAC?$AAo?$AAl@ DB '('
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'D', 00H, 'e', 00H, 'c', 00H, 'l', 00H, 'C', 00H, 'o'
	DB	00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n'
	DB	00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'C'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'S', 00H, 'e'
	DB	00H, 't', 00H, 'u', 00H, 'p', 00H, 'C', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'n', 00H, '(', 00H, ')', 00H, ' ', 00H, 't'
	DB	00H, 'o', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'n', 00H
	DB	'y', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 's'
	DB	00H, '!', 00H, '"', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@FPBLGODL@Called?5TableSetupColumn?$CI?$CJ?5too?5m@
CONST	SEGMENT
??_C@_0CK@FPBLGODL@Called?5TableSetupColumn?$CI?$CJ?5too?5m@ DB 'Called T'
	DB	'ableSetupColumn() too many times!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1NM@DDJLAMJK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAT@
CONST	SEGMENT
??_C@_1NM@DDJLAMJK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAT@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'C', 00H
	DB	'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'S', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'u', 00H, 's', 00H, 'M', 00H, 'a', 00H, 's'
	DB	00H, 'k', 00H, '_', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"'
	DB	00H, 'I', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'p', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'u', 00H, 's', 00H, 'M', 00H, 'a', 00H, 's', 00H, 'k'
	DB	00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H
	DB	's', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'T', 00H, 'a'
	DB	00H, 'b', 00H, 'l', 00H, 'e', 00H, 'S', 00H, 'e', 00H, 't', 00H
	DB	'u', 00H, 'p', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm'
	DB	00H, 'n', 00H, '(', 00H, ')', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@CBJAIEBI@Illegal?5to?5pass?5StatusMask?5valu@
CONST	SEGMENT
??_C@_0DI@CBJAIEBI@Illegal?5to?5pass?5StatusMask?5valu@ DB 'Illegal to pa'
	DB	'ss StatusMask values to TableSetupColumn()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LG@IFCOIHC@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@
CONST	SEGMENT
??_C@_1LG@IFCOIHC@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'I', 00H, 's', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'l', 00H, 's', 00H, 'e', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, '"', 00H, 'N', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	'l', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' '
	DB	00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'S', 00H
	DB	'e', 00H, 't', 00H, 'u', 00H, 'p', 00H, 'C', 00H, 'o', 00H, 'l'
	DB	00H, 'u', 00H, 'm', 00H, 'n', 00H, '(', 00H, ')', 00H, ' ', 00H
	DB	'b', 00H, 'e', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'r', 00H, 'o', 00H, 'w', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@KOGIGLHC@Need?5to?5call?5call?5TableSetupCol@
CONST	SEGMENT
??_C@_0DH@KOGIGLHC@Need?5to?5call?5call?5TableSetupCol@ DB 'Need to call '
	DB	'call TableSetupColumn() before first row!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1II@MMHPDEP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
CONST	SEGMENT
??_C@_1II@MMHPDEP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '"', 00H, 'N', 00H, 'e', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, ' ', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, 'u', 00H, 'p', 00H, 'C', 00H, 'o'
	DB	00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, 'a', 00H, 'f', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'B', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'T', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '(', 00H, ')', 00H, '!'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@JMKEADIJ@Need?5to?5call?5TableSetupColumn?$CI?$CJ@
CONST	SEGMENT
??_C@_0DE@JMKEADIJ@Need?5to?5call?5TableSetupColumn?$CI?$CJ@ DB 'Need to '
	DB	'call TableSetupColumn() after BeginTable()!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA DD 0577H ; `ImGui::TableSetupColumn'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DI@LJLDEHIA@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AAS@
CONST	SEGMENT
??_C@_1DI@LJLDEHIA@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AAS@ DB 'g'
	DB	00H, '.', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'I', 00H
	DB	'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@JFMKDCJB@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@
CONST	SEGMENT
??_C@_1HG@JFMKDCJB@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@ DB 'g'
	DB	00H, '.', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'g', 00H, '.', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'T', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@ICPCKIED@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1FM@ICPCKIED@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@ DB '('
	DB	00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' '
	DB	00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H
	DB	'i', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'F'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'S', 00H
	DB	'c', 00H, 'r', 00H, 'o', 00H, 'l', 00H, 'l', 00H, 'X', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1NM@BLFPKGHB@?$AA?$CI?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1NM@BLFPKGHB@?$AA?$CI?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@ DB '('
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-'
	DB	00H, '>', 00H, 'D', 00H, 'C', 00H, '.', 00H, 'I', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h'
	DB	00H, 'S', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '.', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, '_', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'H'
	DB	00H, 'o', 00H, 's', 00H, 't', 00H, 'B', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 'u', 00H, 'p', 00H, 'I', 00H, 't', 00H, 'e', 00H, 'm'
	DB	00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 'S', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'S', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'T', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'n', 00H, 'y', 00H, ' ', 00H, 'P', 00H, 'o', 00H, 'p', 00H
	DB	'I', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'W', 00H, 'i', 00H, 'd'
	DB	00H, 't', 00H, 'h', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GAFFHFPC@Too?5many?5PopItemWidth?$CB@
CONST	SEGMENT
??_C@_0BH@GAFFHFPC@Too?5many?5PopItemWidth?$CB@ DB 'Too many PopItemWidth'
	DB	'!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1MI@BOIHHKDM@?$AA?$CI?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1MI@BOIHHKDM@?$AA?$CI?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@ DB '('
	DB	00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-'
	DB	00H, '>', 00H, 'I', 00H, 'D', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, '.', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k'
	DB	00H, '(', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'I', 00H, 'D', 00H, ' ', 00H, '+', 00H, ' ', 00H, 't', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'I'
	DB	00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H
	DB	'e', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n'
	DB	00H, 't', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'M', 00H, 'i', 00H, 's', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, 'c', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'P', 00H, 'u', 00H, 's', 00H, 'h', 00H, 'I', 00H, 'D', 00H, '/'
	DB	00H, 'P', 00H, 'o', 00H, 'p', 00H, 'I', 00H, 'D', 00H, '!', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MHDEDKFO@Mismatching?5PushID?1PopID?$CB@
CONST	SEGMENT
??_C@_0BK@MHDEDKFO@Mismatching?5PushID?1PopID?$CB@ DB 'Mismatching PushID'
	DB	'/PopID!', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@MJADNMBJ@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAR?$AAo?$AAw?$AAP?$AAo?$AAs?$AAY?$AA2@
CONST	SEGMENT
??_C@_1GA@MJADNMBJ@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAR?$AAo?$AAw?$AAP?$AAo?$AAs?$AAY?$AA2@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'R', 00H, 'o', 00H, 'w', 00H, 'P', 00H, 'o', 00H, 's', 00H, 'Y'
	DB	00H, '2', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H
	DB	'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H, '>', 00H
	DB	'D', 00H, 'C', 00H, '.', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 's'
	DB	00H, 'o', 00H, 'r', 00H, 'P', 00H, 'o', 00H, 's', 00H, '.', 00H
	DB	'y', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JG@DEMMNCCK@?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1JG@DEMMNCCK@?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'w', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, '-', 00H, '>', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 'e'
	DB	00H, 'n', 00H, 't', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@FGAGBNK@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1EA@FGAGBNK@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@ DB 'i'
	DB	00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'g', 00H, '.', 00H, 'C', 00H, 'u', 00H
	DB	'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 'W', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IG@CGOKCKPM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
CONST	SEGMENT
??_C@_1IG@CGOKCKPM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '"', 00H, 'O', 00H, 'n', 00H, 'l', 00H, 'y', 00H, ' ', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, ' ', 00H, 'E', 00H, 'n'
	DB	00H, 'd', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, ' ', 00H, 'i', 00H, 'f', 00H, ' ', 00H, 'B'
	DB	00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, 'T', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, '(', 00H, ')', 00H, ' ', 00H, 'r'
	DB	00H, 'e', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'n', 00H, 's', 00H
	DB	' ', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, '!', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@JFFDACDB@Only?5call?5EndTable?$CI?$CJ?5if?5BeginTa@
CONST	SEGMENT
??_C@_0DD@JFFDACDB@Only?5call?5EndTable?$CI?$CJ?5if?5BeginTa@ DB 'Only ca'
	DB	'll EndTable() if BeginTable() returns true!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA DD 04acH	; `ImGui::EndTable'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@BMHMHKON@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1FC@BMHMHKON@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'R', 00H, 'e', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 0470H ; `ImGui::TableUpdateBorders'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0O@BMOANCPA@?$CD?$CDContextMenu@
CONST	SEGMENT
??_C@_0O@BMOANCPA@?$CD?$CDContextMenu@ DB '##ContextMenu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@PMBHHKFI@?$AA?$CB?$AAi?$AAs?$AA_?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe@
CONST	SEGMENT
??_C@_1BI@PMBHHKFI@?$AA?$CB?$AAi?$AAs?$AA_?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe@ DB '!'
	DB	00H, 'i', 00H, 's', 00H, '_', 00H, 'v', 00H, 'i', 00H, 's', 00H
	DB	'i', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@JKJMNFJF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@
CONST	SEGMENT
??_C@_1JA@JKJMNFJF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'L', 00H, 'e', 00H, 'f', 00H, 't', 00H, 'M', 00H, 'o', 00H, 's'
	DB	00H, 't', 00H, 'E', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, 'd', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm'
	DB	00H, 'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'R', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 'M', 00H, 'o', 00H, 's', 00H, 't'
	DB	00H, 'E', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, 'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@PGNFGMB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAI?$AAn?$AAd?$AAe?$AAx?$AAW?$AAi@
CONST	SEGMENT
??_C@_1GM@PGNFGMB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAI?$AAn?$AAd?$AAe?$AAx?$AAW?$AAi@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '-', 00H
	DB	'>', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'W'
	DB	00H, 'i', 00H, 't', 00H, 'h', 00H, 'i', 00H, 'n', 00H, 'E', 00H
	DB	'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 'S'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, '-'
	DB	00H, '>', 00H, 'D', 00H, 'i', 00H, 's', 00H, 'p', 00H, 'l', 00H
	DB	'a', 00H, 'y', 00H, 'O', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DEAGPPGG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@
CONST	SEGMENT
??_C@_1DO@DEAGPPGG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'I', 00H, 's', 00H, 'L', 00H, 'a', 00H, 'y', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'f', 00H, 'a'
	DB	00H, 'l', 00H, 's', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 02cbH ; `ImGui::TableUpdateLayout'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HC@EONHDNHI@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
CONST	SEGMENT
??_C@_1HC@EONHDNHI@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@ DB 'I'
	DB	00H, 'm', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, 'O', 00H, 'f', 00H, 'T', 00H, 'w', 00H, 'o'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u'
	DB	00H, 'i', 00H, 'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 'F'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'W', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, 'M', 00H, 'a', 00H, 's'
	DB	00H, 'k', 00H, '_', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z@4JA DD 0290H ; `TableSetupColumnFlags'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GI@FDBBNGED@?$AAd?$AAs?$AAt?$AA_?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAD?$AAi?$AAs@
CONST	SEGMENT
??_C@_1GI@FDBBNGED@?$AAd?$AAs?$AAt?$AA_?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAD?$AAi?$AAs@ DB 'd'
	DB	00H, 's', 00H, 't', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'n', 00H, '-', 00H, '>', 00H, 'D', 00H, 'i'
	DB	00H, 's', 00H, 'p', 00H, 'l', 00H, 'a', 00H, 'y', 00H, 'O', 00H
	DB	'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'd', 00H, 's', 00H, 't', 00H, '_', 00H, 'o', 00H
	DB	'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, '-', 00H, ' '
	DB	00H, 'r', 00H, 'e', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@FFJIEHAF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1FG@FFJIEHAF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'F', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'F', 00H, 'l'
	DB	00H, 'a', 00H, 'g', 00H, 's', 00H, '_', 00H, 'R', 00H, 'e', 00H
	DB	'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@CLPKFPLH@?$AAr?$AAe?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAd?$AAi?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1EO@CLPKFPLH@?$AAr?$AAe?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAd?$AAi?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@ DB 'r'
	DB	00H, 'e', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'_', 00H, 'd', 00H, 'i', 00H, 'r', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '-', 00H, '1', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 'o', 00H, 'r', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'r', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '+', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z@4JA DD 024cH ; `ImGui::TableBeginApplyRequests'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BBG@HLLCHCOP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn@
CONST	SEGMENT
??_C@_1BBG@HLLCHCOP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'I', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'W', 00H, 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-', 00H, '>', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'P'
	DB	00H, 'a', 00H, 'd', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H
	DB	'.', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, '.', 00H, '0', 00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-'
	DB	00H, '>', 00H, 'I', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H
	DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, '-'
	DB	00H, '>', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, 'P', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, '.', 00H, 'y', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 't', 00H, 'a', 00H, 'b', 00H, 'l', 00H
	DB	'e', 00H, '-', 00H, '>', 00H, 'I', 00H, 'n', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H
	DB	'w', 00H, '-', 00H, '>', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd'
	DB	00H, 'o', 00H, 'w', 00H, 'B', 00H, 'o', 00H, 'r', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1OO@LHJMPKOL@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AAC@
CONST	SEGMENT
??_C@_1OO@LHJMPKOL@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AAC@ DB 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 'm', 00H, 'n', 00H, 's', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '"', 00H, 'B', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H
	DB	'T', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '(', 00H, ')'
	DB	00H, ':', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'o', 00H, 't', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'm', 00H, 'i', 00H
	DB	'd', 00H, '-', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, ' ', 00H, 'w', 00H, 'h', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, 'v', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 's', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'I', 00H, 'D', 00H, '"'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@HCDJLOKE@BeginTable?$CI?$CJ?3?5Cannot?5change?5col@
CONST	SEGMENT
??_C@_0EN@HCDJLOKE@BeginTable?$CI?$CJ?3?5Cannot?5change?5col@ DB 'BeginTa'
	DB	'ble(): Cannot change columns count mid-frame while preserving'
	DB	' same ID', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@NLGBMAGB@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CI@NLGBMAGB@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5@ DB 'i'
	DB	00H, 'n', 00H, 'n', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'w', 00H
	DB	'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1JE@NJACGDPG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@
CONST	SEGMENT
??_C@_1JE@NJACGDPG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@ DB 'c'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n', 00H, 's', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 'm', 00H, 'n'
	DB	00H, 's', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '6', 00H, '4'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'O', 00H
	DB	'n', 00H, 'l', 00H, 'y', 00H, ' ', 00H, '1', 00H, '.', 00H, '.'
	DB	00H, '6', 00H, '4', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'l', 00H
	DB	'u', 00H, 'm', 00H, 'n', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'w', 00H, 'e', 00H, 'd', 00H, '!', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 't', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, 's', 00H, '.', 00H, 'c', 00H, 'p'
	DB	00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KIFJOLIL@Only?51?4?464?5columns?5allowed?$CB@
CONST	SEGMENT
??_C@_0BM@KIFJOLIL@Only?51?4?464?5columns?5allowed?$CB@ DB 'Only 1..64 co'
	DB	'lumns allowed!', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA DD 0137H ; `ImGui::BeginTableEx'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z DD 035051c01H
	DD	0117331cH
	DD	070100025H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@M@@YAMMMM@Z DD 035052001H
	DD	011b3320H
	DD	07014001fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z DD 035051701H
	DD	01123317H
	DD	0700b002bH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z DD 035051d01H
	DD	0118331dH
	DD	070110043H
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0436H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z DD 035054c19H
	DD	011d3322H
	DD	07016003bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$0 DB 066H ; TableSettingsHandler_ReadLine
	DB	00H
	ORG $+6
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$1 DB 063H ; TableSettingsHandler_ReadLine
	DB	06fH
	DB	06cH
	DB	075H
	DB	06dH
	DB	06eH
	DB	05fH
	DB	06eH
	DB	00H
	ORG $+3
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$2 DB 072H ; TableSettingsHandler_ReadLine
	DB	00H
	ORG $+2
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$3 DB 06eH ; TableSettingsHandler_ReadLine
	DB	00H
	ORG $+2
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$4 DB 063H ; TableSettingsHandler_ReadLine
	DB	00H
	ORG $+2
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcVarDesc DD 0d4H ; TableSettingsHandler_ReadLine
	DD	01H
	DQ	FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$4
	DD	0b4H
	DD	04H
	DQ	FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$3
	DD	094H
	DD	04H
	DQ	FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$2
	DD	074H
	DD	04H
	DQ	FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcName$0
	ORG $+240
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcFrameData DD 05H ; TableSettingsHandler_ReadLine
	DD	00H
	DQ	FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	040H
	DB	0f1H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z DD 025054719H
	DD	0118231dH
	DD	070110029H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcName$0 DB 069H ; TableSettingsHandler_ReadOpen
	DB	064H
	DB	00H
	ORG $+5
?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcName$1 DB 063H ; TableSettingsHandler_ReadOpen
	DB	06fH
	DB	06cH
	DB	075H
	DB	06dH
	DB	06eH
	DB	073H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+10
?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcVarDesc DD 044H ; TableSettingsHandler_ReadOpen
	DD	04H
	DQ	FLAT:?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcName$0
	ORG $+96
?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcFrameData DD 02H ; TableSettingsHandler_ReadOpen
	DD	00H
	DQ	FLAT:?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsCalcChunkSize@@YA_KH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z DB 0aH
	DB	00H
	DB	00H
	DB	0baH
	DB	02H
	DB	'p'
	DB	00H
	DB	0caH
	DB	04H
	DB	'p'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA
	DB	036H
	DD	imagerel ?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z DB 028H
	DD	imagerel $stateUnwindMap$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z
	DD	imagerel $ip2state$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z DD 025052111H
	DD	011c2321H
	DD	070150045H
	DD	05014H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@C@@YACCC@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImBitArray@$0IE@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@C@@YAXAEAC0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@M@@YAMMMM@Z DD 035052001H
	DD	011b3320H
	DD	070140021H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z DD 025051d01H
	DD	0118231dH
	DD	070110033H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z DD 025052101H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImSpanAllocator@$02@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z DD 055051301H
	DD	010e5313H
	DD	070070033H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03cH
	DW	0cfdH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z DD 0f5054319H
	DD	010ef316H
	DD	07007010dH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0858H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0 DB 062H ; ImGui::DebugNodeTable
	DB	075H
	DB	066H
	DB	00H
?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1 DB 072H ; ImGui::DebugNodeTable
	DB	00H
	ORG $+10
?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc DD 0498H ; ImGui::DebugNodeTable
	DD	010H
	DQ	FLAT:?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1
	DD	0140H
	DD	0200H
	DQ	FLAT:?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0
	ORG $+96
?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData DD 02H ; ImGui::DebugNodeTable
	DD	00H
	DQ	FLAT:?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z DD 025051201H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z DD 025051601H
	DD	01112316H
	DD	0700a0025H
	DD	05009H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	036H
	DB	0e4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z DD 025053d19H
	DD	010e2313H
	DD	070070031H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0170H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z$rtcName$0 DB 069H ; ImGui::TableSettingsInstallHandler
	DB	06eH
	DB	069H
	DB	05fH
	DB	068H
	DB	061H
	DB	06eH
	DB	064H
	DB	06cH
	DB	065H
	DB	072H
	DB	00H
	ORG $+4
?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z$rtcVarDesc DD 050H ; ImGui::TableSettingsInstallHandler
	DD	048H
	DQ	FLAT:?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z$rtcName$0
	ORG $+48
?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z$rtcFrameData DD 01H ; ImGui::TableSettingsInstallHandler
	DD	00H
	DQ	FLAT:?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070039H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070047H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	01c9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?TableGcCompactSettings@ImGui@@YAXXZ DB 06H
	DB	00H
	DB	00H
	DB	'Y', 03H
	DB	02H
	DB	'i', 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?TableGcCompactSettings@ImGui@@YAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?TableGcCompactSettings@ImGui@@YAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?TableGcCompactSettings@ImGui@@YAXXZ
	DD	imagerel $ip2state$?TableGcCompactSettings@ImGui@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGcCompactSettings@ImGui@@YAXXZ DD 025063219H
	DD	010b2310H
	DD	070040034H
	DD	050026003H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?TableGcCompactSettings@ImGui@@YAXXZ
	DD	0192H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableGcCompactSettings@ImGui@@YAXXZ$rtcName$0 DB 06eH	; ImGui::TableGcCompactSettings
	DB	065H
	DB	077H
	DB	05fH
	DB	063H
	DB	068H
	DB	075H
	DB	06eH
	DB	06bH
	DB	05fH
	DB	073H
	DB	074H
	DB	072H
	DB	065H
	DB	061H
	DB	06dH
	DB	00H
	ORG $+15
?TableGcCompactSettings@ImGui@@YAXXZ$rtcVarDesc DD 088H	; ImGui::TableGcCompactSettings
	DD	010H
	DQ	FLAT:?TableGcCompactSettings@ImGui@@YAXXZ$rtcName$0
	ORG $+48
?TableGcCompactSettings@ImGui@@YAXXZ$rtcFrameData DD 01H ; ImGui::TableGcCompactSettings
	DD	00H
	DQ	FLAT:?TableGcCompactSettings@ImGui@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z DD 035051701H
	DD	01123317H
	DD	0700b002bH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z DD 025051c01H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z DD 035051d01H
	DD	0118331dH
	DD	07011002bH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b002dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0d6aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z DD 035063e19H
	DD	010f3314H
	DD	0700800d2H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0688H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0 DB 072H ; ImGui::TableEndRow
	DB	06fH
	DB	077H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+7
?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1 DB 063H ; ImGui::TableEndRow
	DB	065H
	DB	06cH
	DB	06cH
	DB	05fH
	DB	062H
	DB	067H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+3
?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc DD 0268H ; ImGui::TableEndRow
	DD	010H
	DQ	FLAT:?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1
	DD	01d8H
	DD	010H
	DQ	FLAT:?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0
	ORG $+96
?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData DD 02H ; ImGui::TableEndRow
	DD	00H
	DQ	FLAT:?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z DD 035051801H
	DD	01133318H
	DD	0700c002bH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070033H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070053H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0b6eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z DD 035063e19H
	DD	010f3314H
	DD	0700800fcH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	07d8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0 DB 06dH ; ImGui::TableMergeDrawChannels
	DB	065H
	DB	072H
	DB	067H
	DB	065H
	DB	05fH
	DB	067H
	DB	072H
	DB	06fH
	DB	075H
	DB	070H
	DB	073H
	DB	00H
	ORG $+3
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1 DB 072H ; ImGui::TableMergeDrawChannels
	DB	065H
	DB	06dH
	DB	061H
	DB	069H
	DB	06eH
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	06dH
	DB	061H
	DB	073H
	DB	06bH
	DB	00H
	ORG $+1
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$2 DB 068H ; ImGui::TableMergeDrawChannels
	DB	06fH
	DB	073H
	DB	074H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$3 DB 06dH ; ImGui::TableMergeDrawChannels
	DB	065H
	DB	072H
	DB	067H
	DB	065H
	DB	05fH
	DB	063H
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc DD 03d8H ; ImGui::TableMergeDrawChannels
	DD	010H
	DQ	FLAT:?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$3
	DD	0348H
	DD	010H
	DQ	FLAT:?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$2
	DD	02f8H
	DD	014H
	DQ	FLAT:?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1
	DD	0e0H
	DD	0a0H
	DQ	FLAT:?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0
	ORG $+192
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData DD 04H ; ImGui::TableMergeDrawChannels
	DD	00H
	DQ	FLAT:?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	07007004bH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0913H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z DD 045063e19H
	DD	010f4314H
	DD	0700800a4H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0518H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0 DB 06fH ; ImGui::TableDrawBorders
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	062H
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+3
?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc DD 0228H ; ImGui::TableDrawBorders
	DD	010H
	DQ	FLAT:?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0
	ORG $+48
?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData DD 01H ; ImGui::TableDrawBorders
	DD	00H
	DQ	FLAT:?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	070070035H
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0485H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z DD 035053d19H
	DD	010e3313H
	DD	07007005bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	02c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0 DB 068H ; ImGui::TableUpdateBorders
	DB	069H
	DB	074H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+7
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1 DB 068H ; ImGui::TableUpdateBorders
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$2 DB 068H ; ImGui::TableUpdateBorders
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc DD 01c4H ; ImGui::TableUpdateBorders
	DD	01H
	DQ	FLAT:?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$2
	DD	01a4H
	DD	01H
	DQ	FLAT:?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1
	DD	0178H
	DD	010H
	DQ	FLAT:?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0
	ORG $+144
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData DD 03H ; ImGui::TableUpdateBorders
	DD	00H
	DQ	FLAT:?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	01e7eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z DD 035063e19H
	DD	010f3314H
	DD	070080106H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0828H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0 DB 077H ; ImGui::TableUpdateLayout
	DB	06fH
	DB	072H
	DB	06bH
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1 DB 06dH ; ImGui::TableUpdateLayout
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	068H
	DB	069H
	DB	074H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+1
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$2 DB 068H ; ImGui::TableUpdateLayout
	DB	06fH
	DB	073H
	DB	074H
	DB	05fH
	DB	063H
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+1
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc DD 04b8H ; ImGui::TableUpdateLayout
	DD	010H
	DQ	FLAT:?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$2
	DD	0408H
	DD	010H
	DQ	FLAT:?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$1
	DD	02b8H
	DD	010H
	DQ	FLAT:?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcName$0
	ORG $+144
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData DD 03H ; ImGui::TableUpdateLayout
	DD	00H
	DQ	FLAT:?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z DD 025061401H
	DD	010f2314H
	DD	07008003cH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z DD 025051301H
	DD	010e2313H
	DD	07007003fH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03aH
	DW	0170H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z DD 025054119H
	DD	01122317H
	DD	0700b0027H
	DD	0500aH
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z$rtcName$0 DB 073H ; ImGui::TableBeginInitMemory
	DB	070H
	DB	061H
	DB	06eH
	DB	05fH
	DB	061H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	074H
	DB	06fH
	DB	072H
	DB	00H
	ORG $+1
?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z$rtcVarDesc DD 028H ; ImGui::TableBeginInitMemory
	DD	028H
	DQ	FLAT:?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z$rtcName$0
	ORG $+48
?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z$rtcFrameData DD 01H ; ImGui::TableBeginInitMemory
	DD	00H
	DQ	FLAT:?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	014c0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 0eH
	DB	02H
	DB	't'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z DB 028H
	DD	imagerel $stateUnwindMap$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z
	DD	imagerel $ip2state$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z DD 035064c19H
	DD	011d3322H
	DD	070160132H
	DD	050146015H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z
	DD	0982H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$0 DB 061H ; ImGui::BeginTableEx
	DB	076H
	DB	061H
	DB	069H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$1 DB 061H ; ImGui::BeginTableEx
	DB	063H
	DB	074H
	DB	075H
	DB	061H
	DB	06cH
	DB	05fH
	DB	06fH
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$2 DB 06fH ; ImGui::BeginTableEx
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+5
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$3 DB 06fH ; ImGui::BeginTableEx
	DB	076H
	DB	065H
	DB	072H
	DB	072H
	DB	069H
	DB	064H
	DB	065H
	DB	05fH
	DB	063H
	DB	06fH
	DB	06eH
	DB	074H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcVarDesc DD 01c8H ; ImGui::BeginTableEx
	DD	08H
	DQ	FLAT:?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$3
	DD	0d8H
	DD	010H
	DQ	FLAT:?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$2
	DD	0b8H
	DD	08H
	DQ	FLAT:?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$1
	DD	098H
	DD	08H
	DQ	FLAT:?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcName$0
	ORG $+192
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcFrameData DD 04H ; ImGui::BeginTableEx
	DD	00H
	DQ	FLAT:?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z DD 025051201H
	DD	010d2312H
	DD	070060021H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TablePopBackgroundChannel@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003002dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TablePushBackgroundChannel@ImGui@@YAXXZ DD 025061001H
	DD	010b2310H
	DD	070040028H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetHeaderRowHeight@ImGui@@YAMXZ DD 045050f01H
	DD	010a430fH
	DD	070030035H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetHoveredColumn@ImGui@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z DD 025051b01H
	DD	0116231bH
	DD	0700f0039H
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetColumnWidth@ImGui@@YAXHM@Z DD 025051801H
	DD	01132318H
	DD	0700c003fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableOpenContextMenu@ImGui@@YAXH@Z DD 025051201H
	DD	010d2312H
	DD	070060029H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z DD 035051901H
	DD	01143319H
	DD	0700d001fH
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z DD 035051901H
	DD	01143319H
	DD	0700d001fH
	DD	0500cH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z DB 06H
	DB	00H
	DB	00H
	DB	'I', 03H
	DB	02H
	DB	'('
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z DB 028H
	DD	imagerel $stateUnwindMap$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z
	DD	imagerel $ip2state$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z DD 025051711H
	DD	01122317H
	DD	0700b003bH
	DD	0500aH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnsID@ImGui@@YAIPEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PopColumnsBackground@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushColumnsBackground@ImGui@@YAXXZ DD 025061001H
	DD	010b2310H
	DD	070040024H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushColumnClipRect@ImGui@@YAXH@Z DD 025051201H
	DD	010d2312H
	DD	070060029H
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	05faH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndColumns@ImGui@@YAXXZ DD 035063219H
	DD	010b3310H
	DD	07004009cH
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	04d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?EndColumns@ImGui@@YAXXZ$rtcName$0 DB 063H		; ImGui::EndColumns
	DB	06fH
	DB	06cH
	DB	075H
	DB	06dH
	DB	06eH
	DB	05fH
	DB	068H
	DB	069H
	DB	074H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
?EndColumns@ImGui@@YAXXZ$rtcName$1 DB 068H		; ImGui::EndColumns
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?EndColumns@ImGui@@YAXXZ$rtcName$2 DB 068H		; ImGui::EndColumns
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?EndColumns@ImGui@@YAXXZ$rtcVarDesc DD 0224H		; ImGui::EndColumns
	DD	01H
	DQ	FLAT:?EndColumns@ImGui@@YAXXZ$rtcName$2
	DD	0204H
	DD	01H
	DQ	FLAT:?EndColumns@ImGui@@YAXXZ$rtcName$1
	DD	01d8H
	DD	010H
	DQ	FLAT:?EndColumns@ImGui@@YAXXZ$rtcName$0
	ORG $+144
?EndColumns@ImGui@@YAXXZ$rtcFrameData DD 03H		; ImGui::EndColumns
	DD	00H
	DQ	FLAT:?EndColumns@ImGui@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0705H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginColumns@ImGui@@YAXPEBDHH@Z DD 035064719H
	DD	0118331dH
	DD	070110086H
	DD	0500f6010H
	DD	imagerel __GSHandlerCheck
	DD	0420H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BeginColumns@ImGui@@YAXPEBDHH@Z$rtcName$0 DB 063H	; ImGui::BeginColumns
	DB	06fH
	DB	06cH
	DB	075H
	DB	06dH
	DB	06eH
	DB	00H
	ORG $+9
?BeginColumns@ImGui@@YAXPEBDHH@Z$rtcVarDesc DD 0158H	; ImGui::BeginColumns
	DD	01cH
	DQ	FLAT:?BeginColumns@ImGui@@YAXPEBDHH@Z$rtcName$0
	ORG $+48
?BeginColumns@ImGui@@YAXPEBDHH@Z$rtcFrameData DD 01H	; ImGui::BeginColumns
	DD	00H
	DQ	FLAT:?BeginColumns@ImGui@@YAXPEBDHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	03cH
	DB	0ecH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z DD 025064319H
	DD	01142319H
	DD	0700d0022H
	DD	0500b600cH
	DD	imagerel __GSHandlerCheck
	DD	0108H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z$rtcName$0 DB 063H ; ImGui::SetWindowClipRectBeforeSetChannel
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	05fH
	DB	076H
	DB	065H
	DB	063H
	DB	034H
	DB	00H
	ORG $+1
?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z$rtcVarDesc DD 028H ; ImGui::SetWindowClipRectBeforeSetChannel
	DD	010H
	DQ	FLAT:?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z$rtcName$0
	ORG $+48
?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z$rtcFrameData DD 01H ; ImGui::SetWindowClipRectBeforeSetChannel
	DD	00H
	DQ	FLAT:?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTableSettings@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTableColumnSettings@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImGuiTableTempData@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImGuiTableTempData@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	08cH
	DB	02H
	DB	'Y', 02H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImGuiTableTempData@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImGuiTableTempData@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImGuiTableTempData@@QEAA@XZ
	DD	imagerel $ip2state$??0ImGuiTableTempData@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTableTempData@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImGuiTableTempData@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GImGuiTable@@QEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ImGuiTable@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1ImGuiTable@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1ImGuiTable@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImGuiTable@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1ImGuiTable@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImGuiTable@@QEAA@XZ DB 08H
	DB	00H
	DB	00H
	DB	0adH, 04H
	DB	02H
	DB	'V'
	DB	04H
	DB	'f'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImGuiTable@@QEAA@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImGuiTable@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImGuiTable@@QEAA@XZ
	DD	imagerel $ip2state$??0ImGuiTable@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTable@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImGuiTable@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImSpan@C@@QEAAAEACH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set@?$ImSpan@C@@QEAAXPEAC0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImSpan@C@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTableColumn@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ DD 035051801H
	DD	01133318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z DD 025061d01H
	DD	0118231dH
	DD	070110020H
	DD	0500f6010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z DD 025051c01H
	DD	0117231cH
	DD	07010001fH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ DB 06H
	DB	00H
	DB	00H
	DB	0d9H, 03H
	DB	02H
	DB	'p'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ DB 028H
	DD	imagerel $stateUnwindMap$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ
	DD	imagerel $ip2state$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ DD 025051311H
	DD	010e2313H
	DD	070070037H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z DD 025051701H
	DD	01122317H
	DD	0700b0023H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiSettingsHandler@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImGuiOldColumns@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImGuiOldColumns@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	0d8H
	DB	02H
	DB	'F'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImGuiOldColumns@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImGuiOldColumns@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImGuiOldColumns@@QEAA@XZ
	DD	imagerel $ip2state$??0ImGuiOldColumns@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiOldColumns@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImGuiOldColumns@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiOldColumnData@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@H@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArraySetBitRange@@YAXPEAIHH@Z DD 025051c01H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArraySetBit@@YAXPEAIH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArrayClearBit@@YAXPEAIH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArrayTestBit@@YA_NPEBIH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ToVec4@ImRect@@QEBA?AUImVec4@@XZ DD 035031401H
	DD	0d20f3314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClipWithFull@ImRect@@QEAAXAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClipWith@ImRect@@QEAAXAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Add@ImRect@@QEAAXAEBU1@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Overlaps@ImRect@@QEBA_NAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Contains@ImRect@@QEBA_NAEBU1@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetHeight@ImRect@@QEBAMXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetWidth@ImRect@@QEBAMXZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetSize@ImRect@@QEBA?AUImVec2@@XZ DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@MMMM@Z DD 025032101H
	DD	0d21c2321H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@AEBUImVec4@@@Z DD 025031401H
	DD	0d20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@AEBUImVec2@@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImRect@@QEAA@XZ DD 025030f01H
	DD	0d20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec1@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@M@@YAMMM@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@M@@YAMMM@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloor@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z DD 025031e01H
	DD	0d219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??H@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImIsPowerOfTwo@@YA_NH@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	09fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sscanf DD 025054c19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sscanf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sscanf$rtcVarDesc DD 048H
	DD	08H
	DQ	FLAT:sscanf$rtcName$0
	ORG $+48
sscanf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sscanf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsscanf_l DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_scanf_options DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@M@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@M@@QEAAXHAEBM@Z DD 025051c01H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@M@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@M@@QEAAAEAMH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@I@@QEAAAEAIXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImDrawListSplitter@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ImDrawListSplitter@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1ImDrawListSplitter@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1ImDrawListSplitter@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImDrawListSplitter@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1ImDrawListSplitter@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawListSplitter@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImDrawChannel@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImGuiTextBuffer@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@ImGuiTextBuffer@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@ImGuiTextBuffer@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size@ImGuiTextBuffer@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTextBuffer@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@D@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@D@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@D@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$ImVector@D@@QEAAXAEAU1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@D@@QEBAAEBDH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@D@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@D@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@D@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@D@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@D@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@D@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@D@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTableSortSpecs@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImGuiTableColumnSortSpecs@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??3@YAXPEAXUImNewWrapper@@0@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnsCount@ImGui@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetColumnOffset@ImGui@@YAXHM@Z DD 025051801H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnOffset@ImGui@@YAMH@Z DD 035051201H
	DD	010d3312H
	DD	07006002fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetColumnWidth@ImGui@@YAXHM@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnWidth@ImGui@@YAMH@Z DD 035051201H
	DD	010d3312H
	DD	070060031H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetColumnIndex@ImGui@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030021H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?NextColumn@ImGui@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	070030041H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Columns@ImGui@@YAXHPEBD_N@Z DD 025051c01H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetBgColor@ImGui@@YAXHIH@Z DD 025051b01H
	DD	0116231bH
	DD	0700f002dH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetColumnEnabled@ImGui@@YAXH_N@Z DD 025051601H
	DD	01112316H
	DD	0700a0029H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnFlags@ImGui@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnName@ImGui@@YAPEBDH@Z DD 025051201H
	DD	010d2312H
	DD	070060025H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetRowIndex@ImGui@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnIndex@ImGui@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetColumnCount@ImGui@@YAHXZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ DD 025050f01H
	DD	010a230fH
	DD	070030025H
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	0c5dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableHeader@ImGui@@YAXPEBD@Z DD 045053d19H
	DD	010e4313H
	DD	0700700e7H
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	0728H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$0 DB 06cH		; ImGui::TableHeader
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+5
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$1 DB 06cH		; ImGui::TableHeader
	DB	061H
	DB	062H
	DB	065H
	DB	06cH
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+2
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$2 DB 063H		; ImGui::TableHeader
	DB	065H
	DB	06cH
	DB	06cH
	DB	05fH
	DB	072H
	DB	00H
	ORG $+1
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$4 DB 062H		; ImGui::TableHeader
	DB	062H
	DB	00H
	ORG $+1
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$3 DB 073H		; ImGui::TableHeader
	DB	06fH
	DB	072H
	DB	074H
	DB	05fH
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	05fH
	DB	073H
	DB	075H
	DB	066H
	DB	00H
	ORG $+1
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$5 DB 068H		; ImGui::TableHeader
	DB	06fH
	DB	076H
	DB	065H
	DB	072H
	DB	065H
	DB	064H
	DB	00H
?TableHeader@ImGui@@YAXPEBD@Z$rtcName$6 DB 068H		; ImGui::TableHeader
	DB	065H
	DB	06cH
	DB	064H
	DB	00H
	ORG $+3
?TableHeader@ImGui@@YAXPEBD@Z$rtcFrameData DD 07H	; ImGui::TableHeader
	DD	00H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcVarDesc
	ORG $+8
?TableHeader@ImGui@@YAXPEBD@Z$rtcVarDesc DD 02c4H	; ImGui::TableHeader
	DD	01H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$6
	DD	02a4H
	DD	01H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$5
	DD	0278H
	DD	010H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$4
	DD	01d4H
	DD	04H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$3
	DD	0148H
	DD	010H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$2
	DD	0128H
	DD	08H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$1
	DD	0108H
	DD	08H
	DQ	FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02aH
	DW	0211H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableHeadersRow@ImGui@@YAXXZ DD 025053119H
	DD	010a230fH
	DD	070030043H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	0200H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?TableHeadersRow@ImGui@@YAXXZ$rtcName$0 DB 06dH		; ImGui::TableHeadersRow
	DB	06fH
	DB	075H
	DB	073H
	DB	065H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+6
?TableHeadersRow@ImGui@@YAXXZ$rtcVarDesc DD 0108H	; ImGui::TableHeadersRow
	DD	08H
	DQ	FLAT:?TableHeadersRow@ImGui@@YAXXZ$rtcName$0
	ORG $+48
?TableHeadersRow@ImGui@@YAXXZ$rtcFrameData DD 01H	; ImGui::TableHeadersRow
	DD	00H
	DQ	FLAT:?TableHeadersRow@ImGui@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetupScrollFreeze@ImGui@@YAXHH@Z DD 025051601H
	DD	01112316H
	DD	0700a0033H
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetupColumn@ImGui@@YAXPEBDHMI@Z DD 025052201H
	DD	011d2322H
	DD	07016002bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableSetColumnIndex@ImGui@@YA_NH@Z DD 025051201H
	DD	010d2312H
	DD	070060027H
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableNextColumn@ImGui@@YA_NXZ DD 025050f01H
	DD	010a230fH
	DD	07003002bH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TableNextRow@ImGui@@YAXHM@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	02bH
	DW	0f77H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?EndTable@ImGui@@YAXXZ DD 025063219H
	DD	010b2310H
	DD	070040094H
	DD	050026003H
	DD	imagerel __GSHandlerCheck
	DD	0498H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?EndTable@ImGui@@YAXXZ$rtcName$0 DB 062H		; ImGui::EndTable
	DB	061H
	DB	063H
	DB	06bH
	DB	075H
	DB	070H
	DB	05fH
	DB	06fH
	DB	075H
	DB	074H
	DB	065H
	DB	072H
	DB	05fH
	DB	06dH
	DB	061H
	DB	078H
	DB	05fH
	DB	070H
	DB	06fH
	DB	073H
	DB	00H
	ORG $+11
?EndTable@ImGui@@YAXXZ$rtcVarDesc DD 0268H		; ImGui::EndTable
	DD	08H
	DQ	FLAT:?EndTable@ImGui@@YAXXZ$rtcName$0
	ORG $+48
?EndTable@ImGui@@YAXXZ$rtcFrameData DD 01H		; ImGui::EndTable
	DD	00H
	DQ	FLAT:?EndTable@ImGui@@YAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z DD 035052101H
	DD	011c3321H
	DD	070150023H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@MMMM@Z DD 025032101H
	DD	0b21c2321H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 025031b01H
	DD	0b216231bH
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z
_TEXT	SEGMENT
offset_norm$ = 4
tv90 = 216
tv74 = 216
tv129 = 224
tv81 = 224
tv94 = 232
tv78 = 232
columns$ = 272
column_index$ = 280
before_resize$ = 288
?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z PROC	; GetColumnWidthEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3699
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3700
	cmp	DWORD PTR column_index$[rbp], 0
	jge	SHORT $LN2@GetColumnW
; Line 3701
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR column_index$[rbp], eax
$LN2@GetColumnW:
; Line 3704
	movzx	eax, BYTE PTR before_resize$[rbp]
	test	eax, eax
	je	SHORT $LN3@GetColumnW
; Line 3705
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv74[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv81[rbp], rax
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR tv81[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR tv78[rbp], rax
	mov	ecx, DWORD PTR column_index$[rbp]
	inc	ecx
	mov	edx, ecx
	mov	rcx, QWORD PTR tv74[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR tv78[rbp]
	subss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR offset_norm$[rbp], xmm0
	jmp	SHORT $LN4@GetColumnW
$LN3@GetColumnW:
; Line 3707
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv90[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv129[rbp], rax
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR tv129[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR tv94[rbp], rax
	mov	ecx, DWORD PTR column_index$[rbp]
	inc	ecx
	mov	edx, ecx
	mov	rcx, QWORD PTR tv90[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv94[rbp]
	subss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR offset_norm$[rbp], xmm0
$LN4@GetColumnW:
; Line 3708
	movss	xmm1, DWORD PTR offset_norm$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	call	?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ; ImGui::GetColumnOffsetFromNorm
; Line 3709
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z ENDP	; GetColumnWidthEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@M@@YAMMMM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@M@@YAMMMM@Z PROC				; ImLerp<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR b$[rbp]
	subss	xmm0, DWORD PTR a$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	xmm1, DWORD PTR a$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@M@@YAMMMM@Z ENDP				; ImLerp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
x$ = 68
columns$ = 320
column_index$ = 328
?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z PROC ; GetDraggedColumnOffset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3666
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3669
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3670
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 3671
	cmp	DWORD PTR column_index$[rbp], 0
	jg	SHORT $LN4@GetDragged
	mov	eax, DWORD PTR ?__LINE__Var@?0??GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@HNMGCLDB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GetDragged:
; Line 3672
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rcx+7260], eax
	je	SHORT $LN5@GetDragged
	mov	eax, DWORD PTR ?__LINE__Var@?0??GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GE@CFLLPKGA@?$AAg?$AA?4?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe?$AAI?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@GetDragged:
; Line 3674
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	subss	xmm0, DWORD PTR [rcx+7296]
	addss	xmm0, DWORD PTR __real@40800000
	mov	rax, QWORD PTR window$[rbp]
	subss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR x$[rbp], xmm0
; Line 3675
	mov	eax, DWORD PTR column_index$[rbp]
	dec	eax
	mov	ecx, eax
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	mov	rax, QWORD PTR g$[rbp]
	addss	xmm0, DWORD PTR [rax+5580]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR x$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR x$[rbp], xmm0
; Line 3676
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN2@GetDragged
; Line 3677
	mov	eax, DWORD PTR column_index$[rbp]
	inc	eax
	mov	ecx, eax
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	mov	rax, QWORD PTR g$[rbp]
	subss	xmm0, DWORD PTR [rax+5580]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR x$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR x$[rbp], xmm0
$LN2@GetDragged:
; Line 3679
	movss	xmm0, DWORD PTR x$[rbp]
; Line 3680
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z ENDP ; GetDraggedColumnOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z
_TEXT	SEGMENT
sizing_policy$ = 224
?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z PROC	; DebugNodeTableGetSizingPolicyDesc, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3508
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3509
	mov	eax, DWORD PTR sizing_policy$[rbp]
	and	eax, 57344				; 0000e000H
	mov	DWORD PTR sizing_policy$[rbp], eax
; Line 3510
	cmp	DWORD PTR sizing_policy$[rbp], 8192	; 00002000H
	jne	SHORT $LN2@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_08CCPMLANI@FixedFit@
	jmp	SHORT $LN1@DebugNodeT
$LN2@DebugNodeT:
; Line 3511
	cmp	DWORD PTR sizing_policy$[rbp], 16384	; 00004000H
	jne	SHORT $LN3@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_09OOODJBFG@FixedSame@
	jmp	SHORT $LN1@DebugNodeT
$LN3@DebugNodeT:
; Line 3512
	cmp	DWORD PTR sizing_policy$[rbp], 24576	; 00006000H
	jne	SHORT $LN4@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_0M@IGAOBHEB@StretchProp@
	jmp	SHORT $LN1@DebugNodeT
$LN4@DebugNodeT:
; Line 3513
	cmp	DWORD PTR sizing_policy$[rbp], 32768	; 00008000H
	jne	SHORT $LN5@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_0M@LHDDKHJK@StretchSame@
	jmp	SHORT $LN1@DebugNodeT
$LN5@DebugNodeT:
; Line 3514
	lea	rax, OFFSET FLAT:??_C@_03HPADHAHE@N?1A@
$LN1@DebugNodeT:
; Line 3515
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z ENDP	; DebugNodeTableGetSizingPolicyDesc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z
_TEXT	SEGMENT
g$ = 8
settings$1 = 40
save_size$2 = 68
save_visible$3 = 100
save_order$4 = 132
save_sort$5 = 164
column$6 = 200
column_n$7 = 228
save_column$8 = 260
tv240 = 468
tv177 = 468
tv91 = 468
tv87 = 468
tv83 = 468
tv79 = 468
tv72 = 472
ctx$ = 512
handler$ = 520
buf$ = 528
?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z PROC ; TableSettingsHandler_WriteAll, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3384
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3385
	mov	rax, QWORD PTR ctx$[rbp]
	mov	QWORD PTR g$[rbp], rax
; Line 3386
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	rcx, rax
	call	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
	mov	QWORD PTR settings$1[rbp], rax
	jmp	SHORT $LN4@TableSetti
$LN2@TableSetti:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv72[rbp], rax
	mov	rdx, QWORD PTR settings$1[rbp]
	mov	rcx, QWORD PTR tv72[rbp]
	call	?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z ; ImChunkStream<ImGuiTableSettings>::next_chunk
	mov	QWORD PTR settings$1[rbp], rax
$LN4@TableSetti:
	cmp	QWORD PTR settings$1[rbp], 0
	je	$LN3@TableSetti
; Line 3388
	mov	rax, QWORD PTR settings$1[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN8@TableSetti
; Line 3389
	jmp	SHORT $LN2@TableSetti
$LN8@TableSetti:
; Line 3393
	mov	rax, QWORD PTR settings$1[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN19@TableSetti
	mov	BYTE PTR tv79[rbp], 1
	jmp	SHORT $LN20@TableSetti
$LN19@TableSetti:
	mov	BYTE PTR tv79[rbp], 0
$LN20@TableSetti:
	movzx	eax, BYTE PTR tv79[rbp]
	mov	BYTE PTR save_size$2[rbp], al
; Line 3394
	mov	rax, QWORD PTR settings$1[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN21@TableSetti
	mov	BYTE PTR tv83[rbp], 1
	jmp	SHORT $LN22@TableSetti
$LN21@TableSetti:
	mov	BYTE PTR tv83[rbp], 0
$LN22@TableSetti:
	movzx	eax, BYTE PTR tv83[rbp]
	mov	BYTE PTR save_visible$3[rbp], al
; Line 3395
	mov	rax, QWORD PTR settings$1[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN23@TableSetti
	mov	BYTE PTR tv87[rbp], 1
	jmp	SHORT $LN24@TableSetti
$LN23@TableSetti:
	mov	BYTE PTR tv87[rbp], 0
$LN24@TableSetti:
	movzx	eax, BYTE PTR tv87[rbp]
	mov	BYTE PTR save_order$4[rbp], al
; Line 3396
	mov	rax, QWORD PTR settings$1[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN25@TableSetti
	mov	BYTE PTR tv91[rbp], 1
	jmp	SHORT $LN26@TableSetti
$LN25@TableSetti:
	mov	BYTE PTR tv91[rbp], 0
$LN26@TableSetti:
	movzx	eax, BYTE PTR tv91[rbp]
	mov	BYTE PTR save_sort$5[rbp], al
; Line 3397
	movzx	eax, BYTE PTR save_size$2[rbp]
	test	eax, eax
	jne	SHORT $LN9@TableSetti
	movzx	eax, BYTE PTR save_visible$3[rbp]
	test	eax, eax
	jne	SHORT $LN9@TableSetti
	movzx	eax, BYTE PTR save_order$4[rbp]
	test	eax, eax
	jne	SHORT $LN9@TableSetti
	movzx	eax, BYTE PTR save_sort$5[rbp]
	test	eax, eax
	jne	SHORT $LN9@TableSetti
; Line 3398
	jmp	$LN2@TableSetti
$LN9@TableSetti:
; Line 3400
	mov	rcx, QWORD PTR buf$[rbp]
	call	?size@ImGuiTextBuffer@@QEBAHXZ		; ImGuiTextBuffer::size
	mov	rcx, QWORD PTR settings$1[rbp]
	movsx	ecx, BYTE PTR [rcx+12]
	imul	ecx, ecx, 50				; 00000032H
	lea	eax, DWORD PTR [rax+rcx+30]
	mov	edx, eax
	mov	rcx, QWORD PTR buf$[rbp]
	call	?reserve@ImGuiTextBuffer@@QEAAXH@Z	; ImGuiTextBuffer::reserve
; Line 3401
	mov	rax, QWORD PTR settings$1[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR settings$1[rbp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR handler$[rbp]
	mov	r8, QWORD PTR [rax]
	lea	rdx, OFFSET FLAT:??_C@_0BB@PGHPBJD@?$FL?$CFs?$FN?$FL0x?$CF08X?0?$CFd?$FN?6@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
; Line 3402
	mov	rax, QWORD PTR settings$1[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN32@TableSetti
	je	SHORT $LN10@TableSetti
$LN32@TableSetti:
; Line 3403
	mov	rax, QWORD PTR settings$1[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+8]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	lea	rdx, OFFSET FLAT:??_C@_0N@NHEEPCEH@RefScale?$DN?$CFg?6@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN10@TableSetti:
; Line 3404
	mov	rcx, QWORD PTR settings$1[rbp]
	call	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
	mov	QWORD PTR column$6[rbp], rax
; Line 3405
	mov	DWORD PTR column_n$7[rbp], 0
	jmp	SHORT $LN7@TableSetti
$LN5@TableSetti:
	mov	eax, DWORD PTR column_n$7[rbp]
	inc	eax
	mov	DWORD PTR column_n$7[rbp], eax
	mov	rax, QWORD PTR column$6[rbp]
	add	rax, 12
	mov	QWORD PTR column$6[rbp], rax
$LN7@TableSetti:
	mov	rax, QWORD PTR settings$1[rbp]
	movsx	eax, BYTE PTR [rax+12]
	cmp	DWORD PTR column_n$7[rbp], eax
	jge	$LN6@TableSetti
; Line 3408
	mov	rax, QWORD PTR column$6[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN27@TableSetti
	movzx	eax, BYTE PTR save_size$2[rbp]
	test	eax, eax
	jne	SHORT $LN27@TableSetti
	movzx	eax, BYTE PTR save_visible$3[rbp]
	test	eax, eax
	jne	SHORT $LN27@TableSetti
	movzx	eax, BYTE PTR save_order$4[rbp]
	test	eax, eax
	jne	SHORT $LN27@TableSetti
	movzx	eax, BYTE PTR save_sort$5[rbp]
	test	eax, eax
	je	SHORT $LN28@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movsx	eax, BYTE PTR [rax+10]
	cmp	eax, -1
	jne	SHORT $LN27@TableSetti
$LN28@TableSetti:
	mov	DWORD PTR tv177[rbp], 0
	jmp	SHORT $LN29@TableSetti
$LN27@TableSetti:
	mov	DWORD PTR tv177[rbp], 1
$LN29@TableSetti:
	movzx	eax, BYTE PTR tv177[rbp]
	mov	BYTE PTR save_column$8[rbp], al
; Line 3409
	movzx	eax, BYTE PTR save_column$8[rbp]
	test	eax, eax
	jne	SHORT $LN11@TableSetti
; Line 3410
	jmp	$LN5@TableSetti
$LN11@TableSetti:
; Line 3411
	mov	r8d, DWORD PTR column_n$7[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0M@JLNIJDCE@Column?5?$CF?92d@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
; Line 3412
	mov	rax, QWORD PTR column$6[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN12@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	mov	r8d, DWORD PTR [rax+4]
	lea	rdx, OFFSET FLAT:??_C@_0N@PGBEGIHP@?5UserID?$DN?$CF08X@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN12@TableSetti:
; Line 3413
	movzx	eax, BYTE PTR save_size$2[rbp]
	test	eax, eax
	je	SHORT $LN13@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	cvtss2sd xmm0, DWORD PTR [rax]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	lea	rdx, OFFSET FLAT:??_C@_0N@MFKBBKPH@?5Weight?$DN?$CF?44f@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN13@TableSetti:
; Line 3414
	movzx	eax, BYTE PTR save_size$2[rbp]
	test	eax, eax
	je	SHORT $LN14@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	cvttss2si eax, DWORD PTR [rax]
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_09PBOBBCAP@?5Width?$DN?$CFd@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN14@TableSetti:
; Line 3415
	movzx	eax, BYTE PTR save_visible$3[rbp]
	test	eax, eax
	je	SHORT $LN15@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 2
	and	al, 1
	movzx	eax, al
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_0M@CIPDPODB@?5Visible?$DN?$CFd@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN15@TableSetti:
; Line 3416
	movzx	eax, BYTE PTR save_order$4[rbp]
	test	eax, eax
	je	SHORT $LN16@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movsx	eax, BYTE PTR [rax+9]
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_09CFPCIBAG@?5Order?$DN?$CFd@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN16@TableSetti:
; Line 3417
	movzx	eax, BYTE PTR save_sort$5[rbp]
	test	eax, eax
	je	SHORT $LN17@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movsx	eax, BYTE PTR [rax+10]
	cmp	eax, -1
	je	SHORT $LN17@TableSetti
	mov	rax, QWORD PTR column$6[rbp]
	movzx	eax, BYTE PTR [rax+11]
	and	al, 3
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN30@TableSetti
	mov	BYTE PTR tv240[rbp], 118		; 00000076H
	jmp	SHORT $LN31@TableSetti
$LN30@TableSetti:
	mov	BYTE PTR tv240[rbp], 94			; 0000005eH
$LN31@TableSetti:
	movsx	eax, BYTE PTR tv240[rbp]
	mov	rcx, QWORD PTR column$6[rbp]
	movsx	ecx, BYTE PTR [rcx+10]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rdx, OFFSET FLAT:??_C@_0L@EAJILIBD@?5Sort?$DN?$CFd?$CFc@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?appendf@ImGuiTextBuffer@@QEAAXPEBDZZ	; ImGuiTextBuffer::appendf
$LN17@TableSetti:
; Line 3418
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?append@ImGuiTextBuffer@@QEAAXPEBD0@Z	; ImGuiTextBuffer::append
; Line 3419
	jmp	$LN5@TableSetti
$LN6@TableSetti:
; Line 3420
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_01EEMJAFIK@?6@
	mov	rcx, QWORD PTR buf$[rbp]
	call	?append@ImGuiTextBuffer@@QEAAXPEBD0@Z	; ImGuiTextBuffer::append
; Line 3421
	jmp	$LN2@TableSetti
$LN3@TableSetti:
; Line 3422
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z ENDP ; TableSettingsHandler_WriteAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z
_TEXT	SEGMENT
settings$ = 8
f$ = 36
column_n$ = 68
r$ = 100
n$ = 132
c$8 = 164
column$9 = 200
tv216 = 404
__$ArrayPad$ = 408
__formal$ = 448
__formal$ = 456
entry$ = 464
line$ = 472
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z PROC ; TableSettingsHandler_ReadLine, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3358
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 58					; 0000003aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3360
	mov	rax, QWORD PTR entry$[rbp]
	mov	QWORD PTR settings$[rbp], rax
; Line 3361
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rbp], xmm0
; Line 3362
	mov	DWORD PTR column_n$[rbp], 0
	mov	DWORD PTR r$[rbp], 0
	mov	DWORD PTR n$[rbp], 0
; Line 3364
	lea	r8, QWORD PTR f$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0M@LAOOHBLO@RefScale?$DN?$CFf@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN2@TableSetti
	mov	rax, QWORD PTR settings$[rbp]
	movss	xmm0, DWORD PTR f$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	jmp	$LN1@TableSetti
$LN2@TableSetti:
; Line 3366
	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR column_n$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0M@JOECNJOM@Column?5?$CFd?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	$LN3@TableSetti
; Line 3368
	cmp	DWORD PTR column_n$[rbp], 0
	jl	SHORT $LN5@TableSetti
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	cmp	DWORD PTR column_n$[rbp], eax
	jl	SHORT $LN4@TableSetti
$LN5@TableSetti:
; Line 3369
	jmp	$LN1@TableSetti
$LN4@TableSetti:
; Line 3370
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
; Line 3371
	mov	BYTE PTR c$8[rbp], 0
; Line 3372
	mov	rcx, QWORD PTR settings$[rbp]
	call	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
	movsxd	rcx, DWORD PTR column_n$[rbp]
	imul	rcx, rcx, 12
	add	rax, rcx
	mov	QWORD PTR column$9[rbp], rax
; Line 3373
	mov	rax, QWORD PTR column$9[rbp]
	movzx	ecx, BYTE PTR column_n$[rbp]
	mov	BYTE PTR [rax+8], cl
; Line 3374
	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR n$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0BA@KAIOJKEL@UserID?$DN0x?$CF08X?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN6@TableSetti
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
	mov	rax, QWORD PTR column$9[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN6@TableSetti:
; Line 3375
	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR n$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0L@LJLKPCDP@Width?$DN?$CFd?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN7@TableSetti
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
	cvtsi2ss xmm0, DWORD PTR n$[rbp]
	mov	rax, QWORD PTR column$9[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR column$9[rbp]
	movzx	eax, BYTE PTR [rax+11]
	and	al, 247					; 000000f7H
	mov	rcx, QWORD PTR column$9[rbp]
	mov	BYTE PTR [rcx+11], al
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 1
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN7@TableSetti:
; Line 3376
	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR f$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0M@IJODOCHC@Weight?$DN?$CFf?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN8@TableSetti
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
	mov	rax, QWORD PTR column$9[rbp]
	movss	xmm0, DWORD PTR f$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR column$9[rbp]
	movzx	eax, BYTE PTR [rax+11]
	or	al, 8
	mov	rcx, QWORD PTR column$9[rbp]
	mov	BYTE PTR [rcx+11], al
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 1
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN8@TableSetti:
; Line 3377
	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR n$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0N@EKALHFOF@Visible?$DN?$CFd?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN9@TableSetti
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
	movzx	eax, BYTE PTR n$[rbp]
	and	al, 1
	shl	al, 2
	mov	rcx, QWORD PTR column$9[rbp]
	movzx	ecx, BYTE PTR [rcx+11]
	and	cl, 251					; 000000fbH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$9[rbp]
	mov	BYTE PTR [rcx+11], al
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 4
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN9@TableSetti:
; Line 3378
	lea	r9, QWORD PTR r$[rbp]
	lea	r8, QWORD PTR n$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0L@BHOFPJL@Order?$DN?$CFd?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 1
	jne	SHORT $LN10@TableSetti
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
	mov	rax, QWORD PTR column$9[rbp]
	movzx	ecx, BYTE PTR n$[rbp]
	mov	BYTE PTR [rax+9], cl
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 2
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN10@TableSetti:
; Line 3379
	lea	rax, QWORD PTR r$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR c$8[rbp]
	lea	r8, QWORD PTR n$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_0M@KGHCDDIO@Sort?$DN?$CFd?$CFc?$CFn@
	mov	rcx, QWORD PTR line$[rbp]
	call	sscanf
	cmp	eax, 2
	jne	$LN11@TableSetti
	movsxd	rax, DWORD PTR r$[rbp]
	mov	rcx, QWORD PTR line$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ImStrSkipBlank@@YAPEBDPEBD@Z		; ImStrSkipBlank
	mov	QWORD PTR line$[rbp], rax
	mov	rax, QWORD PTR column$9[rbp]
	movzx	ecx, BYTE PTR n$[rbp]
	mov	BYTE PTR [rax+10], cl
	movsx	eax, BYTE PTR c$8[rbp]
	cmp	eax, 94					; 0000005eH
	jne	SHORT $LN13@TableSetti
	mov	DWORD PTR tv216[rbp], 2
	jmp	SHORT $LN14@TableSetti
$LN13@TableSetti:
	mov	DWORD PTR tv216[rbp], 1
$LN14@TableSetti:
	movzx	eax, BYTE PTR tv216[rbp]
	and	al, 3
	mov	rcx, QWORD PTR column$9[rbp]
	movzx	ecx, BYTE PTR [rcx+11]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$9[rbp]
	mov	BYTE PTR [rcx+11], al
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 8
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN11@TableSetti:
$LN3@TableSetti:
$LN1@TableSetti:
; Line 3381
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z ENDP ; TableSettingsHandler_ReadLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z
_TEXT	SEGMENT
id$ = 4
columns_count$ = 36
settings$5 = 72
__$ArrayPad$ = 280
__formal$ = 320
__formal$ = 328
name$ = 336
?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z PROC ; TableSettingsHandler_ReadOpen, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3339
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3340
	mov	DWORD PTR id$[rbp], 0
; Line 3341
	mov	DWORD PTR columns_count$[rbp], 0
; Line 3342
	lea	r9, QWORD PTR columns_count$[rbp]
	lea	r8, QWORD PTR id$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_09BDLBIGPI@0x?$CF08X?0?$CFd@
	mov	rcx, QWORD PTR name$[rbp]
	call	sscanf
	cmp	eax, 2
	jge	SHORT $LN2@TableSetti
; Line 3343
	xor	eax, eax
	jmp	SHORT $LN1@TableSetti
$LN2@TableSetti:
; Line 3345
	mov	ecx, DWORD PTR id$[rbp]
	call	?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z ; ImGui::TableSettingsFindByID
	mov	QWORD PTR settings$5[rbp], rax
	cmp	QWORD PTR settings$5[rbp], 0
	je	SHORT $LN3@TableSetti
; Line 3347
	mov	rax, QWORD PTR settings$5[rbp]
	movsx	eax, BYTE PTR [rax+13]
	cmp	eax, DWORD PTR columns_count$[rbp]
	jl	SHORT $LN4@TableSetti
; Line 3349
	mov	rax, QWORD PTR settings$5[rbp]
	movsx	eax, BYTE PTR [rax+13]
	mov	r9d, eax
	mov	r8d, DWORD PTR columns_count$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR settings$5[rbp]
	call	?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z ; TableSettingsInit
; Line 3350
	mov	rax, QWORD PTR settings$5[rbp]
	jmp	SHORT $LN1@TableSetti
$LN4@TableSetti:
; Line 3352
	mov	rax, QWORD PTR settings$5[rbp]
	mov	DWORD PTR [rax], 0
$LN3@TableSetti:
; Line 3354
	mov	edx, DWORD PTR columns_count$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	call	?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z ; ImGui::TableSettingsCreate
$LN1@TableSetti:
; Line 3355
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z ENDP ; TableSettingsHandler_ReadOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z
_TEXT	SEGMENT
g$ = 8
i$1 = 36
table$2 = 72
tv74 = 280
ctx$ = 320
__formal$ = 328
?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z PROC ; TableSettingsHandler_ApplyAll, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3328
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3329
	mov	rax, QWORD PTR ctx$[rbp]
	mov	QWORD PTR g$[rbp], rax
; Line 3330
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@TableSetti
$LN2@TableSetti:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@TableSetti:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	rcx, rax
	call	?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ ; ImPool<ImGuiTable>::GetMapSize
	cmp	DWORD PTR i$1[rbp], eax
	je	SHORT $LN3@TableSetti
; Line 3331
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv74[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	call	?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ; ImPool<ImGuiTable>::TryGetMapData
	mov	QWORD PTR table$2[rbp], rax
	cmp	QWORD PTR table$2[rbp], 0
	je	SHORT $LN5@TableSetti
; Line 3333
	mov	rax, QWORD PTR table$2[rbp]
	mov	BYTE PTR [rax+511], 1
; Line 3334
	mov	rax, QWORD PTR table$2[rbp]
	mov	DWORD PTR [rax+108], -1
$LN5@TableSetti:
; Line 3335
	jmp	SHORT $LN2@TableSetti
$LN3@TableSetti:
; Line 3336
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z ENDP ; TableSettingsHandler_ApplyAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z
_TEXT	SEGMENT
g$ = 8
i$1 = 36
table$2 = 72
tv74 = 280
ctx$ = 320
__formal$ = 328
?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z PROC ; TableSettingsHandler_ClearAll, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3318
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3319
	mov	rax, QWORD PTR ctx$[rbp]
	mov	QWORD PTR g$[rbp], rax
; Line 3320
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@TableSetti
$LN2@TableSetti:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@TableSetti:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	rcx, rax
	call	?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ ; ImPool<ImGuiTable>::GetMapSize
	cmp	DWORD PTR i$1[rbp], eax
	je	SHORT $LN3@TableSetti
; Line 3321
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv74[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	call	?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ; ImPool<ImGuiTable>::TryGetMapData
	mov	QWORD PTR table$2[rbp], rax
	cmp	QWORD PTR table$2[rbp], 0
	je	SHORT $LN5@TableSetti
; Line 3322
	mov	rax, QWORD PTR table$2[rbp]
	mov	DWORD PTR [rax+108], -1
$LN5@TableSetti:
	jmp	SHORT $LN2@TableSetti
$LN3@TableSetti:
; Line 3323
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	rcx, rax
	call	?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ ; ImChunkStream<ImGuiTableSettings>::clear
; Line 3324
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z ENDP ; TableSettingsHandler_ClearAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsCalcChunkSize@@YA_KH@Z
_TEXT	SEGMENT
columns_count$ = 224
?TableSettingsCalcChunkSize@@YA_KH@Z PROC		; TableSettingsCalcChunkSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3150
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3151
	movsxd	rax, DWORD PTR columns_count$[rbp]
	imul	rax, rax, 12
	add	rax, 16
; Line 3152
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsCalcChunkSize@@YA_KH@Z ENDP		; TableSettingsCalcChunkSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z
_TEXT	SEGMENT
settings_column$ = 8
n$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 392
$T7 = 424
$T8 = 456
$T9 = 484
tv129 = 504
tv78 = 504
settings$ = 544
id$ = 552
columns_count$ = 560
columns_count_max$ = 568
?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z PROC ; TableSettingsInit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3138
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 552				; 00000228H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3139
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR $T4[rbp], rax
	mov	r8, QWORD PTR settings$[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 16
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T3[rbp], rax
	cmp	QWORD PTR $T3[rbp], 0
	je	SHORT $LN6@TableSetti
	mov	rcx, QWORD PTR $T3[rbp]
	call	??0ImGuiTableSettings@@QEAA@XZ		; ImGuiTableSettings::ImGuiTableSettings
	mov	QWORD PTR tv78[rbp], rax
	jmp	SHORT $LN7@TableSetti
$LN6@TableSetti:
	mov	QWORD PTR tv78[rbp], 0
$LN7@TableSetti:
	mov	rax, QWORD PTR tv78[rbp]
	mov	QWORD PTR $T2[rbp], rax
; Line 3140
	mov	rcx, QWORD PTR settings$[rbp]
	call	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
	mov	QWORD PTR settings_column$[rbp], rax
; Line 3141
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@TableSetti
$LN2@TableSetti:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
	mov	rax, QWORD PTR settings_column$[rbp]
	add	rax, 12
	mov	QWORD PTR settings_column$[rbp], rax
$LN4@TableSetti:
	mov	eax, DWORD PTR columns_count_max$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@TableSetti
; Line 3142
	lea	rax, QWORD PTR $T9[rbp]
	mov	QWORD PTR $T8[rbp], rax
	mov	r8, QWORD PTR settings_column$[rbp]
	mov	rax, QWORD PTR $T8[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 12
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T7[rbp], rax
	cmp	QWORD PTR $T7[rbp], 0
	je	SHORT $LN8@TableSetti
	mov	rcx, QWORD PTR $T7[rbp]
	call	??0ImGuiTableColumnSettings@@QEAA@XZ	; ImGuiTableColumnSettings::ImGuiTableColumnSettings
	mov	QWORD PTR tv129[rbp], rax
	jmp	SHORT $LN9@TableSetti
$LN8@TableSetti:
	mov	QWORD PTR tv129[rbp], 0
$LN9@TableSetti:
	mov	rax, QWORD PTR tv129[rbp]
	mov	QWORD PTR $T6[rbp], rax
	jmp	$LN2@TableSetti
$LN3@TableSetti:
; Line 3143
	mov	rax, QWORD PTR settings$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 3144
	mov	rax, QWORD PTR settings$[rbp]
	movzx	ecx, BYTE PTR columns_count$[rbp]
	mov	BYTE PTR [rax+12], cl
; Line 3145
	mov	rax, QWORD PTR settings$[rbp]
	movzx	ecx, BYTE PTR columns_count_max$[rbp]
	mov	BYTE PTR [rax+13], cl
; Line 3146
	mov	rax, QWORD PTR settings$[rbp]
	mov	BYTE PTR [rax+14], 1
; Line 3147
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z ENDP ; TableSettingsInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
settings_column$ = 8
n$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 392
$T7 = 424
$T8 = 456
$T9 = 484
tv129 = 504
tv78 = 504
settings$ = 544
id$ = 552
columns_count$ = 560
columns_count_max$ = 568
?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA PROC ; `TableSettingsInit'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR settings$[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T3[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA ENDP ; `TableSettingsInit'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
settings_column$ = 8
n$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
$T6 = 392
$T7 = 424
$T8 = 456
$T9 = 484
tv129 = 504
tv78 = 504
settings$ = 544
id$ = 552
columns_count$ = 560
columns_count_max$ = 568
?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA PROC ; `TableSettingsInit'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR settings_column$[rbp]
	mov	rax, QWORD PTR $T8[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T7[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z@4HA ENDP ; `TableSettingsInit'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMax@C@@YACCC@Z
_TEXT	SEGMENT
tv67 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@C@@YACCC@Z PROC				; ImMax<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 413
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, BYTE PTR lhs$[rbp]
	movsx	ecx, BYTE PTR rhs$[rbp]
	cmp	eax, ecx
	jl	SHORT $LN3@ImMax
	movzx	eax, BYTE PTR lhs$[rbp]
	mov	BYTE PTR tv67[rbp], al
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	movzx	eax, BYTE PTR rhs$[rbp]
	mov	BYTE PTR tv67[rbp], al
$LN4@ImMax:
	movzx	eax, BYTE PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMax@C@@YACCC@Z ENDP				; ImMax<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z
_TEXT	SEGMENT
column$ = 224
n$ = 232
?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z PROC ; TableGetColumnAvailSortDirection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2617
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2618
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	shr	al, 2
	and	al, 3
	movzx	eax, al
	cmp	DWORD PTR n$[rbp], eax
	jl	SHORT $LN3@TableGetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EK@EKGOAIAF@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@TableGetCo:
; Line 2619
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+102]
	mov	ecx, DWORD PTR n$[rbp]
	shl	ecx, 1
	sar	eax, cl
	and	eax, 3
; Line 2620
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z ENDP ; TableGetColumnAvailSortDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ PROC ; `ImGui::TableMergeDrawChannels'::`2'::MergeGroup::MergeGroup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2336
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 20
	mov	rcx, rax
	call	??0?$ImBitArray@$0IE@@@QEAA@XZ		; ImBitArray<132>::ImBitArray<132>
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ ENDP ; `ImGui::TableMergeDrawChannels'::`2'::MergeGroup::MergeGroup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
n2$ = 240
?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z PROC		; ImBitArray<132>::SetBitRange, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 539
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	r8d, DWORD PTR n2$[rbp]
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, rax
	call	?ImBitArraySetBitRange@@YAXPEAIHH@Z	; ImBitArraySetBitRange
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z ENDP		; ImBitArray<132>::SetBitRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z PROC		; ImBitArray<132>::ClearBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 538
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR n$[rbp], 132			; 00000084H
	jl	SHORT $LN3@ClearBit
	mov	r8d, 538				; 0000021aH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@GHAHDFIG@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAB?$AAI?$AAT?$AAC?$AAO?$AAU?$AAN?$AAT@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@ClearBit:
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, rax
	call	?ImBitArrayClearBit@@YAXPEAIH@Z		; ImBitArrayClearBit
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z ENDP		; ImBitArray<132>::ClearBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z PROC		; ImBitArray<132>::SetBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 537
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR n$[rbp], 132			; 00000084H
	jl	SHORT $LN3@SetBit
	mov	r8d, 537				; 00000219H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@GHAHDFIG@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAB?$AAI?$AAT?$AAC?$AAO?$AAU?$AAN?$AAT@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@SetBit:
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, rax
	call	?ImBitArraySetBit@@YAXPEAIH@Z		; ImBitArraySetBit
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z ENDP		; ImBitArray<132>::SetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z PROC		; ImBitArray<132>::TestBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 536
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR n$[rbp], 132			; 00000084H
	jl	SHORT $LN3@TestBit
	mov	r8d, 536				; 00000218H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@GHAHDFIG@?$AAn?$AA?5?$AA?$DM?$AA?5?$AAB?$AAI?$AAT?$AAC?$AAO?$AAU?$AAN?$AAT@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@TestBit:
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, rax
	call	?ImBitArrayTestBit@@YA_NPEBIH@Z		; ImBitArrayTestBit
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z ENDP		; ImBitArray<132>::TestBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ PROC		; ImBitArray<132>::ClearAllBits, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 534
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 20
	rep stosb
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ ENDP		; ImBitArray<132>::ClearAllBits
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImBitArray@$0IE@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImBitArray@$0IE@@@QEAA@XZ PROC			; ImBitArray<132>::ImBitArray<132>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 533
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearAllBits@?$ImBitArray@$0IE@@@QEAAXXZ ; ImBitArray<132>::ClearAllBits
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImBitArray@$0IE@@@QEAA@XZ ENDP			; ImBitArray<132>::ImBitArray<132>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@C@@YAXAEAC0@Z
_TEXT	SEGMENT
tmp$ = 4
a$ = 256
b$ = 264
??$ImSwap@C@@YAXAEAC0@Z PROC				; ImSwap<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tmp$[rbp], al
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR b$[rbp]
	movzx	ecx, BYTE PTR tmp$[rbp]
	mov	BYTE PTR [rax], cl
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@C@@YAXAEAC0@Z ENDP				; ImSwap<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@M@@YAMMMM@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@M@@YAMMMM@Z PROC				; ImClamp<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR mn$[rbp]
	comiss	xmm0, DWORD PTR v$[rbp]
	jbe	SHORT $LN5@ImClamp
	movss	xmm0, DWORD PTR mn$[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	movss	xmm0, DWORD PTR v$[rbp]
	comiss	xmm0, DWORD PTR mx$[rbp]
	jbe	SHORT $LN3@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	movss	xmm0, DWORD PTR v$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
$LN4@ImClamp:
	movss	xmm0, DWORD PTR tv66[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
$LN6@ImClamp:
	movss	xmm0, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@M@@YAMMMM@Z ENDP				; ImClamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z
_TEXT	SEGMENT
flags$ = 4
table_sizing_policy$1 = 36
count$2 = 68
mask$3 = 100
list$4 = 132
tv281 = 340
tv272 = 340
tv263 = 340
tv254 = 340
tv130 = 344
tv132 = 352
table$ = 400
column$ = 408
flags_in$ = 416
?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z PROC ; TableSetupColumnFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 656
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 657
	mov	eax, DWORD PTR flags_in$[rbp]
	mov	DWORD PTR flags$[rbp], eax
; Line 660
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 24
	test	eax, eax
	jne	SHORT $LN2@TableSetup
; Line 662
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 57344				; 0000e000H
	mov	DWORD PTR table_sizing_policy$1[rbp], eax
; Line 663
	cmp	DWORD PTR table_sizing_policy$1[rbp], 8192 ; 00002000H
	je	SHORT $LN6@TableSetup
	cmp	DWORD PTR table_sizing_policy$1[rbp], 16384 ; 00004000H
	jne	SHORT $LN4@TableSetup
$LN6@TableSetup:
; Line 664
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 16
	mov	DWORD PTR flags$[rbp], eax
	jmp	SHORT $LN5@TableSetup
$LN4@TableSetup:
; Line 666
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 8
	mov	DWORD PTR flags$[rbp], eax
$LN5@TableSetup:
; Line 667
	jmp	SHORT $LN3@TableSetup
$LN2@TableSetup:
; Line 670
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 24
	mov	ecx, eax
	call	?ImIsPowerOfTwo@@YA_NH@Z		; ImIsPowerOfTwo
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN18@TableSetup
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z@4JA
	add	eax, 14
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HC@EONHDNHI@?$AAI?$AAm?$AAI?$AAs?$AAP?$AAo?$AAw?$AAe?$AAr?$AAO?$AAf?$AAT?$AAw?$AAo?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@TableSetup:
$LN3@TableSetup:
; Line 674
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN7@TableSetup
; Line 675
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR flags$[rbp], eax
$LN7@TableSetup:
; Line 678
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN8@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN8@TableSetup
; Line 679
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 9
	mov	DWORD PTR flags$[rbp], eax
$LN8@TableSetup:
; Line 682
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 196608				; 00030000H
	test	eax, eax
	jne	SHORT $LN9@TableSetup
; Line 683
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv130[rbp], rax
	mov	rdx, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR tv130[rbp]
	call	?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z ; ImSpan<ImGuiTableColumn>::index_from_ptr
	test	eax, eax
	jne	SHORT $LN19@TableSetup
	mov	DWORD PTR tv132[rbp], 65536		; 00010000H
	jmp	SHORT $LN20@TableSetup
$LN19@TableSetup:
	mov	DWORD PTR tv132[rbp], 131072		; 00020000H
$LN20@TableSetup:
	mov	eax, DWORD PTR tv132[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN9@TableSetup:
; Line 691
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 251658240				; 0f000000H
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR column$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 694
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+102], 0
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 15
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 243					; 000000f3H
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 695
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	je	$LN10@TableSetup
; Line 697
	mov	DWORD PTR count$2[rbp], 0
	mov	DWORD PTR mask$3[rbp], 0
	mov	DWORD PTR list$4[rbp], 0
; Line 698
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16384				; 00004000H
	test	eax, eax
	je	SHORT $LN11@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN11@TableSetup
	mov	eax, DWORD PTR mask$3[rbp]
	or	eax, 2
	mov	DWORD PTR mask$3[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	shl	eax, 1
	mov	ecx, 1
	mov	DWORD PTR tv254[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv254[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR list$4[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR list$4[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	inc	eax
	mov	DWORD PTR count$2[rbp], eax
$LN11@TableSetup:
; Line 699
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN12@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	jne	SHORT $LN12@TableSetup
	mov	eax, DWORD PTR mask$3[rbp]
	or	eax, 4
	mov	DWORD PTR mask$3[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	shl	eax, 1
	mov	ecx, 2
	mov	DWORD PTR tv263[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv263[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR list$4[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR list$4[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	inc	eax
	mov	DWORD PTR count$2[rbp], eax
$LN12@TableSetup:
; Line 700
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16384				; 00004000H
	test	eax, eax
	jne	SHORT $LN13@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	jne	SHORT $LN13@TableSetup
	mov	eax, DWORD PTR mask$3[rbp]
	or	eax, 2
	mov	DWORD PTR mask$3[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	shl	eax, 1
	mov	ecx, 1
	mov	DWORD PTR tv272[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv272[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR list$4[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR list$4[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	inc	eax
	mov	DWORD PTR count$2[rbp], eax
$LN13@TableSetup:
; Line 701
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32768				; 00008000H
	test	eax, eax
	jne	SHORT $LN14@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	jne	SHORT $LN14@TableSetup
	mov	eax, DWORD PTR mask$3[rbp]
	or	eax, 4
	mov	DWORD PTR mask$3[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	shl	eax, 1
	mov	ecx, 2
	mov	DWORD PTR tv281[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv281[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR list$4[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR list$4[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	inc	eax
	mov	DWORD PTR count$2[rbp], eax
$LN14@TableSetup:
; Line 702
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	SHORT $LN16@TableSetup
	cmp	DWORD PTR count$2[rbp], 0
	jne	SHORT $LN15@TableSetup
$LN16@TableSetup:
	mov	eax, DWORD PTR mask$3[rbp]
	or	eax, 1
	mov	DWORD PTR mask$3[rbp], eax
	mov	eax, DWORD PTR count$2[rbp]
	inc	eax
	mov	DWORD PTR count$2[rbp], eax
$LN15@TableSetup:
; Line 703
	mov	rax, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR list$4[rbp]
	mov	BYTE PTR [rax+102], cl
; Line 704
	movzx	eax, BYTE PTR mask$3[rbp]
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 705
	movzx	eax, BYTE PTR count$2[rbp]
	and	al, 3
	shl	al, 2
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 243					; 000000f3H
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 706
	mov	rdx, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ; ImGui::TableFixColumnSortDirection
$LN10@TableSetup:
; Line 708
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z ENDP ; TableSetupColumnFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z
_TEXT	SEGMENT
tv76 = 192
tv74 = 200
this$ = 240
n$ = 248
span$ = 256
??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z PROC ; ImSpanAllocator<3>::GetSpan<ImGuiTableCellData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 602
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrEnd
	mov	QWORD PTR tv76[rbp], rax
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrBegin
	mov	QWORD PTR tv74[rbp], rax
	mov	r8, QWORD PTR tv76[rbp]
	mov	rdx, QWORD PTR tv74[rbp]
	mov	rcx, QWORD PTR span$[rbp]
	call	?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z ; ImSpan<ImGuiTableCellData>::set
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z ENDP ; ImSpanAllocator<3>::GetSpan<ImGuiTableCellData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z
_TEXT	SEGMENT
tv76 = 192
tv74 = 200
this$ = 240
n$ = 248
span$ = 256
??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z PROC ; ImSpanAllocator<3>::GetSpan<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 602
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrEnd
	mov	QWORD PTR tv76[rbp], rax
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrBegin
	mov	QWORD PTR tv74[rbp], rax
	mov	r8, QWORD PTR tv76[rbp]
	mov	rdx, QWORD PTR tv74[rbp]
	mov	rcx, QWORD PTR span$[rbp]
	call	?set@?$ImSpan@C@@QEAAXPEAC0@Z		; ImSpan<signed char>::set
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z ENDP ; ImSpanAllocator<3>::GetSpan<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z
_TEXT	SEGMENT
tv76 = 192
tv74 = 200
this$ = 240
n$ = 248
span$ = 256
??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z PROC ; ImSpanAllocator<3>::GetSpan<ImGuiTableColumn>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 602
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrEnd
	mov	QWORD PTR tv76[rbp], rax
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ; ImSpanAllocator<3>::GetSpanPtrBegin
	mov	QWORD PTR tv74[rbp], rax
	mov	r8, QWORD PTR tv76[rbp]
	mov	rdx, QWORD PTR tv74[rbp]
	mov	rcx, QWORD PTR span$[rbp]
	call	?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z ; ImSpan<ImGuiTableColumn>::set
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z ENDP ; ImSpanAllocator<3>::GetSpan<ImGuiTableColumn>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z PROC	; ImSpanAllocator<3>::GetSpanPtrEnd, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 600
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR n$[rbp], 0
	jl	SHORT $LN3@GetSpanPtr
	cmp	DWORD PTR n$[rbp], 3
	jge	SHORT $LN3@GetSpanPtr
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+12], 3
	je	SHORT $LN4@GetSpanPtr
$LN3@GetSpanPtr:
	mov	r8d, 600				; 00000258H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FE@GEHGFLGL@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?5?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GetSpanPtr:
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rcx+rax*4+16]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR n$[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	movsxd	rcx, DWORD PTR [rdx+rcx*4+28]
	add	rax, rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetSpanPtrEnd@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ENDP	; ImSpanAllocator<3>::GetSpanPtrEnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z PROC ; ImSpanAllocator<3>::GetSpanPtrBegin, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 599
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR n$[rbp], 0
	jl	SHORT $LN3@GetSpanPtr
	cmp	DWORD PTR n$[rbp], 3
	jge	SHORT $LN3@GetSpanPtr
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+12], 3
	je	SHORT $LN4@GetSpanPtr
$LN3@GetSpanPtr:
	mov	r8d, 599				; 00000257H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FE@GEHGFLGL@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?5?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GetSpanPtr:
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rcx+rax*4+16]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetSpanPtrBegin@?$ImSpanAllocator@$02@@QEAAPEAXH@Z ENDP ; ImSpanAllocator<3>::GetSpanPtrBegin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z
_TEXT	SEGMENT
this$ = 224
base_ptr$ = 232
?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z PROC ; ImSpanAllocator<3>::SetArenaBasePtr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 598
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR base_ptr$[rbp]
	mov	QWORD PTR [rax], rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z ENDP ; ImSpanAllocator<3>::SetArenaBasePtr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ
_TEXT	SEGMENT
this$ = 224
?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ PROC ; ImSpanAllocator<3>::GetArenaSizeInBytes, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 597
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ ENDP ; ImSpanAllocator<3>::GetArenaSizeInBytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
sz$ = 240
a$ = 248
?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z PROC	; ImSpanAllocator<3>::Reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 596
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR n$[rbp], eax
	jne	SHORT $LN3@Reserve
	cmp	DWORD PTR n$[rbp], 3
	jl	SHORT $LN4@Reserve
$LN3@Reserve:
	mov	r8d, 596				; 00000254H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@BODLFGJA@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAC?$AAu?$AAr?$AAr?$AAI?$AAd?$AAx?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@Reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR a$[rbp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	ecx, DWORD PTR a$[rbp]
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+8], eax
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+rax*4+16], edx
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR sz$[rbp]
	mov	DWORD PTR [rcx+rax*4+28], edx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+12], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR sz$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+8], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z ENDP	; ImSpanAllocator<3>::Reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImSpanAllocator@$02@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImSpanAllocator@$02@@QEAA@XZ PROC			; ImSpanAllocator<3>::ImSpanAllocator<3>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 595
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImSpanAllocator@$02@@QEAA@XZ ENDP			; ImSpanAllocator<3>::ImSpanAllocator<3>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z
_TEXT	SEGMENT
tv71 = 192
flags$ = 240
outer_window$ = 248
?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z PROC		; TableFixFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 265
$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 267
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 57344				; 0000e000H
	test	eax, eax
	jne	SHORT $LN2@TableFixFl
; Line 268
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	jne	SHORT $LN10@TableFixFl
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN10@TableFixFl
	mov	DWORD PTR tv71[rbp], 32768		; 00008000H
	jmp	SHORT $LN11@TableFixFl
$LN10@TableFixFl:
	mov	DWORD PTR tv71[rbp], 8192		; 00002000H
$LN11@TableFixFl:
	mov	eax, DWORD PTR tv71[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rbp], eax
$LN2@TableFixFl:
; Line 271
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 57344				; 0000e000H
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN3@TableFixFl
; Line 272
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 18
	mov	DWORD PTR flags$[rbp], eax
$LN3@TableFixFl:
; Line 275
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@TableFixFl
; Line 276
	mov	eax, DWORD PTR flags$[rbp]
	bts	eax, 9
	mov	DWORD PTR flags$[rbp], eax
$LN4@TableFixFl:
; Line 279
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 50331648				; 03000000H
	test	eax, eax
	je	SHORT $LN5@TableFixFl
; Line 280
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, -196609				; fffffffffffcffffH
	mov	DWORD PTR flags$[rbp], eax
$LN5@TableFixFl:
; Line 283
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN6@TableFixFl
; Line 284
	mov	eax, DWORD PTR flags$[rbp]
	btr	eax, 11
	mov	DWORD PTR flags$[rbp], eax
$LN6@TableFixFl:
; Line 287
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 15
	test	eax, eax
	jne	SHORT $LN7@TableFixFl
; Line 288
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 16
	mov	DWORD PTR flags$[rbp], eax
$LN7@TableFixFl:
; Line 291
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	rax, QWORD PTR [rax+904]
	mov	eax, DWORD PTR [rax+12]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN8@TableFixFl
; Line 292
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 16
	mov	DWORD PTR flags$[rbp], eax
$LN8@TableFixFl:
; Line 294
	mov	eax, DWORD PTR flags$[rbp]
; Line 295
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z ENDP		; TableFixFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z
_TEXT	SEGMENT
n$1 = 4
column_settings$2 = 40
sort_dir$3 = 68
tv169 = 276
tv133 = 276
tv167 = 280
tv144 = 288
tv165 = 296
tv154 = 304
tv153 = 312
settings$ = 352
?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z PROC ; ImGui::DebugNodeTableSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3580
$LN15:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3581
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	rcx, QWORD PTR settings$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	r9d, eax
	mov	rax, QWORD PTR settings$[rbp]
	mov	r8d, DWORD PTR [rax]
	lea	rdx, OFFSET FLAT:??_C@_0BN@LNKMILO@Settings?50x?$CF08X?5?$CI?$CFd?5columns?$CJ@
	call	?TreeNode@ImGui@@YA_NPEBXPEBDZZ		; ImGui::TreeNode
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@DebugNodeT
; Line 3582
	jmp	$LN1@DebugNodeT
$LN5@DebugNodeT:
; Line 3583
	mov	rax, QWORD PTR settings$[rbp]
	mov	edx, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:??_C@_0BC@LJHOAHJA@SaveFlags?3?50x?$CF08X@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3584
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+13]
	mov	rcx, QWORD PTR settings$[rbp]
	movsx	ecx, BYTE PTR [rcx+12]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:??_C@_0BK@OLKPLDMA@ColumnsCount?3?5?$CFd?5?$CImax?5?$CFd?$CJ@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3585
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@DebugNodeT
$LN2@DebugNodeT:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@DebugNodeT:
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	cmp	DWORD PTR n$1[rbp], eax
	jge	$LN3@DebugNodeT
; Line 3587
	mov	rcx, QWORD PTR settings$[rbp]
	call	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
	movsxd	rcx, DWORD PTR n$1[rbp]
	imul	rcx, rcx, 12
	add	rax, rcx
	mov	QWORD PTR column_settings$2[rbp], rax
; Line 3588
	mov	rax, QWORD PTR column_settings$2[rbp]
	movsx	eax, BYTE PTR [rax+10]
	cmp	eax, -1
	je	SHORT $LN7@DebugNodeT
	mov	rax, QWORD PTR column_settings$2[rbp]
	movzx	eax, BYTE PTR [rax+11]
	and	al, 3
	movzx	eax, al
	mov	DWORD PTR tv133[rbp], eax
	jmp	SHORT $LN8@DebugNodeT
$LN7@DebugNodeT:
	mov	DWORD PTR tv133[rbp], 0
$LN8@DebugNodeT:
	mov	eax, DWORD PTR tv133[rbp]
	mov	DWORD PTR sort_dir$3[rbp], eax
; Line 3589
	mov	rax, QWORD PTR column_settings$2[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv169[rbp], eax
	mov	rax, QWORD PTR column_settings$2[rbp]
	cvtss2sd xmm0, DWORD PTR [rax]
	movsd	QWORD PTR tv167[rbp], xmm0
	mov	rax, QWORD PTR column_settings$2[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_06ODJMJFLN@Weight@
	mov	QWORD PTR tv144[rbp], rax
	jmp	SHORT $LN10@DebugNodeT
$LN9@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_06PALFPBFG@Width?5@
	mov	QWORD PTR tv144[rbp], rax
$LN10@DebugNodeT:
	mov	rax, QWORD PTR column_settings$2[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 2
	and	al, 1
	movzx	eax, al
	mov	DWORD PTR tv165[rbp], eax
	cmp	DWORD PTR sort_dir$3[rbp], 1
	jne	SHORT $LN13@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_03OFHEPBNG@Asc@
	mov	QWORD PTR tv154[rbp], rax
	jmp	SHORT $LN14@DebugNodeT
$LN13@DebugNodeT:
	cmp	DWORD PTR sort_dir$3[rbp], 2
	jne	SHORT $LN11@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_03IAMDMMHH@Des@
	mov	QWORD PTR tv153[rbp], rax
	jmp	SHORT $LN12@DebugNodeT
$LN11@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_03JMFMNIFM@?9?9?9@
	mov	QWORD PTR tv153[rbp], rax
$LN12@DebugNodeT:
	mov	rax, QWORD PTR tv153[rbp]
	mov	QWORD PTR tv154[rbp], rax
$LN14@DebugNodeT:
	mov	rax, QWORD PTR column_settings$2[rbp]
	movsx	eax, BYTE PTR [rax+10]
	mov	rcx, QWORD PTR column_settings$2[rbp]
	movsx	ecx, BYTE PTR [rcx+9]
	mov	edx, DWORD PTR tv169[rbp]
	mov	DWORD PTR [rsp+64], edx
	movsd	xmm0, QWORD PTR tv167[rbp]
	movsd	QWORD PTR [rsp+56], xmm0
	mov	rdx, QWORD PTR tv144[rbp]
	mov	QWORD PTR [rsp+48], rdx
	mov	edx, DWORD PTR tv165[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	rdx, QWORD PTR tv154[rbp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9d, eax
	mov	r8d, ecx
	mov	edx, DWORD PTR n$1[rbp]
	lea	rcx, OFFSET FLAT:??_C@_0EB@CNABLLAJ@Column?5?$CFd?5Order?5?$CFd?5SortOrder?5?$CFd@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3593
	jmp	$LN2@DebugNodeT
$LN3@DebugNodeT:
; Line 3594
	call	?TreePop@ImGui@@YAXXZ			; ImGui::TreePop
$LN1@DebugNodeT:
; Line 3595
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z ENDP ; ImGui::DebugNodeTableSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
buf$ = 80
p$ = 616
buf_end$ = 648
is_active$ = 676
open$ = 708
clear_settings$ = 740
sum_weights$ = 772
n$5 = 804
n$6 = 836
column$7 = 872
name$8 = 904
r$9 = 936
settings$10 = 984
$T11 = 1588
$T12 = 1620
$T13 = 1652
tv69 = 1668
tv522 = 1672
tv291 = 1672
tv283 = 1672
tv272 = 1672
tv263 = 1672
tv235 = 1672
tv213 = 1672
tv208 = 1672
tv171 = 1672
tv147 = 1672
tv73 = 1672
tv296 = 1680
tv222 = 1680
tv206 = 1680
tv169 = 1680
tv301 = 1688
tv204 = 1688
tv167 = 1688
tv446 = 1696
tv210 = 1696
tv444 = 1700
tv316 = 1704
tv202 = 1704
tv315 = 1712
tv448 = 1720
tv450 = 1728
tv452 = 1736
tv454 = 1744
tv456 = 1752
tv458 = 1760
tv460 = 1768
tv462 = 1776
tv464 = 1784
tv466 = 1792
tv442 = 1800
tv376 = 1808
tv468 = 1816
tv470 = 1824
tv472 = 1832
tv474 = 1840
tv476 = 1848
tv478 = 1856
tv480 = 1860
tv482 = 1864
tv484 = 1868
tv486 = 1872
tv488 = 1876
tv440 = 1880
tv415 = 1888
__$ArrayPad$ = 1896
table$ = 1936
?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::DebugNodeTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3518
$LN38:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 2152				; 00000868H
	lea	rbp, QWORD PTR [rsp+240]
	lea	rdi, QWORD PTR [rsp+240]
	mov	ecx, 334				; 0000014eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2184]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3520
	lea	rax, QWORD PTR buf$[rbp]
	mov	QWORD PTR p$[rbp], rax
; Line 3521
	lea	rax, QWORD PTR buf$[rbp+512]
	mov	QWORD PTR buf_end$[rbp], rax
; Line 3522
	call	?GetFrameCount@ImGui@@YAHXZ		; ImGui::GetFrameCount
	sub	eax, 2
	mov	rcx, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rcx+112], eax
	jl	SHORT $LN18@DebugNodeT
	mov	BYTE PTR tv69[rbp], 1
	jmp	SHORT $LN19@DebugNodeT
$LN18@DebugNodeT:
	mov	BYTE PTR tv69[rbp], 0
$LN19@DebugNodeT:
	movzx	eax, BYTE PTR tv69[rbp]
	mov	BYTE PTR is_active$[rbp], al
; Line 3523
	movzx	eax, BYTE PTR is_active$[rbp]
	test	eax, eax
	je	SHORT $LN20@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv73[rbp], rax
	jmp	SHORT $LN21@DebugNodeT
$LN20@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_0M@MDILNFHC@?5?$CKInactive?$CK@
	mov	QWORD PTR tv73[rbp], rax
$LN21@DebugNodeT:
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+392]
	mov	rcx, QWORD PTR p$[rbp]
	mov	rdx, QWORD PTR buf_end$[rbp]
	sub	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR tv73[rbp]
	mov	QWORD PTR [rsp+48], rdx
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR table$[rbp]
	mov	r9d, DWORD PTR [rax]
	lea	r8, OFFSET FLAT:??_C@_0CF@DAHKPIHJ@Table?50x?$CF08X?5?$CI?$CFd?5columns?0?5in?5?8?$CF@
	mov	rdx, rcx
	mov	rcx, QWORD PTR p$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 3524
	movzx	eax, BYTE PTR is_active$[rbp]
	test	eax, eax
	jne	SHORT $LN8@DebugNodeT
	mov	ecx, 1
	call	?GetStyleColorVec4@ImGui@@YAAEBUImVec4@@H@Z ; ImGui::GetStyleColorVec4
	mov	rdx, rax
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHAEBUImVec4@@@Z ; ImGui::PushStyleColor
$LN8@DebugNodeT:
; Line 3525
	lea	r8, QWORD PTR buf$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	mov	rcx, QWORD PTR table$[rbp]
	call	?TreeNode@ImGui@@YA_NPEBXPEBDZZ		; ImGui::TreeNode
	mov	BYTE PTR open$[rbp], al
; Line 3526
	movzx	eax, BYTE PTR is_active$[rbp]
	test	eax, eax
	jne	SHORT $LN9@DebugNodeT
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
$LN9@DebugNodeT:
; Line 3527
	xor	ecx, ecx
	call	?IsItemHovered@ImGui@@YA_NH@Z		; ImGui::IsItemHovered
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@DebugNodeT
; Line 3528
	call	?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
	mov	QWORD PTR tv147[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 252				; 000000fcH
	mov	rcx, QWORD PTR table$[rbp]
	add	rcx, 244				; 000000f4H
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+48], xmm0
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, -16711681				; ff00ffffH
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR tv147[rbp]
	call	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
$LN10@DebugNodeT:
; Line 3529
	call	?IsItemVisible@ImGui@@YA_NXZ		; ImGui::IsItemVisible
	movzx	eax, al
	test	eax, eax
	je	$LN11@DebugNodeT
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
	cmp	eax, -1
	je	SHORT $LN11@DebugNodeT
; Line 3530
	call	?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
	mov	QWORD PTR tv171[rbp], rax
	lea	rcx, QWORD PTR $T11[rbp]
	call	?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ	; ImGui::GetItemRectMax
	mov	QWORD PTR tv169[rbp], rax
	lea	rcx, QWORD PTR $T12[rbp]
	call	?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ	; ImGui::GetItemRectMin
	mov	QWORD PTR tv167[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+48], xmm0
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, -16711681				; ff00ffffH
	mov	r8, QWORD PTR tv169[rbp]
	mov	rdx, QWORD PTR tv167[rbp]
	mov	rcx, QWORD PTR tv171[rbp]
	call	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
$LN11@DebugNodeT:
; Line 3531
	movzx	eax, BYTE PTR open$[rbp]
	test	eax, eax
	jne	SHORT $LN12@DebugNodeT
; Line 3532
	jmp	$LN1@DebugNodeT
$LN12@DebugNodeT:
; Line 3533
	lea	rcx, OFFSET FLAT:??_C@_0P@MDFKNKGM@Clear?5settings@
	call	?SmallButton@ImGui@@YA_NPEBD@Z		; ImGui::SmallButton
	mov	BYTE PTR clear_settings$[rbp], al
; Line 3534
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rax+4]
	call	?DebugNodeTableGetSizingPolicyDesc@@YAPEBDH@Z ; DebugNodeTableGetSizingPolicyDesc
	mov	QWORD PTR tv208[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 244				; 000000f4H
	mov	rcx, rax
	call	?GetHeight@ImRect@@QEBAMXZ		; ImRect::GetHeight
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv206[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 244				; 000000f4H
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv204[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+248]
	movsd	QWORD PTR tv210[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+244]
	movsd	QWORD PTR tv202[rbp], xmm0
	mov	rax, QWORD PTR tv208[rbp]
	mov	QWORD PTR [rsp+40], rax
	movsd	xmm0, QWORD PTR tv206[rbp]
	movsd	QWORD PTR [rsp+32], xmm0
	movsd	xmm3, QWORD PTR tv204[rbp]
	movq	r9, xmm3
	movsd	xmm2, QWORD PTR tv210[rbp]
	movq	r8, xmm2
	movsd	xmm1, QWORD PTR tv202[rbp]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0DL@BMMMGOOI@OuterRect?3?5Pos?3?5?$CI?$CF?41f?0?$CF?41f?$CJ?5Siz@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3535
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN22@DebugNodeT
	jne	SHORT $LN22@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_07IOPDKCEG@?5?$CIauto?$CJ@
	mov	QWORD PTR tv213[rbp], rax
	jmp	SHORT $LN23@DebugNodeT
$LN22@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv213[rbp], rax
$LN23@DebugNodeT:
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+220]
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm1, DWORD PTR [rax+228]
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm2, DWORD PTR [rax+224]
	movsd	QWORD PTR tv222[rbp], xmm2
	mov	rax, QWORD PTR tv213[rbp]
	mov	QWORD PTR [rsp+32], rax
	movaps	xmm3, xmm0
	movq	r9, xmm3
	movaps	xmm2, xmm1
	movq	r8, xmm2
	movsd	xmm0, QWORD PTR tv222[rbp]
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0EH@GODPECNO@ColumnsGivenWidth?3?5?$CF?41f?0?5Column@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3536
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+192]
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm1, DWORD PTR [rax+208]
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm2, DWORD PTR [rax+204]
	mov	rax, QWORD PTR table$[rbp]
	cvtss2sd xmm3, DWORD PTR [rax+196]
	movsd	QWORD PTR tv235[rbp], xmm3
	movsd	QWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movq	r9, xmm3
	movq	r8, xmm2
	movsd	xmm0, QWORD PTR tv235[rbp]
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0EB@FOKPBOFF@CellPaddingX?3?5?$CF?41f?0?5CellSpacing@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3537
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+485]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+484]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:??_C@_0CP@NOMNLPPG@HoveredColumnBody?3?5?$CFd?0?5HoveredC@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3538
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+489]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+490]
	mov	rdx, QWORD PTR table$[rbp]
	movsx	edx, BYTE PTR [rdx+487]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rcx, OFFSET FLAT:??_C@_0DL@PBPICJCB@ResizedColumn?3?5?$CFd?0?5ReorderColum@
	call	?BulletText@ImGui@@YAXPEBDZZ		; ImGui::BulletText
; Line 3540
	xorps	xmm0, xmm0
	movss	DWORD PTR sum_weights$[rbp], xmm0
; Line 3541
	mov	DWORD PTR n$5[rbp], 0
	jmp	SHORT $LN4@DebugNodeT
$LN2@DebugNodeT:
	mov	eax, DWORD PTR n$5[rbp]
	inc	eax
	mov	DWORD PTR n$5[rbp], eax
$LN4@DebugNodeT:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR n$5[rbp], eax
	jge	SHORT $LN3@DebugNodeT
; Line 3542
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv263[rbp], rax
	mov	edx, DWORD PTR n$5[rbp]
	mov	rcx, QWORD PTR tv263[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN13@DebugNodeT
; Line 3543
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv272[rbp], rax
	mov	edx, DWORD PTR n$5[rbp]
	mov	rcx, QWORD PTR tv272[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movss	xmm0, DWORD PTR sum_weights$[rbp]
	addss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR sum_weights$[rbp], xmm0
$LN13@DebugNodeT:
	jmp	$LN2@DebugNodeT
$LN3@DebugNodeT:
; Line 3544
	mov	DWORD PTR n$6[rbp], 0
	jmp	SHORT $LN7@DebugNodeT
$LN5@DebugNodeT:
	mov	eax, DWORD PTR n$6[rbp]
	inc	eax
	mov	DWORD PTR n$6[rbp], eax
$LN7@DebugNodeT:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR n$6[rbp], eax
	jge	$LN6@DebugNodeT
; Line 3546
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv283[rbp], rax
	mov	edx, DWORD PTR n$6[rbp]
	mov	rcx, QWORD PTR tv283[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$7[rbp], rax
; Line 3547
	mov	edx, DWORD PTR n$6[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z ; ImGui::TableGetColumnName
	mov	QWORD PTR name$8[rbp], rax
; Line 3548
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN24@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_09BHNPHONE@NoResize?5@
	mov	QWORD PTR tv291[rbp], rax
	jmp	SHORT $LN25@DebugNodeT
$LN24@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv291[rbp], rax
$LN25@DebugNodeT:
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN26@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_0M@IGDNFKMD@WidthFixed?5@
	mov	QWORD PTR tv296[rbp], rax
	jmp	SHORT $LN27@DebugNodeT
$LN26@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv296[rbp], rax
$LN27@DebugNodeT:
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN28@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_0O@PEPBBILL@WidthStretch?5@
	mov	QWORD PTR tv301[rbp], rax
	jmp	SHORT $LN29@DebugNodeT
$LN28@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv301[rbp], rax
$LN29@DebugNodeT:
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv446[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax+48]
	mov	DWORD PTR tv444[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN32@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_06FEBPAKFP@?5?$CIAsc?$CJ@
	mov	QWORD PTR tv316[rbp], rax
	jmp	SHORT $LN33@DebugNodeT
$LN32@DebugNodeT:
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	movzx	eax, al
	cmp	eax, 2
	jne	SHORT $LN30@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_06PFKLCOBM@?5?$CIDes?$CJ@
	mov	QWORD PTR tv315[rbp], rax
	jmp	SHORT $LN31@DebugNodeT
$LN30@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv315[rbp], rax
$LN31@DebugNodeT:
	mov	rax, QWORD PTR tv315[rbp]
	mov	QWORD PTR tv316[rbp], rax
$LN33@DebugNodeT:
	mov	rax, QWORD PTR column$7[rbp]
	movsx	eax, BYTE PTR [rax+86]
	mov	DWORD PTR tv448[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	subss	xmm0, DWORD PTR [rcx+52]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv450[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	subss	xmm0, DWORD PTR [rcx+52]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv452[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	subss	xmm0, DWORD PTR [rcx+52]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv454[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	subss	xmm0, DWORD PTR [rcx+52]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv456[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+40]
	subss	xmm0, DWORD PTR [rcx+32]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv458[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+40]
	movsd	QWORD PTR tv460[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+32]
	movsd	QWORD PTR tv462[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+8]
	cvtss2sd xmm0, xmm0
	movsd	QWORD PTR tv464[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+12]
	movsd	QWORD PTR tv466[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+8]
	movsd	QWORD PTR tv442[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN34@DebugNodeT
	mov	rax, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	divss	xmm0, DWORD PTR sum_weights$[rbp]
	mulss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR tv376[rbp], xmm0
	jmp	SHORT $LN35@DebugNodeT
$LN34@DebugNodeT:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv376[rbp], xmm0
$LN35@DebugNodeT:
	cvtss2sd xmm0, DWORD PTR tv376[rbp]
	movsd	QWORD PTR tv468[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+24]
	movsd	QWORD PTR tv470[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+20]
	movsd	QWORD PTR tv472[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+16]
	movsd	QWORD PTR tv474[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	cvtss2sd xmm0, DWORD PTR [rax+4]
	movsd	QWORD PTR tv476[rbp], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+89]
	mov	DWORD PTR tv478[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+88]
	mov	DWORD PTR tv480[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+96]
	mov	DWORD PTR tv482[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+95]
	mov	DWORD PTR tv484[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+94]
	mov	DWORD PTR tv486[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+93]
	mov	DWORD PTR tv488[rbp], eax
	mov	rax, QWORD PTR column$7[rbp]
	movzx	eax, BYTE PTR [rax+90]
	mov	DWORD PTR tv440[rbp], eax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+499]
	cmp	DWORD PTR n$6[rbp], eax
	jge	SHORT $LN36@DebugNodeT
	lea	rax, OFFSET FLAT:??_C@_09LODDIFJL@?5?$CIFrozen?$CJ@
	mov	QWORD PTR tv415[rbp], rax
	jmp	SHORT $LN37@DebugNodeT
$LN36@DebugNodeT:
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv415[rbp], rax
$LN37@DebugNodeT:
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+276]
	cvtss2sd xmm0, xmm0
	mov	rax, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+276]
	cvtss2sd xmm1, xmm1
	mov	rax, QWORD PTR column$7[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	rcx, QWORD PTR tv291[rbp]
	mov	QWORD PTR [rsp+296], rcx
	mov	rcx, QWORD PTR tv296[rbp]
	mov	QWORD PTR [rsp+288], rcx
	mov	rcx, QWORD PTR tv301[rbp]
	mov	QWORD PTR [rsp+280], rcx
	mov	ecx, DWORD PTR tv446[rbp]
	mov	DWORD PTR [rsp+272], ecx
	mov	ecx, DWORD PTR tv444[rbp]
	mov	DWORD PTR [rsp+264], ecx
	mov	rcx, QWORD PTR tv316[rbp]
	mov	QWORD PTR [rsp+256], rcx
	mov	ecx, DWORD PTR tv448[rbp]
	mov	DWORD PTR [rsp+248], ecx
	movsd	xmm2, QWORD PTR tv450[rbp]
	movsd	QWORD PTR [rsp+240], xmm2
	movsd	xmm2, QWORD PTR tv452[rbp]
	movsd	QWORD PTR [rsp+232], xmm2
	movsd	xmm2, QWORD PTR tv454[rbp]
	movsd	QWORD PTR [rsp+224], xmm2
	movsd	xmm2, QWORD PTR tv456[rbp]
	movsd	QWORD PTR [rsp+216], xmm2
	movsd	xmm2, QWORD PTR tv458[rbp]
	movsd	QWORD PTR [rsp+208], xmm2
	movsd	xmm2, QWORD PTR tv460[rbp]
	movsd	QWORD PTR [rsp+200], xmm2
	movsd	xmm2, QWORD PTR tv462[rbp]
	movsd	QWORD PTR [rsp+192], xmm2
	movsd	xmm2, QWORD PTR tv464[rbp]
	movsd	QWORD PTR [rsp+184], xmm2
	movsd	xmm2, QWORD PTR tv466[rbp]
	movsd	QWORD PTR [rsp+176], xmm2
	movsd	xmm2, QWORD PTR tv442[rbp]
	movsd	QWORD PTR [rsp+168], xmm2
	movsd	xmm2, QWORD PTR tv468[rbp]
	movsd	QWORD PTR [rsp+160], xmm2
	movsd	xmm2, QWORD PTR tv470[rbp]
	movsd	QWORD PTR [rsp+152], xmm2
	movsd	xmm2, QWORD PTR tv472[rbp]
	movsd	QWORD PTR [rsp+144], xmm2
	movsd	xmm2, QWORD PTR tv474[rbp]
	movsd	QWORD PTR [rsp+136], xmm2
	movsd	xmm2, QWORD PTR tv476[rbp]
	movsd	QWORD PTR [rsp+128], xmm2
	mov	ecx, DWORD PTR tv478[rbp]
	mov	DWORD PTR [rsp+120], ecx
	mov	ecx, DWORD PTR tv480[rbp]
	mov	DWORD PTR [rsp+112], ecx
	mov	ecx, DWORD PTR tv482[rbp]
	mov	DWORD PTR [rsp+104], ecx
	mov	ecx, DWORD PTR tv484[rbp]
	mov	DWORD PTR [rsp+96], ecx
	mov	ecx, DWORD PTR tv486[rbp]
	mov	DWORD PTR [rsp+88], ecx
	mov	ecx, DWORD PTR tv488[rbp]
	mov	DWORD PTR [rsp+80], ecx
	mov	ecx, DWORD PTR tv440[rbp]
	mov	DWORD PTR [rsp+72], ecx
	mov	rcx, QWORD PTR tv415[rbp]
	mov	QWORD PTR [rsp+64], rcx
	movsd	QWORD PTR [rsp+56], xmm0
	movsd	QWORD PTR [rsp+48], xmm1
	mov	rcx, QWORD PTR name$8[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR n$6[rbp]
	lea	r8, OFFSET FLAT:??_C@_0BHH@CNHMONCM@Column?5?$CFd?5order?5?$CFd?5?8?$CFs?8?3?5offset@
	mov	edx, 512				; 00000200H
	lea	rcx, QWORD PTR buf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 3564
	call	?Bullet@ImGui@@YAXXZ			; ImGui::Bullet
; Line 3565
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9, rax
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR buf$[rbp]
	call	?Selectable@ImGui@@YA_NPEBD_NHAEBUImVec2@@@Z ; ImGui::Selectable
; Line 3566
	xor	ecx, ecx
	call	?IsItemHovered@ImGui@@YA_NH@Z		; ImGui::IsItemHovered
	movzx	eax, al
	test	eax, eax
	je	$LN14@DebugNodeT
; Line 3568
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+256]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR column$7[rbp]
	movss	xmm3, DWORD PTR [rax+12]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm2, DWORD PTR [rax+248]
	mov	rax, QWORD PTR column$7[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR r$9[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 3569
	call	?GetForegroundDrawList@ImGui@@YAPEAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
	mov	QWORD PTR tv522[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+48], xmm0
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, -16711681				; ff00ffffH
	lea	r8, QWORD PTR r$9[rbp+8]
	lea	rdx, QWORD PTR r$9[rbp]
	mov	rcx, QWORD PTR tv522[rbp]
	call	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
$LN14@DebugNodeT:
; Line 3571
	jmp	$LN5@DebugNodeT
$LN6@DebugNodeT:
; Line 3572
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z ; ImGui::TableGetBoundSettings
	mov	QWORD PTR settings$10[rbp], rax
	cmp	QWORD PTR settings$10[rbp], 0
	je	SHORT $LN15@DebugNodeT
; Line 3573
	mov	rcx, QWORD PTR settings$10[rbp]
	call	?DebugNodeTableSettings@ImGui@@YAXPEAUImGuiTableSettings@@@Z ; ImGui::DebugNodeTableSettings
$LN15@DebugNodeT:
; Line 3574
	movzx	eax, BYTE PTR clear_settings$[rbp]
	test	eax, eax
	je	SHORT $LN16@DebugNodeT
; Line 3575
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+514], 1
$LN16@DebugNodeT:
; Line 3576
	call	?TreePop@ImGui@@YAXXZ			; ImGui::TreePop
$LN1@DebugNodeT:
; Line 3577
	lea	rcx, QWORD PTR [rbp-240]
	lea	rdx, OFFSET FLAT:?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1912]
	pop	rdi
	pop	rbp
	ret	0
?DebugNodeTable@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::DebugNodeTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z
_TEXT	SEGMENT
g$ = 8
settings$1 = 40
tv72 = 248
id$ = 288
?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z PROC ; ImGui::TableSettingsFindByID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3164
$LN7:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3166
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3167
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	rcx, rax
	call	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
	mov	QWORD PTR settings$1[rbp], rax
	jmp	SHORT $LN4@TableSetti
$LN2@TableSetti:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv72[rbp], rax
	mov	rdx, QWORD PTR settings$1[rbp]
	mov	rcx, QWORD PTR tv72[rbp]
	call	?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z ; ImChunkStream<ImGuiTableSettings>::next_chunk
	mov	QWORD PTR settings$1[rbp], rax
$LN4@TableSetti:
	cmp	QWORD PTR settings$1[rbp], 0
	je	SHORT $LN3@TableSetti
; Line 3168
	mov	rax, QWORD PTR settings$1[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN5@TableSetti
; Line 3169
	mov	rax, QWORD PTR settings$1[rbp]
	jmp	SHORT $LN1@TableSetti
$LN5@TableSetti:
	jmp	SHORT $LN2@TableSetti
$LN3@TableSetti:
; Line 3170
	xor	eax, eax
$LN1@TableSetti:
; Line 3171
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z ENDP ; ImGui::TableSettingsFindByID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z
_TEXT	SEGMENT
g$ = 8
settings$ = 40
tv71 = 248
id$ = 288
columns_count$ = 296
?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z PROC ; ImGui::TableSettingsCreate, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3155
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3156
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3157
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv71[rbp], rax
	mov	ecx, DWORD PTR columns_count$[rbp]
	call	?TableSettingsCalcChunkSize@@YA_KH@Z	; TableSettingsCalcChunkSize
	mov	rdx, rax
	mov	rcx, QWORD PTR tv71[rbp]
	call	?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z ; ImChunkStream<ImGuiTableSettings>::alloc_chunk
	mov	QWORD PTR settings$[rbp], rax
; Line 3158
	mov	r9d, DWORD PTR columns_count$[rbp]
	mov	r8d, DWORD PTR columns_count$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR settings$[rbp]
	call	?TableSettingsInit@@YAXPEAUImGuiTableSettings@@IHH@Z ; TableSettingsInit
; Line 3159
	mov	rax, QWORD PTR settings$[rbp]
; Line 3160
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z ENDP ; ImGui::TableSettingsCreate
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z
_TEXT	SEGMENT
g$ = 8
ini_handler$ = 48
tv73 = 328
__$ArrayPad$ = 336
context$ = 384
?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z PROC ; ImGui::TableSettingsInstallHandler, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3425
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3426
	mov	rax, QWORD PTR context$[rbp]
	mov	QWORD PTR g$[rbp], rax
; Line 3427
	lea	rcx, QWORD PTR ini_handler$[rbp]
	call	??0ImGuiSettingsHandler@@QEAA@XZ	; ImGuiSettingsHandler::ImGuiSettingsHandler
; Line 3428
	lea	rax, OFFSET FLAT:??_C@_05LFBINIGO@Table@
	mov	QWORD PTR ini_handler$[rbp], rax
; Line 3429
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_05LFBINIGO@Table@
	call	?ImHashStr@@YAIPEBD_KI@Z		; ImHashStr
	mov	DWORD PTR ini_handler$[rbp+8], eax
; Line 3430
	lea	rax, OFFSET FLAT:?TableSettingsHandler_ClearAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z ; TableSettingsHandler_ClearAll
	mov	QWORD PTR ini_handler$[rbp+16], rax
; Line 3431
	lea	rax, OFFSET FLAT:?TableSettingsHandler_ReadOpen@@YAPEAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEBD@Z ; TableSettingsHandler_ReadOpen
	mov	QWORD PTR ini_handler$[rbp+32], rax
; Line 3432
	lea	rax, OFFSET FLAT:?TableSettingsHandler_ReadLine@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAXPEBD@Z ; TableSettingsHandler_ReadLine
	mov	QWORD PTR ini_handler$[rbp+40], rax
; Line 3433
	lea	rax, OFFSET FLAT:?TableSettingsHandler_ApplyAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@@Z ; TableSettingsHandler_ApplyAll
	mov	QWORD PTR ini_handler$[rbp+48], rax
; Line 3434
	lea	rax, OFFSET FLAT:?TableSettingsHandler_WriteAll@@YAXPEAUImGuiContext@@PEAUImGuiSettingsHandler@@PEAUImGuiTextBuffer@@@Z ; TableSettingsHandler_WriteAll
	mov	QWORD PTR ini_handler$[rbp+56], rax
; Line 3435
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12408				; 00003078H
	mov	QWORD PTR tv73[rbp], rax
	lea	rdx, QWORD PTR ini_handler$[rbp]
	mov	rcx, QWORD PTR tv73[rbp]
	call	?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z ; ImVector<ImGuiSettingsHandler>::push_back
; Line 3436
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?TableSettingsInstallHandler@ImGui@@YAXPEAUImGuiContext@@@Z ENDP ; ImGui::TableSettingsInstallHandler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$1 = 8
settings$2 = 40
tv72 = 248
table$ = 288
?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z PROC ; ImGui::TableGetBoundSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3175
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3176
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+108], -1
	je	$LN2@TableGetBo
; Line 3178
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$1[rbp], rax
; Line 3179
	mov	rax, QWORD PTR g$1[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR [rax+108]
	mov	rcx, QWORD PTR tv72[rbp]
	call	?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z ; ImChunkStream<ImGuiTableSettings>::ptr_from_offset
	mov	QWORD PTR settings$2[rbp], rax
; Line 3180
	mov	rax, QWORD PTR settings$2[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN5@TableGetBo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DE@KGKHJKNP@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@TableGetBo:
; Line 3181
	mov	rax, QWORD PTR settings$2[rbp]
	movsx	eax, BYTE PTR [rax+13]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jl	SHORT $LN3@TableGetBo
; Line 3182
	mov	rax, QWORD PTR settings$2[rbp]
	jmp	SHORT $LN1@TableGetBo
$LN3@TableGetBo:
; Line 3183
	mov	rax, QWORD PTR settings$2[rbp]
	mov	DWORD PTR [rax], 0
$LN2@TableGetBo:
; Line 3185
	xor	eax, eax
$LN1@TableGetBo:
; Line 3186
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z ENDP ; ImGui::TableGetBoundSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
table$ = 224
?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableResetSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3190
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3191
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+507], 1
; Line 3192
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+514], 0
; Line 3193
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+511], 0
; Line 3194
	mov	rax, QWORD PTR table$[rbp]
	mov	DWORD PTR [rax+104], 0
; Line 3195
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableResetSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
settings$ = 40
column$ = 72
column_settings$ = 104
save_ref_scale$ = 132
n$1 = 164
width_or_weight$2 = 196
tv224 = 404
tv211 = 404
tv179 = 404
tv154 = 404
tv82 = 408
table$ = 448
?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableSaveSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3198
$LN25:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3199
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 0
; Line 3200
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN5@TableSaveS
; Line 3201
	jmp	$LN1@TableSaveS
$LN5@TableSaveS:
; Line 3204
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3205
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z ; ImGui::TableGetBoundSettings
	mov	QWORD PTR settings$[rbp], rax
; Line 3206
	cmp	QWORD PTR settings$[rbp], 0
	jne	SHORT $LN6@TableSaveS
; Line 3208
	mov	rax, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR [rax+116]
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	?TableSettingsCreate@ImGui@@YAPEAUImGuiTableSettings@@IH@Z ; ImGui::TableSettingsCreate
	mov	QWORD PTR settings$[rbp], rax
; Line 3209
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv82[rbp], rax
	mov	rdx, QWORD PTR settings$[rbp]
	mov	rcx, QWORD PTR tv82[rbp]
	call	?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ; ImChunkStream<ImGuiTableSettings>::offset_from_ptr
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+108], eax
$LN6@TableSaveS:
; Line 3211
	mov	rax, QWORD PTR settings$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR [rcx+116]
	mov	BYTE PTR [rax+12], cl
; Line 3214
	mov	rax, QWORD PTR settings$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rcx]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN13@TableSaveS
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 16
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DE@KGKHJKNP@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@TableSaveS:
; Line 3215
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jne	SHORT $LN14@TableSaveS
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+13]
	mov	rcx, QWORD PTR settings$[rbp]
	movsx	ecx, BYTE PTR [rcx+12]
	cmp	eax, ecx
	jge	SHORT $LN15@TableSaveS
$LN14@TableSaveS:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 17
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1MK@NEOBPBEE@?$AAs?$AAe?$AAt?$AAt?$AAi?$AAn?$AAg?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@TableSaveS:
; Line 3216
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR column$[rbp], rax
; Line 3217
	mov	rcx, QWORD PTR settings$[rbp]
	call	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
	mov	QWORD PTR column_settings$[rbp], rax
; Line 3219
	mov	BYTE PTR save_ref_scale$[rbp], 0
; Line 3220
	mov	rax, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rax+4], 0
; Line 3221
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@TableSaveS
$LN2@TableSaveS:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR column$[rbp], rax
	mov	rax, QWORD PTR column_settings$[rbp]
	add	rax, 12
	mov	QWORD PTR column_settings$[rbp], rax
$LN4@TableSaveS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR n$1[rbp], eax
	jge	$LN3@TableSaveS
; Line 3223
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN16@TableSaveS
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR tv154[rbp], xmm0
	jmp	SHORT $LN17@TableSaveS
$LN16@TableSaveS:
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv154[rbp], xmm0
$LN17@TableSaveS:
	movss	xmm0, DWORD PTR tv154[rbp]
	movss	DWORD PTR width_or_weight$2[rbp], xmm0
; Line 3224
	mov	rax, QWORD PTR column_settings$[rbp]
	movss	xmm0, DWORD PTR width_or_weight$2[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 3225
	mov	rax, QWORD PTR column_settings$[rbp]
	movzx	ecx, BYTE PTR n$1[rbp]
	mov	BYTE PTR [rax+8], cl
; Line 3226
	mov	rax, QWORD PTR column_settings$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+82]
	mov	BYTE PTR [rax+9], cl
; Line 3227
	mov	rax, QWORD PTR column_settings$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+86]
	mov	BYTE PTR [rax+10], cl
; Line 3228
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	and	al, 3
	mov	rcx, QWORD PTR column_settings$[rbp]
	movzx	ecx, BYTE PTR [rcx+11]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column_settings$[rbp]
	mov	BYTE PTR [rcx+11], al
; Line 3229
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+91]
	and	al, 1
	shl	al, 2
	mov	rcx, QWORD PTR column_settings$[rbp]
	movzx	ecx, BYTE PTR [rcx+11]
	and	cl, 251					; 000000fbH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column_settings$[rbp]
	mov	BYTE PTR [rcx+11], al
; Line 3230
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN18@TableSaveS
	mov	DWORD PTR tv179[rbp], 1
	jmp	SHORT $LN19@TableSaveS
$LN18@TableSaveS:
	mov	DWORD PTR tv179[rbp], 0
$LN19@TableSaveS:
	movzx	eax, BYTE PTR tv179[rbp]
	and	al, 1
	shl	al, 3
	mov	rcx, QWORD PTR column_settings$[rbp]
	movzx	ecx, BYTE PTR [rcx+11]
	and	cl, 247					; 000000f7H
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column_settings$[rbp]
	mov	BYTE PTR [rcx+11], al
; Line 3231
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN7@TableSaveS
; Line 3232
	mov	BYTE PTR save_ref_scale$[rbp], 1
$LN7@TableSaveS:
; Line 3237
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR width_or_weight$2[rbp]
	ucomiss	xmm0, DWORD PTR [rax+28]
	jp	SHORT $LN24@TableSaveS
	je	SHORT $LN8@TableSaveS
$LN24@TableSaveS:
; Line 3238
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 1
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN8@TableSaveS:
; Line 3239
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+82]
	cmp	eax, DWORD PTR n$1[rbp]
	je	SHORT $LN9@TableSaveS
; Line 3240
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 2
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN9@TableSaveS:
; Line 3241
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN10@TableSaveS
; Line 3242
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 8
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN10@TableSaveS:
; Line 3243
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN20@TableSaveS
	mov	DWORD PTR tv211[rbp], 1
	jmp	SHORT $LN21@TableSaveS
$LN20@TableSaveS:
	mov	DWORD PTR tv211[rbp], 0
$LN21@TableSaveS:
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+91]
	cmp	eax, DWORD PTR tv211[rbp]
	je	SHORT $LN11@TableSaveS
; Line 3244
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	or	eax, 4
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN11@TableSaveS:
; Line 3245
	jmp	$LN2@TableSaveS
$LN3@TableSaveS:
; Line 3246
	mov	rax, QWORD PTR settings$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+4]
	and	eax, ecx
	mov	rcx, QWORD PTR settings$[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 3247
	movzx	eax, BYTE PTR save_ref_scale$[rbp]
	test	eax, eax
	je	SHORT $LN22@TableSaveS
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+240]
	movss	DWORD PTR tv224[rbp], xmm0
	jmp	SHORT $LN23@TableSaveS
$LN22@TableSaveS:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv224[rbp], xmm0
$LN23@TableSaveS:
	mov	rax, QWORD PTR settings$[rbp]
	movss	xmm0, DWORD PTR tv224[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3249
	call	?MarkIniSettingsDirty@ImGui@@YAXXZ	; ImGui::MarkIniSettingsDirty
$LN1@TableSaveS:
; Line 3250
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableSaveSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
settings$ = 40
column_settings$ = 72
display_order_mask$ = 104
data_n$1 = 132
column_n$2 = 164
column$3 = 200
expected_display_order_mask$ = 232
column_n$4 = 260
column_n$5 = 292
tv169 = 500
tv273 = 504
tv214 = 504
tv196 = 504
tv186 = 504
tv141 = 504
tv85 = 504
tv296 = 512
tv209 = 512
table$ = 560
?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableLoadSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3253
$LN27:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3254
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3255
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+511], 0
; Line 3256
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN11@TableLoadS
; Line 3257
	jmp	$LN1@TableLoadS
$LN11@TableLoadS:
; Line 3261
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+108], -1
	jne	SHORT $LN12@TableLoadS
; Line 3263
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rax]
	call	?TableSettingsFindByID@ImGui@@YAPEAUImGuiTableSettings@@I@Z ; ImGui::TableSettingsFindByID
	mov	QWORD PTR settings$[rbp], rax
; Line 3264
	cmp	QWORD PTR settings$[rbp], 0
	jne	SHORT $LN14@TableLoadS
; Line 3265
	jmp	$LN1@TableLoadS
$LN14@TableLoadS:
; Line 3266
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	je	SHORT $LN15@TableLoadS
; Line 3267
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
$LN15@TableLoadS:
; Line 3268
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv85[rbp], rax
	mov	rdx, QWORD PTR settings$[rbp]
	mov	rcx, QWORD PTR tv85[rbp]
	call	?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ; ImChunkStream<ImGuiTableSettings>::offset_from_ptr
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+108], eax
; Line 3269
	jmp	SHORT $LN13@TableLoadS
$LN12@TableLoadS:
; Line 3272
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetBoundSettings@ImGui@@YAPEAUImGuiTableSettings@@PEAUImGuiTable@@@Z ; ImGui::TableGetBoundSettings
	mov	QWORD PTR settings$[rbp], rax
$LN13@TableLoadS:
; Line 3275
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR settings$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+104], ecx
; Line 3276
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR settings$[rbp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+240], xmm0
; Line 3279
	mov	rcx, QWORD PTR settings$[rbp]
	call	?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ; ImGuiTableSettings::GetColumnSettings
	mov	QWORD PTR column_settings$[rbp], rax
; Line 3280
	mov	QWORD PTR display_order_mask$[rbp], 0
; Line 3281
	mov	DWORD PTR data_n$1[rbp], 0
	jmp	SHORT $LN4@TableLoadS
$LN2@TableLoadS:
	mov	eax, DWORD PTR data_n$1[rbp]
	inc	eax
	mov	DWORD PTR data_n$1[rbp], eax
	mov	rax, QWORD PTR column_settings$[rbp]
	add	rax, 12
	mov	QWORD PTR column_settings$[rbp], rax
$LN4@TableLoadS:
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	cmp	DWORD PTR data_n$1[rbp], eax
	jge	$LN3@TableLoadS
; Line 3283
	mov	rax, QWORD PTR column_settings$[rbp]
	movsx	eax, BYTE PTR [rax+8]
	mov	DWORD PTR column_n$2[rbp], eax
; Line 3284
	cmp	DWORD PTR column_n$2[rbp], 0
	jl	SHORT $LN17@TableLoadS
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$2[rbp], eax
	jl	SHORT $LN16@TableLoadS
$LN17@TableLoadS:
; Line 3285
	jmp	SHORT $LN2@TableLoadS
$LN16@TableLoadS:
; Line 3287
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv141[rbp], rax
	mov	edx, DWORD PTR column_n$2[rbp]
	mov	rcx, QWORD PTR tv141[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$3[rbp], rax
; Line 3288
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN18@TableLoadS
; Line 3290
	mov	rax, QWORD PTR column_settings$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@TableLoadS
; Line 3291
	mov	rax, QWORD PTR column$3[rbp]
	mov	rcx, QWORD PTR column_settings$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+24], xmm0
	jmp	SHORT $LN20@TableLoadS
$LN19@TableLoadS:
; Line 3293
	mov	rax, QWORD PTR column$3[rbp]
	mov	rcx, QWORD PTR column_settings$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax+16], xmm0
$LN20@TableLoadS:
; Line 3294
	mov	rax, QWORD PTR column$3[rbp]
	mov	BYTE PTR [rax+99], 0
$LN18@TableLoadS:
; Line 3296
	mov	rax, QWORD PTR settings$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN21@TableLoadS
; Line 3297
	mov	rax, QWORD PTR column$3[rbp]
	mov	rcx, QWORD PTR column_settings$[rbp]
	movzx	ecx, BYTE PTR [rcx+9]
	mov	BYTE PTR [rax+82], cl
	jmp	SHORT $LN22@TableLoadS
$LN21@TableLoadS:
; Line 3299
	mov	rax, QWORD PTR column$3[rbp]
	movzx	ecx, BYTE PTR column_n$2[rbp]
	mov	BYTE PTR [rax+82], cl
$LN22@TableLoadS:
; Line 3300
	mov	rax, QWORD PTR column$3[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	ecx, 1
	mov	QWORD PTR tv273[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv273[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR display_order_mask$[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR display_order_mask$[rbp], rax
; Line 3301
	mov	rax, QWORD PTR column_settings$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	shr	al, 2
	and	al, 1
	mov	BYTE PTR tv169[rbp], al
	mov	rax, QWORD PTR column$3[rbp]
	movzx	ecx, BYTE PTR tv169[rbp]
	mov	BYTE PTR [rax+92], cl
	mov	rax, QWORD PTR column$3[rbp]
	movzx	ecx, BYTE PTR tv169[rbp]
	mov	BYTE PTR [rax+91], cl
; Line 3302
	mov	rax, QWORD PTR column$3[rbp]
	mov	rcx, QWORD PTR column_settings$[rbp]
	movzx	ecx, BYTE PTR [rcx+10]
	mov	BYTE PTR [rax+86], cl
; Line 3303
	mov	rax, QWORD PTR column_settings$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	and	al, 3
	and	al, 3
	mov	rcx, QWORD PTR column$3[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$3[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 3304
	jmp	$LN2@TableLoadS
$LN3@TableLoadS:
; Line 3307
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN25@TableLoadS
	mov	QWORD PTR tv186[rbp], -1
	jmp	SHORT $LN26@TableLoadS
$LN25@TableLoadS:
	mov	rax, QWORD PTR settings$[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	ecx, 1
	mov	QWORD PTR tv296[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv296[rbp]
	shl	rax, cl
	dec	rax
	mov	QWORD PTR tv186[rbp], rax
$LN26@TableLoadS:
	mov	rax, QWORD PTR tv186[rbp]
	mov	QWORD PTR expected_display_order_mask$[rbp], rax
; Line 3308
	mov	rax, QWORD PTR expected_display_order_mask$[rbp]
	cmp	QWORD PTR display_order_mask$[rbp], rax
	je	SHORT $LN23@TableLoadS
; Line 3309
	mov	DWORD PTR column_n$4[rbp], 0
	jmp	SHORT $LN7@TableLoadS
$LN5@TableLoadS:
	mov	eax, DWORD PTR column_n$4[rbp]
	inc	eax
	mov	DWORD PTR column_n$4[rbp], eax
$LN7@TableLoadS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$4[rbp], eax
	jge	SHORT $LN6@TableLoadS
; Line 3310
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv196[rbp], rax
	mov	edx, DWORD PTR column_n$4[rbp]
	mov	rcx, QWORD PTR tv196[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movzx	ecx, BYTE PTR column_n$4[rbp]
	mov	BYTE PTR [rax+82], cl
	jmp	SHORT $LN5@TableLoadS
$LN6@TableLoadS:
$LN23@TableLoadS:
; Line 3313
	mov	DWORD PTR column_n$5[rbp], 0
	jmp	SHORT $LN10@TableLoadS
$LN8@TableLoadS:
	mov	eax, DWORD PTR column_n$5[rbp]
	inc	eax
	mov	DWORD PTR column_n$5[rbp], eax
$LN10@TableLoadS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$5[rbp], eax
	jge	SHORT $LN9@TableLoadS
; Line 3314
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv214[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv209[rbp], rax
	mov	edx, DWORD PTR column_n$5[rbp]
	mov	rcx, QWORD PTR tv209[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+82]
	mov	edx, eax
	mov	rcx, QWORD PTR tv214[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movzx	ecx, BYTE PTR column_n$5[rbp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN8@TableLoadS
$LN9@TableLoadS:
$LN1@TableLoadS:
; Line 3315
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableLoadSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGcCompactSettings@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
required_memory$ = 36
settings$4 = 72
new_chunk_stream$ = 104
settings$5 = 152
tv155 = 360
tv138 = 360
tv131 = 360
tv72 = 360
__$ArrayPad$ = 368
?TableGcCompactSettings@ImGui@@YAXXZ PROC		; ImGui::TableGcCompactSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3482
$LN13:
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3483
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3484
	mov	DWORD PTR required_memory$[rbp], 0
; Line 3485
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	rcx, rax
	call	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
	mov	QWORD PTR settings$4[rbp], rax
	jmp	SHORT $LN4@TableGcCom
$LN2@TableGcCom:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv72[rbp], rax
	mov	rdx, QWORD PTR settings$4[rbp]
	mov	rcx, QWORD PTR tv72[rbp]
	call	?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z ; ImChunkStream<ImGuiTableSettings>::next_chunk
	mov	QWORD PTR settings$4[rbp], rax
$LN4@TableGcCom:
	cmp	QWORD PTR settings$4[rbp], 0
	je	SHORT $LN3@TableGcCom
; Line 3486
	mov	rax, QWORD PTR settings$4[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@TableGcCom
; Line 3487
	mov	rax, QWORD PTR settings$4[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	ecx, eax
	call	?TableSettingsCalcChunkSize@@YA_KH@Z	; TableSettingsCalcChunkSize
	mov	ecx, DWORD PTR required_memory$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR required_memory$[rbp], eax
$LN8@TableGcCom:
	jmp	SHORT $LN2@TableGcCom
$LN3@TableGcCom:
; Line 3488
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+12440]
	cmp	DWORD PTR required_memory$[rbp], eax
	jne	SHORT $LN9@TableGcCom
; Line 3489
	jmp	$LN1@TableGcCom
$LN9@TableGcCom:
; Line 3490
	lea	rcx, QWORD PTR new_chunk_stream$[rbp]
	call	??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
	npad	1
; Line 3491
	mov	edx, DWORD PTR required_memory$[rbp]
	lea	rcx, QWORD PTR new_chunk_stream$[rbp]
	call	?reserve@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::reserve
; Line 3492
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	rcx, rax
	call	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
	mov	QWORD PTR settings$5[rbp], rax
	jmp	SHORT $LN7@TableGcCom
$LN5@TableGcCom:
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv131[rbp], rax
	mov	rdx, QWORD PTR settings$5[rbp]
	mov	rcx, QWORD PTR tv131[rbp]
	call	?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z ; ImChunkStream<ImGuiTableSettings>::next_chunk
	mov	QWORD PTR settings$5[rbp], rax
$LN7@TableGcCom:
	cmp	QWORD PTR settings$5[rbp], 0
	je	SHORT $LN6@TableGcCom
; Line 3493
	mov	rax, QWORD PTR settings$5[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@TableGcCom
; Line 3494
	mov	rax, QWORD PTR settings$5[rbp]
	movsx	eax, BYTE PTR [rax+12]
	mov	ecx, eax
	call	?TableSettingsCalcChunkSize@@YA_KH@Z	; TableSettingsCalcChunkSize
	mov	QWORD PTR tv138[rbp], rax
	mov	rcx, QWORD PTR settings$5[rbp]
	movsx	ecx, BYTE PTR [rcx+12]
	call	?TableSettingsCalcChunkSize@@YA_KH@Z	; TableSettingsCalcChunkSize
	mov	rdx, rax
	lea	rcx, QWORD PTR new_chunk_stream$[rbp]
	call	?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z ; ImChunkStream<ImGuiTableSettings>::alloc_chunk
	mov	rdi, rax
	mov	rsi, QWORD PTR settings$5[rbp]
	mov	rax, QWORD PTR tv138[rbp]
	mov	rcx, rax
	rep movsb
$LN10@TableGcCom:
	jmp	$LN5@TableGcCom
$LN6@TableGcCom:
; Line 3495
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 12440				; 00003098H
	mov	QWORD PTR tv155[rbp], rax
	lea	rdx, QWORD PTR new_chunk_stream$[rbp]
	mov	rcx, QWORD PTR tv155[rbp]
	call	?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z ; ImChunkStream<ImGuiTableSettings>::swap
	npad	1
; Line 3496
	lea	rcx, QWORD PTR new_chunk_stream$[rbp]
	call	??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
$LN1@TableGcCom:
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TableGcCompactSettings@ImGui@@YAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+384]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TableGcCompactSettings@ImGui@@YAXXZ ENDP		; ImGui::TableGcCompactSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g$ = 8
required_memory$ = 36
settings$4 = 72
new_chunk_stream$ = 104
settings$5 = 152
tv155 = 360
tv138 = 360
tv131 = 360
tv72 = 360
__$ArrayPad$ = 368
?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA PROC ; `ImGui::TableGcCompactSettings'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR new_chunk_stream$[rbp]
	call	??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??TableGcCompactSettings@ImGui@@YAXXZ@4HA ENDP ; `ImGui::TableGcCompactSettings'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z
_TEXT	SEGMENT
temp_data$ = 224
?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z PROC ; ImGui::TableGcCompactTransientBuffers, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3475
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3476
	mov	rax, QWORD PTR temp_data$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ ; ImDrawListSplitter::ClearFreeMemory
; Line 3477
	mov	rax, QWORD PTR temp_data$[rbp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+4], xmm0
; Line 3478
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTableTempData@@@Z ENDP ; ImGui::TableGcCompactTransientBuffers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
n$1 = 36
tv133 = 248
tv88 = 248
tv130 = 256
table$ = 304
?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableGcCompactTransientBuffers, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3460
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3462
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3463
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+518]
	test	eax, eax
	je	SHORT $LN6@TableGcCom
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EA@HDPGNILG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAe?$AAm?$AAo?$AAr?$AAy?$AAC?$AAo@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@TableGcCom:
; Line 3464
	mov	rax, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+464], 0
; Line 3465
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 448				; 000001c0H
	mov	rcx, rax
	call	?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ ; ImVector<ImGuiTableColumnSortSpecs>::clear
; Line 3466
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
; Line 3467
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 408				; 00000198H
	mov	rcx, rax
	call	?clear@ImGuiTextBuffer@@QEAAXXZ		; ImGuiTextBuffer::clear
; Line 3468
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+518], 1
; Line 3469
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@TableGcCom
$LN2@TableGcCom:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@TableGcCom:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@TableGcCom
; Line 3470
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv88[rbp], rax
	mov	edx, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR tv88[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	ecx, -1
	mov	WORD PTR [rax+80], cx
	jmp	SHORT $LN2@TableGcCom
$LN3@TableGcCom:
; Line 3471
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8248				; 00002038H
	mov	QWORD PTR tv133[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv130[rbp], rax
	mov	rdx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR tv130[rbp]
	call	?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::GetIndex
	mov	edx, eax
	mov	rcx, QWORD PTR tv133[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax], xmm0
; Line 3472
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?TableGcCompactTransientBuffers@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableGcCompactTransientBuffers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
table_idx$ = 36
tv82 = 248
tv76 = 248
tv69 = 248
table$ = 288
?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z PROC		; ImGui::TableRemove, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3448
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3450
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3451
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::GetIndex
	mov	DWORD PTR table_idx$[rbp], eax
; Line 3454
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv76[rbp], rax
	mov	r8, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv76[rbp]
	call	?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::Remove
; Line 3455
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8248				; 00002038H
	mov	QWORD PTR tv82[rbp], rax
	mov	edx, DWORD PTR table_idx$[rbp]
	mov	rcx, QWORD PTR tv82[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax], xmm0
; Line 3456
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableRemove@ImGui@@YAXPEAUImGuiTable@@@Z ENDP		; ImGui::TableRemove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
column_n$1 = 4
column$2 = 40
tv72 = 248
table$ = 288
?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableSetColumnWidthAutoAll, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2161
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2162
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableSetCo
$LN2@TableSetCo:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableSetCo:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	SHORT $LN3@TableSetCo
; Line 2164
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv72[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv72[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$2[rbp], rax
; Line 2165
	mov	rax, QWORD PTR column$2[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	jne	SHORT $LN5@TableSetCo
	mov	rax, QWORD PTR column$2[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN5@TableSetCo
; Line 2166
	jmp	SHORT $LN2@TableSetCo
$LN5@TableSetCo:
; Line 2167
	mov	rax, QWORD PTR column$2[rbp]
	mov	BYTE PTR [rax+100], 1
; Line 2168
	mov	rax, QWORD PTR column$2[rbp]
	mov	BYTE PTR [rax+99], 2
; Line 2169
	jmp	SHORT $LN2@TableSetCo
$LN3@TableSetCo:
; Line 2170
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableSetColumnWidthAutoAll
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z
_TEXT	SEGMENT
column$ = 8
tv69 = 216
table$ = 256
column_n$ = 264
?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z PROC ; ImGui::TableSetColumnWidthAutoSingle, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2151
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2153
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 2154
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	jne	SHORT $LN2@TableSetCo
; Line 2155
	jmp	SHORT $LN1@TableSetCo
$LN2@TableSetCo:
; Line 2156
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+100], 1
; Line 2157
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$[rbp]
	mov	BYTE PTR [rax+486], cl
$LN1@TableSetCo:
; Line 2158
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z ENDP ; ImGui::TableSetColumnWidthAutoSingle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z
_TEXT	SEGMENT
column$ = 8
max_width$ = 36
min_column_distance$ = 68
tv69 = 280
table$ = 320
column_n$ = 328
?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z PROC ; ImGui::TableGetMaxColumnWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2019
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2020
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 2021
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR max_width$[rbp], xmm0
; Line 2022
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+196]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+188]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+204]
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+208]
	movss	DWORD PTR min_column_distance$[rbp], xmm0
; Line 2023
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	$LN2@TableGetMa
; Line 2027
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+499]
	cmp	eax, ecx
	jge	SHORT $LN4@TableGetMa
; Line 2029
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+499]
	mov	rcx, QWORD PTR column$[rbp]
	movsx	ecx, BYTE PTR [rcx+82]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR min_column_distance$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+300]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR column$[rbp]
	subss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR max_width$[rbp], xmm0
; Line 2030
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR max_width$[rbp]
	subss	xmm0, DWORD PTR [rax+192]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+196]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+208]
	movss	DWORD PTR max_width$[rbp], xmm0
$LN4@TableGetMa:
; Line 2032
	jmp	$LN3@TableGetMa
$LN2@TableGetMa:
; Line 2033
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 262144				; 00040000H
	test	eax, eax
	jne	$LN5@TableGetMa
; Line 2040
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	mov	rcx, QWORD PTR column$[rbp]
	movsx	ecx, BYTE PTR [rcx+83]
	sub	eax, ecx
	dec	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR min_column_distance$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+284]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR column$[rbp]
	subss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR max_width$[rbp], xmm0
; Line 2042
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR max_width$[rbp]
	subss	xmm0, DWORD PTR [rax+208]
	movss	DWORD PTR max_width$[rbp], xmm0
; Line 2043
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+196]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR max_width$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR max_width$[rbp], xmm0
; Line 2044
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR max_width$[rbp]
	subss	xmm0, DWORD PTR [rax+192]
	movss	DWORD PTR max_width$[rbp], xmm0
$LN5@TableGetMa:
$LN3@TableGetMa:
; Line 2046
	movss	xmm0, DWORD PTR max_width$[rbp]
; Line 2047
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z ENDP ; ImGui::TableGetMaxColumnWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z
_TEXT	SEGMENT
id$ = 4
table$ = 256
column_n$ = 264
instance_no$ = 272
?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z PROC ; ImGui::TableGetColumnResizeID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1589
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1590
	cmp	DWORD PTR column_n$[rbp], 0
	jl	SHORT $LN3@TableGetCo
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$[rbp], eax
	jl	SHORT $LN4@TableGetCo
$LN3@TableGetCo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GA@OFNPMLNE@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@TableGetCo:
; Line 1591
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR instance_no$[rbp]
	imul	ecx, DWORD PTR [rax+116]
	mov	eax, ecx
	mov	rcx, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	edx, DWORD PTR column_n$[rbp]
	add	edx, ecx
	mov	ecx, edx
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR id$[rbp], eax
; Line 1592
	mov	eax, DWORD PTR id$[rbp]
; Line 1593
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z ENDP ; ImGui::TableGetColumnResizeID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z
_TEXT	SEGMENT
column$ = 8
tv87 = 216
tv75 = 216
table$ = 256
column_n$ = 264
?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z PROC ; ImGui::TableGetColumnName, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1526
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1527
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN2@TableGetCo
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+483]
	cmp	DWORD PTR column_n$[rbp], eax
	jl	SHORT $LN2@TableGetCo
; Line 1528
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	jmp	SHORT $LN1@TableGetCo
$LN2@TableGetCo:
; Line 1529
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv75[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv75[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 1530
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, WORD PTR [rax+80]
	cmp	eax, -1
	jne	SHORT $LN3@TableGetCo
; Line 1531
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	jmp	SHORT $LN1@TableGetCo
$LN3@TableGetCo:
; Line 1532
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 408				; 00000198H
	mov	QWORD PTR tv87[rbp], rax
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, WORD PTR [rax+80]
	mov	edx, eax
	mov	rcx, QWORD PTR tv87[rbp]
	call	??A?$ImVector@D@@QEBAAEBDH@Z		; ImVector<char>::operator[]
$LN1@TableGetCo:
; Line 1533
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z ENDP ; ImGui::TableGetColumnName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z
_TEXT	SEGMENT
column$ = 8
x1$ = 36
x2$ = 68
tv69 = 280
__$ReturnUdt$ = 320
table$ = 328
column_n$ = 336
?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z PROC ; ImGui::TableGetCellBgRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1576
$LN5:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1577
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 1578
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x1$[rbp], xmm0
; Line 1579
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR x2$[rbp], xmm0
; Line 1580
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+84]
	cmp	eax, -1
	jne	SHORT $LN2@TableGetCe
; Line 1581
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR x1$[rbp]
	subss	xmm0, DWORD PTR [rax+204]
	movss	DWORD PTR x1$[rbp], xmm0
$LN2@TableGetCe:
; Line 1582
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+85]
	cmp	eax, -1
	jne	SHORT $LN3@TableGetCe
; Line 1583
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR x2$[rbp]
	addss	xmm0, DWORD PTR [rax+208]
	movss	DWORD PTR x2$[rbp], xmm0
$LN3@TableGetCe:
; Line 1584
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm2, DWORD PTR [rax+132]
	movss	xmm1, DWORD PTR x1$[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 1585
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z ENDP ; ImGui::TableGetCellBgRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
column$ = 8
window$ = 40
p_max_pos_x$ = 72
tv83 = 280
tv70 = 280
table$ = 320
?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z PROC		; ImGui::TableEndCell, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1987
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1988
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv70[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR [rax+124]
	mov	rcx, QWORD PTR tv70[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 1989
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR window$[rbp], rax
; Line 1993
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	shl	eax, 16
	sar	eax, 16
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@TableEndCe
; Line 1994
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR p_max_pos_x$[rbp], rax
	jmp	SHORT $LN3@TableEndCe
$LN2@TableEndCe:
; Line 1996
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+516]
	test	eax, eax
	je	SHORT $LN5@TableEndCe
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 68					; 00000044H
	mov	QWORD PTR tv83[rbp], rax
	jmp	SHORT $LN6@TableEndCe
$LN5@TableEndCe:
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR tv83[rbp], rax
$LN6@TableEndCe:
	mov	rax, QWORD PTR tv83[rbp]
	mov	QWORD PTR p_max_pos_x$[rbp], rax
$LN3@TableEndCe:
; Line 1997
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+240]
	mov	rax, QWORD PTR p_max_pos_x$[rbp]
	movss	xmm0, DWORD PTR [rax]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR p_max_pos_x$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 1998
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+244]
	addss	xmm0, DWORD PTR [rcx+200]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+136], xmm0
; Line 1999
	mov	rax, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+452]
	movss	DWORD PTR [rax+60], xmm0
; Line 2003
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+276]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+144]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+144], xmm0
; Line 2004
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z ENDP		; ImGui::TableEndCell
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z
_TEXT	SEGMENT
column$ = 8
window$ = 40
start_x$ = 68
g$ = 104
tv202 = 312
tv190 = 312
tv69 = 312
table$ = 352
column_n$ = 360
?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z PROC	; ImGui::TableBeginCell, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1930
$LN9:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1931
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 1932
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR window$[rbp], rax
; Line 1933
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR column_n$[rbp]
	mov	DWORD PTR [rax+124], ecx
; Line 1936
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+52]
	movss	DWORD PTR start_x$[rbp], xmm0
; Line 1937
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 65536				; 00010000H
	test	eax, eax
	je	SHORT $LN2@TableBegin
; Line 1938
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR start_x$[rbp]
	addss	xmm0, DWORD PTR [rax+148]
	movss	DWORD PTR start_x$[rbp], xmm0
$LN2@TableBegin:
; Line 1940
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR start_x$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 1941
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+132]
	addss	xmm0, DWORD PTR [rcx+200]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+220], xmm0
; Line 1942
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+216]
	movss	DWORD PTR [rax+240], xmm0
; Line 1943
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR start_x$[rbp]
	subss	xmm0, DWORD PTR [rax+16]
	mov	rax, QWORD PTR window$[rbp]
	subss	xmm0, DWORD PTR [rax+280]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+284], xmm0
; Line 1944
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+144]
	movss	DWORD PTR [rax+272], xmm0
; Line 1945
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+98]
	mov	rcx, QWORD PTR window$[rbp]
	mov	DWORD PTR [rcx+332], eax
; Line 1947
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+220]
	movss	DWORD PTR [rax+564], xmm0
; Line 1948
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rcx+52]
	movss	DWORD PTR [rax+560], xmm0
; Line 1949
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rcx+56]
	movss	DWORD PTR [rax+568], xmm0
; Line 1950
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rcx+60]
	movss	DWORD PTR [rax+452], xmm0
; Line 1953
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	jne	SHORT $LN3@TableBegin
; Line 1954
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+136]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+220], xmm0
$LN3@TableBegin:
; Line 1956
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+96]
	mov	BYTE PTR [rax+147], cl
; Line 1957
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+96]
	test	eax, eax
	je	SHORT $LN4@TableBegin
; Line 1959
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+292], 0
; Line 1960
	mov	rax, QWORD PTR window$[rbp]
	mov	DWORD PTR [rax+296], 0
$LN4@TableBegin:
; Line 1963
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN5@TableBegin
; Line 1966
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv190[rbp], rax
	mov	r8d, 2
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv190[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 1968
	jmp	SHORT $LN6@TableBegin
$LN5@TableBegin:
; Line 1972
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 1973
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv202[rbp], rax
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+87]
	mov	r8d, eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv202[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
$LN6@TableBegin:
; Line 1977
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1978
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN7@TableBegin
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+96]
	test	eax, eax
	jne	SHORT $LN7@TableBegin
; Line 1980
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 216				; 000000d8H
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_01DNKMNLPK@?$HM@
	mov	rcx, rax
	call	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z ; ImGui::LogRenderedText
; Line 1981
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [rax+12528], xmm0
$LN7@TableBegin:
; Line 1983
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z ENDP	; ImGui::TableBeginCell
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
bg_y1$ = 68
bg_y2$ = 100
unfreeze_rows_actual$ = 132
unfreeze_rows_request$ = 164
is_visible$ = 196
bg_col0$5 = 228
bg_col1$6 = 260
border_col$7 = 292
border_size$8 = 324
draw_cell_bg_color$9 = 356
draw_strong_bottom_border$10 = 388
row_rect$11 = 424
cell_data_end$12 = 472
cell_data$13 = 504
column$14 = 536
cell_bg_rect$15 = 568
column_n$16 = 612
column$17 = 648
y0$18 = 676
row_height$19 = 708
column_n$20 = 740
column$21 = 776
$T22 = 1380
$T23 = 1432
$T24 = 1476
$T25 = 1508
$T26 = 1540
$T27 = 1572
tv505 = 1588
tv458 = 1588
tv431 = 1588
tv197 = 1588
tv193 = 1588
tv169 = 1588
tv151 = 1588
tv138 = 1588
tv132 = 1588
tv553 = 1592
tv531 = 1592
tv517 = 1592
tv426 = 1592
tv415 = 1592
tv348 = 1592
tv317 = 1592
tv289 = 1592
tv279 = 1592
tv273 = 1592
tv263 = 1592
tv252 = 1592
tv225 = 1592
tv216 = 1592
tv542 = 1600
tv413 = 1600
tv346 = 1600
tv551 = 1608
tv411 = 1608
tv344 = 1608
tv549 = 1616
tv409 = 1616
__$ArrayPad$ = 1624
table$ = 1664
?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z PROC		; ImGui::TableEndRow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1726
$LN54:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1680				; 00000690H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 264				; 00000108H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1720]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1727
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1728
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 1729
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	cmp	QWORD PTR window$[rbp], rax
	je	SHORT $LN36@TableEndRo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@GFLHACMC@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAa?$AAb?$AAl?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN36@TableEndRo:
; Line 1730
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+506]
	test	eax, eax
	jne	SHORT $LN37@TableEndRo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@HHNDIFPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN37@TableEndRo:
; Line 1732
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+124], -1
	je	SHORT $LN11@TableEndRo
; Line 1733
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableEndCell
$LN11@TableEndRo:
; Line 1736
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+12476]
	test	eax, eax
	je	SHORT $LN12@TableEndRo
; Line 1737
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:??_C@_01DNKMNLPK@?$HM@
	xor	ecx, ecx
	call	?LogRenderedText@ImGui@@YAXPEBUImVec2@@PEBD1@Z ; ImGui::LogRenderedText
$LN12@TableEndRo:
; Line 1741
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+136]
	movss	DWORD PTR [rax+220], xmm0
; Line 1744
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+132]
	movss	DWORD PTR bg_y1$[rbp], xmm0
; Line 1745
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	movss	DWORD PTR bg_y2$[rbp], xmm0
; Line 1746
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+120]
	inc	eax
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+498]
	cmp	eax, ecx
	jne	SHORT $LN38@TableEndRo
	mov	BYTE PTR tv132[rbp], 1
	jmp	SHORT $LN39@TableEndRo
$LN38@TableEndRo:
	mov	BYTE PTR tv132[rbp], 0
$LN39@TableEndRo:
	movzx	eax, BYTE PTR tv132[rbp]
	mov	BYTE PTR unfreeze_rows_actual$[rbp], al
; Line 1747
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+120]
	inc	eax
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+497]
	cmp	eax, ecx
	jne	SHORT $LN40@TableEndRo
	mov	BYTE PTR tv138[rbp], 1
	jmp	SHORT $LN41@TableEndRo
$LN40@TableEndRo:
	mov	BYTE PTR tv138[rbp], 0
$LN41@TableEndRo:
	movzx	eax, BYTE PTR tv138[rbp]
	mov	BYTE PTR unfreeze_rows_request$[rbp], al
; Line 1748
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+120], 0
	jne	SHORT $LN13@TableEndRo
; Line 1749
	movss	xmm0, DWORD PTR bg_y2$[rbp]
	subss	xmm0, DWORD PTR bg_y1$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+216], xmm0
$LN13@TableEndRo:
; Line 1751
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR bg_y2$[rbp]
	comiss	xmm0, DWORD PTR [rax+296]
	jb	SHORT $LN42@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+304]
	comiss	xmm0, DWORD PTR bg_y1$[rbp]
	jb	SHORT $LN42@TableEndRo
	mov	BYTE PTR tv151[rbp], 1
	jmp	SHORT $LN43@TableEndRo
$LN42@TableEndRo:
	mov	BYTE PTR tv151[rbp], 0
$LN43@TableEndRo:
	movzx	eax, BYTE PTR tv151[rbp]
	mov	BYTE PTR is_visible$[rbp], al
; Line 1752
	movzx	eax, BYTE PTR is_visible$[rbp]
	test	eax, eax
	je	$LN14@TableEndRo
; Line 1755
	mov	DWORD PTR bg_col0$5[rbp], 0
; Line 1756
	mov	DWORD PTR bg_col1$6[rbp], 0
; Line 1757
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rcx+rax+160], 16777216	; 01000000H
	je	SHORT $LN15@TableEndRo
; Line 1758
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rcx+rax+160]
	mov	DWORD PTR bg_col0$5[rbp], eax
	jmp	SHORT $LN16@TableEndRo
$LN15@TableEndRo:
; Line 1759
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN17@TableEndRo
; Line 1760
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+156]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN44@TableEndRo
	mov	DWORD PTR tv169[rbp], 46		; 0000002eH
	jmp	SHORT $LN45@TableEndRo
$LN44@TableEndRo:
	mov	DWORD PTR tv169[rbp], 45		; 0000002dH
$LN45@TableEndRo:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv169[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR bg_col0$5[rbp], eax
$LN17@TableEndRo:
$LN16@TableEndRo:
; Line 1761
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rcx+rax+160], 16777216	; 01000000H
	je	SHORT $LN18@TableEndRo
; Line 1762
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rcx+rax+160]
	mov	DWORD PTR bg_col1$6[rbp], eax
$LN18@TableEndRo:
; Line 1765
	mov	DWORD PTR border_col$7[rbp], 0
; Line 1766
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR border_size$8[rbp], xmm0
; Line 1767
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+120], 0
	jg	SHORT $LN20@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+392]
	cmp	QWORD PTR [rax+400], rcx
	jne	SHORT $LN19@TableEndRo
$LN20@TableEndRo:
; Line 1768
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN21@TableEndRo
; Line 1769
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	shl	eax, 0
	sar	eax, 16
	and	eax, 1
	test	eax, eax
	je	SHORT $LN46@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR tv193[rbp], eax
	jmp	SHORT $LN47@TableEndRo
$LN46@TableEndRo:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+172]
	mov	DWORD PTR tv193[rbp], eax
$LN47@TableEndRo:
	mov	eax, DWORD PTR tv193[rbp]
	mov	DWORD PTR border_col$7[rbp], eax
$LN21@TableEndRo:
$LN19@TableEndRo:
; Line 1771
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+501]
	test	eax, eax
	jl	SHORT $LN48@TableEndRo
	mov	BYTE PTR tv197[rbp], 1
	jmp	SHORT $LN49@TableEndRo
$LN48@TableEndRo:
	mov	BYTE PTR tv197[rbp], 0
$LN49@TableEndRo:
	movzx	eax, BYTE PTR tv197[rbp]
	mov	BYTE PTR draw_cell_bg_color$9[rbp], al
; Line 1772
	movzx	eax, BYTE PTR unfreeze_rows_actual$[rbp]
	mov	BYTE PTR draw_strong_bottom_border$10[rbp], al
; Line 1773
	mov	eax, DWORD PTR bg_col1$6[rbp]
	mov	ecx, DWORD PTR bg_col0$5[rbp]
	or	ecx, eax
	mov	eax, ecx
	or	eax, DWORD PTR border_col$7[rbp]
	test	eax, eax
	jne	SHORT $LN23@TableEndRo
	movzx	eax, BYTE PTR draw_strong_bottom_border$10[rbp]
	test	eax, eax
	jne	SHORT $LN23@TableEndRo
	movzx	eax, BYTE PTR draw_cell_bg_color$9[rbp]
	test	eax, eax
	je	$LN22@TableEndRo
$LN23@TableEndRo:
; Line 1777
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN24@TableEndRo
; Line 1778
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 324				; 00000144H
	mov	QWORD PTR tv216[rbp], rax
	lea	rdx, QWORD PTR $T22[rbp]
	mov	rcx, QWORD PTR tv216[rbp]
	call	?ToVec4@ImRect@@QEBA?AUImVec4@@XZ	; ImRect::ToVec4
	lea	rcx, QWORD PTR $T23[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	lea	rcx, QWORD PTR $T23[rbp]
	lea	rdi, QWORD PTR [rax+136]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN24@TableEndRo:
; Line 1779
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv225[rbp], rax
	xor	r8d, r8d
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv225[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
$LN22@TableEndRo:
; Line 1784
	cmp	DWORD PTR bg_col0$5[rbp], 0
	jne	SHORT $LN26@TableEndRo
	cmp	DWORD PTR bg_col1$6[rbp], 0
	je	$LN25@TableEndRo
$LN26@TableEndRo:
; Line 1786
	movss	xmm0, DWORD PTR bg_y2$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm3, DWORD PTR [rax+284]
	movss	xmm2, DWORD PTR bg_y1$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+276]
	lea	rcx, QWORD PTR row_rect$11[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 1787
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 308				; 00000134H
	mov	rdx, rax
	lea	rcx, QWORD PTR row_rect$11[rbp]
	call	?ClipWith@ImRect@@QEAAXAEBU1@@Z		; ImRect::ClipWith
; Line 1788
	cmp	DWORD PTR bg_col0$5[rbp], 0
	je	SHORT $LN27@TableEndRo
	movss	xmm0, DWORD PTR row_rect$11[rbp+12]
	comiss	xmm0, DWORD PTR row_rect$11[rbp+4]
	jbe	SHORT $LN27@TableEndRo
; Line 1789
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv252[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR bg_col0$5[rbp]
	lea	r8, QWORD PTR row_rect$11[rbp+8]
	lea	rdx, QWORD PTR row_rect$11[rbp]
	mov	rcx, QWORD PTR tv252[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN27@TableEndRo:
; Line 1790
	cmp	DWORD PTR bg_col1$6[rbp], 0
	je	SHORT $LN28@TableEndRo
	movss	xmm0, DWORD PTR row_rect$11[rbp+12]
	comiss	xmm0, DWORD PTR row_rect$11[rbp+4]
	jbe	SHORT $LN28@TableEndRo
; Line 1791
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv263[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR bg_col1$6[rbp]
	lea	r8, QWORD PTR row_rect$11[rbp+8]
	lea	rdx, QWORD PTR row_rect$11[rbp]
	mov	rcx, QWORD PTR tv263[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN28@TableEndRo:
$LN25@TableEndRo:
; Line 1795
	movzx	eax, BYTE PTR draw_cell_bg_color$9[rbp]
	test	eax, eax
	je	$LN29@TableEndRo
; Line 1797
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv273[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+501]
	mov	edx, eax
	mov	rcx, QWORD PTR tv273[rbp]
	call	??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z ; ImSpan<ImGuiTableCellData>::operator[]
	mov	QWORD PTR cell_data_end$12[rbp], rax
; Line 1798
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv279[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv279[rbp]
	call	??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z ; ImSpan<ImGuiTableCellData>::operator[]
	mov	QWORD PTR cell_data$13[rbp], rax
	jmp	SHORT $LN4@TableEndRo
$LN2@TableEndRo:
	mov	rax, QWORD PTR cell_data$13[rbp]
	add	rax, 8
	mov	QWORD PTR cell_data$13[rbp], rax
$LN4@TableEndRo:
	mov	rax, QWORD PTR cell_data_end$12[rbp]
	cmp	QWORD PTR cell_data$13[rbp], rax
	ja	$LN3@TableEndRo
; Line 1800
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv289[rbp], rax
	mov	rax, QWORD PTR cell_data$13[rbp]
	movsx	eax, BYTE PTR [rax+4]
	mov	edx, eax
	mov	rcx, QWORD PTR tv289[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$14[rbp], rax
; Line 1801
	mov	rax, QWORD PTR cell_data$13[rbp]
	movsx	eax, BYTE PTR [rax+4]
	mov	r8d, eax
	mov	rdx, QWORD PTR table$[rbp]
	lea	rcx, QWORD PTR cell_bg_rect$15[rbp]
	call	?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z ; ImGui::TableGetCellBgRect
; Line 1802
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 308				; 00000134H
	mov	rdx, rax
	lea	rcx, QWORD PTR cell_bg_rect$15[rbp]
	call	?ClipWith@ImRect@@QEAAXAEBU1@@Z		; ImRect::ClipWith
; Line 1803
	mov	rax, QWORD PTR column$14[rbp]
	movss	xmm1, DWORD PTR [rax+32]
	movss	xmm0, DWORD PTR cell_bg_rect$15[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR cell_bg_rect$15[rbp], xmm0
; Line 1804
	mov	rax, QWORD PTR column$14[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	movss	xmm0, DWORD PTR cell_bg_rect$15[rbp+8]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR cell_bg_rect$15[rbp+8], xmm0
; Line 1805
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv317[rbp], rax
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR cell_data$13[rbp]
	mov	r9d, DWORD PTR [rax]
	lea	r8, QWORD PTR cell_bg_rect$15[rbp+8]
	lea	rdx, QWORD PTR cell_bg_rect$15[rbp]
	mov	rcx, QWORD PTR tv317[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 1806
	jmp	$LN2@TableEndRo
$LN3@TableEndRo:
$LN29@TableEndRo:
; Line 1810
	cmp	DWORD PTR border_col$7[rbp], 0
	je	$LN30@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR bg_y1$[rbp]
	comiss	xmm0, DWORD PTR [rax+312]
	jb	$LN30@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+320]
	comiss	xmm0, DWORD PTR bg_y1$[rbp]
	jbe	$LN30@TableEndRo
; Line 1811
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv348[rbp], rax
	movss	xmm2, DWORD PTR bg_y1$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+180]
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv346[rbp], rax
	movss	xmm2, DWORD PTR bg_y1$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+176]
	lea	rcx, QWORD PTR $T25[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv344[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR border_col$7[rbp]
	mov	r8, QWORD PTR tv346[rbp]
	mov	rdx, QWORD PTR tv344[rbp]
	mov	rcx, QWORD PTR tv348[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN30@TableEndRo:
; Line 1814
	movzx	eax, BYTE PTR draw_strong_bottom_border$10[rbp]
	test	eax, eax
	je	$LN31@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR bg_y2$[rbp]
	comiss	xmm0, DWORD PTR [rax+312]
	jb	$LN31@TableEndRo
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+320]
	comiss	xmm0, DWORD PTR bg_y2$[rbp]
	jbe	$LN31@TableEndRo
; Line 1815
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv415[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR tv413[rbp], eax
	movss	xmm2, DWORD PTR bg_y2$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+180]
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv411[rbp], rax
	movss	xmm2, DWORD PTR bg_y2$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+176]
	lea	rcx, QWORD PTR $T27[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv409[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv413[rbp]
	mov	r8, QWORD PTR tv411[rbp]
	mov	rdx, QWORD PTR tv409[rbp]
	mov	rcx, QWORD PTR tv415[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN31@TableEndRo:
$LN14@TableEndRo:
; Line 1821
	movzx	eax, BYTE PTR unfreeze_rows_request$[rbp]
	test	eax, eax
	je	$LN32@TableEndRo
; Line 1822
	mov	DWORD PTR column_n$16[rbp], 0
	jmp	SHORT $LN7@TableEndRo
$LN5@TableEndRo:
	mov	eax, DWORD PTR column_n$16[rbp]
	inc	eax
	mov	DWORD PTR column_n$16[rbp], eax
$LN7@TableEndRo:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$16[rbp], eax
	jge	SHORT $LN6@TableEndRo
; Line 1824
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv426[rbp], rax
	mov	edx, DWORD PTR column_n$16[rbp]
	mov	rcx, QWORD PTR tv426[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$17[rbp], rax
; Line 1825
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	cmp	DWORD PTR column_n$16[rbp], eax
	jge	SHORT $LN50@TableEndRo
	mov	DWORD PTR tv431[rbp], 1
	jmp	SHORT $LN51@TableEndRo
$LN50@TableEndRo:
	mov	DWORD PTR tv431[rbp], 0
$LN51@TableEndRo:
	mov	rax, QWORD PTR column$17[rbp]
	movzx	ecx, BYTE PTR tv431[rbp]
	mov	BYTE PTR [rax+98], cl
; Line 1826
	jmp	$LN5@TableEndRo
$LN6@TableEndRo:
$LN32@TableEndRo:
; Line 1827
	movzx	eax, BYTE PTR unfreeze_rows_actual$[rbp]
	test	eax, eax
	je	$LN33@TableEndRo
; Line 1829
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+516]
	test	eax, eax
	je	SHORT $LN52@TableEndRo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 103				; 00000067H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@BPCFJEPF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAU?$AAn?$AAf?$AAr?$AAo?$AAz@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN52@TableEndRo:
; Line 1830
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+516], 1
; Line 1833
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+548]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR y0$18[rbp], xmm0
; Line 1834
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+556]
	movss	xmm0, DWORD PTR y0$18[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv458[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv458[rbp]
	movss	DWORD PTR [rax+344], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv458[rbp]
	movss	DWORD PTR [rax+312], xmm0
; Line 1835
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+556]
	movss	DWORD PTR [rax+352], xmm0
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+352]
	movss	DWORD PTR [rax+320], xmm0
; Line 1836
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR [rcx+504]
	mov	BYTE PTR [rax+503], cl
; Line 1837
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+352]
	comiss	xmm0, DWORD PTR [rcx+344]
	jae	SHORT $LN53@TableEndRo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 111				; 0000006fH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JC@PCOAPGIF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AA2?$AAC?$AAl?$AAi?$AAp?$AAR@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN53@TableEndRo:
; Line 1839
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	subss	xmm0, DWORD PTR [rcx+132]
	movss	DWORD PTR row_height$19[rbp], xmm0
; Line 1840
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+280]
	addss	xmm0, DWORD PTR [rcx+136]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+248]
	movss	DWORD PTR tv505[rbp], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR tv505[rbp]
	movss	DWORD PTR [rax+220], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv505[rbp]
	movss	DWORD PTR [rax+136], xmm0
; Line 1841
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	subss	xmm0, DWORD PTR row_height$19[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+132], xmm0
; Line 1842
	mov	DWORD PTR column_n$20[rbp], 0
	jmp	SHORT $LN10@TableEndRo
$LN8@TableEndRo:
	mov	eax, DWORD PTR column_n$20[rbp]
	inc	eax
	mov	DWORD PTR column_n$20[rbp], eax
$LN10@TableEndRo:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$20[rbp], eax
	jge	SHORT $LN9@TableEndRo
; Line 1844
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv517[rbp], rax
	mov	edx, DWORD PTR column_n$20[rbp]
	mov	rcx, QWORD PTR tv517[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$21[rbp], rax
; Line 1845
	mov	rax, QWORD PTR column$21[rbp]
	mov	rcx, QWORD PTR column$21[rbp]
	movzx	ecx, BYTE PTR [rcx+89]
	mov	BYTE PTR [rax+87], cl
; Line 1846
	mov	rax, QWORD PTR column$21[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+344]
	movss	DWORD PTR [rax+36], xmm0
; Line 1847
	jmp	SHORT $LN8@TableEndRo
$LN9@TableEndRo:
; Line 1850
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv531[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv531[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	add	rax, 32					; 00000020H
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 1851
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv553[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv542[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv542[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movzx	eax, BYTE PTR [rax+87]
	mov	DWORD PTR tv551[rbp], eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv549[rbp], rax
	mov	r8d, DWORD PTR tv551[rbp]
	mov	rdx, QWORD PTR tv549[rbp]
	mov	rcx, QWORD PTR tv553[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
$LN33@TableEndRo:
; Line 1854
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	shl	eax, 16
	sar	eax, 16
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN34@TableEndRo
; Line 1855
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+156]
	inc	eax
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+156], eax
$LN34@TableEndRo:
; Line 1856
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+506], 0
; Line 1857
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1632]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z ENDP		; ImGui::TableEndRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
window$ = 8
next_y1$ = 36
table$ = 288
?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableBeginRow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1693
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1694
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR window$[rbp], rax
; Line 1695
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+506]
	test	eax, eax
	je	SHORT $LN6@TableBegin
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CI@JLDNLAAM@?$AA?$CB?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAI?$AAn?$AAs?$AAi?$AAd@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@TableBegin:
; Line 1698
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+120]
	inc	eax
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+120], eax
; Line 1699
	mov	rax, QWORD PTR table$[rbp]
	mov	DWORD PTR [rax+124], -1
; Line 1700
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+rax+160], 16777216	; 01000000H
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+rax+160], 16777216	; 01000000H
; Line 1701
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+501], -1
; Line 1702
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+506], 1
; Line 1705
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	movss	DWORD PTR next_y1$[rbp], xmm0
; Line 1706
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+120], 0
	jne	SHORT $LN2@TableBegin
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jle	SHORT $LN2@TableBegin
; Line 1707
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+248]
	movss	DWORD PTR [rax+220], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	movss	DWORD PTR next_y1$[rbp], xmm0
$LN2@TableBegin:
; Line 1709
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR next_y1$[rbp]
	movss	DWORD PTR [rax+136], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR next_y1$[rbp]
	movss	DWORD PTR [rax+132], xmm0
; Line 1710
	mov	rax, QWORD PTR table$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+144], xmm0
; Line 1711
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+280]
	subss	xmm0, DWORD PTR [rcx+184]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+148], xmm0
; Line 1712
	mov	rax, QWORD PTR window$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+276], xmm0
; Line 1713
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR next_y1$[rbp]
	movss	DWORD PTR [rax+244], xmm0
; Line 1716
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	shl	eax, 16
	sar	eax, 16
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@TableBegin
; Line 1718
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 42					; 0000002aH
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	r8d, -1
	mov	edx, eax
	mov	ecx, 1
	call	?TableSetBgColor@ImGui@@YAXHIH@Z	; ImGui::TableSetBgColor
; Line 1719
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+120], 0
	jne	SHORT $LN4@TableBegin
; Line 1720
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+509], 1
$LN4@TableBegin:
$LN3@TableBegin:
; Line 1722
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableBeginRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z
_TEXT	SEGMENT
content_width_body$ = 4
content_width_headers$ = 36
width_auto$ = 68
table$ = 320
column$ = 328
?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z PROC ; ImGui::TableGetColumnWidthAuto, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2051
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2052
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm1, DWORD PTR [rax+68]
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR column$[rbp]
	subss	xmm0, DWORD PTR [rax+52]
	movss	DWORD PTR content_width_body$[rbp], xmm0
; Line 2053
	mov	rax, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	subss	xmm0, DWORD PTR [rcx+52]
	movss	DWORD PTR content_width_headers$[rbp], xmm0
; Line 2054
	movss	xmm0, DWORD PTR content_width_body$[rbp]
	movss	DWORD PTR width_auto$[rbp], xmm0
; Line 2055
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8192				; 00002000H
	test	eax, eax
	jne	SHORT $LN2@TableGetCo
; Line 2056
	movss	xmm1, DWORD PTR content_width_headers$[rbp]
	movss	xmm0, DWORD PTR width_auto$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR width_auto$[rbp], xmm0
$LN2@TableGetCo:
; Line 2059
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN3@TableGetCo
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@TableGetCo
; Line 2060
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@TableGetCo
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@TableGetCo
$LN5@TableGetCo:
; Line 2061
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR width_auto$[rbp], xmm0
$LN4@TableGetCo:
$LN3@TableGetCo:
; Line 2063
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+188]
	movss	xmm0, DWORD PTR width_auto$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
; Line 2064
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ENDP ; ImGui::TableGetColumnWidthAuto
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z
_TEXT	SEGMENT
tv82 = 192
table$ = 240
column$ = 248
?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z PROC ; ImGui::TableFixColumnSortDirection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2624
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2625
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN3@TableFixCo
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	shr	al, 4
	and	al, 15
	movzx	eax, al
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 3
	movzx	ecx, cl
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN2@TableFixCo
$LN3@TableFixCo:
; Line 2626
	jmp	SHORT $LN1@TableFixCo
$LN2@TableFixCo:
; Line 2627
	xor	edx, edx
	mov	rcx, QWORD PTR column$[rbp]
	call	?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z ; TableGetColumnAvailSortDirection
	mov	DWORD PTR tv82[rbp], eax
	movzx	eax, BYTE PTR tv82[rbp]
	and	al, 3
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 2628
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
$LN1@TableFixCo:
; Line 2629
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ENDP ; ImGui::TableFixColumnSortDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z
_TEXT	SEGMENT
n$1 = 4
tv84 = 212
column$ = 256
?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z PROC ; ImGui::TableGetColumnNextSortDirection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2636
$LN10:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2637
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	shr	al, 2
	and	al, 3
	movzx	eax, al
	test	eax, eax
	jg	SHORT $LN8@TableGetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EK@NEPNAPMF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAD?$AAi?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@TableGetCo:
; Line 2638
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	jne	SHORT $LN5@TableGetCo
; Line 2639
	xor	edx, edx
	mov	rcx, QWORD PTR column$[rbp]
	call	?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z ; TableGetColumnAvailSortDirection
	jmp	$LN1@TableGetCo
$LN5@TableGetCo:
; Line 2640
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@TableGetCo
$LN2@TableGetCo:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@TableGetCo:
	cmp	DWORD PTR n$1[rbp], 3
	jge	SHORT $LN3@TableGetCo
; Line 2641
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	movzx	eax, al
	mov	DWORD PTR tv84[rbp], eax
	mov	edx, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR column$[rbp]
	call	?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z ; TableGetColumnAvailSortDirection
	mov	ecx, DWORD PTR tv84[rbp]
	cmp	ecx, eax
	jne	SHORT $LN6@TableGetCo
; Line 2642
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	shr	cl, 2
	and	cl, 3
	movzx	ecx, cl
	cdq
	idiv	ecx
	mov	eax, edx
	mov	edx, eax
	mov	rcx, QWORD PTR column$[rbp]
	call	?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z ; TableGetColumnAvailSortDirection
	jmp	SHORT $LN1@TableGetCo
$LN6@TableGetCo:
	jmp	SHORT $LN2@TableGetCo
$LN3@TableGetCo:
; Line 2643
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@TableGetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@TableGetCo:
; Line 2644
	xor	eax, eax
$LN1@TableGetCo:
; Line 2645
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z ENDP ; ImGui::TableGetColumnNextSortDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
dirty$ = 4
sort_specs$ = 40
column_n$1 = 68
column$2 = 104
sort_spec$3 = 136
tv136 = 344
tv92 = 344
tv78 = 344
tv91 = 352
tv75 = 352
table$ = 400
?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableSortSpecsBuild, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2749
$LN16:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2750
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+508]
	mov	BYTE PTR dirty$[rbp], al
; Line 2751
	movzx	eax, BYTE PTR dirty$[rbp]
	test	eax, eax
	je	$LN5@TableSortS
; Line 2753
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSortSpecsSanitize
; Line 2754
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 448				; 000001c0H
	mov	QWORD PTR tv78[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+480]
	cmp	eax, 1
	jg	SHORT $LN9@TableSortS
	mov	DWORD PTR tv75[rbp], 0
	jmp	SHORT $LN10@TableSortS
$LN9@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+480]
	mov	DWORD PTR tv75[rbp], eax
$LN10@TableSortS:
	mov	edx, DWORD PTR tv75[rbp]
	mov	rcx, QWORD PTR tv78[rbp]
	call	?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z ; ImVector<ImGuiTableColumnSortSpecs>::resize
; Line 2755
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+476], 1
; Line 2756
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 0
$LN5@TableSortS:
; Line 2760
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+480]
	test	eax, eax
	jne	SHORT $LN13@TableSortS
	mov	QWORD PTR tv92[rbp], 0
	jmp	SHORT $LN14@TableSortS
$LN13@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+480]
	cmp	eax, 1
	jne	SHORT $LN11@TableSortS
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 432				; 000001b0H
	mov	QWORD PTR tv91[rbp], rax
	jmp	SHORT $LN12@TableSortS
$LN11@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+456]
	mov	QWORD PTR tv91[rbp], rax
$LN12@TableSortS:
	mov	rax, QWORD PTR tv91[rbp]
	mov	QWORD PTR tv92[rbp], rax
$LN14@TableSortS:
	mov	rax, QWORD PTR tv92[rbp]
	mov	QWORD PTR sort_specs$[rbp], rax
; Line 2761
	movzx	eax, BYTE PTR dirty$[rbp]
	test	eax, eax
	je	$LN6@TableSortS
	cmp	QWORD PTR sort_specs$[rbp], 0
	je	$LN6@TableSortS
; Line 2762
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableSortS
$LN2@TableSortS:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	$LN3@TableSortS
; Line 2764
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv136[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv136[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$2[rbp], rax
; Line 2765
	mov	rax, QWORD PTR column$2[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	jne	SHORT $LN7@TableSortS
; Line 2766
	jmp	SHORT $LN2@TableSortS
$LN7@TableSortS:
; Line 2767
	mov	rax, QWORD PTR column$2[rbp]
	movsx	eax, BYTE PTR [rax+86]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+480]
	cmp	eax, ecx
	jl	SHORT $LN15@TableSortS
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FE@KLCJNJLO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAo?$AAr?$AAt?$AAO?$AAr?$AAd@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@TableSortS:
; Line 2768
	mov	rax, QWORD PTR column$2[rbp]
	movsx	rax, BYTE PTR [rax+86]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR sort_specs$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR sort_spec$3[rbp], rax
; Line 2769
	mov	rax, QWORD PTR sort_spec$3[rbp]
	mov	rcx, QWORD PTR column$2[rbp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax], ecx
; Line 2770
	movsx	ax, BYTE PTR column_n$1[rbp]
	mov	rcx, QWORD PTR sort_spec$3[rbp]
	mov	WORD PTR [rcx+4], ax
; Line 2771
	mov	rax, QWORD PTR column$2[rbp]
	movsx	ax, BYTE PTR [rax+86]
	mov	rcx, QWORD PTR sort_spec$3[rbp]
	mov	WORD PTR [rcx+6], ax
; Line 2772
	mov	rax, QWORD PTR column$2[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	movzx	eax, al
	and	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR sort_spec$3[rbp]
	mov	ecx, DWORD PTR [rcx+8]
	and	ecx, -256				; ffffffffffffff00H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR sort_spec$3[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 2773
	jmp	$LN2@TableSortS
$LN3@TableSortS:
$LN6@TableSortS:
; Line 2775
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR sort_specs$[rbp]
	mov	QWORD PTR [rax+464], rcx
; Line 2776
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+480]
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+472], eax
; Line 2777
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableSortSpecsBuild
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
sort_order_count$ = 4
sort_order_mask$ = 40
column_n$1 = 68
column$2 = 104
need_fix_linearize$ = 132
need_fix_single_sort_order$ = 164
fixed_mask$3 = 200
sort_n$4 = 228
column_with_smallest_sort_order$5 = 260
column_n$6 = 292
column_n$7 = 324
column_n$8 = 356
column$9 = 392
tv236 = 596
tv142 = 596
tv304 = 600
tv294 = 600
tv281 = 600
tv275 = 600
tv223 = 600
tv209 = 600
tv196 = 600
tv171 = 600
tv161 = 600
tv80 = 600
tv179 = 608
tv137 = 608
tv181 = 616
table$ = 656
?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableSortSpecsSanitize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2683
$LN36:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 664				; 00000298H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2684
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN29@TableSortS
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FA@NLOFMGNH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@TableSortS:
; Line 2687
	mov	DWORD PTR sort_order_count$[rbp], 0
; Line 2688
	mov	QWORD PTR sort_order_mask$[rbp], 0
; Line 2689
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableSortS
$LN2@TableSortS:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	$LN3@TableSortS
; Line 2691
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv80[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv80[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$2[rbp], rax
; Line 2692
	mov	rax, QWORD PTR column$2[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN17@TableSortS
	mov	rax, QWORD PTR column$2[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	jne	SHORT $LN17@TableSortS
; Line 2693
	mov	rax, QWORD PTR column$2[rbp]
	mov	BYTE PTR [rax+86], -1
$LN17@TableSortS:
; Line 2694
	mov	rax, QWORD PTR column$2[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	jne	SHORT $LN18@TableSortS
; Line 2695
	jmp	SHORT $LN2@TableSortS
$LN18@TableSortS:
; Line 2696
	mov	eax, DWORD PTR sort_order_count$[rbp]
	inc	eax
	mov	DWORD PTR sort_order_count$[rbp], eax
; Line 2697
	mov	rax, QWORD PTR column$2[rbp]
	movsx	eax, BYTE PTR [rax+86]
	mov	ecx, 1
	mov	QWORD PTR tv275[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv275[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR sort_order_mask$[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR sort_order_mask$[rbp], rax
; Line 2698
	cmp	DWORD PTR sort_order_count$[rbp], 64	; 00000040H
	jl	SHORT $LN30@TableSortS
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GI@FLDFCCLG@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAc?$AAo?$AAu?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN30@TableSortS:
; Line 2699
	jmp	$LN2@TableSortS
$LN3@TableSortS:
; Line 2701
	mov	eax, DWORD PTR sort_order_count$[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv281[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv281[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR sort_order_mask$[rbp]
	inc	rcx
	cmp	rax, rcx
	je	SHORT $LN31@TableSortS
	mov	BYTE PTR tv137[rbp], 1
	jmp	SHORT $LN32@TableSortS
$LN31@TableSortS:
	mov	BYTE PTR tv137[rbp], 0
$LN32@TableSortS:
	movzx	eax, BYTE PTR tv137[rbp]
	mov	BYTE PTR need_fix_linearize$[rbp], al
; Line 2702
	cmp	DWORD PTR sort_order_count$[rbp], 1
	jle	SHORT $LN33@TableSortS
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	jne	SHORT $LN33@TableSortS
	mov	BYTE PTR tv142[rbp], 1
	jmp	SHORT $LN34@TableSortS
$LN33@TableSortS:
	mov	BYTE PTR tv142[rbp], 0
$LN34@TableSortS:
	movzx	eax, BYTE PTR tv142[rbp]
	mov	BYTE PTR need_fix_single_sort_order$[rbp], al
; Line 2703
	movzx	eax, BYTE PTR need_fix_linearize$[rbp]
	test	eax, eax
	jne	SHORT $LN20@TableSortS
	movzx	eax, BYTE PTR need_fix_single_sort_order$[rbp]
	test	eax, eax
	je	$LN19@TableSortS
$LN20@TableSortS:
; Line 2705
	mov	QWORD PTR fixed_mask$3[rbp], 0
; Line 2706
	mov	DWORD PTR sort_n$4[rbp], 0
	jmp	SHORT $LN7@TableSortS
$LN5@TableSortS:
	mov	eax, DWORD PTR sort_n$4[rbp]
	inc	eax
	mov	DWORD PTR sort_n$4[rbp], eax
$LN7@TableSortS:
	mov	eax, DWORD PTR sort_order_count$[rbp]
	cmp	DWORD PTR sort_n$4[rbp], eax
	jge	$LN6@TableSortS
; Line 2710
	mov	DWORD PTR column_with_smallest_sort_order$5[rbp], -1
; Line 2711
	mov	DWORD PTR column_n$6[rbp], 0
	jmp	SHORT $LN10@TableSortS
$LN8@TableSortS:
	mov	eax, DWORD PTR column_n$6[rbp]
	inc	eax
	mov	DWORD PTR column_n$6[rbp], eax
$LN10@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$6[rbp], eax
	jge	$LN9@TableSortS
; Line 2712
	movsxd	rax, DWORD PTR column_n$6[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv294[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv294[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR fixed_mask$3[rbp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	$LN21@TableSortS
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv161[rbp], rax
	mov	edx, DWORD PTR column_n$6[rbp]
	mov	rcx, QWORD PTR tv161[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN21@TableSortS
; Line 2713
	cmp	DWORD PTR column_with_smallest_sort_order$5[rbp], -1
	je	SHORT $LN23@TableSortS
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv171[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv179[rbp], rax
	mov	edx, DWORD PTR column_with_smallest_sort_order$5[rbp]
	mov	rcx, QWORD PTR tv179[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+86]
	mov	DWORD PTR tv181[rbp], eax
	mov	edx, DWORD PTR column_n$6[rbp]
	mov	rcx, QWORD PTR tv171[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+86]
	mov	ecx, DWORD PTR tv181[rbp]
	cmp	eax, ecx
	jge	SHORT $LN22@TableSortS
$LN23@TableSortS:
; Line 2714
	mov	eax, DWORD PTR column_n$6[rbp]
	mov	DWORD PTR column_with_smallest_sort_order$5[rbp], eax
$LN22@TableSortS:
$LN21@TableSortS:
	jmp	$LN8@TableSortS
$LN9@TableSortS:
; Line 2715
	cmp	DWORD PTR column_with_smallest_sort_order$5[rbp], -1
	jne	SHORT $LN35@TableSortS
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 32					; 00000020H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EM@BCBBNGI@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAw?$AAi?$AAt?$AAh?$AA_?$AAs?$AAm?$AAa@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN35@TableSortS:
; Line 2716
	mov	eax, DWORD PTR column_with_smallest_sort_order$5[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv304[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv304[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR fixed_mask$3[rbp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR fixed_mask$3[rbp], rax
; Line 2717
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv196[rbp], rax
	mov	edx, DWORD PTR column_with_smallest_sort_order$5[rbp]
	mov	rcx, QWORD PTR tv196[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movzx	ecx, BYTE PTR sort_n$4[rbp]
	mov	BYTE PTR [rax+86], cl
; Line 2720
	movzx	eax, BYTE PTR need_fix_single_sort_order$[rbp]
	test	eax, eax
	je	SHORT $LN24@TableSortS
; Line 2722
	mov	DWORD PTR sort_order_count$[rbp], 1
; Line 2723
	mov	DWORD PTR column_n$7[rbp], 0
	jmp	SHORT $LN13@TableSortS
$LN11@TableSortS:
	mov	eax, DWORD PTR column_n$7[rbp]
	inc	eax
	mov	DWORD PTR column_n$7[rbp], eax
$LN13@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$7[rbp], eax
	jge	SHORT $LN12@TableSortS
; Line 2724
	mov	eax, DWORD PTR column_with_smallest_sort_order$5[rbp]
	cmp	DWORD PTR column_n$7[rbp], eax
	je	SHORT $LN25@TableSortS
; Line 2725
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv209[rbp], rax
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR tv209[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	BYTE PTR [rax+86], -1
$LN25@TableSortS:
	jmp	SHORT $LN11@TableSortS
$LN12@TableSortS:
; Line 2726
	jmp	SHORT $LN6@TableSortS
$LN24@TableSortS:
; Line 2728
	jmp	$LN5@TableSortS
$LN6@TableSortS:
$LN19@TableSortS:
; Line 2732
	cmp	DWORD PTR sort_order_count$[rbp], 0
	jne	$LN26@TableSortS
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	$LN26@TableSortS
; Line 2733
	mov	DWORD PTR column_n$8[rbp], 0
	jmp	SHORT $LN16@TableSortS
$LN14@TableSortS:
	mov	eax, DWORD PTR column_n$8[rbp]
	inc	eax
	mov	DWORD PTR column_n$8[rbp], eax
$LN16@TableSortS:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$8[rbp], eax
	jge	$LN15@TableSortS
; Line 2735
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv223[rbp], rax
	mov	edx, DWORD PTR column_n$8[rbp]
	mov	rcx, QWORD PTR tv223[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$9[rbp], rax
; Line 2736
	mov	rax, QWORD PTR column$9[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	je	SHORT $LN27@TableSortS
	mov	rax, QWORD PTR column$9[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	SHORT $LN27@TableSortS
; Line 2738
	mov	DWORD PTR sort_order_count$[rbp], 1
; Line 2739
	mov	rax, QWORD PTR column$9[rbp]
	mov	BYTE PTR [rax+86], 0
; Line 2740
	xor	edx, edx
	mov	rcx, QWORD PTR column$9[rbp]
	call	?TableGetColumnAvailSortDirection@@YAHPEAUImGuiTableColumn@@H@Z ; TableGetColumnAvailSortDirection
	mov	DWORD PTR tv236[rbp], eax
	movzx	eax, BYTE PTR tv236[rbp]
	and	al, 3
	mov	rcx, QWORD PTR column$9[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$9[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 2741
	jmp	SHORT $LN15@TableSortS
$LN27@TableSortS:
; Line 2743
	jmp	$LN14@TableSortS
$LN15@TableSortS:
$LN26@TableSortS:
; Line 2745
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR sort_order_count$[rbp]
	mov	BYTE PTR [rax+480], cl
; Line 2746
	lea	rsp, QWORD PTR [rbp+632]
	pop	rdi
	pop	rbp
	ret	0
?TableSortSpecsSanitize@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableSortSpecsSanitize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
splitter$ = 40
has_freeze_v$ = 68
has_freeze_h$ = 100
merge_group_mask$ = 132
merge_groups$ = 176
column_n$7 = 356
column$8 = 392
merge_group_sub_count$9 = 420
merge_group_sub_n$10 = 452
channel_no$11 = 484
src_channel$12 = 520
content_max_x$13 = 548
merge_group_n$14 = 580
merge_group$15 = 616
LEADING_DRAW_CHANNELS$16 = 644
dst_tmp$17 = 680
remaining_mask$18 = 712
remaining_count$19 = 756
host_rect$20 = 792
merge_group_n$21 = 836
merge_channels_count$22 = 868
merge_group$23 = 904
merge_clip_rect$24 = 936
n$25 = 980
n$26 = 1012
channel$27 = 1048
n$28 = 1076
channel$29 = 1112
$T30 = 1716
$T31 = 1764
$T32 = 1812
$T33 = 1860
$T34 = 1912
tv592 = 1940
tv267 = 1940
tv184 = 1940
tv137 = 1940
tv131 = 1940
tv72 = 1940
tv68 = 1940
tv552 = 1944
tv468 = 1944
tv461 = 1944
tv441 = 1944
tv424 = 1944
tv411 = 1944
tv395 = 1944
tv382 = 1944
tv375 = 1944
tv368 = 1944
tv242 = 1944
tv231 = 1944
tv213 = 1944
tv188 = 1944
tv144 = 1944
tv128 = 1944
tv444 = 1952
tv227 = 1952
__$ArrayPad$ = 1960
table$ = 2000
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableMergeDrawChannels, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2322
$LN62:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2016				; 000007e0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 348				; 0000015cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2056]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2323
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2324
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR splitter$[rbp], rax
; Line 2325
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jle	SHORT $LN42@TableMerge
	mov	BYTE PTR tv68[rbp], 1
	jmp	SHORT $LN43@TableMerge
$LN42@TableMerge:
	mov	BYTE PTR tv68[rbp], 0
$LN43@TableMerge:
	movzx	eax, BYTE PTR tv68[rbp]
	mov	BYTE PTR has_freeze_v$[rbp], al
; Line 2326
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	test	eax, eax
	jle	SHORT $LN44@TableMerge
	mov	BYTE PTR tv72[rbp], 1
	jmp	SHORT $LN45@TableMerge
$LN44@TableMerge:
	mov	BYTE PTR tv72[rbp], 0
$LN45@TableMerge:
	movzx	eax, BYTE PTR tv72[rbp]
	mov	BYTE PTR has_freeze_h$[rbp], al
; Line 2327
	mov	rax, QWORD PTR splitter$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN46@TableMerge
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DA@GEHLCBHG@?$AAs?$AAp?$AAl?$AAi?$AAt?$AAt?$AAe?$AAr?$AA?9?$AA?$DO?$AA_?$AAC?$AAu?$AAr?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@TableMerge:
; Line 2338
	mov	DWORD PTR merge_group_mask$[rbp], 0
; Line 2339
	lea	r9, OFFSET FLAT:??0MergeGroup@?1??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@QEAA@XZ ; `ImGui::TableMergeDrawChannels'::`2'::MergeGroup::MergeGroup
	mov	r8d, 4
	mov	edx, 40					; 00000028H
	lea	rcx, QWORD PTR merge_groups$[rbp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
; Line 2342
	mov	DWORD PTR column_n$7[rbp], 0
	jmp	SHORT $LN4@TableMerge
$LN2@TableMerge:
	mov	eax, DWORD PTR column_n$7[rbp]
	inc	eax
	mov	DWORD PTR column_n$7[rbp], eax
$LN4@TableMerge:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$7[rbp], eax
	jge	$LN3@TableMerge
; Line 2344
	mov	eax, DWORD PTR column_n$7[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv552[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv552[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+88]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN20@TableMerge
; Line 2345
	jmp	SHORT $LN2@TableMerge
$LN20@TableMerge:
; Line 2346
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv128[rbp], rax
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR tv128[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$8[rbp], rax
; Line 2348
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	je	SHORT $LN47@TableMerge
	mov	DWORD PTR tv131[rbp], 2
	jmp	SHORT $LN48@TableMerge
$LN47@TableMerge:
	mov	DWORD PTR tv131[rbp], 1
$LN48@TableMerge:
	mov	eax, DWORD PTR tv131[rbp]
	mov	DWORD PTR merge_group_sub_count$9[rbp], eax
; Line 2349
	mov	DWORD PTR merge_group_sub_n$10[rbp], 0
	jmp	SHORT $LN7@TableMerge
$LN5@TableMerge:
	mov	eax, DWORD PTR merge_group_sub_n$10[rbp]
	inc	eax
	mov	DWORD PTR merge_group_sub_n$10[rbp], eax
$LN7@TableMerge:
	mov	eax, DWORD PTR merge_group_sub_count$9[rbp]
	cmp	DWORD PTR merge_group_sub_n$10[rbp], eax
	jge	$LN6@TableMerge
; Line 2351
	cmp	DWORD PTR merge_group_sub_n$10[rbp], 0
	jne	SHORT $LN49@TableMerge
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+88]
	mov	BYTE PTR tv137[rbp], al
	jmp	SHORT $LN50@TableMerge
$LN49@TableMerge:
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+89]
	mov	BYTE PTR tv137[rbp], al
$LN50@TableMerge:
	movzx	eax, BYTE PTR tv137[rbp]
	mov	DWORD PTR channel_no$11[rbp], eax
; Line 2354
	mov	rax, QWORD PTR splitter$[rbp]
	add	rax, 8
	mov	QWORD PTR tv144[rbp], rax
	mov	edx, DWORD PTR channel_no$11[rbp]
	mov	rcx, QWORD PTR tv144[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR src_channel$12[rbp], rax
; Line 2355
	mov	rax, QWORD PTR src_channel$12[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN21@TableMerge
	mov	rax, QWORD PTR src_channel$12[rbp]
	mov	rcx, rax
	call	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN21@TableMerge
; Line 2356
	mov	rax, QWORD PTR src_channel$12[rbp]
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
$LN21@TableMerge:
; Line 2357
	mov	rax, QWORD PTR src_channel$12[rbp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN22@TableMerge
; Line 2358
	jmp	$LN5@TableMerge
$LN22@TableMerge:
; Line 2362
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 256				; 00000100H
	test	eax, eax
	jne	$LN23@TableMerge
; Line 2365
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	jne	SHORT $LN24@TableMerge
; Line 2366
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR content_max_x$13[rbp], xmm0
	jmp	SHORT $LN25@TableMerge
$LN24@TableMerge:
; Line 2367
	cmp	DWORD PTR merge_group_sub_n$10[rbp], 0
	jne	SHORT $LN26@TableMerge
; Line 2368
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm1, DWORD PTR [rax+72]
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR content_max_x$13[rbp], xmm0
	jmp	SHORT $LN27@TableMerge
$LN26@TableMerge:
; Line 2370
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR [rax+68]
	movss	DWORD PTR content_max_x$13[rbp], xmm0
$LN27@TableMerge:
$LN25@TableMerge:
; Line 2371
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR content_max_x$13[rbp]
	comiss	xmm0, DWORD PTR [rax+40]
	jbe	SHORT $LN28@TableMerge
; Line 2372
	jmp	$LN5@TableMerge
$LN28@TableMerge:
$LN23@TableMerge:
; Line 2375
	movzx	eax, BYTE PTR has_freeze_h$[rbp]
	test	eax, eax
	je	SHORT $LN51@TableMerge
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	cmp	DWORD PTR column_n$7[rbp], eax
	jge	SHORT $LN51@TableMerge
	mov	DWORD PTR tv184[rbp], 0
	jmp	SHORT $LN52@TableMerge
$LN51@TableMerge:
	mov	DWORD PTR tv184[rbp], 1
$LN52@TableMerge:
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	je	SHORT $LN53@TableMerge
	cmp	DWORD PTR merge_group_sub_n$10[rbp], 0
	jne	SHORT $LN53@TableMerge
	mov	DWORD PTR tv188[rbp], 0
	jmp	SHORT $LN54@TableMerge
$LN53@TableMerge:
	mov	DWORD PTR tv188[rbp], 2
$LN54@TableMerge:
	mov	eax, DWORD PTR tv188[rbp]
	mov	ecx, DWORD PTR tv184[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR merge_group_n$14[rbp], eax
; Line 2376
	cmp	DWORD PTR channel_no$11[rbp], 132	; 00000084H
	jl	SHORT $LN55@TableMerge
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 54					; 00000036H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DE@IDMPCNHD@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA_?$AAn?$AAo?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AA4@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN55@TableMerge:
; Line 2377
	movsxd	rax, DWORD PTR merge_group_n$14[rbp]
	imul	rax, rax, 40				; 00000028H
	lea	rax, QWORD PTR merge_groups$[rbp+rax]
	mov	QWORD PTR merge_group$15[rbp], rax
; Line 2378
	mov	rax, QWORD PTR merge_group$15[rbp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN29@TableMerge
; Line 2379
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@ff7fffff
	movss	xmm2, DWORD PTR __real@7f7fffff
	movss	xmm1, DWORD PTR __real@7f7fffff
	lea	rcx, QWORD PTR $T30[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rdi, QWORD PTR merge_group$15[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN29@TableMerge:
; Line 2380
	mov	rax, QWORD PTR merge_group$15[rbp]
	add	rax, 20
	mov	QWORD PTR tv213[rbp], rax
	mov	edx, DWORD PTR channel_no$11[rbp]
	mov	rcx, QWORD PTR tv213[rbp]
	call	?SetBit@?$ImBitArray@$0IE@@@QEAAXH@Z	; ImBitArray<132>::SetBit
; Line 2381
	mov	rax, QWORD PTR merge_group$15[rbp]
	mov	eax, DWORD PTR [rax+16]
	inc	eax
	mov	rcx, QWORD PTR merge_group$15[rbp]
	mov	DWORD PTR [rcx+16], eax
; Line 2382
	mov	rax, QWORD PTR merge_group$15[rbp]
	mov	QWORD PTR tv231[rbp], rax
	mov	rax, QWORD PTR src_channel$12[rbp]
	mov	QWORD PTR tv227[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv227[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T31[rbp]
	call	??0ImRect@@QEAA@AEBUImVec4@@@Z		; ImRect::ImRect
	lea	rdx, QWORD PTR $T31[rbp]
	mov	rcx, QWORD PTR tv231[rbp]
	call	?Add@ImRect@@QEAAXAEBU1@@Z		; ImRect::Add
; Line 2383
	mov	eax, DWORD PTR merge_group_n$14[rbp]
	mov	ecx, 1
	mov	DWORD PTR tv592[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv592[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR merge_group_mask$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR merge_group_mask$[rbp], eax
; Line 2384
	jmp	$LN5@TableMerge
$LN6@TableMerge:
; Line 2388
	mov	rax, QWORD PTR column$8[rbp]
	mov	BYTE PTR [rax+87], 255			; 000000ffH
; Line 2389
	jmp	$LN2@TableMerge
$LN3@TableMerge:
; Line 2410
	cmp	DWORD PTR merge_group_mask$[rbp], 0
	je	$LN30@TableMerge
; Line 2413
	mov	DWORD PTR LEADING_DRAW_CHANNELS$16[rbp], 2
; Line 2414
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8264				; 00002048H
	mov	QWORD PTR tv242[rbp], rax
	mov	rax, QWORD PTR splitter$[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, 2
	mov	edx, eax
	mov	rcx, QWORD PTR tv242[rbp]
	call	?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::resize
; Line 2415
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8272]
	mov	QWORD PTR dst_tmp$17[rbp], rax
; Line 2416
	lea	rcx, QWORD PTR remaining_mask$18[rbp]
	call	??0?$ImBitArray@$0IE@@@QEAA@XZ		; ImBitArray<132>::ImBitArray<132>
; Line 2417
	mov	rax, QWORD PTR splitter$[rbp]
	mov	r8d, DWORD PTR [rax+4]
	mov	edx, 2
	lea	rcx, QWORD PTR remaining_mask$18[rbp]
	call	?SetBitRange@?$ImBitArray@$0IE@@@QEAAXHH@Z ; ImBitArray<132>::SetBitRange
; Line 2418
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+504]
	mov	edx, eax
	lea	rcx, QWORD PTR remaining_mask$18[rbp]
	call	?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z	; ImBitArray<132>::ClearBit
; Line 2419
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	je	SHORT $LN56@TableMerge
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+504]
	cmp	eax, 1
	jne	SHORT $LN56@TableMerge
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 97					; 00000061H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LA@JABKDEHA@?$AAh?$AAa?$AAs?$AA_?$AAf?$AAr?$AAe?$AAe?$AAz?$AAe?$AA_?$AAv?$AA?5?$AA?$DN?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN56@TableMerge:
; Line 2420
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	je	SHORT $LN57@TableMerge
	mov	DWORD PTR tv267[rbp], 3
	jmp	SHORT $LN58@TableMerge
$LN57@TableMerge:
	mov	DWORD PTR tv267[rbp], 2
$LN58@TableMerge:
	mov	rax, QWORD PTR splitter$[rbp]
	mov	ecx, DWORD PTR tv267[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	mov	DWORD PTR remaining_count$19[rbp], eax
; Line 2422
	lea	rax, QWORD PTR host_rect$20[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+356]
	mov	ecx, 16
	rep movsb
; Line 2423
	mov	DWORD PTR merge_group_n$21[rbp], 0
	jmp	SHORT $LN10@TableMerge
$LN8@TableMerge:
	mov	eax, DWORD PTR merge_group_n$21[rbp]
	inc	eax
	mov	DWORD PTR merge_group_n$21[rbp], eax
$LN10@TableMerge:
	cmp	DWORD PTR merge_group_n$21[rbp], 4
	jge	$LN9@TableMerge
; Line 2425
	movsxd	rax, DWORD PTR merge_group_n$21[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	eax, DWORD PTR merge_groups$[rbp+rax+16]
	mov	DWORD PTR merge_channels_count$22[rbp], eax
	cmp	DWORD PTR merge_channels_count$22[rbp], 0
	je	$LN31@TableMerge
; Line 2427
	movsxd	rax, DWORD PTR merge_group_n$21[rbp]
	imul	rax, rax, 40				; 00000028H
	lea	rax, QWORD PTR merge_groups$[rbp+rax]
	mov	QWORD PTR merge_group$23[rbp], rax
; Line 2428
	lea	rax, QWORD PTR merge_clip_rect$24[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR merge_group$23[rbp]
	mov	ecx, 16
	rep movsb
; Line 2437
	mov	eax, DWORD PTR merge_group_n$21[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN33@TableMerge
	movzx	eax, BYTE PTR has_freeze_h$[rbp]
	test	eax, eax
	jne	SHORT $LN32@TableMerge
$LN33@TableMerge:
; Line 2438
	movss	xmm1, DWORD PTR host_rect$20[rbp]
	movss	xmm0, DWORD PTR merge_clip_rect$24[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR merge_clip_rect$24[rbp], xmm0
$LN32@TableMerge:
; Line 2439
	mov	eax, DWORD PTR merge_group_n$21[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN35@TableMerge
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	jne	SHORT $LN34@TableMerge
$LN35@TableMerge:
; Line 2440
	movss	xmm1, DWORD PTR host_rect$20[rbp+4]
	movss	xmm0, DWORD PTR merge_clip_rect$24[rbp+4]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR merge_clip_rect$24[rbp+4], xmm0
$LN34@TableMerge:
; Line 2441
	mov	eax, DWORD PTR merge_group_n$21[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN36@TableMerge
; Line 2442
	movss	xmm1, DWORD PTR host_rect$20[rbp+8]
	movss	xmm0, DWORD PTR merge_clip_rect$24[rbp+8]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR merge_clip_rect$24[rbp+8], xmm0
$LN36@TableMerge:
; Line 2443
	mov	eax, DWORD PTR merge_group_n$21[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN37@TableMerge
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 131072				; 00020000H
	test	eax, eax
	jne	SHORT $LN37@TableMerge
; Line 2444
	movss	xmm1, DWORD PTR host_rect$20[rbp+12]
	movss	xmm0, DWORD PTR merge_clip_rect$24[rbp+12]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR merge_clip_rect$24[rbp+12], xmm0
$LN37@TableMerge:
; Line 2450
	mov	rax, QWORD PTR merge_group$23[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR remaining_count$19[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR remaining_count$19[rbp], eax
; Line 2451
	mov	DWORD PTR n$25[rbp], 0
	jmp	SHORT $LN13@TableMerge
$LN11@TableMerge:
	mov	eax, DWORD PTR n$25[rbp]
	inc	eax
	mov	DWORD PTR n$25[rbp], eax
$LN13@TableMerge:
	cmp	DWORD PTR n$25[rbp], 5
	jge	SHORT $LN12@TableMerge
; Line 2452
	movsxd	rax, DWORD PTR n$25[rbp]
	mov	rcx, QWORD PTR merge_group$23[rbp]
	mov	eax, DWORD PTR [rcx+rax*4+20]
	not	eax
	movsxd	rcx, DWORD PTR n$25[rbp]
	mov	ecx, DWORD PTR remaining_mask$18[rbp+rcx*4]
	and	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$25[rbp]
	mov	DWORD PTR remaining_mask$18[rbp+rcx*4], eax
	jmp	SHORT $LN11@TableMerge
$LN12@TableMerge:
; Line 2453
	mov	DWORD PTR n$26[rbp], 0
	jmp	SHORT $LN16@TableMerge
$LN14@TableMerge:
	mov	eax, DWORD PTR n$26[rbp]
	inc	eax
	mov	DWORD PTR n$26[rbp], eax
$LN16@TableMerge:
	mov	rax, QWORD PTR splitter$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR n$26[rbp], eax
	jge	$LN15@TableMerge
	cmp	DWORD PTR merge_channels_count$22[rbp], 0
	je	$LN15@TableMerge
; Line 2456
	mov	rax, QWORD PTR merge_group$23[rbp]
	add	rax, 20
	mov	QWORD PTR tv368[rbp], rax
	mov	edx, DWORD PTR n$26[rbp]
	mov	rcx, QWORD PTR tv368[rbp]
	call	?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z	; ImBitArray<132>::TestBit
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN38@TableMerge
; Line 2457
	jmp	SHORT $LN14@TableMerge
$LN38@TableMerge:
; Line 2458
	mov	rax, QWORD PTR merge_group$23[rbp]
	add	rax, 20
	mov	QWORD PTR tv375[rbp], rax
	mov	edx, DWORD PTR n$26[rbp]
	mov	rcx, QWORD PTR tv375[rbp]
	call	?ClearBit@?$ImBitArray@$0IE@@@QEAAXH@Z	; ImBitArray<132>::ClearBit
; Line 2459
	mov	eax, DWORD PTR merge_channels_count$22[rbp]
	dec	eax
	mov	DWORD PTR merge_channels_count$22[rbp], eax
; Line 2461
	mov	rax, QWORD PTR splitter$[rbp]
	add	rax, 8
	mov	QWORD PTR tv382[rbp], rax
	mov	edx, DWORD PTR n$26[rbp]
	mov	rcx, QWORD PTR tv382[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR channel$27[rbp], rax
; Line 2462
	mov	rax, QWORD PTR channel$27[rbp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN59@TableMerge
	mov	rax, QWORD PTR channel$27[rbp]
	mov	QWORD PTR tv395[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv395[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T32[rbp]
	call	??0ImRect@@QEAA@AEBUImVec4@@@Z		; ImRect::ImRect
	mov	rdx, rax
	lea	rcx, QWORD PTR merge_clip_rect$24[rbp]
	call	?Contains@ImRect@@QEBA_NAEBU1@@Z	; ImRect::Contains
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN60@TableMerge
$LN59@TableMerge:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 140				; 0000008cH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1MG@IJOOMOFE@?$AAc?$AAh?$AAa?$AAn?$AAn?$AAe?$AAl?$AA?9?$AA?$DO?$AA_?$AAC?$AAm?$AAd?$AAB?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@TableMerge:
; Line 2463
	lea	rdx, QWORD PTR $T33[rbp]
	lea	rcx, QWORD PTR merge_clip_rect$24[rbp]
	call	?ToVec4@ImRect@@QEBA?AUImVec4@@XZ	; ImRect::ToVec4
	lea	rcx, QWORD PTR $T34[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR channel$27[rbp]
	mov	QWORD PTR tv411[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv411[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	lea	rcx, QWORD PTR $T34[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 2464
	mov	rax, QWORD PTR dst_tmp$17[rbp]
	mov	QWORD PTR tv424[rbp], rax
	mov	rax, QWORD PTR dst_tmp$17[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR dst_tmp$17[rbp], rax
	mov	rdi, QWORD PTR tv424[rbp]
	mov	rsi, QWORD PTR channel$27[rbp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 2465
	jmp	$LN14@TableMerge
$LN15@TableMerge:
$LN31@TableMerge:
; Line 2469
	cmp	DWORD PTR merge_group_n$21[rbp], 1
	jne	SHORT $LN39@TableMerge
	movzx	eax, BYTE PTR has_freeze_v$[rbp]
	test	eax, eax
	je	SHORT $LN39@TableMerge
; Line 2470
	mov	rax, QWORD PTR splitter$[rbp]
	add	rax, 8
	mov	QWORD PTR tv441[rbp], rax
	mov	rax, QWORD PTR dst_tmp$17[rbp]
	mov	QWORD PTR tv444[rbp], rax
	mov	rax, QWORD PTR dst_tmp$17[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR dst_tmp$17[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+504]
	mov	edx, eax
	mov	rcx, QWORD PTR tv441[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	rdi, QWORD PTR tv444[rbp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
$LN39@TableMerge:
; Line 2471
	jmp	$LN8@TableMerge
$LN9@TableMerge:
; Line 2474
	mov	DWORD PTR n$28[rbp], 0
	jmp	SHORT $LN19@TableMerge
$LN17@TableMerge:
	mov	eax, DWORD PTR n$28[rbp]
	inc	eax
	mov	DWORD PTR n$28[rbp], eax
$LN19@TableMerge:
	mov	rax, QWORD PTR splitter$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR n$28[rbp], eax
	jge	$LN18@TableMerge
	cmp	DWORD PTR remaining_count$19[rbp], 0
	je	$LN18@TableMerge
; Line 2476
	mov	edx, DWORD PTR n$28[rbp]
	lea	rcx, QWORD PTR remaining_mask$18[rbp]
	call	?TestBit@?$ImBitArray@$0IE@@@QEBA_NH@Z	; ImBitArray<132>::TestBit
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN40@TableMerge
; Line 2477
	jmp	SHORT $LN17@TableMerge
$LN40@TableMerge:
; Line 2478
	mov	rax, QWORD PTR splitter$[rbp]
	add	rax, 8
	mov	QWORD PTR tv461[rbp], rax
	mov	edx, DWORD PTR n$28[rbp]
	mov	rcx, QWORD PTR tv461[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR channel$29[rbp], rax
; Line 2479
	mov	rax, QWORD PTR dst_tmp$17[rbp]
	mov	QWORD PTR tv468[rbp], rax
	mov	rax, QWORD PTR dst_tmp$17[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR dst_tmp$17[rbp], rax
	mov	rdi, QWORD PTR tv468[rbp]
	mov	rsi, QWORD PTR channel$29[rbp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 2480
	mov	eax, DWORD PTR remaining_count$19[rbp]
	dec	eax
	mov	DWORD PTR remaining_count$19[rbp], eax
; Line 2481
	jmp	$LN17@TableMerge
$LN18@TableMerge:
; Line 2482
	mov	rax, QWORD PTR g$[rbp]
	movsxd	rax, DWORD PTR [rax+8264]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR g$[rbp]
	add	rax, QWORD PTR [rcx+8272]
	cmp	QWORD PTR dst_tmp$17[rbp], rax
	je	SHORT $LN61@TableMerge
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 160				; 000000a0H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1KG@FHCGPPO@?$AAd?$AAs?$AAt?$AA_?$AAt?$AAm?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAg?$AA?4?$AAD?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN61@TableMerge:
; Line 2483
	mov	rax, QWORD PTR splitter$[rbp]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR splitter$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, 64					; 00000040H
	mov	rdx, QWORD PTR g$[rbp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR [rdx+8272]
	mov	rcx, rax
	rep movsb
$LN30@TableMerge:
; Line 2485
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1968]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableMergeDrawChannels
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
want_separator$ = 68
column_n$ = 100
column$ = 136
can_resize$1 = 164
size_all_desc$2 = 200
other_column_n$3 = 228
other_column$4 = 264
name$5 = 296
menu_item_active$6 = 324
tv218 = 532
tv199 = 532
tv161 = 532
tv128 = 532
tv77 = 532
tv184 = 536
tv84 = 536
tv85 = 544
table$ = 592
?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableDrawContextMenu, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3022
$LN34:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3023
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3024
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 3025
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN5@TableDrawC
; Line 3026
	jmp	$LN1@TableDrawC
$LN5@TableDrawC:
; Line 3028
	mov	BYTE PTR want_separator$[rbp], 0
; Line 3029
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+496]
	test	eax, eax
	jl	SHORT $LN22@TableDrawC
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+496]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jge	SHORT $LN22@TableDrawC
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+496]
	mov	DWORD PTR tv77[rbp], eax
	jmp	SHORT $LN23@TableDrawC
$LN22@TableDrawC:
	mov	DWORD PTR tv77[rbp], -1
$LN23@TableDrawC:
	mov	eax, DWORD PTR tv77[rbp]
	mov	DWORD PTR column_n$[rbp], eax
; Line 3030
	cmp	DWORD PTR column_n$[rbp], -1
	je	SHORT $LN24@TableDrawC
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv84[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv84[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR tv85[rbp], rax
	jmp	SHORT $LN25@TableDrawC
$LN24@TableDrawC:
	mov	QWORD PTR tv85[rbp], 0
$LN25@TableDrawC:
	mov	rax, QWORD PTR tv85[rbp]
	mov	QWORD PTR column$[rbp], rax
; Line 3033
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	$LN6@TableDrawC
; Line 3035
	cmp	QWORD PTR column$[rbp], 0
	je	SHORT $LN7@TableDrawC
; Line 3037
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN26@TableDrawC
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	je	SHORT $LN26@TableDrawC
	mov	BYTE PTR tv128[rbp], 1
	jmp	SHORT $LN27@TableDrawC
$LN26@TableDrawC:
	mov	BYTE PTR tv128[rbp], 0
$LN27@TableDrawC:
	movzx	eax, BYTE PTR tv128[rbp]
	mov	BYTE PTR can_resize$1[rbp], al
; Line 3038
	movzx	r9d, BYTE PTR can_resize$1[rbp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_0BN@CNPDCOK@Size?5column?5to?5fit?$CD?$CD?$CDSizeOne@
	call	?MenuItem@ImGui@@YA_NPEBD0_N1@Z		; ImGui::MenuItem
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@TableDrawC
; Line 3039
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableSetColumnWidthAutoSingle
$LN8@TableDrawC:
$LN7@TableDrawC:
; Line 3043
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+482]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+481]
	cmp	eax, ecx
	jne	SHORT $LN9@TableDrawC
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 57344				; 0000e000H
	cmp	eax, 16384				; 00004000H
	je	SHORT $LN9@TableDrawC
; Line 3044
	lea	rax, OFFSET FLAT:??_C@_0CC@MJIBPDCL@Size?5all?5columns?5to?5fit?$CD?$CD?$CDSizeA@
	mov	QWORD PTR size_all_desc$2[rbp], rax
	jmp	SHORT $LN10@TableDrawC
$LN9@TableDrawC:
; Line 3046
	lea	rax, OFFSET FLAT:??_C@_0CG@CFICKNDA@Size?5all?5columns?5to?5default?$CD?$CD?$CDS@
	mov	QWORD PTR size_all_desc$2[rbp], rax
$LN10@TableDrawC:
; Line 3047
	mov	r9b, 1
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR size_all_desc$2[rbp]
	call	?MenuItem@ImGui@@YA_NPEBD0_N1@Z		; ImGui::MenuItem
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@TableDrawC
; Line 3048
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSetColumnWidthAutoAll@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSetColumnWidthAutoAll
$LN11@TableDrawC:
; Line 3049
	mov	BYTE PTR want_separator$[rbp], 1
$LN6@TableDrawC:
; Line 3053
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN12@TableDrawC
; Line 3055
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+513]
	test	eax, eax
	jne	SHORT $LN28@TableDrawC
	mov	BYTE PTR tv161[rbp], 1
	jmp	SHORT $LN29@TableDrawC
$LN28@TableDrawC:
	mov	BYTE PTR tv161[rbp], 0
$LN29@TableDrawC:
	movzx	r9d, BYTE PTR tv161[rbp]
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_0M@ECFOHDE@Reset?5order@
	call	?MenuItem@ImGui@@YA_NPEBD0_N1@Z		; ImGui::MenuItem
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@TableDrawC
; Line 3056
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+515], 1
$LN13@TableDrawC:
; Line 3057
	mov	BYTE PTR want_separator$[rbp], 1
$LN12@TableDrawC:
; Line 3082
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 4
	test	eax, eax
	je	$LN14@TableDrawC
; Line 3084
	movzx	eax, BYTE PTR want_separator$[rbp]
	test	eax, eax
	je	SHORT $LN15@TableDrawC
; Line 3085
	call	?Separator@ImGui@@YAXXZ			; ImGui::Separator
$LN15@TableDrawC:
; Line 3086
	mov	BYTE PTR want_separator$[rbp], 1
; Line 3088
	mov	dl, 1
	mov	ecx, 32					; 00000020H
	call	?PushItemFlag@ImGui@@YAXH_N@Z		; ImGui::PushItemFlag
; Line 3089
	mov	DWORD PTR other_column_n$3[rbp], 0
	jmp	SHORT $LN4@TableDrawC
$LN2@TableDrawC:
	mov	eax, DWORD PTR other_column_n$3[rbp]
	inc	eax
	mov	DWORD PTR other_column_n$3[rbp], eax
$LN4@TableDrawC:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR other_column_n$3[rbp], eax
	jge	$LN3@TableDrawC
; Line 3091
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv184[rbp], rax
	mov	edx, DWORD PTR other_column_n$3[rbp]
	mov	rcx, QWORD PTR tv184[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR other_column$4[rbp], rax
; Line 3092
	mov	rax, QWORD PTR other_column$4[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN16@TableDrawC
; Line 3093
	jmp	SHORT $LN2@TableDrawC
$LN16@TableDrawC:
; Line 3095
	mov	edx, DWORD PTR other_column_n$3[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z ; ImGui::TableGetColumnName
	mov	QWORD PTR name$5[rbp], rax
; Line 3096
	cmp	QWORD PTR name$5[rbp], 0
	je	SHORT $LN18@TableDrawC
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR name$5[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN17@TableDrawC
$LN18@TableDrawC:
; Line 3097
	lea	rax, OFFSET FLAT:??_C@_09MGFHLAFE@?$DMUnknown?$DO@
	mov	QWORD PTR name$5[rbp], rax
$LN17@TableDrawC:
; Line 3100
	mov	rax, QWORD PTR other_column$4[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN30@TableDrawC
	mov	BYTE PTR tv199[rbp], 0
	jmp	SHORT $LN31@TableDrawC
$LN30@TableDrawC:
	mov	BYTE PTR tv199[rbp], 1
$LN31@TableDrawC:
	movzx	eax, BYTE PTR tv199[rbp]
	mov	BYTE PTR menu_item_active$6[rbp], al
; Line 3101
	mov	rax, QWORD PTR other_column$4[rbp]
	movzx	eax, BYTE PTR [rax+91]
	test	eax, eax
	je	SHORT $LN19@TableDrawC
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	cmp	eax, 1
	jg	SHORT $LN19@TableDrawC
; Line 3102
	mov	BYTE PTR menu_item_active$6[rbp], 0
$LN19@TableDrawC:
; Line 3103
	movzx	r9d, BYTE PTR menu_item_active$6[rbp]
	mov	rax, QWORD PTR other_column$4[rbp]
	movzx	r8d, BYTE PTR [rax+91]
	xor	edx, edx
	mov	rcx, QWORD PTR name$5[rbp]
	call	?MenuItem@ImGui@@YA_NPEBD0_N1@Z		; ImGui::MenuItem
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@TableDrawC
; Line 3104
	mov	rax, QWORD PTR other_column$4[rbp]
	movzx	eax, BYTE PTR [rax+91]
	test	eax, eax
	jne	SHORT $LN32@TableDrawC
	mov	DWORD PTR tv218[rbp], 1
	jmp	SHORT $LN33@TableDrawC
$LN32@TableDrawC:
	mov	DWORD PTR tv218[rbp], 0
$LN33@TableDrawC:
	mov	rax, QWORD PTR other_column$4[rbp]
	movzx	ecx, BYTE PTR tv218[rbp]
	mov	BYTE PTR [rax+92], cl
$LN20@TableDrawC:
; Line 3105
	jmp	$LN2@TableDrawC
$LN3@TableDrawC:
; Line 3106
	call	?PopItemFlag@ImGui@@YAXXZ		; ImGui::PopItemFlag
$LN14@TableDrawC:
$LN1@TableDrawC:
; Line 3108
	lea	rsp, QWORD PTR [rbp+568]
	pop	rdi
	pop	rbp
	ret	0
?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableDrawContextMenu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
inner_window$ = 8
inner_drawlist$ = 40
border_size$ = 68
draw_y1$ = 100
draw_y2_body$ = 132
draw_y2_head$ = 164
order_n$4 = 196
column_n$5 = 228
column$6 = 264
is_hovered$7 = 292
is_resized$8 = 324
is_resizable$9 = 356
is_frozen_separator$10 = 388
col$11 = 420
draw_y2$12 = 452
outer_border$13 = 488
outer_col$14 = 532
border_y$15 = 564
$T16 = 980
$T17 = 1012
$T18 = 1044
$T19 = 1076
$T20 = 1108
$T21 = 1140
$T22 = 1172
$T23 = 1204
tv395 = 1220
tv246 = 1220
tv240 = 1220
tv236 = 1220
tv194 = 1220
tv189 = 1220
tv185 = 1220
tv176 = 1220
tv139 = 1220
tv454 = 1224
tv393 = 1224
tv266 = 1224
tv233 = 1224
tv172 = 1224
tv165 = 1224
tv149 = 1224
tv81 = 1224
tv72 = 1224
tv391 = 1232
tv264 = 1232
__$ArrayPad$ = 1240
table$ = 1280
?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableDrawBorders, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2489
$LN46:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1312				; 00000520H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 216				; 000000d8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1352]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2490
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR inner_window$[rbp], rax
; Line 2491
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+392]
	add	rax, 592				; 00000250H
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 244				; 000000f4H
	mov	rdx, rax
	mov	rcx, QWORD PTR tv72[rbp]
	call	?Overlaps@ImRect@@QEBA_NAEBU1@@Z	; ImRect::Overlaps
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@TableDrawB
; Line 2492
	jmp	$LN1@TableDrawB
$LN5@TableDrawB:
; Line 2494
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR inner_drawlist$[rbp], rax
; Line 2495
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv81[rbp], rax
	xor	r8d, r8d
	mov	rdx, QWORD PTR inner_drawlist$[rbp]
	mov	rcx, QWORD PTR tv81[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 2496
	xor	r9d, r9d
	mov	rax, QWORD PTR table$[rbp]
	mov	r8, QWORD PTR [rax+332]
	mov	rax, QWORD PTR table$[rbp]
	mov	rdx, QWORD PTR [rax+324]
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z ; ImDrawList::PushClipRect
; Line 2499
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR border_size$[rbp], xmm0
; Line 2500
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+264]
	movss	DWORD PTR draw_y1$[rbp], xmm0
; Line 2501
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+272]
	movss	DWORD PTR draw_y2_body$[rbp], xmm0
; Line 2502
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+509]
	test	eax, eax
	je	SHORT $LN28@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	cmp	eax, 1
	jl	SHORT $LN26@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+264]
	movss	DWORD PTR tv139[rbp], xmm0
	jmp	SHORT $LN27@TableDrawB
$LN26@TableDrawB:
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+280]
	movss	DWORD PTR tv139[rbp], xmm0
$LN27@TableDrawB:
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv139[rbp]
	addss	xmm0, DWORD PTR [rax+216]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+272]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv149[rbp], xmm0
	jmp	SHORT $LN29@TableDrawB
$LN28@TableDrawB:
	movss	xmm0, DWORD PTR draw_y1$[rbp]
	movss	DWORD PTR tv149[rbp], xmm0
$LN29@TableDrawB:
	movss	xmm0, DWORD PTR tv149[rbp]
	movss	DWORD PTR draw_y2_head$[rbp], xmm0
; Line 2503
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	$LN6@TableDrawB
; Line 2505
	mov	DWORD PTR order_n$4[rbp], 0
	jmp	SHORT $LN4@TableDrawB
$LN2@TableDrawB:
	mov	eax, DWORD PTR order_n$4[rbp]
	inc	eax
	mov	DWORD PTR order_n$4[rbp], eax
$LN4@TableDrawB:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR order_n$4[rbp], eax
	jge	$LN3@TableDrawB
; Line 2507
	mov	eax, DWORD PTR order_n$4[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv454[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv454[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN7@TableDrawB
; Line 2508
	jmp	SHORT $LN2@TableDrawB
$LN7@TableDrawB:
; Line 2510
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv165[rbp], rax
	mov	edx, DWORD PTR order_n$4[rbp]
	mov	rcx, QWORD PTR tv165[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR column_n$5[rbp], eax
; Line 2511
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv172[rbp], rax
	mov	edx, DWORD PTR column_n$5[rbp]
	mov	rcx, QWORD PTR tv172[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$6[rbp], rax
; Line 2512
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+485]
	cmp	eax, DWORD PTR column_n$5[rbp]
	jne	SHORT $LN30@TableDrawB
	mov	BYTE PTR tv176[rbp], 1
	jmp	SHORT $LN31@TableDrawB
$LN30@TableDrawB:
	mov	BYTE PTR tv176[rbp], 0
$LN31@TableDrawB:
	movzx	eax, BYTE PTR tv176[rbp]
	mov	BYTE PTR is_hovered$7[rbp], al
; Line 2513
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	cmp	eax, DWORD PTR column_n$5[rbp]
	jne	SHORT $LN32@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+130]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, WORD PTR [rcx+128]
	cmp	eax, ecx
	jne	SHORT $LN32@TableDrawB
	mov	BYTE PTR tv185[rbp], 1
	jmp	SHORT $LN33@TableDrawB
$LN32@TableDrawB:
	mov	BYTE PTR tv185[rbp], 0
$LN33@TableDrawB:
	movzx	eax, BYTE PTR tv185[rbp]
	mov	BYTE PTR is_resized$8[rbp], al
; Line 2514
	mov	rax, QWORD PTR column$6[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1073741856				; 40000020H
	test	eax, eax
	jne	SHORT $LN34@TableDrawB
	mov	BYTE PTR tv189[rbp], 1
	jmp	SHORT $LN35@TableDrawB
$LN34@TableDrawB:
	mov	BYTE PTR tv189[rbp], 0
$LN35@TableDrawB:
	movzx	eax, BYTE PTR tv189[rbp]
	mov	BYTE PTR is_resizable$9[rbp], al
; Line 2515
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	mov	ecx, DWORD PTR order_n$4[rbp]
	inc	ecx
	cmp	eax, ecx
	jne	SHORT $LN36@TableDrawB
	mov	BYTE PTR tv194[rbp], 1
	jmp	SHORT $LN37@TableDrawB
$LN36@TableDrawB:
	mov	BYTE PTR tv194[rbp], 0
$LN37@TableDrawB:
	movzx	eax, BYTE PTR tv194[rbp]
	mov	BYTE PTR is_frozen_separator$10[rbp], al
; Line 2516
	mov	rax, QWORD PTR column$6[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+300]
	jbe	SHORT $LN8@TableDrawB
	movzx	eax, BYTE PTR is_resized$8[rbp]
	test	eax, eax
	jne	SHORT $LN8@TableDrawB
; Line 2517
	jmp	$LN2@TableDrawB
$LN8@TableDrawB:
; Line 2520
	mov	rax, QWORD PTR column$6[rbp]
	movsx	eax, BYTE PTR [rax+85]
	cmp	eax, -1
	jne	SHORT $LN9@TableDrawB
	movzx	eax, BYTE PTR is_resizable$9[rbp]
	test	eax, eax
	jne	SHORT $LN9@TableDrawB
; Line 2521
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 57344				; 0000e000H
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN11@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 65536				; 00010000H
	test	eax, eax
	je	SHORT $LN10@TableDrawB
$LN11@TableDrawB:
; Line 2522
	jmp	$LN2@TableDrawB
$LN10@TableDrawB:
$LN9@TableDrawB:
; Line 2523
	mov	rax, QWORD PTR column$6[rbp]
	mov	rcx, QWORD PTR column$6[rbp]
	movss	xmm0, DWORD PTR [rax+32]
	comiss	xmm0, DWORD PTR [rcx+12]
	jb	SHORT $LN12@TableDrawB
; Line 2524
	jmp	$LN2@TableDrawB
$LN12@TableDrawB:
; Line 2530
	movzx	eax, BYTE PTR is_hovered$7[rbp]
	test	eax, eax
	jne	SHORT $LN15@TableDrawB
	movzx	eax, BYTE PTR is_resized$8[rbp]
	test	eax, eax
	jne	SHORT $LN15@TableDrawB
	movzx	eax, BYTE PTR is_frozen_separator$10[rbp]
	test	eax, eax
	je	$LN13@TableDrawB
$LN15@TableDrawB:
; Line 2532
	movss	xmm0, DWORD PTR draw_y2_body$[rbp]
	movss	DWORD PTR draw_y2$12[rbp], xmm0
; Line 2533
	movzx	eax, BYTE PTR is_resized$8[rbp]
	test	eax, eax
	je	SHORT $LN40@TableDrawB
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 29
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv236[rbp], eax
	jmp	SHORT $LN41@TableDrawB
$LN40@TableDrawB:
	movzx	eax, BYTE PTR is_hovered$7[rbp]
	test	eax, eax
	je	SHORT $LN38@TableDrawB
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 28
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv233[rbp], eax
	jmp	SHORT $LN39@TableDrawB
$LN38@TableDrawB:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR tv233[rbp], eax
$LN39@TableDrawB:
	mov	eax, DWORD PTR tv233[rbp]
	mov	DWORD PTR tv236[rbp], eax
$LN41@TableDrawB:
	mov	eax, DWORD PTR tv236[rbp]
	mov	DWORD PTR col$11[rbp], eax
; Line 2534
	jmp	$LN14@TableDrawB
$LN13@TableDrawB:
; Line 2537
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 6144				; 00001800H
	test	eax, eax
	je	SHORT $LN42@TableDrawB
	movss	xmm0, DWORD PTR draw_y2_head$[rbp]
	movss	DWORD PTR tv240[rbp], xmm0
	jmp	SHORT $LN43@TableDrawB
$LN42@TableDrawB:
	movss	xmm0, DWORD PTR draw_y2_body$[rbp]
	movss	DWORD PTR tv240[rbp], xmm0
$LN43@TableDrawB:
	movss	xmm0, DWORD PTR tv240[rbp]
	movss	DWORD PTR draw_y2$12[rbp], xmm0
; Line 2538
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 6144				; 00001800H
	test	eax, eax
	je	SHORT $LN44@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR tv246[rbp], eax
	jmp	SHORT $LN45@TableDrawB
$LN44@TableDrawB:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+172]
	mov	DWORD PTR tv246[rbp], eax
$LN45@TableDrawB:
	mov	eax, DWORD PTR tv246[rbp]
	mov	DWORD PTR col$11[rbp], eax
$LN14@TableDrawB:
; Line 2541
	movss	xmm0, DWORD PTR draw_y2$12[rbp]
	comiss	xmm0, DWORD PTR draw_y1$[rbp]
	jbe	SHORT $LN16@TableDrawB
; Line 2542
	movss	xmm2, DWORD PTR draw_y2$12[rbp]
	mov	rax, QWORD PTR column$6[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv266[rbp], rax
	movss	xmm2, DWORD PTR draw_y1$[rbp]
	mov	rax, QWORD PTR column$6[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv264[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$11[rbp]
	mov	r8, QWORD PTR tv266[rbp]
	mov	rdx, QWORD PTR tv264[rbp]
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN16@TableDrawB:
; Line 2543
	jmp	$LN2@TableDrawB
$LN3@TableDrawB:
$LN6@TableDrawB:
; Line 2548
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1280				; 00000500H
	test	eax, eax
	je	$LN17@TableDrawB
; Line 2555
	lea	rax, QWORD PTR outer_border$13[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+244]
	mov	ecx, 16
	rep movsb
; Line 2556
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+168]
	mov	DWORD PTR outer_col$14[rbp], eax
; Line 2557
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1280				; 00000500H
	cmp	eax, 1280				; 00000500H
	jne	SHORT $LN18@TableDrawB
; Line 2559
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+48], xmm0
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR outer_col$14[rbp]
	lea	r8, QWORD PTR outer_border$13[rbp+8]
	lea	rdx, QWORD PTR outer_border$13[rbp]
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ; ImDrawList::AddRect
; Line 2560
	jmp	$LN19@TableDrawB
$LN18@TableDrawB:
; Line 2561
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	$LN20@TableDrawB
; Line 2563
	movss	xmm2, DWORD PTR outer_border$13[rbp+12]
	movss	xmm1, DWORD PTR outer_border$13[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR outer_col$14[rbp]
	mov	r8, rax
	lea	rdx, QWORD PTR outer_border$13[rbp]
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 2564
	movss	xmm2, DWORD PTR outer_border$13[rbp+4]
	movss	xmm1, DWORD PTR outer_border$13[rbp+8]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR outer_col$14[rbp]
	lea	r8, QWORD PTR outer_border$13[rbp+8]
	mov	rdx, rax
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 2565
	jmp	$LN21@TableDrawB
$LN20@TableDrawB:
; Line 2566
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN22@TableDrawB
; Line 2568
	movss	xmm2, DWORD PTR outer_border$13[rbp+4]
	movss	xmm1, DWORD PTR outer_border$13[rbp+8]
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR outer_col$14[rbp]
	mov	r8, rax
	lea	rdx, QWORD PTR outer_border$13[rbp]
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 2569
	movss	xmm2, DWORD PTR outer_border$13[rbp+12]
	movss	xmm1, DWORD PTR outer_border$13[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR outer_col$14[rbp]
	lea	r8, QWORD PTR outer_border$13[rbp+8]
	mov	rdx, rax
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN22@TableDrawB:
$LN21@TableDrawB:
$LN19@TableDrawB:
$LN17@TableDrawB:
; Line 2572
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN23@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+256]
	comiss	xmm0, DWORD PTR [rcx+136]
	jbe	$LN23@TableDrawB
; Line 2575
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	movss	DWORD PTR border_y$15[rbp], xmm0
; Line 2576
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR border_y$15[rbp]
	comiss	xmm0, DWORD PTR [rax+312]
	jb	$LN24@TableDrawB
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+320]
	comiss	xmm0, DWORD PTR border_y$15[rbp]
	jbe	$LN24@TableDrawB
; Line 2577
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+172]
	mov	DWORD PTR tv395[rbp], eax
	movss	xmm2, DWORD PTR border_y$15[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+180]
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv393[rbp], rax
	movss	xmm2, DWORD PTR border_y$15[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+176]
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv391[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv395[rbp]
	mov	r8, QWORD PTR tv393[rbp]
	mov	rdx, QWORD PTR tv391[rbp]
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN24@TableDrawB:
$LN23@TableDrawB:
; Line 2580
	mov	rcx, QWORD PTR inner_drawlist$[rbp]
	call	?PopClipRect@ImDrawList@@QEAAXXZ	; ImDrawList::PopClipRect
$LN1@TableDrawB:
; Line 2581
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1248]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableDrawBorders
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
visible_weight$ = 4
visible_width$ = 36
column_n$1 = 68
column$2 = 104
column_n$3 = 132
column$4 = 168
tv148 = 376
tv83 = 376
table$ = 416
?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableUpdateColumnsWeightFromWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2173
$LN19:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2174
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+494]
	cmp	eax, -1
	je	SHORT $LN13@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+495]
	cmp	eax, -1
	jne	SHORT $LN14@TableUpdat
$LN13@TableUpdat:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JM@ELMLJHLO@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@TableUpdat:
; Line 2177
	xorps	xmm0, xmm0
	movss	DWORD PTR visible_weight$[rbp], xmm0
; Line 2178
	xorps	xmm0, xmm0
	movss	DWORD PTR visible_width$[rbp], xmm0
; Line 2179
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableUpdat
$LN2@TableUpdat:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	$LN3@TableUpdat
; Line 2181
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv83[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv83[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$2[rbp], rax
; Line 2182
	mov	rax, QWORD PTR column$2[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	je	SHORT $LN9@TableUpdat
	mov	rax, QWORD PTR column$2[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN8@TableUpdat
$LN9@TableUpdat:
; Line 2183
	jmp	SHORT $LN2@TableUpdat
$LN8@TableUpdat:
; Line 2184
	mov	rax, QWORD PTR column$2[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN15@TableUpdat
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 11
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@MOAONJGL@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAt?$AAr?$AAe?$AAt?$AAc?$AAh@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@TableUpdat:
; Line 2185
	mov	rax, QWORD PTR column$2[rbp]
	movss	xmm0, DWORD PTR visible_weight$[rbp]
	addss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR visible_weight$[rbp], xmm0
; Line 2186
	mov	rax, QWORD PTR column$2[rbp]
	movss	xmm0, DWORD PTR visible_width$[rbp]
	addss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR visible_width$[rbp], xmm0
; Line 2187
	jmp	$LN2@TableUpdat
$LN3@TableUpdat:
; Line 2188
	movss	xmm0, DWORD PTR visible_weight$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN16@TableUpdat
	movss	xmm0, DWORD PTR visible_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN17@TableUpdat
$LN16@TableUpdat:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FM@OBNODAI@?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe?$AA_?$AAw?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@TableUpdat:
; Line 2191
	mov	DWORD PTR column_n$3[rbp], 0
	jmp	SHORT $LN7@TableUpdat
$LN5@TableUpdat:
	mov	eax, DWORD PTR column_n$3[rbp]
	inc	eax
	mov	DWORD PTR column_n$3[rbp], eax
$LN7@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$3[rbp], eax
	jge	$LN6@TableUpdat
; Line 2193
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv148[rbp], rax
	mov	edx, DWORD PTR column_n$3[rbp]
	mov	rcx, QWORD PTR tv148[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$4[rbp], rax
; Line 2194
	mov	rax, QWORD PTR column$4[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	je	SHORT $LN11@TableUpdat
	mov	rax, QWORD PTR column$4[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN10@TableUpdat
$LN11@TableUpdat:
; Line 2195
	jmp	SHORT $LN5@TableUpdat
$LN10@TableUpdat:
; Line 2196
	mov	rax, QWORD PTR column$4[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	divss	xmm0, DWORD PTR visible_width$[rbp]
	mulss	xmm0, DWORD PTR visible_weight$[rbp]
	mov	rax, QWORD PTR column$4[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 2197
	mov	rax, QWORD PTR column$4[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN18@TableUpdat
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 24
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@MOAONJGL@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAS?$AAt?$AAr?$AAe?$AAt?$AAc?$AAh@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@TableUpdat:
; Line 2198
	jmp	$LN5@TableUpdat
$LN6@TableUpdat:
; Line 2199
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableUpdateColumnsWeightFromWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
hit_half_width$ = 36
hit_y1$ = 68
hit_y2_body$ = 100
hit_y2_head$ = 132
order_n$6 = 164
column_n$7 = 196
column$8 = 232
border_y2_hit$9 = 260
column_id$10 = 292
hit_rect$11 = 328
hovered$12 = 372
held$13 = 404
pressed$14 = 436
tv143 = 644
tv248 = 648
tv202 = 648
tv136 = 648
tv129 = 648
tv204 = 656
__$ArrayPad$ = 664
table$ = 704
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableUpdateBorders, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1136
$LN21:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 728				; 000002d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 122				; 0000007aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1137
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1138
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN16@TableUpdat
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@BMHMHKON@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@TableUpdat:
; Line 1144
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR hit_half_width$[rbp], xmm0
; Line 1145
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+248]
	movss	DWORD PTR hit_y1$[rbp], xmm0
; Line 1146
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR hit_y1$[rbp]
	addss	xmm0, DWORD PTR [rax+212]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+256]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR hit_y2_body$[rbp], xmm0
; Line 1147
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR hit_y1$[rbp]
	addss	xmm0, DWORD PTR [rax+216]
	movss	DWORD PTR hit_y2_head$[rbp], xmm0
; Line 1149
	mov	DWORD PTR order_n$6[rbp], 0
	jmp	SHORT $LN4@TableUpdat
$LN2@TableUpdat:
	mov	eax, DWORD PTR order_n$6[rbp]
	inc	eax
	mov	DWORD PTR order_n$6[rbp], eax
$LN4@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR order_n$6[rbp], eax
	jge	$LN3@TableUpdat
; Line 1151
	mov	eax, DWORD PTR order_n$6[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv248[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv248[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN5@TableUpdat
; Line 1152
	jmp	SHORT $LN2@TableUpdat
$LN5@TableUpdat:
; Line 1154
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv129[rbp], rax
	mov	edx, DWORD PTR order_n$6[rbp]
	mov	rcx, QWORD PTR tv129[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR column_n$7[rbp], eax
; Line 1155
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv136[rbp], rax
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR tv136[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$8[rbp], rax
; Line 1156
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1073741856				; 40000020H
	test	eax, eax
	je	SHORT $LN6@TableUpdat
; Line 1157
	jmp	$LN2@TableUpdat
$LN6@TableUpdat:
; Line 1160
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN17@TableUpdat
	movss	xmm0, DWORD PTR hit_y2_head$[rbp]
	movss	DWORD PTR tv143[rbp], xmm0
	jmp	SHORT $LN18@TableUpdat
$LN17@TableUpdat:
	movss	xmm0, DWORD PTR hit_y2_body$[rbp]
	movss	DWORD PTR tv143[rbp], xmm0
$LN18@TableUpdat:
	movss	xmm0, DWORD PTR tv143[rbp]
	movss	DWORD PTR border_y2_hit$9[rbp], xmm0
; Line 1161
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN7@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+509]
	test	eax, eax
	jne	SHORT $LN7@TableUpdat
; Line 1162
	jmp	$LN2@TableUpdat
$LN7@TableUpdat:
; Line 1164
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+93]
	test	eax, eax
	jne	SHORT $LN8@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+488]
	cmp	eax, DWORD PTR column_n$7[rbp]
	je	SHORT $LN8@TableUpdat
; Line 1165
	jmp	$LN2@TableUpdat
$LN8@TableUpdat:
; Line 1167
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	mov	r8d, eax
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetColumnResizeID@ImGui@@YAIPEBUImGuiTable@@HH@Z ; ImGui::TableGetColumnResizeID
	mov	DWORD PTR column_id$10[rbp], eax
; Line 1168
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR __real@40800000
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	subss	xmm1, DWORD PTR __real@40800000
	movss	xmm2, DWORD PTR border_y2_hit$9[rbp]
	movss	DWORD PTR [rsp+32], xmm2
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR hit_y1$[rbp]
	lea	rcx, QWORD PTR hit_rect$11[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 1170
	mov	ecx, DWORD PTR column_id$10[rbp]
	call	?KeepAliveID@ImGui@@YAXI@Z		; ImGui::KeepAliveID
; Line 1172
	mov	BYTE PTR hovered$12[rbp], 0
	mov	BYTE PTR held$13[rbp], 0
; Line 1173
	mov	DWORD PTR [rsp+32], 6416		; 00001910H
	lea	r9, QWORD PTR held$13[rbp]
	lea	r8, QWORD PTR hovered$12[rbp]
	mov	edx, DWORD PTR column_id$10[rbp]
	lea	rcx, QWORD PTR hit_rect$11[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$14[rbp], al
; Line 1174
	movzx	eax, BYTE PTR pressed$14[rbp]
	test	eax, eax
	je	SHORT $LN9@TableUpdat
	xor	ecx, ecx
	call	?IsMouseDoubleClicked@ImGui@@YA_NH@Z	; ImGui::IsMouseDoubleClicked
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@TableUpdat
; Line 1176
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSetColumnWidthAutoSingle@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableSetColumnWidthAutoSingle
; Line 1177
	call	?ClearActiveID@ImGui@@YAXXZ		; ImGui::ClearActiveID
; Line 1178
	mov	BYTE PTR hovered$12[rbp], 0
	movzx	eax, BYTE PTR hovered$12[rbp]
	mov	BYTE PTR held$13[rbp], al
$LN9@TableUpdat:
; Line 1180
	movzx	eax, BYTE PTR held$13[rbp]
	test	eax, eax
	je	$LN10@TableUpdat
; Line 1182
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+488]
	cmp	eax, -1
	jne	SHORT $LN11@TableUpdat
; Line 1183
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+493]
	cmp	eax, -1
	je	SHORT $LN19@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv202[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+493]
	mov	edx, eax
	mov	rcx, QWORD PTR tv202[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR tv204[rbp], xmm0
	jmp	SHORT $LN20@TableUpdat
$LN19@TableUpdat:
	movss	xmm0, DWORD PTR __real@ff7fffff
	movss	DWORD PTR tv204[rbp], xmm0
$LN20@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv204[rbp]
	movss	DWORD PTR [rax+236], xmm0
$LN11@TableUpdat:
; Line 1184
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$7[rbp]
	mov	BYTE PTR [rax+487], cl
; Line 1185
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, WORD PTR [rcx+128]
	mov	WORD PTR [rax+130], cx
$LN10@TableUpdat:
; Line 1187
	movzx	eax, BYTE PTR hovered$12[rbp]
	test	eax, eax
	je	SHORT $LN14@TableUpdat
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7252]
	comiss	xmm0, DWORD PTR __real@3d75c28f
	ja	SHORT $LN13@TableUpdat
$LN14@TableUpdat:
	movzx	eax, BYTE PTR held$13[rbp]
	test	eax, eax
	je	SHORT $LN12@TableUpdat
$LN13@TableUpdat:
; Line 1189
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$7[rbp]
	mov	BYTE PTR [rax+485], cl
; Line 1190
	mov	ecx, 4
	call	?SetMouseCursor@ImGui@@YAXH@Z		; ImGui::SetMouseCursor
$LN12@TableUpdat:
; Line 1192
	jmp	$LN2@TableUpdat
$LN3@TableUpdat:
; Line 1193
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+680]
	pop	rdi
	pop	rbp
	ret	0
?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableUpdateBorders
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
g$ = 8
table_sizing_policy$ = 36
count_fixed$ = 68
count_stretch$ = 100
prev_visible_column_idx$ = 132
has_auto_fit_request$ = 164
has_resizable$ = 196
stretch_sum_width_auto$ = 228
fixed_max_width_auto$ = 260
order_n$6 = 292
column_n$7 = 324
column$8 = 360
start_auto_fit$9 = 388
column_is_resizable$10 = 420
sum_width_requests$ = 452
stretch_sum_weights$ = 484
column_n$11 = 516
column$12 = 552
column_is_resizable$13 = 580
width_auto$14 = 612
work_rect$ = 648
width_spacings$ = 692
width_avail$ = 724
width_avail_for_stretched_columns$ = 756
width_remaining_for_stretched_columns$ = 788
column_n$15 = 820
column$16 = 856
weight_ratio$17 = 884
order_n$18 = 916
column$19 = 952
mouse_hit_rect$ = 984
is_hovering_table$ = 1028
visible_n$ = 1060
offset_x_frozen$ = 1092
offset_x$ = 1124
host_clip_rect$ = 1160
order_n$20 = 1204
column_n$21 = 1236
column$22 = 1272
max_width$23 = 1300
is_visible$24 = 1332
unused_x1$ = 1364
context_menu_id$25 = 1396
inner_window$ = 1432
tv838 = 2020
tv822 = 2020
tv803 = 2020
tv748 = 2020
tv664 = 2020
tv632 = 2020
tv624 = 2020
tv614 = 2020
tv452 = 2020
tv327 = 2020
tv251 = 2020
tv220 = 2020
tv191 = 2020
tv168 = 2020
tv1590 = 2024
tv1579 = 2024
tv1485 = 2024
tv1416 = 2024
tv1376 = 2024
tv1283 = 2024
tv1263 = 2024
tv1207 = 2024
tv1200 = 2024
tv1038 = 2024
tv1027 = 2024
tv914 = 2024
tv794 = 2024
tv746 = 2024
tv703 = 2024
tv656 = 2024
tv649 = 2024
tv618 = 2024
tv572 = 2024
tv475 = 2024
tv417 = 2024
tv400 = 2024
tv323 = 2024
tv211 = 2024
tv193 = 2024
tv136 = 2024
tv95 = 2024
tv616 = 2028
tv190 = 2028
tv926 = 2032
tv612 = 2032
tv568 = 2032
tv924 = 2036
__$ArrayPad$ = 2040
table$ = 2080
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z PROC	; ImGui::TableUpdateLayout, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 715
$LN117:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2096				; 00000830H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 368				; 00000170H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2136]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 716
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 717
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	je	SHORT $LN86@TableUpdat
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@DEAGPPGG@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN86@TableUpdat:
; Line 719
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 57344				; 0000e000H
	mov	DWORD PTR table_sizing_policy$[rbp], eax
; Line 720
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+513], 1
; Line 721
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+481], 0
; Line 722
	mov	rax, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+80], 0
; Line 723
	mov	rax, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+72], 0
; Line 724
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+492], -1
; Line 725
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5528]
	mulss	xmm0, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+188], xmm0
; Line 729
	mov	DWORD PTR count_fixed$[rbp], 0
; Line 730
	mov	DWORD PTR count_stretch$[rbp], 0
; Line 731
	mov	DWORD PTR prev_visible_column_idx$[rbp], -1
; Line 732
	mov	BYTE PTR has_auto_fit_request$[rbp], 0
; Line 733
	mov	BYTE PTR has_resizable$[rbp], 0
; Line 734
	xorps	xmm0, xmm0
	movss	DWORD PTR stretch_sum_width_auto$[rbp], xmm0
; Line 735
	xorps	xmm0, xmm0
	movss	DWORD PTR fixed_max_width_auto$[rbp], xmm0
; Line 736
	mov	DWORD PTR order_n$6[rbp], 0
	jmp	SHORT $LN4@TableUpdat
$LN2@TableUpdat:
	mov	eax, DWORD PTR order_n$6[rbp]
	inc	eax
	mov	DWORD PTR order_n$6[rbp], eax
$LN4@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR order_n$6[rbp], eax
	jge	$LN3@TableUpdat
; Line 738
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv95[rbp], rax
	mov	edx, DWORD PTR order_n$6[rbp]
	mov	rcx, QWORD PTR tv95[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR column_n$7[rbp], eax
; Line 739
	mov	eax, DWORD PTR order_n$6[rbp]
	cmp	DWORD PTR column_n$7[rbp], eax
	je	SHORT $LN17@TableUpdat
; Line 740
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+513], 0
$LN17@TableUpdat:
; Line 741
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv136[rbp], rax
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR tv136[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$8[rbp], rax
; Line 746
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+483]
	cmp	eax, DWORD PTR column_n$7[rbp]
	jg	SHORT $LN18@TableUpdat
; Line 748
	xor	r8d, r8d
	mov	rdx, QWORD PTR column$8[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z ; TableSetupColumnFlags
; Line 749
	mov	eax, -1
	mov	rcx, QWORD PTR column$8[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 750
	mov	rax, QWORD PTR column$8[rbp]
	mov	DWORD PTR [rax+48], 0
; Line 751
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+28], xmm0
$LN18@TableUpdat:
; Line 755
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN20@TableUpdat
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN19@TableUpdat
$LN20@TableUpdat:
; Line 756
	mov	rax, QWORD PTR column$8[rbp]
	mov	BYTE PTR [rax+92], 1
$LN19@TableUpdat:
; Line 757
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+91]
	mov	rcx, QWORD PTR column$8[rbp]
	movzx	ecx, BYTE PTR [rcx+92]
	cmp	eax, ecx
	je	SHORT $LN21@TableUpdat
; Line 759
	mov	rax, QWORD PTR column$8[rbp]
	mov	rcx, QWORD PTR column$8[rbp]
	movzx	ecx, BYTE PTR [rcx+92]
	mov	BYTE PTR [rax+91], cl
; Line 760
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
$LN21@TableUpdat:
; Line 762
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+91]
	test	eax, eax
	je	SHORT $LN87@TableUpdat
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN87@TableUpdat
	mov	DWORD PTR tv168[rbp], 1
	jmp	SHORT $LN88@TableUpdat
$LN87@TableUpdat:
	mov	DWORD PTR tv168[rbp], 0
$LN88@TableUpdat:
	mov	rax, QWORD PTR column$8[rbp]
	movzx	ecx, BYTE PTR tv168[rbp]
	mov	BYTE PTR [rax+90], cl
; Line 764
	mov	rax, QWORD PTR column$8[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN22@TableUpdat
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	jne	SHORT $LN22@TableUpdat
; Line 765
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
$LN22@TableUpdat:
; Line 766
	mov	rax, QWORD PTR column$8[rbp]
	movsx	eax, BYTE PTR [rax+86]
	test	eax, eax
	jle	SHORT $LN23@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	jne	SHORT $LN23@TableUpdat
; Line 767
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
$LN23@TableUpdat:
; Line 770
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN93@TableUpdat
	mov	rax, QWORD PTR column$8[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+16]
	jbe	SHORT $LN91@TableUpdat
	mov	DWORD PTR tv191[rbp], 1
	jmp	SHORT $LN92@TableUpdat
$LN91@TableUpdat:
	mov	DWORD PTR tv191[rbp], 0
$LN92@TableUpdat:
	mov	eax, DWORD PTR tv191[rbp]
	mov	DWORD PTR tv193[rbp], eax
	jmp	SHORT $LN94@TableUpdat
$LN93@TableUpdat:
	mov	rax, QWORD PTR column$8[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+24]
	jbe	SHORT $LN89@TableUpdat
	mov	DWORD PTR tv190[rbp], 1
	jmp	SHORT $LN90@TableUpdat
$LN89@TableUpdat:
	mov	DWORD PTR tv190[rbp], 0
$LN90@TableUpdat:
	mov	eax, DWORD PTR tv190[rbp]
	mov	DWORD PTR tv193[rbp], eax
$LN94@TableUpdat:
	movzx	eax, BYTE PTR tv193[rbp]
	mov	BYTE PTR start_auto_fit$9[rbp], al
; Line 771
	movzx	eax, BYTE PTR start_auto_fit$9[rbp]
	test	eax, eax
	je	SHORT $LN24@TableUpdat
; Line 772
	mov	rax, QWORD PTR column$8[rbp]
	mov	BYTE PTR [rax+100], 7
	mov	rax, QWORD PTR column$8[rbp]
	mov	BYTE PTR [rax+99], 7
$LN24@TableUpdat:
; Line 774
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	jne	SHORT $LN25@TableUpdat
; Line 776
	mov	rax, QWORD PTR column$8[rbp]
	mov	BYTE PTR [rax+83], -1
; Line 777
	jmp	$LN2@TableUpdat
$LN25@TableUpdat:
; Line 781
	mov	rax, QWORD PTR column$8[rbp]
	movzx	ecx, BYTE PTR prev_visible_column_idx$[rbp]
	mov	BYTE PTR [rax+84], cl
; Line 782
	mov	rax, QWORD PTR column$8[rbp]
	mov	BYTE PTR [rax+85], -1
; Line 783
	cmp	DWORD PTR prev_visible_column_idx$[rbp], -1
	je	SHORT $LN26@TableUpdat
; Line 784
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv211[rbp], rax
	mov	edx, DWORD PTR prev_visible_column_idx$[rbp]
	mov	rcx, QWORD PTR tv211[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movzx	ecx, BYTE PTR column_n$7[rbp]
	mov	BYTE PTR [rax+85], cl
	jmp	SHORT $LN27@TableUpdat
$LN26@TableUpdat:
; Line 786
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$7[rbp]
	mov	BYTE PTR [rax+492], cl
$LN27@TableUpdat:
; Line 787
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+481]
	mov	BYTE PTR tv220[rbp], al
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+481]
	inc	al
	mov	rcx, QWORD PTR table$[rbp]
	mov	BYTE PTR [rcx+481], al
	mov	rax, QWORD PTR column$8[rbp]
	movzx	ecx, BYTE PTR tv220[rbp]
	mov	BYTE PTR [rax+83], cl
; Line 788
	mov	eax, DWORD PTR column_n$7[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1200[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1200[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	or	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 789
	mov	rax, QWORD PTR column$8[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	ecx, 1
	mov	QWORD PTR tv1207[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1207[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	or	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 790
	mov	eax, DWORD PTR column_n$7[rbp]
	mov	DWORD PTR prev_visible_column_idx$[rbp], eax
; Line 791
	mov	rax, QWORD PTR column$8[rbp]
	movsx	eax, BYTE PTR [rax+83]
	mov	rcx, QWORD PTR column$8[rbp]
	movsx	ecx, BYTE PTR [rcx+82]
	cmp	eax, ecx
	jle	SHORT $LN95@TableUpdat
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 76					; 0000004cH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GM@PGNFGMB@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAI?$AAn?$AAd?$AAe?$AAx?$AAW?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN95@TableUpdat:
; Line 795
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+97]
	test	eax, eax
	jne	SHORT $LN28@TableUpdat
; Line 796
	mov	rdx, QWORD PTR column$8[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ; ImGui::TableGetColumnWidthAuto
	mov	rax, QWORD PTR column$8[rbp]
	movss	DWORD PTR [rax+20], xmm0
$LN28@TableUpdat:
; Line 799
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN96@TableUpdat
	mov	BYTE PTR tv251[rbp], 1
	jmp	SHORT $LN97@TableUpdat
$LN96@TableUpdat:
	mov	BYTE PTR tv251[rbp], 0
$LN97@TableUpdat:
	movzx	eax, BYTE PTR tv251[rbp]
	mov	BYTE PTR column_is_resizable$10[rbp], al
; Line 800
	movzx	eax, BYTE PTR column_is_resizable$10[rbp]
	test	eax, eax
	je	SHORT $LN29@TableUpdat
; Line 801
	mov	BYTE PTR has_resizable$[rbp], 1
$LN29@TableUpdat:
; Line 802
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN30@TableUpdat
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN30@TableUpdat
	movzx	eax, BYTE PTR column_is_resizable$10[rbp]
	test	eax, eax
	jne	SHORT $LN30@TableUpdat
; Line 803
	mov	rax, QWORD PTR column$8[rbp]
	mov	rcx, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR [rcx+28]
	movss	DWORD PTR [rax+20], xmm0
$LN30@TableUpdat:
; Line 805
	mov	rax, QWORD PTR column$8[rbp]
	movzx	eax, BYTE PTR [rax+99]
	test	eax, eax
	je	SHORT $LN31@TableUpdat
; Line 806
	mov	BYTE PTR has_auto_fit_request$[rbp], 1
$LN31@TableUpdat:
; Line 807
	mov	rax, QWORD PTR column$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN32@TableUpdat
; Line 809
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm0, DWORD PTR stretch_sum_width_auto$[rbp]
	addss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR stretch_sum_width_auto$[rbp], xmm0
; Line 810
	mov	eax, DWORD PTR count_stretch$[rbp]
	inc	eax
	mov	DWORD PTR count_stretch$[rbp], eax
; Line 811
	jmp	SHORT $LN33@TableUpdat
$LN32@TableUpdat:
; Line 814
	mov	rax, QWORD PTR column$8[rbp]
	movss	xmm1, DWORD PTR [rax+20]
	movss	xmm0, DWORD PTR fixed_max_width_auto$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR fixed_max_width_auto$[rbp], xmm0
; Line 815
	mov	eax, DWORD PTR count_fixed$[rbp]
	inc	eax
	mov	DWORD PTR count_fixed$[rbp], eax
$LN33@TableUpdat:
; Line 817
	jmp	$LN2@TableUpdat
$LN3@TableUpdat:
; Line 818
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN34@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+480]
	test	eax, eax
	jne	SHORT $LN34@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	SHORT $LN34@TableUpdat
; Line 819
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
$LN34@TableUpdat:
; Line 820
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR prev_visible_column_idx$[rbp]
	mov	BYTE PTR [rax+493], cl
; Line 821
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+492]
	test	eax, eax
	jl	SHORT $LN98@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+493]
	test	eax, eax
	jge	SHORT $LN99@TableUpdat
$LN98@TableUpdat:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 106				; 0000006aH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JA@JKJMNFJF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAL?$AAe?$AAf?$AAt?$AAM?$AAo?$AAs?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN99@TableUpdat:
; Line 826
	movzx	eax, BYTE PTR has_auto_fit_request$[rbp]
	test	eax, eax
	je	SHORT $LN35@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+400]
	cmp	QWORD PTR [rax+392], rcx
	je	SHORT $LN35@TableUpdat
; Line 827
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	BYTE PTR [rax+147], 0
$LN35@TableUpdat:
; Line 828
	movzx	eax, BYTE PTR has_auto_fit_request$[rbp]
	test	eax, eax
	je	SHORT $LN36@TableUpdat
; Line 829
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
$LN36@TableUpdat:
; Line 832
	xorps	xmm0, xmm0
	movss	DWORD PTR sum_width_requests$[rbp], xmm0
; Line 833
	xorps	xmm0, xmm0
	movss	DWORD PTR stretch_sum_weights$[rbp], xmm0
; Line 834
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+495], -1
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+494], -1
; Line 835
	mov	DWORD PTR column_n$11[rbp], 0
	jmp	SHORT $LN7@TableUpdat
$LN5@TableUpdat:
	mov	eax, DWORD PTR column_n$11[rbp]
	inc	eax
	mov	DWORD PTR column_n$11[rbp], eax
$LN7@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$11[rbp], eax
	jge	$LN6@TableUpdat
; Line 837
	mov	eax, DWORD PTR column_n$11[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1263[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1263[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN37@TableUpdat
; Line 838
	jmp	SHORT $LN5@TableUpdat
$LN37@TableUpdat:
; Line 839
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv323[rbp], rax
	mov	edx, DWORD PTR column_n$11[rbp]
	mov	rcx, QWORD PTR tv323[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$12[rbp], rax
; Line 841
	mov	rax, QWORD PTR column$12[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN100@TableUpdat
	mov	BYTE PTR tv327[rbp], 1
	jmp	SHORT $LN101@TableUpdat
$LN100@TableUpdat:
	mov	BYTE PTR tv327[rbp], 0
$LN101@TableUpdat:
	movzx	eax, BYTE PTR tv327[rbp]
	mov	BYTE PTR column_is_resizable$13[rbp], al
; Line 842
	mov	rax, QWORD PTR column$12[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	$LN38@TableUpdat
; Line 845
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR width_auto$14[rbp], xmm0
; Line 846
	cmp	DWORD PTR table_sizing_policy$[rbp], 16384 ; 00004000H
	jne	SHORT $LN40@TableUpdat
	mov	rax, QWORD PTR column$12[rbp]
	movzx	eax, BYTE PTR [rax+99]
	test	eax, eax
	jne	SHORT $LN41@TableUpdat
	movzx	eax, BYTE PTR column_is_resizable$13[rbp]
	test	eax, eax
	jne	SHORT $LN40@TableUpdat
$LN41@TableUpdat:
; Line 847
	movss	xmm0, DWORD PTR fixed_max_width_auto$[rbp]
	movss	DWORD PTR width_auto$14[rbp], xmm0
$LN40@TableUpdat:
; Line 851
	mov	rax, QWORD PTR column$12[rbp]
	movzx	eax, BYTE PTR [rax+99]
	test	eax, eax
	je	SHORT $LN42@TableUpdat
; Line 852
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR width_auto$14[rbp]
	movss	DWORD PTR [rax+16], xmm0
	jmp	SHORT $LN43@TableUpdat
$LN42@TableUpdat:
; Line 853
	mov	rax, QWORD PTR column$12[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN44@TableUpdat
	movzx	eax, BYTE PTR column_is_resizable$13[rbp]
	test	eax, eax
	jne	SHORT $LN44@TableUpdat
	mov	eax, DWORD PTR column_n$11[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1283[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1283[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN44@TableUpdat
; Line 854
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR width_auto$14[rbp]
	movss	DWORD PTR [rax+16], xmm0
$LN44@TableUpdat:
$LN43@TableUpdat:
; Line 862
	mov	rax, QWORD PTR column$12[rbp]
	movzx	eax, BYTE PTR [rax+99]
	cmp	eax, 1
	jle	SHORT $LN45@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+507]
	test	eax, eax
	je	SHORT $LN45@TableUpdat
	mov	rax, QWORD PTR column$12[rbp]
	movzx	eax, BYTE PTR [rax+97]
	test	eax, eax
	jne	SHORT $LN45@TableUpdat
; Line 863
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+188]
	mulss	xmm0, DWORD PTR __real@40800000
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR column$12[rbp]
	movss	DWORD PTR [rax+16], xmm0
$LN45@TableUpdat:
; Line 864
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR sum_width_requests$[rbp]
	addss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR sum_width_requests$[rbp], xmm0
; Line 865
	jmp	$LN39@TableUpdat
$LN38@TableUpdat:
; Line 869
	mov	rax, QWORD PTR column$12[rbp]
	movzx	eax, BYTE PTR [rax+99]
	test	eax, eax
	jne	SHORT $LN47@TableUpdat
	mov	rax, QWORD PTR column$12[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+24]
	ja	SHORT $LN47@TableUpdat
	movzx	eax, BYTE PTR column_is_resizable$13[rbp]
	test	eax, eax
	jne	SHORT $LN46@TableUpdat
$LN47@TableUpdat:
; Line 871
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN48@TableUpdat
; Line 872
	mov	rax, QWORD PTR column$12[rbp]
	mov	rcx, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR [rcx+28]
	movss	DWORD PTR [rax+24], xmm0
	jmp	SHORT $LN49@TableUpdat
$LN48@TableUpdat:
; Line 873
	cmp	DWORD PTR table_sizing_policy$[rbp], 24576 ; 00006000H
	jne	SHORT $LN50@TableUpdat
; Line 874
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	divss	xmm0, DWORD PTR stretch_sum_width_auto$[rbp]
	cvtsi2ss xmm1, DWORD PTR count_stretch$[rbp]
	mulss	xmm0, xmm1
	mov	rax, QWORD PTR column$12[rbp]
	movss	DWORD PTR [rax+24], xmm0
	jmp	SHORT $LN51@TableUpdat
$LN50@TableUpdat:
; Line 876
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+24], xmm0
$LN51@TableUpdat:
$LN49@TableUpdat:
$LN46@TableUpdat:
; Line 879
	mov	rax, QWORD PTR column$12[rbp]
	movss	xmm0, DWORD PTR stretch_sum_weights$[rbp]
	addss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR stretch_sum_weights$[rbp], xmm0
; Line 880
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+494]
	cmp	eax, -1
	je	SHORT $LN53@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv400[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+494]
	mov	edx, eax
	mov	rcx, QWORD PTR tv400[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+82]
	mov	rcx, QWORD PTR column$12[rbp]
	movsx	ecx, BYTE PTR [rcx+82]
	cmp	eax, ecx
	jle	SHORT $LN52@TableUpdat
$LN53@TableUpdat:
; Line 881
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$11[rbp]
	mov	BYTE PTR [rax+494], cl
$LN52@TableUpdat:
; Line 882
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+495]
	cmp	eax, -1
	je	SHORT $LN55@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv417[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+495]
	mov	edx, eax
	mov	rcx, QWORD PTR tv417[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+82]
	mov	rcx, QWORD PTR column$12[rbp]
	movsx	ecx, BYTE PTR [rcx+82]
	cmp	eax, ecx
	jge	SHORT $LN54@TableUpdat
$LN55@TableUpdat:
; Line 883
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$11[rbp]
	mov	BYTE PTR [rax+495], cl
$LN54@TableUpdat:
$LN39@TableUpdat:
; Line 885
	mov	rax, QWORD PTR column$12[rbp]
	mov	BYTE PTR [rax+97], 0
; Line 886
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+196]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR sum_width_requests$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sum_width_requests$[rbp], xmm0
; Line 887
	jmp	$LN5@TableUpdat
$LN6@TableUpdat:
; Line 888
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR count_fixed$[rbp]
	mov	BYTE PTR [rax+482], cl
; Line 891
	lea	rax, QWORD PTR work_rect$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+276]
	mov	ecx, 16
	rep movsb
; Line 892
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+192]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+204]
	addss	xmm1, DWORD PTR [rcx+208]
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	dec	eax
	cvtsi2ss xmm2, eax
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR width_spacings$[rbp], xmm0
; Line 893
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN102@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN102@TableUpdat
	jne	SHORT $LN102@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 292				; 00000124H
	mov	rcx, rax
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR tv452[rbp], xmm0
	jmp	SHORT $LN103@TableUpdat
$LN102@TableUpdat:
	lea	rcx, QWORD PTR work_rect$[rbp]
	call	?GetWidth@ImRect@@QEBAMXZ		; ImRect::GetWidth
	movss	DWORD PTR tv452[rbp], xmm0
$LN103@TableUpdat:
	movss	xmm0, DWORD PTR tv452[rbp]
	movss	DWORD PTR width_avail$[rbp], xmm0
; Line 894
	movss	xmm0, DWORD PTR width_avail$[rbp]
	subss	xmm0, DWORD PTR width_spacings$[rbp]
	subss	xmm0, DWORD PTR sum_width_requests$[rbp]
	movss	DWORD PTR width_avail_for_stretched_columns$[rbp], xmm0
; Line 895
	movss	xmm0, DWORD PTR width_avail_for_stretched_columns$[rbp]
	movss	DWORD PTR width_remaining_for_stretched_columns$[rbp], xmm0
; Line 896
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+196]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR width_spacings$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+224], xmm0
; Line 897
	mov	DWORD PTR column_n$15[rbp], 0
	jmp	SHORT $LN10@TableUpdat
$LN8@TableUpdat:
	mov	eax, DWORD PTR column_n$15[rbp]
	inc	eax
	mov	DWORD PTR column_n$15[rbp], eax
$LN10@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$15[rbp], eax
	jge	$LN9@TableUpdat
; Line 899
	mov	eax, DWORD PTR column_n$15[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1376[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1376[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN56@TableUpdat
; Line 900
	jmp	SHORT $LN8@TableUpdat
$LN56@TableUpdat:
; Line 901
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv475[rbp], rax
	mov	edx, DWORD PTR column_n$15[rbp]
	mov	rcx, QWORD PTR tv475[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$16[rbp], rax
; Line 904
	mov	rax, QWORD PTR column$16[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN57@TableUpdat
; Line 906
	mov	rax, QWORD PTR column$16[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	divss	xmm0, DWORD PTR stretch_sum_weights$[rbp]
	movss	DWORD PTR weight_ratio$17[rbp], xmm0
; Line 907
	movss	xmm0, DWORD PTR width_avail_for_stretched_columns$[rbp]
	mulss	xmm0, DWORD PTR weight_ratio$17[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+188]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	addss	xmm0, DWORD PTR __real@3c23d70a
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR column$16[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 908
	mov	rax, QWORD PTR column$16[rbp]
	movss	xmm0, DWORD PTR width_remaining_for_stretched_columns$[rbp]
	subss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR width_remaining_for_stretched_columns$[rbp], xmm0
$LN57@TableUpdat:
; Line 913
	mov	rax, QWORD PTR column$16[rbp]
	movsx	eax, BYTE PTR [rax+85]
	cmp	eax, -1
	jne	SHORT $LN58@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+494]
	cmp	eax, -1
	je	SHORT $LN58@TableUpdat
; Line 914
	mov	rax, QWORD PTR column$16[rbp]
	mov	eax, DWORD PTR [rax]
	bts	eax, 30
	mov	rcx, QWORD PTR column$16[rbp]
	mov	DWORD PTR [rcx], eax
$LN58@TableUpdat:
; Line 917
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+188]
	mov	rax, QWORD PTR column$16[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	call	?ImFloor@@YAMM@Z			; ImFloor
	mov	rax, QWORD PTR column$16[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 918
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR column$16[rbp]
	movss	xmm0, DWORD PTR [rax+224]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+224], xmm0
; Line 919
	jmp	$LN8@TableUpdat
$LN9@TableUpdat:
; Line 923
	movss	xmm0, DWORD PTR width_remaining_for_stretched_columns$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	$LN59@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 524288				; 00080000H
	test	eax, eax
	jne	$LN59@TableUpdat
; Line 924
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	dec	eax
	mov	DWORD PTR order_n$18[rbp], eax
	jmp	SHORT $LN13@TableUpdat
$LN11@TableUpdat:
	mov	eax, DWORD PTR order_n$18[rbp]
	dec	eax
	mov	DWORD PTR order_n$18[rbp], eax
$LN13@TableUpdat:
	movss	xmm0, DWORD PTR stretch_sum_weights$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN12@TableUpdat
	movss	xmm0, DWORD PTR width_remaining_for_stretched_columns$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	$LN12@TableUpdat
	cmp	DWORD PTR order_n$18[rbp], 0
	jl	$LN12@TableUpdat
; Line 926
	mov	eax, DWORD PTR order_n$18[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1416[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1416[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN60@TableUpdat
; Line 927
	jmp	SHORT $LN11@TableUpdat
$LN60@TableUpdat:
; Line 928
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv572[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv568[rbp], rax
	mov	edx, DWORD PTR order_n$18[rbp]
	mov	rcx, QWORD PTR tv568[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR tv572[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$19[rbp], rax
; Line 929
	mov	rax, QWORD PTR column$19[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN61@TableUpdat
; Line 930
	jmp	$LN11@TableUpdat
$LN61@TableUpdat:
; Line 931
	mov	rax, QWORD PTR column$19[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR column$19[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 932
	mov	rax, QWORD PTR column$19[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR column$19[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 933
	movss	xmm0, DWORD PTR width_remaining_for_stretched_columns$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR width_remaining_for_stretched_columns$[rbp], xmm0
; Line 934
	jmp	$LN11@TableUpdat
$LN12@TableUpdat:
$LN59@TableUpdat:
; Line 936
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+484], -1
; Line 937
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+485], -1
; Line 938
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+248]
	addss	xmm0, DWORD PTR [rcx+212]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+256]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv614[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+252]
	movss	DWORD PTR tv618[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+248]
	movss	DWORD PTR tv616[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+244]
	movss	DWORD PTR tv612[rbp], xmm0
	movss	xmm0, DWORD PTR tv614[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR tv618[rbp]
	movss	xmm2, DWORD PTR tv616[rbp]
	movss	xmm1, DWORD PTR tv612[rbp]
	lea	rcx, QWORD PTR mouse_hit_rect$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 939
	xor	edx, edx
	lea	rcx, QWORD PTR mouse_hit_rect$[rbp]
	call	?ItemHoverable@ImGui@@YA_NAEBUImRect@@I@Z ; ImGui::ItemHoverable
	mov	BYTE PTR is_hovering_table$[rbp], al
; Line 943
	mov	DWORD PTR visible_n$[rbp], 0
; Line 944
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	test	eax, eax
	jle	SHORT $LN104@TableUpdat
	mov	DWORD PTR tv624[rbp], 1
	jmp	SHORT $LN105@TableUpdat
$LN104@TableUpdat:
	mov	DWORD PTR tv624[rbp], 0
$LN105@TableUpdat:
	movzx	eax, BYTE PTR tv624[rbp]
	mov	BYTE PTR offset_x_frozen$[rbp], al
; Line 945
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	test	eax, eax
	jle	SHORT $LN106@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+244]
	movss	DWORD PTR tv632[rbp], xmm0
	jmp	SHORT $LN107@TableUpdat
$LN106@TableUpdat:
	movss	xmm0, DWORD PTR work_rect$[rbp]
	movss	DWORD PTR tv632[rbp], xmm0
$LN107@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv632[rbp]
	addss	xmm0, DWORD PTR [rax+192]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+204]
	movss	DWORD PTR offset_x$[rbp], xmm0
; Line 946
	lea	rax, QWORD PTR host_clip_rect$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+292]
	mov	ecx, 16
	rep movsb
; Line 948
	mov	rax, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+88], 0
; Line 949
	mov	rax, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+96], 0
; Line 950
	mov	DWORD PTR order_n$20[rbp], 0
	jmp	SHORT $LN16@TableUpdat
$LN14@TableUpdat:
	mov	eax, DWORD PTR order_n$20[rbp]
	inc	eax
	mov	DWORD PTR order_n$20[rbp], eax
$LN16@TableUpdat:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR order_n$20[rbp], eax
	jge	$LN15@TableUpdat
; Line 952
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv649[rbp], rax
	mov	edx, DWORD PTR order_n$20[rbp]
	mov	rcx, QWORD PTR tv649[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR column_n$21[rbp], eax
; Line 953
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv656[rbp], rax
	mov	edx, DWORD PTR column_n$21[rbp]
	mov	rcx, QWORD PTR tv656[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$22[rbp], rax
; Line 955
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jg	SHORT $LN108@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	cmp	DWORD PTR column_n$21[rbp], eax
	jl	SHORT $LN108@TableUpdat
	mov	DWORD PTR tv664[rbp], 0
	jmp	SHORT $LN109@TableUpdat
$LN108@TableUpdat:
	mov	DWORD PTR tv664[rbp], 1
$LN109@TableUpdat:
	mov	rax, QWORD PTR column$22[rbp]
	movzx	ecx, BYTE PTR tv664[rbp]
	mov	BYTE PTR [rax+98], cl
; Line 957
	movzx	eax, BYTE PTR offset_x_frozen$[rbp]
	test	eax, eax
	je	SHORT $LN62@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	cmp	eax, DWORD PTR visible_n$[rbp]
	jne	SHORT $LN62@TableUpdat
; Line 959
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR work_rect$[rbp]
	subss	xmm0, DWORD PTR [rax+244]
	movss	xmm1, DWORD PTR offset_x$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR offset_x$[rbp], xmm0
; Line 960
	mov	BYTE PTR offset_x_frozen$[rbp], 0
$LN62@TableUpdat:
; Line 964
	mov	rax, QWORD PTR column$22[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, -251658241				; fffffffff0ffffffH
	mov	rcx, QWORD PTR column$22[rbp]
	mov	DWORD PTR [rcx], eax
; Line 966
	mov	eax, DWORD PTR order_n$20[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1485[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1485[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	$LN63@TableUpdat
; Line 970
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	movss	DWORD PTR [rax+40], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	movss	DWORD PTR [rax+32], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	movss	DWORD PTR [rax+52], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 971
	mov	rax, QWORD PTR column$22[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
; Line 972
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR work_rect$[rbp+4]
	movss	DWORD PTR [rax+36], xmm0
; Line 973
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [rax+44], xmm0
; Line 974
	mov	rax, QWORD PTR column$22[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv703[rbp], rax
	lea	rdx, QWORD PTR host_clip_rect$[rbp]
	mov	rcx, QWORD PTR tv703[rbp]
	call	?ClipWithFull@ImRect@@QEAAXAEBU1@@Z	; ImRect::ClipWithFull
; Line 975
	mov	rax, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rax+95], 0
	mov	rax, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rax+94], 0
	mov	rax, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rax+93], 0
; Line 976
	mov	rax, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rax+96], 1
; Line 977
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+60], xmm0
; Line 978
	jmp	$LN14@TableUpdat
$LN63@TableUpdat:
; Line 982
	movzx	eax, BYTE PTR is_hovering_table$[rbp]
	test	eax, eax
	je	SHORT $LN64@TableUpdat
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	comiss	xmm0, DWORD PTR [rcx+32]
	jb	SHORT $LN64@TableUpdat
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+40]
	comiss	xmm0, DWORD PTR [rcx+296]
	jbe	SHORT $LN64@TableUpdat
; Line 983
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$21[rbp]
	mov	BYTE PTR [rax+484], cl
$LN64@TableUpdat:
; Line 986
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 989
	mov	edx, DWORD PTR column_n$21[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z ; ImGui::TableGetMaxColumnWidth
	movss	DWORD PTR max_width$23[rbp], xmm0
; Line 990
	movss	xmm1, DWORD PTR max_width$23[rbp]
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	mov	rax, QWORD PTR column$22[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 991
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+188]
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv748[rbp], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv746[rbp], xmm0
	movss	xmm1, DWORD PTR tv748[rbp]
	movss	xmm0, DWORD PTR tv746[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR column$22[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 992
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR offset_x$[rbp]
	addss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+204]
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+208]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+196]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	mov	rax, QWORD PTR column$22[rbp]
	movss	DWORD PTR [rax+12], xmm0
; Line 999
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+196]
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+204]
	mov	rax, QWORD PTR column$22[rbp]
	movss	DWORD PTR [rax+52], xmm0
; Line 1000
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+196]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+208]
	mov	rax, QWORD PTR column$22[rbp]
	movss	DWORD PTR [rax+56], xmm0
; Line 1001
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR __real@3f266666
	call	?ImFloor@@YAMM@Z			; ImFloor
	mov	rax, QWORD PTR column$22[rbp]
	movss	DWORD PTR [rax+60], xmm0
; Line 1002
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+32], xmm0
; Line 1003
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR work_rect$[rbp+4]
	movss	DWORD PTR [rax+36], xmm0
; Line 1004
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+40], xmm0
; Line 1005
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [rax+44], xmm0
; Line 1006
	mov	rax, QWORD PTR column$22[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv794[rbp], rax
	lea	rdx, QWORD PTR host_clip_rect$[rbp]
	mov	rcx, QWORD PTR tv794[rbp]
	call	?ClipWithFull@ImRect@@QEAAXAEBU1@@Z	; ImRect::ClipWithFull
; Line 1015
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+40]
	comiss	xmm0, DWORD PTR [rcx+32]
	jbe	SHORT $LN110@TableUpdat
	mov	DWORD PTR tv803[rbp], 1
	jmp	SHORT $LN111@TableUpdat
$LN110@TableUpdat:
	mov	DWORD PTR tv803[rbp], 0
$LN111@TableUpdat:
	mov	rax, QWORD PTR column$22[rbp]
	movzx	ecx, BYTE PTR tv803[rbp]
	mov	BYTE PTR [rax+93], cl
; Line 1016
	mov	rax, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rax+94], 1
; Line 1017
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+93]
	mov	BYTE PTR is_visible$24[rbp], al
; Line 1018
	movzx	eax, BYTE PTR is_visible$24[rbp]
	test	eax, eax
	je	SHORT $LN65@TableUpdat
; Line 1019
	mov	eax, DWORD PTR column_n$21[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1579[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1579[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+88]
	or	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rcx+88], rax
$LN65@TableUpdat:
; Line 1022
	movzx	eax, BYTE PTR is_visible$24[rbp]
	test	eax, eax
	jne	SHORT $LN112@TableUpdat
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+99]
	test	eax, eax
	jne	SHORT $LN112@TableUpdat
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+100]
	test	eax, eax
	jne	SHORT $LN112@TableUpdat
	mov	DWORD PTR tv822[rbp], 0
	jmp	SHORT $LN113@TableUpdat
$LN112@TableUpdat:
	mov	DWORD PTR tv822[rbp], 1
$LN113@TableUpdat:
	mov	rax, QWORD PTR column$22[rbp]
	movzx	ecx, BYTE PTR tv822[rbp]
	mov	BYTE PTR [rax+95], cl
; Line 1023
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+95]
	test	eax, eax
	je	SHORT $LN66@TableUpdat
; Line 1024
	mov	eax, DWORD PTR column_n$21[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv1590[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1590[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	or	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rcx+96], rax
$LN66@TableUpdat:
; Line 1027
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+90]
	test	eax, eax
	je	SHORT $LN114@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+519]
	test	eax, eax
	jne	SHORT $LN114@TableUpdat
	mov	DWORD PTR tv838[rbp], 0
	jmp	SHORT $LN115@TableUpdat
$LN114@TableUpdat:
	mov	DWORD PTR tv838[rbp], 1
$LN115@TableUpdat:
	mov	rax, QWORD PTR column$22[rbp]
	movzx	ecx, BYTE PTR tv838[rbp]
	mov	BYTE PTR [rax+96], cl
; Line 1028
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+96]
	test	eax, eax
	je	SHORT $LN67@TableUpdat
; Line 1029
	movzx	eax, BYTE PTR is_visible$24[rbp]
	test	eax, eax
	je	SHORT $LN116@TableUpdat
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 314				; 0000013aH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BI@PMBHHKFI@?$AA?$CB?$AAi?$AAs?$AA_?$AAv?$AAi?$AAs?$AAi?$AAb?$AAl?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN116@TableUpdat:
$LN67@TableUpdat:
; Line 1032
	mov	rax, QWORD PTR column$22[rbp]
	mov	eax, DWORD PTR [rax]
	bts	eax, 24
	mov	rcx, QWORD PTR column$22[rbp]
	mov	DWORD PTR [rcx], eax
; Line 1033
	movzx	eax, BYTE PTR is_visible$24[rbp]
	test	eax, eax
	je	SHORT $LN68@TableUpdat
; Line 1034
	mov	rax, QWORD PTR column$22[rbp]
	mov	eax, DWORD PTR [rax]
	bts	eax, 25
	mov	rcx, QWORD PTR column$22[rbp]
	mov	DWORD PTR [rcx], eax
$LN68@TableUpdat:
; Line 1035
	mov	rax, QWORD PTR column$22[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN69@TableUpdat
; Line 1036
	mov	rax, QWORD PTR column$22[rbp]
	mov	eax, DWORD PTR [rax]
	bts	eax, 26
	mov	rcx, QWORD PTR column$22[rbp]
	mov	DWORD PTR [rcx], eax
$LN69@TableUpdat:
; Line 1037
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
	cmp	eax, DWORD PTR column_n$21[rbp]
	jne	SHORT $LN70@TableUpdat
; Line 1038
	mov	rax, QWORD PTR column$22[rbp]
	mov	eax, DWORD PTR [rax]
	bts	eax, 27
	mov	rcx, QWORD PTR column$22[rbp]
	mov	DWORD PTR [rcx], eax
$LN70@TableUpdat:
; Line 1050
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rcx+52]
	movss	DWORD PTR [rax+68], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rcx+68]
	movss	DWORD PTR [rax+64], xmm0
; Line 1051
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rcx+52]
	movss	DWORD PTR [rax+76], xmm0
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rcx+76]
	movss	DWORD PTR [rax+72], xmm0
; Line 1054
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+519]
	test	eax, eax
	jne	SHORT $LN71@TableUpdat
; Line 1056
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+99]
	shr	al, 1
	mov	rcx, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rcx+99], al
; Line 1057
	mov	rax, QWORD PTR column$22[rbp]
	movzx	eax, BYTE PTR [rax+100]
	shr	al, 1
	mov	rcx, QWORD PTR column$22[rbp]
	mov	BYTE PTR [rcx+100], al
$LN71@TableUpdat:
; Line 1060
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+500]
	cmp	DWORD PTR visible_n$[rbp], eax
	jge	SHORT $LN72@TableUpdat
; Line 1061
	mov	rax, QWORD PTR column$22[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR host_clip_rect$[rbp+8]
	movss	xmm1, DWORD PTR host_clip_rect$[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR host_clip_rect$[rbp], xmm0
$LN72@TableUpdat:
; Line 1063
	mov	rax, QWORD PTR column$22[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+204]
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+208]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+196]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR offset_x$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR offset_x$[rbp], xmm0
; Line 1064
	mov	eax, DWORD PTR visible_n$[rbp]
	inc	eax
	mov	DWORD PTR visible_n$[rbp], eax
; Line 1065
	jmp	$LN14@TableUpdat
$LN15@TableUpdat:
; Line 1070
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv914[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+493]
	mov	edx, eax
	mov	rcx, QWORD PTR tv914[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movss	xmm0, DWORD PTR [rax+40]
	movss	DWORD PTR tv926[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+276]
	movss	DWORD PTR tv924[rbp], xmm0
	movss	xmm1, DWORD PTR tv926[rbp]
	movss	xmm0, DWORD PTR tv924[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR unused_x1$[rbp], xmm0
; Line 1071
	movzx	eax, BYTE PTR is_hovering_table$[rbp]
	test	eax, eax
	je	SHORT $LN73@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
	cmp	eax, -1
	jne	SHORT $LN73@TableUpdat
; Line 1073
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	comiss	xmm0, DWORD PTR unused_x1$[rbp]
	jb	SHORT $LN74@TableUpdat
; Line 1074
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR [rcx+116]
	mov	BYTE PTR [rax+484], cl
$LN74@TableUpdat:
$LN73@TableUpdat:
; Line 1076
	movzx	eax, BYTE PTR has_resizable$[rbp]
	test	eax, eax
	jne	SHORT $LN75@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN75@TableUpdat
; Line 1077
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, -2
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN75@TableUpdat:
; Line 1082
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+495]
	cmp	eax, -1
	je	SHORT $LN76@TableUpdat
; Line 1083
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	btr	eax, 16
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+4], eax
$LN76@TableUpdat:
; Line 1084
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 65536				; 00010000H
	test	eax, eax
	je	SHORT $LN77@TableUpdat
; Line 1086
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR unused_x1$[rbp]
	movss	DWORD PTR [rax+284], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR unused_x1$[rbp]
	movss	DWORD PTR [rax+252], xmm0
; Line 1087
	movss	xmm1, DWORD PTR unused_x1$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+300]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+300], xmm0
$LN77@TableUpdat:
; Line 1089
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rax+576]
	lea	rsi, QWORD PTR [rcx+276]
	mov	ecx, 16
	rep movsb
; Line 1090
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+292]
	movss	DWORD PTR [rax+176], xmm0
; Line 1091
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+300]
	movss	DWORD PTR [rax+180], xmm0
; Line 1094
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSetupDrawChannels
; Line 1097
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN78@TableUpdat
; Line 1098
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableUpdateBorders@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateBorders
$LN78@TableUpdat:
; Line 1099
	mov	rax, QWORD PTR table$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+216], xmm0
; Line 1100
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+505], 1
; Line 1101
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+509], 0
; Line 1104
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+510]
	test	eax, eax
	je	SHORT $LN79@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, WORD PTR [rcx+130]
	cmp	eax, ecx
	jne	SHORT $LN79@TableUpdat
; Line 1106
	mov	rax, QWORD PTR table$[rbp]
	mov	r8d, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_0O@BMOANCPA@?$CD?$CDContextMenu@
	call	?ImHashStr@@YAIPEBD_KI@Z		; ImHashStr
	mov	DWORD PTR context_menu_id$25[rbp], eax
; Line 1107
	mov	edx, 321				; 00000141H
	mov	ecx, DWORD PTR context_menu_id$25[rbp]
	call	?BeginPopupEx@ImGui@@YA_NIH@Z		; ImGui::BeginPopupEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN80@TableUpdat
; Line 1109
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableDrawContextMenu@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableDrawContextMenu
; Line 1110
	call	?EndPopup@ImGui@@YAXXZ			; ImGui::EndPopup
; Line 1111
	jmp	SHORT $LN81@TableUpdat
$LN80@TableUpdat:
; Line 1114
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+510], 0
$LN81@TableUpdat:
$LN79@TableUpdat:
; Line 1120
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+508]
	test	eax, eax
	je	SHORT $LN82@TableUpdat
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN82@TableUpdat
; Line 1121
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSortSpecsBuild
$LN82@TableUpdat:
; Line 1124
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR inner_window$[rbp], rax
; Line 1125
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN83@TableUpdat
; Line 1126
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv1027[rbp], rax
	mov	r8d, 2
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv1027[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
	jmp	SHORT $LN84@TableUpdat
$LN83@TableUpdat:
; Line 1128
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv1038[rbp], rax
	xor	r9d, r9d
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	r8, QWORD PTR [rax+600]
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rdx, QWORD PTR [rax+592]
	mov	rcx, QWORD PTR tv1038[rbp]
	call	?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z ; ImDrawList::PushClipRect
$LN84@TableUpdat:
; Line 1129
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2048]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z ENDP	; ImGui::TableUpdateLayout
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
freeze_row_multiplier$ = 4
channels_for_row$ = 36
channels_for_bg$ = 68
channels_for_dummy$ = 100
channels_total$ = 132
draw_channel_current$ = 164
column_n$1 = 196
column$2 = 232
tv160 = 436
tv137 = 436
tv129 = 436
tv82 = 436
tv73 = 436
tv67 = 436
tv147 = 440
tv93 = 440
table$ = 480
?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableSetupDrawChannels, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2254
$LN22:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 480				; 000001e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2255
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jle	SHORT $LN9@TableSetup
	mov	DWORD PTR tv67[rbp], 2
	jmp	SHORT $LN10@TableSetup
$LN9@TableSetup:
	mov	DWORD PTR tv67[rbp], 1
$LN10@TableSetup:
	mov	eax, DWORD PTR tv67[rbp]
	mov	DWORD PTR freeze_row_multiplier$[rbp], eax
; Line 2256
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	je	SHORT $LN11@TableSetup
	mov	DWORD PTR tv73[rbp], 1
	jmp	SHORT $LN12@TableSetup
$LN11@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	mov	DWORD PTR tv73[rbp], eax
$LN12@TableSetup:
	mov	eax, DWORD PTR tv73[rbp]
	mov	DWORD PTR channels_for_row$[rbp], eax
; Line 2257
	mov	eax, DWORD PTR freeze_row_multiplier$[rbp]
	inc	eax
	mov	DWORD PTR channels_for_bg$[rbp], eax
; Line 2258
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jl	SHORT $LN13@TableSetup
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	cmp	QWORD PTR [rax+88], rcx
	jne	SHORT $LN13@TableSetup
	mov	DWORD PTR tv82[rbp], 0
	jmp	SHORT $LN14@TableSetup
$LN13@TableSetup:
	mov	DWORD PTR tv82[rbp], 1
$LN14@TableSetup:
	mov	eax, DWORD PTR tv82[rbp]
	mov	DWORD PTR channels_for_dummy$[rbp], eax
; Line 2259
	mov	eax, DWORD PTR channels_for_row$[rbp]
	imul	eax, DWORD PTR freeze_row_multiplier$[rbp]
	mov	ecx, DWORD PTR channels_for_bg$[rbp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR channels_for_dummy$[rbp]
	mov	DWORD PTR channels_total$[rbp], eax
; Line 2260
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv93[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	r8d, DWORD PTR channels_total$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv93[rbp]
	call	?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::Split
; Line 2261
	cmp	DWORD PTR channels_for_dummy$[rbp], 0
	jle	SHORT $LN15@TableSetup
	mov	eax, DWORD PTR channels_total$[rbp]
	dec	eax
	mov	DWORD PTR tv129[rbp], eax
	jmp	SHORT $LN16@TableSetup
$LN15@TableSetup:
	mov	DWORD PTR tv129[rbp], -1
$LN16@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv129[rbp]
	mov	BYTE PTR [rax+502], cl
; Line 2262
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+503], 1
; Line 2263
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jle	SHORT $LN17@TableSetup
	mov	eax, DWORD PTR channels_for_row$[rbp]
	add	eax, 2
	mov	DWORD PTR tv137[rbp], eax
	jmp	SHORT $LN18@TableSetup
$LN17@TableSetup:
	mov	DWORD PTR tv137[rbp], 1
$LN18@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv137[rbp]
	mov	BYTE PTR [rax+504], cl
; Line 2265
	mov	DWORD PTR draw_channel_current$[rbp], 2
; Line 2266
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableSetup
$LN2@TableSetup:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	$LN3@TableSetup
; Line 2268
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv147[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv147[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$2[rbp], rax
; Line 2269
	mov	rax, QWORD PTR column$2[rbp]
	movzx	eax, BYTE PTR [rax+93]
	test	eax, eax
	je	$LN5@TableSetup
	mov	rax, QWORD PTR column$2[rbp]
	movzx	eax, BYTE PTR [rax+94]
	test	eax, eax
	je	SHORT $LN5@TableSetup
; Line 2271
	mov	rax, QWORD PTR column$2[rbp]
	movzx	ecx, BYTE PTR draw_channel_current$[rbp]
	mov	BYTE PTR [rax+88], cl
; Line 2272
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jle	SHORT $LN19@TableSetup
	mov	eax, DWORD PTR channels_for_row$[rbp]
	inc	eax
	mov	DWORD PTR tv160[rbp], eax
	jmp	SHORT $LN20@TableSetup
$LN19@TableSetup:
	mov	DWORD PTR tv160[rbp], 0
$LN20@TableSetup:
	mov	eax, DWORD PTR tv160[rbp]
	mov	ecx, DWORD PTR draw_channel_current$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR column$2[rbp]
	mov	BYTE PTR [rcx+89], al
; Line 2273
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN7@TableSetup
; Line 2274
	mov	eax, DWORD PTR draw_channel_current$[rbp]
	inc	eax
	mov	DWORD PTR draw_channel_current$[rbp], eax
$LN7@TableSetup:
; Line 2275
	jmp	SHORT $LN6@TableSetup
$LN5@TableSetup:
; Line 2278
	mov	rax, QWORD PTR column$2[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR [rcx+502]
	mov	BYTE PTR [rax+89], cl
	mov	rax, QWORD PTR column$2[rbp]
	mov	rcx, QWORD PTR column$2[rbp]
	movzx	ecx, BYTE PTR [rcx+89]
	mov	BYTE PTR [rax+88], cl
$LN6@TableSetup:
; Line 2280
	mov	rax, QWORD PTR column$2[rbp]
	mov	rcx, QWORD PTR column$2[rbp]
	movzx	ecx, BYTE PTR [rcx+88]
	mov	BYTE PTR [rax+87], cl
; Line 2281
	jmp	$LN2@TableSetup
$LN3@TableSetup:
; Line 2286
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rax+308]
	lea	rsi, QWORD PTR [rcx+292]
	mov	ecx, 16
	rep movsb
; Line 2287
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+392]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rcx+324]
	lea	rsi, QWORD PTR [rax+592]
	mov	ecx, 16
	rep movsb
; Line 2288
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rax+340]
	lea	rsi, QWORD PTR [rcx+356]
	mov	ecx, 16
	rep movsb
; Line 2289
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+320]
	comiss	xmm0, DWORD PTR [rcx+312]
	jae	SHORT $LN21@TableSetup
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 35					; 00000023H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GG@NCDBECJP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAB?$AAg?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@TableSetup:
; Line 2290
	lea	rsp, QWORD PTR [rbp+448]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TableSetupDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableSetupDrawChannels
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z
_TEXT	SEGMENT
reorder_dir$1 = 4
src_column$2 = 40
dst_column$3 = 72
src_order$4 = 100
dst_order$5 = 132
order_n$6 = 164
column_n$7 = 196
n$8 = 228
tv260 = 440
tv240 = 440
tv208 = 440
tv186 = 440
tv175 = 440
tv91 = 440
tv263 = 448
tv235 = 448
tv204 = 448
tv182 = 448
tv132 = 448
tv130 = 452
tv254 = 456
tv211 = 456
table$ = 496
?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z PROC ; ImGui::TableBeginApplyRequests, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 588
$LN25:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 592
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	test	eax, eax
	jne	$LN11@TableBegin
; Line 594
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	cmp	eax, -1
	je	SHORT $LN12@TableBegin
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+232]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN24@TableBegin
	je	SHORT $LN12@TableBegin
$LN24@TableBegin:
; Line 595
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rcx+232]
	mov	ecx, eax
	call	?TableSetColumnWidth@ImGui@@YAXHM@Z	; ImGui::TableSetColumnWidth
$LN12@TableBegin:
; Line 596
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR [rcx+487]
	mov	BYTE PTR [rax+488], cl
; Line 597
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [rax+232], xmm0
; Line 598
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+487], -1
; Line 602
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+486]
	cmp	eax, -1
	je	SHORT $LN13@TableBegin
; Line 604
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv91[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+486]
	mov	edx, eax
	mov	rcx, QWORD PTR tv91[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR tv132[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+486]
	mov	DWORD PTR tv130[rbp], eax
	movss	xmm1, DWORD PTR tv132[rbp]
	mov	ecx, DWORD PTR tv130[rbp]
	call	?TableSetColumnWidth@ImGui@@YAXHM@Z	; ImGui::TableSetColumnWidth
; Line 605
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+486], -1
$LN13@TableBegin:
$LN11@TableBegin:
; Line 611
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	test	eax, eax
	jne	$LN14@TableBegin
; Line 613
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+489]
	cmp	eax, -1
	jne	SHORT $LN15@TableBegin
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+490]
	cmp	eax, -1
	je	SHORT $LN15@TableBegin
; Line 614
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+490], -1
$LN15@TableBegin:
; Line 615
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+489], -1
; Line 616
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+490]
	cmp	eax, -1
	je	$LN16@TableBegin
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+491]
	test	eax, eax
	je	$LN16@TableBegin
; Line 622
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+491]
	mov	DWORD PTR reorder_dir$1[rbp], eax
; Line 623
	cmp	DWORD PTR reorder_dir$1[rbp], -1
	je	SHORT $LN19@TableBegin
	cmp	DWORD PTR reorder_dir$1[rbp], 1
	je	SHORT $LN19@TableBegin
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 35					; 00000023H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EO@CLPKFPLH@?$AAr?$AAe?$AAo?$AAr?$AAd?$AAe?$AAr?$AA_?$AAd?$AAi?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@TableBegin:
; Line 624
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN20@TableBegin
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 36					; 00000024H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FG@FFJIEHAF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@TableBegin:
; Line 625
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv175[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+490]
	mov	edx, eax
	mov	rcx, QWORD PTR tv175[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR src_column$2[rbp], rax
; Line 626
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv186[rbp], rax
	cmp	DWORD PTR reorder_dir$1[rbp], -1
	jne	SHORT $LN21@TableBegin
	mov	rax, QWORD PTR src_column$2[rbp]
	movzx	eax, BYTE PTR [rax+84]
	mov	BYTE PTR tv182[rbp], al
	jmp	SHORT $LN22@TableBegin
$LN21@TableBegin:
	mov	rax, QWORD PTR src_column$2[rbp]
	movzx	eax, BYTE PTR [rax+85]
	mov	BYTE PTR tv182[rbp], al
$LN22@TableBegin:
	movsx	eax, BYTE PTR tv182[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv186[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR dst_column$3[rbp], rax
; Line 628
	mov	rax, QWORD PTR src_column$2[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	DWORD PTR src_order$4[rbp], eax
; Line 629
	mov	rax, QWORD PTR dst_column$3[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	DWORD PTR dst_order$5[rbp], eax
; Line 630
	mov	rax, QWORD PTR src_column$2[rbp]
	movzx	ecx, BYTE PTR dst_order$5[rbp]
	mov	BYTE PTR [rax+82], cl
; Line 631
	mov	eax, DWORD PTR reorder_dir$1[rbp]
	mov	ecx, DWORD PTR src_order$4[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR order_n$6[rbp], eax
	jmp	SHORT $LN4@TableBegin
$LN2@TableBegin:
	mov	eax, DWORD PTR reorder_dir$1[rbp]
	mov	ecx, DWORD PTR order_n$6[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR order_n$6[rbp], eax
$LN4@TableBegin:
	mov	eax, DWORD PTR reorder_dir$1[rbp]
	mov	ecx, DWORD PTR dst_order$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR order_n$6[rbp], eax
	je	SHORT $LN3@TableBegin
; Line 632
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv208[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv204[rbp], rax
	mov	edx, DWORD PTR order_n$6[rbp]
	mov	rcx, QWORD PTR tv204[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR tv208[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	add	rax, 82					; 00000052H
	mov	QWORD PTR tv211[rbp], rax
	movsx	eax, BYTE PTR reorder_dir$1[rbp]
	mov	rcx, QWORD PTR tv211[rbp]
	movsx	ecx, BYTE PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tv211[rbp]
	mov	BYTE PTR [rcx], al
	jmp	$LN2@TableBegin
$LN3@TableBegin:
; Line 633
	mov	rax, QWORD PTR dst_column$3[rbp]
	movsx	eax, BYTE PTR [rax+82]
	mov	ecx, DWORD PTR reorder_dir$1[rbp]
	mov	edx, DWORD PTR dst_order$5[rbp]
	sub	edx, ecx
	mov	ecx, edx
	cmp	eax, ecx
	je	SHORT $LN23@TableBegin
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z@4JA
	add	eax, 45					; 0000002dH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GI@FDBBNGED@?$AAd?$AAs?$AAt?$AA_?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA?9?$AA?$DO?$AAD?$AAi?$AAs@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@TableBegin:
; Line 637
	mov	DWORD PTR column_n$7[rbp], 0
	jmp	SHORT $LN7@TableBegin
$LN5@TableBegin:
	mov	eax, DWORD PTR column_n$7[rbp]
	inc	eax
	mov	DWORD PTR column_n$7[rbp], eax
$LN7@TableBegin:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$7[rbp], eax
	jge	SHORT $LN6@TableBegin
; Line 638
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv240[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv235[rbp], rax
	mov	edx, DWORD PTR column_n$7[rbp]
	mov	rcx, QWORD PTR tv235[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+82]
	mov	edx, eax
	mov	rcx, QWORD PTR tv240[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movzx	ecx, BYTE PTR column_n$7[rbp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN5@TableBegin
$LN6@TableBegin:
; Line 639
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+491], 0
; Line 640
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
$LN16@TableBegin:
$LN14@TableBegin:
; Line 645
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+515]
	test	eax, eax
	je	$LN17@TableBegin
; Line 647
	mov	DWORD PTR n$8[rbp], 0
	jmp	SHORT $LN10@TableBegin
$LN8@TableBegin:
	mov	eax, DWORD PTR n$8[rbp]
	inc	eax
	mov	DWORD PTR n$8[rbp], eax
$LN10@TableBegin:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR n$8[rbp], eax
	jge	SHORT $LN9@TableBegin
; Line 648
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv260[rbp], rax
	mov	edx, DWORD PTR n$8[rbp]
	mov	rcx, QWORD PTR tv260[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movzx	ecx, BYTE PTR n$8[rbp]
	mov	BYTE PTR [rax+82], cl
	movzx	eax, BYTE PTR n$8[rbp]
	mov	BYTE PTR tv263[rbp], al
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv254[rbp], rax
	mov	edx, DWORD PTR n$8[rbp]
	mov	rcx, QWORD PTR tv254[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movzx	ecx, BYTE PTR tv263[rbp]
	mov	BYTE PTR [rax], cl
	jmp	$LN8@TableBegin
$LN9@TableBegin:
; Line 649
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+515], 0
; Line 650
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
$LN17@TableBegin:
; Line 652
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z ENDP ; ImGui::TableBeginApplyRequests
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z
_TEXT	SEGMENT
span_allocator$ = 8
tv92 = 248
__$ArrayPad$ = 256
table$ = 304
columns_count$ = 312
?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z PROC ; ImGui::TableBeginInitMemory, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 572
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 574
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	??0?$ImSpanAllocator@$02@@QEAA@XZ	; ImSpanAllocator<3>::ImSpanAllocator<3>
; Line 575
	movsxd	rax, DWORD PTR columns_count$[rbp]
	imul	rax, rax, 104				; 00000068H
	mov	r9d, 4
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z ; ImSpanAllocator<3>::Reserve
; Line 576
	movsxd	rax, DWORD PTR columns_count$[rbp]
	mov	r9d, 4
	mov	r8, rax
	mov	edx, 1
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z ; ImSpanAllocator<3>::Reserve
; Line 577
	movsxd	rax, DWORD PTR columns_count$[rbp]
	shl	rax, 3
	mov	r9d, 4
	mov	r8, rax
	mov	edx, 2
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	?Reserve@?$ImSpanAllocator@$02@@QEAAXH_KH@Z ; ImSpanAllocator<3>::Reserve
; Line 578
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ ; ImSpanAllocator<3>::GetArenaSizeInBytes
	cdqe
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rcx+8], rax
; Line 579
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	?GetArenaSizeInBytes@?$ImSpanAllocator@$02@@QEAAHXZ ; ImSpanAllocator<3>::GetArenaSizeInBytes
	cdqe
	mov	QWORD PTR tv92[rbp], rax
	mov	rcx, QWORD PTR table$[rbp]
	mov	rdi, QWORD PTR [rcx+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv92[rbp]
	rep stosb
; Line 580
	mov	rax, QWORD PTR table$[rbp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	?SetArenaBasePtr@?$ImSpanAllocator@$02@@QEAAXPEAX@Z ; ImSpanAllocator<3>::SetArenaBasePtr
; Line 581
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	??$GetSpan@UImGuiTableColumn@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableColumn@@@@@Z ; ImSpanAllocator<3>::GetSpan<ImGuiTableColumn>
; Line 582
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	r8, rax
	mov	edx, 1
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	??$GetSpan@C@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@C@@@Z ; ImSpanAllocator<3>::GetSpan<signed char>
; Line 583
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	mov	edx, 2
	lea	rcx, QWORD PTR span_allocator$[rbp]
	call	??$GetSpan@UImGuiTableCellData@@@?$ImSpanAllocator@$02@@QEAAXHPEAU?$ImSpan@UImGuiTableCellData@@@@@Z ; ImSpanAllocator<3>::GetSpan<ImGuiTableCellData>
; Line 584
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z ENDP ; ImGui::TableBeginInitMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z
_TEXT	SEGMENT
g$ = 8
outer_window$ = 40
use_child_window$ = 68
avail_size$ = 104
actual_outer_size$ = 136
outer_rect$ = 168
table$ = 216
instance_no$ = 244
instance_id$ = 276
table_last_flags$ = 308
table_idx$ = 340
temp_data$ = 376
override_content_size$7 = 408
child_flags$8 = 436
inner_window$ = 472
pad_outer_x$ = 500
pad_inner_x$ = 532
inner_spacing_for_border$ = 564
inner_spacing_explicit$ = 596
inner_padding_explicit$ = 628
outer_padding_for_border$ = 660
outer_padding_explicit$ = 692
old_columns_to_preserve$ = 728
old_columns_raw_data$ = 760
old_columns_count$ = 788
n$9 = 820
column$10 = 856
width_auto$11 = 884
new_ref_scale_unit$ = 916
scale_factor$12 = 948
n$13 = 980
$T14 = 1784
$T15 = 1812
$T16 = 1848
$T17 = 1988
$T18 = 2020
$T19 = 2052
$T20 = 2084
$T21 = 2132
$T22 = 2168
$T23 = 2196
$T24 = 2228
tv558 = 2340
tv506 = 2340
tv460 = 2340
tv454 = 2340
tv443 = 2340
tv435 = 2340
tv427 = 2340
tv424 = 2340
tv420 = 2340
tv278 = 2340
tv263 = 2340
tv229 = 2340
tv169 = 2340
tv94 = 2340
tv86 = 2340
tv668 = 2344
tv652 = 2344
tv624 = 2344
tv602 = 2344
tv554 = 2344
tv548 = 2344
tv488 = 2344
tv482 = 2344
tv475 = 2344
tv418 = 2344
tv331 = 2344
tv266 = 2344
tv219 = 2344
tv211 = 2344
tv186 = 2344
tv162 = 2344
tv136 = 2344
tv416 = 2348
tv673 = 2352
tv656 = 2352
tv215 = 2352
tv672 = 2360
tv645 = 2360
tv209 = 2368
tv207 = 2376
__$ArrayPad$ = 2384
name$ = 2432
id$ = 2440
columns_count$ = 2448
flags$ = 2456
outer_size$ = 2464
inner_width$ = 2472
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z PROC	; ImGui::BeginTableEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 311
$LN84:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2448				; 00000990H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 408				; 00000198H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 312
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 313
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR outer_window$[rbp], rax
; Line 314
	mov	rax, QWORD PTR outer_window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN8@BeginTable
; Line 315
	xor	al, al
	jmp	$LN1@BeginTable
$LN8@BeginTable:
; Line 318
	cmp	DWORD PTR columns_count$[rbp], 0
	jle	SHORT $LN34@BeginTable
	cmp	DWORD PTR columns_count$[rbp], 64	; 00000040H
	jg	SHORT $LN34@BeginTable
	lea	rax, OFFSET FLAT:??_C@_0BM@KIFJOLIL@Only?51?4?464?5columns?5allowed?$CB@
	test	rax, rax
	jne	SHORT $LN35@BeginTable
$LN34@BeginTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JE@NJACGDPG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN35@BeginTable:
; Line 319
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN9@BeginTable
; Line 320
	movss	xmm0, DWORD PTR inner_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN9@BeginTable
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CI@NLGBMAGB@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@BeginTable:
; Line 323
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 50331648				; 03000000H
	test	eax, eax
	je	SHORT $LN37@BeginTable
	mov	BYTE PTR tv86[rbp], 1
	jmp	SHORT $LN38@BeginTable
$LN37@BeginTable:
	mov	BYTE PTR tv86[rbp], 0
$LN38@BeginTable:
	movzx	eax, BYTE PTR tv86[rbp]
	mov	BYTE PTR use_child_window$[rbp], al
; Line 324
	lea	rcx, QWORD PTR avail_size$[rbp]
	call	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
; Line 325
	movzx	eax, BYTE PTR use_child_window$[rbp]
	test	eax, eax
	je	SHORT $LN39@BeginTable
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR avail_size$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv94[rbp], xmm0
	jmp	SHORT $LN40@BeginTable
$LN39@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv94[rbp], xmm0
$LN40@BeginTable:
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR avail_size$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv136[rbp], xmm0
	mov	rax, QWORD PTR outer_size$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T14[rbp], rax
	movss	xmm3, DWORD PTR tv94[rbp]
	movss	xmm2, DWORD PTR tv136[rbp]
	mov	rdx, QWORD PTR $T14[rbp]
	lea	rcx, QWORD PTR actual_outer_size$[rbp]
	call	?CalcItemSize@ImGui@@YA?AUImVec2@@U2@MM@Z ; ImGui::CalcItemSize
; Line 326
	mov	rax, QWORD PTR outer_window$[rbp]
	add	rax, 216				; 000000d8H
	lea	r8, QWORD PTR actual_outer_size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR outer_window$[rbp]
	add	rcx, 216				; 000000d8H
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR outer_rect$[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 327
	movzx	eax, BYTE PTR use_child_window$[rbp]
	test	eax, eax
	je	SHORT $LN10@BeginTable
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR outer_rect$[rbp]
	call	?IsClippedEx@ImGui@@YA_NAEBUImRect@@I_N@Z ; ImGui::IsClippedEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@BeginTable
; Line 329
	movss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR outer_rect$[rbp]
	call	?ItemSize@ImGui@@YAXAEBUImRect@@M@Z	; ImGui::ItemSize
; Line 330
	xor	al, al
	jmp	$LN1@BeginTable
$LN10@BeginTable:
; Line 334
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv162[rbp], rax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv162[rbp]
	call	?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z ; ImPool<ImGuiTable>::GetOrAddByKey
	mov	QWORD PTR table$[rbp], rax
; Line 335
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7056]
	cmp	DWORD PTR [rax+112], ecx
	je	SHORT $LN41@BeginTable
	mov	DWORD PTR tv169[rbp], 0
	jmp	SHORT $LN42@BeginTable
$LN41@BeginTable:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	inc	eax
	mov	DWORD PTR tv169[rbp], eax
$LN42@BeginTable:
	mov	eax, DWORD PTR tv169[rbp]
	mov	DWORD PTR instance_no$[rbp], eax
; Line 336
	mov	eax, DWORD PTR instance_no$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR instance_id$[rbp], eax
; Line 337
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR table_last_flags$[rbp], eax
; Line 338
	cmp	DWORD PTR instance_no$[rbp], 0
	jle	SHORT $LN11@BeginTable
; Line 339
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR [rax+116], ecx
	jne	SHORT $LN43@BeginTable
	lea	rax, OFFSET FLAT:??_C@_0EN@HCDJLOKE@BeginTable?$CI?$CJ?3?5Cannot?5change?5col@
	test	rax, rax
	jne	SHORT $LN11@BeginTable
$LN43@BeginTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA
	add	eax, 28
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1OO@LHJMPKOL@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@BeginTable:
; Line 342
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv186[rbp], rax
	mov	rdx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR tv186[rbp]
	call	?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::GetIndex
	mov	DWORD PTR table_idx$[rbp], eax
; Line 343
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8184]
	inc	eax
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+8184], eax
; Line 344
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8184]
	inc	eax
	mov	rcx, QWORD PTR g$[rbp]
	cmp	eax, DWORD PTR [rcx+8232]
	jle	SHORT $LN12@BeginTable
; Line 345
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8232				; 00002028H
	mov	QWORD PTR tv211[rbp], rax
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImGuiTableTempData@@QEAA@XZ		; ImGuiTableTempData::ImGuiTableTempData
	mov	QWORD PTR tv673[rbp], rax
	mov	rax, QWORD PTR tv673[rbp]
	mov	QWORD PTR tv672[rbp], rax
	mov	rax, QWORD PTR tv672[rbp]
	mov	QWORD PTR tv209[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8184]
	inc	eax
	mov	DWORD PTR tv207[rbp], eax
	mov	r8, QWORD PTR tv209[rbp]
	mov	edx, DWORD PTR tv207[rbp]
	mov	rcx, QWORD PTR tv211[rbp]
	call	?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z ; ImVector<ImGuiTableTempData>::resize
	npad	1
	lea	rcx, QWORD PTR $T16[rbp]
	call	??1ImGuiTableTempData@@QEAA@XZ
$LN12@BeginTable:
; Line 346
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8232				; 00002028H
	mov	QWORD PTR tv219[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	edx, DWORD PTR [rax+8184]
	mov	rcx, QWORD PTR tv219[rbp]
	call	??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z ; ImVector<ImGuiTableTempData>::operator[]
	mov	QWORD PTR tv215[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR tv215[rbp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR tv215[rbp]
	mov	QWORD PTR temp_data$[rbp], rax
; Line 347
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	ecx, DWORD PTR table_idx$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 348
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 16
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rcx+424], rax
; Line 349
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rax+424]
	call	?Clear@ImDrawListSplitter@@QEAAXXZ	; ImDrawListSplitter::Clear
; Line 352
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 57344				; 0000e000H
	test	eax, eax
	jne	SHORT $LN45@BeginTable
	mov	DWORD PTR tv229[rbp], 1
	jmp	SHORT $LN46@BeginTable
$LN45@BeginTable:
	mov	DWORD PTR tv229[rbp], 0
$LN46@BeginTable:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv229[rbp]
	mov	BYTE PTR [rax+517], cl
; Line 353
	mov	rdx, QWORD PTR outer_window$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	call	?TableFixFlags@@YAHHPEAUImGuiWindow@@@Z	; TableFixFlags
	mov	DWORD PTR flags$[rbp], eax
; Line 356
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 357
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rax+4], ecx
; Line 358
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, WORD PTR instance_no$[rbp]
	mov	WORD PTR [rax+128], cx
; Line 359
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR [rcx+7056]
	mov	DWORD PTR [rax+112], ecx
; Line 360
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR outer_window$[rbp]
	mov	QWORD PTR [rax+400], rcx
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR outer_window$[rbp]
	mov	QWORD PTR [rax+392], rcx
; Line 361
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR columns_count$[rbp]
	mov	DWORD PTR [rax+116], ecx
; Line 362
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+505], 0
; Line 363
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR inner_width$[rbp]
	movss	DWORD PTR [rax+220], xmm0
; Line 364
	mov	rax, QWORD PTR outer_size$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	QWORD PTR [rcx+8], rax
; Line 367
	movzx	eax, BYTE PTR use_child_window$[rbp]
	test	eax, eax
	je	$LN13@BeginTable
; Line 371
	movss	xmm2, DWORD PTR __real@7f7fffff
	movss	xmm1, DWORD PTR __real@7f7fffff
	lea	rcx, QWORD PTR override_content_size$7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 372
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN15@BeginTable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 33554432				; 02000000H
	test	eax, eax
	jne	SHORT $LN15@BeginTable
; Line 373
	movss	xmm0, DWORD PTR __real@00800000
	movss	DWORD PTR override_content_size$7[rbp+4], xmm0
$LN15@BeginTable:
; Line 379
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN16@BeginTable
	movss	xmm0, DWORD PTR inner_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN16@BeginTable
; Line 380
	movss	xmm0, DWORD PTR inner_width$[rbp]
	movss	DWORD PTR override_content_size$7[rbp], xmm0
$LN16@BeginTable:
; Line 382
	movss	xmm0, DWORD PTR override_content_size$7[rbp]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN18@BeginTable
	jne	SHORT $LN18@BeginTable
	movss	xmm0, DWORD PTR override_content_size$7[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN18@BeginTable
	je	$LN17@BeginTable
$LN18@BeginTable:
; Line 383
	movss	xmm0, DWORD PTR override_content_size$7[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN82@BeginTable
	je	SHORT $LN47@BeginTable
$LN82@BeginTable:
	movss	xmm0, DWORD PTR override_content_size$7[rbp+4]
	movss	DWORD PTR tv263[rbp], xmm0
	jmp	SHORT $LN48@BeginTable
$LN47@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv263[rbp], xmm0
$LN48@BeginTable:
	movss	xmm0, DWORD PTR override_content_size$7[rbp]
	ucomiss	xmm0, DWORD PTR __real@7f7fffff
	jp	SHORT $LN81@BeginTable
	je	SHORT $LN49@BeginTable
$LN81@BeginTable:
	movss	xmm0, DWORD PTR override_content_size$7[rbp]
	movss	DWORD PTR tv266[rbp], xmm0
	jmp	SHORT $LN50@BeginTable
$LN49@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv266[rbp], xmm0
$LN50@BeginTable:
	movss	xmm2, DWORD PTR tv263[rbp]
	movss	xmm1, DWORD PTR tv266[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, rax
	call	?SetNextWindowContentSize@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetNextWindowContentSize
$LN17@BeginTable:
; Line 386
	mov	eax, DWORD PTR table_last_flags$[rbp]
	and	eax, 50331648				; 03000000H
	test	eax, eax
	jne	SHORT $LN19@BeginTable
; Line 387
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, rax
	call	?SetNextWindowScroll@ImGui@@YAXAEBUImVec2@@@Z ; ImGui::SetNextWindowScroll
$LN19@BeginTable:
; Line 390
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN51@BeginTable
	mov	DWORD PTR tv278[rbp], 2048		; 00000800H
	jmp	SHORT $LN52@BeginTable
$LN51@BeginTable:
	mov	DWORD PTR tv278[rbp], 0
$LN52@BeginTable:
	mov	eax, DWORD PTR tv278[rbp]
	mov	DWORD PTR child_flags$8[rbp], eax
; Line 391
	lea	rdx, QWORD PTR $T19[rbp]
	lea	rcx, QWORD PTR outer_rect$[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	mov	ecx, DWORD PTR child_flags$8[rbp]
	mov	DWORD PTR [rsp+32], ecx
	xor	r9d, r9d
	mov	r8, rax
	mov	edx, DWORD PTR instance_id$[rbp]
	mov	rcx, QWORD PTR name$[rbp]
	call	?BeginChildEx@ImGui@@YA_NPEBDIAEBUImVec2@@_NH@Z ; ImGui::BeginChildEx
; Line 392
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR [rcx+7184]
	mov	QWORD PTR [rax+400], rcx
; Line 393
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rcx+276]
	lea	rsi, QWORD PTR [rax+560]
	mov	ecx, 16
	rep movsb
; Line 394
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR tv331[rbp], rax
	lea	rdx, QWORD PTR $T20[rbp]
	mov	rcx, QWORD PTR tv331[rbp]
	call	?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ	; ImGuiWindow::Rect
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rcx+244]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 395
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rcx+260]
	lea	rsi, QWORD PTR [rax+528]
	mov	ecx, 16
	rep movsb
; Line 396
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR [rax+64]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@BeginTable
	jne	SHORT $LN53@BeginTable
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR [rax+68]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@BeginTable
	jne	SHORT $LN53@BeginTable
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR [rax+76]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@BeginTable
	je	SHORT $LN54@BeginTable
$LN53@BeginTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4JA
	add	eax, 85					; 00000055H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BBG@HLLCHCOP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAn?$AAn?$AAe?$AAr?$AAW?$AAi?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN54@BeginTable:
; Line 397
	jmp	SHORT $LN14@BeginTable
$LN13@BeginTable:
; Line 402
	mov	rax, QWORD PTR table$[rbp]
	lea	rcx, QWORD PTR outer_rect$[rbp]
	lea	rdi, QWORD PTR [rax+260]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rax+244]
	lea	rsi, QWORD PTR [rcx+260]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rax+276]
	lea	rsi, QWORD PTR [rcx+244]
	mov	ecx, 16
	rep movsb
$LN14@BeginTable:
; Line 406
	mov	ecx, DWORD PTR instance_id$[rbp]
	call	?PushOverrideID@ImGui@@YAXI@Z		; ImGui::PushOverrideID
; Line 409
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR inner_window$[rbp], rax
; Line 410
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rcx+280]
	movss	DWORD PTR [rax+184], xmm0
; Line 411
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	lea	rdi, QWORD PTR [rax+356]
	lea	rsi, QWORD PTR [rcx+592]
	mov	ecx, 16
	rep movsb
; Line 412
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	movzx	ecx, BYTE PTR [rcx+147]
	mov	BYTE PTR [rax+519], cl
; Line 413
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	lea	rdi, QWORD PTR [rax+40]
	lea	rsi, QWORD PTR [rcx+560]
	mov	ecx, 16
	rep movsb
; Line 414
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	lea	rdi, QWORD PTR [rax+56]
	lea	rsi, QWORD PTR [rcx+576]
	mov	ecx, 16
	rep movsb
; Line 415
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	eax, DWORD PTR [rax+284]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	DWORD PTR [rcx+96], eax
; Line 416
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+264]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 417
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+256]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 418
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+240]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	QWORD PTR [rcx+88], rax
; Line 419
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rcx, QWORD PTR outer_window$[rbp]
	movss	xmm0, DWORD PTR [rcx+452]
	movss	DWORD PTR [rax+100], xmm0
; Line 420
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rcx, QWORD PTR outer_window$[rbp]
	mov	ecx, DWORD PTR [rcx+464]
	mov	DWORD PTR [rax+104], ecx
; Line 421
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR inner_window$[rbp]
	mov	QWORD PTR [rcx+256], rax
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+256]
	mov	rcx, QWORD PTR inner_window$[rbp]
	mov	QWORD PTR [rcx+264], rax
; Line 428
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4194304				; 00400000H
	test	eax, eax
	je	SHORT $LN59@BeginTable
	mov	DWORD PTR tv420[rbp], 0
	jmp	SHORT $LN60@BeginTable
$LN59@BeginTable:
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2097152				; 00200000H
	test	eax, eax
	je	SHORT $LN57@BeginTable
	mov	DWORD PTR tv418[rbp], 1
	jmp	SHORT $LN58@BeginTable
$LN57@BeginTable:
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN55@BeginTable
	mov	DWORD PTR tv416[rbp], 1
	jmp	SHORT $LN56@BeginTable
$LN55@BeginTable:
	mov	DWORD PTR tv416[rbp], 0
$LN56@BeginTable:
	mov	eax, DWORD PTR tv416[rbp]
	mov	DWORD PTR tv418[rbp], eax
$LN58@BeginTable:
	mov	eax, DWORD PTR tv418[rbp]
	mov	DWORD PTR tv420[rbp], eax
$LN60@BeginTable:
	movzx	eax, BYTE PTR tv420[rbp]
	mov	BYTE PTR pad_outer_x$[rbp], al
; Line 429
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8388608				; 00800000H
	test	eax, eax
	je	SHORT $LN61@BeginTable
	mov	BYTE PTR tv424[rbp], 0
	jmp	SHORT $LN62@BeginTable
$LN61@BeginTable:
	mov	BYTE PTR tv424[rbp], 1
$LN62@BeginTable:
	movzx	eax, BYTE PTR tv424[rbp]
	mov	BYTE PTR pad_inner_x$[rbp], al
; Line 430
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN63@BeginTable
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv427[rbp], xmm0
	jmp	SHORT $LN64@BeginTable
$LN63@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv427[rbp], xmm0
$LN64@BeginTable:
	movss	xmm0, DWORD PTR tv427[rbp]
	movss	DWORD PTR inner_spacing_for_border$[rbp], xmm0
; Line 431
	movzx	eax, BYTE PTR pad_inner_x$[rbp]
	test	eax, eax
	je	SHORT $LN65@BeginTable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	SHORT $LN65@BeginTable
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5560]
	movss	DWORD PTR tv435[rbp], xmm0
	jmp	SHORT $LN66@BeginTable
$LN65@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv435[rbp], xmm0
$LN66@BeginTable:
	movss	xmm0, DWORD PTR tv435[rbp]
	movss	DWORD PTR inner_spacing_explicit$[rbp], xmm0
; Line 432
	movzx	eax, BYTE PTR pad_inner_x$[rbp]
	test	eax, eax
	je	SHORT $LN67@BeginTable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN67@BeginTable
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5560]
	movss	DWORD PTR tv443[rbp], xmm0
	jmp	SHORT $LN68@BeginTable
$LN67@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv443[rbp], xmm0
$LN68@BeginTable:
	movss	xmm0, DWORD PTR tv443[rbp]
	movss	DWORD PTR inner_padding_explicit$[rbp], xmm0
; Line 433
	movss	xmm0, DWORD PTR inner_spacing_explicit$[rbp]
	addss	xmm0, DWORD PTR inner_spacing_for_border$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+204], xmm0
; Line 434
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR inner_spacing_explicit$[rbp]
	movss	DWORD PTR [rax+208], xmm0
; Line 435
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR inner_padding_explicit$[rbp]
	movss	DWORD PTR [rax+196], xmm0
; Line 436
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+5564]
	movss	DWORD PTR [rax+200], xmm0
; Line 438
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN69@BeginTable
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv454[rbp], xmm0
	jmp	SHORT $LN70@BeginTable
$LN69@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv454[rbp], xmm0
$LN70@BeginTable:
	movss	xmm0, DWORD PTR tv454[rbp]
	movss	DWORD PTR outer_padding_for_border$[rbp], xmm0
; Line 439
	movzx	eax, BYTE PTR pad_outer_x$[rbp]
	test	eax, eax
	je	SHORT $LN71@BeginTable
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5560]
	movss	DWORD PTR tv460[rbp], xmm0
	jmp	SHORT $LN72@BeginTable
$LN71@BeginTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv460[rbp], xmm0
$LN72@BeginTable:
	movss	xmm0, DWORD PTR tv460[rbp]
	movss	DWORD PTR outer_padding_explicit$[rbp], xmm0
; Line 440
	movss	xmm0, DWORD PTR outer_padding_for_border$[rbp]
	addss	xmm0, DWORD PTR outer_padding_explicit$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+196]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+192], xmm0
; Line 442
	mov	rax, QWORD PTR table$[rbp]
	mov	DWORD PTR [rax+124], -1
; Line 443
	mov	rax, QWORD PTR table$[rbp]
	mov	DWORD PTR [rax+120], -1
; Line 444
	mov	rax, QWORD PTR table$[rbp]
	mov	DWORD PTR [rax+156], 0
; Line 445
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+152], eax
; Line 446
	mov	rax, QWORD PTR outer_window$[rbp]
	cmp	QWORD PTR inner_window$[rbp], rax
	jne	SHORT $LN73@BeginTable
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 276				; 00000114H
	mov	QWORD PTR tv475[rbp], rax
	jmp	SHORT $LN74@BeginTable
$LN73@BeginTable:
	mov	rax, QWORD PTR inner_window$[rbp]
	add	rax, 592				; 00000250H
	mov	QWORD PTR tv475[rbp], rax
$LN74@BeginTable:
	mov	rax, QWORD PTR tv475[rbp]
	mov	QWORD PTR $T22[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	lea	rdi, QWORD PTR [rax+292]
	mov	rsi, QWORD PTR $T22[rbp]
	mov	ecx, 16
	rep movsb
; Line 447
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 292				; 00000124H
	mov	QWORD PTR tv482[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 276				; 00000114H
	mov	rdx, rax
	mov	rcx, QWORD PTR tv482[rbp]
	call	?ClipWith@ImRect@@QEAAXAEBU1@@Z		; ImRect::ClipWith
; Line 448
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 292				; 00000124H
	mov	QWORD PTR tv488[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 356				; 00000164H
	mov	rdx, rax
	mov	rcx, QWORD PTR tv488[rbp]
	call	?ClipWithFull@ImRect@@QEAAXAEBU1@@Z	; ImRect::ClipWithFull
; Line 449
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131072				; 00020000H
	test	eax, eax
	je	SHORT $LN75@BeginTable
	mov	rax, QWORD PTR inner_window$[rbp]
	movss	xmm1, DWORD PTR [rax+572]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+304]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR tv506[rbp], xmm0
	jmp	SHORT $LN76@BeginTable
$LN75@BeginTable:
	mov	rax, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rax+604]
	movss	DWORD PTR tv506[rbp], xmm0
$LN76@BeginTable:
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv506[rbp]
	movss	DWORD PTR [rax+304], xmm0
; Line 451
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+280]
	movss	DWORD PTR [rax+136], xmm0
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rcx+136]
	movss	DWORD PTR [rax+132], xmm0
; Line 452
	mov	rax, QWORD PTR table$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+144], xmm0
; Line 453
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+498], 0
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+497], 0
; Line 454
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+500], 0
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+499], 0
; Line 455
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+516], 1
; Line 456
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+483], 0
; Line 459
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 43					; 0000002bH
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+168], eax
; Line 460
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 44					; 0000002cH
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+172], eax
; Line 463
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+8176], rcx
; Line 464
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	ecx, DWORD PTR table_idx$[rbp]
	mov	DWORD PTR [rax+432], ecx
; Line 465
	mov	rax, QWORD PTR outer_window$[rbp]
	cmp	QWORD PTR inner_window$[rbp], rax
	je	SHORT $LN20@BeginTable
; Line 466
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	ecx, DWORD PTR table_idx$[rbp]
	mov	DWORD PTR [rax+432], ecx
$LN20@BeginTable:
; Line 468
	mov	eax, DWORD PTR table_last_flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN21@BeginTable
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN21@BeginTable
; Line 469
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+515], 1
$LN21@BeginTable:
; Line 472
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8248]
	cmp	DWORD PTR table_idx$[rbp], eax
	jl	SHORT $LN22@BeginTable
; Line 473
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8248				; 00002038H
	mov	QWORD PTR tv548[rbp], rax
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T23[rbp], xmm0
	mov	eax, DWORD PTR table_idx$[rbp]
	inc	eax
	lea	r8, QWORD PTR $T23[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv548[rbp]
	call	?resize@?$ImVector@M@@QEAAXHAEBM@Z	; ImVector<float>::resize
$LN22@BeginTable:
; Line 474
	mov	rax, QWORD PTR g$[rbp]
	cvtsd2ss xmm0, QWORD PTR [rax+7048]
	movss	DWORD PTR tv558[rbp], xmm0
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8248				; 00002038H
	mov	QWORD PTR tv554[rbp], rax
	mov	edx, DWORD PTR table_idx$[rbp]
	mov	rcx, QWORD PTR tv554[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR tv558[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 475
	mov	rax, QWORD PTR g$[rbp]
	cvtsd2ss xmm0, QWORD PTR [rax+7048]
	mov	rax, QWORD PTR temp_data$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 476
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+518], 0
; Line 479
	mov	QWORD PTR old_columns_to_preserve$[rbp], 0
; Line 480
	mov	QWORD PTR old_columns_raw_data$[rbp], 0
; Line 481
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ ; ImSpan<ImGuiTableColumn>::size
	mov	DWORD PTR old_columns_count$[rbp], eax
; Line 482
	cmp	DWORD PTR old_columns_count$[rbp], 0
	je	SHORT $LN23@BeginTable
	mov	eax, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR old_columns_count$[rbp], eax
	je	SHORT $LN23@BeginTable
; Line 485
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR old_columns_to_preserve$[rbp], rax
; Line 486
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR old_columns_raw_data$[rbp], rax
; Line 487
	mov	rax, QWORD PTR table$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN23@BeginTable:
; Line 489
	mov	rax, QWORD PTR table$[rbp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN24@BeginTable
; Line 491
	mov	edx, DWORD PTR columns_count$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableBeginInitMemory@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableBeginInitMemory
; Line 492
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+511], 1
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+507], 1
$LN24@BeginTable:
; Line 494
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+514]
	test	eax, eax
	je	SHORT $LN25@BeginTable
; Line 495
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableResetSettings@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableResetSettings
$LN25@BeginTable:
; Line 496
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+507]
	test	eax, eax
	je	$LN26@BeginTable
; Line 499
	mov	rax, QWORD PTR table$[rbp]
	mov	DWORD PTR [rax+108], -1
; Line 500
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
; Line 501
	mov	eax, -1
	mov	rcx, QWORD PTR table$[rbp]
	mov	WORD PTR [rcx+130], ax
; Line 502
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+496], -1
; Line 503
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+488], -1
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+487], -1
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+490], -1
; Line 504
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+486], -1
; Line 505
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+485], -1
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+484], -1
; Line 506
	mov	DWORD PTR n$9[rbp], 0
	jmp	SHORT $LN4@BeginTable
$LN2@BeginTable:
	mov	eax, DWORD PTR n$9[rbp]
	inc	eax
	mov	DWORD PTR n$9[rbp], eax
$LN4@BeginTable:
	mov	eax, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR n$9[rbp], eax
	jge	$LN26@BeginTable
; Line 508
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv602[rbp], rax
	mov	edx, DWORD PTR n$9[rbp]
	mov	rcx, QWORD PTR tv602[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$10[rbp], rax
; Line 509
	cmp	QWORD PTR old_columns_to_preserve$[rbp], 0
	je	SHORT $LN27@BeginTable
	mov	eax, DWORD PTR old_columns_count$[rbp]
	cmp	DWORD PTR n$9[rbp], eax
	jge	SHORT $LN27@BeginTable
; Line 512
	movsxd	rax, DWORD PTR n$9[rbp]
	imul	rax, rax, 104				; 00000068H
	mov	rcx, QWORD PTR old_columns_to_preserve$[rbp]
	mov	rdi, QWORD PTR column$10[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 104				; 00000068H
	rep movsb
; Line 513
	jmp	SHORT $LN28@BeginTable
$LN27@BeginTable:
; Line 516
	mov	rax, QWORD PTR column$10[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR width_auto$11[rbp], xmm0
; Line 517
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImGuiTableColumn@@QEAA@XZ		; ImGuiTableColumn::ImGuiTableColumn
	mov	rdi, QWORD PTR column$10[rbp]
	mov	rsi, rax
	mov	ecx, 104				; 00000068H
	rep movsb
; Line 518
	mov	rax, QWORD PTR column$10[rbp]
	movss	xmm0, DWORD PTR width_auto$11[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 519
	mov	rax, QWORD PTR column$10[rbp]
	mov	BYTE PTR [rax+97], 1
; Line 520
	mov	rax, QWORD PTR column$10[rbp]
	mov	BYTE PTR [rax+92], 1
	mov	rax, QWORD PTR column$10[rbp]
	mov	BYTE PTR [rax+91], 1
	mov	rax, QWORD PTR column$10[rbp]
	mov	BYTE PTR [rax+90], 1
$LN28@BeginTable:
; Line 522
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv624[rbp], rax
	mov	edx, DWORD PTR n$9[rbp]
	mov	rcx, QWORD PTR tv624[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movzx	ecx, BYTE PTR n$9[rbp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR column$10[rbp]
	movzx	ecx, BYTE PTR n$9[rbp]
	mov	BYTE PTR [rax+82], cl
; Line 523
	jmp	$LN2@BeginTable
$LN26@BeginTable:
; Line 525
	cmp	QWORD PTR old_columns_raw_data$[rbp], 0
	je	SHORT $LN29@BeginTable
; Line 526
	mov	rcx, QWORD PTR old_columns_raw_data$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN29@BeginTable:
; Line 529
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+511]
	test	eax, eax
	je	SHORT $LN30@BeginTable
; Line 530
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableLoadSettings@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableLoadSettings
$LN30@BeginTable:
; Line 537
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	movss	DWORD PTR new_ref_scale_unit$[rbp], xmm0
; Line 538
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+240]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN79@BeginTable
	je	$LN31@BeginTable
$LN79@BeginTable:
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+240]
	ucomiss	xmm0, DWORD PTR new_ref_scale_unit$[rbp]
	jp	SHORT $LN78@BeginTable
	je	$LN31@BeginTable
$LN78@BeginTable:
; Line 540
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR new_ref_scale_unit$[rbp]
	divss	xmm0, DWORD PTR [rax+240]
	movss	DWORD PTR scale_factor$12[rbp], xmm0
; Line 542
	mov	DWORD PTR n$13[rbp], 0
	jmp	SHORT $LN7@BeginTable
$LN5@BeginTable:
	mov	eax, DWORD PTR n$13[rbp]
	inc	eax
	mov	DWORD PTR n$13[rbp], eax
$LN7@BeginTable:
	mov	eax, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR n$13[rbp], eax
	jge	SHORT $LN31@BeginTable
; Line 543
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv652[rbp], rax
	mov	edx, DWORD PTR n$13[rbp]
	mov	rcx, QWORD PTR tv652[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movss	xmm0, DWORD PTR [rax+16]
	mulss	xmm0, DWORD PTR scale_factor$12[rbp]
	movss	DWORD PTR tv656[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv645[rbp], rax
	mov	edx, DWORD PTR n$13[rbp]
	mov	rcx, QWORD PTR tv645[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movss	xmm0, DWORD PTR tv656[rbp]
	movss	DWORD PTR [rax+16], xmm0
	jmp	$LN5@BeginTable
$LN31@BeginTable:
; Line 545
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR new_ref_scale_unit$[rbp]
	movss	DWORD PTR [rax+240], xmm0
; Line 550
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	BYTE PTR [rax+147], 1
; Line 554
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+408], 0
	jle	SHORT $LN32@BeginTable
; Line 555
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 408				; 00000198H
	mov	QWORD PTR tv668[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv668[rbp]
	call	?resize@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::resize
$LN32@BeginTable:
; Line 558
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableBeginApplyRequests@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableBeginApplyRequests
; Line 560
	mov	al, 1
$LN1@BeginTable:
; Line 561
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2400]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z ENDP	; ImGui::BeginTableEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
g$ = 8
outer_window$ = 40
use_child_window$ = 68
avail_size$ = 104
actual_outer_size$ = 136
outer_rect$ = 168
table$ = 216
instance_no$ = 244
instance_id$ = 276
table_last_flags$ = 308
table_idx$ = 340
temp_data$ = 376
override_content_size$7 = 408
child_flags$8 = 436
inner_window$ = 472
pad_outer_x$ = 500
pad_inner_x$ = 532
inner_spacing_for_border$ = 564
inner_spacing_explicit$ = 596
inner_padding_explicit$ = 628
outer_padding_for_border$ = 660
outer_padding_explicit$ = 692
old_columns_to_preserve$ = 728
old_columns_raw_data$ = 760
old_columns_count$ = 788
n$9 = 820
column$10 = 856
width_auto$11 = 884
new_ref_scale_unit$ = 916
scale_factor$12 = 948
n$13 = 980
$T14 = 1784
$T15 = 1812
$T16 = 1848
$T17 = 1988
$T18 = 2020
$T19 = 2052
$T20 = 2084
$T21 = 2132
$T22 = 2168
$T23 = 2196
$T24 = 2228
tv558 = 2340
tv506 = 2340
tv460 = 2340
tv454 = 2340
tv443 = 2340
tv435 = 2340
tv427 = 2340
tv424 = 2340
tv420 = 2340
tv278 = 2340
tv263 = 2340
tv229 = 2340
tv169 = 2340
tv94 = 2340
tv86 = 2340
tv668 = 2344
tv652 = 2344
tv624 = 2344
tv602 = 2344
tv554 = 2344
tv548 = 2344
tv488 = 2344
tv482 = 2344
tv475 = 2344
tv418 = 2344
tv331 = 2344
tv266 = 2344
tv219 = 2344
tv211 = 2344
tv186 = 2344
tv162 = 2344
tv136 = 2344
tv416 = 2348
tv673 = 2352
tv656 = 2352
tv215 = 2352
tv672 = 2360
tv645 = 2360
tv209 = 2368
tv207 = 2376
__$ArrayPad$ = 2384
name$ = 2432
id$ = 2440
columns_count$ = 2448
flags$ = 2456
outer_size$ = 2464
inner_width$ = 2472
?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA PROC ; `ImGui::BeginTableEx'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+48]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??1ImGuiTableTempData@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z@4HA ENDP ; `ImGui::BeginTableEx'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z
_TEXT	SEGMENT
g$ = 8
tv69 = 216
id$ = 256
?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z PROC	; ImGui::TableFindByID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 298
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 299
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 300
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z ; ImPool<ImGuiTable>::GetByKey
; Line 301
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TableFindByID@ImGui@@YAPEAUImGuiTable@@I@Z ENDP	; ImGui::TableFindByID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TablePopBackgroundChannel@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
table$ = 72
column$ = 104
tv84 = 312
tv72 = 312
?TablePopBackgroundChannel@ImGui@@YAXXZ PROC		; ImGui::TablePopBackgroundChannel, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2226
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2227
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2228
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 2229
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2230
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR [rax+124]
	mov	rcx, QWORD PTR tv72[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 2233
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 372				; 00000174H
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 2234
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv84[rbp], rax
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+87]
	mov	r8d, eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv84[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 2235
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?TablePopBackgroundChannel@ImGui@@YAXXZ ENDP		; ImGui::TablePopBackgroundChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TablePushBackgroundChannel@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
table$ = 72
tv80 = 280
?TablePushBackgroundChannel@ImGui@@YAXXZ PROC		; ImGui::TablePushBackgroundChannel, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2214
$LN3:
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2215
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2216
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 2217
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2220
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+372]
	lea	rsi, QWORD PTR [rcx+592]
	mov	ecx, 16
	rep movsb
; Line 2221
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 340				; 00000154H
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 2222
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+503]
	mov	r8d, eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv80[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 2223
	lea	rsp, QWORD PTR [rbp+288]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?TablePushBackgroundChannel@ImGui@@YAXXZ ENDP		; ImGui::TablePushBackgroundChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetHeaderRowHeight@ImGui@@YAMXZ
_TEXT	SEGMENT
row_height$ = 4
columns_count$ = 36
column_n$1 = 68
flags$2 = 100
$T3 = 324
?TableGetHeaderRowHeight@ImGui@@YAMXZ PROC		; ImGui::TableGetHeaderRowHeight, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2788
$LN7:
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2793
	call	?GetTextLineHeight@ImGui@@YAMXZ		; ImGui::GetTextLineHeight
	movss	DWORD PTR row_height$[rbp], xmm0
; Line 2794
	call	?TableGetColumnCount@ImGui@@YAHXZ	; ImGui::TableGetColumnCount
	mov	DWORD PTR columns_count$[rbp], eax
; Line 2795
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableGetHe
$LN2@TableGetHe:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableGetHe:
	mov	eax, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	SHORT $LN3@TableGetHe
; Line 2797
	mov	ecx, DWORD PTR column_n$1[rbp]
	call	?TableGetColumnFlags@ImGui@@YAHH@Z	; ImGui::TableGetColumnFlags
	mov	DWORD PTR flags$2[rbp], eax
; Line 2798
	mov	eax, DWORD PTR flags$2[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN5@TableGetHe
	mov	eax, DWORD PTR flags$2[rbp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	SHORT $LN5@TableGetHe
; Line 2799
	mov	ecx, DWORD PTR column_n$1[rbp]
	call	?TableGetColumnName@ImGui@@YAPEBDH@Z	; ImGui::TableGetColumnName
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	movss	xmm1, DWORD PTR [rax+4]
	movss	xmm0, DWORD PTR row_height$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR row_height$[rbp], xmm0
$LN5@TableGetHe:
; Line 2800
	jmp	SHORT $LN2@TableGetHe
$LN3@TableGetHe:
; Line 2801
	call	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ	; ImGui::GetStyle
	movss	xmm0, DWORD PTR [rax+92]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR row_height$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR row_height$[rbp], xmm0
; Line 2802
	movss	xmm0, DWORD PTR row_height$[rbp]
; Line 2803
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?TableGetHeaderRowHeight@ImGui@@YAMXZ ENDP		; ImGui::TableGetHeaderRowHeight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetHoveredColumn@ImGui@@YAHXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
?TableGetHoveredColumn@ImGui@@YAHXZ PROC		; ImGui::TableGetHoveredColumn, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1597
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1598
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1599
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1600
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableGetHo
; Line 1601
	mov	eax, -1
	jmp	SHORT $LN1@TableGetHo
$LN2@TableGetHo:
; Line 1602
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
$LN1@TableGetHo:
; Line 1603
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetHoveredColumn@ImGui@@YAHXZ ENDP		; ImGui::TableGetHoveredColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
sort_order_max$ = 68
other_column_n$1 = 100
column$ = 136
other_column_n$2 = 164
other_column$3 = 200
tv150 = 404
tv160 = 408
tv129 = 408
tv88 = 408
column_n$ = 448
sort_direction$ = 456
append_to_sort_specs$ = 464
?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z PROC	; ImGui::TableSetColumnSortDirection, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2650
$LN20:
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2651
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2652
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2654
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 67108864				; 04000000H
	test	eax, eax
	jne	SHORT $LN8@TableSetCo
; Line 2655
	mov	BYTE PTR append_to_sort_specs$[rbp], 0
$LN8@TableSetCo:
; Line 2656
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 134217728				; 08000000H
	test	eax, eax
	jne	SHORT $LN9@TableSetCo
; Line 2657
	cmp	DWORD PTR sort_direction$[rbp], 0
	jne	SHORT $LN17@TableSetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnSortDirection@ImGui@@YAXHH_N@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FE@KIEHIAAN@?$AAs?$AAo?$AAr?$AAt?$AA_?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@TableSetCo:
$LN9@TableSetCo:
; Line 2659
	mov	BYTE PTR sort_order_max$[rbp], 0
; Line 2660
	movzx	eax, BYTE PTR append_to_sort_specs$[rbp]
	test	eax, eax
	je	SHORT $LN10@TableSetCo
; Line 2661
	mov	DWORD PTR other_column_n$1[rbp], 0
	jmp	SHORT $LN4@TableSetCo
$LN2@TableSetCo:
	mov	eax, DWORD PTR other_column_n$1[rbp]
	inc	eax
	mov	DWORD PTR other_column_n$1[rbp], eax
$LN4@TableSetCo:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR other_column_n$1[rbp], eax
	jge	SHORT $LN3@TableSetCo
; Line 2662
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv88[rbp], rax
	mov	edx, DWORD PTR other_column_n$1[rbp]
	mov	rcx, QWORD PTR tv88[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movzx	edx, BYTE PTR [rax+86]
	movzx	ecx, BYTE PTR sort_order_max$[rbp]
	call	??$ImMax@C@@YACCC@Z			; ImMax<signed char>
	mov	BYTE PTR sort_order_max$[rbp], al
	jmp	SHORT $LN2@TableSetCo
$LN3@TableSetCo:
$LN10@TableSetCo:
; Line 2664
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv129[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv129[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 2665
	movzx	eax, BYTE PTR sort_direction$[rbp]
	and	al, 3
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 2666
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@TableSetCo
; Line 2667
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+86], -1
	jmp	SHORT $LN12@TableSetCo
$LN11@TableSetCo:
; Line 2668
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	SHORT $LN14@TableSetCo
	movzx	eax, BYTE PTR append_to_sort_specs$[rbp]
	test	eax, eax
	jne	SHORT $LN13@TableSetCo
$LN14@TableSetCo:
; Line 2669
	movzx	eax, BYTE PTR append_to_sort_specs$[rbp]
	test	eax, eax
	je	SHORT $LN18@TableSetCo
	movsx	eax, BYTE PTR sort_order_max$[rbp]
	inc	eax
	mov	DWORD PTR tv150[rbp], eax
	jmp	SHORT $LN19@TableSetCo
$LN18@TableSetCo:
	mov	DWORD PTR tv150[rbp], 0
$LN19@TableSetCo:
	mov	rax, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR tv150[rbp]
	mov	BYTE PTR [rax+86], cl
$LN13@TableSetCo:
$LN12@TableSetCo:
; Line 2671
	mov	DWORD PTR other_column_n$2[rbp], 0
	jmp	SHORT $LN7@TableSetCo
$LN5@TableSetCo:
	mov	eax, DWORD PTR other_column_n$2[rbp]
	inc	eax
	mov	DWORD PTR other_column_n$2[rbp], eax
$LN7@TableSetCo:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR other_column_n$2[rbp], eax
	jge	SHORT $LN6@TableSetCo
; Line 2673
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv160[rbp], rax
	mov	edx, DWORD PTR other_column_n$2[rbp]
	mov	rcx, QWORD PTR tv160[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR other_column$3[rbp], rax
; Line 2674
	mov	rax, QWORD PTR column$[rbp]
	cmp	QWORD PTR other_column$3[rbp], rax
	je	SHORT $LN15@TableSetCo
	movzx	eax, BYTE PTR append_to_sort_specs$[rbp]
	test	eax, eax
	jne	SHORT $LN15@TableSetCo
; Line 2675
	mov	rax, QWORD PTR other_column$3[rbp]
	mov	BYTE PTR [rax+86], -1
$LN15@TableSetCo:
; Line 2676
	mov	rdx, QWORD PTR other_column$3[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableFixColumnSortDirection@ImGui@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ; ImGui::TableFixColumnSortDirection
; Line 2677
	jmp	SHORT $LN5@TableSetCo
$LN6@TableSetCo:
; Line 2678
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
; Line 2679
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+508], 1
; Line 2680
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z ENDP	; ImGui::TableSetColumnSortDirection
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetColumnWidth@ImGui@@YAXHM@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
column_0$ = 72
column_0_width$ = 100
min_width$ = 132
max_width$ = 164
column_1$ = 200
column_1_width$ = 228
tv187 = 440
tv168 = 440
tv152 = 440
tv87 = 440
tv188 = 448
tv153 = 448
column_n$ = 496
width$ = 504
?TableSetColumnWidth@ImGui@@YAXHM@Z PROC		; ImGui::TableSetColumnWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2068
$LN23:
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 504				; 000001f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2069
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2070
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2071
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN11@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	je	SHORT $LN12@TableSetCo
$LN11@TableSetCo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FK@MHBOMDGH@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@TableSetCo:
; Line 2072
	cmp	DWORD PTR column_n$[rbp], 0
	jl	SHORT $LN13@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$[rbp], eax
	jl	SHORT $LN14@TableSetCo
$LN13@TableSetCo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GA@OFNPMLNE@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@TableSetCo:
; Line 2073
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv87[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv87[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column_0$[rbp], rax
; Line 2074
	movss	xmm0, DWORD PTR width$[rbp]
	movss	DWORD PTR column_0_width$[rbp], xmm0
; Line 2078
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+188]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN15@TableSetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA
	add	eax, 10
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@PGHMBBCD@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAM?$AAi?$AAn?$AAC?$AAo?$AAl?$AAu?$AAm@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@TableSetCo:
; Line 2079
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+188]
	movss	DWORD PTR min_width$[rbp], xmm0
; Line 2080
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetMaxColumnWidth@ImGui@@YAMPEBUImGuiTable@@H@Z ; ImGui::TableGetMaxColumnWidth
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR min_width$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR max_width$[rbp], xmm0
; Line 2081
	movss	xmm2, DWORD PTR max_width$[rbp]
	movss	xmm1, DWORD PTR min_width$[rbp]
	movss	xmm0, DWORD PTR column_0_width$[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR column_0_width$[rbp], xmm0
; Line 2082
	mov	rax, QWORD PTR column_0$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR column_0_width$[rbp]
	jp	SHORT $LN22@TableSetCo
	je	SHORT $LN3@TableSetCo
$LN22@TableSetCo:
	mov	rax, QWORD PTR column_0$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	ucomiss	xmm0, DWORD PTR column_0_width$[rbp]
	jp	SHORT $LN2@TableSetCo
	jne	SHORT $LN2@TableSetCo
$LN3@TableSetCo:
; Line 2083
	jmp	$LN1@TableSetCo
$LN2@TableSetCo:
; Line 2086
	mov	rax, QWORD PTR column_0$[rbp]
	movsx	eax, BYTE PTR [rax+85]
	cmp	eax, -1
	je	SHORT $LN16@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv152[rbp], rax
	mov	rax, QWORD PTR column_0$[rbp]
	movsx	eax, BYTE PTR [rax+85]
	mov	edx, eax
	mov	rcx, QWORD PTR tv152[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR tv153[rbp], rax
	jmp	SHORT $LN17@TableSetCo
$LN16@TableSetCo:
	mov	QWORD PTR tv153[rbp], 0
$LN17@TableSetCo:
	mov	rax, QWORD PTR tv153[rbp]
	mov	QWORD PTR column_1$[rbp], rax
; Line 2122
	mov	rax, QWORD PTR column_0$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN4@TableSetCo
; Line 2123
	cmp	QWORD PTR column_1$[rbp], 0
	je	SHORT $LN6@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+494]
	cmp	eax, -1
	je	SHORT $LN6@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv168[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+494]
	mov	edx, eax
	mov	rcx, QWORD PTR tv168[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	movsx	eax, BYTE PTR [rax+82]
	mov	rcx, QWORD PTR column_0$[rbp]
	movsx	ecx, BYTE PTR [rcx+82]
	cmp	eax, ecx
	jl	SHORT $LN5@TableSetCo
$LN6@TableSetCo:
; Line 2125
	mov	rax, QWORD PTR column_0$[rbp]
	movss	xmm0, DWORD PTR column_0_width$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2126
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
; Line 2127
	jmp	$LN1@TableSetCo
$LN5@TableSetCo:
$LN4@TableSetCo:
; Line 2131
	cmp	QWORD PTR column_1$[rbp], 0
	jne	SHORT $LN7@TableSetCo
; Line 2132
	mov	rax, QWORD PTR column_0$[rbp]
	movsx	eax, BYTE PTR [rax+84]
	cmp	eax, -1
	je	SHORT $LN18@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv187[rbp], rax
	mov	rax, QWORD PTR column_0$[rbp]
	movsx	eax, BYTE PTR [rax+84]
	mov	edx, eax
	mov	rcx, QWORD PTR tv187[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR tv188[rbp], rax
	jmp	SHORT $LN19@TableSetCo
$LN18@TableSetCo:
	mov	QWORD PTR tv188[rbp], 0
$LN19@TableSetCo:
	mov	rax, QWORD PTR tv188[rbp]
	mov	QWORD PTR column_1$[rbp], rax
$LN7@TableSetCo:
; Line 2133
	cmp	QWORD PTR column_1$[rbp], 0
	jne	SHORT $LN8@TableSetCo
; Line 2134
	jmp	$LN1@TableSetCo
$LN8@TableSetCo:
; Line 2138
	mov	rax, QWORD PTR column_0$[rbp]
	movss	xmm0, DWORD PTR column_0_width$[rbp]
	subss	xmm0, DWORD PTR [rax+16]
	mov	rax, QWORD PTR column_1$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR min_width$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR column_1_width$[rbp], xmm0
; Line 2139
	mov	rax, QWORD PTR column_0$[rbp]
	mov	rcx, QWORD PTR column_1$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+16]
	subss	xmm0, DWORD PTR column_1_width$[rbp]
	movss	DWORD PTR column_0_width$[rbp], xmm0
; Line 2140
	movss	xmm0, DWORD PTR column_0_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@TableSetCo
	movss	xmm0, DWORD PTR column_1_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN21@TableSetCo
$LN20@TableSetCo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnWidth@ImGui@@YAXHM@Z@4JA
	add	eax, 72					; 00000048H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FO@DCOODALF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AA0?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@TableSetCo:
; Line 2141
	mov	rax, QWORD PTR column_0$[rbp]
	movss	xmm0, DWORD PTR column_0_width$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2142
	mov	rax, QWORD PTR column_1$[rbp]
	movss	xmm0, DWORD PTR column_1_width$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2143
	mov	rax, QWORD PTR column_0$[rbp]
	mov	rcx, QWORD PTR column_1$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	and	eax, 8
	test	eax, eax
	je	SHORT $LN9@TableSetCo
; Line 2144
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableUpdateColumnsWeightFromWidth@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateColumnsWeightFromWidth
$LN9@TableSetCo:
; Line 2145
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+512], 1
$LN1@TableSetCo:
; Line 2146
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?TableSetColumnWidth@ImGui@@YAXHM@Z ENDP		; ImGui::TableSetColumnWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableOpenContextMenu@ImGui@@YAXH@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
context_menu_id$1 = 68
column_n$ = 320
?TableOpenContextMenu@ImGui@@YAXH@Z PROC		; ImGui::TableOpenContextMenu, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3001
$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3002
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3003
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 3004
	cmp	DWORD PTR column_n$[rbp], -1
	jne	SHORT $LN2@TableOpenC
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+124], -1
	je	SHORT $LN2@TableOpenC
; Line 3005
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
$LN2@TableOpenC:
; Line 3006
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$[rbp], eax
	jne	SHORT $LN3@TableOpenC
; Line 3007
	mov	DWORD PTR column_n$[rbp], -1
$LN3@TableOpenC:
; Line 3008
	cmp	DWORD PTR column_n$[rbp], -1
	jl	SHORT $LN6@TableOpenC
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$[rbp], eax
	jl	SHORT $LN7@TableOpenC
$LN6@TableOpenC:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableOpenContextMenu@ImGui@@YAXH@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GC@CPFLEHCP@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@TableOpenC:
; Line 3009
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN4@TableOpenC
; Line 3011
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+510], 1
; Line 3012
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$[rbp]
	mov	BYTE PTR [rax+496], cl
; Line 3013
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, WORD PTR [rcx+128]
	mov	WORD PTR [rax+130], cx
; Line 3014
	mov	rax, QWORD PTR table$[rbp]
	mov	r8d, DWORD PTR [rax]
	xor	edx, edx
	lea	rcx, OFFSET FLAT:??_C@_0O@BMOANCPA@?$CD?$CDContextMenu@
	call	?ImHashStr@@YAIPEBD_KI@Z		; ImHashStr
	mov	DWORD PTR context_menu_id$1[rbp], eax
; Line 3015
	xor	edx, edx
	mov	ecx, DWORD PTR context_menu_id$1[rbp]
	call	?OpenPopupEx@ImGui@@YAXIH@Z		; ImGui::OpenPopupEx
$LN4@TableOpenC:
; Line 3017
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableOpenContextMenu@ImGui@@YAXH@Z ENDP		; ImGui::TableOpenContextMenu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z
_TEXT	SEGMENT
columns$ = 224
offset$ = 232
?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z PROC ; ImGui::GetColumnNormFromOffset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3659
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3660
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	subss	xmm0, DWORD PTR [rcx+20]
	movss	xmm1, DWORD PTR offset$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 3661
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ENDP ; ImGui::GetColumnNormFromOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z
_TEXT	SEGMENT
columns$ = 224
offset_norm$ = 232
?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z PROC ; ImGui::GetColumnOffsetFromNorm, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3654
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3655
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	subss	xmm0, DWORD PTR [rcx+20]
	movss	xmm1, DWORD PTR offset_norm$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 3656
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ENDP ; ImGui::GetColumnOffsetFromNorm
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z
_TEXT	SEGMENT
n$1 = 4
columns$ = 40
$T2 = 264
tv90 = 408
tv81 = 408
tv73 = 408
tv130 = 416
tv129 = 424
window$ = 464
id$ = 472
?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z PROC ; ImGui::FindOrCreateColumns, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3795
$LN8:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3797
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@FindOrCrea
$LN2@FindOrCrea:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@FindOrCrea:
	mov	rax, QWORD PTR window$[rbp]
	mov	eax, DWORD PTR [rax+664]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@FindOrCrea
; Line 3798
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 664				; 00000298H
	mov	QWORD PTR tv73[rbp], rax
	mov	edx, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR tv73[rbp]
	call	??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z ; ImVector<ImGuiOldColumns>::operator[]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN5@FindOrCrea
; Line 3799
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 664				; 00000298H
	mov	QWORD PTR tv81[rbp], rax
	mov	edx, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR tv81[rbp]
	call	??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z ; ImVector<ImGuiOldColumns>::operator[]
	jmp	$LN1@FindOrCrea
$LN5@FindOrCrea:
	jmp	SHORT $LN2@FindOrCrea
$LN3@FindOrCrea:
; Line 3801
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 664				; 00000298H
	mov	QWORD PTR tv90[rbp], rax
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImGuiOldColumns@@QEAA@XZ		; ImGuiOldColumns::ImGuiOldColumns
	mov	QWORD PTR tv130[rbp], rax
	mov	rax, QWORD PTR tv130[rbp]
	mov	QWORD PTR tv129[rbp], rax
	mov	rdx, QWORD PTR tv129[rbp]
	mov	rcx, QWORD PTR tv90[rbp]
	call	?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z ; ImVector<ImGuiOldColumns>::push_back
	npad	1
	lea	rcx, QWORD PTR $T2[rbp]
	call	??1ImGuiOldColumns@@QEAA@XZ
; Line 3802
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 664				; 00000298H
	mov	rcx, rax
	call	?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ ; ImVector<ImGuiOldColumns>::back
	mov	QWORD PTR columns$[rbp], rax
; Line 3803
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 3804
	mov	rax, QWORD PTR columns$[rbp]
$LN1@FindOrCrea:
; Line 3805
	lea	rsp, QWORD PTR [rbp+440]
	pop	rdi
	pop	rbp
	ret	0
?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z ENDP ; ImGui::FindOrCreateColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
n$1 = 4
columns$ = 40
$T2 = 264
tv90 = 408
tv81 = 408
tv73 = 408
tv130 = 416
tv129 = 424
window$ = 464
id$ = 472
?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA PROC ; `ImGui::FindOrCreateColumns'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR $T2[rbp]
	call	??1ImGuiOldColumns@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z@4HA ENDP ; `ImGui::FindOrCreateColumns'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnsID@ImGui@@YAIPEBDH@Z
_TEXT	SEGMENT
window$ = 8
id$ = 36
tv66 = 244
tv73 = 248
str_id$ = 288
columns_count$ = 296
?GetColumnsID@ImGui@@YAIPEBDH@Z PROC			; ImGui::GetColumnsID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3808
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3809
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3813
	cmp	QWORD PTR str_id$[rbp], 0
	je	SHORT $LN3@GetColumns
	mov	DWORD PTR tv66[rbp], 0
	jmp	SHORT $LN4@GetColumns
$LN3@GetColumns:
	mov	eax, DWORD PTR columns_count$[rbp]
	mov	DWORD PTR tv66[rbp], eax
$LN4@GetColumns:
	mov	eax, DWORD PTR tv66[rbp]
	add	eax, 287454023				; 11223347H
	mov	ecx, eax
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 3814
	cmp	QWORD PTR str_id$[rbp], 0
	je	SHORT $LN5@GetColumns
	mov	rax, QWORD PTR str_id$[rbp]
	mov	QWORD PTR tv73[rbp], rax
	jmp	SHORT $LN6@GetColumns
$LN5@GetColumns:
	lea	rax, OFFSET FLAT:??_C@_07HIFEPIJN@columns@
	mov	QWORD PTR tv73[rbp], rax
$LN6@GetColumns:
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv73[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 3815
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 3817
	mov	eax, DWORD PTR id$[rbp]
; Line 3818
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnsID@ImGui@@YAIPEBDH@Z ENDP			; ImGui::GetColumnsID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PopColumnsBackground@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
columns$ = 40
tv80 = 248
?PopColumnsBackground@ImGui@@YAXXZ PROC			; ImGui::PopColumnsBackground, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3783
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3784
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3785
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3786
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+16], 1
	jne	SHORT $LN2@PopColumns
; Line 3787
	jmp	SHORT $LN1@PopColumns
$LN2@PopColumns:
; Line 3790
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 60					; 0000003cH
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 3791
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	r8d, eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv80[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
$LN1@PopColumns:
; Line 3792
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?PopColumnsBackground@ImGui@@YAXXZ ENDP			; ImGui::PopColumnsBackground
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushColumnsBackground@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
columns$ = 40
tv81 = 248
?PushColumnsBackground@ImGui@@YAXXZ PROC		; ImGui::PushColumnsBackground, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3770
$LN4:
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 288				; 00000120H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3771
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3772
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3773
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+16], 1
	jne	SHORT $LN2@PushColumn
; Line 3774
	jmp	SHORT $LN1@PushColumn
$LN2@PushColumn:
; Line 3777
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+60]
	lea	rsi, QWORD PTR [rcx+592]
	mov	ecx, 16
	rep movsb
; Line 3778
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 44					; 0000002cH
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 3779
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv81[rbp], rax
	xor	r8d, r8d
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv81[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
$LN1@PushColumn:
; Line 3780
	lea	rsp, QWORD PTR [rbp+256]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?PushColumnsBackground@ImGui@@YAXXZ ENDP		; ImGui::PushColumnsBackground
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushColumnClipRect@ImGui@@YAXH@Z
_TEXT	SEGMENT
window$ = 8
columns$ = 40
column$ = 72
tv74 = 280
column_index$ = 320
?PushColumnClipRect@ImGui@@YAXH@Z PROC			; ImGui::PushColumnClipRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3758
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3759
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3760
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3761
	cmp	DWORD PTR column_index$[rbp], 0
	jge	SHORT $LN2@PushColumn
; Line 3762
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR column_index$[rbp], eax
$LN2@PushColumn:
; Line 3764
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv74[rbp], rax
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 3765
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 20
	mov	rcx, QWORD PTR column$[rbp]
	add	rcx, 12
	xor	r8d, r8d
	mov	rdx, rax
	call	?PushClipRect@ImGui@@YAXAEBUImVec2@@0_N@Z ; ImGui::PushClipRect
; Line 3766
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?PushColumnClipRect@ImGui@@YAXH@Z ENDP			; ImGui::PushColumnClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndColumns@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
window$ = 40
columns$ = 72
flags$ = 100
is_being_resized$ = 132
y1$6 = 164
y2$7 = 196
dragging_column$8 = 228
n$9 = 260
column$10 = 296
x$11 = 324
column_id$12 = 356
column_hit_hw$13 = 388
column_hit_rect$14 = 424
hovered$15 = 468
held$16 = 500
col$17 = 532
xi$18 = 564
n$19 = 596
x$20 = 628
$T21 = 1044
$T22 = 1076
$T23 = 1108
$T24 = 1140
tv217 = 1156
tv263 = 1160
tv242 = 1160
tv214 = 1160
tv186 = 1160
tv161 = 1160
tv80 = 1160
tv266 = 1168
tv240 = 1168
tv184 = 1168
tv256 = 1176
tv238 = 1176
__$ArrayPad$ = 1184
?EndColumns@ImGui@@YAXXZ PROC				; ImGui::EndColumns, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3953
$LN24:
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1248				; 000004e0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 204				; 000000ccH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3954
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3955
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3956
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3957
	cmp	QWORD PTR columns$[rbp], 0
	jne	SHORT $LN19@EndColumns
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndColumns@ImGui@@YAXXZ@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@FLGDBJKG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@EndColumns:
; Line 3959
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 3960
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+16], 1
	jle	SHORT $LN8@EndColumns
; Line 3962
	call	?PopClipRect@ImGui@@YAXXZ		; ImGui::PopClipRect
; Line 3963
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv80[rbp]
	call	?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z ; ImDrawListSplitter::Merge
$LN8@EndColumns:
; Line 3966
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR flags$[rbp], eax
; Line 3967
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+220]
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+32]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR columns$[rbp]
	movss	DWORD PTR [rax+32], xmm0
; Line 3968
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rcx+32]
	movss	DWORD PTR [rax+220], xmm0
; Line 3969
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN9@EndColumns
; Line 3970
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rcx+40]
	movss	DWORD PTR [rax+240], xmm0
$LN9@EndColumns:
; Line 3974
	mov	BYTE PTR is_being_resized$[rbp], 0
; Line 3975
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	jne	$LN10@EndColumns
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	jne	$LN10@EndColumns
; Line 3978
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+596]
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+36]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR y1$6[rbp], xmm0
; Line 3979
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+604]
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+220]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR y2$7[rbp], xmm0
; Line 3980
	mov	DWORD PTR dragging_column$8[rbp], -1
; Line 3981
	mov	DWORD PTR n$9[rbp], 1
	jmp	SHORT $LN4@EndColumns
$LN2@EndColumns:
	mov	eax, DWORD PTR n$9[rbp]
	inc	eax
	mov	DWORD PTR n$9[rbp], eax
$LN4@EndColumns:
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR n$9[rbp], eax
	jge	$LN3@EndColumns
; Line 3983
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv161[rbp], rax
	mov	edx, DWORD PTR n$9[rbp]
	mov	rcx, QWORD PTR tv161[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR column$10[rbp], rax
; Line 3984
	mov	ecx, DWORD PTR n$9[rbp]
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x$11[rbp], xmm0
; Line 3985
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR n$9[rbp]
	mov	DWORD PTR column_id$12[rbp], eax
; Line 3986
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR column_hit_hw$13[rbp], xmm0
; Line 3987
	movss	xmm0, DWORD PTR x$11[rbp]
	addss	xmm0, DWORD PTR __real@40800000
	movss	xmm2, DWORD PTR y2$7[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv186[rbp], rax
	movss	xmm0, DWORD PTR x$11[rbp]
	subss	xmm0, DWORD PTR __real@40800000
	movss	xmm2, DWORD PTR y1$6[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv184[rbp], rax
	mov	r8, QWORD PTR tv186[rbp]
	mov	rdx, QWORD PTR tv184[rbp]
	lea	rcx, QWORD PTR column_hit_rect$14[rbp]
	call	??0ImRect@@QEAA@AEBUImVec2@@0@Z		; ImRect::ImRect
; Line 3988
	mov	ecx, DWORD PTR column_id$12[rbp]
	call	?KeepAliveID@ImGui@@YAXI@Z		; ImGui::KeepAliveID
; Line 3989
	xor	r8d, r8d
	mov	edx, DWORD PTR column_id$12[rbp]
	lea	rcx, QWORD PTR column_hit_rect$14[rbp]
	call	?IsClippedEx@ImGui@@YA_NAEBUImRect@@I_N@Z ; ImGui::IsClippedEx
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@EndColumns
; Line 3990
	jmp	$LN2@EndColumns
$LN11@EndColumns:
; Line 3992
	mov	BYTE PTR hovered$15[rbp], 0
	mov	BYTE PTR held$16[rbp], 0
; Line 3993
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN12@EndColumns
; Line 3995
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR held$16[rbp]
	lea	r8, QWORD PTR hovered$15[rbp]
	mov	edx, DWORD PTR column_id$12[rbp]
	lea	rcx, QWORD PTR column_hit_rect$14[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
; Line 3996
	movzx	eax, BYTE PTR hovered$15[rbp]
	test	eax, eax
	jne	SHORT $LN14@EndColumns
	movzx	eax, BYTE PTR held$16[rbp]
	test	eax, eax
	je	SHORT $LN13@EndColumns
$LN14@EndColumns:
; Line 3997
	mov	rax, QWORD PTR g$[rbp]
	mov	DWORD PTR [rax+8008], 4
$LN13@EndColumns:
; Line 3998
	movzx	eax, BYTE PTR held$16[rbp]
	test	eax, eax
	je	SHORT $LN15@EndColumns
	mov	rax, QWORD PTR column$10[rbp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN15@EndColumns
; Line 3999
	mov	eax, DWORD PTR n$9[rbp]
	mov	DWORD PTR dragging_column$8[rbp], eax
$LN15@EndColumns:
$LN12@EndColumns:
; Line 4003
	movzx	eax, BYTE PTR held$16[rbp]
	test	eax, eax
	je	SHORT $LN22@EndColumns
	mov	DWORD PTR tv217[rbp], 29
	jmp	SHORT $LN23@EndColumns
$LN22@EndColumns:
	movzx	eax, BYTE PTR hovered$15[rbp]
	test	eax, eax
	je	SHORT $LN20@EndColumns
	mov	DWORD PTR tv214[rbp], 28
	jmp	SHORT $LN21@EndColumns
$LN20@EndColumns:
	mov	DWORD PTR tv214[rbp], 27
$LN21@EndColumns:
	mov	eax, DWORD PTR tv214[rbp]
	mov	DWORD PTR tv217[rbp], eax
$LN23@EndColumns:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv217[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$17[rbp], eax
; Line 4004
	cvttss2si eax, DWORD PTR x$11[rbp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR xi$18[rbp], xmm0
; Line 4005
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv242[rbp], rax
	movss	xmm2, DWORD PTR y2$7[rbp]
	movss	xmm1, DWORD PTR xi$18[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv240[rbp], rax
	movss	xmm0, DWORD PTR y1$6[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR xi$18[rbp]
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv238[rbp], rax
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$17[rbp]
	mov	r8, QWORD PTR tv240[rbp]
	mov	rdx, QWORD PTR tv238[rbp]
	mov	rcx, QWORD PTR tv242[rbp]
	call	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ; ImDrawList::AddLine
; Line 4006
	jmp	$LN2@EndColumns
$LN3@EndColumns:
; Line 4009
	cmp	DWORD PTR dragging_column$8[rbp], -1
	je	$LN16@EndColumns
; Line 4011
	mov	rax, QWORD PTR columns$[rbp]
	movzx	eax, BYTE PTR [rax+9]
	test	eax, eax
	jne	$LN17@EndColumns
; Line 4012
	mov	DWORD PTR n$19[rbp], 0
	jmp	SHORT $LN7@EndColumns
$LN5@EndColumns:
	mov	eax, DWORD PTR n$19[rbp]
	inc	eax
	mov	DWORD PTR n$19[rbp], eax
$LN7@EndColumns:
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+16]
	inc	eax
	cmp	DWORD PTR n$19[rbp], eax
	jge	SHORT $LN6@EndColumns
; Line 4013
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv263[rbp], rax
	mov	edx, DWORD PTR n$19[rbp]
	mov	rcx, QWORD PTR tv263[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv266[rbp], xmm0
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv256[rbp], rax
	mov	edx, DWORD PTR n$19[rbp]
	mov	rcx, QWORD PTR tv256[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR tv266[rbp]
	movss	DWORD PTR [rax+4], xmm0
	jmp	SHORT $LN5@EndColumns
$LN6@EndColumns:
$LN17@EndColumns:
; Line 4014
	mov	BYTE PTR is_being_resized$[rbp], 1
	mov	rax, QWORD PTR columns$[rbp]
	movzx	ecx, BYTE PTR is_being_resized$[rbp]
	mov	BYTE PTR [rax+9], cl
; Line 4015
	mov	edx, DWORD PTR dragging_column$8[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	call	?GetDraggedColumnOffset@@YAMPEAUImGuiOldColumns@@H@Z ; GetDraggedColumnOffset
	movss	DWORD PTR x$20[rbp], xmm0
; Line 4016
	movss	xmm1, DWORD PTR x$20[rbp]
	mov	ecx, DWORD PTR dragging_column$8[rbp]
	call	?SetColumnOffset@ImGui@@YAXHM@Z		; ImGui::SetColumnOffset
$LN16@EndColumns:
$LN10@EndColumns:
; Line 4019
	mov	rax, QWORD PTR columns$[rbp]
	movzx	ecx, BYTE PTR is_being_resized$[rbp]
	mov	BYTE PTR [rax+9], cl
; Line 4021
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+560]
	lea	rsi, QWORD PTR [rcx+576]
	mov	ecx, 16
	rep movsb
; Line 4022
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	lea	rdi, QWORD PTR [rax+576]
	lea	rsi, QWORD PTR [rcx+76]
	mov	ecx, 16
	rep movsb
; Line 4023
	mov	rax, QWORD PTR window$[rbp]
	mov	QWORD PTR [rax+424], 0
; Line 4024
	mov	rax, QWORD PTR window$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+284], xmm0
; Line 4025
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+280]
	mov	rax, QWORD PTR window$[rbp]
	addss	xmm0, DWORD PTR [rax+284]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 4026
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?EndColumns@ImGui@@YAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1200]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?EndColumns@ImGui@@YAXXZ ENDP				; ImGui::EndColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginColumns@ImGui@@YAXPEBDHH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
id$ = 68
columns$ = 104
column_padding$ = 132
half_clip_extend_x$ = 164
max_1$ = 196
max_2$ = 228
n$4 = 260
column$5 = 296
n$6 = 356
column$7 = 392
clip_x1$8 = 420
clip_x2$9 = 452
offset_0$ = 484
offset_1$ = 516
width$ = 548
$T10 = 964
tv223 = 996
tv200 = 996
tv177 = 996
tv161 = 996
tv305 = 1000
tv298 = 1000
tv287 = 1000
tv253 = 1000
tv245 = 1000
tv233 = 1000
tv218 = 1000
tv198 = 1000
tv182 = 1000
tv166 = 1000
__$ArrayPad$ = 1008
str_id$ = 1056
columns_count$ = 1064
flags$ = 1072
?BeginColumns@ImGui@@YAXPEBDHH@Z PROC			; ImGui::BeginColumns, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3821
$LN17:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1072				; 00000430H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3822
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3823
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3825
	cmp	DWORD PTR columns_count$[rbp], 1
	jge	SHORT $LN12@BeginColum
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginColumns@ImGui@@YAXPEBDHH@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GDAJJGIO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@BeginColum:
; Line 3826
	mov	rax, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+424], 0
	je	SHORT $LN13@BeginColum
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginColumns@ImGui@@YAXPEBDHH@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@BPFJENMI@?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO?$AAD?$AAC?$AA?4?$AAC?$AAu?$AAr?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@BeginColum:
; Line 3829
	mov	edx, DWORD PTR columns_count$[rbp]
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?GetColumnsID@ImGui@@YAIPEBDH@Z		; ImGui::GetColumnsID
	mov	DWORD PTR id$[rbp], eax
; Line 3830
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?FindOrCreateColumns@ImGui@@YAPEAUImGuiOldColumns@@PEAUImGuiWindow@@I@Z ; ImGui::FindOrCreateColumns
	mov	QWORD PTR columns$[rbp], rax
; Line 3831
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN14@BeginColum
	mov	eax, DWORD PTR ?__LINE__Var@?0??BeginColumns@ImGui@@YAXPEBDHH@Z@4JA
	add	eax, 10
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CE@IJEAECLN@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAI?$AAD?$AA?5?$AA?$DN?$AA?$DN?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@BeginColum:
; Line 3832
	mov	rax, QWORD PTR columns$[rbp]
	mov	DWORD PTR [rax+12], 0
; Line 3833
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR columns_count$[rbp]
	mov	DWORD PTR [rax+16], ecx
; Line 3834
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rax+4], ecx
; Line 3835
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	mov	QWORD PTR [rax+424], rcx
; Line 3837
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+220]
	movss	DWORD PTR [rax+36], xmm0
; Line 3838
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+240]
	movss	DWORD PTR [rax+40], xmm0
; Line 3839
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+44]
	lea	rsi, QWORD PTR [rcx+592]
	mov	ecx, 16
	rep movsb
; Line 3840
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+76]
	lea	rsi, QWORD PTR [rcx+576]
	mov	ecx, 16
	rep movsb
; Line 3841
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+576]
	lea	rsi, QWORD PTR [rcx+560]
	mov	ecx, 16
	rep movsb
; Line 3845
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5544]
	movss	DWORD PTR column_padding$[rbp], xmm0
; Line 3846
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+64]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+76]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR half_clip_extend_x$[rbp], xmm0
; Line 3847
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+568]
	addss	xmm0, DWORD PTR column_padding$[rbp]
	movss	DWORD PTR tv161[rbp], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR column_padding$[rbp]
	subss	xmm1, DWORD PTR [rax+64]
	movss	DWORD PTR tv166[rbp], xmm1
	xorps	xmm1, xmm1
	movss	xmm2, DWORD PTR tv166[rbp]
	movaps	xmm0, xmm2
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv161[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR max_1$[rbp], xmm0
; Line 3848
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+568]
	addss	xmm0, DWORD PTR half_clip_extend_x$[rbp]
	movss	DWORD PTR max_2$[rbp], xmm0
; Line 3849
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+280]
	subss	xmm0, DWORD PTR column_padding$[rbp]
	movss	DWORD PTR tv177[rbp], xmm0
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR column_padding$[rbp]
	subss	xmm1, DWORD PTR [rax+64]
	movss	DWORD PTR tv182[rbp], xmm1
	xorps	xmm1, xmm1
	movss	xmm2, DWORD PTR tv182[rbp]
	movaps	xmm0, xmm2
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR tv177[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR columns$[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 3850
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv200[rbp], xmm0
	movss	xmm1, DWORD PTR max_2$[rbp]
	movss	xmm0, DWORD PTR max_1$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	mov	rax, QWORD PTR window$[rbp]
	subss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv198[rbp], xmm0
	movss	xmm1, DWORD PTR tv200[rbp]
	movss	xmm0, DWORD PTR tv198[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR columns$[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 3851
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rcx+220]
	movss	DWORD PTR [rax+32], xmm0
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rcx+32]
	movss	DWORD PTR [rax+28], xmm0
; Line 3854
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+96], 0
	je	SHORT $LN8@BeginColum
	mov	eax, DWORD PTR columns_count$[rbp]
	inc	eax
	mov	rcx, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rcx+96], eax
	je	SHORT $LN8@BeginColum
; Line 3855
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv218[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv218[rbp]
	call	?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ; ImVector<ImGuiOldColumnData>::resize
$LN8@BeginColum:
; Line 3858
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+96], 0
	jne	SHORT $LN15@BeginColum
	mov	DWORD PTR tv223[rbp], 1
	jmp	SHORT $LN16@BeginColum
$LN15@BeginColum:
	mov	DWORD PTR tv223[rbp], 0
$LN16@BeginColum:
	mov	rax, QWORD PTR columns$[rbp]
	movzx	ecx, BYTE PTR tv223[rbp]
	mov	BYTE PTR [rax+8], cl
; Line 3859
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+96], 0
	jne	$LN9@BeginColum
; Line 3861
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv233[rbp], rax
	mov	eax, DWORD PTR columns_count$[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv233[rbp]
	call	?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ; ImVector<ImGuiOldColumnData>::reserve
; Line 3862
	mov	DWORD PTR n$4[rbp], 0
	jmp	SHORT $LN4@BeginColum
$LN2@BeginColum:
	mov	eax, DWORD PTR n$4[rbp]
	inc	eax
	mov	DWORD PTR n$4[rbp], eax
$LN4@BeginColum:
	mov	eax, DWORD PTR columns_count$[rbp]
	inc	eax
	cmp	DWORD PTR n$4[rbp], eax
	jge	SHORT $LN3@BeginColum
; Line 3864
	lea	rcx, QWORD PTR column$5[rbp]
	call	??0ImGuiOldColumnData@@QEAA@XZ		; ImGuiOldColumnData::ImGuiOldColumnData
; Line 3865
	cvtsi2ss xmm0, DWORD PTR n$4[rbp]
	cvtsi2ss xmm1, DWORD PTR columns_count$[rbp]
	divss	xmm0, xmm1
	movss	DWORD PTR column$5[rbp], xmm0
; Line 3866
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv245[rbp], rax
	lea	rdx, QWORD PTR column$5[rbp]
	mov	rcx, QWORD PTR tv245[rbp]
	call	?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z ; ImVector<ImGuiOldColumnData>::push_back
; Line 3867
	jmp	SHORT $LN2@BeginColum
$LN3@BeginColum:
$LN9@BeginColum:
; Line 3870
	mov	DWORD PTR n$6[rbp], 0
	jmp	SHORT $LN7@BeginColum
$LN5@BeginColum:
	mov	eax, DWORD PTR n$6[rbp]
	inc	eax
	mov	DWORD PTR n$6[rbp], eax
$LN7@BeginColum:
	mov	eax, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR n$6[rbp], eax
	jge	$LN6@BeginColum
; Line 3873
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv253[rbp], rax
	mov	edx, DWORD PTR n$6[rbp]
	mov	rcx, QWORD PTR tv253[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR column$7[rbp], rax
; Line 3874
	mov	ecx, DWORD PTR n$6[rbp]
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR clip_x1$8[rbp], xmm0
; Line 3875
	mov	eax, DWORD PTR n$6[rbp]
	inc	eax
	mov	ecx, eax
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@3f800000
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR clip_x2$9[rbp], xmm0
; Line 3876
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR clip_x2$9[rbp]
	movss	xmm2, DWORD PTR __real@ff7fffff
	movss	xmm1, DWORD PTR clip_x1$8[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rcx, QWORD PTR column$7[rbp]
	lea	rdi, QWORD PTR [rcx+12]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 3877
	mov	rax, QWORD PTR column$7[rbp]
	add	rax, 12
	mov	QWORD PTR tv287[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	add	rax, 592				; 00000250H
	mov	rdx, rax
	mov	rcx, QWORD PTR tv287[rbp]
	call	?ClipWithFull@ImRect@@QEAAXAEBU1@@Z	; ImRect::ClipWithFull
; Line 3878
	jmp	$LN5@BeginColum
$LN6@BeginColum:
; Line 3880
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+16], 1
	jle	SHORT $LN10@BeginColum
; Line 3882
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv298[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+16]
	inc	eax
	mov	r8d, eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv298[rbp]
	call	?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::Split
; Line 3883
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv305[rbp], rax
	mov	r8d, 1
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv305[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 3884
	xor	ecx, ecx
	call	?PushColumnClipRect@ImGui@@YAXH@Z	; ImGui::PushColumnClipRect
$LN10@BeginColum:
; Line 3888
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR [rax+12]
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	movss	DWORD PTR offset_0$[rbp], xmm0
; Line 3889
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	ecx, eax
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	movss	DWORD PTR offset_1$[rbp], xmm0
; Line 3890
	movss	xmm0, DWORD PTR offset_1$[rbp]
	subss	xmm0, DWORD PTR offset_0$[rbp]
	movss	DWORD PTR width$[rbp], xmm0
; Line 3891
	movss	xmm0, DWORD PTR width$[rbp]
	mulss	xmm0, DWORD PTR __real@3f266666
	call	?PushItemWidth@ImGui@@YAXM@Z		; ImGui::PushItemWidth
; Line 3892
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR column_padding$[rbp]
	subss	xmm0, DWORD PTR [rax+64]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+284], xmm0
; Line 3893
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+280]
	mov	rax, QWORD PTR window$[rbp]
	addss	xmm0, DWORD PTR [rax+284]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 3894
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR offset_1$[rbp]
	subss	xmm0, DWORD PTR column_padding$[rbp]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+568], xmm0
; Line 3895
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?BeginColumns@ImGui@@YAXPEBDHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1024]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?BeginColumns@ImGui@@YAXPEBDHH@Z ENDP			; ImGui::BeginColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z
_TEXT	SEGMENT
clip_rect_vec4$ = 8
__$ArrayPad$ = 232
window$ = 272
clip_rect$ = 280
?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z PROC ; ImGui::SetWindowClipRectBeforeSetChannel, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3634
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3635
	lea	rdx, QWORD PTR clip_rect_vec4$[rbp]
	mov	rcx, QWORD PTR clip_rect$[rbp]
	call	?ToVec4@ImRect@@QEBA?AUImVec4@@XZ	; ImRect::ToVec4
; Line 3636
	mov	rax, QWORD PTR window$[rbp]
	lea	rdi, QWORD PTR [rax+592]
	mov	rsi, QWORD PTR clip_rect$[rbp]
	mov	ecx, 16
	rep movsb
; Line 3637
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	lea	rcx, QWORD PTR clip_rect_vec4$[rbp]
	lea	rdi, QWORD PTR [rax+136]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 3638
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR [rcx+688]
	mov	ecx, DWORD PTR [rcx+88]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 16
	mov	rax, QWORD PTR [rax+96]
	lea	rdx, QWORD PTR clip_rect_vec4$[rbp]
	lea	rdi, QWORD PTR [rax+rcx]
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
; Line 3639
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+240]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ENDP ; ImGui::SetWindowClipRectBeforeSetChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ
_TEXT	SEGMENT
g$ = 8
?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ PROC	; ImGui::GetCurrentWindow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2317
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	BYTE PTR [rax+144], 1
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ENDP	; ImGui::GetCurrentWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ
_TEXT	SEGMENT
g$ = 8
?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ PROC	; ImGui::GetCurrentWindowRead, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2316
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ENDP	; ImGui::GetCurrentWindowRead
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ
_TEXT	SEGMENT
this$ = 224
?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ PROC ; ImGuiTableSettings::GetColumnSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2301
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnSettings@ImGuiTableSettings@@QEAAPEAUImGuiTableColumnSettings@@XZ ENDP ; ImGuiTableSettings::GetColumnSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTableSettings@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTableSettings@@QEAA@XZ PROC			; ImGuiTableSettings::ImGuiTableSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2300
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTableSettings@@QEAA@XZ ENDP			; ImGuiTableSettings::ImGuiTableSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTableColumnSettings@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTableColumnSettings@@QEAA@XZ PROC		; ImGuiTableColumnSettings::ImGuiTableColumnSettings, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2278
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
; Line 2280
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
; Line 2281
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
; Line 2282
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+8], -1
; Line 2283
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+10], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+9], -1
; Line 2284
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	and	al, 252					; 000000fcH
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+11], al
; Line 2285
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	or	al, 4
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+11], al
; Line 2286
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+11]
	and	al, 247					; 000000f7H
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+11], al
; Line 2287
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTableColumnSettings@@QEAA@XZ ENDP		; ImGuiTableColumnSettings::ImGuiTableColumnSettings
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTableTempData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImGuiTableTempData@@QEAA@XZ PROC			; ImGuiTableTempData::~ImGuiTableTempData, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	??1ImDrawListSplitter@@QEAA@XZ		; ImDrawListSplitter::~ImDrawListSplitter
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImGuiTableTempData@@QEAA@XZ ENDP			; ImGuiTableTempData::~ImGuiTableTempData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTableTempData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTableTempData@@QEAA@XZ PROC			; ImGuiTableTempData::ImGuiTableTempData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2263
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	??0ImDrawListSplitter@@QEAA@XZ		; ImDrawListSplitter::ImDrawListSplitter
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 80					; 00000050H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 96					; 00000060H
	mov	rcx, rax
	call	??0ImVec1@@QEAA@XZ			; ImVec1::ImVec1
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 112				; 00000070H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTableTempData@@QEAA@XZ ENDP			; ImGuiTableTempData::ImGuiTableTempData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA PROC	; `ImGuiTableTempData::ImGuiTableTempData'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 16
	call	??1ImDrawListSplitter@@QEAA@XZ		; ImDrawListSplitter::~ImDrawListSplitter
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImGuiTableTempData@@QEAA@XZ@4HA ENDP	; `ImGuiTableTempData::ImGuiTableTempData'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GImGuiTable@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GImGuiTable@@QEAAPEAXI@Z PROC			; ImGuiTable::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1ImGuiTable@@QEAA@XZ			; ImGuiTable::~ImGuiTable
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 520				; 00000208H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_GImGuiTable@@QEAAPEAXI@Z ENDP			; ImGuiTable::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTable@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImGuiTable@@QEAA@XZ PROC				; ImGuiTable::~ImGuiTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2240
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 448				; 000001c0H
	mov	rcx, rax
	call	??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ; ImVector<ImGuiTableColumnSortSpecs>::~ImVector<ImGuiTableColumnSortSpecs>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 408				; 00000198H
	mov	rcx, rax
	call	??1ImGuiTextBuffer@@QEAA@XZ
	npad	1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImGuiTable@@QEAA@XZ ENDP				; ImGuiTable::~ImGuiTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTable@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTable@@QEAA@XZ PROC				; ImGuiTable::ImGuiTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2239
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ ; ImSpan<ImGuiTableColumn>::ImSpan<ImGuiTableColumn>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	??0?$ImSpan@C@@QEAA@XZ			; ImSpan<signed char>::ImSpan<signed char>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	rcx, rax
	call	??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ ; ImSpan<ImGuiTableCellData>::ImSpan<ImGuiTableCellData>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 244				; 000000f4H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 260				; 00000104H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 276				; 00000114H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 292				; 00000124H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 308				; 00000134H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 324				; 00000144H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 340				; 00000154H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 356				; 00000164H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 372				; 00000174H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 408				; 00000198H
	mov	rcx, rax
	call	??0ImGuiTextBuffer@@QEAA@XZ		; ImGuiTextBuffer::ImGuiTextBuffer
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 432				; 000001b0H
	mov	rcx, rax
	call	??0ImGuiTableColumnSortSpecs@@QEAA@XZ	; ImGuiTableColumnSortSpecs::ImGuiTableColumnSortSpecs
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 448				; 000001c0H
	mov	rcx, rax
	call	??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ; ImVector<ImGuiTableColumnSortSpecs>::ImVector<ImGuiTableColumnSortSpecs>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 464				; 000001d0H
	mov	rcx, rax
	call	??0ImGuiTableSortSpecs@@QEAA@XZ		; ImGuiTableSortSpecs::ImGuiTableSortSpecs
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 520				; 00000208H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+112], -1
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTable@@QEAA@XZ ENDP				; ImGuiTable::ImGuiTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA PROC		; `ImGuiTable::ImGuiTable'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 408				; 00000198H
	call	??1ImGuiTextBuffer@@QEAA@XZ
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImGuiTable@@QEAA@XZ@4HA ENDP		; `ImGuiTable::ImGuiTable'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA PROC		; `ImGuiTable::ImGuiTable'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 448				; 000001c0H
	call	??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ; ImVector<ImGuiTableColumnSortSpecs>::~ImVector<ImGuiTableColumnSortSpecs>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0ImGuiTable@@QEAA@XZ@4HA ENDP		; `ImGuiTable::ImGuiTable'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z PROC ; ImVector<ImGuiTableColumnSortSpecs>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 12
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z ENDP ; ImVector<ImGuiTableColumnSortSpecs>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z PROC ; ImVector<ImGuiTableColumnSortSpecs>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z ; ImVector<ImGuiTableColumnSortSpecs>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z ; ImVector<ImGuiTableColumnSortSpecs>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXH@Z ENDP ; ImVector<ImGuiTableColumnSortSpecs>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z PROC ; ImVector<ImGuiTableColumnSortSpecs>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEBAHH@Z ENDP ; ImVector<ImGuiTableColumnSortSpecs>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ PROC ; ImVector<ImGuiTableColumnSortSpecs>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAAXXZ ENDP ; ImVector<ImGuiTableColumnSortSpecs>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ PROC ; ImVector<ImGuiTableColumnSortSpecs>::~ImVector<ImGuiTableColumnSortSpecs>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ENDP ; ImVector<ImGuiTableColumnSortSpecs>::~ImVector<ImGuiTableColumnSortSpecs>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ PROC ; ImVector<ImGuiTableColumnSortSpecs>::ImVector<ImGuiTableColumnSortSpecs>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImGuiTableColumnSortSpecs@@@@QEAA@XZ ENDP ; ImVector<ImGuiTableColumnSortSpecs>::ImVector<ImGuiTableColumnSortSpecs>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z
_TEXT	SEGMENT
p$ = 8
this$ = 256
i$ = 264
??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z PROC ; ImSpan<ImGuiTableCellData>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 571
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 571				; 0000023bH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	mov	rax, QWORD PTR p$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z ENDP ; ImSpan<ImGuiTableCellData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
data_end$ = 240
?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z PROC ; ImSpan<ImGuiTableCellData>::set, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 568
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data_end$[rbp]
	mov	QWORD PTR [rax+8], rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set@?$ImSpan@UImGuiTableCellData@@@@QEAAXPEAUImGuiTableCellData@@0@Z ENDP ; ImSpan<ImGuiTableCellData>::set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ PROC		; ImSpan<ImGuiTableCellData>::ImSpan<ImGuiTableCellData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 563
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImSpan@UImGuiTableCellData@@@@QEAA@XZ ENDP		; ImSpan<ImGuiTableCellData>::ImSpan<ImGuiTableCellData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImSpan@C@@QEAAAEACH@Z
_TEXT	SEGMENT
p$ = 8
this$ = 256
i$ = 264
??A?$ImSpan@C@@QEAAAEACH@Z PROC				; ImSpan<signed char>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 571
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR p$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 571				; 0000023bH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	mov	rax, QWORD PTR p$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImSpan@C@@QEAAAEACH@Z ENDP				; ImSpan<signed char>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set@?$ImSpan@C@@QEAAXPEAC0@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
data_end$ = 240
?set@?$ImSpan@C@@QEAAXPEAC0@Z PROC			; ImSpan<signed char>::set, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 568
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data_end$[rbp]
	mov	QWORD PTR [rax+8], rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set@?$ImSpan@C@@QEAAXPEAC0@Z ENDP			; ImSpan<signed char>::set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImSpan@C@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImSpan@C@@QEAA@XZ PROC				; ImSpan<signed char>::ImSpan<signed char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 563
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImSpan@C@@QEAA@XZ ENDP				; ImSpan<signed char>::ImSpan<signed char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z
_TEXT	SEGMENT
off$ = 8
this$ = 256
it$ = 264
?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z PROC ; ImSpan<ImGuiTableColumn>::index_from_ptr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 580
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN3@index_from
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN4@index_from
$LN3@index_from:
	mov	r8d, 580				; 00000244H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@OANBFKML@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@index_from:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR it$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 104				; 00000068H
	idiv	rcx
	mov	QWORD PTR off$[rbp], rax
	mov	eax, DWORD PTR off$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?index_from_ptr@?$ImSpan@UImGuiTableColumn@@@@QEBAHPEBUImGuiTableColumn@@@Z ENDP ; ImSpan<ImGuiTableColumn>::index_from_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z
_TEXT	SEGMENT
p$ = 8
this$ = 256
i$ = 264
??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z PROC ; ImSpan<ImGuiTableColumn>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 572
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 104				; 00000068H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR p$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 572				; 0000023cH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	mov	rax, QWORD PTR p$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImSpan@UImGuiTableColumn@@@@QEBAAEBUImGuiTableColumn@@H@Z ENDP ; ImSpan<ImGuiTableColumn>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z
_TEXT	SEGMENT
p$ = 8
this$ = 256
i$ = 264
??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z PROC ; ImSpan<ImGuiTableColumn>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 571
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 104				; 00000068H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR p$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 571				; 0000023bH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@DHFOGPCD@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAp?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	mov	rax, QWORD PTR p$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ENDP ; ImSpan<ImGuiTableColumn>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ PROC	; ImSpan<ImGuiTableColumn>::size, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 569
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	rax, QWORD PTR [rax+8]
	sub	rax, rcx
	cdq
	mov	ecx, 104				; 00000068H
	idiv	rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?size@?$ImSpan@UImGuiTableColumn@@@@QEBAHXZ ENDP	; ImSpan<ImGuiTableColumn>::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z
_TEXT	SEGMENT
this$ = 224
data$ = 232
data_end$ = 240
?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z PROC ; ImSpan<ImGuiTableColumn>::set, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 568
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR data_end$[rbp]
	mov	QWORD PTR [rax+8], rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?set@?$ImSpan@UImGuiTableColumn@@@@QEAAXPEAUImGuiTableColumn@@0@Z ENDP ; ImSpan<ImGuiTableColumn>::set
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ PROC		; ImSpan<ImGuiTableColumn>::ImSpan<ImGuiTableColumn>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 563
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImSpan@UImGuiTableColumn@@@@QEAA@XZ ENDP		; ImSpan<ImGuiTableColumn>::ImSpan<ImGuiTableColumn>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTableColumn@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTableColumn@@QEAA@XZ PROC			; ImGuiTableColumn::ImGuiTableColumn, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 2111
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
; Line 2113
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 104				; 00000068H
	rep stosb
; Line 2114
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+24], xmm0
; Line 2115
	mov	eax, -1
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 2116
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+83], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+82], -1
; Line 2117
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+85], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+84], -1
; Line 2118
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+86], -1
; Line 2119
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 252					; 000000fcH
	mov	rcx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rcx+101], al
; Line 2120
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+89], 255			; 000000ffH
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+88], 255			; 000000ffH
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+87], 255			; 000000ffH
; Line 2121
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTableColumn@@QEAA@XZ ENDP			; ImGuiTableColumn::ImGuiTableColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ
_TEXT	SEGMENT
this$ = 224
__$ReturnUdt$ = 232
?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ PROC		; ImGuiWindow::Rect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1948
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR [rcx+28]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	addss	xmm1, DWORD PTR [rcx+24]
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm2, DWORD PTR [rax+20]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Rect@ImGuiWindow@@QEBA?AUImRect@@XZ ENDP		; ImGuiWindow::Rect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z PROC ; ImVector<ImGuiOldColumns>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z ; ImVector<ImGuiOldColumns>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z ; ImVector<ImGuiOldColumns>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImGuiOldColumns@@@@QEAAXAEBUImGuiOldColumns@@@Z ENDP ; ImVector<ImGuiOldColumns>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z PROC	; ImVector<ImGuiOldColumns>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiOldColumns@@@@QEAAXH@Z ENDP	; ImVector<ImGuiOldColumns>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z PROC ; ImVector<ImGuiOldColumns>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiOldColumns@@@@QEBAHH@Z ENDP ; ImVector<ImGuiOldColumns>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ PROC ; ImVector<ImGuiOldColumns>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@XZ ENDP ; ImVector<ImGuiOldColumns>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z PROC ; ImVector<ImGuiOldColumns>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiOldColumns@@@@QEAAAEAUImGuiOldColumns@@H@Z ENDP ; ImVector<ImGuiOldColumns>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ PROC	; ImChunkStream<ImGuiTableSettings>::~ImChunkStream<ImGuiTableSettings>, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??1?$ImVector@D@@QEAA@XZ		; ImVector<char>::~ImVector<char>
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ ENDP	; ImChunkStream<ImGuiTableSettings>::~ImChunkStream<ImGuiTableSettings>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ PROC	; ImChunkStream<ImGuiTableSettings>::ImChunkStream<ImGuiTableSettings>, COMDAT
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@D@@QEAA@XZ		; ImVector<char>::ImVector<char>
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImChunkStream@UImGuiTableSettings@@@@QEAA@XZ ENDP	; ImChunkStream<ImGuiTableSettings>::ImChunkStream<ImGuiTableSettings>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z
_TEXT	SEGMENT
tv69 = 192
this$ = 240
rhs$ = 248
?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z PROC ; ImChunkStream<ImGuiTableSettings>::swap, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 661
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR tv69[rbp]
	call	?swap@?$ImVector@D@@QEAAXAEAU1@@Z	; ImVector<char>::swap
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?swap@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXAEAU1@@Z ENDP ; ImChunkStream<ImGuiTableSettings>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z
_TEXT	SEGMENT
this$ = 224
off$ = 232
?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z PROC ; ImChunkStream<ImGuiTableSettings>::ptr_from_offset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 660
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR off$[rbp], 4
	jl	SHORT $LN3@ptr_from_o
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR off$[rbp], eax
	jl	SHORT $LN4@ptr_from_o
$LN3@ptr_from_o:
	mov	r8d, 660				; 00000294H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@EPOMENA@?$AAo?$AAf?$AAf?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAf?$AAf@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@ptr_from_o:
	movsxd	rax, DWORD PTR off$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ptr_from_offset@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@H@Z ENDP ; ImChunkStream<ImGuiTableSettings>::ptr_from_offset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z
_TEXT	SEGMENT
off$ = 8
this$ = 256
p$ = 264
?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z PROC ; ImChunkStream<ImGuiTableSettings>::offset_from_ptr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 659
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@offset_fro
	mov	rcx, QWORD PTR this$[rbp]
	call	?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::end
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@offset_fro
$LN3@offset_fro:
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DE@BDDBABLK@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@offset_fro:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR p$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR off$[rbp], rax
	mov	eax, DWORD PTR off$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?offset_from_ptr@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ENDP ; ImChunkStream<ImGuiTableSettings>::offset_from_ptr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ
_TEXT	SEGMENT
this$ = 224
?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ PROC ; ImChunkStream<ImGuiTableSettings>::end, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 658
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ENDP ; ImChunkStream<ImGuiTableSettings>::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z
_TEXT	SEGMENT
this$ = 224
p$ = 232
?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z PROC ; ImChunkStream<ImGuiTableSettings>::chunk_size, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 657
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR p$[rbp]
	mov	eax, DWORD PTR [rcx+rax]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ENDP ; ImChunkStream<ImGuiTableSettings>::chunk_size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z
_TEXT	SEGMENT
HDR_SZ$ = 8
this$ = 256
p$ = 264
?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z PROC ; ImChunkStream<ImGuiTableSettings>::next_chunk, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 656
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	QWORD PTR HDR_SZ$[rbp], 4
	mov	rcx, QWORD PTR this$[rbp]
	call	?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::begin
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@next_chunk
	mov	rcx, QWORD PTR this$[rbp]
	call	?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::end
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN5@next_chunk
$LN4@next_chunk:
	mov	r8d, 656				; 00000290H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DE@BDDBABLK@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@next_chunk:
	mov	rdx, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?chunk_size@?$ImChunkStream@UImGuiTableSettings@@@@QEAAHPEBUImGuiTableSettings@@@Z ; ImChunkStream<ImGuiTableSettings>::chunk_size
	cdqe
	mov	rcx, QWORD PTR p$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::end
	add	rax, QWORD PTR HDR_SZ$[rbp]
	cmp	QWORD PTR p$[rbp], rax
	jne	SHORT $LN2@next_chunk
	xor	eax, eax
	jmp	SHORT $LN1@next_chunk
$LN2@next_chunk:
	mov	rcx, QWORD PTR this$[rbp]
	call	?end@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ; ImChunkStream<ImGuiTableSettings>::end
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN6@next_chunk
	mov	r8d, 656				; 00000290H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BE@OEELIPPM@?$AAp?$AA?5?$AA?$DM?$AA?5?$AAe?$AAn?$AAd?$AA?$CI?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@next_chunk:
	mov	rax, QWORD PTR p$[rbp]
$LN1@next_chunk:
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?next_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@PEAU2@@Z ENDP ; ImChunkStream<ImGuiTableSettings>::next_chunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ
_TEXT	SEGMENT
HDR_SZ$ = 8
this$ = 256
?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ PROC ; ImChunkStream<ImGuiTableSettings>::begin, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 655
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	QWORD PTR HDR_SZ$[rbp], 4
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN2@begin
	xor	eax, eax
	jmp	SHORT $LN1@begin
$LN2@begin:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	add	rax, QWORD PTR HDR_SZ$[rbp]
$LN1@begin:
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?begin@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@XZ ENDP ; ImChunkStream<ImGuiTableSettings>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z
_TEXT	SEGMENT
HDR_SZ$ = 8
off$ = 36
tv74 = 248
this$ = 288
sz$ = 296
?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z PROC ; ImChunkStream<ImGuiTableSettings>::alloc_chunk, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 654
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	QWORD PTR HDR_SZ$[rbp], 4
	mov	rax, QWORD PTR HDR_SZ$[rbp]
	mov	rcx, QWORD PTR sz$[rbp]
	lea	rax, QWORD PTR [rax+rcx+3]
	mov	ecx, -4					; fffffffcH
	and	rax, rcx
	mov	QWORD PTR sz$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR off$[rbp], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv74[rbp], rax
	mov	eax, DWORD PTR sz$[rbp]
	mov	ecx, DWORD PTR off$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv74[rbp]
	call	?resize@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::resize
	movsxd	rax, DWORD PTR off$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, DWORD PTR sz$[rbp]
	mov	DWORD PTR [rax+rcx], edx
	movsxd	rax, DWORD PTR off$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR HDR_SZ$[rbp]
	add	rax, rcx
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?alloc_chunk@?$ImChunkStream@UImGuiTableSettings@@@@QEAAPEAUImGuiTableSettings@@_K@Z ENDP ; ImChunkStream<ImGuiTableSettings>::alloc_chunk
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ PROC ; ImChunkStream<ImGuiTableSettings>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 651
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?clear@?$ImVector@D@@QEAAXXZ		; ImVector<char>::clear
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImChunkStream@UImGuiTableSettings@@@@QEAAXXZ ENDP ; ImChunkStream<ImGuiTableSettings>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z PROC ; ImVector<ImGuiSettingsHandler>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z ; ImVector<ImGuiSettingsHandler>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z ; ImVector<ImGuiSettingsHandler>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 72					; 00000048H
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImGuiSettingsHandler@@@@QEAAXAEBUImGuiSettingsHandler@@@Z ENDP ; ImVector<ImGuiSettingsHandler>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z PROC ; ImVector<ImGuiSettingsHandler>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 72				; 00000048H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiSettingsHandler@@@@QEAAXH@Z ENDP ; ImVector<ImGuiSettingsHandler>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z PROC ; ImVector<ImGuiSettingsHandler>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiSettingsHandler@@@@QEBAHH@Z ENDP ; ImVector<ImGuiSettingsHandler>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z PROC ; ImVector<ImGuiTableTempData>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 112				; 00000070H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 112				; 00000070H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z ENDP ; ImVector<ImGuiTableTempData>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z PROC ; ImVector<ImGuiTableTempData>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1709
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN5@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z ; ImVector<ImGuiTableTempData>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiTableTempData@@@@QEAAXH@Z ; ImVector<ImGuiTableTempData>::reserve
$LN5@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN6@resize
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR n$1[rbp], eax
	jmp	SHORT $LN4@resize
$LN2@resize:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@resize:
	mov	eax, DWORD PTR new_size$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@resize
	movsxd	rax, DWORD PTR n$1[rbp]
	imul	rax, rax, 112				; 00000070H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 112				; 00000070H
	rep movsb
	jmp	SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiTableTempData@@@@QEAAXHAEBUImGuiTableTempData@@@Z ENDP ; ImVector<ImGuiTableTempData>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z PROC ; ImVector<ImGuiTableTempData>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiTableTempData@@@@QEBAHH@Z ENDP ; ImVector<ImGuiTableTempData>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z PROC ; ImVector<ImGuiTableTempData>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 112				; 00000070H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z ENDP ; ImVector<ImGuiTableTempData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z
_TEXT	SEGMENT
idx$ = 4
tv70 = 216
this$ = 256
n$ = 264
?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z PROC ; ImPool<ImGuiTable>::TryGetMapData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 635
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv70[rbp], rax
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR tv70[rbp]
	call	??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z ; ImVector<ImGuiStorage::ImGuiStoragePair>::operator[]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR idx$[rbp], eax
	cmp	DWORD PTR idx$[rbp], -1
	jne	SHORT $LN2@TryGetMapD
	xor	eax, eax
	jmp	SHORT $LN1@TryGetMapD
$LN2@TryGetMapD:
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ; ImPool<ImGuiTable>::GetByIndex
$LN1@TryGetMapD:
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?TryGetMapData@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ENDP ; ImPool<ImGuiTable>::TryGetMapData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ PROC	; ImPool<ImGuiTable>::GetMapSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 634
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+16]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetMapSize@?$ImPool@UImGuiTable@@@@QEBAHXZ ENDP	; ImPool<ImGuiTable>::GetMapSize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z
_TEXT	SEGMENT
tv89 = 192
tv82 = 192
tv69 = 192
tv79 = 200
tv74 = 200
this$ = 240
key$ = 248
idx$ = 256
?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z PROC		; ImPool<ImGuiTable>::Remove, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 627
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	mov	QWORD PTR tv74[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv74[rbp]
	call	??_GImGuiTable@@QEAAPEAXI@Z
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR tv82[rbp], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv79[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv79[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	mov	ecx, DWORD PTR tv82[rbp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR idx$[rbp]
	mov	DWORD PTR [rax+32], ecx
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv89[rbp], rax
	mov	r8d, -1
	mov	edx, DWORD PTR key$[rbp]
	mov	rcx, QWORD PTR tv89[rbp]
	call	?SetInt@ImGuiStorage@@QEAAXIH@Z		; ImGuiStorage::SetInt
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+36]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+36], eax
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z ENDP		; ImPool<ImGuiTable>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z
_TEXT	SEGMENT
this$ = 224
key$ = 232
p$ = 240
?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z PROC ; ImPool<ImGuiTable>::Remove, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 626
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rdx, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::GetIndex
	mov	r8d, eax
	mov	edx, DWORD PTR key$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?Remove@?$ImPool@UImGuiTable@@@@QEAAXIH@Z ; ImPool<ImGuiTable>::Remove
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Remove@?$ImPool@UImGuiTable@@@@QEAAXIPEBUImGuiTable@@@Z ENDP ; ImPool<ImGuiTable>::Remove
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ
_TEXT	SEGMENT
idx$ = 4
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
tv148 = 376
tv95 = 376
tv86 = 376
tv75 = 376
tv139 = 384
this$ = 432
?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ PROC ; ImPool<ImGuiTable>::Add, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 625
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR idx$[rbp], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR idx$[rbp], eax
	jne	SHORT $LN2@Add
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv75[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv75[rbp]
	call	?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z ; ImVector<ImGuiTable>::resize
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+32], eax
	jmp	SHORT $LN3@Add
$LN2@Add:
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv86[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv86[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	mov	rcx, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx+32], eax
$LN3@Add:
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv95[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv95[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	mov	QWORD PTR $T3[rbp], rax
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR $T4[rbp], rax
	mov	r8, QWORD PTR $T3[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 520				; 00000208H
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T2[rbp], rax
	cmp	QWORD PTR $T2[rbp], 0
	je	SHORT $LN5@Add
	mov	rcx, QWORD PTR $T2[rbp]
	call	??0ImGuiTable@@QEAA@XZ			; ImGuiTable::ImGuiTable
	mov	QWORD PTR tv139[rbp], rax
	jmp	SHORT $LN6@Add
$LN5@Add:
	mov	QWORD PTR tv139[rbp], 0
$LN6@Add:
	mov	rax, QWORD PTR tv139[rbp]
	mov	QWORD PTR $T1[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+36], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv148[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv148[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	lea	rsp, QWORD PTR [rbp+408]
	pop	rdi
	pop	rbp
	ret	0
?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ ENDP ; ImPool<ImGuiTable>::Add
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
idx$ = 4
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
tv148 = 376
tv95 = 376
tv86 = 376
tv75 = 376
tv139 = 384
this$ = 432
?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA PROC ; `ImPool<ImGuiTable>::Add'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR $T3[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ@4HA ENDP ; `ImPool<ImGuiTable>::Add'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z
_TEXT	SEGMENT
p_idx$ = 8
tv77 = 216
tv70 = 216
this$ = 256
key$ = 264
?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z PROC ; ImPool<ImGuiTable>::GetOrAddByKey, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 622
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv70[rbp], rax
	mov	r8d, -1
	mov	edx, DWORD PTR key$[rbp]
	mov	rcx, QWORD PTR tv70[rbp]
	call	?GetIntRef@ImGuiStorage@@QEAAPEAHIH@Z	; ImGuiStorage::GetIntRef
	mov	QWORD PTR p_idx$[rbp], rax
	mov	rax, QWORD PTR p_idx$[rbp]
	cmp	DWORD PTR [rax], -1
	je	SHORT $LN2@GetOrAddBy
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv77[rbp], rax
	mov	rax, QWORD PTR p_idx$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv77[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	jmp	SHORT $LN1@GetOrAddBy
$LN2@GetOrAddBy:
	mov	rax, QWORD PTR p_idx$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+32]
	mov	DWORD PTR [rax], ecx
	mov	rcx, QWORD PTR this$[rbp]
	call	?Add@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@XZ ; ImPool<ImGuiTable>::Add
$LN1@GetOrAddBy:
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetOrAddByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z ENDP ; ImPool<ImGuiTable>::GetOrAddByKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z
_TEXT	SEGMENT
this$ = 224
p$ = 232
?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z PROC ; ImPool<ImGuiTable>::GetIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 621
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN3@GetIndex
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 520				; 00000208H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR p$[rbp], rax
	jb	SHORT $LN4@GetIndex
$LN3@GetIndex:
	mov	r8d, 621				; 0000026dH
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@BIEMKEOL@?$AAp?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GetIndex:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR p$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 520				; 00000208H
	idiv	rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ENDP ; ImPool<ImGuiTable>::GetIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z
_TEXT	SEGMENT
tv69 = 192
this$ = 240
n$ = 248
?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z PROC ; ImPool<ImGuiTable>::GetByIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 620
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv69[rbp], rax
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ENDP ; ImPool<ImGuiTable>::GetByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z
_TEXT	SEGMENT
idx$ = 4
tv77 = 216
tv70 = 216
tv78 = 224
this$ = 272
key$ = 280
?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z PROC ; ImPool<ImGuiTable>::GetByKey, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 619
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv70[rbp], rax
	mov	r8d, -1
	mov	edx, DWORD PTR key$[rbp]
	mov	rcx, QWORD PTR tv70[rbp]
	call	?GetInt@ImGuiStorage@@QEBAHIH@Z		; ImGuiStorage::GetInt
	mov	DWORD PTR idx$[rbp], eax
	cmp	DWORD PTR idx$[rbp], -1
	je	SHORT $LN3@GetByKey
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv77[rbp], rax
	mov	edx, DWORD PTR idx$[rbp]
	mov	rcx, QWORD PTR tv77[rbp]
	call	??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ; ImVector<ImGuiTable>::operator[]
	mov	QWORD PTR tv78[rbp], rax
	jmp	SHORT $LN4@GetByKey
$LN3@GetByKey:
	mov	QWORD PTR tv78[rbp], 0
$LN4@GetByKey:
	mov	rax, QWORD PTR tv78[rbp]
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?GetByKey@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@I@Z ENDP ; ImPool<ImGuiTable>::GetByKey
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z PROC	; ImVector<ImGuiTable>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 520				; 00000208H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 520				; 00000208H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z ENDP	; ImVector<ImGuiTable>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z PROC		; ImVector<ImGuiTable>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z ; ImVector<ImGuiTable>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiTable@@@@QEAAXH@Z ; ImVector<ImGuiTable>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiTable@@@@QEAAXH@Z ENDP		; ImVector<ImGuiTable>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z PROC	; ImVector<ImGuiTable>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiTable@@@@QEBAHH@Z ENDP	; ImVector<ImGuiTable>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z PROC ; ImVector<ImGuiTable>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 520				; 00000208H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiTable@@@@QEAAAEAUImGuiTable@@H@Z ENDP ; ImVector<ImGuiTable>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiSettingsHandler@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiSettingsHandler@@QEAA@XZ PROC			; ImGuiSettingsHandler::ImGuiSettingsHandler, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1320
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 72					; 00000048H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiSettingsHandler@@QEAA@XZ ENDP			; ImGuiSettingsHandler::ImGuiSettingsHandler
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiOldColumns@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImGuiOldColumns@@QEAA@XZ PROC			; ImGuiOldColumns::~ImGuiOldColumns, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 112				; 00000070H
	mov	rcx, rax
	call	??1ImDrawListSplitter@@QEAA@XZ		; ImDrawListSplitter::~ImDrawListSplitter
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 96					; 00000060H
	mov	rcx, rax
	call	??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ ; ImVector<ImGuiOldColumnData>::~ImVector<ImGuiOldColumnData>
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImGuiOldColumns@@QEAA@XZ ENDP			; ImGuiOldColumns::~ImGuiOldColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiOldColumns@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiOldColumns@@QEAA@XZ PROC			; ImGuiOldColumns::ImGuiOldColumns, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1238
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 60					; 0000003cH
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 76					; 0000004cH
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 96					; 00000060H
	mov	rcx, rax
	call	??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ ; ImVector<ImGuiOldColumnData>::ImVector<ImGuiOldColumnData>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 112				; 00000070H
	mov	rcx, rax
	call	??0ImDrawListSplitter@@QEAA@XZ		; ImDrawListSplitter::ImDrawListSplitter
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 136				; 00000088H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiOldColumns@@QEAA@XZ ENDP			; ImGuiOldColumns::ImGuiOldColumns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA PROC		; `ImGuiOldColumns::ImGuiOldColumns'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 96					; 00000060H
	call	??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ ; ImVector<ImGuiOldColumnData>::~ImVector<ImGuiOldColumnData>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImGuiOldColumns@@QEAA@XZ@4HA ENDP		; `ImGuiOldColumns::ImGuiOldColumns'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z PROC ; ImVector<ImGuiOldColumnData>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z ; ImVector<ImGuiOldColumnData>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ; ImVector<ImGuiOldColumnData>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 28
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImGuiOldColumnData@@@@QEAAXAEBUImGuiOldColumnData@@@Z ENDP ; ImVector<ImGuiOldColumnData>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z PROC ; ImVector<ImGuiOldColumnData>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 28
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ENDP ; ImVector<ImGuiOldColumnData>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z PROC	; ImVector<ImGuiOldColumnData>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z ; ImVector<ImGuiOldColumnData>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ; ImVector<ImGuiOldColumnData>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImGuiOldColumnData@@@@QEAAXH@Z ENDP	; ImVector<ImGuiOldColumnData>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z PROC ; ImVector<ImGuiOldColumnData>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImGuiOldColumnData@@@@QEBAHH@Z ENDP ; ImVector<ImGuiOldColumnData>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z PROC ; ImVector<ImGuiOldColumnData>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ENDP ; ImVector<ImGuiOldColumnData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ PROC	; ImVector<ImGuiOldColumnData>::~ImVector<ImGuiOldColumnData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ ENDP	; ImVector<ImGuiOldColumnData>::~ImVector<ImGuiOldColumnData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ PROC	; ImVector<ImGuiOldColumnData>::ImVector<ImGuiOldColumnData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImGuiOldColumnData@@@@QEAA@XZ ENDP	; ImVector<ImGuiOldColumnData>::ImVector<ImGuiOldColumnData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiOldColumnData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiOldColumnData@@QEAA@XZ PROC			; ImGuiOldColumnData::ImGuiOldColumnData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 1217
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 12
	mov	rcx, rax
	call	??0ImRect@@QEAA@XZ			; ImRect::ImRect
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 28
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiOldColumnData@@QEAA@XZ ENDP			; ImGuiOldColumnData::ImGuiOldColumnData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@H@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@H@@YAHHH@Z PROC				; ImMin<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR rhs$[rbp]
	cmp	DWORD PTR lhs$[rbp], eax
	jge	SHORT $LN3@ImMin
	mov	eax, DWORD PTR lhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	eax, DWORD PTR rhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
$LN4@ImMin:
	mov	eax, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@H@@YAHHH@Z ENDP				; ImMin<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBitArraySetBitRange@@YAXPEAIHH@Z
_TEXT	SEGMENT
a_mod$1 = 4
b_mod$2 = 36
mask$3 = 68
tv70 = 276
tv134 = 280
arr$ = 320
n$ = 328
n2$ = 336
?ImBitArraySetBitRange@@YAXPEAIHH@Z PROC		; ImBitArraySetBitRange, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 515
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
; Line 516
	mov	eax, DWORD PTR n2$[rbp]
	dec	eax
	mov	DWORD PTR n2$[rbp], eax
$LN2@ImBitArray:
; Line 517
	mov	eax, DWORD PTR n2$[rbp]
	cmp	DWORD PTR n$[rbp], eax
	jg	$LN3@ImBitArray
; Line 519
	mov	eax, DWORD PTR n$[rbp]
	and	eax, 31
	mov	DWORD PTR a_mod$1[rbp], eax
; Line 520
	mov	eax, DWORD PTR n$[rbp]
	or	eax, 31
	cmp	DWORD PTR n2$[rbp], eax
	jle	SHORT $LN5@ImBitArray
	mov	DWORD PTR tv70[rbp], 31
	jmp	SHORT $LN6@ImBitArray
$LN5@ImBitArray:
	mov	eax, DWORD PTR n2$[rbp]
	and	eax, 31
	mov	DWORD PTR tv70[rbp], eax
$LN6@ImBitArray:
	mov	eax, DWORD PTR tv70[rbp]
	inc	eax
	mov	DWORD PTR b_mod$2[rbp], eax
; Line 521
	mov	eax, DWORD PTR b_mod$2[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv134[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv134[rbp]
	shl	rax, cl
	dec	rax
	mov	ecx, DWORD PTR a_mod$1[rbp]
	mov	edx, 1
	shl	rdx, cl
	mov	rcx, rdx
	dec	rcx
	not	ecx
	and	eax, ecx
	mov	DWORD PTR mask$3[rbp], eax
; Line 522
	mov	eax, DWORD PTR n$[rbp]
	sar	eax, 5
	cdqe
	mov	rcx, QWORD PTR arr$[rbp]
	mov	edx, DWORD PTR mask$3[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	or	eax, edx
	mov	ecx, DWORD PTR n$[rbp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR arr$[rbp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 523
	mov	eax, DWORD PTR n$[rbp]
	add	eax, 32					; 00000020H
	and	eax, -32				; ffffffffffffffe0H
	mov	DWORD PTR n$[rbp], eax
; Line 524
	jmp	$LN2@ImBitArray
$LN3@ImBitArray:
; Line 525
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ImBitArraySetBitRange@@YAXPEAIHH@Z ENDP		; ImBitArraySetBitRange
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBitArraySetBit@@YAXPEAIH@Z
_TEXT	SEGMENT
mask$ = 4
tv79 = 212
arr$ = 256
n$ = 264
?ImBitArraySetBit@@YAXPEAIH@Z PROC			; ImBitArraySetBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR n$[rbp]
	and	eax, 31
	mov	ecx, 1
	mov	DWORD PTR tv79[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv79[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	eax, DWORD PTR n$[rbp]
	sar	eax, 5
	cdqe
	mov	rcx, QWORD PTR arr$[rbp]
	mov	edx, DWORD PTR mask$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	or	eax, edx
	mov	ecx, DWORD PTR n$[rbp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR arr$[rbp]
	mov	DWORD PTR [rdx+rcx*4], eax
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImBitArraySetBit@@YAXPEAIH@Z ENDP			; ImBitArraySetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBitArrayClearBit@@YAXPEAIH@Z
_TEXT	SEGMENT
mask$ = 4
tv80 = 212
arr$ = 256
n$ = 264
?ImBitArrayClearBit@@YAXPEAIH@Z PROC			; ImBitArrayClearBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 512
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR n$[rbp]
	and	eax, 31
	mov	ecx, 1
	mov	DWORD PTR tv80[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv80[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	eax, DWORD PTR mask$[rbp]
	not	eax
	mov	ecx, DWORD PTR n$[rbp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR arr$[rbp]
	mov	ecx, DWORD PTR [rdx+rcx*4]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR n$[rbp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR arr$[rbp]
	mov	DWORD PTR [rdx+rcx*4], eax
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImBitArrayClearBit@@YAXPEAIH@Z ENDP			; ImBitArrayClearBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBitArrayTestBit@@YA_NPEBIH@Z
_TEXT	SEGMENT
mask$ = 4
tv78 = 212
tv72 = 212
arr$ = 256
n$ = 264
?ImBitArrayTestBit@@YA_NPEBIH@Z PROC			; ImBitArrayTestBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 511
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR n$[rbp]
	and	eax, 31
	mov	ecx, 1
	mov	DWORD PTR tv78[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv78[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	eax, DWORD PTR n$[rbp]
	sar	eax, 5
	cdqe
	mov	rcx, QWORD PTR arr$[rbp]
	mov	edx, DWORD PTR mask$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	test	eax, eax
	je	SHORT $LN3@ImBitArray
	mov	DWORD PTR tv72[rbp], 1
	jmp	SHORT $LN4@ImBitArray
$LN3@ImBitArray:
	mov	DWORD PTR tv72[rbp], 0
$LN4@ImBitArray:
	movzx	eax, BYTE PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImBitArrayTestBit@@YA_NPEBIH@Z ENDP			; ImBitArrayTestBit
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ToVec4@ImRect@@QEBA?AUImVec4@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?ToVec4@ImRect@@QEBA?AUImVec4@@XZ PROC			; ImRect::ToVec4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 506
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm3, DWORD PTR [rax+8]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ToVec4@ImRect@@QEBA?AUImVec4@@XZ ENDP			; ImRect::ToVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ClipWithFull@ImRect@@QEAAXAEBU1@@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 72
this$ = 96
r$ = 104
?ClipWithFull@ImRect@@QEAAXAEBU1@@Z PROC		; ImRect::ClipWithFull, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 503
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR r$[rbp]
	mov	r9, QWORD PTR [rdx+8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rbp]
	call	?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z	; ImClamp
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 8
	mov	rdx, QWORD PTR r$[rbp]
	mov	r9, QWORD PTR [rdx+8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rbp]
	call	?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z	; ImClamp
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+8], rax
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ClipWithFull@ImRect@@QEAAXAEBU1@@Z ENDP		; ImRect::ClipWithFull
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ClipWith@ImRect@@QEAAXAEBU1@@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 72
this$ = 96
r$ = 104
?ClipWith@ImRect@@QEAAXAEBU1@@Z PROC			; ImRect::ClipWith, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 502
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T1[rbp]
	call	?ImMax@@YA?AUImVec2@@AEBU1@0@Z		; ImMax
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR r$[rbp]
	add	rax, 8
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rbp]
	call	?ImMin@@YA?AUImVec2@@AEBU1@0@Z		; ImMin
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+8], rax
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ClipWith@ImRect@@QEAAXAEBU1@@Z ENDP			; ImRect::ClipWith
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Add@ImRect@@QEAAXAEBU1@@Z
_TEXT	SEGMENT
this$ = 80
r$ = 88
?Add@ImRect@@QEAAXAEBU1@@Z PROC				; ImRect::Add, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 496
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN2@Add
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
$LN2@Add:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@Add
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+4], xmm0
$LN3@Add:
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx+8]
	jbe	SHORT $LN4@Add
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR [rax+8], xmm0
$LN4@Add:
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+12]
	jbe	SHORT $LN5@Add
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+12], xmm0
$LN5@Add:
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?Add@ImRect@@QEAAXAEBU1@@Z ENDP				; ImRect::Add
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Overlaps@ImRect@@QEBA_NAEBU1@@Z
_TEXT	SEGMENT
tv84 = 64
this$ = 96
r$ = 104
?Overlaps@ImRect@@QEBA_NAEBU1@@Z PROC			; ImRect::Overlaps, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 494
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@Overlaps
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@Overlaps
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@Overlaps
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN3@Overlaps
	mov	DWORD PTR tv84[rbp], 1
	jmp	SHORT $LN4@Overlaps
$LN3@Overlaps:
	mov	DWORD PTR tv84[rbp], 0
$LN4@Overlaps:
	movzx	eax, BYTE PTR tv84[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?Overlaps@ImRect@@QEBA_NAEBU1@@Z ENDP			; ImRect::Overlaps
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?Contains@ImRect@@QEBA_NAEBU1@@Z
_TEXT	SEGMENT
tv84 = 64
this$ = 96
r$ = 104
?Contains@ImRect@@QEBA_NAEBU1@@Z PROC			; ImRect::Contains, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 493
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx+8]
	jb	SHORT $LN3@Contains
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+12]
	jb	SHORT $LN3@Contains
	mov	DWORD PTR tv84[rbp], 1
	jmp	SHORT $LN4@Contains
$LN3@Contains:
	mov	DWORD PTR tv84[rbp], 0
$LN4@Contains:
	movzx	eax, BYTE PTR tv84[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?Contains@ImRect@@QEBA_NAEBU1@@Z ENDP			; ImRect::Contains
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetHeight@ImRect@@QEBAMXZ
_TEXT	SEGMENT
this$ = 80
?GetHeight@ImRect@@QEBAMXZ PROC				; ImRect::GetHeight, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 486
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+4]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetHeight@ImRect@@QEBAMXZ ENDP				; ImRect::GetHeight
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetWidth@ImRect@@QEBAMXZ
_TEXT	SEGMENT
this$ = 80
?GetWidth@ImRect@@QEBAMXZ PROC				; ImRect::GetWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 485
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetWidth@ImRect@@QEBAMXZ ENDP				; ImRect::GetWidth
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?GetSize@ImRect@@QEBA?AUImVec2@@XZ
_TEXT	SEGMENT
this$ = 80
__$ReturnUdt$ = 88
?GetSize@ImRect@@QEBA?AUImVec2@@XZ PROC			; ImRect::GetSize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 484
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?GetSize@ImRect@@QEBA?AUImVec2@@XZ ENDP			; ImRect::GetSize
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@MMMM@Z
_TEXT	SEGMENT
tv76 = 64
tv70 = 64
this$ = 96
x1$ = 104
y1$ = 112
x2$ = 120
y2$ = 128
??0ImRect@@QEAA@MMMM@Z PROC				; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 481
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv70[rbp], rax
	movss	xmm2, DWORD PTR y1$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	mov	rcx, QWORD PTR tv70[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv76[rbp], rax
	movss	xmm2, DWORD PTR y2$[rbp]
	movss	xmm1, DWORD PTR x2$[rbp]
	mov	rcx, QWORD PTR tv76[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
??0ImRect@@QEAA@MMMM@Z ENDP				; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@AEBUImVec4@@@Z
_TEXT	SEGMENT
tv80 = 64
tv72 = 64
this$ = 96
v$ = 104
??0ImRect@@QEAA@AEBUImVec4@@@Z PROC			; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 480
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv72[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR tv80[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
??0ImRect@@QEAA@AEBUImVec4@@@Z ENDP			; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@AEBUImVec2@@0@Z
_TEXT	SEGMENT
this$ = 80
min$ = 88
max$ = 96
??0ImRect@@QEAA@AEBUImVec2@@0@Z PROC			; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 479
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR min$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR max$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImRect@@QEAA@AEBUImVec2@@0@Z ENDP			; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImRect@@QEAA@XZ
_TEXT	SEGMENT
tv76 = 64
tv70 = 64
this$ = 96
??0ImRect@@QEAA@XZ PROC					; ImRect::ImRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 478
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv70[rbp], rax
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR tv70[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv76[rbp], rax
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR tv76[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
??0ImRect@@QEAA@XZ ENDP					; ImRect::ImRect
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec1@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec1@@QEAA@XZ PROC					; ImVec1::ImVec1, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 458
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec1@@QEAA@XZ ENDP					; ImVec1::ImVec1
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMax@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@M@@YAMMM@Z PROC				; ImMax<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 413
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR lhs$[rbp]
	comiss	xmm0, DWORD PTR rhs$[rbp]
	jb	SHORT $LN3@ImMax
	movss	xmm0, DWORD PTR lhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	movss	xmm0, DWORD PTR rhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN4@ImMax:
	movss	xmm0, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMax@M@@YAMMM@Z ENDP				; ImMax<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@M@@YAMMM@Z PROC				; ImMin<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR rhs$[rbp]
	comiss	xmm0, DWORD PTR lhs$[rbp]
	jbe	SHORT $LN3@ImMin
	movss	xmm0, DWORD PTR lhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	movss	xmm0, DWORD PTR rhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN4@ImMin:
	movss	xmm0, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@M@@YAMMM@Z ENDP				; ImMin<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImFloor@@YAMM@Z
_TEXT	SEGMENT
f$ = 80
?ImFloor@@YAMM@Z PROC					; ImFloor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 430
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cvttss2si eax, DWORD PTR f$[rbp]
	cvtsi2ss xmm0, eax
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImFloor@@YAMM@Z ENDP					; ImFloor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
_TEXT	SEGMENT
tv74 = 64
tv73 = 68
tv84 = 72
tv83 = 76
__$ReturnUdt$ = 96
v$ = 104
mn$ = 112
mx$ = 120
?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z PROC		; ImClamp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 422
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR mn$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN5@ImClamp
	mov	rax, QWORD PTR mn$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR mx$[rbp+4]
	jbe	SHORT $LN3@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp+4]
	movss	DWORD PTR tv73[rbp], xmm0
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv73[rbp], xmm0
$LN4@ImClamp:
	movss	xmm0, DWORD PTR tv73[rbp]
	movss	DWORD PTR tv74[rbp], xmm0
$LN6@ImClamp:
	mov	rax, QWORD PTR mn$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN9@ImClamp
	mov	rax, QWORD PTR mn$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN10@ImClamp
$LN9@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR mx$[rbp]
	jbe	SHORT $LN7@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp]
	movss	DWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN8@ImClamp
$LN7@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rbp], xmm0
$LN8@ImClamp:
	movss	xmm0, DWORD PTR tv83[rbp]
	movss	DWORD PTR tv84[rbp], xmm0
$LN10@ImClamp:
	movss	xmm2, DWORD PTR tv74[rbp]
	movss	xmm1, DWORD PTR tv84[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z ENDP		; ImClamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMax@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMax, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 421
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jb	SHORT $LN3@ImMax
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
$LN4@ImMax:
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN5@ImMax
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN6@ImMax
$LN5@ImMax:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
$LN6@ImMax:
	movss	xmm2, DWORD PTR tv71[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImMax@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMax
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMin@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMin, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 420
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
$LN4@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN5@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN6@ImMin
$LN5@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
$LN6@ImMin:
	movss	xmm2, DWORD PTR tv71[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImMin@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??H@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??H@YA?AUImVec2@@AEBU0@0@Z PROC				; operator+, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 342
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??H@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImIsPowerOfTwo@@YA_NH@Z
_TEXT	SEGMENT
tv68 = 192
v$ = 240
?ImIsPowerOfTwo@@YA_NH@Z PROC				; ImIsPowerOfTwo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 300
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR v$[rbp], 0
	je	SHORT $LN3@ImIsPowerO
	mov	eax, DWORD PTR v$[rbp]
	dec	eax
	mov	ecx, DWORD PTR v$[rbp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@ImIsPowerO
	mov	DWORD PTR tv68[rbp], 1
	jmp	SHORT $LN4@ImIsPowerO
$LN3@ImIsPowerO:
	mov	DWORD PTR tv68[rbp], 0
$LN4@ImIsPowerO:
	movzx	eax, BYTE PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?ImIsPowerOfTwo@@YA_NH@Z ENDP				; ImIsPowerOfTwo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT sscanf
_TEXT	SEGMENT
_Result$ = 4
_ArgList$ = 40
__$ArrayPad$ = 280
_Buffer$ = 320
_Format$ = 328
sscanf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; Line 2247
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__C1EC35D3_stdio@h
	call	__CheckForDebuggerJustMyCode
; Line 2250
	lea	rax, QWORD PTR _Format$[rbp+8]
	mov	QWORD PTR _ArgList$[rbp], rax
; Line 2251
	mov	r9, QWORD PTR _ArgList$[rbp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rbp]
	mov	rcx, QWORD PTR _Buffer$[rbp]
	call	_vsscanf_l
	mov	DWORD PTR _Result$[rbp], eax
; Line 2252
	mov	QWORD PTR _ArgList$[rbp], 0
; Line 2253
	mov	eax, DWORD PTR _Result$[rbp]
; Line 2254
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:sscanf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
sscanf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT _vsscanf_l
_TEXT	SEGMENT
_Buffer$ = 224
_Format$ = 232
_Locale$ = 240
_ArgList$ = 248
_vsscanf_l PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\stdio.h
; Line 2152
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__C1EC35D3_stdio@h
	call	__CheckForDebuggerJustMyCode
; Line 2153
	call	__local_stdio_scanf_options
	mov	rcx, QWORD PTR _ArgList$[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rbp]
	mov	r8, -1
	mov	rdx, QWORD PTR _Buffer$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsscanf
; Line 2156
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
_vsscanf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT __local_stdio_scanf_options
_TEXT	SEGMENT
__local_stdio_scanf_options PROC			; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_stdio_config.h
; Line 100
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__44420885_corecrt_stdio_config@h
	call	__CheckForDebuggerJustMyCode
; Line 102
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_scanf_options@@9@4_KA ; `__local_stdio_scanf_options'::`2'::_OptionsStorage
; Line 103
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
__local_stdio_scanf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@M@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@M@@QEAAXH@Z PROC			; ImVector<float>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@M@@QEAAXH@Z ENDP			; ImVector<float>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@M@@QEAAXHAEBM@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@M@@QEAAXHAEBM@Z PROC			; ImVector<float>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1709
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN5@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@M@@QEBAHH@Z	; ImVector<float>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@M@@QEAAXH@Z		; ImVector<float>::reserve
$LN5@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN6@resize
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR n$1[rbp], eax
	jmp	SHORT $LN4@resize
$LN2@resize:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@resize:
	mov	eax, DWORD PTR new_size$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@resize
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+rax*4], edx
	jmp	SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@M@@QEAAXHAEBM@Z ENDP			; ImVector<float>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@M@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@M@@QEBAHH@Z PROC		; ImVector<float>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@M@@QEBAHH@Z ENDP		; ImVector<float>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@M@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@M@@QEAAAEAMH@Z PROC			; ImVector<float>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@M@@QEAAAEAMH@Z ENDP			; ImVector<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@I@@QEAAAEAIXZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@I@@QEAAAEAIXZ PROC			; ImVector<unsigned int>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@I@@QEAAAEAIXZ ENDP			; ImVector<unsigned int>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ PROC	; ImVector<ImVec4>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ ENDP	; ImVector<ImVec4>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Clear@ImDrawListSplitter@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Clear@ImDrawListSplitter@@QEAAXXZ PROC			; ImDrawListSplitter::Clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2318
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Clear@ImDrawListSplitter@@QEAAXXZ ENDP			; ImDrawListSplitter::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImDrawListSplitter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImDrawListSplitter@@QEAA@XZ PROC			; ImDrawListSplitter::~ImDrawListSplitter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2317
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ ; ImDrawListSplitter::ClearFreeMemory
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	??1?$ImVector@UImDrawChannel@@@@QEAA@XZ	; ImVector<ImDrawChannel>::~ImVector<ImDrawChannel>
	npad	1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImDrawListSplitter@@QEAA@XZ ENDP			; ImDrawListSplitter::~ImDrawListSplitter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawListSplitter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawListSplitter@@QEAA@XZ PROC			; ImDrawListSplitter::ImDrawListSplitter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2316
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	??0?$ImVector@UImDrawChannel@@@@QEAA@XZ	; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 24
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawListSplitter@@QEAA@XZ ENDP			; ImDrawListSplitter::ImDrawListSplitter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z PROC	; ImVector<ImDrawChannel>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ENDP	; ImVector<ImDrawChannel>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z PROC	; ImVector<ImDrawChannel>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ; ImVector<ImDrawChannel>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ENDP	; ImVector<ImDrawChannel>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z PROC ; ImVector<ImDrawChannel>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ENDP ; ImVector<ImDrawChannel>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z PROC ; ImVector<ImDrawChannel>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ENDP ; ImVector<ImDrawChannel>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImDrawChannel@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImDrawChannel@@@@QEAA@XZ PROC		; ImVector<ImDrawChannel>::~ImVector<ImDrawChannel>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImDrawChannel@@@@QEAA@XZ ENDP		; ImVector<ImDrawChannel>::~ImVector<ImDrawChannel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImDrawChannel@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawChannel@@@@QEAA@XZ PROC		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImDrawChannel@@@@QEAA@XZ ENDP		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ PROC		; ImVector<ImDrawCmd>::pop_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1715
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@pop_back
	mov	r8d, 1715				; 000006b3H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@pop_back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ENDP		; ImVector<ImDrawCmd>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ PROC ; ImVector<ImDrawCmd>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ENDP ; ImVector<ImDrawCmd>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z PROC	; ImVector<ImDrawCmd>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ENDP	; ImVector<ImDrawCmd>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z PROC ; ImVector<ImGuiStorage::ImGuiStoragePair>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImGuiStoragePair@ImGuiStorage@@@@QEAAAEAUImGuiStoragePair@ImGuiStorage@@H@Z ENDP ; ImVector<ImGuiStorage::ImGuiStoragePair>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTextBuffer@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImGuiTextBuffer@@QEAA@XZ PROC			; ImGuiTextBuffer::~ImGuiTextBuffer, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??1?$ImVector@D@@QEAA@XZ		; ImVector<char>::~ImVector<char>
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImGuiTextBuffer@@QEAA@XZ ENDP			; ImGuiTextBuffer::~ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@ImGuiTextBuffer@@QEAAXH@Z
_TEXT	SEGMENT
tv68 = 192
this$ = 240
capacity$ = 248
?reserve@ImGuiTextBuffer@@QEAAXH@Z PROC			; ImGuiTextBuffer::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2080
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv68[rbp], rax
	mov	edx, DWORD PTR capacity$[rbp]
	mov	rcx, QWORD PTR tv68[rbp]
	call	?reserve@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::reserve
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?reserve@ImGuiTextBuffer@@QEAAXH@Z ENDP			; ImGuiTextBuffer::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@ImGuiTextBuffer@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@ImGuiTextBuffer@@QEAAXXZ PROC			; ImGuiTextBuffer::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2079
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?clear@?$ImVector@D@@QEAAXXZ		; ImVector<char>::clear
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@ImGuiTextBuffer@@QEAAXXZ ENDP			; ImGuiTextBuffer::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size@ImGuiTextBuffer@@QEBAHXZ
_TEXT	SEGMENT
tv70 = 192
this$ = 240
?size@ImGuiTextBuffer@@QEBAHXZ PROC			; ImGuiTextBuffer::size, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2077
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN3@size
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@size
$LN3@size:
	mov	DWORD PTR tv70[rbp], 0
$LN4@size:
	mov	eax, DWORD PTR tv70[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?size@ImGuiTextBuffer@@QEBAHXZ ENDP			; ImGuiTextBuffer::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTextBuffer@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTextBuffer@@QEAA@XZ PROC			; ImGuiTextBuffer::ImGuiTextBuffer, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2073
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@D@@QEAA@XZ		; ImVector<char>::ImVector<char>
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTextBuffer@@QEAA@XZ ENDP			; ImGuiTextBuffer::ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@D@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@D@@QEAAXH@Z PROC			; ImVector<char>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@D@@QEAAXH@Z ENDP			; ImVector<char>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@D@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@D@@QEAAXH@Z PROC			; ImVector<char>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@D@@QEBAHH@Z	; ImVector<char>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@D@@QEAAXH@Z		; ImVector<char>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@D@@QEAAXH@Z ENDP			; ImVector<char>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@D@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@D@@QEBAHH@Z PROC		; ImVector<char>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@D@@QEBAHH@Z ENDP		; ImVector<char>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap@?$ImVector@D@@QEAAXAEAU1@@Z
_TEXT	SEGMENT
rhs_size$ = 4
rhs_cap$ = 36
rhs_data$ = 72
this$ = 320
rhs$ = 328
?swap@?$ImVector@D@@QEAAXAEAU1@@Z PROC			; ImVector<char>::swap, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1705
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR rhs_size$[rbp], eax
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR rhs_size$[rbp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR rhs$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR rhs_cap$[rbp], eax
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR rhs_cap$[rbp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR rhs_data$[rbp], rax
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR rhs_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?swap@?$ImVector@D@@QEAAXAEAU1@@Z ENDP			; ImVector<char>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@D@@QEBAAEBDH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@D@@QEBAAEBDH@Z PROC			; ImVector<char>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1695
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1695				; 0000069fH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@D@@QEBAAEBDH@Z ENDP			; ImVector<char>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@D@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@D@@QEAAXXZ PROC			; ImVector<char>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@D@@QEAAXXZ ENDP			; ImVector<char>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@D@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@D@@QEAA@XZ PROC				; ImVector<char>::~ImVector<char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@D@@QEAA@XZ ENDP				; ImVector<char>::~ImVector<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@D@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@D@@QEAA@XZ PROC				; ImVector<char>::ImVector<char>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@D@@QEAA@XZ ENDP				; ImVector<char>::ImVector<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTableSortSpecs@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTableSortSpecs@@QEAA@XZ PROC			; ImGuiTableSortSpecs::ImGuiTableSortSpecs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2016
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTableSortSpecs@@QEAA@XZ ENDP			; ImGuiTableSortSpecs::ImGuiTableSortSpecs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImGuiTableColumnSortSpecs@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImGuiTableColumnSortSpecs@@QEAA@XZ PROC		; ImGuiTableColumnSortSpecs::ImGuiTableColumnSortSpecs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2003
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 12
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImGuiTableColumnSortSpecs@@QEAA@XZ ENDP		; ImGuiTableColumnSortSpecs::ImGuiTableColumnSortSpecs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPEAXUImNewWrapper@@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??3@YAXPEAXUImNewWrapper@@0@Z PROC			; operator delete, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1648
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??3@YAXPEAXUImNewWrapper@@0@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2@YAPEAX_KUImNewWrapper@@PEAX@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
ptr$ = 240
??2@YAPEAX_KUImNewWrapper@@PEAX@Z PROC			; operator new, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1647
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ptr$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??2@YAPEAX_KUImNewWrapper@@PEAX@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnsCount@ImGui@@YAHXZ
_TEXT	SEGMENT
window$ = 8
tv71 = 212
?GetColumnsCount@ImGui@@YAHXZ PROC			; ImGui::GetColumnsCount, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3648
$LN5:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3649
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3650
	mov	rax, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+424], 0
	je	SHORT $LN3@GetColumns
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv71[rbp], eax
	jmp	SHORT $LN4@GetColumns
$LN3@GetColumns:
	mov	DWORD PTR tv71[rbp], 1
$LN4@GetColumns:
	mov	eax, DWORD PTR tv71[rbp]
; Line 3651
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnsCount@ImGui@@YAHXZ ENDP			; ImGui::GetColumnsCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetColumnOffset@ImGui@@YAXHM@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
columns$ = 72
preserve_width$ = 100
width$ = 132
tv157 = 340
tv129 = 340
tv89 = 340
tv149 = 344
column_index$ = 384
offset$ = 392
?SetColumnOffset@ImGui@@YAXHM@Z PROC			; ImGui::SetColumnOffset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3725
$LN12:
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3726
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3727
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 3728
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3729
	cmp	QWORD PTR columns$[rbp], 0
	jne	SHORT $LN6@SetColumnO
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColumnOffset@ImGui@@YAXHM@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@FLGDBJKG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@SetColumnO:
; Line 3731
	cmp	DWORD PTR column_index$[rbp], 0
	jge	SHORT $LN2@SetColumnO
; Line 3732
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR column_index$[rbp], eax
$LN2@SetColumnO:
; Line 3733
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR column_index$[rbp], eax
	jl	SHORT $LN7@SetColumnO
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColumnOffset@ImGui@@YAXHM@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EK@FCGFMMCK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@SetColumnO:
; Line 3735
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN8@SetColumnO
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+16]
	dec	eax
	cmp	DWORD PTR column_index$[rbp], eax
	jge	SHORT $LN8@SetColumnO
	mov	BYTE PTR tv89[rbp], 1
	jmp	SHORT $LN9@SetColumnO
$LN8@SetColumnO:
	mov	BYTE PTR tv89[rbp], 0
$LN9@SetColumnO:
	movzx	eax, BYTE PTR tv89[rbp]
	mov	BYTE PTR preserve_width$[rbp], al
; Line 3736
	movzx	eax, BYTE PTR preserve_width$[rbp]
	test	eax, eax
	je	SHORT $LN10@SetColumnO
	mov	rax, QWORD PTR columns$[rbp]
	movzx	r8d, BYTE PTR [rax+9]
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	call	?GetColumnWidthEx@@YAMPEAUImGuiOldColumns@@H_N@Z ; GetColumnWidthEx
	movss	DWORD PTR tv129[rbp], xmm0
	jmp	SHORT $LN11@SetColumnO
$LN10@SetColumnO:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv129[rbp], xmm0
$LN11@SetColumnO:
	movss	xmm0, DWORD PTR tv129[rbp]
	movss	DWORD PTR width$[rbp], xmm0
; Line 3738
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN3@SetColumnO
; Line 3739
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR column_index$[rbp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5580]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm1, DWORD PTR [rax+24]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR offset$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR offset$[rbp], xmm0
$LN3@SetColumnO:
; Line 3740
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR offset$[rbp]
	subss	xmm0, DWORD PTR [rax+20]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR columns$[rbp]
	call	?GetColumnNormFromOffset@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ; ImGui::GetColumnNormFromOffset
	movss	DWORD PTR tv157[rbp], xmm0
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv149[rbp], rax
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR tv149[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR tv157[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 3742
	movzx	eax, BYTE PTR preserve_width$[rbp]
	test	eax, eax
	je	SHORT $LN4@SetColumnO
; Line 3743
	movss	xmm1, DWORD PTR width$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5580]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR offset$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR column_index$[rbp]
	inc	eax
	movaps	xmm1, xmm0
	mov	ecx, eax
	call	?SetColumnOffset@ImGui@@YAXHM@Z		; ImGui::SetColumnOffset
$LN4@SetColumnO:
; Line 3744
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?SetColumnOffset@ImGui@@YAXHM@Z ENDP			; ImGui::SetColumnOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnOffset@ImGui@@YAMH@Z
_TEXT	SEGMENT
window$ = 8
columns$ = 40
t$ = 68
x_offset$ = 100
tv83 = 312
column_index$ = 352
?GetColumnOffset@ImGui@@YAMH@Z PROC			; ImGui::GetColumnOffset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3683
$LN6:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3684
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3685
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3686
	cmp	QWORD PTR columns$[rbp], 0
	jne	SHORT $LN2@GetColumnO
; Line 3687
	xorps	xmm0, xmm0
	jmp	$LN1@GetColumnO
$LN2@GetColumnO:
; Line 3689
	cmp	DWORD PTR column_index$[rbp], 0
	jge	SHORT $LN3@GetColumnO
; Line 3690
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR column_index$[rbp], eax
$LN3@GetColumnO:
; Line 3691
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+96]
	cmp	DWORD PTR column_index$[rbp], eax
	jl	SHORT $LN5@GetColumnO
	mov	eax, DWORD PTR ?__LINE__Var@?0??GetColumnOffset@ImGui@@YAMH@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EK@FCGFMMCK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@GetColumnO:
; Line 3693
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv83[rbp], rax
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR tv83[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR t$[rbp], xmm0
; Line 3694
	movss	xmm2, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm1, DWORD PTR [rax+24]
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR x_offset$[rbp], xmm0
; Line 3695
	movss	xmm0, DWORD PTR x_offset$[rbp]
$LN1@GetColumnO:
; Line 3696
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnOffset@ImGui@@YAMH@Z ENDP			; ImGui::GetColumnOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetColumnWidth@ImGui@@YAXHM@Z
_TEXT	SEGMENT
window$ = 8
columns$ = 40
column_index$ = 288
width$ = 296
?SetColumnWidth@ImGui@@YAXHM@Z PROC			; ImGui::SetColumnWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3747
$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3748
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3749
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3750
	cmp	QWORD PTR columns$[rbp], 0
	jne	SHORT $LN4@SetColumnW
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetColumnWidth@ImGui@@YAXHM@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@FLGDBJKG@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@SetColumnW:
; Line 3752
	cmp	DWORD PTR column_index$[rbp], 0
	jge	SHORT $LN2@SetColumnW
; Line 3753
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR column_index$[rbp], eax
$LN2@SetColumnW:
; Line 3754
	mov	ecx, DWORD PTR column_index$[rbp]
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	addss	xmm0, DWORD PTR width$[rbp]
	mov	eax, DWORD PTR column_index$[rbp]
	inc	eax
	movaps	xmm1, xmm0
	mov	ecx, eax
	call	?SetColumnOffset@ImGui@@YAXHM@Z		; ImGui::SetColumnOffset
; Line 3755
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?SetColumnWidth@ImGui@@YAXHM@Z ENDP			; ImGui::SetColumnWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnWidth@ImGui@@YAMH@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
columns$ = 72
$T1 = 292
tv80 = 312
tv87 = 320
tv84 = 328
column_index$ = 368
?GetColumnWidth@ImGui@@YAMH@Z PROC			; ImGui::GetColumnWidth, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3712
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3713
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3714
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 3715
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3716
	cmp	QWORD PTR columns$[rbp], 0
	jne	SHORT $LN2@GetColumnW
; Line 3717
	lea	rcx, QWORD PTR $T1[rbp]
	call	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
	movss	xmm0, DWORD PTR [rax]
	jmp	SHORT $LN1@GetColumnW
$LN2@GetColumnW:
; Line 3719
	cmp	DWORD PTR column_index$[rbp], 0
	jge	SHORT $LN3@GetColumnW
; Line 3720
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR column_index$[rbp], eax
$LN3@GetColumnW:
; Line 3721
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv80[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv87[rbp], rax
	mov	edx, DWORD PTR column_index$[rbp]
	mov	rcx, QWORD PTR tv87[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR tv84[rbp], rax
	mov	ecx, DWORD PTR column_index$[rbp]
	inc	ecx
	mov	edx, ecx
	mov	rcx, QWORD PTR tv80[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	movss	xmm0, DWORD PTR [rax]
	mov	rax, QWORD PTR tv84[rbp]
	subss	xmm0, DWORD PTR [rax]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR columns$[rbp]
	call	?GetColumnOffsetFromNorm@ImGui@@YAMPEBUImGuiOldColumns@@M@Z ; ImGui::GetColumnOffsetFromNorm
$LN1@GetColumnW:
; Line 3722
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnWidth@ImGui@@YAMH@Z ENDP			; ImGui::GetColumnWidth
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetColumnIndex@ImGui@@YAHXZ
_TEXT	SEGMENT
window$ = 8
tv71 = 212
?GetColumnIndex@ImGui@@YAHXZ PROC			; ImGui::GetColumnIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3642
$LN5:
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3643
	call	?GetCurrentWindowRead@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindowRead
	mov	QWORD PTR window$[rbp], rax
; Line 3644
	mov	rax, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+424], 0
	je	SHORT $LN3@GetColumnI
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv71[rbp], eax
	jmp	SHORT $LN4@GetColumnI
$LN3@GetColumnI:
	mov	DWORD PTR tv71[rbp], 0
$LN4@GetColumnI:
	mov	eax, DWORD PTR tv71[rbp]
; Line 3645
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?GetColumnIndex@ImGui@@YAHXZ ENDP			; ImGui::GetColumnIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?NextColumn@ImGui@@YAXXZ
_TEXT	SEGMENT
window$ = 8
g$ = 40
columns$ = 72
column$ = 104
column_padding$ = 132
offset_0$ = 164
offset_1$ = 196
width$ = 228
$T1 = 452
tv132 = 468
tv154 = 472
tv142 = 472
?NextColumn@ImGui@@YAXXZ PROC				; ImGui::NextColumn, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 3898
$LN10:
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3899
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 3900
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	jne	SHORT $LN3@NextColumn
	mov	rax, QWORD PTR window$[rbp]
	cmp	QWORD PTR [rax+424], 0
	jne	SHORT $LN2@NextColumn
$LN3@NextColumn:
; Line 3901
	jmp	$LN1@NextColumn
$LN2@NextColumn:
; Line 3903
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 3904
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 3906
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+16], 1
	jne	SHORT $LN4@NextColumn
; Line 3908
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+280]
	mov	rax, QWORD PTR window$[rbp]
	addss	xmm0, DWORD PTR [rax+284]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 3909
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+12], 0
	je	SHORT $LN9@NextColumn
	mov	eax, DWORD PTR ?__LINE__Var@?0??NextColumn@ImGui@@YAXXZ@4JA
	add	eax, 11
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CM@HCFAHNAF@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@NextColumn:
; Line 3910
	jmp	$LN1@NextColumn
$LN4@NextColumn:
; Line 3914
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	DWORD PTR tv132[rbp], eax
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR tv132[rbp]
	mov	DWORD PTR [rax+12], ecx
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR tv132[rbp], eax
	jne	SHORT $LN5@NextColumn
; Line 3915
	mov	rax, QWORD PTR columns$[rbp]
	mov	DWORD PTR [rax+12], 0
$LN5@NextColumn:
; Line 3917
	call	?PopItemWidth@ImGui@@YAXXZ		; ImGui::PopItemWidth
; Line 3921
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv142[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	mov	edx, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR tv142[rbp]
	call	??A?$ImVector@UImGuiOldColumnData@@@@QEAAAEAUImGuiOldColumnData@@H@Z ; ImVector<ImGuiOldColumnData>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 3922
	mov	rax, QWORD PTR column$[rbp]
	add	rax, 12
	mov	rdx, rax
	mov	rcx, QWORD PTR window$[rbp]
	call	?SetWindowClipRectBeforeSetChannel@ImGui@@YAXPEAUImGuiWindow@@AEBUImRect@@@Z ; ImGui::SetWindowClipRectBeforeSetChannel
; Line 3923
	mov	rax, QWORD PTR columns$[rbp]
	add	rax, 112				; 00000070H
	mov	QWORD PTR tv154[rbp], rax
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	r8d, eax
	mov	rax, QWORD PTR window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR tv154[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 3925
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5544]
	movss	DWORD PTR column_padding$[rbp], xmm0
; Line 3926
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+220]
	mov	rax, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rax+32]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR columns$[rbp]
	movss	DWORD PTR [rax+32], xmm0
; Line 3927
	mov	rax, QWORD PTR columns$[rbp]
	cmp	DWORD PTR [rax+12], 0
	jle	SHORT $LN6@NextColumn
; Line 3931
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR [rax+12]
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	mov	rax, QWORD PTR window$[rbp]
	subss	xmm0, DWORD PTR [rax+280]
	addss	xmm0, DWORD PTR column_padding$[rbp]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+284], xmm0
; Line 3932
	jmp	SHORT $LN7@NextColumn
$LN6@NextColumn:
; Line 3936
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR column_padding$[rbp]
	subss	xmm0, DWORD PTR [rax+64]
	xorps	xmm1, xmm1
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+284], xmm0
; Line 3937
	mov	rax, QWORD PTR columns$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rcx+32]
	movss	DWORD PTR [rax+28], xmm0
$LN7@NextColumn:
; Line 3939
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR [rcx+280]
	mov	rax, QWORD PTR window$[rbp]
	addss	xmm0, DWORD PTR [rax+284]
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+216], xmm0
; Line 3940
	mov	rax, QWORD PTR window$[rbp]
	mov	rcx, QWORD PTR columns$[rbp]
	movss	xmm0, DWORD PTR [rcx+28]
	movss	DWORD PTR [rax+220], xmm0
; Line 3941
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR window$[rbp]
	mov	QWORD PTR [rcx+256], rax
; Line 3942
	mov	rax, QWORD PTR window$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+272], xmm0
; Line 3945
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR [rax+12]
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	movss	DWORD PTR offset_0$[rbp], xmm0
; Line 3946
	mov	rax, QWORD PTR columns$[rbp]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	ecx, eax
	call	?GetColumnOffset@ImGui@@YAMH@Z		; ImGui::GetColumnOffset
	movss	DWORD PTR offset_1$[rbp], xmm0
; Line 3947
	movss	xmm0, DWORD PTR offset_1$[rbp]
	subss	xmm0, DWORD PTR offset_0$[rbp]
	movss	DWORD PTR width$[rbp], xmm0
; Line 3948
	movss	xmm0, DWORD PTR width$[rbp]
	mulss	xmm0, DWORD PTR __real@3f266666
	call	?PushItemWidth@ImGui@@YAXM@Z		; ImGui::PushItemWidth
; Line 3949
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR offset_1$[rbp]
	subss	xmm0, DWORD PTR column_padding$[rbp]
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+568], xmm0
$LN1@NextColumn:
; Line 3950
	lea	rsp, QWORD PTR [rbp+488]
	pop	rdi
	pop	rbp
	ret	0
?NextColumn@ImGui@@YAXXZ ENDP				; ImGui::NextColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Columns@ImGui@@YAXHPEBD_N@Z
_TEXT	SEGMENT
window$ = 8
flags$ = 36
columns$ = 72
tv73 = 276
columns_count$ = 320
id$ = 328
border$ = 336
?Columns@ImGui@@YAXHPEBD_N@Z PROC			; ImGui::Columns, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 4029
$LN9:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 4030
	call	?GetCurrentWindow@ImGui@@YAPEAUImGuiWindow@@XZ ; ImGui::GetCurrentWindow
	mov	QWORD PTR window$[rbp], rax
; Line 4031
	cmp	DWORD PTR columns_count$[rbp], 1
	jge	SHORT $LN6@Columns
	mov	eax, DWORD PTR ?__LINE__Var@?0??Columns@ImGui@@YAXHPEBD_N@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GDAJJGIO@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@Columns:
; Line 4033
	movzx	eax, BYTE PTR border$[rbp]
	test	eax, eax
	je	SHORT $LN7@Columns
	mov	DWORD PTR tv73[rbp], 0
	jmp	SHORT $LN8@Columns
$LN7@Columns:
	mov	DWORD PTR tv73[rbp], 1
$LN8@Columns:
	mov	eax, DWORD PTR tv73[rbp]
	mov	DWORD PTR flags$[rbp], eax
; Line 4035
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR columns$[rbp], rax
; Line 4036
	cmp	QWORD PTR columns$[rbp], 0
	je	SHORT $LN2@Columns
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN2@Columns
	mov	rax, QWORD PTR columns$[rbp]
	mov	ecx, DWORD PTR flags$[rbp]
	cmp	DWORD PTR [rax+4], ecx
	jne	SHORT $LN2@Columns
; Line 4037
	jmp	SHORT $LN1@Columns
$LN2@Columns:
; Line 4039
	cmp	QWORD PTR columns$[rbp], 0
	je	SHORT $LN3@Columns
; Line 4040
	call	?EndColumns@ImGui@@YAXXZ		; ImGui::EndColumns
$LN3@Columns:
; Line 4042
	cmp	DWORD PTR columns_count$[rbp], 1
	je	SHORT $LN4@Columns
; Line 4043
	mov	r8d, DWORD PTR flags$[rbp]
	mov	edx, DWORD PTR columns_count$[rbp]
	mov	rcx, QWORD PTR id$[rbp]
	call	?BeginColumns@ImGui@@YAXPEBDHH@Z	; ImGui::BeginColumns
$LN4@Columns:
$LN1@Columns:
; Line 4044
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?Columns@ImGui@@YAXHPEBD_N@Z ENDP			; ImGui::Columns
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetBgColor@ImGui@@YAXHIH@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
cell_data$1 = 72
bg_idx$2 = 100
tv156 = 308
tv72 = 308
tv186 = 312
tv141 = 312
tv94 = 312
target$ = 352
color$ = 360
column_n$ = 368
?TableSetBgColor@ImGui@@YAXHIH@Z PROC			; ImGui::TableSetBgColor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1606
$LN21:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1607
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1608
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1609
	cmp	DWORD PTR target$[rbp], 0
	jne	SHORT $LN16@TableSetBg
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetBgColor@ImGui@@YAXHIH@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EE@NMABAIJJ@?$AAt?$AAa?$AAr?$AAg?$AAe?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@TableSetBg:
; Line 1611
	cmp	DWORD PTR color$[rbp], 16777216		; 01000000H
	jne	SHORT $LN4@TableSetBg
; Line 1612
	mov	DWORD PTR color$[rbp], 0
$LN4@TableSetBg:
; Line 1615
	mov	eax, DWORD PTR target$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	cmp	DWORD PTR tv72[rbp], 1
	je	$LN11@TableSetBg
	cmp	DWORD PTR tv72[rbp], 2
	je	$LN12@TableSetBg
	cmp	DWORD PTR tv72[rbp], 3
	je	SHORT $LN5@TableSetBg
	jmp	$LN14@TableSetBg
$LN5@TableSetBg:
; Line 1619
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+132]
	comiss	xmm0, DWORD PTR [rcx+304]
	jbe	SHORT $LN6@TableSetBg
; Line 1620
	jmp	$LN1@TableSetBg
$LN6@TableSetBg:
; Line 1621
	cmp	DWORD PTR column_n$[rbp], -1
	jne	SHORT $LN7@TableSetBg
; Line 1622
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
$LN7@TableSetBg:
; Line 1623
	mov	eax, DWORD PTR column_n$[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv186[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv186[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+88]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN8@TableSetBg
; Line 1624
	jmp	$LN1@TableSetBg
$LN8@TableSetBg:
; Line 1625
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+501]
	test	eax, eax
	jl	SHORT $LN10@TableSetBg
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv94[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+501]
	mov	edx, eax
	mov	rcx, QWORD PTR tv94[rbp]
	call	??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z ; ImSpan<ImGuiTableCellData>::operator[]
	movsx	eax, BYTE PTR [rax+4]
	cmp	eax, DWORD PTR column_n$[rbp]
	je	SHORT $LN9@TableSetBg
$LN10@TableSetBg:
; Line 1626
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+501]
	inc	al
	mov	rcx, QWORD PTR table$[rbp]
	mov	BYTE PTR [rcx+501], al
$LN9@TableSetBg:
; Line 1627
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv141[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+501]
	mov	edx, eax
	mov	rcx, QWORD PTR tv141[rbp]
	call	??A?$ImSpan@UImGuiTableCellData@@@@QEAAAEAUImGuiTableCellData@@H@Z ; ImSpan<ImGuiTableCellData>::operator[]
	mov	QWORD PTR cell_data$1[rbp], rax
; Line 1628
	mov	rax, QWORD PTR cell_data$1[rbp]
	mov	ecx, DWORD PTR color$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 1629
	mov	rax, QWORD PTR cell_data$1[rbp]
	movzx	ecx, BYTE PTR column_n$[rbp]
	mov	BYTE PTR [rax+4], cl
; Line 1630
	jmp	$LN2@TableSetBg
$LN11@TableSetBg:
$LN12@TableSetBg:
; Line 1635
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+132]
	comiss	xmm0, DWORD PTR [rcx+304]
	jbe	SHORT $LN13@TableSetBg
; Line 1636
	jmp	$LN1@TableSetBg
$LN13@TableSetBg:
; Line 1637
	cmp	DWORD PTR column_n$[rbp], -1
	je	SHORT $LN17@TableSetBg
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetBgColor@ImGui@@YAXHIH@Z@4JA
	add	eax, 31
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BO@EGJMPMHM@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9?$AA1@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@TableSetBg:
; Line 1638
	cmp	DWORD PTR target$[rbp], 2
	jne	SHORT $LN18@TableSetBg
	mov	DWORD PTR tv156[rbp], 1
	jmp	SHORT $LN19@TableSetBg
$LN18@TableSetBg:
	mov	DWORD PTR tv156[rbp], 0
$LN19@TableSetBg:
	mov	eax, DWORD PTR tv156[rbp]
	mov	DWORD PTR bg_idx$2[rbp], eax
; Line 1639
	movsxd	rax, DWORD PTR bg_idx$2[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR color$[rbp]
	mov	DWORD PTR [rcx+rax*4+160], edx
; Line 1640
	jmp	SHORT $LN2@TableSetBg
$LN14@TableSetBg:
; Line 1643
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN20@TableSetBg
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetBgColor@ImGui@@YAXHIH@Z@4JA
	add	eax, 37					; 00000025H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@TableSetBg:
$LN2@TableSetBg:
$LN1@TableSetBg:
; Line 1645
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?TableSetBgColor@ImGui@@YAXHIH@Z ENDP			; ImGui::TableSetBgColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetColumnEnabled@ImGui@@YAXH_N@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
column$ = 72
tv95 = 280
column_n$ = 320
enabled$ = 328
?TableSetColumnEnabled@ImGui@@YAXH_N@Z PROC		; ImGui::TableSetColumnEnabled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1542
$LN9:
	mov	BYTE PTR [rsp+16], dl
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1543
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1544
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1545
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN5@TableSetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnEnabled@ImGui@@YAXH_N@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@IPNBPJPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@TableSetCo:
; Line 1546
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableSetCo
; Line 1547
	jmp	$LN1@TableSetCo
$LN2@TableSetCo:
; Line 1548
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN6@TableSetCo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnEnabled@ImGui@@YAXH_N@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FA@FCMNFGAM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@TableSetCo:
; Line 1549
	cmp	DWORD PTR column_n$[rbp], 0
	jge	SHORT $LN3@TableSetCo
; Line 1550
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
$LN3@TableSetCo:
; Line 1551
	cmp	DWORD PTR column_n$[rbp], 0
	jl	SHORT $LN7@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$[rbp], eax
	jl	SHORT $LN8@TableSetCo
$LN7@TableSetCo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnEnabled@ImGui@@YAXH_N@Z@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GA@OFNPMLNE@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@TableSetCo:
; Line 1552
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv95[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv95[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 1553
	mov	rax, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR enabled$[rbp]
	mov	BYTE PTR [rax+92], cl
$LN1@TableSetCo:
; Line 1554
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?TableSetColumnEnabled@ImGui@@YAXH_N@Z ENDP		; ImGui::TableSetColumnEnabled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnFlags@ImGui@@YAHH@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
tv73 = 244
tv79 = 248
column_n$ = 288
?TableGetColumnFlags@ImGui@@YAHH@Z PROC			; ImGui::TableGetColumnFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1558
$LN8:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1559
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1560
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1561
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableGetCo
; Line 1562
	xor	eax, eax
	jmp	SHORT $LN1@TableGetCo
$LN2@TableGetCo:
; Line 1563
	cmp	DWORD PTR column_n$[rbp], 0
	jge	SHORT $LN3@TableGetCo
; Line 1564
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
$LN3@TableGetCo:
; Line 1565
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$[rbp], eax
	jne	SHORT $LN4@TableGetCo
; Line 1566
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
	cmp	eax, DWORD PTR column_n$[rbp]
	jne	SHORT $LN6@TableGetCo
	mov	DWORD PTR tv73[rbp], 134217728		; 08000000H
	jmp	SHORT $LN7@TableGetCo
$LN6@TableGetCo:
	mov	DWORD PTR tv73[rbp], 0
$LN7@TableGetCo:
	mov	eax, DWORD PTR tv73[rbp]
	jmp	SHORT $LN1@TableGetCo
$LN4@TableGetCo:
; Line 1567
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv79[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv79[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	eax, DWORD PTR [rax]
$LN1@TableGetCo:
; Line 1568
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnFlags@ImGui@@YAHH@Z ENDP			; ImGui::TableGetColumnFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnName@ImGui@@YAPEBDH@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
column_n$ = 288
?TableGetColumnName@ImGui@@YAPEBDH@Z PROC		; ImGui::TableGetColumnName, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1515
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1516
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1517
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1518
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableGetCo
; Line 1519
	xor	eax, eax
	jmp	SHORT $LN1@TableGetCo
$LN2@TableGetCo:
; Line 1520
	cmp	DWORD PTR column_n$[rbp], 0
	jge	SHORT $LN3@TableGetCo
; Line 1521
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
$LN3@TableGetCo:
; Line 1522
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetColumnName@ImGui@@YAPEBDPEBUImGuiTable@@H@Z ; ImGui::TableGetColumnName
$LN1@TableGetCo:
; Line 1523
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnName@ImGui@@YAPEBDH@Z ENDP		; ImGui::TableGetColumnName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetRowIndex@ImGui@@YAHXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
?TableGetRowIndex@ImGui@@YAHXZ PROC			; ImGui::TableGetRowIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1658
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1659
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1660
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1661
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableGetRo
; Line 1662
	xor	eax, eax
	jmp	SHORT $LN1@TableGetRo
$LN2@TableGetRo:
; Line 1663
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+120]
$LN1@TableGetRo:
; Line 1664
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetRowIndex@ImGui@@YAHXZ ENDP			; ImGui::TableGetRowIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnIndex@ImGui@@YAHXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
?TableGetColumnIndex@ImGui@@YAHXZ PROC			; ImGui::TableGetColumnIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1870
$LN4:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1871
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1872
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1873
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableGetCo
; Line 1874
	xor	eax, eax
	jmp	SHORT $LN1@TableGetCo
$LN2@TableGetCo:
; Line 1875
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
$LN1@TableGetCo:
; Line 1876
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnIndex@ImGui@@YAHXZ ENDP			; ImGui::TableGetColumnIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetColumnCount@ImGui@@YAHXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
tv67 = 244
?TableGetColumnCount@ImGui@@YAHXZ PROC			; ImGui::TableGetColumnCount, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1508
$LN5:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1509
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1510
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1511
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN3@TableGetCo
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	mov	DWORD PTR tv67[rbp], eax
	jmp	SHORT $LN4@TableGetCo
$LN3@TableGetCo:
	mov	DWORD PTR tv67[rbp], 0
$LN4@TableGetCo:
	mov	eax, DWORD PTR tv67[rbp]
; Line 1512
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetColumnCount@ImGui@@YAHXZ ENDP			; ImGui::TableGetColumnCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ PROC ; ImGui::TableGetSortSpecs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2599
$LN6:
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2600
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2601
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2602
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN5@TableGetSo
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@IPNBPJPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@TableGetSo:
; Line 2604
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN2@TableGetSo
; Line 2605
	xor	eax, eax
	jmp	SHORT $LN1@TableGetSo
$LN2@TableGetSo:
; Line 2608
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN3@TableGetSo
; Line 2609
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateLayout
$LN3@TableGetSo:
; Line 2611
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSortSpecsBuild@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSortSpecsBuild
; Line 2613
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 464				; 000001d0H
$LN1@TableGetSo:
; Line 2614
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableGetSortSpecs@ImGui@@YAPEAUImGuiTableSortSpecs@@XZ ENDP ; ImGui::TableGetSortSpecs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableHeader@ImGui@@YAXPEBD@Z
_TEXT	SEGMENT
g$ = 8
window$ = 40
table$ = 72
column_n$ = 100
column$ = 136
label_end$ = 168
label_size$ = 200
label_pos$ = 232
cell_r$ = 264
label_height$ = 308
w_arrow$ = 340
w_sort_text$ = 372
sort_order_suf$ = 404
ARROW_SCALE$ = 436
max_pos_x$ = 468
selected$ = 500
id$ = 532
bb$ = 568
hovered$ = 612
held$ = 644
pressed$ = 676
col$10 = 708
prev_column$11 = 744
next_column$12 = 776
ellipsis_max$ = 804
x$13 = 836
y$14 = 868
sort_direction$15 = 900
text_clipped$ = 932
$T16 = 1540
$T17 = 1572
$T18 = 1604
$T19 = 1636
$T20 = 1672
$T21 = 1704
$T22 = 1732
tv533 = 1748
tv478 = 1748
tv426 = 1748
tv386 = 1748
tv321 = 1748
tv300 = 1748
tv215 = 1748
tv530 = 1752
tv495 = 1752
tv432 = 1752
tv413 = 1752
tv392 = 1752
tv373 = 1752
tv319 = 1752
tv297 = 1752
tv89 = 1752
tv528 = 1760
tv492 = 1760
tv414 = 1760
tv374 = 1760
__$ArrayPad$ = 1768
label$ = 1808
?TableHeader@ImGui@@YAXPEBD@Z PROC			; ImGui::TableHeader, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2854
$LN54:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1848				; 00000738H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 302				; 0000012eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1880]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2855
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2856
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	mov	QWORD PTR window$[rbp], rax
; Line 2857
	mov	rax, QWORD PTR window$[rbp]
	movzx	eax, BYTE PTR [rax+147]
	test	eax, eax
	je	SHORT $LN2@TableHeade
; Line 2858
	jmp	$LN1@TableHeade
$LN2@TableHeade:
; Line 2860
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2861
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN29@TableHeade
	lea	rax, OFFSET FLAT:??_C@_0CP@HLEIDDEE@Need?5to?5call?5TableHeader?$CI?$CJ?5afte@
	test	rax, rax
	jne	SHORT $LN30@TableHeade
$LN29@TableHeade:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableHeader@ImGui@@YAXPEBD@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HO@PDHKEBPE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN30@TableHeade:
; Line 2862
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+124], -1
	jne	SHORT $LN31@TableHeade
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableHeader@ImGui@@YAXPEBD@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@CDIJLMHK@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@TableHeade:
; Line 2863
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
; Line 2864
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv89[rbp], rax
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR tv89[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 2867
	cmp	QWORD PTR label$[rbp], 0
	jne	SHORT $LN3@TableHeade
; Line 2868
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR label$[rbp], rax
$LN3@TableHeade:
; Line 2869
	xor	edx, edx
	mov	rcx, QWORD PTR label$[rbp]
	call	?FindRenderedTextEnd@ImGui@@YAPEBDPEBD0@Z ; ImGui::FindRenderedTextEnd
	mov	QWORD PTR label_end$[rbp], rax
; Line 2870
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9b, 1
	mov	r8, QWORD PTR label_end$[rbp]
	mov	rdx, QWORD PTR label$[rbp]
	lea	rcx, QWORD PTR label_size$[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
; Line 2871
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR label_pos$[rbp], rax
; Line 2875
	mov	r8d, DWORD PTR column_n$[rbp]
	mov	rdx, QWORD PTR table$[rbp]
	lea	rcx, QWORD PTR cell_r$[rbp]
	call	?TableGetCellBgRect@ImGui@@YA?AUImRect@@PEBUImGuiTable@@H@Z ; ImGui::TableGetCellBgRect
; Line 2876
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+200]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+140]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR label_size$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR label_height$[rbp], xmm0
; Line 2879
	xorps	xmm0, xmm0
	movss	DWORD PTR w_arrow$[rbp], xmm0
; Line 2880
	xorps	xmm0, xmm0
	movss	DWORD PTR w_sort_text$[rbp], xmm0
; Line 2881
	movzx	eax, BYTE PTR ??_C@_00CNPNBAHC@@
	mov	BYTE PTR sort_order_suf$[rbp], al
	lea	rax, QWORD PTR sort_order_suf$[rbp+1]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 3
	rep stosb
; Line 2882
	movss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR ARROW_SCALE$[rbp], xmm0
; Line 2883
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	je	$LN4@TableHeade
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	$LN4@TableHeade
; Line 2885
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+6528]
	mulss	xmm0, DWORD PTR __real@3f266666
	mov	rax, QWORD PTR g$[rbp]
	addss	xmm0, DWORD PTR [rax+5528]
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR w_arrow$[rbp], xmm0
; Line 2886
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	test	eax, eax
	jle	SHORT $LN5@TableHeade
; Line 2888
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	inc	eax
	mov	r9d, eax
	lea	r8, OFFSET FLAT:??_C@_02DPKJAMEF@?$CFd@
	mov	edx, 4
	lea	rcx, QWORD PTR sort_order_suf$[rbp]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
; Line 2889
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rsp+32], xmm0
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, QWORD PTR sort_order_suf$[rbp]
	lea	rcx, QWORD PTR $T16[rbp]
	call	?CalcTextSize@ImGui@@YA?AUImVec2@@PEBD0_NM@Z ; ImGui::CalcTextSize
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rcx+5552]
	addss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR w_sort_text$[rbp], xmm0
$LN5@TableHeade:
$LN4@TableHeade:
; Line 2894
	movss	xmm0, DWORD PTR label_pos$[rbp]
	addss	xmm0, DWORD PTR label_size$[rbp]
	addss	xmm0, DWORD PTR w_sort_text$[rbp]
	addss	xmm0, DWORD PTR w_arrow$[rbp]
	movss	DWORD PTR max_pos_x$[rbp], xmm0
; Line 2895
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm1, DWORD PTR [rax+56]
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+72]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR column$[rbp]
	movss	DWORD PTR [rax+72], xmm0
; Line 2896
	movss	xmm1, DWORD PTR max_pos_x$[rbp]
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR [rax+76]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR column$[rbp]
	movss	DWORD PTR [rax+76], xmm0
; Line 2899
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+510]
	test	eax, eax
	je	SHORT $LN32@TableHeade
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+496]
	cmp	eax, DWORD PTR column_n$[rbp]
	jne	SHORT $LN32@TableHeade
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+130]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, WORD PTR [rcx+128]
	cmp	eax, ecx
	jne	SHORT $LN32@TableHeade
	mov	BYTE PTR tv215[rbp], 1
	jmp	SHORT $LN33@TableHeade
$LN32@TableHeade:
	mov	BYTE PTR tv215[rbp], 0
$LN33@TableHeade:
	movzx	eax, BYTE PTR tv215[rbp]
	mov	BYTE PTR selected$[rbp], al
; Line 2900
	xor	r8d, r8d
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR window$[rbp]
	call	?GetID@ImGuiWindow@@QEAAIPEBD0@Z	; ImGuiWindow::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 2901
	movss	xmm0, DWORD PTR cell_r$[rbp+4]
	addss	xmm0, DWORD PTR label_height$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm1, DWORD PTR [rax+5564]
	mulss	xmm1, DWORD PTR __real@40000000
	addss	xmm0, xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR cell_r$[rbp+12]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR cell_r$[rbp+8]
	movss	xmm2, DWORD PTR cell_r$[rbp+4]
	movss	xmm1, DWORD PTR cell_r$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	??0ImRect@@QEAA@MMMM@Z			; ImRect::ImRect
; Line 2902
	movss	xmm2, DWORD PTR label_height$[rbp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 2903
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@TableHeade
; Line 2904
	jmp	$LN1@TableHeade
$LN6@TableHeade:
; Line 2911
	mov	DWORD PTR [rsp+32], 4096		; 00001000H
	lea	r9, QWORD PTR held$[rbp]
	lea	r8, QWORD PTR hovered$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?ButtonBehavior@ImGui@@YA_NAEBUImRect@@IPEA_N1H@Z ; ImGui::ButtonBehavior
	mov	BYTE PTR pressed$[rbp], al
; Line 2912
	mov	rax, QWORD PTR g$[rbp]
	mov	ecx, DWORD PTR id$[rbp]
	cmp	DWORD PTR [rax+7260], ecx
	je	SHORT $LN7@TableHeade
; Line 2913
	call	?SetItemAllowOverlap@ImGui@@YAXXZ	; ImGui::SetItemAllowOverlap
$LN7@TableHeade:
; Line 2914
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	jne	SHORT $LN10@TableHeade
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	jne	SHORT $LN10@TableHeade
	movzx	eax, BYTE PTR selected$[rbp]
	test	eax, eax
	je	SHORT $LN8@TableHeade
$LN10@TableHeade:
; Line 2916
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN36@TableHeade
	mov	DWORD PTR tv300[rbp], 26
	jmp	SHORT $LN37@TableHeade
$LN36@TableHeade:
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN34@TableHeade
	mov	DWORD PTR tv297[rbp], 25
	jmp	SHORT $LN35@TableHeade
$LN34@TableHeade:
	mov	DWORD PTR tv297[rbp], 24
$LN35@TableHeade:
	mov	eax, DWORD PTR tv297[rbp]
	mov	DWORD PTR tv300[rbp], eax
$LN37@TableHeade:
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, DWORD PTR tv300[rbp]
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR col$10[rbp], eax
; Line 2918
	mov	rax, QWORD PTR table$[rbp]
	mov	r8d, DWORD PTR [rax+124]
	mov	edx, DWORD PTR col$10[rbp]
	mov	ecx, 3
	call	?TableSetBgColor@ImGui@@YAXHIH@Z	; ImGui::TableSetBgColor
; Line 2919
	jmp	SHORT $LN9@TableHeade
$LN8@TableHeade:
; Line 2923
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	shl	eax, 16
	sar	eax, 16
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN11@TableHeade
; Line 2924
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR tv321[rbp], eax
	movss	xmm1, DWORD PTR __real@3f800000
	mov	ecx, 42					; 0000002aH
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv319[rbp], eax
	mov	r8d, DWORD PTR tv321[rbp]
	mov	edx, DWORD PTR tv319[rbp]
	mov	ecx, 3
	call	?TableSetBgColor@ImGui@@YAXHIH@Z	; ImGui::TableSetBgColor
$LN11@TableHeade:
$LN9@TableHeade:
; Line 2926
	mov	r8d, 10
	mov	edx, DWORD PTR id$[rbp]
	lea	rcx, QWORD PTR bb$[rbp]
	call	?RenderNavHighlight@ImGui@@YAXAEBUImRect@@IH@Z ; ImGui::RenderNavHighlight
; Line 2927
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	SHORT $LN12@TableHeade
; Line 2928
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$[rbp]
	mov	BYTE PTR [rax+489], cl
$LN12@TableHeade:
; Line 2929
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+5548]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR window$[rbp]
	movss	xmm1, DWORD PTR [rax+220]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR window$[rbp]
	movss	DWORD PTR [rax+220], xmm0
; Line 2933
	movzx	eax, BYTE PTR held$[rbp]
	test	eax, eax
	je	$LN13@TableHeade
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 2
	test	eax, eax
	je	$LN13@TableHeade
	movss	xmm1, DWORD PTR __real@bf800000
	xor	ecx, ecx
	call	?IsMouseDragging@ImGui@@YA_NHM@Z	; ImGui::IsMouseDragging
	movzx	eax, al
	test	eax, eax
	je	$LN13@TableHeade
	mov	rax, QWORD PTR g$[rbp]
	movzx	eax, BYTE PTR [rax+8012]
	test	eax, eax
	jne	$LN13@TableHeade
; Line 2936
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR column_n$[rbp]
	mov	BYTE PTR [rax+490], cl
; Line 2937
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, WORD PTR [rcx+128]
	mov	WORD PTR [rax+130], cx
; Line 2940
	mov	rax, QWORD PTR g$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+952]
	jbe	$LN14@TableHeade
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR cell_r$[rbp]
	comiss	xmm0, DWORD PTR [rax+296]
	jbe	$LN14@TableHeade
; Line 2941
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+84]
	cmp	eax, -1
	je	SHORT $LN38@TableHeade
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv373[rbp], rax
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+84]
	mov	edx, eax
	mov	rcx, QWORD PTR tv373[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR tv374[rbp], rax
	jmp	SHORT $LN39@TableHeade
$LN38@TableHeade:
	mov	QWORD PTR tv374[rbp], 0
$LN39@TableHeade:
	mov	rax, QWORD PTR tv374[rbp]
	mov	QWORD PTR prev_column$11[rbp], rax
	cmp	QWORD PTR prev_column$11[rbp], 0
	je	$LN15@TableHeade
; Line 2942
	mov	rax, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR prev_column$11[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN16@TableHeade
; Line 2943
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+83]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+499]
	cmp	eax, ecx
	jge	SHORT $LN40@TableHeade
	mov	DWORD PTR tv386[rbp], 1
	jmp	SHORT $LN41@TableHeade
$LN40@TableHeade:
	mov	DWORD PTR tv386[rbp], 0
$LN41@TableHeade:
	mov	rax, QWORD PTR prev_column$11[rbp]
	movsx	eax, BYTE PTR [rax+83]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+499]
	cmp	eax, ecx
	jge	SHORT $LN42@TableHeade
	mov	DWORD PTR tv392[rbp], 1
	jmp	SHORT $LN43@TableHeade
$LN42@TableHeade:
	mov	DWORD PTR tv392[rbp], 0
$LN43@TableHeade:
	mov	eax, DWORD PTR tv392[rbp]
	cmp	DWORD PTR tv386[rbp], eax
	jne	SHORT $LN17@TableHeade
; Line 2944
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+491], -1
$LN17@TableHeade:
$LN16@TableHeade:
$LN15@TableHeade:
$LN14@TableHeade:
; Line 2945
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+952]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	$LN18@TableHeade
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	comiss	xmm0, DWORD PTR cell_r$[rbp+8]
	jbe	$LN18@TableHeade
; Line 2946
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+85]
	cmp	eax, -1
	je	SHORT $LN44@TableHeade
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv413[rbp], rax
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+85]
	mov	edx, eax
	mov	rcx, QWORD PTR tv413[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR tv414[rbp], rax
	jmp	SHORT $LN45@TableHeade
$LN44@TableHeade:
	mov	QWORD PTR tv414[rbp], 0
$LN45@TableHeade:
	mov	rax, QWORD PTR tv414[rbp]
	mov	QWORD PTR next_column$12[rbp], rax
	cmp	QWORD PTR next_column$12[rbp], 0
	je	$LN19@TableHeade
; Line 2947
	mov	rax, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR next_column$12[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN20@TableHeade
; Line 2948
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+83]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+499]
	cmp	eax, ecx
	jge	SHORT $LN46@TableHeade
	mov	DWORD PTR tv426[rbp], 1
	jmp	SHORT $LN47@TableHeade
$LN46@TableHeade:
	mov	DWORD PTR tv426[rbp], 0
$LN47@TableHeade:
	mov	rax, QWORD PTR next_column$12[rbp]
	movsx	eax, BYTE PTR [rax+83]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, BYTE PTR [rcx+499]
	cmp	eax, ecx
	jge	SHORT $LN48@TableHeade
	mov	DWORD PTR tv432[rbp], 1
	jmp	SHORT $LN49@TableHeade
$LN48@TableHeade:
	mov	DWORD PTR tv432[rbp], 0
$LN49@TableHeade:
	mov	eax, DWORD PTR tv432[rbp]
	cmp	DWORD PTR tv426[rbp], eax
	jne	SHORT $LN21@TableHeade
; Line 2949
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+491], 1
$LN21@TableHeade:
$LN20@TableHeade:
$LN19@TableHeade:
$LN18@TableHeade:
$LN13@TableHeade:
; Line 2953
	movss	xmm0, DWORD PTR cell_r$[rbp+8]
	subss	xmm0, DWORD PTR w_arrow$[rbp]
	subss	xmm0, DWORD PTR w_sort_text$[rbp]
	movss	DWORD PTR ellipsis_max$[rbp], xmm0
; Line 2954
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 8
	test	eax, eax
	je	$LN22@TableHeade
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	$LN22@TableHeade
; Line 2956
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	cmp	eax, -1
	je	$LN23@TableHeade
; Line 2958
	movss	xmm0, DWORD PTR cell_r$[rbp+8]
	subss	xmm0, DWORD PTR w_arrow$[rbp]
	subss	xmm0, DWORD PTR w_sort_text$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR cell_r$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR x$13[rbp], xmm0
; Line 2959
	movss	xmm0, DWORD PTR label_pos$[rbp+4]
	movss	DWORD PTR y$14[rbp], xmm0
; Line 2960
	mov	rax, QWORD PTR column$[rbp]
	movsx	eax, BYTE PTR [rax+86]
	test	eax, eax
	jle	SHORT $LN24@TableHeade
; Line 2962
	movss	xmm1, DWORD PTR __real@3f333333
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	edx, eax
	xor	ecx, ecx
	call	?PushStyleColor@ImGui@@YAXHI@Z		; ImGui::PushStyleColor
; Line 2963
	mov	rax, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR x$13[rbp]
	addss	xmm0, DWORD PTR [rax+5552]
	movss	xmm2, DWORD PTR y$14[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9b, 1
	xor	r8d, r8d
	lea	rdx, QWORD PTR sort_order_suf$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?RenderText@ImGui@@YAXUImVec2@@PEBD1_N@Z ; ImGui::RenderText
; Line 2964
	mov	ecx, 1
	call	?PopStyleColor@ImGui@@YAXH@Z		; ImGui::PopStyleColor
; Line 2965
	movss	xmm0, DWORD PTR x$13[rbp]
	addss	xmm0, DWORD PTR w_sort_text$[rbp]
	movss	DWORD PTR x$13[rbp], xmm0
$LN24@TableHeade:
; Line 2967
	mov	rax, QWORD PTR column$[rbp]
	movzx	eax, BYTE PTR [rax+101]
	and	al, 3
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN50@TableHeade
	mov	DWORD PTR tv478[rbp], 2
	jmp	SHORT $LN51@TableHeade
$LN50@TableHeade:
	mov	DWORD PTR tv478[rbp], 3
$LN51@TableHeade:
	movss	xmm1, DWORD PTR __real@3f800000
	xor	ecx, ecx
	call	?GetColorU32@ImGui@@YAIHM@Z		; ImGui::GetColorU32
	mov	DWORD PTR tv495[rbp], eax
	movss	xmm2, DWORD PTR y$14[rbp]
	movss	xmm1, DWORD PTR x$13[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T20[rbp], rax
	mov	rax, QWORD PTR $T20[rbp]
	mov	QWORD PTR $T21[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv492[rbp], rax
	movss	xmm0, DWORD PTR __real@3f266666
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR tv478[rbp]
	mov	r8d, DWORD PTR tv495[rbp]
	mov	rdx, QWORD PTR $T21[rbp]
	mov	rcx, QWORD PTR tv492[rbp]
	call	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
$LN23@TableHeade:
; Line 2971
	movzx	eax, BYTE PTR pressed$[rbp]
	test	eax, eax
	je	SHORT $LN25@TableHeade
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+490]
	cmp	eax, DWORD PTR column_n$[rbp]
	je	SHORT $LN25@TableHeade
; Line 2973
	mov	rcx, QWORD PTR column$[rbp]
	call	?TableGetColumnNextSortDirection@ImGui@@YAHPEAUImGuiTableColumn@@@Z ; ImGui::TableGetColumnNextSortDirection
	mov	DWORD PTR sort_direction$15[rbp], eax
; Line 2974
	mov	rax, QWORD PTR g$[rbp]
	movzx	r8d, BYTE PTR [rax+321]
	mov	edx, DWORD PTR sort_direction$15[rbp]
	mov	ecx, DWORD PTR column_n$[rbp]
	call	?TableSetColumnSortDirection@ImGui@@YAXHH_N@Z ; ImGui::TableSetColumnSortDirection
$LN25@TableHeade:
$LN22@TableHeade:
; Line 2981
	movss	xmm0, DWORD PTR label_pos$[rbp+4]
	addss	xmm0, DWORD PTR label_height$[rbp]
	mov	rax, QWORD PTR g$[rbp]
	addss	xmm0, DWORD PTR [rax+5532]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR ellipsis_max$[rbp]
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv530[rbp], rax
	mov	rax, QWORD PTR window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	mov	QWORD PTR tv528[rbp], rax
	lea	rax, QWORD PTR label_size$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR label_end$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR label$[rbp]
	mov	QWORD PTR [rsp+40], rax
	movss	xmm0, DWORD PTR ellipsis_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR ellipsis_max$[rbp]
	mov	r8, QWORD PTR tv530[rbp]
	lea	rdx, QWORD PTR label_pos$[rbp]
	mov	rcx, QWORD PTR tv528[rbp]
	call	?RenderTextEllipsis@ImGui@@YAXPEAUImDrawList@@AEBUImVec2@@1MMPEBD2PEBU3@@Z ; ImGui::RenderTextEllipsis
; Line 2983
	movss	xmm0, DWORD PTR ellipsis_max$[rbp]
	subss	xmm0, DWORD PTR label_pos$[rbp]
	movss	xmm1, DWORD PTR label_size$[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN52@TableHeade
	mov	BYTE PTR tv533[rbp], 1
	jmp	SHORT $LN53@TableHeade
$LN52@TableHeade:
	mov	BYTE PTR tv533[rbp], 0
$LN53@TableHeade:
	movzx	eax, BYTE PTR tv533[rbp]
	mov	BYTE PTR text_clipped$[rbp], al
; Line 2984
	movzx	eax, BYTE PTR text_clipped$[rbp]
	test	eax, eax
	je	SHORT $LN26@TableHeade
	movzx	eax, BYTE PTR hovered$[rbp]
	test	eax, eax
	je	SHORT $LN26@TableHeade
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+7256]
	comiss	xmm0, DWORD PTR [rcx+12332]
	jbe	SHORT $LN26@TableHeade
; Line 2985
	mov	rax, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR label_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, QWORD PTR label$[rbp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:??_C@_04EBNJJJJI@?$CF?4?$CKs@
	call	?SetTooltip@ImGui@@YAXPEBDZZ		; ImGui::SetTooltip
$LN26@TableHeade:
; Line 2988
	mov	ecx, 1
	call	?IsMouseReleased@ImGui@@YA_NH@Z		; ImGui::IsMouseReleased
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@TableHeade
	xor	ecx, ecx
	call	?IsItemHovered@ImGui@@YA_NH@Z		; ImGui::IsItemHovered
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@TableHeade
; Line 2989
	mov	ecx, DWORD PTR column_n$[rbp]
	call	?TableOpenContextMenu@ImGui@@YAXH@Z	; ImGui::TableOpenContextMenu
$LN27@TableHeade:
$LN1@TableHeade:
; Line 2990
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?TableHeader@ImGui@@YAXPEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1784]
	pop	rdi
	pop	rbp
	ret	0
?TableHeader@ImGui@@YAXPEBD@Z ENDP			; ImGui::TableHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableHeadersRow@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
row_y1$ = 68
row_height$ = 100
columns_count$ = 132
column_n$4 = 164
name$5 = 200
mouse_pos$ = 232
$T6 = 452
tv130 = 472
__$ArrayPad$ = 480
?TableHeadersRow@ImGui@@YAXXZ PROC			; ImGui::TableHeadersRow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 2812
$LN15:
	push	rbp
	push	rdi
	sub	rsp, 536				; 00000218H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 78					; 0000004eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2813
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 2814
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 2815
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN11@TableHeade
	lea	rax, OFFSET FLAT:??_C@_0DD@NCKBBGOL@Need?5to?5call?5TableHeadersRow?$CI?$CJ?5@
	test	rax, rax
	jne	SHORT $LN12@TableHeade
$LN11@TableHeade:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableHeadersRow@ImGui@@YAXXZ@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1IG@FPFBNANE@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@TableHeade:
; Line 2818
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN5@TableHeade
; Line 2819
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateLayout
$LN5@TableHeade:
; Line 2822
	lea	rcx, QWORD PTR $T6[rbp]
	call	?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR row_y1$[rbp], xmm0
; Line 2823
	call	?TableGetHeaderRowHeight@ImGui@@YAMXZ	; ImGui::TableGetHeaderRowHeight
	movss	DWORD PTR row_height$[rbp], xmm0
; Line 2824
	movss	xmm1, DWORD PTR row_height$[rbp]
	mov	ecx, 1
	call	?TableNextRow@ImGui@@YAXHM@Z		; ImGui::TableNextRow
; Line 2825
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+519]
	test	eax, eax
	je	SHORT $LN6@TableHeade
; Line 2826
	jmp	$LN1@TableHeade
$LN6@TableHeade:
; Line 2828
	call	?TableGetColumnCount@ImGui@@YAHXZ	; ImGui::TableGetColumnCount
	mov	DWORD PTR columns_count$[rbp], eax
; Line 2829
	mov	DWORD PTR column_n$4[rbp], 0
	jmp	SHORT $LN4@TableHeade
$LN2@TableHeade:
	mov	eax, DWORD PTR column_n$4[rbp]
	inc	eax
	mov	DWORD PTR column_n$4[rbp], eax
$LN4@TableHeade:
	mov	eax, DWORD PTR columns_count$[rbp]
	cmp	DWORD PTR column_n$4[rbp], eax
	jge	$LN3@TableHeade
; Line 2831
	mov	ecx, DWORD PTR column_n$4[rbp]
	call	?TableSetColumnIndex@ImGui@@YA_NH@Z	; ImGui::TableSetColumnIndex
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@TableHeade
; Line 2832
	jmp	SHORT $LN2@TableHeade
$LN7@TableHeade:
; Line 2837
	mov	ecx, DWORD PTR column_n$4[rbp]
	call	?TableGetColumnFlags@ImGui@@YAHH@Z	; ImGui::TableGetColumnFlags
	and	eax, 4096				; 00001000H
	test	eax, eax
	je	SHORT $LN13@TableHeade
	lea	rax, OFFSET FLAT:??_C@_00CNPNBAHC@@
	mov	QWORD PTR tv130[rbp], rax
	jmp	SHORT $LN14@TableHeade
$LN13@TableHeade:
	mov	ecx, DWORD PTR column_n$4[rbp]
	call	?TableGetColumnName@ImGui@@YAPEBDH@Z	; ImGui::TableGetColumnName
	mov	QWORD PTR tv130[rbp], rax
$LN14@TableHeade:
	mov	rax, QWORD PTR tv130[rbp]
	mov	QWORD PTR name$5[rbp], rax
; Line 2838
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	mov	rcx, QWORD PTR table$[rbp]
	imul	eax, DWORD PTR [rcx+116]
	add	eax, DWORD PTR column_n$4[rbp]
	mov	ecx, eax
	call	?PushID@ImGui@@YAXH@Z			; ImGui::PushID
; Line 2839
	mov	rcx, QWORD PTR name$5[rbp]
	call	?TableHeader@ImGui@@YAXPEBD@Z		; ImGui::TableHeader
; Line 2840
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 2841
	jmp	$LN2@TableHeade
$LN3@TableHeade:
; Line 2844
	lea	rcx, QWORD PTR mouse_pos$[rbp]
	call	?GetMousePos@ImGui@@YA?AUImVec2@@XZ	; ImGui::GetMousePos
; Line 2845
	mov	ecx, 1
	call	?IsMouseReleased@ImGui@@YA_NH@Z		; ImGui::IsMouseReleased
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@TableHeade
	call	?TableGetHoveredColumn@ImGui@@YAHXZ	; ImGui::TableGetHoveredColumn
	cmp	eax, DWORD PTR columns_count$[rbp]
	jne	SHORT $LN8@TableHeade
; Line 2846
	movss	xmm0, DWORD PTR mouse_pos$[rbp+4]
	comiss	xmm0, DWORD PTR row_y1$[rbp]
	jb	SHORT $LN9@TableHeade
	movss	xmm0, DWORD PTR row_y1$[rbp]
	addss	xmm0, DWORD PTR row_height$[rbp]
	comiss	xmm0, DWORD PTR mouse_pos$[rbp+4]
	jbe	SHORT $LN9@TableHeade
; Line 2847
	mov	ecx, -1
	call	?TableOpenContextMenu@ImGui@@YAXH@Z	; ImGui::TableOpenContextMenu
$LN9@TableHeade:
$LN8@TableHeade:
$LN1@TableHeade:
; Line 2848
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?TableHeadersRow@ImGui@@YAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?TableHeadersRow@ImGui@@YAXXZ ENDP			; ImGui::TableHeadersRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetupScrollFreeze@ImGui@@YAXHH@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
column_n$1 = 68
order_n$2 = 100
tv168 = 308
tv162 = 308
tv153 = 308
tv146 = 308
tv137 = 308
tv224 = 312
tv197 = 312
tv179 = 312
tv236 = 320
tv193 = 320
tv231 = 328
tv218 = 328
tv234 = 336
tv212 = 336
tv208 = 344
tv216 = 352
columns$ = 400
rows$ = 408
?TableSetupScrollFreeze@ImGui@@YAXHH@Z PROC		; ImGui::TableSetupScrollFreeze, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1467
$LN27:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1468
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1469
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1470
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN7@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0DE@JMKEADIJ@Need?5to?5call?5TableSetupColumn?$CI?$CJ@
	test	rax, rax
	jne	SHORT $LN8@TableSetup
$LN7@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1II@MMHPDEP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@TableSetup:
; Line 1471
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN9@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0DC@CMJJAIP@Need?5to?5call?5TableSetupColumn?$CI?$CJ@
	test	rax, rax
	jne	SHORT $LN10@TableSetup
$LN9@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1KM@MPIBPMGF@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@TableSetup:
; Line 1472
	cmp	DWORD PTR columns$[rbp], 0
	jl	SHORT $LN11@TableSetup
	cmp	DWORD PTR columns$[rbp], 64		; 00000040H
	jl	SHORT $LN12@TableSetup
$LN11@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@IBKBIPFD@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@TableSetup:
; Line 1473
	cmp	DWORD PTR rows$[rbp], 0
	jl	SHORT $LN13@TableSetup
	cmp	DWORD PTR rows$[rbp], 128		; 00000080H
	jl	SHORT $LN14@TableSetup
$LN13@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupScrollFreeze@ImGui@@YAXHH@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DA@CGNBCADH@?$AAr?$AAo?$AAw?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAr?$AAo@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@TableSetup:
; Line 1475
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN15@TableSetup
	mov	rax, QWORD PTR table$[rbp]
	mov	edx, DWORD PTR [rax+116]
	mov	ecx, DWORD PTR columns$[rbp]
	call	??$ImMin@H@@YAHHH@Z			; ImMin<int>
	movsx	eax, al
	mov	DWORD PTR tv137[rbp], eax
	jmp	SHORT $LN16@TableSetup
$LN15@TableSetup:
	mov	DWORD PTR tv137[rbp], 0
$LN16@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv137[rbp]
	mov	BYTE PTR [rax+499], cl
; Line 1476
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR [rax+92]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN26@TableSetup
	je	SHORT $LN17@TableSetup
$LN26@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+499]
	mov	DWORD PTR tv146[rbp], eax
	jmp	SHORT $LN18@TableSetup
$LN17@TableSetup:
	mov	DWORD PTR tv146[rbp], 0
$LN18@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv146[rbp]
	mov	BYTE PTR [rax+500], cl
; Line 1477
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 33554432				; 02000000H
	test	eax, eax
	je	SHORT $LN19@TableSetup
	movsx	eax, BYTE PTR rows$[rbp]
	mov	DWORD PTR tv153[rbp], eax
	jmp	SHORT $LN20@TableSetup
$LN19@TableSetup:
	mov	DWORD PTR tv153[rbp], 0
$LN20@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv153[rbp]
	mov	BYTE PTR [rax+497], cl
; Line 1478
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR [rax+96]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN25@TableSetup
	je	SHORT $LN21@TableSetup
$LN25@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+497]
	mov	DWORD PTR tv162[rbp], eax
	jmp	SHORT $LN22@TableSetup
$LN21@TableSetup:
	mov	DWORD PTR tv162[rbp], 0
$LN22@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv162[rbp]
	mov	BYTE PTR [rax+498], cl
; Line 1479
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+498]
	test	eax, eax
	jne	SHORT $LN23@TableSetup
	mov	DWORD PTR tv168[rbp], 1
	jmp	SHORT $LN24@TableSetup
$LN23@TableSetup:
	mov	DWORD PTR tv168[rbp], 0
$LN24@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR tv168[rbp]
	mov	BYTE PTR [rax+516], cl
; Line 1482
	mov	DWORD PTR column_n$1[rbp], 0
	jmp	SHORT $LN4@TableSetup
$LN2@TableSetup:
	mov	eax, DWORD PTR column_n$1[rbp]
	inc	eax
	mov	DWORD PTR column_n$1[rbp], eax
$LN4@TableSetup:
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+499]
	cmp	DWORD PTR column_n$1[rbp], eax
	jge	$LN3@TableSetup
; Line 1484
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv179[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv179[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR order_n$2[rbp], eax
; Line 1485
	mov	eax, DWORD PTR column_n$1[rbp]
	cmp	DWORD PTR order_n$2[rbp], eax
	je	$LN5@TableSetup
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+499]
	cmp	DWORD PTR order_n$2[rbp], eax
	jl	$LN5@TableSetup
; Line 1487
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv197[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv193[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv193[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR tv197[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	add	rax, 82					; 00000052H
	mov	QWORD PTR tv218[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv212[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv208[rbp], rax
	mov	edx, DWORD PTR order_n$2[rbp]
	mov	rcx, QWORD PTR tv208[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	movsx	eax, BYTE PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR tv212[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	add	rax, 82					; 00000052H
	mov	QWORD PTR tv216[rbp], rax
	mov	rdx, QWORD PTR tv218[rbp]
	mov	rcx, QWORD PTR tv216[rbp]
	call	??$ImSwap@C@@YAXAEAC0@Z			; ImSwap<signed char>
; Line 1488
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv224[rbp], rax
	mov	edx, DWORD PTR column_n$1[rbp]
	mov	rcx, QWORD PTR tv224[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	mov	QWORD PTR tv236[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv231[rbp], rax
	mov	edx, DWORD PTR order_n$2[rbp]
	mov	rcx, QWORD PTR tv231[rbp]
	call	??A?$ImSpan@C@@QEAAAEACH@Z		; ImSpan<signed char>::operator[]
	mov	QWORD PTR tv234[rbp], rax
	mov	rdx, QWORD PTR tv236[rbp]
	mov	rcx, QWORD PTR tv234[rbp]
	call	??$ImSwap@C@@YAXAEAC0@Z			; ImSwap<signed char>
$LN5@TableSetup:
; Line 1490
	jmp	$LN2@TableSetup
$LN3@TableSetup:
; Line 1491
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?TableSetupScrollFreeze@ImGui@@YAXHH@Z ENDP		; ImGui::TableSetupScrollFreeze
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetupColumn@ImGui@@YAXPEBDHMI@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
column$ = 72
tv212 = 276
tv192 = 276
tv238 = 280
tv142 = 280
tv246 = 288
tv247 = 296
label$ = 336
flags$ = 344
init_width_or_weight$ = 352
user_id$ = 360
?TableSetupColumn@ImGui@@YAXPEBDHMI@Z PROC		; ImGui::TableSetupColumn, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1399
$LN31:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1400
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1401
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1402
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN16@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0DE@JMKEADIJ@Need?5to?5call?5TableSetupColumn?$CI?$CJ@
	test	rax, rax
	jne	SHORT $LN17@TableSetup
$LN16@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1II@MMHPDEP@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN17@TableSetup:
; Line 1403
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN18@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0DH@KOGIGLHC@Need?5to?5call?5call?5TableSetupCol@
	test	rax, rax
	jne	SHORT $LN19@TableSetup
$LN18@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LG@IFCOIHC@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAI?$AAs?$AAL?$AAa?$AAy?$AAo?$AAu?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@TableSetup:
; Line 1404
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 251658240				; 0f000000H
	test	eax, eax
	jne	SHORT $LN20@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0DI@CBJAIEBI@Illegal?5to?5pass?5StatusMask?5valu@
	test	rax, rax
	jne	SHORT $LN21@TableSetup
$LN20@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1NM@DDJLAMJK@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAT@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@TableSetup:
; Line 1405
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+483]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jl	SHORT $LN2@TableSetup
; Line 1407
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+483]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jge	SHORT $LN22@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0CK@FPBLGODL@Called?5TableSetupColumn?$CI?$CJ?5too?5m@
	test	rax, rax
	jne	SHORT $LN23@TableSetup
$LN22@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LO@INHFIFIG@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAD?$AAe?$AAc?$AAl?$AAC?$AAo?$AAl@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@TableSetup:
; Line 1408
	jmp	$LN1@TableSetup
$LN2@TableSetup:
; Line 1411
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv142[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+483]
	mov	edx, eax
	mov	rcx, QWORD PTR tv142[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$[rbp], rax
; Line 1412
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+483]
	inc	al
	mov	rcx, QWORD PTR table$[rbp]
	mov	BYTE PTR [rcx+483], al
; Line 1416
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+517]
	test	eax, eax
	je	SHORT $LN3@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 24
	test	eax, eax
	jne	SHORT $LN3@TableSetup
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	jne	SHORT $LN3@TableSetup
; Line 1417
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	jb	SHORT $LN24@TableSetup
	lea	rax, OFFSET FLAT:??_C@_0FM@GOCDHGH@Can?5only?5specify?5width?1weight?5i@
	test	rax, rax
	jne	SHORT $LN25@TableSetup
$LN24@TableSetup:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetupColumn@ImGui@@YAXPEBDHMI@Z@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1PM@LKIEMPHI@?$AAi?$AAn?$AAi?$AAt?$AA_?$AAw?$AAi?$AAd?$AAt?$AAh?$AA_?$AAo?$AAr?$AA_?$AAw@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@TableSetup:
$LN3@TableSetup:
; Line 1421
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 24
	test	eax, eax
	jne	SHORT $LN4@TableSetup
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN4@TableSetup
; Line 1422
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 57344				; 0000e000H
	cmp	eax, 8192				; 00002000H
	je	SHORT $LN6@TableSetup
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 57344				; 0000e000H
	cmp	eax, 16384				; 00004000H
	jne	SHORT $LN5@TableSetup
$LN6@TableSetup:
; Line 1423
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 16
	mov	DWORD PTR flags$[rbp], eax
$LN5@TableSetup:
$LN4@TableSetup:
; Line 1425
	mov	r8d, DWORD PTR flags$[rbp]
	mov	rdx, QWORD PTR column$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSetupColumnFlags@@YAXPEAUImGuiTable@@PEAUImGuiTableColumn@@H@Z ; TableSetupColumnFlags
; Line 1426
	mov	rax, QWORD PTR column$[rbp]
	mov	ecx, DWORD PTR user_id$[rbp]
	mov	DWORD PTR [rax+48], ecx
; Line 1427
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR flags$[rbp], eax
; Line 1430
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	movss	DWORD PTR [rax+28], xmm0
; Line 1431
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+507]
	test	eax, eax
	je	$LN7@TableSetup
; Line 1434
	mov	rax, QWORD PTR column$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+16]
	jbe	$LN8@TableSetup
	mov	rax, QWORD PTR column$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+24]
	jbe	$LN8@TableSetup
; Line 1436
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN9@TableSetup
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@TableSetup
; Line 1437
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	movss	DWORD PTR [rax+16], xmm0
$LN9@TableSetup:
; Line 1438
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN10@TableSetup
; Line 1439
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN26@TableSetup
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	movss	DWORD PTR tv192[rbp], xmm0
	jmp	SHORT $LN27@TableSetup
$LN26@TableSetup:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv192[rbp], xmm0
$LN27@TableSetup:
	mov	rax, QWORD PTR column$[rbp]
	movss	xmm0, DWORD PTR tv192[rbp]
	movss	DWORD PTR [rax+24], xmm0
$LN10@TableSetup:
; Line 1442
	movss	xmm0, DWORD PTR init_width_or_weight$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN11@TableSetup
; Line 1443
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+99], 0
$LN11@TableSetup:
$LN8@TableSetup:
; Line 1447
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN12@TableSetup
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+104]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN12@TableSetup
; Line 1448
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+92], 0
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+91], 0
$LN12@TableSetup:
; Line 1449
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN13@TableSetup
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+104]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN13@TableSetup
; Line 1451
	mov	rax, QWORD PTR column$[rbp]
	mov	BYTE PTR [rax+86], 0
; Line 1452
	mov	rax, QWORD PTR column$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN28@TableSetup
	mov	DWORD PTR tv212[rbp], 2
	jmp	SHORT $LN29@TableSetup
$LN28@TableSetup:
	mov	DWORD PTR tv212[rbp], 1
$LN29@TableSetup:
	movzx	eax, BYTE PTR tv212[rbp]
	and	al, 3
	mov	rcx, QWORD PTR column$[rbp]
	movzx	ecx, BYTE PTR [rcx+101]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR column$[rbp]
	mov	BYTE PTR [rcx+101], al
$LN13@TableSetup:
$LN7@TableSetup:
; Line 1457
	mov	eax, -1
	mov	rcx, QWORD PTR column$[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 1458
	cmp	QWORD PTR label$[rbp], 0
	je	$LN14@TableSetup
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR label$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN14@TableSetup
; Line 1460
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 408				; 00000198H
	mov	rcx, rax
	call	?size@ImGuiTextBuffer@@QEBAHXZ		; ImGuiTextBuffer::size
	mov	rcx, QWORD PTR column$[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 1461
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 408				; 00000198H
	mov	QWORD PTR tv238[rbp], rax
	mov	rax, QWORD PTR label$[rbp]
	mov	QWORD PTR tv246[rbp], rax
	mov	QWORD PTR tv247[rbp], -1
$LL30@TableSetup:
	inc	QWORD PTR tv247[rbp]
	mov	rax, QWORD PTR tv246[rbp]
	mov	rcx, QWORD PTR tv247[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL30@TableSetup
	mov	rax, QWORD PTR tv247[rbp]
	mov	rcx, QWORD PTR label$[rbp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	r8, rax
	mov	rdx, QWORD PTR label$[rbp]
	mov	rcx, QWORD PTR tv238[rbp]
	call	?append@ImGuiTextBuffer@@QEAAXPEBD0@Z	; ImGuiTextBuffer::append
$LN14@TableSetup:
$LN1@TableSetup:
; Line 1463
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?TableSetupColumn@ImGui@@YAXPEBDHMI@Z ENDP		; ImGui::TableSetupColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableSetColumnIndex@ImGui@@YA_NH@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
tv131 = 248
tv85 = 256
column_n$ = 304
?TableSetColumnIndex@ImGui@@YA_NH@Z PROC		; ImGui::TableSetColumnIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1880
$LN10:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1881
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1882
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1883
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableSetCo
; Line 1884
	xor	al, al
	jmp	$LN1@TableSetCo
$LN2@TableSetCo:
; Line 1886
	mov	rax, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR column_n$[rbp]
	cmp	DWORD PTR [rax+124], ecx
	je	SHORT $LN3@TableSetCo
; Line 1888
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+124], -1
	je	SHORT $LN4@TableSetCo
; Line 1889
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableEndCell
$LN4@TableSetCo:
; Line 1890
	cmp	DWORD PTR column_n$[rbp], 0
	jl	SHORT $LN6@TableSetCo
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+116], 0
	jne	SHORT $LN7@TableSetCo
$LN6@TableSetCo:
	mov	eax, DWORD PTR ?__LINE__Var@?0??TableSetColumnIndex@ImGui@@YA_NH@Z@4JA
	add	eax, 10
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EK@MBNMJGKK@?$AAc?$AAo?$AAl?$AAu?$AAm?$AAn?$AA_?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@TableSetCo:
; Line 1891
	mov	edx, DWORD PTR column_n$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableBeginCell
$LN3@TableSetCo:
; Line 1896
	mov	eax, DWORD PTR column_n$[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv131[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv131[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN8@TableSetCo
	mov	DWORD PTR tv85[rbp], 1
	jmp	SHORT $LN9@TableSetCo
$LN8@TableSetCo:
	mov	DWORD PTR tv85[rbp], 0
$LN9@TableSetCo:
	movzx	eax, BYTE PTR tv85[rbp]
$LN1@TableSetCo:
; Line 1897
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?TableSetColumnIndex@ImGui@@YA_NH@Z ENDP		; ImGui::TableSetColumnIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableNextColumn@ImGui@@YA_NXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
column_n$ = 68
tv140 = 280
tv89 = 288
?TableNextColumn@ImGui@@YA_NXZ PROC			; ImGui::TableNextColumn, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1901
$LN9:
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1902
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1903
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1904
	cmp	QWORD PTR table$[rbp], 0
	jne	SHORT $LN2@TableNextC
; Line 1905
	xor	al, al
	jmp	$LN1@TableNextC
$LN2@TableNextC:
; Line 1907
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+506]
	test	eax, eax
	je	SHORT $LN3@TableNextC
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	inc	eax
	mov	rcx, QWORD PTR table$[rbp]
	cmp	eax, DWORD PTR [rcx+116]
	jge	SHORT $LN3@TableNextC
; Line 1909
	mov	rax, QWORD PTR table$[rbp]
	cmp	DWORD PTR [rax+124], -1
	je	SHORT $LN5@TableNextC
; Line 1910
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableEndCell@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableEndCell
$LN5@TableNextC:
; Line 1911
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableBeginCell
; Line 1912
	jmp	SHORT $LN4@TableNextC
$LN3@TableNextC:
; Line 1915
	xorps	xmm1, xmm1
	xor	ecx, ecx
	call	?TableNextRow@ImGui@@YAXHM@Z		; ImGui::TableNextRow
; Line 1916
	xor	edx, edx
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableBeginCell@ImGui@@YAXPEAUImGuiTable@@H@Z ; ImGui::TableBeginCell
$LN4@TableNextC:
; Line 1921
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+124]
	mov	DWORD PTR column_n$[rbp], eax
; Line 1922
	mov	eax, DWORD PTR column_n$[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv140[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv140[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+96]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN7@TableNextC
	mov	DWORD PTR tv89[rbp], 1
	jmp	SHORT $LN8@TableNextC
$LN7@TableNextC:
	mov	DWORD PTR tv89[rbp], 0
$LN8@TableNextC:
	movzx	eax, BYTE PTR tv89[rbp]
$LN1@TableNextC:
; Line 1923
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?TableNextColumn@ImGui@@YA_NXZ ENDP			; ImGui::TableNextColumn
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TableNextRow@ImGui@@YAXHM@Z
_TEXT	SEGMENT
g$ = 8
table$ = 40
row_flags$ = 288
row_min_height$ = 296
?TableNextRow@ImGui@@YAXHM@Z PROC			; ImGui::TableNextRow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1668
$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1669
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1670
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1672
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN2@TableNextR
; Line 1673
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateLayout
$LN2@TableNextR:
; Line 1674
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+506]
	test	eax, eax
	je	SHORT $LN3@TableNextR
; Line 1675
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableEndRow
$LN3@TableNextR:
; Line 1677
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+152]
	shl	eax, 16
	sar	eax, 16
	and	eax, 65535				; 0000ffffH
	shl	eax, 16
	mov	rcx, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rcx+152]
	and	ecx, 65535				; 0000ffffH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+152], eax
; Line 1678
	mov	eax, DWORD PTR row_flags$[rbp]
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR table$[rbp]
	mov	ecx, DWORD PTR [rcx+152]
	and	ecx, -65536				; ffffffffffff0000H
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR table$[rbp]
	mov	DWORD PTR [rcx+152], eax
; Line 1679
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR row_min_height$[rbp]
	movss	DWORD PTR [rax+140], xmm0
; Line 1680
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableBeginRow@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableBeginRow
; Line 1684
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+200]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+136]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+136], xmm0
; Line 1685
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+132]
	addss	xmm0, DWORD PTR row_min_height$[rbp]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+136], xmm0
; Line 1688
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	BYTE PTR [rax+147], 1
; Line 1689
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?TableNextRow@ImGui@@YAXHM@Z ENDP			; ImGui::TableNextRow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?EndTable@ImGui@@YAXXZ
_TEXT	SEGMENT
g$ = 8
table$ = 40
flags$ = 68
inner_window$ = 104
outer_window$ = 136
temp_data$ = 168
inner_content_max_y$ = 196
outer_padding_for_border$4 = 228
max_pos_x$5 = 260
splitter$ = 296
width_spacings$ = 324
column_n$6 = 356
column$7 = 392
neighbor_width_to_keep_visible$8 = 420
column$9 = 456
column$10 = 488
new_x2$11 = 516
new_width$12 = 548
backup_outer_max_pos$ = 584
decoration_size$13 = 612
decoration_size$14 = 644
$T15 = 1060
$T16 = 1108
tv564 = 1124
tv511 = 1124
tv321 = 1124
tv209 = 1124
tv181 = 1124
tv845 = 1128
tv660 = 1128
tv641 = 1128
tv632 = 1128
tv474 = 1128
tv396 = 1128
tv354 = 1128
tv319 = 1128
tv302 = 1128
tv225 = 1128
tv662 = 1136
tv643 = 1136
tv633 = 1136
__$ArrayPad$ = 1144
?EndTable@ImGui@@YAXXZ PROC				; ImGui::EndTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 1196
$LN65:
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1184				; 000004a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 192				; 000000c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1197
	mov	rax, QWORD PTR ?GImGui@@3PEAUImGuiContext@@EA ; GImGui
	mov	QWORD PTR g$[rbp], rax
; Line 1198
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	QWORD PTR table$[rbp], rax
; Line 1199
	cmp	QWORD PTR table$[rbp], 0
	je	SHORT $LN39@EndTable
	lea	rax, OFFSET FLAT:??_C@_0DD@JFFDACDB@Only?5call?5EndTable?$CI?$CJ?5if?5BeginTa@
	test	rax, rax
	jne	SHORT $LN40@EndTable
$LN39@EndTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1IG@CGOKCKPM@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN40@EndTable:
; Line 1207
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+505]
	test	eax, eax
	jne	SHORT $LN5@EndTable
; Line 1208
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableUpdateLayout@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableUpdateLayout
$LN5@EndTable:
; Line 1210
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR flags$[rbp], eax
; Line 1211
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR inner_window$[rbp], rax
; Line 1212
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+392]
	mov	QWORD PTR outer_window$[rbp], rax
; Line 1213
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR temp_data$[rbp], rax
; Line 1214
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+7184]
	cmp	QWORD PTR inner_window$[rbp], rax
	je	SHORT $LN41@EndTable
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EA@FGAGBNK@?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN41@EndTable:
; Line 1215
	mov	rax, QWORD PTR inner_window$[rbp]
	cmp	QWORD PTR outer_window$[rbp], rax
	je	SHORT $LN42@EndTable
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+896]
	cmp	QWORD PTR outer_window$[rbp], rax
	je	SHORT $LN42@EndTable
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 19
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JG@DEMMNCCK@?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?5?$AA?$DN?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN42@EndTable:
; Line 1217
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+506]
	test	eax, eax
	je	SHORT $LN6@EndTable
; Line 1218
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableEndRow@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableEndRow
$LN6@EndTable:
; Line 1221
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN7@EndTable
; Line 1222
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
	cmp	eax, -1
	je	SHORT $LN8@EndTable
	call	?IsAnyItemHovered@ImGui@@YA_NXZ		; ImGui::IsAnyItemHovered
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@EndTable
	mov	ecx, 1
	call	?IsMouseReleased@ImGui@@YA_NH@Z		; ImGui::IsMouseReleased
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@EndTable
; Line 1223
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+484]
	mov	ecx, eax
	call	?TableOpenContextMenu@ImGui@@YAXH@Z	; ImGui::TableOpenContextMenu
$LN8@EndTable:
$LN7@EndTable:
; Line 1226
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR inner_window$[rbp]
	mov	QWORD PTR [rcx+264], rax
; Line 1227
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rax, QWORD PTR [rax+80]
	mov	rcx, QWORD PTR inner_window$[rbp]
	mov	QWORD PTR [rcx+256], rax
; Line 1228
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	rax, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR inner_window$[rbp]
	mov	QWORD PTR [rcx+240], rax
; Line 1229
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	movss	DWORD PTR inner_content_max_y$[rbp], xmm0
; Line 1230
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	ucomiss	xmm0, DWORD PTR [rcx+220]
	jp	SHORT $LN64@EndTable
	je	SHORT $LN43@EndTable
$LN64@EndTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 34					; 00000022H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GA@MJADNMBJ@?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAR?$AAo?$AAw?$AAP?$AAo?$AAs?$AAY?$AA2@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN43@EndTable:
; Line 1231
	mov	rax, QWORD PTR outer_window$[rbp]
	cmp	QWORD PTR inner_window$[rbp], rax
	je	SHORT $LN9@EndTable
; Line 1232
	mov	rax, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR inner_content_max_y$[rbp]
	movss	DWORD PTR [rax+244], xmm0
	jmp	SHORT $LN10@EndTable
$LN9@EndTable:
; Line 1233
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 131072				; 00020000H
	test	eax, eax
	jne	SHORT $LN11@EndTable
; Line 1234
	movss	xmm1, DWORD PTR inner_content_max_y$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+256]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR tv181[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv181[rbp]
	movss	DWORD PTR [rax+272], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR tv181[rbp]
	movss	DWORD PTR [rax+256], xmm0
$LN11@EndTable:
$LN10@EndTable:
; Line 1235
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+256]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+288]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+288], xmm0
; Line 1236
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 244				; 000000f4H
	mov	rcx, rax
	call	?GetHeight@ImRect@@QEBAMXZ		; ImRect::GetHeight
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+212], xmm0
; Line 1241
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	$LN12@EndTable
; Line 1243
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN44@EndTable
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv209[rbp], xmm0
	jmp	SHORT $LN45@EndTable
$LN44@EndTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv209[rbp], xmm0
$LN45@EndTable:
	movss	xmm0, DWORD PTR tv209[rbp]
	movss	DWORD PTR outer_padding_for_border$4[rbp], xmm0
; Line 1244
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR [rax+240]
	movss	DWORD PTR max_pos_x$5[rbp], xmm0
; Line 1245
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+493]
	cmp	eax, -1
	je	SHORT $LN13@EndTable
; Line 1246
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv225[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+493]
	mov	edx, eax
	mov	rcx, QWORD PTR tv225[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+56]
	addss	xmm0, DWORD PTR [rcx+196]
	mov	rax, QWORD PTR table$[rbp]
	addss	xmm0, DWORD PTR [rax+192]
	subss	xmm0, DWORD PTR outer_padding_for_border$4[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR max_pos_x$5[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR max_pos_x$5[rbp], xmm0
$LN13@EndTable:
; Line 1247
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	cmp	eax, -1
	je	SHORT $LN14@EndTable
; Line 1248
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+236]
	movss	xmm0, DWORD PTR max_pos_x$5[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR max_pos_x$5[rbp], xmm0
$LN14@EndTable:
; Line 1249
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+400]
	movss	xmm0, DWORD PTR max_pos_x$5[rbp]
	movss	DWORD PTR [rax+240], xmm0
$LN12@EndTable:
; Line 1253
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN15@EndTable
; Line 1254
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rcx, QWORD PTR [rax+688]
	call	?PopClipRect@ImDrawList@@QEAAXXZ	; ImDrawList::PopClipRect
$LN15@EndTable:
; Line 1255
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rax, QWORD PTR [rax+688]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	?back@?$ImVector@UImVec4@@@@QEAAAEAUImVec4@@XZ ; ImVector<ImVec4>::back
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImRect@@QEAA@AEBUImVec4@@@Z		; ImRect::ImRect
	mov	rax, QWORD PTR inner_window$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	lea	rdi, QWORD PTR [rax+592]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1258
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1920				; 00000780H
	test	eax, eax
	je	SHORT $LN16@EndTable
; Line 1259
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableDrawBorders@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableDrawBorders
$LN16@EndTable:
; Line 1275
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR splitter$[rbp], rax
; Line 1276
	xor	r8d, r8d
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR splitter$[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 1277
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 1048576				; 00100000H
	test	eax, eax
	jne	SHORT $LN17@EndTable
; Line 1278
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableMergeDrawChannels@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableMergeDrawChannels
$LN17@EndTable:
; Line 1279
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rdx, QWORD PTR [rax+688]
	mov	rcx, QWORD PTR splitter$[rbp]
	call	?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z ; ImDrawListSplitter::Merge
; Line 1282
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+192]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+204]
	addss	xmm1, DWORD PTR [rcx+208]
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	dec	eax
	cvtsi2ss xmm2, eax
	mulss	xmm1, xmm2
	addss	xmm0, xmm1
	movss	DWORD PTR width_spacings$[rbp], xmm0
; Line 1283
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+196]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+481]
	cvtsi2ss xmm1, eax
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR width_spacings$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+228], xmm0
; Line 1284
	mov	DWORD PTR column_n$6[rbp], 0
	jmp	SHORT $LN4@EndTable
$LN2@EndTable:
	mov	eax, DWORD PTR column_n$6[rbp]
	inc	eax
	mov	DWORD PTR column_n$6[rbp], eax
$LN4@EndTable:
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+116]
	cmp	DWORD PTR column_n$6[rbp], eax
	jge	$LN3@EndTable
; Line 1285
	mov	eax, DWORD PTR column_n$6[rbp]
	mov	ecx, 1
	mov	QWORD PTR tv845[rbp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv845[rbp]
	shl	rax, cl
	mov	rcx, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	$LN18@EndTable
; Line 1287
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv302[rbp], rax
	mov	edx, DWORD PTR column_n$6[rbp]
	mov	rcx, QWORD PTR tv302[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$7[rbp], rax
; Line 1288
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN19@EndTable
	mov	rax, QWORD PTR column$7[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN19@EndTable
; Line 1289
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR column$7[rbp]
	movss	xmm0, DWORD PTR [rax+228]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+228], xmm0
	jmp	SHORT $LN20@EndTable
$LN19@EndTable:
; Line 1291
	mov	rdx, QWORD PTR column$7[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableGetColumnWidthAuto@ImGui@@YAMPEAUImGuiTable@@PEAUImGuiTableColumn@@@Z ; ImGui::TableGetColumnWidthAuto
	movss	DWORD PTR tv321[rbp], xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+228]
	movss	DWORD PTR tv319[rbp], xmm0
	movss	xmm0, DWORD PTR tv319[rbp]
	addss	xmm0, DWORD PTR tv321[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	DWORD PTR [rax+228], xmm0
$LN20@EndTable:
$LN18@EndTable:
; Line 1292
	jmp	$LN2@EndTable
$LN3@EndTable:
; Line 1295
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	jne	SHORT $LN21@EndTable
	mov	rax, QWORD PTR outer_window$[rbp]
	cmp	QWORD PTR inner_window$[rbp], rax
	je	SHORT $LN21@EndTable
; Line 1297
	mov	rax, QWORD PTR inner_window$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+92], xmm0
; Line 1298
	jmp	$LN22@EndTable
$LN21@EndTable:
; Line 1299
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+488]
	cmp	eax, -1
	je	$LN23@EndTable
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	cmp	eax, -1
	jne	$LN23@EndTable
	mov	rax, QWORD PTR inner_window$[rbp]
	movzx	eax, BYTE PTR [rax+140]
	test	eax, eax
	je	$LN23@EndTable
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+130]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, WORD PTR [rcx+128]
	cmp	eax, ecx
	jne	$LN23@EndTable
; Line 1302
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+196]
	mulss	xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+188]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR neighbor_width_to_keep_visible$8[rbp], xmm0
; Line 1303
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv354[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+488]
	mov	edx, eax
	mov	rcx, QWORD PTR tv354[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$9[rbp], rax
; Line 1304
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR column$9[rbp]
	movss	xmm0, DWORD PTR [rax+292]
	comiss	xmm0, DWORD PTR [rcx+12]
	jbe	SHORT $LN24@EndTable
; Line 1305
	mov	rax, QWORD PTR column$9[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+16]
	subss	xmm0, DWORD PTR neighbor_width_to_keep_visible$8[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR inner_window$[rbp]
	call	?SetScrollFromPosX@ImGui@@YAXPEAUImGuiWindow@@MM@Z ; ImGui::SetScrollFromPosX
	jmp	SHORT $LN25@EndTable
$LN24@EndTable:
; Line 1306
	mov	rax, QWORD PTR column$9[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+300]
	jbe	SHORT $LN26@EndTable
; Line 1307
	mov	rax, QWORD PTR column$9[rbp]
	mov	rcx, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+16]
	addss	xmm0, DWORD PTR neighbor_width_to_keep_visible$8[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR inner_window$[rbp]
	call	?SetScrollFromPosX@ImGui@@YAXPEAUImGuiWindow@@MM@Z ; ImGui::SetScrollFromPosX
$LN26@EndTable:
$LN25@EndTable:
$LN23@EndTable:
$LN22@EndTable:
; Line 1311
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	cmp	eax, -1
	je	$LN27@EndTable
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, WORD PTR [rax+128]
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, WORD PTR [rcx+130]
	cmp	eax, ecx
	jne	$LN27@EndTable
; Line 1313
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 24
	mov	QWORD PTR tv396[rbp], rax
	mov	rax, QWORD PTR table$[rbp]
	movsx	eax, BYTE PTR [rax+487]
	mov	edx, eax
	mov	rcx, QWORD PTR tv396[rbp]
	call	??A?$ImSpan@UImGuiTableColumn@@@@QEAAAEAUImGuiTableColumn@@H@Z ; ImSpan<ImGuiTableColumn>::operator[]
	mov	QWORD PTR column$10[rbp], rax
; Line 1314
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR g$[rbp]
	movss	xmm0, DWORD PTR [rax+296]
	subss	xmm0, DWORD PTR [rcx+7296]
	addss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR new_x2$11[rbp], xmm0
; Line 1315
	mov	rax, QWORD PTR column$10[rbp]
	movss	xmm0, DWORD PTR new_x2$11[rbp]
	subss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR table$[rbp]
	subss	xmm0, DWORD PTR [rax+204]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+196]
	mulss	xmm1, DWORD PTR __real@40000000
	subss	xmm0, xmm1
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR new_width$12[rbp], xmm0
; Line 1316
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR new_width$12[rbp]
	movss	DWORD PTR [rax+232], xmm0
$LN27@EndTable:
; Line 1320
	mov	rax, QWORD PTR inner_window$[rbp]
	add	rax, 200				; 000000c8H
	mov	rcx, rax
	call	?back@?$ImVector@I@@QEAAAEAIXZ		; ImVector<unsigned int>::back
	mov	rcx, QWORD PTR table$[rbp]
	movsx	ecx, WORD PTR [rcx+128]
	mov	rdx, QWORD PTR table$[rbp]
	add	ecx, DWORD PTR [rdx]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN46@EndTable
	lea	rax, OFFSET FLAT:??_C@_0BK@MHDEDKFO@Mismatching?5PushID?1PopID?$CB@
	test	rax, rax
	jne	SHORT $LN47@EndTable
$LN46@EndTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 124				; 0000007cH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1MI@BOIHHKDM@?$AA?$CI?$AAi?$AAn?$AAn?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN47@EndTable:
; Line 1321
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	ecx, DWORD PTR [rcx+104]
	cmp	DWORD PTR [rax+464], ecx
	jl	SHORT $LN48@EndTable
	lea	rax, OFFSET FLAT:??_C@_0BH@GAFFHFPC@Too?5many?5PopItemWidth?$CB@
	test	rax, rax
	jne	SHORT $LN49@EndTable
$LN48@EndTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 125				; 0000007dH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1NM@BLFPKGHB@?$AA?$CI?$AAo?$AAu?$AAt?$AAe?$AAr?$AA_?$AAw?$AAi?$AAn?$AAd?$AAo?$AAw?$AA?9?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN49@EndTable:
; Line 1322
	call	?PopID@ImGui@@YAXXZ			; ImGui::PopID
; Line 1325
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	rax, QWORD PTR [rax+240]
	mov	QWORD PTR backup_outer_max_pos$[rbp], rax
; Line 1326
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rcx, QWORD PTR temp_data$[rbp]
	lea	rdi, QWORD PTR [rax+560]
	lea	rsi, QWORD PTR [rcx+40]
	mov	ecx, 16
	rep movsb
; Line 1327
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rcx, QWORD PTR temp_data$[rbp]
	lea	rdi, QWORD PTR [rax+576]
	lea	rsi, QWORD PTR [rcx+56]
	mov	ecx, 16
	rep movsb
; Line 1328
	mov	rax, QWORD PTR inner_window$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movzx	ecx, BYTE PTR [rcx+519]
	mov	BYTE PTR [rax+147], cl
; Line 1329
	mov	rax, QWORD PTR table$[rbp]
	mov	rax, QWORD PTR [rax+244]
	mov	rcx, QWORD PTR outer_window$[rbp]
	mov	QWORD PTR [rcx+216], rax
; Line 1330
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	rcx, QWORD PTR temp_data$[rbp]
	movss	xmm0, DWORD PTR [rcx+100]
	movss	DWORD PTR [rax+452], xmm0
; Line 1331
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	ecx, DWORD PTR [rcx+104]
	mov	DWORD PTR [rax+464], ecx
; Line 1332
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	eax, DWORD PTR [rax+96]
	mov	rcx, QWORD PTR outer_window$[rbp]
	mov	DWORD PTR [rcx+284], eax
; Line 1337
	mov	rax, QWORD PTR outer_window$[rbp]
	cmp	QWORD PTR inner_window$[rbp], rax
	je	SHORT $LN28@EndTable
; Line 1339
	call	?EndChild@ImGui@@YAXXZ			; ImGui::EndChild
; Line 1340
	jmp	SHORT $LN29@EndTable
$LN28@EndTable:
; Line 1343
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 244				; 000000f4H
	mov	QWORD PTR tv474[rbp], rax
	lea	rdx, QWORD PTR $T16[rbp]
	mov	rcx, QWORD PTR tv474[rbp]
	call	?GetSize@ImRect@@QEBA?AUImVec2@@XZ	; ImRect::GetSize
	movss	xmm1, DWORD PTR __real@bf800000
	mov	rcx, rax
	call	?ItemSize@ImGui@@YAXAEBUImVec2@@M@Z	; ImGui::ItemSize
; Line 1344
	mov	rax, QWORD PTR table$[rbp]
	add	rax, 244				; 000000f4H
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	?ItemAdd@ImGui@@YA_NAEBUImRect@@IPEBU2@H@Z ; ImGui::ItemAdd
$LN29@EndTable:
; Line 1348
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 65536				; 00010000H
	test	eax, eax
	je	SHORT $LN30@EndTable
; Line 1352
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN50@EndTable
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 156				; 0000009cH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FM@ICPCKIED@?$AA?$CI?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?9?$AA?$DO?$AAF?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN50@EndTable:
; Line 1353
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+244]
	addss	xmm0, DWORD PTR [rcx+228]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR backup_outer_max_pos$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+240], xmm0
; Line 1354
	jmp	$LN31@EndTable
$LN30@EndTable:
; Line 1355
	mov	rax, QWORD PTR temp_data$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+8]
	jb	$LN32@EndTable
; Line 1357
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 16777216				; 01000000H
	test	eax, eax
	je	SHORT $LN51@EndTable
	mov	rax, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rax+132]
	movss	DWORD PTR tv511[rbp], xmm0
	jmp	SHORT $LN52@EndTable
$LN51@EndTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv511[rbp], xmm0
$LN52@EndTable:
	movss	xmm0, DWORD PTR tv511[rbp]
	movss	DWORD PTR decoration_size$13[rbp], xmm0
; Line 1358
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+244]
	addss	xmm0, DWORD PTR [rcx+228]
	addss	xmm0, DWORD PTR decoration_size$13[rbp]
	mov	rax, QWORD PTR temp_data$[rbp]
	subss	xmm0, DWORD PTR [rax+8]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	xmm0, DWORD PTR [rax+248]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+248], xmm0
; Line 1359
	mov	rax, QWORD PTR table$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+244]
	addss	xmm0, DWORD PTR [rcx+228]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+252]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR backup_outer_max_pos$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+240], xmm0
; Line 1360
	jmp	SHORT $LN33@EndTable
$LN32@EndTable:
; Line 1363
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+252]
	movss	xmm0, DWORD PTR backup_outer_max_pos$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+240], xmm0
$LN33@EndTable:
$LN31@EndTable:
; Line 1365
	mov	rax, QWORD PTR temp_data$[rbp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+12]
	jb	$LN34@EndTable
; Line 1367
	mov	rax, QWORD PTR table$[rbp]
	mov	eax, DWORD PTR [rax+4]
	and	eax, 33554432				; 02000000H
	test	eax, eax
	je	SHORT $LN53@EndTable
	mov	rax, QWORD PTR inner_window$[rbp]
	movss	xmm0, DWORD PTR [rax+136]
	movss	DWORD PTR tv564[rbp], xmm0
	jmp	SHORT $LN54@EndTable
$LN53@EndTable:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv564[rbp], xmm0
$LN54@EndTable:
	movss	xmm0, DWORD PTR tv564[rbp]
	movss	DWORD PTR decoration_size$14[rbp], xmm0
; Line 1368
	movss	xmm0, DWORD PTR inner_content_max_y$[rbp]
	addss	xmm0, DWORD PTR decoration_size$14[rbp]
	mov	rax, QWORD PTR temp_data$[rbp]
	subss	xmm0, DWORD PTR [rax+12]
	movaps	xmm1, xmm0
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	xmm0, DWORD PTR [rax+252]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+252], xmm0
; Line 1369
	movss	xmm1, DWORD PTR inner_content_max_y$[rbp]
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm0, DWORD PTR [rax+256]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR backup_outer_max_pos$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+244], xmm0
; Line 1370
	jmp	SHORT $LN35@EndTable
$LN34@EndTable:
; Line 1374
	mov	rax, QWORD PTR table$[rbp]
	movss	xmm1, DWORD PTR [rax+256]
	movss	xmm0, DWORD PTR backup_outer_max_pos$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	mov	rax, QWORD PTR outer_window$[rbp]
	movss	DWORD PTR [rax+244], xmm0
$LN35@EndTable:
; Line 1378
	mov	rax, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [rax+512]
	test	eax, eax
	je	SHORT $LN36@EndTable
; Line 1379
	mov	rcx, QWORD PTR table$[rbp]
	call	?TableSaveSettings@ImGui@@YAXPEAUImGuiTable@@@Z ; ImGui::TableSaveSettings
$LN36@EndTable:
; Line 1380
	mov	rax, QWORD PTR table$[rbp]
	mov	BYTE PTR [rax+507], 0
; Line 1383
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR outer_window$[rbp]
	cmp	QWORD PTR [rax+7184], rcx
	jne	SHORT $LN55@EndTable
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR table$[rbp]
	cmp	QWORD PTR [rax+8176], rcx
	je	SHORT $LN56@EndTable
$LN55@EndTable:
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 187				; 000000bbH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HG@JFMKDCJB@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAW?$AAi?$AAn?$AAd?$AAo?$AAw@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN56@EndTable:
; Line 1384
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+8184], 0
	jge	SHORT $LN57@EndTable
	mov	eax, DWORD PTR ?__LINE__Var@?0??EndTable@ImGui@@YAXXZ@4JA
	add	eax, 188				; 000000bcH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@NAFCCONJ@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@LJLDEHIA@?$AAg?$AA?4?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AAT?$AAa?$AAb?$AAl?$AAe?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN57@EndTable:
; Line 1385
	mov	rax, QWORD PTR g$[rbp]
	mov	eax, DWORD PTR [rax+8184]
	dec	eax
	mov	rcx, QWORD PTR g$[rbp]
	mov	DWORD PTR [rcx+8184], eax
; Line 1386
	mov	rax, QWORD PTR g$[rbp]
	cmp	DWORD PTR [rax+8184], 0
	jl	SHORT $LN58@EndTable
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8232				; 00002028H
	mov	QWORD PTR tv632[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	edx, DWORD PTR [rax+8184]
	mov	rcx, QWORD PTR tv632[rbp]
	call	??A?$ImVector@UImGuiTableTempData@@@@QEAAAEAUImGuiTableTempData@@H@Z ; ImVector<ImGuiTableTempData>::operator[]
	mov	QWORD PTR tv633[rbp], rax
	jmp	SHORT $LN59@EndTable
$LN58@EndTable:
	mov	QWORD PTR tv633[rbp], 0
$LN59@EndTable:
	mov	rax, QWORD PTR tv633[rbp]
	mov	QWORD PTR temp_data$[rbp], rax
; Line 1387
	cmp	QWORD PTR temp_data$[rbp], 0
	je	SHORT $LN60@EndTable
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv641[rbp], rax
	mov	rax, QWORD PTR temp_data$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR tv641[rbp]
	call	?GetByIndex@?$ImPool@UImGuiTable@@@@QEAAPEAUImGuiTable@@H@Z ; ImPool<ImGuiTable>::GetByIndex
	mov	QWORD PTR tv643[rbp], rax
	jmp	SHORT $LN61@EndTable
$LN60@EndTable:
	mov	QWORD PTR tv643[rbp], 0
$LN61@EndTable:
	mov	rax, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR tv643[rbp]
	mov	QWORD PTR [rax+8176], rcx
; Line 1388
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+8176], 0
	je	SHORT $LN37@EndTable
; Line 1390
	mov	rax, QWORD PTR g$[rbp]
	mov	rax, QWORD PTR [rax+8176]
	mov	rcx, QWORD PTR temp_data$[rbp]
	mov	QWORD PTR [rax+16], rcx
; Line 1391
	mov	rax, QWORD PTR temp_data$[rbp]
	add	rax, 16
	mov	rcx, QWORD PTR g$[rbp]
	mov	rcx, QWORD PTR [rcx+8176]
	mov	QWORD PTR [rcx+424], rax
$LN37@EndTable:
; Line 1393
	mov	rax, QWORD PTR g$[rbp]
	cmp	QWORD PTR [rax+8176], 0
	je	SHORT $LN62@EndTable
	mov	rax, QWORD PTR g$[rbp]
	add	rax, 8192				; 00002000H
	mov	QWORD PTR tv660[rbp], rax
	mov	rax, QWORD PTR g$[rbp]
	mov	rdx, QWORD PTR [rax+8176]
	mov	rcx, QWORD PTR tv660[rbp]
	call	?GetIndex@?$ImPool@UImGuiTable@@@@QEBAHPEBUImGuiTable@@@Z ; ImPool<ImGuiTable>::GetIndex
	mov	DWORD PTR tv662[rbp], eax
	jmp	SHORT $LN63@EndTable
$LN62@EndTable:
	mov	DWORD PTR tv662[rbp], -1
$LN63@EndTable:
	mov	rax, QWORD PTR outer_window$[rbp]
	mov	ecx, DWORD PTR tv662[rbp]
	mov	DWORD PTR [rax+432], ecx
; Line 1394
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?EndTable@ImGui@@YAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1152]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?EndTable@ImGui@@YAXXZ ENDP				; ImGui::EndTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z
_TEXT	SEGMENT
id$ = 4
str_id$ = 256
columns_count$ = 264
flags$ = 272
outer_size$ = 280
inner_width$ = 288
?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z PROC	; ImGui::BeginTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_tables.cpp
; Line 305
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__8DF776F5_imgui_tables@cpp
	call	__CheckForDebuggerJustMyCode
; Line 306
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?GetID@ImGui@@YAIPEBD@Z			; ImGui::GetID
	mov	DWORD PTR id$[rbp], eax
; Line 307
	movss	xmm0, DWORD PTR inner_width$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR outer_size$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR flags$[rbp]
	mov	r8d, DWORD PTR columns_count$[rbp]
	mov	edx, DWORD PTR id$[rbp]
	mov	rcx, QWORD PTR str_id$[rbp]
	call	?BeginTableEx@ImGui@@YA_NPEBDIHHAEBUImVec2@@M@Z ; ImGui::BeginTableEx
; Line 308
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?BeginTable@ImGui@@YA_NPEBDHHAEBUImVec2@@M@Z ENDP	; ImGui::BeginTable
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec4@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
_z$ = 104
_w$ = 112
??0ImVec4@@QEAA@MMMM@Z PROC				; ImVec4::ImVec4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 261
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _z$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _w$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec4@@QEAA@MMMM@Z ENDP				; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 248
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec2@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec2@@QEAA@XZ PROC					; ImVec2::ImVec2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 247
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec2@@QEAA@XZ ENDP					; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv72 = 192
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
$LN2@vector:
	mov	rax, QWORD PTR __n$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	mov	rax, QWORD PTR __n$[rbp]
	dec	rax
	mov	QWORD PTR __n$[rbp], rax
	cmp	QWORD PTR tv66[rbp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rbp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rbp], 0
	je	SHORT $LN3@vector
	mov	rax, QWORD PTR __f$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	mov	rcx, QWORD PTR __t$[rbp]
	call	QWORD PTR tv72[rbp]
	mov	rax, QWORD PTR __s$[rbp]
	mov	rcx, QWORD PTR __t$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rbp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
