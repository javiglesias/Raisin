; Listing generated by Microsoft (R) Optimizing Compiler Version 19.33.31630.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

msvcjmc	SEGMENT
__A52B8F80_imconfig@h DB 01H
__529D0EAA_concurrencysal@h DB 01H
__7EC34687_sal@h DB 01H
__35A2D2DF_vadefs@h DB 01H
__5F022EB5_vcruntime@h DB 01H
__1B0272D9_corecrt@h DB 01H
__B9985323_float@h DB 01H
__79700276_stdarg@h DB 01H
__13F5961F_stddef@h DB 01H
__61CC25A1_errno@h DB 01H
__74AC4223_vcruntime_string@h DB 01H
__E4C945B4_corecrt_memcpy_s@h DB 01H
__8EAFF484_corecrt_memory@h DB 01H
__6490AEC5_corecrt_wstring@h DB 01H
__E8295E1E_string@h DB 01H
__19139D6C_assert@h DB 01H
__21D911DF_imgui@h DB 01H
__44420885_corecrt_stdio_config@h DB 01H
__AB601D8D_corecrt_wstdio@h DB 01H
__C1EC35D3_stdio@h DB 01H
__45DED006_corecrt_malloc@h DB 01H
__FD6DBD68_corecrt_search@h DB 01H
__E2E33A61_corecrt_wstdlib@h DB 01H
__F3D99286_limits@h DB 01H
__6E5ACABA_stdlib@h DB 01H
__BB16330F_corecrt_math@h DB 01H
__3BF2A406_math@h DB 01H
__F75BE1FA_mmintrin@h DB 01H
__FA77ED4C_malloc@h DB 01H
__DFD742E1_xmmintrin@h DB 01H
__BAB5CB2D_emmintrin@h DB 01H
__6514A3A4_pmmintrin@h DB 01H
__D5CDD026_tmmintrin@h DB 01H
__FCF6C5A5_smmintrin@h DB 01H
__99944C69_nmmintrin@h DB 01H
__4C2FB627_wmmintrin@h DB 01H
__87BBFB20_zmmintrin@h DB 01H
__B0AF59EA_immintrin@h DB 01H
__40756020_imstb_textedit@h DB 01H
__D68E48C9_imgui_internal@h DB 01H
__8F86256B_imstb_rectpack@h DB 01H
__B2779E6C_imstb_truetype@h DB 01H
__3FF631A4_imgui_draw@cpp DB 01H
msvcjmc	ENDS
CONST	SEGMENT
?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB DB '..-         -XXXXXXX-    X'
	DB	'    -           X           -XXXXXXX          -          XXXX'
	DB	'XXX-     XX          ..-         -X.....X-   X.X   -         '
	DB	' X.X          -X.....X          -          X.....X-    X..X  '
	DB	'       ---         -XXX.XXX-  X...X  -         X...X         '
	DB	'-X....X           -           X....X-    X..X         X      '
	DB	'     -  X.X  - X.....X -        X.....X        -X...X        '
	DB	'    -            X...X-    X..X         XX          -  X.X  -'
	DB	'X.......X-       X.......X       -X..X.X           -         '
	DB	'  X.X..X-    X..X         X.X         -  X.X  -XXXX.XXXX-    '
	DB	'   XXXX.XXXX       -X.X X.X          -          X.X X.X-    X'
	DB	'..XXX       X..X        -  X.X  -   X.X   -          X.X     '
	DB	'     -XX   X.X         -         X.X   XX-    X..X..XXX    X.'
	DB	'..X       -  X.X  -   X.X   -    XX    X.X    XX    -      X.'
	DB	'X        -        X.X      -    X..X..X..XX  X....X      -  X'
	DB	'.X  -   X.X   -   X.X    X.X    X.X   -       X.X       -    '
	DB	'   X.X       -    X..X..X..X.X X.....X     -  X.X  -   X.X   '
	DB	'-  X..X    X.X    X..X  -        X.X      -      X.X        -'
	DB	'XXX X..X..X..X..XX......X    -  X.X  -   X.X   - X...XXXXXX.X'
	DB	'XXXXX...X -         X.X   XX-XX   X.X         -X..XX........X'
	DB	'..XX.......X   -  X.X  -   X.X   -X.....................X-   '
	DB	'       X.X X.X-X.X X.X          -X...X...........XX........X '
	DB	' -  X.X  -   X.X   - X...XXXXXX.XXXXXX...X -           X.X..X'
	DB	'-X..X.X           - X..............XX.........X -XXX.XXX-   X'
	DB	'.X   -  X..X    X.X    X..X  -            X...X-X...X        '
	DB	'    -  X.............XX..........X-X.....X-   X.X   -   X.X  '
	DB	'  X.X    X.X   -           X....X-X....X           -  X......'
	DB	'.......XX......XXXXX-XXXXXXX-   X.X   -    XX    X.X    XX   '
	DB	' -          X.....X-X.....X          -   X............XX...X.'
	DB	'.X    ---------   X.X   -          X.X          -          XX'
	DB	'XXXXX-XXXXXXX          -   X...........X X..X X..X   -       '
	DB	'-XXXX.XXXX-       XXXX.XXXX       ---------------------------'
	DB	'----------    X..........X X.X  X..X   -       -X.......X-   '
	DB	'    X.......X       -    XX           XX    -           -    '
	DB	'X..........X XX    X..X  -       - X.....X -        X.....X  '
	DB	'      -   X.X           X.X   -           -     X........X   '
	DB	'     X..X          -  X...X  -         X...X         -  X..X '
	DB	'          X..X  -           -     X........X         XX      '
	DB	'     -   X.X   -          X.X          - X...XXXXXXXXXXXXX...'
	DB	'X -           -     XXXXXXXXXX  ------------        -    X   '
	DB	' -           X           -X.....................X-           '
	DB	'------------------                    -----------------------'
	DB	'------------ X...XXXXXXXXXXXXX...X -                         '
	DB	'                                                          -  '
	DB	'X..X           X..X  -                                       '
	DB	'                                            -   X.X          '
	DB	' X.X   -                                                     '
	DB	'                              -    XX           XX    -      '
	DB	'                       ', 00H		; FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS
	ORG $+3
?ranges@?1??GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesDefault'::`2'::ranges
	DW	0ffH
	DW	00H
	ORG $+2
?ranges@?1??GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesKorean'::`2'::ranges
	DW	0ffH
	DW	03131H
	DW	03163H
	DW	0ac00H
	DW	0d7a3H
	DW	0fffdH
	DW	0fffdH
	DW	00H
	ORG $+6
?ranges@?1??GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesChineseFull'::`2'::ranges
	DW	0ffH
	DW	02000H
	DW	0206fH
	DW	03000H
	DW	030ffH
	DW	031f0H
	DW	031ffH
	DW	0ff00H
	DW	0ffefH
	DW	0fffdH
	DW	0fffdH
	DW	04e00H
	DW	09fafH
	DW	00H
	ORG $+10
?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4QBFB DW 00H ; `ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon'::`2'::accumulative_offsets_from_0x4E00
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	0aH
	DW	01H
	DW	02H
	DW	013H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	06H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	08H
	DW	05H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	02H
	DW	0cH
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	04H
	DW	06H
	DW	05H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	0aH
	DW	07H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	03H
	DW	06H
	DW	0aH
	DW	0cH
	DW	05H
	DW	07H
	DW	02H
	DW	0eH
	DW	02H
	DW	09H
	DW	01H
	DW	01H
	DW	06H
	DW	07H
	DW	0aH
	DW	04H
	DW	07H
	DW	0dH
	DW	01H
	DW	05H
	DW	04H
	DW	08H
	DW	04H
	DW	01H
	DW	01H
	DW	02H
	DW	01cH
	DW	05H
	DW	06H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	014H
	DW	02H
	DW	02H
	DW	09H
	DW	08H
	DW	0bH
	DW	02H
	DW	09H
	DW	011H
	DW	01H
	DW	08H
	DW	06H
	DW	08H
	DW	01bH
	DW	04H
	DW	06H
	DW	09H
	DW	014H
	DW	0bH
	DW	01bH
	DW	06H
	DW	044H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	06H
	DW	0bH
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	08H
	DW	03H
	DW	04H
	DW	01H
	DW	05H
	DW	07H
	DW	02H
	DW	01H
	DW	04H
	DW	04H
	DW	08H
	DW	04H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	05H
	DW	06H
	DW	03H
	DW	06H
	DW	02H
	DW	0cH
	DW	03H
	DW	01H
	DW	03H
	DW	09H
	DW	02H
	DW	04H
	DW	03H
	DW	04H
	DW	01H
	DW	05H
	DW	03H
	DW	03H
	DW	01H
	DW	03H
	DW	07H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	02H
	DW	03H
	DW	02H
	DW	06H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	01H
	DW	07H
	DW	03H
	DW	04H
	DW	05H
	DW	0fH
	DW	02H
	DW	02H
	DW	01H
	DW	05H
	DW	03H
	DW	016H
	DW	013H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	0cH
	DW	08H
	DW	02H
	DW	09H
	DW	012H
	DW	016H
	DW	04H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	010H
	DW	01H
	DW	02H
	DW	07H
	DW	0aH
	DW	0fH
	DW	01H
	DW	01H
	DW	06H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	04H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	02H
	DW	05H
	DW	07H
	DW	02H
	DW	013H
	DW	04H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	07H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	04H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	05H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	04H
	DW	06H
	DW	02H
	DW	02H
	DW	0eH
	DW	04H
	DW	06H
	DW	06H
	DW	0bH
	DW	09H
	DW	01H
	DW	0fH
	DW	03H
	DW	01H
	DW	01cH
	DW	05H
	DW	02H
	DW	05H
	DW	05H
	DW	03H
	DW	01H
	DW	03H
	DW	04H
	DW	05H
	DW	04H
	DW	06H
	DW	0eH
	DW	03H
	DW	02H
	DW	03H
	DW	05H
	DW	015H
	DW	02H
	DW	07H
	DW	014H
	DW	0aH
	DW	01H
	DW	02H
	DW	013H
	DW	02H
	DW	04H
	DW	01cH
	DW	01cH
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	0eH
	DW	04H
	DW	01H
	DW	01aH
	DW	01cH
	DW	02aH
	DW	0cH
	DW	028H
	DW	03H
	DW	034H
	DW	04fH
	DW	05H
	DW	0eH
	DW	011H
	DW	03H
	DW	02H
	DW	02H
	DW	0bH
	DW	03H
	DW	04H
	DW	06H
	DW	03H
	DW	01H
	DW	08H
	DW	02H
	DW	017H
	DW	04H
	DW	05H
	DW	08H
	DW	0aH
	DW	04H
	DW	02H
	DW	07H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	05H
	DW	01cH
	DW	01H
	DW	01H
	DW	07H
	DW	07H
	DW	014H
	DW	05H
	DW	03H
	DW	01dH
	DW	03H
	DW	011H
	DW	01aH
	DW	01H
	DW	08H
	DW	04H
	DW	01bH
	DW	03H
	DW	06H
	DW	0bH
	DW	017H
	DW	05H
	DW	03H
	DW	04H
	DW	06H
	DW	0dH
	DW	018H
	DW	010H
	DW	06H
	DW	05H
	DW	0aH
	DW	019H
	DW	023H
	DW	07H
	DW	03H
	DW	02H
	DW	03H
	DW	03H
	DW	0eH
	DW	03H
	DW	06H
	DW	02H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	03H
	DW	08H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	0dH
	DW	02H
	DW	02H
	DW	04H
	DW	05H
	DW	02H
	DW	01H
	DW	0eH
	DW	0eH
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	05H
	DW	02H
	DW	03H
	DW	01H
	DW	0eH
	DW	03H
	DW	0cH
	DW	03H
	DW	011H
	DW	02H
	DW	010H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	08H
	DW	09H
	DW	03H
	DW	013H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	011H
	DW	019H
	DW	015H
	DW	014H
	DW	01cH
	DW	04bH
	DW	01H
	DW	0aH
	DW	01dH
	DW	067H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	03H
	DW	018H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	05H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	05H
	DW	06H
	DW	0dH
	DW	09H
	DW	010H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	02H
	DW	04H
	DW	05H
	DW	02H
	DW	05H
	DW	02H
	DW	02H
	DW	03H
	DW	07H
	DW	0dH
	DW	07H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	06H
	DW	04H
	DW	09H
	DW	02H
	DW	01H
	DW	0eH
	DW	02H
	DW	0eH
	DW	02H
	DW	01H
	DW	012H
	DW	03H
	DW	04H
	DW	0eH
	DW	04H
	DW	0bH
	DW	029H
	DW	0fH
	DW	017H
	DW	0fH
	DW	017H
	DW	0b0H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	03H
	DW	01H
	DW	02H
	DW	03H
	DW	07H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	04H
	DW	06H
	DW	02H
	DW	04H
	DW	01H
	DW	09H
	DW	07H
	DW	01H
	DW	0aH
	DW	05H
	DW	08H
	DW	010H
	DW	01dH
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	05H
	DW	04H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	07H
	DW	01H
	DW	06H
	DW	0aH
	DW	01H
	DW	011H
	DW	01H
	DW	02cH
	DW	04H
	DW	06H
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	05H
	DW	04H
	DW	02H
	DW	0aH
	DW	01H
	DW	06H
	DW	09H
	DW	02H
	DW	08H
	DW	01H
	DW	018H
	DW	01H
	DW	02H
	DW	0dH
	DW	07H
	DW	08H
	DW	08H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	03H
	DW	05H
	DW	02H
	DW	05H
	DW	0aH
	DW	09H
	DW	04H
	DW	09H
	DW	0cH
	DW	02H
	DW	01H
	DW	06H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	07H
	DW	07H
	DW	04H
	DW	0aH
	DW	08H
	DW	03H
	DW	01H
	DW	0dH
	DW	04H
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01H
	DW	02H
	DW	011H
	DW	010H
	DW	05H
	DW	02H
	DW	010H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	06H
	DW	08H
	DW	05H
	DW	0bH
	DW	0bH
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	04H
	DW	06H
	DW	0aH
	DW	09H
	DW	05H
	DW	07H
	DW	04H
	DW	07H
	DW	04H
	DW	07H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	06H
	DW	08H
	DW	07H
	DW	01H
	DW	06H
	DW	0bH
	DW	05H
	DW	05H
	DW	03H
	DW	018H
	DW	09H
	DW	04H
	DW	02H
	DW	07H
	DW	0dH
	DW	05H
	DW	01H
	DW	08H
	DW	052H
	DW	010H
	DW	03dH
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	010H
	DW	0aH
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	06H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	08H
	DW	04H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	04H
	DW	06H
	DW	09H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	02H
	DW	01H
	DW	06H
	DW	01H
	DW	05H
	DW	04H
	DW	04H
	DW	03H
	DW	01H
	DW	08H
	DW	01H
	DW	03H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	07H
	DW	01H
	DW	08H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	03H
	DW	05H
	DW	0aH
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	05H
	DW	0bH
	DW	03H
	DW	09H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	05H
	DW	09H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	07H
	DW	09H
	DW	09H
	DW	08H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	06H
	DW	08H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	020H
	DW	06H
	DW	01H
	DW	02H
	DW	0fH
	DW	09H
	DW	03H
	DW	07H
	DW	0dH
	DW	01H
	DW	03H
	DW	0aH
	DW	0dH
	DW	02H
	DW	0eH
	DW	01H
	DW	0dH
	DW	0aH
	DW	02H
	DW	01H
	DW	03H
	DW	0aH
	DW	04H
	DW	0fH
	DW	02H
	DW	0fH
	DW	0fH
	DW	0aH
	DW	01H
	DW	03H
	DW	09H
	DW	06H
	DW	09H
	DW	020H
	DW	019H
	DW	01aH
	DW	02fH
	DW	07H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	03H
	DW	04H
	DW	03H
	DW	02H
	DW	08H
	DW	05H
	DW	04H
	DW	01H
	DW	09H
	DW	04H
	DW	02H
	DW	02H
	DW	013H
	DW	0aH
	DW	06H
	DW	02H
	DW	03H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	09H
	DW	04H
	DW	04H
	DW	04H
	DW	06H
	DW	04H
	DW	08H
	DW	09H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	05H
	DW	05H
	DW	01H
	DW	03H
	DW	08H
	DW	04H
	DW	06H
	DW	02H
	DW	01H
	DW	04H
	DW	0cH
	DW	01H
	DW	05H
	DW	03H
	DW	07H
	DW	0dH
	DW	02H
	DW	05H
	DW	08H
	DW	01H
	DW	06H
	DW	01H
	DW	02H
	DW	05H
	DW	0eH
	DW	06H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	08H
	DW	0fH
	DW	05H
	DW	01H
	DW	017H
	DW	06H
	DW	03eH
	DW	02H
	DW	0aH
	DW	01H
	DW	01H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	0aH
	DW	04H
	DW	02H
	DW	02H
	DW	09H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	05H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	0bH
	DW	03H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	07H
	DW	01H
	DW	0eH
	DW	01H
	DW	02H
	DW	03H
	DW	0cH
	DW	05H
	DW	02H
	DW	05H
	DW	01H
	DW	06H
	DW	07H
	DW	05H
	DW	07H
	DW	0eH
	DW	0bH
	DW	01H
	DW	03H
	DW	01H
	DW	08H
	DW	09H
	DW	0cH
	DW	02H
	DW	01H
	DW	0bH
	DW	08H
	DW	04H
	DW	04H
	DW	02H
	DW	06H
	DW	0aH
	DW	09H
	DW	0dH
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	05H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	04H
	DW	01H
	DW	012H
	DW	02H
	DW	03H
	DW	0eH
	DW	0bH
	DW	04H
	DW	01dH
	DW	04H
	DW	02H
	DW	07H
	DW	01H
	DW	03H
	DW	0dH
	DW	09H
	DW	02H
	DW	02H
	DW	05H
	DW	03H
	DW	05H
	DW	014H
	DW	07H
	DW	010H
	DW	08H
	DW	05H
	DW	048H
	DW	022H
	DW	06H
	DW	04H
	DW	016H
	DW	0cH
	DW	0cH
	DW	01cH
	DW	02dH
	DW	024H
	DW	09H
	DW	07H
	DW	027H
	DW	09H
	DW	0bfH
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	0bH
	DW	08H
	DW	04H
	DW	09H
	DW	02H
	DW	03H
	DW	016H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	011H
	DW	01H
	DW	07H
	DW	07H
	DW	01H
	DW	0bH
	DW	01fH
	DW	0aH
	DW	02H
	DW	04H
	DW	08H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	010H
	DW	04H
	DW	020H
	DW	02H
	DW	03H
	DW	013H
	DW	0dH
	DW	04H
	DW	09H
	DW	01H
	DW	05H
	DW	02H
	DW	0eH
	DW	08H
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	013H
	DW	06H
	DW	05H
	DW	01H
	DW	010H
	DW	06H
	DW	02H
	DW	0aH
	DW	08H
	DW	05H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	05H
	DW	05H
	DW	01H
	DW	0bH
	DW	06H
	DW	06H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	06H
	DW	03H
	DW	08H
	DW	01H
	DW	01H
	DW	04H
	DW	0aH
	DW	07H
	DW	05H
	DW	07H
	DW	07H
	DW	05H
	DW	08H
	DW	09H
	DW	02H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	06H
	DW	010H
	DW	01H
	DW	04H
	DW	06H
	DW	03H
	DW	01H
	DW	0aH
	DW	06H
	DW	01H
	DW	03H
	DW	0fH
	DW	02H
	DW	09H
	DW	02H
	DW	0aH
	DW	019H
	DW	0dH
	DW	09H
	DW	010H
	DW	06H
	DW	02H
	DW	02H
	DW	0aH
	DW	0bH
	DW	04H
	DW	03H
	DW	09H
	DW	01H
	DW	02H
	DW	06H
	DW	06H
	DW	05H
	DW	04H
	DW	01eH
	DW	028H
	DW	01H
	DW	0aH
	DW	07H
	DW	0cH
	DW	0eH
	DW	021H
	DW	06H
	DW	03H
	DW	06H
	DW	07H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	0bH
	DW	0eH
	DW	04H
	DW	09H
	DW	05H
	DW	0cH
	DW	0bH
	DW	031H
	DW	012H
	DW	033H
	DW	01fH
	DW	08cH
	DW	01fH
	DW	02H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	08H
	DW	01H
	DW	0aH
	DW	01H
	DW	04H
	DW	04H
	DW	03H
	DW	018H
	DW	01H
	DW	0aH
	DW	01H
	DW	03H
	DW	06H
	DW	06H
	DW	010H
	DW	03H
	DW	04H
	DW	05H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	039H
	DW	0aH
	DW	06H
	DW	016H
	DW	02H
	DW	016H
	DW	03H
	DW	07H
	DW	016H
	DW	06H
	DW	0aH
	DW	0bH
	DW	024H
	DW	012H
	DW	010H
	DW	021H
	DW	024H
	DW	02H
	DW	05H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	0aH
	DW	01H
	DW	04H
	DW	0dH
	DW	02H
	DW	07H
	DW	05H
	DW	02H
	DW	09H
	DW	03H
	DW	04H
	DW	01H
	DW	07H
	DW	02bH
	DW	03H
	DW	07H
	DW	03H
	DW	09H
	DW	0eH
	DW	07H
	DW	09H
	DW	01H
	DW	0bH
	DW	01H
	DW	01H
	DW	03H
	DW	07H
	DW	04H
	DW	012H
	DW	0dH
	DW	01H
	DW	0eH
	DW	01H
	DW	03H
	DW	06H
	DW	0aH
	DW	049H
	DW	02H
	DW	02H
	DW	01eH
	DW	06H
	DW	01H
	DW	0bH
	DW	012H
	DW	013H
	DW	0dH
	DW	016H
	DW	03H
	DW	02eH
	DW	02aH
	DW	025H
	DW	059H
	DW	07H
	DW	03H
	DW	010H
	DW	022H
	DW	02H
	DW	02H
	DW	03H
	DW	09H
	DW	01H
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	0aH
	DW	07H
	DW	03H
	DW	0aH
	DW	03H
	DW	09H
	DW	05H
	DW	01cH
	DW	09H
	DW	02H
	DW	06H
	DW	0dH
	DW	07H
	DW	03H
	DW	01H
	DW	03H
	DW	0aH
	DW	02H
	DW	07H
	DW	02H
	DW	0bH
	DW	03H
	DW	06H
	DW	015H
	DW	036H
	DW	055H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	01H
	DW	027H
	DW	03H
	DW	015H
	DW	02H
	DW	02H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	0fH
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	04H
	DW	02H
	DW	03H
	DW	08H
	DW	02H
	DW	014H
	DW	01H
	DW	08H
	DW	07H
	DW	0dH
	DW	04H
	DW	01H
	DW	01aH
	DW	06H
	DW	02H
	DW	09H
	DW	022H
	DW	04H
	DW	015H
	DW	034H
	DW	0aH
	DW	04H
	DW	04H
	DW	01H
	DW	05H
	DW	0cH
	DW	02H
	DW	0bH
	DW	01H
	DW	07H
	DW	02H
	DW	01eH
	DW	0cH
	DW	02cH
	DW	02H
	DW	01eH
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	010H
	DW	09H
	DW	011H
	DW	027H
	DW	052H
	DW	02H
	DW	02H
	DW	018H
	DW	07H
	DW	01H
	DW	07H
	DW	03H
	DW	010H
	DW	09H
	DW	0eH
	DW	02cH
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	07H
	DW	05H
	DW	03H
	DW	02H
	DW	06H
	DW	01H
	DW	0bH
	DW	05H
	DW	0bH
	DW	02H
	DW	01H
	DW	012H
	DW	013H
	DW	08H
	DW	01H
	DW	03H
	DW	018H
	DW	01dH
	DW	02H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	02H
	DW	01H
	DW	0dH
	DW	06H
	DW	05H
	DW	01H
	DW	02eH
	DW	0bH
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	05H
	DW	08H
	DW	02H
	DW	0aH
	DW	06H
	DW	0cH
	DW	06H
	DW	03H
	DW	07H
	DW	0bH
	DW	02H
	DW	04H
	DW	010H
	DW	0dH
	DW	02H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	05H
	DW	02H
	DW	01cH
	DW	05H
	DW	02H
	DW	017H
	DW	0aH
	DW	08H
	DW	04H
	DW	04H
	DW	016H
	DW	027H
	DW	05fH
	DW	026H
	DW	08H
	DW	0eH
	DW	09H
	DW	05H
	DW	01H
	DW	0dH
	DW	05H
	DW	04H
	DW	03H
	DW	0dH
	DW	0cH
	DW	0bH
	DW	01H
	DW	09H
	DW	01H
	DW	01bH
	DW	025H
	DW	02H
	DW	05H
	DW	04H
	DW	04H
	DW	03fH
	DW	0d3H
	DW	05fH
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	05H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	03H
	DW	07H
	DW	0fH
	DW	05H
	DW	03H
	DW	02H
	DW	05H
	DW	03H
	DW	09H
	DW	0bH
	DW	04H
	DW	02H
	DW	016H
	DW	01H
	DW	06H
	DW	03H
	DW	08H
	DW	07H
	DW	01H
	DW	04H
	DW	01cH
	DW	04H
	DW	010H
	DW	03H
	DW	03H
	DW	019H
	DW	04H
	DW	04H
	DW	01bH
	DW	01bH
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01cH
	DW	08H
	DW	02H
	DW	0eH
	DW	01H
	DW	08H
	DW	06H
	DW	010H
	DW	019H
	DW	03H
	DW	03H
	DW	03H
	DW	0eH
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	04H
	DW	06H
	DW	03H
	DW	08H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	06H
	DW	0aH
	DW	06H
	DW	02H
	DW	03H
	DW	012H
	DW	03H
	DW	02H
	DW	05H
	DW	05H
	DW	04H
	DW	03H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	04H
	DW	017H
	DW	07H
	DW	06H
	DW	0cH
	DW	06H
	DW	04H
	DW	011H
	DW	0bH
	DW	09H
	DW	05H
	DW	01H
	DW	01H
	DW	0aH
	DW	05H
	DW	0cH
	DW	01H
	DW	01H
	DW	0bH
	DW	01aH
	DW	021H
	DW	07H
	DW	03H
	DW	06H
	DW	01H
	DW	011H
	DW	07H
	DW	01H
	DW	05H
	DW	0cH
	DW	01H
	DW	0bH
	DW	02H
	DW	04H
	DW	01H
	DW	08H
	DW	0eH
	DW	011H
	DW	017H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	08H
	DW	010H
	DW	0bH
	DW	09H
	DW	06H
	DW	05H
	DW	02H
	DW	06H
	DW	04H
	DW	010H
	DW	02H
	DW	08H
	DW	0eH
	DW	01H
	DW	0bH
	DW	08H
	DW	09H
	DW	01H
	DW	01H
	DW	01H
	DW	09H
	DW	019H
	DW	04H
	DW	0bH
	DW	013H
	DW	07H
	DW	02H
	DW	0fH
	DW	02H
	DW	0cH
	DW	08H
	DW	034H
	DW	07H
	DW	05H
	DW	013H
	DW	02H
	DW	010H
	DW	04H
	DW	024H
	DW	08H
	DW	01H
	DW	010H
	DW	08H
	DW	018H
	DW	01aH
	DW	04H
	DW	06H
	DW	02H
	DW	09H
	DW	05H
	DW	04H
	DW	024H
	DW	03H
	DW	01cH
	DW	0cH
	DW	019H
	DW	0fH
	DW	025H
	DW	01bH
	DW	011H
	DW	0cH
	DW	03bH
	DW	026H
	DW	05H
	DW	020H
	DW	07fH
	DW	01H
	DW	02H
	DW	09H
	DW	011H
	DW	0eH
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	08H
	DW	0bH
	DW	032H
	DW	04H
	DW	0eH
	DW	02H
	DW	013H
	DW	010H
	DW	04H
	DW	011H
	DW	05H
	DW	04H
	DW	05H
	DW	01aH
	DW	0cH
	DW	02dH
	DW	02H
	DW	017H
	DW	02dH
	DW	068H
	DW	01eH
	DW	0cH
	DW	08H
	DW	03H
	DW	0aH
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	04H
	DW	014H
	DW	07H
	DW	02H
	DW	09H
	DW	06H
	DW	0fH
	DW	02H
	DW	014H
	DW	01H
	DW	03H
	DW	010H
	DW	04H
	DW	0bH
	DW	0fH
	DW	06H
	DW	086H
	DW	02H
	DW	05H
	DW	03bH
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	09H
	DW	011H
	DW	03H
	DW	01aH
	DW	089H
	DW	0aH
	DW	0d3H
	DW	03bH
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	06H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	03H
	DW	04H
	DW	04H
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	04H
	DW	03H
	DW	01H
	DW	07H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	02H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	0eH
	DW	06H
	DW	01H
	DW	03H
	DW	02H
	DW	09H
	DW	06H
	DW	0fH
	DW	01bH
	DW	09H
	DW	022H
	DW	091H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	05H
	DW	08H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	0cH
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	04H
	DW	05H
	DW	01H
	DW	014H
	DW	04H
	DW	010H
	DW	01H
	DW	0fH
	DW	09H
	DW	05H
	DW	0cH
	DW	02H
	DW	09H
	DW	02H
	DW	05H
	DW	04H
	DW	02H
	DW	01aH
	DW	013H
	DW	07H
	DW	01H
	DW	01aH
	DW	04H
	DW	01eH
	DW	0cH
	DW	0fH
	DW	02aH
	DW	01H
	DW	06H
	DW	08H
	DW	0acH
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	01H
	DW	0bH
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	08H
	DW	01H
	DW	02H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	08H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	02H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0cH
	DW	05H
	DW	07H
	DW	02H
	DW	04H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	06H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	0cH
	DW	0eH
	DW	0bH
	DW	06H
	DW	06H
	DW	04H
	DW	0cH
	DW	02H
	DW	08H
	DW	01H
	DW	07H
	DW	0aH
	DW	01H
	DW	023H
	DW	07H
	DW	04H
	DW	0dH
	DW	0fH
	DW	04H
	DW	03H
	DW	017H
	DW	015H
	DW	01cH
	DW	034H
	DW	05H
	DW	01aH
	DW	05H
	DW	06H
	DW	01H
	DW	07H
	DW	0aH
	DW	02H
	DW	07H
	DW	035H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	0a3H
	DW	0214H
	DW	01H
	DW	0aH
	DW	0bH
	DW	01H
	DW	03H
	DW	03H
	DW	04H
	DW	08H
	DW	02H
	DW	08H
	DW	06H
	DW	02H
	DW	02H
	DW	017H
	DW	016H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	03H
	DW	05H
	DW	09H
	DW	08H
	DW	02H
	DW	01H
	DW	02H
	DW	08H
	DW	01H
	DW	0aH
	DW	02H
	DW	0cH
	DW	015H
	DW	014H
	DW	0fH
	DW	069H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	04H
	DW	0fH
	DW	0bH
	DW	013H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	04H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	05H
	DW	03H
	DW	05H
	DW	0cH
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	0bH
	DW	01H
	DW	01H
	DW	0fH
	DW	09H
	DW	01H
	DW	04H
	DW	05H
	DW	03H
	DW	01aH
	DW	08H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	0fH
	DW	013H
	DW	02H
	DW	0cH
	DW	01H
	DW	02H
	DW	05H
	DW	02H
	DW	07H
	DW	02H
	DW	013H
	DW	02H
	DW	014H
	DW	06H
	DW	01aH
	DW	07H
	DW	05H
	DW	02H
	DW	02H
	DW	07H
	DW	022H
	DW	015H
	DW	0dH
	DW	046H
	DW	02H
	DW	080H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	0fH
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	02aH
	DW	0aH
	DW	06H
	DW	01H
	DW	031H
	DW	055H
	DW	08H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	04H
	DW	02H
	DW	03H
	DW	06H
	DW	01H
	DW	05H
	DW	07H
	DW	04H
	DW	03H
	DW	0d3H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	02H
	DW	06H
	DW	05H
	DW	06H
	DW	0aH
	DW	03H
	DW	04H
	DW	030H
	DW	064H
	DW	06H
	DW	02H
	DW	010H
	DW	0128H
	DW	05H
	DW	01bH
	DW	0183H
	DW	02H
	DW	02H
	DW	03H
	DW	07H
	DW	010H
	DW	08H
	DW	05H
	DW	026H
	DW	0fH
	DW	027H
	DW	015H
	DW	09H
	DW	0aH
	DW	03H
	DW	07H
	DW	03bH
	DW	0dH
	DW	01bH
	DW	015H
	DW	02fH
	DW	05H
	DW	015H
	DW	06H
	ORG $+8
?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4QBFB DW 00H ; `ImFontAtlas::GetGlyphRangesJapanese'::`2'::accumulative_offsets_from_0x4E00
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	02H
	DW	01H
	DW	05H
	DW	03H
	DW	05H
	DW	07H
	DW	05H
	DW	06H
	DW	01H
	DW	02H
	DW	01H
	DW	07H
	DW	02H
	DW	06H
	DW	03H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	012H
	DW	02H
	DW	0bH
	DW	02H
	DW	06H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	0cH
	DW	07H
	DW	09H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	09H
	DW	02H
	DW	02H
	DW	04H
	DW	05H
	DW	06H
	DW	09H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	09H
	DW	03H
	DW	012H
	DW	05H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	06H
	DW	03H
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	017H
	DW	02H
	DW	0aH
	DW	04H
	DW	03H
	DW	05H
	DW	02H
	DW	04H
	DW	0aH
	DW	02H
	DW	04H
	DW	0dH
	DW	01H
	DW	06H
	DW	01H
	DW	09H
	DW	03H
	DW	01H
	DW	01H
	DW	06H
	DW	06H
	DW	07H
	DW	06H
	DW	03H
	DW	01H
	DW	02H
	DW	0bH
	DW	03H
	DW	02H
	DW	02H
	DW	03H
	DW	02H
	DW	0fH
	DW	02H
	DW	02H
	DW	05H
	DW	04H
	DW	03H
	DW	06H
	DW	04H
	DW	01H
	DW	02H
	DW	05H
	DW	02H
	DW	0cH
	DW	010H
	DW	06H
	DW	0dH
	DW	09H
	DW	0dH
	DW	02H
	DW	01H
	DW	01H
	DW	07H
	DW	010H
	DW	04H
	DW	07H
	DW	01H
	DW	013H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	07H
	DW	08H
	DW	02H
	DW	06H
	DW	05H
	DW	04H
	DW	09H
	DW	012H
	DW	07H
	DW	04H
	DW	05H
	DW	09H
	DW	0dH
	DW	0bH
	DW	08H
	DW	0fH
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	08H
	DW	02H
	DW	09H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	04H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	09H
	DW	01H
	DW	04H
	DW	03H
	DW	05H
	DW	05H
	DW	02H
	DW	07H
	DW	05H
	DW	03H
	DW	04H
	DW	08H
	DW	02H
	DW	01H
	DW	0dH
	DW	02H
	DW	03H
	DW	03H
	DW	01H
	DW	0eH
	DW	01H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	07H
	DW	06H
	DW	06H
	DW	07H
	DW	01H
	DW	04H
	DW	07H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0cH
	DW	03H
	DW	03H
	DW	09H
	DW	05H
	DW	02H
	DW	06H
	DW	01H
	DW	05H
	DW	06H
	DW	01H
	DW	02H
	DW	03H
	DW	012H
	DW	02H
	DW	04H
	DW	0eH
	DW	04H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	05H
	DW	05H
	DW	03H
	DW	02H
	DW	02H
	DW	02H
	DW	02H
	DW	0cH
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	03H
	DW	02H
	DW	03H
	DW	0bH
	DW	01H
	DW	07H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	011H
	DW	01H
	DW	09H
	DW	01H
	DW	018H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	0fH
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	014H
	DW	02H
	DW	05H
	DW	09H
	DW	01H
	DW	0aH
	DW	08H
	DW	07H
	DW	06H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	02H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	0cH
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0aH
	DW	03H
	DW	01H
	DW	07H
	DW	05H
	DW	0dH
	DW	01H
	DW	02H
	DW	03H
	DW	04H
	DW	06H
	DW	01H
	DW	01H
	DW	01eH
	DW	02H
	DW	09H
	DW	09H
	DW	01H
	DW	0fH
	DW	026H
	DW	0bH
	DW	03H
	DW	01H
	DW	08H
	DW	018H
	DW	07H
	DW	01H
	DW	09H
	DW	08H
	DW	0aH
	DW	02H
	DW	01H
	DW	09H
	DW	01fH
	DW	02H
	DW	0dH
	DW	06H
	DW	02H
	DW	09H
	DW	04H
	DW	031H
	DW	05H
	DW	02H
	DW	0fH
	DW	02H
	DW	01H
	DW	0aH
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	06H
	DW	0fH
	DW	01eH
	DW	023H
	DW	03H
	DW	0eH
	DW	012H
	DW	08H
	DW	01H
	DW	010H
	DW	0aH
	DW	01cH
	DW	0cH
	DW	013H
	DW	02dH
	DW	026H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	0dH
	DW	02H
	DW	01H
	DW	07H
	DW	03H
	DW	06H
	DW	05H
	DW	03H
	DW	04H
	DW	03H
	DW	01H
	DW	05H
	DW	07H
	DW	08H
	DW	01H
	DW	05H
	DW	03H
	DW	012H
	DW	05H
	DW	03H
	DW	06H
	DW	01H
	DW	015H
	DW	04H
	DW	018H
	DW	09H
	DW	018H
	DW	028H
	DW	03H
	DW	0eH
	DW	03H
	DW	015H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	03H
	DW	01H
	DW	0fH
	DW	0fH
	DW	06H
	DW	05H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	05H
	DW	06H
	DW	01H
	DW	09H
	DW	07H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	04H
	DW	03H
	DW	08H
	DW	015H
	DW	05H
	DW	010H
	DW	04H
	DW	05H
	DW	02H
	DW	0aH
	DW	0bH
	DW	0bH
	DW	03H
	DW	06H
	DW	03H
	DW	02H
	DW	09H
	DW	03H
	DW	06H
	DW	0dH
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	0bH
	DW	0cH
	DW	06H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	06H
	DW	05H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	06H
	DW	0dH
	DW	03H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	02H
	DW	03H
	DW	03H
	DW	0eH
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	05H
	DW	01H
	DW	09H
	DW	05H
	DW	01H
	DW	01H
	DW	06H
	DW	0cH
	DW	03H
	DW	0cH
	DW	03H
	DW	04H
	DW	0dH
	DW	02H
	DW	0eH
	DW	02H
	DW	08H
	DW	01H
	DW	011H
	DW	05H
	DW	01H
	DW	010H
	DW	04H
	DW	02H
	DW	02H
	DW	015H
	DW	08H
	DW	09H
	DW	06H
	DW	017H
	DW	014H
	DW	0cH
	DW	019H
	DW	013H
	DW	09H
	DW	026H
	DW	08H
	DW	03H
	DW	015H
	DW	028H
	DW	019H
	DW	021H
	DW	0dH
	DW	04H
	DW	03H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	05H
	DW	01aH
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	06H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	09H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	06H
	DW	01H
	DW	08H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	03H
	DW	02H
	DW	07H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	05H
	DW	04H
	DW	0aH
	DW	09H
	DW	04H
	DW	09H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	03H
	DW	02H
	DW	01H
	DW	06H
	DW	04H
	DW	09H
	DW	06H
	DW	01H
	DW	0aH
	DW	02H
	DW	01fH
	DW	011H
	DW	08H
	DW	03H
	DW	07H
	DW	05H
	DW	028H
	DW	01H
	DW	07H
	DW	07H
	DW	01H
	DW	06H
	DW	05H
	DW	02H
	DW	0aH
	DW	07H
	DW	08H
	DW	04H
	DW	0fH
	DW	027H
	DW	019H
	DW	06H
	DW	01cH
	DW	02fH
	DW	012H
	DW	0aH
	DW	07H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	06H
	DW	0aH
	DW	07H
	DW	08H
	DW	06H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	05H
	DW	08H
	DW	07H
	DW	09H
	DW	0cH
	DW	02H
	DW	0fH
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	05H
	DW	06H
	DW	02H
	DW	03H
	DW	02H
	DW	0aH
	DW	01H
	DW	04H
	DW	02H
	DW	08H
	DW	01H
	DW	01H
	DW	01H
	DW	0bH
	DW	06H
	DW	01H
	DW	015H
	DW	04H
	DW	010H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	03H
	DW	06H
	DW	05H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	04H
	DW	06H
	DW	01H
	DW	01H
	DW	0aH
	DW	04H
	DW	02H
	DW	07H
	DW	0aH
	DW	04H
	DW	07H
	DW	04H
	DW	02H
	DW	09H
	DW	04H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	08H
	DW	03H
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	07H
	DW	02H
	DW	01H
	DW	08H
	DW	01H
	DW	04H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	06H
	DW	02H
	DW	07H
	DW	01H
	DW	0aH
	DW	01H
	DW	01H
	DW	03H
	DW	04H
	DW	0bH
	DW	0aH
	DW	08H
	DW	015H
	DW	04H
	DW	06H
	DW	01H
	DW	03H
	DW	05H
	DW	02H
	DW	01H
	DW	02H
	DW	01cH
	DW	05H
	DW	05H
	DW	02H
	DW	03H
	DW	0dH
	DW	01H
	DW	02H
	DW	03H
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	05H
	DW	014H
	DW	03H
	DW	08H
	DW	0bH
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	08H
	DW	0aH
	DW	09H
	DW	02H
	DW	0aH
	DW	09H
	DW	02H
	DW	03H
	DW	01H
	DW	01H
	DW	02H
	DW	04H
	DW	01H
	DW	08H
	DW	03H
	DW	06H
	DW	01H
	DW	07H
	DW	08H
	DW	06H
	DW	0bH
	DW	01H
	DW	04H
	DW	01dH
	DW	08H
	DW	04H
	DW	03H
	DW	01H
	DW	02H
	DW	07H
	DW	0dH
	DW	01H
	DW	04H
	DW	01H
	DW	06H
	DW	02H
	DW	06H
	DW	0cH
	DW	0cH
	DW	02H
	DW	014H
	DW	03H
	DW	02H
	DW	03H
	DW	06H
	DW	04H
	DW	08H
	DW	09H
	DW	02H
	DW	07H
	DW	022H
	DW	05H
	DW	01H
	DW	012H
	DW	06H
	DW	01H
	DW	01H
	DW	04H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	03H
	DW	04H
	DW	01H
	DW	07H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	02H
	DW	03H
	DW	019H
	DW	05H
	DW	03H
	DW	06H
	DW	01H
	DW	04H
	DW	06H
	DW	07H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	0dH
	DW	06H
	DW	04H
	DW	04H
	DW	03H
	DW	01H
	DW	05H
	DW	03H
	DW	04H
	DW	04H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	0bH
	DW	01H
	DW	06H
	DW	03H
	DW	01H
	DW	07H
	DW	03H
	DW	06H
	DW	02H
	DW	08H
	DW	08H
	DW	06H
	DW	09H
	DW	03H
	DW	04H
	DW	0bH
	DW	03H
	DW	02H
	DW	0aH
	DW	0cH
	DW	02H
	DW	05H
	DW	0bH
	DW	01H
	DW	06H
	DW	04H
	DW	05H
	DW	03H
	DW	01H
	DW	08H
	DW	05H
	DW	04H
	DW	06H
	DW	06H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	06H
	DW	011H
	DW	0cH
	DW	01H
	DW	0aH
	DW	01H
	DW	06H
	DW	0cH
	DW	01H
	DW	06H
	DW	06H
	DW	013H
	DW	09H
	DW	06H
	DW	010H
	DW	01H
	DW	0dH
	DW	04H
	DW	04H
	DW	0fH
	DW	07H
	DW	011H
	DW	06H
	DW	0bH
	DW	09H
	DW	0fH
	DW	0cH
	DW	06H
	DW	07H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	0fH
	DW	09H
	DW	03H
	DW	015H
	DW	04H
	DW	06H
	DW	031H
	DW	012H
	DW	07H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	08H
	DW	02H
	DW	02H
	DW	06H
	DW	02H
	DW	09H
	DW	01H
	DW	03H
	DW	06H
	DW	04H
	DW	04H
	DW	01H
	DW	02H
	DW	010H
	DW	02H
	DW	05H
	DW	02H
	DW	01H
	DW	06H
	DW	02H
	DW	03H
	DW	05H
	DW	03H
	DW	01H
	DW	02H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	01H
	DW	08H
	DW	06H
	DW	04H
	DW	08H
	DW	0bH
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	0dH
	DW	08H
	DW	04H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	01H
	DW	04H
	DW	01H
	DW	0bH
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	05H
	DW	08H
	DW	06H
	DW	01H
	DW	01H
	DW	07H
	DW	04H
	DW	03H
	DW	08H
	DW	03H
	DW	02H
	DW	07H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	07H
	DW	06H
	DW	02H
	DW	08H
	DW	05H
	DW	01H
	DW	0bH
	DW	04H
	DW	05H
	DW	03H
	DW	06H
	DW	012H
	DW	01H
	DW	02H
	DW	0dH
	DW	03H
	DW	03H
	DW	01H
	DW	015H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	02H
	DW	09H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	06H
	DW	03H
	DW	0cH
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	06H
	DW	03H
	DW	02H
	DW	04H
	DW	08H
	DW	02H
	DW	02H
	DW	04H
	DW	02H
	DW	07H
	DW	01H
	DW	08H
	DW	09H
	DW	05H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	0dH
	DW	07H
	DW	0eH
	DW	06H
	DW	05H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	04H
	DW	02H
	DW	017H
	DW	02H
	DW	01H
	DW	01H
	DW	06H
	DW	03H
	DW	01H
	DW	04H
	DW	01H
	DW	0fH
	DW	03H
	DW	01H
	DW	07H
	DW	03H
	DW	09H
	DW	0eH
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	01H
	DW	01H
	DW	05H
	DW	08H
	DW	01H
	DW	03H
	DW	08H
	DW	03H
	DW	08H
	DW	0fH
	DW	0bH
	DW	04H
	DW	0eH
	DW	04H
	DW	04H
	DW	02H
	DW	05H
	DW	05H
	DW	01H
	DW	07H
	DW	01H
	DW	06H
	DW	0eH
	DW	07H
	DW	07H
	DW	08H
	DW	05H
	DW	0fH
	DW	04H
	DW	08H
	DW	06H
	DW	05H
	DW	06H
	DW	02H
	DW	01H
	DW	0dH
	DW	01H
	DW	014H
	DW	0fH
	DW	0bH
	DW	09H
	DW	02H
	DW	05H
	DW	06H
	DW	02H
	DW	0bH
	DW	02H
	DW	06H
	DW	02H
	DW	05H
	DW	01H
	DW	05H
	DW	08H
	DW	04H
	DW	0dH
	DW	013H
	DW	019H
	DW	04H
	DW	01H
	DW	01H
	DW	0bH
	DW	01H
	DW	022H
	DW	02H
	DW	05H
	DW	09H
	DW	0eH
	DW	06H
	DW	02H
	DW	02H
	DW	06H
	DW	01H
	DW	01H
	DW	0eH
	DW	01H
	DW	03H
	DW	0eH
	DW	0dH
	DW	01H
	DW	06H
	DW	0cH
	DW	015H
	DW	0eH
	DW	0eH
	DW	06H
	DW	020H
	DW	011H
	DW	08H
	DW	020H
	DW	09H
	DW	01cH
	DW	01H
	DW	02H
	DW	04H
	DW	0bH
	DW	08H
	DW	03H
	DW	01H
	DW	0eH
	DW	02H
	DW	05H
	DW	0fH
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	06H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	0bH
	DW	03H
	DW	01H
	DW	01H
	DW	0bH
	DW	01eH
	DW	01H
	DW	05H
	DW	01H
	DW	04H
	DW	01H
	DW	05H
	DW	08H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	03H
	DW	011H
	DW	023H
	DW	02H
	DW	06H
	DW	0cH
	DW	011H
	DW	03H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	01H
	DW	0cH
	DW	02H
	DW	07H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	010H
	DW	02H
	DW	08H
	DW	03H
	DW	06H
	DW	05H
	DW	04H
	DW	07H
	DW	03H
	DW	03H
	DW	08H
	DW	01H
	DW	09H
	DW	08H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	08H
	DW	01H
	DW	02H
	DW	09H
	DW	0cH
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	08H
	DW	03H
	DW	018H
	DW	0cH
	DW	04H
	DW	03H
	DW	07H
	DW	05H
	DW	08H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	03H
	DW	01H
	DW	017H
	DW	0aH
	DW	03H
	DW	01H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	01H
	DW	010H
	DW	01H
	DW	010H
	DW	016H
	DW	03H
	DW	0aH
	DW	04H
	DW	0bH
	DW	06H
	DW	09H
	DW	07H
	DW	07H
	DW	03H
	DW	06H
	DW	02H
	DW	02H
	DW	02H
	DW	04H
	DW	0aH
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	08H
	DW	07H
	DW	01H
	DW	06H
	DW	04H
	DW	01H
	DW	03H
	DW	03H
	DW	03H
	DW	05H
	DW	0aH
	DW	0cH
	DW	0cH
	DW	02H
	DW	03H
	DW	0cH
	DW	08H
	DW	0fH
	DW	01H
	DW	01H
	DW	010H
	DW	06H
	DW	06H
	DW	01H
	DW	05H
	DW	09H
	DW	0bH
	DW	04H
	DW	0bH
	DW	04H
	DW	02H
	DW	06H
	DW	0cH
	DW	01H
	DW	011H
	DW	05H
	DW	0dH
	DW	01H
	DW	04H
	DW	09H
	DW	05H
	DW	01H
	DW	0bH
	DW	02H
	DW	01H
	DW	08H
	DW	01H
	DW	05H
	DW	07H
	DW	01cH
	DW	08H
	DW	03H
	DW	05H
	DW	0aH
	DW	02H
	DW	011H
	DW	03H
	DW	026H
	DW	016H
	DW	01H
	DW	02H
	DW	012H
	DW	0cH
	DW	0aH
	DW	04H
	DW	026H
	DW	012H
	DW	01H
	DW	04H
	DW	02cH
	DW	013H
	DW	04H
	DW	01H
	DW	08H
	DW	04H
	DW	01H
	DW	0cH
	DW	01H
	DW	04H
	DW	01fH
	DW	0cH
	DW	01H
	DW	0eH
	DW	07H
	DW	04bH
	DW	07H
	DW	05H
	DW	0aH
	DW	06H
	DW	06H
	DW	0dH
	DW	03H
	DW	02H
	DW	0bH
	DW	0bH
	DW	03H
	DW	02H
	DW	05H
	DW	01cH
	DW	0fH
	DW	06H
	DW	012H
	DW	012H
	DW	05H
	DW	06H
	DW	04H
	DW	03H
	DW	010H
	DW	01H
	DW	07H
	DW	012H
	DW	07H
	DW	024H
	DW	03H
	DW	05H
	DW	03H
	DW	01H
	DW	07H
	DW	01H
	DW	09H
	DW	01H
	DW	0aH
	DW	07H
	DW	02H
	DW	04H
	DW	02H
	DW	06H
	DW	02H
	DW	09H
	DW	07H
	DW	04H
	DW	03H
	DW	020H
	DW	0cH
	DW	03H
	DW	07H
	DW	0aH
	DW	02H
	DW	017H
	DW	010H
	DW	03H
	DW	01H
	DW	0cH
	DW	03H
	DW	01fH
	DW	04H
	DW	0bH
	DW	01H
	DW	03H
	DW	08H
	DW	09H
	DW	05H
	DW	01H
	DW	01eH
	DW	0fH
	DW	06H
	DW	0cH
	DW	03H
	DW	02H
	DW	02H
	DW	0bH
	DW	013H
	DW	09H
	DW	0eH
	DW	02H
	DW	06H
	DW	02H
	DW	03H
	DW	013H
	DW	0dH
	DW	011H
	DW	05H
	DW	03H
	DW	03H
	DW	019H
	DW	03H
	DW	0eH
	DW	01H
	DW	01H
	DW	01H
	DW	024H
	DW	01H
	DW	03H
	DW	02H
	DW	013H
	DW	03H
	DW	0dH
	DW	024H
	DW	09H
	DW	0dH
	DW	01fH
	DW	06H
	DW	04H
	DW	010H
	DW	022H
	DW	02H
	DW	05H
	DW	04H
	DW	02H
	DW	03H
	DW	03H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	01H
	DW	011H
	DW	03H
	DW	02H
	DW	03H
	DW	05H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	05H
	DW	06H
	DW	03H
	DW	0cH
	DW	0bH
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01aH
	DW	07H
	DW	0cH
	DW	07H
	DW	02H
	DW	0eH
	DW	03H
	DW	03H
	DW	07H
	DW	07H
	DW	0bH
	DW	019H
	DW	019H
	DW	01cH
	DW	010H
	DW	04H
	DW	024H
	DW	01H
	DW	02H
	DW	01H
	DW	06H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	01bH
	DW	011H
	DW	04H
	DW	03H
	DW	04H
	DW	0dH
	DW	04H
	DW	01H
	DW	03H
	DW	02H
	DW	02H
	DW	01H
	DW	0aH
	DW	04H
	DW	02H
	DW	04H
	DW	06H
	DW	03H
	DW	08H
	DW	02H
	DW	01H
	DW	012H
	DW	01H
	DW	01H
	DW	018H
	DW	02H
	DW	02H
	DW	04H
	DW	021H
	DW	02H
	DW	03H
	DW	03fH
	DW	07H
	DW	01H
	DW	06H
	DW	028H
	DW	07H
	DW	03H
	DW	04H
	DW	04H
	DW	02H
	DW	04H
	DW	0fH
	DW	012H
	DW	01H
	DW	010H
	DW	01H
	DW	01H
	DW	0bH
	DW	02H
	DW	029H
	DW	0eH
	DW	01H
	DW	03H
	DW	012H
	DW	0dH
	DW	03H
	DW	02H
	DW	04H
	DW	010H
	DW	02H
	DW	011H
	DW	07H
	DW	0fH
	DW	018H
	DW	07H
	DW	012H
	DW	0dH
	DW	02cH
	DW	02H
	DW	02H
	DW	03H
	DW	06H
	DW	01H
	DW	01H
	DW	07H
	DW	05H
	DW	01H
	DW	07H
	DW	01H
	DW	04H
	DW	03H
	DW	03H
	DW	05H
	DW	0aH
	DW	08H
	DW	02H
	DW	03H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	01bH
	DW	04H
	DW	02H
	DW	01H
	DW	0cH
	DW	01H
	DW	02H
	DW	01H
	DW	0aH
	DW	06H
	DW	01H
	DW	06H
	DW	07H
	DW	05H
	DW	02H
	DW	03H
	DW	07H
	DW	0bH
	DW	05H
	DW	0bH
	DW	03H
	DW	06H
	DW	06H
	DW	02H
	DW	03H
	DW	0fH
	DW	04H
	DW	09H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	0bH
	DW	02H
	DW	08H
	DW	0cH
	DW	08H
	DW	05H
	DW	04H
	DW	02H
	DW	03H
	DW	01H
	DW	05H
	DW	02H
	DW	02H
	DW	01H
	DW	0eH
	DW	01H
	DW	0cH
	DW	0bH
	DW	04H
	DW	01H
	DW	0bH
	DW	011H
	DW	011H
	DW	04H
	DW	03H
	DW	02H
	DW	05H
	DW	05H
	DW	07H
	DW	03H
	DW	01H
	DW	05H
	DW	09H
	DW	09H
	DW	08H
	DW	02H
	DW	05H
	DW	06H
	DW	06H
	DW	0dH
	DW	0dH
	DW	02H
	DW	01H
	DW	02H
	DW	06H
	DW	01H
	DW	02H
	DW	02H
	DW	031H
	DW	04H
	DW	09H
	DW	01H
	DW	02H
	DW	0aH
	DW	010H
	DW	07H
	DW	08H
	DW	04H
	DW	03H
	DW	02H
	DW	017H
	DW	04H
	DW	03aH
	DW	03H
	DW	01dH
	DW	01H
	DW	0eH
	DW	013H
	DW	013H
	DW	0bH
	DW	0bH
	DW	02H
	DW	07H
	DW	05H
	DW	01H
	DW	03H
	DW	04H
	DW	06H
	DW	02H
	DW	012H
	DW	05H
	DW	0cH
	DW	0cH
	DW	011H
	DW	011H
	DW	03H
	DW	03H
	DW	02H
	DW	04H
	DW	01H
	DW	06H
	DW	02H
	DW	03H
	DW	04H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	09H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	06H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	02H
	DW	06H
	DW	04H
	DW	0eH
	DW	03H
	DW	01H
	DW	04H
	DW	0bH
	DW	04H
	DW	01H
	DW	03H
	DW	020H
	DW	01H
	DW	02H
	DW	04H
	DW	0dH
	DW	04H
	DW	01H
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	0bH
	DW	01H
	DW	04H
	DW	02H
	DW	01H
	DW	04H
	DW	04H
	DW	06H
	DW	03H
	DW	05H
	DW	01H
	DW	06H
	DW	05H
	DW	07H
	DW	06H
	DW	03H
	DW	017H
	DW	03H
	DW	05H
	DW	03H
	DW	05H
	DW	03H
	DW	03H
	DW	0dH
	DW	03H
	DW	09H
	DW	0aH
	DW	01H
	DW	0cH
	DW	0aH
	DW	02H
	DW	03H
	DW	012H
	DW	0dH
	DW	07H
	DW	0a0H
	DW	034H
	DW	04H
	DW	02H
	DW	02H
	DW	03H
	DW	02H
	DW	0eH
	DW	05H
	DW	04H
	DW	0cH
	DW	04H
	DW	06H
	DW	04H
	DW	01H
	DW	014H
	DW	04H
	DW	0bH
	DW	06H
	DW	02H
	DW	0cH
	DW	01bH
	DW	01H
	DW	04H
	DW	01H
	DW	02H
	DW	02H
	DW	07H
	DW	04H
	DW	05H
	DW	02H
	DW	01cH
	DW	03H
	DW	07H
	DW	019H
	DW	08H
	DW	03H
	DW	013H
	DW	03H
	DW	06H
	DW	0aH
	DW	02H
	DW	02H
	DW	01H
	DW	0aH
	DW	02H
	DW	05H
	DW	04H
	DW	01H
	DW	03H
	DW	04H
	DW	01H
	DW	05H
	DW	03H
	DW	02H
	DW	06H
	DW	09H
	DW	03H
	DW	06H
	DW	02H
	DW	010H
	DW	03H
	DW	03H
	DW	010H
	DW	04H
	DW	05H
	DW	05H
	DW	03H
	DW	02H
	DW	01H
	DW	02H
	DW	010H
	DW	0fH
	DW	08H
	DW	02H
	DW	06H
	DW	015H
	DW	02H
	DW	04H
	DW	01H
	DW	016H
	DW	05H
	DW	08H
	DW	01H
	DW	01H
	DW	015H
	DW	0bH
	DW	02H
	DW	01H
	DW	0bH
	DW	0bH
	DW	013H
	DW	0dH
	DW	0cH
	DW	04H
	DW	02H
	DW	03H
	DW	02H
	DW	03H
	DW	06H
	DW	01H
	DW	08H
	DW	0bH
	DW	01H
	DW	04H
	DW	02H
	DW	09H
	DW	05H
	DW	02H
	DW	01H
	DW	0bH
	DW	02H
	DW	09H
	DW	01H
	DW	01H
	DW	02H
	DW	0eH
	DW	01fH
	DW	09H
	DW	03H
	DW	04H
	DW	015H
	DW	0eH
	DW	04H
	DW	08H
	DW	01H
	DW	07H
	DW	02H
	DW	02H
	DW	02H
	DW	05H
	DW	01H
	DW	04H
	DW	014H
	DW	03H
	DW	03H
	DW	04H
	DW	0aH
	DW	01H
	DW	0bH
	DW	09H
	DW	08H
	DW	02H
	DW	01H
	DW	04H
	DW	05H
	DW	0eH
	DW	0cH
	DW	0eH
	DW	02H
	DW	011H
	DW	09H
	DW	06H
	DW	01fH
	DW	04H
	DW	0eH
	DW	01H
	DW	014H
	DW	0dH
	DW	01aH
	DW	05H
	DW	02H
	DW	07H
	DW	03H
	DW	06H
	DW	0dH
	DW	02H
	DW	04H
	DW	02H
	DW	013H
	DW	06H
	DW	02H
	DW	02H
	DW	012H
	DW	09H
	DW	03H
	DW	05H
	DW	0cH
	DW	0cH
	DW	0eH
	DW	04H
	DW	06H
	DW	02H
	DW	03H
	DW	06H
	DW	09H
	DW	05H
	DW	016H
	DW	04H
	DW	05H
	DW	019H
	DW	06H
	DW	04H
	DW	08H
	DW	05H
	DW	02H
	DW	06H
	DW	01bH
	DW	02H
	DW	023H
	DW	02H
	DW	010H
	DW	03H
	DW	07H
	DW	08H
	DW	08H
	DW	06H
	DW	06H
	DW	05H
	DW	09H
	DW	011H
	DW	02H
	DW	014H
	DW	06H
	DW	013H
	DW	02H
	DW	0dH
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	011H
	DW	0cH
	DW	02H
	DW	0eH
	DW	07H
	DW	01H
	DW	04H
	DW	012H
	DW	0cH
	DW	026H
	DW	021H
	DW	02H
	DW	0aH
	DW	01H
	DW	01H
	DW	02H
	DW	0dH
	DW	0eH
	DW	011H
	DW	0bH
	DW	032H
	DW	06H
	DW	021H
	DW	014H
	DW	01aH
	DW	04aH
	DW	010H
	DW	017H
	DW	02dH
	DW	032H
	DW	0dH
	DW	026H
	DW	021H
	DW	06H
	DW	06H
	DW	07H
	DW	04H
	DW	04H
	DW	02H
	DW	01H
	DW	03H
	DW	02H
	DW	05H
	DW	08H
	DW	07H
	DW	08H
	DW	09H
	DW	03H
	DW	0bH
	DW	015H
	DW	09H
	DW	0dH
	DW	01H
	DW	03H
	DW	0aH
	DW	06H
	DW	07H
	DW	01H
	DW	02H
	DW	02H
	DW	012H
	DW	05H
	DW	05H
	DW	01H
	DW	09H
	DW	09H
	DW	02H
	DW	044H
	DW	09H
	DW	013H
	DW	0dH
	DW	02H
	DW	05H
	DW	01H
	DW	04H
	DW	04H
	DW	07H
	DW	04H
	DW	0dH
	DW	03H
	DW	09H
	DW	0aH
	DW	015H
	DW	011H
	DW	03H
	DW	01aH
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	05H
	DW	04H
	DW	01H
	DW	07H
	DW	04H
	DW	07H
	DW	03H
	DW	04H
	DW	02H
	DW	01H
	DW	06H
	DW	01H
	DW	01H
	DW	014H
	DW	04H
	DW	01H
	DW	09H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	014H
	DW	02H
	DW	03H
	DW	01H
	DW	06H
	DW	02H
	DW	03H
	DW	06H
	DW	02H
	DW	04H
	DW	08H
	DW	01H
	DW	03H
	DW	02H
	DW	0aH
	DW	03H
	DW	05H
	DW	03H
	DW	04H
	DW	04H
	DW	03H
	DW	04H
	DW	010H
	DW	01H
	DW	06H
	DW	01H
	DW	0aH
	DW	02H
	DW	04H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	0aH
	DW	0bH
	DW	02H
	DW	02H
	DW	03H
	DW	01H
	DW	018H
	DW	01fH
	DW	04H
	DW	0aH
	DW	0aH
	DW	02H
	DW	05H
	DW	0cH
	DW	010H
	DW	0a4H
	DW	0fH
	DW	04H
	DW	010H
	DW	07H
	DW	09H
	DW	0fH
	DW	013H
	DW	011H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	04H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	07H
	DW	02H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	01H
	DW	03H
	DW	04H
	DW	03H
	DW	07H
	DW	08H
	DW	0cH
	DW	05cH
	DW	02H
	DW	0aH
	DW	03H
	DW	01H
	DW	03H
	DW	0eH
	DW	05H
	DW	019H
	DW	010H
	DW	02aH
	DW	04H
	DW	07H
	DW	07H
	DW	04H
	DW	02H
	DW	015H
	DW	05H
	DW	01bH
	DW	01aH
	DW	01bH
	DW	015H
	DW	019H
	DW	01eH
	DW	01fH
	DW	02H
	DW	01H
	DW	05H
	DW	0dH
	DW	03H
	DW	016H
	DW	05H
	DW	06H
	DW	06H
	DW	0bH
	DW	09H
	DW	0cH
	DW	01H
	DW	05H
	DW	09H
	DW	07H
	DW	05H
	DW	05H
	DW	016H
	DW	03cH
	DW	03H
	DW	05H
	DW	0dH
	DW	01H
	DW	01H
	DW	08H
	DW	01H
	DW	01H
	DW	03H
	DW	03H
	DW	02H
	DW	01H
	DW	09H
	DW	03H
	DW	03H
	DW	012H
	DW	04H
	DW	01H
	DW	02H
	DW	03H
	DW	07H
	DW	06H
	DW	03H
	DW	01H
	DW	02H
	DW	03H
	DW	09H
	DW	01H
	DW	03H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	0bH
	DW	03H
	DW	01H
	DW	06H
	DW	09H
	DW	01H
	DW	03H
	DW	02H
	DW	03H
	DW	01H
	DW	02H
	DW	01H
	DW	05H
	DW	01H
	DW	01H
	DW	04H
	DW	03H
	DW	04H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	04H
	DW	01H
	DW	07H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	03H
	DW	05H
	DW	0dH
	DW	012H
	DW	03H
	DW	04H
	DW	0eH
	DW	09H
	DW	09H
	DW	04H
	DW	010H
	DW	03H
	DW	07H
	DW	05H
	DW	08H
	DW	02H
	DW	06H
	DW	030H
	DW	01cH
	DW	03H
	DW	01H
	DW	01H
	DW	04H
	DW	02H
	DW	0eH
	DW	08H
	DW	02H
	DW	09H
	DW	02H
	DW	01H
	DW	0fH
	DW	02H
	DW	04H
	DW	03H
	DW	02H
	DW	0aH
	DW	010H
	DW	0cH
	DW	08H
	DW	07H
	DW	01H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	07H
	DW	04H
	DW	01H
	DW	06H
	DW	04H
	DW	026H
	DW	027H
	DW	010H
	DW	017H
	DW	07H
	DW	0fH
	DW	0fH
	DW	03H
	DW	02H
	DW	0cH
	DW	07H
	DW	015H
	DW	025H
	DW	01bH
	DW	06H
	DW	05H
	DW	04H
	DW	08H
	DW	02H
	DW	0aH
	DW	08H
	DW	08H
	DW	06H
	DW	05H
	DW	01H
	DW	02H
	DW	01H
	DW	03H
	DW	018H
	DW	01H
	DW	010H
	DW	011H
	DW	09H
	DW	017H
	DW	0aH
	DW	011H
	DW	06H
	DW	01H
	DW	033H
	DW	037H
	DW	02cH
	DW	0dH
	DW	0126H
	DW	09H
	DW	03H
	DW	06H
	DW	02H
	DW	04H
	DW	02H
	DW	02H
	DW	0fH
	DW	01H
	DW	01H
	DW	01H
	DW	0dH
	DW	015H
	DW	011H
	DW	044H
	DW	0eH
	DW	08H
	DW	09H
	DW	04H
	DW	01H
	DW	04H
	DW	09H
	DW	03H
	DW	0bH
	DW	07H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	06H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	03H
	DW	08H
	DW	01H
	DW	02H
	DW	02H
	DW	04H
	DW	01H
	DW	05H
	DW	05H
	DW	02H
	DW	01H
	DW	04H
	DW	03H
	DW	07H
	DW	0dH
	DW	04H
	DW	01H
	DW	04H
	DW	01H
	DW	03H
	DW	01H
	DW	01H
	DW	01H
	DW	05H
	DW	05H
	DW	0aH
	DW	01H
	DW	06H
	DW	01H
	DW	05H
	DW	02H
	DW	01H
	DW	05H
	DW	02H
	DW	04H
	DW	01H
	DW	04H
	DW	05H
	DW	07H
	DW	03H
	DW	012H
	DW	02H
	DW	09H
	DW	0bH
	DW	020H
	DW	04H
	DW	03H
	DW	03H
	DW	02H
	DW	04H
	DW	07H
	DW	0bH
	DW	010H
	DW	09H
	DW	0bH
	DW	08H
	DW	0dH
	DW	026H
	DW	020H
	DW	08H
	DW	04H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	04H
	DW	01H
	DW	01H
	DW	01H
	DW	04H
	DW	01H
	DW	015H
	DW	03H
	DW	0bH
	DW	01H
	DW	010H
	DW	01H
	DW	01H
	DW	06H
	DW	01H
	DW	03H
	DW	02H
	DW	04H
	DW	09H
	DW	08H
	DW	039H
	DW	07H
	DW	02cH
	DW	01H
	DW	03H
	DW	03H
	DW	0dH
	DW	03H
	DW	0aH
	DW	01H
	DW	01H
	DW	07H
	DW	05H
	DW	02H
	DW	07H
	DW	015H
	DW	02fH
	DW	03fH
	DW	03H
	DW	0fH
	DW	04H
	DW	07H
	DW	01H
	DW	010H
	DW	01H
	DW	01H
	DW	02H
	DW	08H
	DW	02H
	DW	03H
	DW	02aH
	DW	0fH
	DW	04H
	DW	01H
	DW	01dH
	DW	07H
	DW	016H
	DW	0aH
	DW	03H
	DW	04eH
	DW	010H
	DW	0cH
	DW	014H
	DW	012H
	DW	04H
	DW	043H
	DW	0bH
	DW	05H
	DW	01H
	DW	03H
	DW	0fH
	DW	06H
	DW	015H
	DW	01fH
	DW	020H
	DW	01bH
	DW	012H
	DW	0dH
	DW	047H
	DW	023H
	DW	05H
	DW	08eH
	DW	04H
	DW	0aH
	DW	01H
	DW	02H
	DW	032H
	DW	013H
	DW	021H
	DW	010H
	DW	023H
	DW	025H
	DW	010H
	DW	013H
	DW	01bH
	DW	07H
	DW	01H
	DW	085H
	DW	013H
	DW	01H
	DW	04H
	DW	08H
	DW	07H
	DW	014H
	DW	01H
	DW	04H
	DW	04H
	DW	01H
	DW	0aH
	DW	03H
	DW	01H
	DW	06H
	DW	01H
	DW	02H
	DW	033H
	DW	05H
	DW	028H
	DW	0fH
	DW	018H
	DW	02bH
	DW	05990H
	DW	0bH
	DW	01H
	DW	0dH
	DW	09aH
	DW	046H
	DW	03H
	DW	01H
	DW	01H
	DW	07H
	DW	04H
	DW	0aH
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	03H
	DW	02H
	DW	01H
	DW	01H
	DW	01H
	DW	01H
	DW	02H
	DW	01H
	DW	01H
	ORG $+2
?ranges@?1??GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesCyrillic'::`2'::ranges
	DW	0ffH
	DW	0400H
	DW	052fH
	DW	02de0H
	DW	02dffH
	DW	0a640H
	DW	0a69fH
	DW	00H
	ORG $+6
?ranges@?1??GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesThai'::`2'::ranges
	DW	0ffH
	DW	02010H
	DW	0205eH
	DW	0e00H
	DW	0e7fH
	DW	00H
	ORG $+2
?ranges@?1??GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ@4QBGB DW 020H ; `ImFontAtlas::GetGlyphRangesVietnamese'::`2'::ranges
	DW	0ffH
	DW	0102H
	DW	0103H
	DW	0110H
	DW	0111H
	DW	0128H
	DW	0129H
	DW	0168H
	DW	0169H
	DW	01a0H
	DW	01a1H
	DW	01afH
	DW	01b0H
	DW	01ea0H
	DW	01ef9H
	DW	00H
	ORG $+6
?proggy_clean_ttf_compressed_data_base85@@3QBDB DB '7])#######hV0qs''/###'
	DB	'[),##/l:$#Q6>##5[n42>c-TH`->>#/e>11NNV=Bv(*:.F?uu#(gRU.o0XGH`'
	DB	'$vhLG1hxt9?W`#,5LsCp#-i>.r$<$6pD>Lb'';9Crc6tgXmKVeU2cD4Eo3R/2'
	DB	'*>]b(MC;$jPfY.;h^`IWM9<Lh2TlS+f-s$o6Q<BWH`YiU.xfLq$N;$0iR/GX:'
	DB	'U(jcW2p/W*q?-qmnUCI;jHSAiFWM.R*kU@C=GH?a9wp8f$e.-4^Qg1)Q-GL(l'
	DB	'f(r/7GrRgwV%MS=C#`8ND>Qo#t''X#(v#Y9w0#1D$CIf;W''#pWUPXOuxXuU('
	DB	'H9M(1<q-UE31#^-V''8IRUo7Qf./L>=Ke$$''5F%)]0^#0X@U.a<r:QLtFsLc'
	DB	'L6##lOj)#.Y5<-R&KgLwqJfLgN&;Q?gI^#DY2uLi@^rMl9t=cWq6##weg>$FB'
	DB	'jVQTSDgEKnIS7EM9>ZY9w0#L;>>#Mx&4Mvt//L[MkA#W@lK.N''[0#7RL_&#w'
	DB	'+F%HtG9M#XL`N&.,GM4Pg;-<nLENhvx>-VsM.M0rJfLH2eTM`*oJMHRC`Nkfi'
	DB	'mM2J,W-jXS:)r0wK#@Fge$U>`w''N7G#$#fB#$E^$#:9:hk+eOe--6x)F7*E%'
	DB	'?76%^GMHePW-Z5l''&GiF#$956:rS?dA#fiK:)Yr+`&#0j@''DbG&#^$PG.Ll'
	DB	'+DNa<XCMKEV*N)LN/N*b=%Q6pia-Xg8I$<MR&,VdJe$<(7G;Ckl''&hF;;$<_'
	DB	'=X(b.RS%%)###MPBuuE1V:v&cX&#2m#(&cV]`k9OhLMbn%s$G2,B$BfD3X*sp'
	DB	'5#l,$R#]x_X1xKX%b5U*[r5iMfUo9U`N99hG)tm+/Us9pG)XPu`<0s-)WTt(g'
	DB	'CRxIg(%6sfh=ktMKn3j)<6<b5Sk_/0(^]AaN#(p/L>&VZ>1i%h1S9u5o@YaaW'
	DB	'$e+b<TWFn/Z:Oh(Cx2$lNEoN^e)#CFY@@I;BOQ*sRwZtZxRcU7uW6CXow0i(?'
	DB	'$Q[cjOd[P4d)]>ROPOpxTO7Stwi1::iB1q)C_=dV26J;2,]7op$]uQr@_V7$q'
	DB	'^%lQwtuHY]=DX,n3L#0PHDO4f9>dC@O>HBuKPpP*E,N+b3L#lpR/MrTEH.IAQ'
	DB	'k.a>D[.e;mc.x]Ip.PH^''/aqUO/$1WxLoW0[iLA<QT;5HKD+@qQ''NQ(3_PL'
	DB	'hE48R.qAPSwQ0/WK?Z,[x?-J;jQTWA0X@KJ(_Y8N-:/M74:/-ZpKrUss?d#dZ'
	DB	'q]DAbkU*JqkL+nwX@@47`5>w=4h(9.`GCRUxHPeR`5Mjol(dUWxZa(>STrPkr'
	DB	'JiWx`5U7F#.g*jrohGg`cg:lSTvEY/EV_7H4Q9[Z%cnv;JQYZ5q.l7Zeas:HO'
	DB	'IZOB?G<Nald$qs]@]L<J7bR*>gv:[7MI2k).''2($5FNP&EQ(,)U]W]+fh18.'
	DB	'vsai00);D3@4ku5P?DP8aJt+;qUM]=+b''8@;mViBKx0DE[-auGl8:PJ&Dj+M'
	DB	'6OC]O^((##]`0i)drT;-7X`=-H3[igUnPG-NZlo.#k@h#=Ork$m>a>$-?Tm$U'
	DB	'V(?#P6YY#''/###xe7q.73rI3*pP/$1>s9)W,JrM7SN]''/4C#v$U`0#V.[0>'
	DB	'xQsH$fEmPMgY2u7Kh(G%siIfLSoS+MK2eTM$=5,M8p`A.;_R%#u[K#$x4AG8.'
	DB	'kK/HSB==-''Ie/QTtG?-.*^N-4B/ZM_3YlQC7(p7q)&](`6_c)$/*JL(L-^(]'
	DB	'$wIM`dPtOdGA,U3:w2M-0<q-]L_?^)1vw''.,MRsqVr.L;aN&#/EgJ)PBc[-f'
	DB	'>+WomX2u7lqM2iEumMTcsF?-aT=Z-97UEnXglEn1K-bnEO`guFt(c%=;Am_Qs'
	DB	'@jLooI&NX;]0#j4#F14;gl8-GQpgwhrq8''=l_f-b49''UOqkLu7-##oDY2L('
	DB	'te+Mch&gLYtJ,MEtJfLh''x''M=$CS-ZZ%P]8bZ>#S?YY#%Q&q''3^Fw&?D)U'
	DB	'DNrocM3A76//oL?#h7gl85[qW/NDOk%16ij;+:1a''iNIdb-ou8.P*w,v5#EI'
	DB	'$TWS>Pot-R*H''-SEpA:g)f+O$%%`kA#G=8RMmG1&O`>to8bC]T&$,n.LoO>2'
	DB	'9sp3dt-52U%VM#q7''DHpg+#Z9%H[K<L%a2E-grWVM3@2=-k22tL]4$##6We'''
	DB	'8UJCKE[d_=%wI;''6X-GsLX4j^SgJ$##R*w,vP3wK#iiW&#*h^D&R?jp7+/u&'
	DB	'#(AP##XU8c$fSYW-J95_-Dp[g9wcO&#M-h1OcJlc-*vpw0xUX&#OQFKNX@QI'''
	DB	'IoPp7nb,QU//MQ&ZDkKP)X<WSVL(68uVl&#c''[0#(s1X&xm$Y%B7*K:eDA32'
	DB	'3j998GXbA#pwMs-jgD$9QISB-A_(aN4xoFM^@C58D0+Q+q3n0#3U1InDjF682'
	DB	'-SjMXJK)(h$hxua_K]ul92%''BOU&#BRRh-slg8KDlr:%L71Ka:.A;%YULjDP'
	DB	'mL<LYs8i#XwJOYaKPKc1h:''9Ke,g)b),78=I39B;xiY$bgGw-&.Zi9InXDuY'
	DB	'a%G*f2Bq7mn9^#p1vv%#(Wi-;/Z5ho;#2:;%d&#x9v68C5g?ntX0X)pT`;%pB'
	DB	'3q7mgGN)3%(P8nTd5L7GeA-GL@+%J3u2:(Yf>et`e;)f#Km8&+DC$I46>#Kr]'
	DB	']u-[=99tts1.qb#q72g1WJO81q+eN''03''eM>&1XxY-caEnOj%2n8)),?ILR'
	DB	'5^.Ibn<-X-Mq7[a82Lq:F&#ce+S9wsCK*x`569E8ew''He]h:sI[2LM$[guka'
	DB	'3ZRd6:t%IG:;$%YiJ:Nq=?eAw;/:nnDq0(CYcMpG)qLN4$##&J<j$UpK<Q4a1'
	DB	']MupW^-sj_$%[HK%''F####QRZJ::Y3EGl4''@%FkiAOg#p[##O`gukTfBHag'
	DB	'L<LHw%q&OV0##F=6/:chIm0@eCP8X]:kFI%hl8hgO@RcBhS-@Qb$%+m=hPDLg'
	DB	'*%K8ln(wcf3/''DW-$.lR?n[nCH-eXOONTJlh:.RYF%3''p6sq:UIMA945&^H'
	DB	'FS87@$EP2iG<-lCO$%c`uKGD3rC$x0BL8aFn--`ke%#HMP''vh1/R&O_J9''u'
	DB	'm,.<tx[@%wsJk&bUT2`0uMv7gg#qp/ij.L56''hl;.s5CUrxjOM7-##.l+Au'''
	DB	'A&O:-T72L]P`&=;ctp''XScX*rU.>-XTt,%OVU4)S1+R-#dg0/Nn?Ku1^0f$B'
	DB	'*P:Rowwm-`0PKjYDDM''3]d39VZHEl4,.j'']Pk-M.h^&:0FACm$maq-&sgw0'
	DB	't7/6(^xtk%LuH88Fj-ekm>GA#_>568x6(OFRl-IZp`&b,_P''$M<Jnq79VsJW'
	DB	'/mWS*PUiq76;]/NM_>hLbxfc$mj`,O;&%W2m`Zh:/)Uetw:aJ%]K9h:TcF]u_'
	DB	'-Sj9,VK3M.*''&0D[Ca]J9gp8,kAW]%(?A%R$f<->Zts''^kn=-^@c4%-pY6q'
	DB	'I%J%1IGxfLU9CP8cbPlXv);C=b),<2mOvP8up,UVf3839acAWAW-W?#ao/^#%'
	DB	'KYo8fRULNd2.>%m]UK:n%r$''sw]J;5pAoO_#2mO3n,''=H5(etHg*`+RLgv>'
	DB	'=4U8guD$I%D:W>-r5V*%j*W:Kvej.Lp$<M-SGZ'':+Q_k+uvOSLiEo(<aD/K<'
	DB	'CCc`''Lx>''?;++O''>()jLR-^u68PHm8ZFWe+ej8h:9r6L*0//c&iH&R8pRb'
	DB	'A#Kjm%upV1g:a_#Ur7FuA#(tRh#.Y5K+@?3<-8m0$PEn;J:rh6?I6uG<-`wMU'
	DB	'''ircp0LaE_OtlMb&1#6T.#FDKu#1Lw%u%+GM+X''e?YLfjM[VO0MbuFp7;>Q'
	DB	'&#WIo)0@F%q7c#4XAXN-U&VB<HFF*qL($/V,;(kXZejWO`<[5??ewY(*9=%wD'
	DB	'c;,u<''9t3W-(H1th3+G]ucQ]kLs7df($/*JL]@*t7Bu_G3_7mp7<iaQjO@.k'
	DB	'Lg;x3B0lqp7Hf,^Ze7-##@/c58Mo(3;knp0%)A7?-W+eI''o8)b<nKnw''Ho8'
	DB	'C=Y>pqB>0ie&jhZ[?iLR@@_AvA-iQC(=ksRZRVp7`.=+NpBC%rh&3]R:8XDmE'
	DB	'5^V8O(x<<aG/1N$#FX$0V5Y6x''aErI3I$7x%E`v<-BY,)%-?Psf*l?%C3.mM'
	DB	'(=/M0:JxG''?7WhH%o''a<-80g0NBxoO(GH<dM]n.+%q@jH?f.UsJ2Ggs&4<-'
	DB	'e47&Kl+f//9@`b+?.TeN_&B8Ss?v;^Trk;f#YvJkl&w$]>-+k?''(<S:68tq*'
	DB	'WoDfZu'';mM?8X[ma8W%*`-=;D.(nc7/;)g:T1=^J$&BRV(-lTmNB6xqB[@0*'
	DB	'o.erM*<SWF]u2=st-*(6v>^](H.aREZSi,#1:[IXaZFOm<-ui#qUq2$##Ri;u'
	DB	'75OK#(RtaW-K-F`S+cF]uN`-KMQ%rP/Xri.LRcB##=YL3BgM/3MD?@f&1''BW'
	DB	'-)Ju<L25gl8uhVm1hL$##*8###''A3/LkKW+(^rWX?5W_8g)a(m&K8P>#bmmW'
	DB	'CMkk&#TR`C,5d>g)F;t,4:@_l8G/5h4vUd%&%950:VXD''QdWoY-F$BtUwmfe'
	DB	'$YqL''8(PWX(P?^@Po3$##`MSs?DWBZ/S>+4%>fX,VWv/w''KD`LP5IbH;rTV'
	DB	'>n3cEK8U#bX]l-/V+^lj3;vlMb&[5YQ8#pekX9JP3XUC72L,,?+Ni&co7ApnO'
	DB	'*5NK,((W-i:$,kp''UDAO(G0Sq7MVjJsbIu)''Z,*[>br5fX^:FPAWr-m2KgL'
	DB	'<LUN098kTF&#lvo58=/vjDo;.;)Ka*hLR#/k=rKbxuV`>Q_nN6''8uTG&#1T5'
	DB	'g)uLv:873UpTLgH+#FgpH''_o1780Ph8KmxQJ8#H72L4@768@Tm&Qh4CB/5Ov'
	DB	'mA&,Q&QbUoi$a_%3M01H)4x7I^&KQVgtFnV+;[Pc>[m4k//,]1?#`VY[Jr*3&'
	DB	'&slRfLiVZJ:]?=K3Sw=[$=uRB?3xk48@aeg<Z''<$#4H)6,>e0jT6''N#(q%.'
	DB	'O=?2S]u*(m<-V8J''(1)G][68hW$5''q[GC&5j`TE?m''esFGNRM)j,ffZ?-q'
	DB	'x8;->g4t*:CIP/[Qap7/9''#(1sao7w-.qNUdkJ)tCF&#B^;xGvn2r9FEPFFF'
	DB	'cL@.iFNkTve$m%#QvQS8U@)2Z+3K:AKM5isZ88+dKQ)W6>J%CL<KE>`.d*(B`'
	DB	'-n8D9oK<Up]c$X$(,)M8Zt7/[rdkqTgl-0cuGMv''?>-XV1q[''-5k''cAZ69'
	DB	'e;D_?$ZPP&s^+7])$*$#@QYi9,5P&#9r+$%CE=68>K8r0=dSC%%(@p7.m7jil'
	DB	'Q02''0-VWAg<a/''''3u.=4L$Y)6k/K:_[3=&jvL<L0C/2''v:^;-DIBW,B4E'
	DB	'68:kZ;%?8(Q8BH=kO65BW?xSG&#@uU,DS*,?.+(o(#1vCS8#CHF>TlGW''b)T'
	DB	'q7VT9q^*^$$.:&N@@$&)WHtPm*5_rO0&e%K&#-30j(E4#''Zb.o/(Tpm$>K'''
	DB	'f@[PvFl,hfINTNU6u''0pao7%XUp9]5.>%h`8_=VYbxuel.NTSsJfLacFu3B'''
	DB	'lQSu/m6-Oqem8T+oE--$0a/k]uj9EwsG>%veR*hv^BFpQj:K''#SJ,sB-''#]'
	DB	'(j.Lg92rTw-*n%@/;39rrJF,l#qV%OrtBeC6/,;qB3ebNW[?,Hqj2L.1NP&Gj'
	DB	'UR=1D8QaS3Up&@*9wP?+lo7b?@%''k4`p0Z$22%K3+iCZj?XJN4Nm&+YF]u@-'
	DB	'W$U%VEQ/,,>>#)D<h#`)h0:<Q6909ua+&VU%n2:cG3FJ-%@Bj-DgLr`Hw&HAK'
	DB	'jKjseK</xKT*)B,N9X3]krc12t''pgTV(Lv-tL[xg_%=M_q7a^x?7Ubd>#%8c'
	DB	'Y#YZ?=,`Wdxu/ae&#w6)R89tI#6@s''(6Bf7a&?S=^ZI_kS&ai`&=tE72L_D,'
	DB	';^R)7[$s<Eh#c&)q.MXI%#v9ROa5FZO%sF7q7Nwb&#ptUJ:aqJe$Sl68%.D##'
	DB	'#EC><?-aF&#RNQv>o8lKN%5/$(vdfq7+ebA#u1p]ovUKW&Y%q]''>$1@-[xfn'
	DB	'$7ZTp7mM,G,Ko7a&Gu%G[RMxJs[0MM%wci.LFDK)(<c`Q8N)jEIF*+?P2a8g%'
	DB	')$q]o2aH8C&<SibC/q,(e:v;-b#6[$NtDZ84Je2KNvB#$P5?tQ3nt(0d=j.LQ'
	DB	'f./Ll33+(;q3L-w=8dX$#WF&uIJ@-bfI>%:_i2B5CsR8&9Z&#=mPEnm0f`<&c'
	DB	')QL5uJ#%u%lJj+D-r;BoF&#4DoS97h5g)E#o:&S4weDF,9^Hoe`h*L+_a*NrL'
	DB	'W-1pG_&2UdB86e%B/:=>)N4xeW.*wft-;$''58-ESqr<b?UI(_%@[P46>#U`'''
	DB	'6AQ]m&6/`Z>#S?YY#Vc;r7U2&326d=w&H####?TZ`*4?&.MK?LP8Vxg>$[QXc'
	DB	'%QJv92.(Db*B)gb*BM9dM*hJMAo*c&#b0v=Pjer]$gG&JXDf->''StvU7505l'
	DB	'9$AFvgYRI^&<^b68?j#q9QX4SM''RO#&sL1IM.rJfLUAj221]d##DW=m83u5;'
	DB	'''bYx,*Sl0hL(W;;$doB&O/TQ:(Z^xBdLjL<Lni;''''X.`$#8+1GD:k$YUWs'
	DB	'bn8ogh6rxZ2Z9]%nd+>V#*8U_72Lh+2Q8Cj0i:6hp&$C/:p(HK>T8Y[gHQ4`4'
	DB	')''$Ab(Nof%V''8hL&#<NEdtg(n''=S1A(Q1/I&4([%dM`,Iu''1:_hL>SfD0'
	DB	'7&6D<fp8dHM7/g+tlPN9J*rKaPct&?''uBCem^jn%9_K)<,C5K3s=5g&GmJb*'
	DB	'[SYq7K;TRLGCsM-$$;S%:Y@r7AK0pprpL<Lrh,q7e/%KWK:50I^+m''vi`3?%'
	DB	'Zp+<-d+$L-Sv:@.o19n$s0&39;kn;S%BSq*$3WoJSCLweV[aZ''MQIjO<7;X-'
	DB	'X;&+dMLvu#^UsGEC9WEc[X(wI7#2.(F0jV*eZf<-Qv3J-c+J5AlrB#$p(H68L'
	DB	'vEA''q3n0#m,[`*8Ft)FcYgEud]CWfm68,(aLA$@EFTgLXoBq/UPlp7:d[/;r'
	DB	'_ix=:TF`S5H-b<LI&HY(K=h#)]Lk$K14lVfm:x$H<3^Ql<M`$OhapBnkup''D'
	DB	'#L$Pb_`N*g]2e;X/Dtg,bsj&K#2[-:iYr''_wgH)NUIR8a1n#S?Yej''h8^58'
	DB	'UbZd+^FKD*T@;6A7aQC[K8d-(v6GI$x:T<&''Gp5Uf>@M.*J:;$-rv29''M]8'
	DB	'qMv-tLp,''886iaC=Hb*YJoKJ,(j%K=H`K.v9HggqBIiZu''QvBT.#=)0ukru'
	DB	'V&.)3=(^1`o*Pj4<-<aN((^7(''#Z0wK#5GX@7u][`*S^43933A4rl][`*O4C'
	DB	'gLEl]v$1Q3AeF37dbXk,.)vj#x''d`;qgbQR%FW,2(?LO=s%Sc68%NP''##Ao'
	DB	'tl8x=BE#j1UD([3$M(]UI2LX3RpKN@;/#f''f/&_mt&F)XdF<9t4)Qa.*kTLw'
	DB	'Q''(TTB9.xH''>#MJ+gLq9-##@HuZPN0]u:h7.T..G:;$/Usj(T7`Q8tT72Ln'
	DB	'Yl<-qx8;-HV7Q-&Xdx%1a,hC=0u+HlsV>nuIQL-5<N?)NBS)QN*_I,?&)2''I'
	DB	'M%L3I)X((e/dl2&8''<M:^#M*Q+[T.Xri.LYS3v%fF`68h;b-X[/En''CR.q7'
	DB	'E)p''/kle2HM,u;^%OKC-N+Ll%F9CF<Nf''^#t2L,;27W:0O@6##U6W7:$rJf'
	DB	'LWHj$#)woqBefIZ.PK<b*t7ed;p*_m;4ExK#h@&]>_>@kXQtMacfD.m-VAb8;'
	DB	'IReM3$wf0''''hra*so568''Ip&vRs849''MRYSp%:t:h5qSgwpEr$B>Q,;s('
	DB	'C#$)`svQuF$##-D,##,g68@2[T;.XSdN9Qe)rpt._K-#5wF)sP''##p#C0c%-'
	DB	'Gb%hd+<-j''Ai*x&&HMkT]C''OSl##5RG[JXaHN;d''uA#x._U;.`PU@(Z3dt'
	DB	'4r152@:v,''R.Sj''w#0<-;kPI)FfJ&#AYJ&#//)>-k=m=*XnK$>=)72L]0I%'
	DB	'>.G690a:$##<,);?;72#?x9+d;^V''9;jY@;)br#q^YQpx:X#Te$Z^''=-=bG'
	DB	'hLf:D6&bNwZ9-ZD#n^9HhLMr5G;'']d&6''wYmTFmL<LD)F^%[tC''8;+9E#C'
	DB	'$g%#5Y>q9wI>P(9mI[>kC-ekLC/R&CH+s''B;K-M6$EB%is00:+A4[7xks.Lr'
	DB	'Nk0&E)wILYF@2L''0Nb$+pv<(2.768/FrY&h$^3i&@+G%JT''<-,v`3;_)I9M'
	DB	'^AE]CN?Cl2AZg+%4iTpT3<n-&%H%b<FDj2M<hH=&Eh<2Len$b*aTX=-8QxN)k'
	DB	'11IM1c^j%9s<L<NFSo)B?+<-(GxsF,^-Eh@$4dXhN$+#rxK8''je''D7k`e;)'
	DB	'2pYwPA''_p9&@^18ml1^[@g4t*[JOa*[=Qp7(qJ_oOL^(''7fB&Hq-:sf,sNj'
	DB	'8xq^>$U4O]GKx''m9)b@p7YsvK3w^YR-CdQ*:Ir<($u&)#(&?L9Rg3H)4fiEp'
	DB	'^iI9O8KnTj,]H?D*r7''M;PwZ9K0E^k&-cpI;.p/6_vwoFMV<->#%Xi.LxVnr'
	DB	'U(4&8/P+:hLSKj$#U%]49t''I:rgMi''FL@a:0Y-uA[39'',(vbma*hU%<-SR'
	DB	'F`Tt:542R_VV$p@[p8DV[A,?1839FWdF<TddF<9Ah-6&9tWoDlh]&1SpGMq>T'
	DB	'i1O*H&#(AL8[_P%.M>v^-))qOT*F5Cq0`Ye%+$B6i:7@0IX<N+T+0MlMBPQ*V'
	DB	'j>SsD<U4JHY8kD2)2fU/M#$e.)T4,_=8hLim[&);?UkK''-x?''(:siIfL<$p'
	DB	'FM`i<?%W(mGDHM%>iWP,##P`%/L<eXi:@Z9C.7o=@(pXdAO/NLQ8lPl+HPOQa'
	DB	'8wD8=^GlPa8TKI1CjhsCTSLJM''/Wl>-S(qw%sf/@%#B6;/U7K]uZbi^Oc^2n'
	DB	'<bhPmUkMw>%t<)''mEVE''''n`WnJra$^TKvX5B>;_aSEK'',(hwa0:i4G?.B'
	DB	'ci.(X[?b*($,=-n<.Q%`(X=?+@Am*Js0&=3bh8K]mL<LoNs''6,''85`0?t/'''
	DB	'_U59@]ddF<#LdF<eWdF<OuN/45rY<-L@&#+fm>69=Lb,OcZV/);TTm8VI;?%O'
	DB	'tJ<(b4mq7M6:u?KRdF<gR@2L=FNU-<b[(9c/ML3m;Z[$oF3g)GAWqpARc=<RO'
	DB	'u7cL5l;-[A]%/+fsd;l#SafT/f*W]0=O''$(Tb<[)*@e775R-:Yob%g*>l*:x'
	DB	'P?Yb.5)%w_I?7uk5JC+FS(m#i''k.''a0i)9<7b''fs''59hq$*5Uhv##pi^8'
	DB	'+hIEBF`nvo`;''l0.^S1<-wUK2/Coh58KKhLjM=SO*rfO`+qC`W-On.=AJ56>'
	DB	'>i2@2LH6A:&5q`?9I3@@''04&p2/LVa*T-4<-i3;M9UvZd+N7>b*eIwg:CC)c'
	DB	'<>nO&#<IGe;__.thjZl<%w(Wk2xmp4Q@I#I9,DF]u7-P=.-_:YJ]aS@V?6*C('
	DB	')dOp7:WL,b&3Rg/.cmM9&r^>$(>.Z-I&J(Q0Hd5Q%7Co-b`-c<N(6r@ip+Aur'
	DB	'K<m86QIth*#v;-OBqi+L7wDE-Ir8K[''m+DDSLwK&/.?-V%U_%3:qKNu$_b*B'
	DB	'-kp7NaD''QdWQPKYq[@>P)hI;*_F]u`Rb[.j8_Q/<&>uu+VsH$sM9TA%?)(vm'
	DB	'J80),P7E>)tjD%2L=-t#fK[%`v=Q8<FfNkgg^oIbah*#8/Qt$F&:K*-(N/''+'
	DB	'1vMB,u()-a.VUU*#[e%gAAO(S>WlA2);Sa>gXm8YB`1d@K#n]76-a$U,mF<fX'
	DB	']idqd)<3,]J7JmW4`6]uks=4-72L(jEk+:bJ0M^q-8Dm_Z?0olP1C9Sa&H[d&'
	DB	'c$ooQUj]Exd*3ZM@-WGW2%s'',B-_M%>%Ul:#/''xoFM9QX-$.QN''>[%$Z$u'
	DB	'F6pA6Ki2O5:8w*vP1<-1`[G,)-m#>0`P&#eb#.3i)rtB61(o''$?X3B</R90;'
	DB	'eZ]%Ncq;-Tl]#F>2Qft^ae_5tKL9MUe9b*sLEQ95C&`=G?@Mj=wh*''3E>=-<'
	DB	')Gt*Iw)''QG:`@IwOf7&]1i''S01B+Ev/Nac#9S;=;YQpg_6U`*kVY39xK,[/'
	DB	'6Aj7:''1Bm-_1EYfa1+o&o4hp7KN_Q(OlIo@S%;jVdn0''1<Vc52=u`3^o-n1'
	DB	'''g4v58Hj&6_t7$##?M)c<$bgQ_''SY((-xkA#Y(,p''H9rIVY-b,''%bCPF7'
	DB	'.J<Up^,(dU1VY*5#WkTU>h19w,WQhLI)3S#f$2(eb,jr*b;3Vw]*7NH%$c4Vs'
	DB	',eD9>XW8?N]o+(*pgC%/72LV-u<Hp,3@e^9UB1J+ak9-TN/mhKPg+AJYd$Mlv'
	DB	'AF_jCK*.O-^(63adMT->W%iewS8W6m2rtCpo''RS1R84=@paTKt)>=%&1[)*v'
	DB	'p''u+x,VrwN;&]kuO9JDbg=pO$J*.jVe;u''m0dr9l,<*wMK*Oe=g8lV_KEBF'
	DB	'kO''oU]^=[-792#ok,)i]lR8qQ2oA8wcRCZ^7w/Njh;?.stX?Q1>S1q4Bn$)K'
	DB	'1<-rGdO''$Wr.Lc.CG)$/*JL4tNR/,SVO3,aUw''DJN:)Ss;wGn9A32ijw%FL'
	DB	'+Z0Fn.U9;reSq)bmI32U==5ALuG&#Vf1398/pVo1*c-(aY168o<`JsSbk-,1N'
	DB	';$>0:OUas(3:8Z972LSfF8eb=c-;>SPw7.6hn3m`9^Xkn(r.qS[0;T%&Qc=+S'
	DB	'TRxX''q1BNk3&*eu2;&8q$&x>Q#Q7^Tf+6<(d%ZVmj2bDi%.3L2n+4W''$PiD'
	DB	'DG)g,r%+?,$@?uou5tSe2aN_AQU*<h`e-GI7)?OK2A.d7_c)?wQ5AS@DL3r#7'
	DB	'fSkgl6-++D:''A,uq7SvlB$pcpH''q3n0#_%dY#xCpr-l<F0NR@-##FEV6NTF'
	DB	'6##$l84N1w?AO>''IAOURQ##V^Fv-XFbGM7Fl(N<3DhLGF%q.1rC$#:T__&Pi'
	DB	'68%0xi_&[qFJ(77j_&JWoF.V735&T,[R*:xFR*K5>>#`bW-?4Ne_&6Ne_&6Ne'
	DB	'_&n`kr-#GJcM6X;uM6X;uM(.a..^2TkL%oR(#;u.T%fAr%4tJ8&><1=GHZ_+m'
	DB	'9/#H1F^R#SC#*N=BA9(D?v[UiFY>>^8p,KKF.W]L29uLkLlu/+4T<XoIB&hx='
	DB	'T1PcDaB&;HH+-AFr?(m9HZV)FKS8JCw;SD=6[^/DZUL`EUDf]GGlG&>w$)F./'
	DB	'^n3+rlo+DB;5sIYGNk+i1t-69Jg--0pao7Sm#K)pdHW&;LuDNH@H>#/X-TI(;'
	DB	'P>#,Gc>#0Su>#4`1?#8lC?#<xU?#@.i?#D:%@#HF7@#LRI@#P_[@#Tkn@#Xw*'
	DB	'A#]-=A#a9OA#d<F&#*;G##.GY##2Sl##6`($#:l:$#>xL$#B.`$#F:r$#JF.%'
	DB	'#NR@%#R_R%#Vke%#Zww%#_-4&#3^Rh%Sflr-k''MS.o?.5/sWel/wpEM0%3'''
	DB	'/1)K^f1-d>G21&v(35>V`39V7A4=onx4A1OY5EI0;6Ibgr6M$HS7Q<)58C5w,'
	DB	';WoA*#[%T*#`1g*#d=#+#hI5+#lUG+#pbY+#tnl+#x$),#&1;,#*=M,#.I`,#'
	DB	'2Ur,#6b.-#;w[H#iQtA#m^0B#qjBB#uvTB##-hB#''9$C#+E6C#/QHC#3^ZC#'
	DB	'7jmC#;v)D#?,<D#C8ND#GDaD#KPsD#O]/E#g1A5#KA*1#gC17#MGd;#8(02#L'
	DB	'-d3#rWM4#Hga1#,<w0#T.j<#O#''2#CYN1#qa^:#_4m3#o@/=#eG8=#t8J5#`'
	DB	'+78#4uI-#m3B2#SB[8#Q0@8#i[*9#iOn8#1Nm;#^sN9#qh<9#:=x-#P;K2#$%'
	DB	'X9#bC+.#Rg;<#mN=.#MTF.#RZO.#2?)4#Y#(/#[)1/#b;L/#dAU/#0Sv;#lY$'
	DB	'0#n`-0#sf60#(F24#wrH0#%/e0#TmD<#%JSMFove:CTBEXI:<eh2g)B,3h2^G'
	DB	'3i;#d3jD>)4kMYD4lVu`4m`:&5niUA5@(A5BA1]PBB:xlBCC=2CDLXMCEUtiC'
	DB	'f&0g2''tN?PGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CPGT4CP'
	DB	'GT4CPGT4CPGT4CP-qekC`.9kEg^+F$kwViFJTB&5KTB&5KTB&5KTB&5KTB&5K'
	DB	'TB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5KTB&5o,^<-28ZI''O'
	DB	'?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?;xpO?'
	DB	';xpO?;xp;7q-#lLYI:xvD=#', 00H		; proggy_clean_ttf_compressed_data_base85
CONST	ENDS
PUBLIC	??_H@YAXPEAX_K1P6APEAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0ImVec2@@QEAA@XZ				; ImVec2::ImVec2
PUBLIC	??0ImVec2@@QEAA@MM@Z				; ImVec2::ImVec2
PUBLIC	??0ImVec4@@QEAA@XZ				; ImVec4::ImVec4
PUBLIC	??0ImVec4@@QEAA@MMMM@Z				; ImVec4::ImVec4
PUBLIC	?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z	; ImGui::StyleColorsDark
PUBLIC	?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z	; ImGui::StyleColorsLight
PUBLIC	?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z ; ImGui::StyleColorsClassic
PUBLIC	??2@YAPEAX_KUImNewWrapper@@PEAX@Z		; operator new
PUBLIC	??3@YAXPEAXUImNewWrapper@@0@Z			; operator delete
PUBLIC	??0?$ImVector@G@@QEAA@XZ			; ImVector<unsigned short>::ImVector<unsigned short>
PUBLIC	??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z		; ImVector<unsigned short>::operator=
PUBLIC	??1?$ImVector@G@@QEAA@XZ			; ImVector<unsigned short>::~ImVector<unsigned short>
PUBLIC	?clear@?$ImVector@G@@QEAAXXZ			; ImVector<unsigned short>::clear
PUBLIC	?empty@?$ImVector@G@@QEBA_NXZ			; ImVector<unsigned short>::empty
PUBLIC	??A?$ImVector@G@@QEAAAEAGH@Z			; ImVector<unsigned short>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@G@@QEBAHH@Z		; ImVector<unsigned short>::_grow_capacity
PUBLIC	?resize@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::resize
PUBLIC	?resize@?$ImVector@G@@QEAAXHAEBG@Z		; ImVector<unsigned short>::resize
PUBLIC	?shrink@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::shrink
PUBLIC	?reserve@?$ImVector@G@@QEAAXH@Z			; ImVector<unsigned short>::reserve
PUBLIC	?push_back@?$ImVector@G@@QEAAXAEBG@Z		; ImVector<unsigned short>::push_back
PUBLIC	??0ImDrawCmd@@QEAA@XZ				; ImDrawCmd::ImDrawCmd
PUBLIC	??0ImDrawCmdHeader@@QEAA@XZ			; ImDrawCmdHeader::ImDrawCmdHeader
PUBLIC	??0?$ImVector@UImDrawCmd@@@@QEAA@XZ		; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
PUBLIC	??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z	; ImVector<ImDrawCmd>::operator=
PUBLIC	??1?$ImVector@UImDrawCmd@@@@QEAA@XZ		; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
PUBLIC	?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ		; ImVector<ImDrawCmd>::clear
PUBLIC	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
PUBLIC	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
PUBLIC	?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ; ImVector<ImDrawCmd>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z	; ImVector<ImDrawCmd>::resize
PUBLIC	?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z	; ImVector<ImDrawCmd>::reserve
PUBLIC	?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ; ImVector<ImDrawCmd>::push_back
PUBLIC	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ	; ImVector<ImDrawCmd>::pop_back
PUBLIC	?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z ; ImVector<ImDrawCmd>::erase
PUBLIC	??0ImDrawChannel@@QEAA@XZ			; ImDrawChannel::ImDrawChannel
PUBLIC	??0?$ImVector@UImDrawChannel@@@@QEAA@XZ		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
PUBLIC	?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ	; ImVector<ImDrawChannel>::clear
PUBLIC	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ; ImVector<ImDrawChannel>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z	; ImVector<ImDrawChannel>::resize
PUBLIC	?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z	; ImVector<ImDrawChannel>::reserve
PUBLIC	??0ImDrawListSplitter@@QEAA@XZ			; ImDrawListSplitter::ImDrawListSplitter
PUBLIC	?Clear@ImDrawListSplitter@@QEAAXXZ		; ImDrawListSplitter::Clear
PUBLIC	?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ	; ImDrawListSplitter::ClearFreeMemory
PUBLIC	?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::Split
PUBLIC	?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z ; ImDrawListSplitter::Merge
PUBLIC	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
PUBLIC	??0?$ImVector@UImDrawVert@@@@QEAA@XZ		; ImVector<ImDrawVert>::ImVector<ImDrawVert>
PUBLIC	??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z	; ImVector<ImDrawVert>::operator=
PUBLIC	??1?$ImVector@UImDrawVert@@@@QEAA@XZ		; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
PUBLIC	?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ	; ImVector<ImDrawVert>::clear
PUBLIC	??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ; ImVector<ImDrawVert>::operator[]
PUBLIC	?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z	; ImVector<ImDrawVert>::swap
PUBLIC	?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z ; ImVector<ImDrawVert>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z	; ImVector<ImDrawVert>::resize
PUBLIC	?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z	; ImVector<ImDrawVert>::shrink
PUBLIC	?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z	; ImVector<ImDrawVert>::reserve
PUBLIC	??0?$ImVector@UImVec4@@@@QEAA@XZ		; ImVector<ImVec4>::ImVector<ImVec4>
PUBLIC	??1?$ImVector@UImVec4@@@@QEAA@XZ		; ImVector<ImVec4>::~ImVector<ImVec4>
PUBLIC	?clear@?$ImVector@UImVec4@@@@QEAAXXZ		; ImVector<ImVec4>::clear
PUBLIC	?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z	; ImVector<ImVec4>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImVec4@@@@QEAAXH@Z		; ImVector<ImVec4>::resize
PUBLIC	?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z		; ImVector<ImVec4>::reserve
PUBLIC	?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z ; ImVector<ImVec4>::push_back
PUBLIC	?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ		; ImVector<ImVec4>::pop_back
PUBLIC	??0?$ImVector@PEAX@@QEAA@XZ			; ImVector<void *>::ImVector<void *>
PUBLIC	??1?$ImVector@PEAX@@QEAA@XZ			; ImVector<void *>::~ImVector<void *>
PUBLIC	?clear@?$ImVector@PEAX@@QEAAXXZ			; ImVector<void *>::clear
PUBLIC	?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z	; ImVector<void *>::_grow_capacity
PUBLIC	?resize@?$ImVector@PEAX@@QEAAXH@Z		; ImVector<void *>::resize
PUBLIC	?reserve@?$ImVector@PEAX@@QEAAXH@Z		; ImVector<void *>::reserve
PUBLIC	?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z	; ImVector<void *>::push_back
PUBLIC	?pop_back@?$ImVector@PEAX@@QEAAXXZ		; ImVector<void *>::pop_back
PUBLIC	??0?$ImVector@UImVec2@@@@QEAA@XZ		; ImVector<ImVec2>::ImVector<ImVec2>
PUBLIC	??1?$ImVector@UImVec2@@@@QEAA@XZ		; ImVector<ImVec2>::~ImVector<ImVec2>
PUBLIC	?clear@?$ImVector@UImVec2@@@@QEAAXXZ		; ImVector<ImVec2>::clear
PUBLIC	?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ	; ImVector<ImVec2>::back
PUBLIC	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z	; ImVector<ImVec2>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::resize
PUBLIC	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z		; ImVector<ImVec2>::reserve
PUBLIC	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
PUBLIC	??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z ; ImDrawList::ImDrawList
PUBLIC	?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z	; ImDrawList::PushClipRect
PUBLIC	?PushClipRectFullScreen@ImDrawList@@QEAAXXZ	; ImDrawList::PushClipRectFullScreen
PUBLIC	?PopClipRect@ImDrawList@@QEAAXXZ		; ImDrawList::PopClipRect
PUBLIC	?PushTextureID@ImDrawList@@QEAAXPEAX@Z		; ImDrawList::PushTextureID
PUBLIC	?PopTextureID@ImDrawList@@QEAAXXZ		; ImDrawList::PopTextureID
PUBLIC	?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z	; ImDrawList::AddLine
PUBLIC	?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z	; ImDrawList::AddRect
PUBLIC	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
PUBLIC	?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor
PUBLIC	?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z	; ImDrawList::AddQuad
PUBLIC	?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ; ImDrawList::AddQuadFilled
PUBLIC	?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z ; ImDrawList::AddTriangle
PUBLIC	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
PUBLIC	?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z	; ImDrawList::AddCircle
PUBLIC	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
PUBLIC	?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z	; ImDrawList::AddNgon
PUBLIC	?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddNgonFilled
PUBLIC	?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z	; ImDrawList::AddText
PUBLIC	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText
PUBLIC	?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ; ImDrawList::AddPolyline
PUBLIC	?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ; ImDrawList::AddConvexPolyFilled
PUBLIC	?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z ; ImDrawList::AddBezierCubic
PUBLIC	?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z ; ImDrawList::AddBezierQuadratic
PUBLIC	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
PUBLIC	?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z ; ImDrawList::AddImageQuad
PUBLIC	?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z ; ImDrawList::AddImageRounded
PUBLIC	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z	; ImDrawList::PathLineTo
PUBLIC	?PathFillConvex@ImDrawList@@QEAAXI@Z		; ImDrawList::PathFillConvex
PUBLIC	?PathStroke@ImDrawList@@QEAAXIHM@Z		; ImDrawList::PathStroke
PUBLIC	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z	; ImDrawList::PathArcTo
PUBLIC	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
PUBLIC	?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z ; ImDrawList::PathBezierCubicCurveTo
PUBLIC	?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z ; ImDrawList::PathBezierQuadraticCurveTo
PUBLIC	?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z	; ImDrawList::PathRect
PUBLIC	?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z ; ImDrawList::AddCallback
PUBLIC	?AddDrawCmd@ImDrawList@@QEAAXXZ			; ImDrawList::AddDrawCmd
PUBLIC	?CloneOutput@ImDrawList@@QEBAPEAU1@XZ		; ImDrawList::CloneOutput
PUBLIC	?PrimReserve@ImDrawList@@QEAAXHH@Z		; ImDrawList::PrimReserve
PUBLIC	?PrimUnreserve@ImDrawList@@QEAAXHH@Z		; ImDrawList::PrimUnreserve
PUBLIC	?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z	; ImDrawList::PrimRect
PUBLIC	?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z	; ImDrawList::PrimRectUV
PUBLIC	?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z ; ImDrawList::PrimQuadUV
PUBLIC	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z	; ImDrawList::PrimWriteVtx
PUBLIC	?PrimWriteIdx@ImDrawList@@QEAAXG@Z		; ImDrawList::PrimWriteIdx
PUBLIC	?_ResetForNewFrame@ImDrawList@@QEAAXXZ		; ImDrawList::_ResetForNewFrame
PUBLIC	?_ClearFreeMemory@ImDrawList@@QEAAXXZ		; ImDrawList::_ClearFreeMemory
PUBLIC	?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::_PopUnusedDrawCmd
PUBLIC	?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ		; ImDrawList::_TryMergeDrawCmds
PUBLIC	?_OnChangedClipRect@ImDrawList@@QEAAXXZ		; ImDrawList::_OnChangedClipRect
PUBLIC	?_OnChangedTextureID@ImDrawList@@QEAAXXZ	; ImDrawList::_OnChangedTextureID
PUBLIC	?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ	; ImDrawList::_OnChangedVtxOffset
PUBLIC	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
PUBLIC	?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx
PUBLIC	?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::_PathArcToN
PUBLIC	?DeIndexAllBuffers@ImDrawData@@QEAAXXZ		; ImDrawData::DeIndexAllBuffers
PUBLIC	?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z	; ImDrawData::ScaleClipRects
PUBLIC	??0ImFontConfig@@QEAA@XZ			; ImFontConfig::ImFontConfig
PUBLIC	??1?$ImVector@I@@QEAA@XZ			; ImVector<unsigned int>::~ImVector<unsigned int>
PUBLIC	?clear@?$ImVector@I@@QEAAXXZ			; ImVector<unsigned int>::clear
PUBLIC	?empty@?$ImVector@I@@QEBA_NXZ			; ImVector<unsigned int>::empty
PUBLIC	??A?$ImVector@I@@QEAAAEAIH@Z			; ImVector<unsigned int>::operator[]
PUBLIC	??A?$ImVector@I@@QEBAAEBIH@Z			; ImVector<unsigned int>::operator[]
PUBLIC	?begin@?$ImVector@I@@QEBAPEBIXZ			; ImVector<unsigned int>::begin
PUBLIC	?end@?$ImVector@I@@QEBAPEBIXZ			; ImVector<unsigned int>::end
PUBLIC	?_grow_capacity@?$ImVector@I@@QEBAHH@Z		; ImVector<unsigned int>::_grow_capacity
PUBLIC	?resize@?$ImVector@I@@QEAAXH@Z			; ImVector<unsigned int>::resize
PUBLIC	?reserve@?$ImVector@I@@QEAAXH@Z			; ImVector<unsigned int>::reserve
PUBLIC	?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z	; ImFontGlyphRangesBuilder::GetBit
PUBLIC	?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z	; ImFontGlyphRangesBuilder::SetBit
PUBLIC	?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z	; ImFontGlyphRangesBuilder::AddChar
PUBLIC	?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z	; ImFontGlyphRangesBuilder::AddText
PUBLIC	?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z ; ImFontGlyphRangesBuilder::AddRanges
PUBLIC	?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z ; ImFontGlyphRangesBuilder::BuildRanges
PUBLIC	??0ImFontAtlasCustomRect@@QEAA@XZ		; ImFontAtlasCustomRect::ImFontAtlasCustomRect
PUBLIC	?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ	; ImFontAtlasCustomRect::IsPacked
PUBLIC	??0ImFontAtlas@@QEAA@XZ				; ImFontAtlas::ImFontAtlas
PUBLIC	??1ImFontAtlas@@QEAA@XZ				; ImFontAtlas::~ImFontAtlas
PUBLIC	?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFont
PUBLIC	?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFontDefault
PUBLIC	?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromFileTTF
PUBLIC	?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryTTF
PUBLIC	?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedTTF
PUBLIC	?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF
PUBLIC	?ClearInputData@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::ClearInputData
PUBLIC	?ClearTexData@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::ClearTexData
PUBLIC	?ClearFonts@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::ClearFonts
PUBLIC	?Clear@ImFontAtlas@@QEAAXXZ			; ImFontAtlas::Clear
PUBLIC	?Build@ImFontAtlas@@QEAA_NXZ			; ImFontAtlas::Build
PUBLIC	?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsAlpha8
PUBLIC	?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsRGBA32
PUBLIC	?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesDefault
PUBLIC	?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesKorean
PUBLIC	?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesJapanese
PUBLIC	?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesChineseFull
PUBLIC	?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon
PUBLIC	?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesCyrillic
PUBLIC	?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ	; ImFontAtlas::GetGlyphRangesThai
PUBLIC	?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesVietnamese
PUBLIC	?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z	; ImFontAtlas::AddCustomRectRegular
PUBLIC	?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z ; ImFontAtlas::AddCustomRectFontGlyph
PUBLIC	?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
PUBLIC	?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z ; ImFontAtlas::CalcCustomRectUV
PUBLIC	?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z ; ImFontAtlas::GetMouseCursorTexData
PUBLIC	??0?$ImVector@PEAUImFont@@@@QEAA@XZ		; ImVector<ImFont *>::ImVector<ImFont *>
PUBLIC	??1?$ImVector@PEAUImFont@@@@QEAA@XZ		; ImVector<ImFont *>::~ImVector<ImFont *>
PUBLIC	?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ		; ImVector<ImFont *>::clear
PUBLIC	?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ	; ImVector<ImFont *>::clear_delete
PUBLIC	?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ	; ImVector<ImFont *>::empty
PUBLIC	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
PUBLIC	?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ ; ImVector<ImFont *>::back
PUBLIC	?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z ; ImVector<ImFont *>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z	; ImVector<ImFont *>::reserve
PUBLIC	?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z ; ImVector<ImFont *>::push_back
PUBLIC	??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ	; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>
PUBLIC	??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ	; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
PUBLIC	?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ ; ImVector<ImFontAtlasCustomRect>::clear
PUBLIC	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z ; ImVector<ImFontAtlasCustomRect>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z ; ImVector<ImFontAtlasCustomRect>::reserve
PUBLIC	?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ; ImVector<ImFontAtlasCustomRect>::push_back
PUBLIC	??0?$ImVector@UImFontConfig@@@@QEAA@XZ		; ImVector<ImFontConfig>::ImVector<ImFontConfig>
PUBLIC	??1?$ImVector@UImFontConfig@@@@QEAA@XZ		; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
PUBLIC	?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ	; ImVector<ImFontConfig>::clear
PUBLIC	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
PUBLIC	?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ ; ImVector<ImFontConfig>::back
PUBLIC	?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z ; ImVector<ImFontConfig>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z	; ImVector<ImFontConfig>::reserve
PUBLIC	?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z ; ImVector<ImFontConfig>::push_back
PUBLIC	??0?$ImVector@M@@QEAA@XZ			; ImVector<float>::ImVector<float>
PUBLIC	??1?$ImVector@M@@QEAA@XZ			; ImVector<float>::~ImVector<float>
PUBLIC	?clear@?$ImVector@M@@QEAAXXZ			; ImVector<float>::clear
PUBLIC	??A?$ImVector@M@@QEAAAEAMH@Z			; ImVector<float>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@M@@QEBAHH@Z		; ImVector<float>::_grow_capacity
PUBLIC	?resize@?$ImVector@M@@QEAAXHAEBM@Z		; ImVector<float>::resize
PUBLIC	?reserve@?$ImVector@M@@QEAAXH@Z			; ImVector<float>::reserve
PUBLIC	??0?$ImVector@UImFontGlyph@@@@QEAA@XZ		; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>
PUBLIC	??1?$ImVector@UImFontGlyph@@@@QEAA@XZ		; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>
PUBLIC	?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ	; ImVector<ImFontGlyph>::clear
PUBLIC	??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
PUBLIC	?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
PUBLIC	?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z ; ImVector<ImFontGlyph>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z	; ImVector<ImFontGlyph>::resize
PUBLIC	?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z	; ImVector<ImFontGlyph>::reserve
PUBLIC	??0ImFont@@QEAA@XZ				; ImFont::ImFont
PUBLIC	??1ImFont@@QEAA@XZ				; ImFont::~ImFont
PUBLIC	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z	; ImFont::FindGlyph
PUBLIC	?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
PUBLIC	?IsLoaded@ImFont@@QEBA_NXZ			; ImFont::IsLoaded
PUBLIC	?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z ; ImFont::CalcTextSizeA
PUBLIC	?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
PUBLIC	?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z ; ImFont::RenderChar
PUBLIC	?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z ; ImFont::RenderText
PUBLIC	?BuildLookupTable@ImFont@@QEAAXXZ		; ImFont::BuildLookupTable
PUBLIC	?ClearOutputData@ImFont@@QEAAXXZ		; ImFont::ClearOutputData
PUBLIC	?GrowIndex@ImFont@@QEAAXH@Z			; ImFont::GrowIndex
PUBLIC	?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ; ImFont::AddGlyph
PUBLIC	?AddRemapChar@ImFont@@QEAAXGG_N@Z		; ImFont::AddRemapChar
PUBLIC	?SetGlyphVisible@ImFont@@QEAAXG_N@Z		; ImFont::SetGlyphVisible
PUBLIC	?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z		; ImFont::IsGlyphRangeUnused
PUBLIC	??_GImFont@@QEAAPEAXI@Z				; ImFont::`scalar deleting destructor'
PUBLIC	fabsf
PUBLIC	?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z	; ImBezierCubicCalc
PUBLIC	?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z ; ImBezierQuadraticCalc
PUBLIC	?ImBitArrayTestBit@@YA_NPEBIH@Z			; ImBitArrayTestBit
PUBLIC	?ImBitArraySetBit@@YAXPEAIH@Z			; ImBitArraySetBit
PUBLIC	?Create@ImBitVector@@QEAAXH@Z			; ImBitVector::Create
PUBLIC	?Clear@ImBitVector@@QEAAXXZ			; ImBitVector::Clear
PUBLIC	?TestBit@ImBitVector@@QEBA_NH@Z			; ImBitVector::TestBit
PUBLIC	?SetBit@ImBitVector@@QEAAXH@Z			; ImBitVector::SetBit
PUBLIC	??1ImBitVector@@QEAA@XZ				; ImBitVector::~ImBitVector
PUBLIC	??0ImDrawListSharedData@@QEAA@XZ		; ImDrawListSharedData::ImDrawListSharedData
PUBLIC	?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z ; ImDrawListSharedData::SetCircleTessellationMaxError
PUBLIC	??1?$ImVector@H@@QEAA@XZ			; ImVector<int>::~ImVector<int>
PUBLIC	??A?$ImVector@H@@QEAAAEAHH@Z			; ImVector<int>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@H@@QEBAHH@Z		; ImVector<int>::_grow_capacity
PUBLIC	?reserve@?$ImVector@H@@QEAAXH@Z			; ImVector<int>::reserve
PUBLIC	?push_back@?$ImVector@H@@QEAAXAEBH@Z		; ImVector<int>::push_back
PUBLIC	?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ; ImGui::RenderColorRectWithAlphaCheckerboard
PUBLIC	?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ; ImGui::RenderArrow
PUBLIC	?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ; ImGui::RenderBullet
PUBLIC	?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z ; ImGui::RenderCheckMark
PUBLIC	?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z ; ImGui::RenderMouseCursor
PUBLIC	?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ; ImGui::RenderArrowPointingAt
PUBLIC	?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z ; ImGui::RenderRectFilledRangeH
PUBLIC	?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z ; ImGui::RenderRectFilledWithHole
PUBLIC	?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
PUBLIC	?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z ; ImGui::ShadeVertsLinearUV
PUBLIC	?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ ; ImFontAtlasGetBuilderForStbTruetype
PUBLIC	?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z	; ImFontAtlasBuildInit
PUBLIC	?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z ; ImFontAtlasBuildSetupFont
PUBLIC	?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z ; ImFontAtlasBuildPackCustomRects
PUBLIC	?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z	; ImFontAtlasBuildFinish
PUBLIC	?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ; ImFontAtlasBuildRender8bppRectFromString
PUBLIC	?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ; ImFontAtlasBuildRender32bppRectFromString
PUBLIC	?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z ; ImFontAtlasBuildMultiplyCalcLookupTable
PUBLIC	?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z ; ImFontAtlasBuildMultiplyRectAlpha8
PUBLIC	??1ImFontBuildSrcData@@QEAA@XZ			; ImFontBuildSrcData::~ImFontBuildSrcData
PUBLIC	??_GImFontBuildSrcData@@QEAAPEAXI@Z		; ImFontBuildSrcData::`scalar deleting destructor'
PUBLIC	??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ	; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>
PUBLIC	??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ	; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
PUBLIC	?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear
PUBLIC	?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear_destruct
PUBLIC	?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ ; ImVector<ImFontBuildSrcData>::size_in_bytes
PUBLIC	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z ; ImVector<ImFontBuildSrcData>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::resize
PUBLIC	?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::reserve
PUBLIC	??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ	; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>
PUBLIC	??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ	; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
PUBLIC	?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ ; ImVector<ImFontBuildDstData>::clear
PUBLIC	?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ ; ImVector<ImFontBuildDstData>::size_in_bytes
PUBLIC	??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z ; ImVector<ImFontBuildDstData>::_grow_capacity
PUBLIC	?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::resize
PUBLIC	?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::reserve
PUBLIC	??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ		; ImVector<stbrp_rect>::ImVector<stbrp_rect>
PUBLIC	??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ		; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
PUBLIC	?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ	; ImVector<stbrp_rect>::clear
PUBLIC	?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ; ImVector<stbrp_rect>::size_in_bytes
PUBLIC	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z ; ImVector<stbrp_rect>::_grow_capacity
PUBLIC	?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z	; ImVector<stbrp_rect>::resize
PUBLIC	?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z	; ImVector<stbrp_rect>::reserve
PUBLIC	??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ	; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>
PUBLIC	??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ	; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
PUBLIC	?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ ; ImVector<stbtt_packedchar>::size_in_bytes
PUBLIC	??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z ; ImVector<stbtt_packedchar>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z ; ImVector<stbtt_packedchar>::_grow_capacity
PUBLIC	?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::resize
PUBLIC	?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::reserve
PUBLIC	??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z	; IM_DELETE<ImFont>
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp_init_target@@9@4JA	; `stbrp_init_target'::`1'::__LINE__Var
PUBLIC	??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA ; `stbrp__skyline_find_min_y'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@ ; `string'
PUBLIC	??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@ ; `string'
PUBLIC	??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA ; `stbrp__skyline_find_best_pos'::`1'::__LINE__Var
PUBLIC	??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg@ ; `string'
PUBLIC	??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@ ; `string'
PUBLIC	??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA ; `stbrp__skyline_pack_rectangle'::`1'::__LINE__Var
PUBLIC	??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn@ ; `string'
PUBLIC	??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA ; `stbtt__buf_seek'::`1'::__LINE__Var
PUBLIC	??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA ; `stbtt__buf_get'::`1'::__LINE__Var
PUBLIC	??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA ; `stbtt__new_buf'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA ; `stbtt__cff_get_index'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA ; `stbtt__cff_int'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA ; `stbtt__cff_skip_operand'::`1'::__LINE__Var
PUBLIC	??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA ; `stbtt__cff_index_get'::`1'::__LINE__Var
PUBLIC	??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc@ ; `string'
PUBLIC	??_C@_04LBBEMOBJ@typ1@				; `string'
PUBLIC	??_C@_04LLEFIKCJ@OTTO@				; `string'
PUBLIC	??_C@_04LOAJBDKD@true@				; `string'
PUBLIC	??_C@_04KIOEMAHO@ttcf@				; `string'
PUBLIC	??_C@_04EICJPCEA@cmap@				; `string'
PUBLIC	??_C@_04DACNFKGE@loca@				; `string'
PUBLIC	??_C@_04NEODDMOL@head@				; `string'
PUBLIC	??_C@_04LLIHEPK@glyf@				; `string'
PUBLIC	??_C@_04FMPHLIKP@hhea@				; `string'
PUBLIC	??_C@_04ONMNCIMC@hmtx@				; `string'
PUBLIC	??_C@_04HHMMLDJI@kern@				; `string'
PUBLIC	??_C@_04PCFDEHHD@GPOS@				; `string'
PUBLIC	??_C@_04HJGCPIEK@CFF?5@				; `string'
PUBLIC	??_C@_04KODIGLGG@maxp@				; `string'
PUBLIC	?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA	; `stbtt_FindGlyphIndex'::`1'::__LINE__Var
PUBLIC	??_C@_1HA@EBGBJFDE@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA ; `stbtt__GetGlyfOffset'::`1'::__LINE__Var
PUBLIC	??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA ; `stbtt__GetGlyphShapeTT'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA ; `stbtt__GetGlyphShapeT2'::`1'::__LINE__Var
PUBLIC	??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA ; `stbtt__new_active'::`1'::__LINE__Var
PUBLIC	??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA ; `stbtt__handle_clipped_edge'::`1'::__LINE__Var
PUBLIC	??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1@ ; `string'
PUBLIC	??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy@ ; `string'
PUBLIC	??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@ ; `string'
PUBLIC	??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx@ ; `string'
PUBLIC	??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx@ ; `string'
PUBLIC	??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@ ; `string'
PUBLIC	??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM@ ; `string'
PUBLIC	??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA ; `stbtt__fill_active_edges_new'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp@ ; `string'
PUBLIC	??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt@ ; `string'
PUBLIC	??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl@ ; `string'
PUBLIC	??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA ; `stbtt__rasterize_sorted_edges'::`1'::__LINE__Var
PUBLIC	??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@ ; `string'
PUBLIC	??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA ; `stbtt__h_prefilter'::`1'::__LINE__Var
PUBLIC	??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA ; `stbtt__v_prefilter'::`1'::__LINE__Var
PUBLIC	??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA ; `ImDrawListSharedData::SetCircleTessellationMaxError'::`1'::__LINE__Var
PUBLIC	??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ ; `string'
PUBLIC	??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::AddDrawCmd'::`1'::__LINE__Var
PUBLIC	??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA ; `ImDrawList::AddCallback'::`1'::__LINE__Var
PUBLIC	??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@ ; `string'
PUBLIC	?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::_OnChangedClipRect'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::_OnChangedTextureID'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA ; `ImDrawList::_OnChangedVtxOffset'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA	; `FixRectCornerFlags'::`1'::__LINE__Var
PUBLIC	??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDr@ ; `string'
PUBLIC	??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA ; `ImDrawList::AddText'::`1'::__LINE__Var
PUBLIC	??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr@ ; `string'
PUBLIC	?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA ; `ImDrawListSplitter::Split'::`1'::__LINE__Var
PUBLIC	??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not@ ; `string'
PUBLIC	??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ ; `string'
PUBLIC	?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA ; `ImDrawListSplitter::SetCurrentChannel'::`1'::__LINE__Var
PUBLIC	??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx@ ; `string'
PUBLIC	?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA	; `ImFontAtlas::~ImFontAtlas'::`1'::__LINE__Var
PUBLIC	??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@ ; `string'
PUBLIC	??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA ; `ImFontAtlas::ClearInputData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA ; `ImFontAtlas::ClearTexData'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA ; `ImFontAtlas::ClearFonts'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA ; `ImFontAtlas::AddFont'::`1'::__LINE__Var
PUBLIC	??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD@ ; `string'
PUBLIC	??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP@ ; `string'
PUBLIC	??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fi@ ; `string'
PUBLIC	??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx@	; `string'
PUBLIC	?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA ; `ImFontAtlas::AddFontFromFileTTF'::`1'::__LINE__Var
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn@ ; `string'
PUBLIC	??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx@		; `string'
PUBLIC	?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA ; `ImFontAtlas::AddFontFromMemoryTTF'::`1'::__LINE__Var
PUBLIC	??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa@ ; `string'
PUBLIC	?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA ; `ImFontAtlas::AddFontFromMemoryCompressedTTF'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA ; `ImFontAtlas::AddCustomRectRegular'::`1'::__LINE__Var
PUBLIC	??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi@ ; `string'
PUBLIC	??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh@ ; `string'
PUBLIC	?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA ; `ImFontAtlas::AddCustomRectFontGlyph'::`1'::__LINE__Var
PUBLIC	??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA ; `ImFontAtlas::CalcCustomRectUV'::`1'::__LINE__Var
PUBLIC	??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@ ; `string'
PUBLIC	??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI@ ; `string'
PUBLIC	?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA ; `ImFontAtlas::GetMouseCursorTexData'::`1'::__LINE__Var
PUBLIC	??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs@ ; `string'
PUBLIC	?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA ; `ImFontAtlas::Build'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildWithStbTruetype'::`1'::__LINE__Var
PUBLIC	??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa@ ; `string'
PUBLIC	??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe@ ; `string'
PUBLIC	??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontN@ ; `string'
PUBLIC	??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL@ ; `string'
PUBLIC	??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA ; `ImFontAtlasBuildPackCustomRects'::`1'::__LINE__Var
PUBLIC	??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN@ ; `string'
PUBLIC	??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA ; `ImFontAtlasBuildRender8bppRectFromString'::`1'::__LINE__Var
PUBLIC	??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw@ ; `string'
PUBLIC	??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA ; `ImFontAtlasBuildRender32bppRectFromString'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildRenderDefaultTexData'::`1'::__LINE__Var
PUBLIC	??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN@ ; `string'
PUBLIC	??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildRenderLinesTexData'::`1'::__LINE__Var
PUBLIC	??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe@ ; `string'
PUBLIC	?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA ; `ImFontAtlasBuildFinish'::`1'::__LINE__Var
PUBLIC	??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl@ ; `string'
PUBLIC	??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi@ ; `string'
PUBLIC	?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA ; `ImFont::BuildLookupTable'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0@ ; `string'
PUBLIC	?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA	; `ImFont::GrowIndex'::`1'::__LINE__Var
PUBLIC	??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS@ ; `string'
PUBLIC	?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA ; `ImFont::AddRemapChar'::`1'::__LINE__Var
PUBLIC	??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz@ ; `string'
PUBLIC	?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA ; `ImGui::RenderArrow'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z@4JA ; `ImGui::RenderMouseCursor'::`1'::__LINE__Var
PUBLIC	??_C@_1JM@LKKCKIOL@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5@ ; `string'
PUBLIC	?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA	; `stb__match'::`1'::__LINE__Var
PUBLIC	??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn@ ; `string'
PUBLIC	?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA	; `stb__lit'::`1'::__LINE__Var
PUBLIC	?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA ; `stb_decompress'::`1'::__LINE__Var
PUBLIC	??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu@ ; `string'
PUBLIC	??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu@ ; `string'
PUBLIC	??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@ ; `string'
PUBLIC	??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@358637bd
PUBLIC	__real@3727c5ac
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d23d70a
PUBLIC	__real@3d75c28f
PUBLIC	__real@3d8f5c29
PUBLIC	__real@3da3d70a
PUBLIC	__real@3db851ec
PUBLIC	__real@3dcccccd
PUBLIC	__real@3de147ae
PUBLIC	__real@3e0f5c29
PUBLIC	__real@3e23d70a
PUBLIC	__real@3e2e147b
PUBLIC	__real@3e428f5c
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e75c28f
PUBLIC	__real@3e800000
PUBLIC	__real@3e851eb8
PUBLIC	__real@3e8a3d71
PUBLIC	__real@3e8f5c29
PUBLIC	__real@3e947ae1
PUBLIC	__real@3e99999a
PUBLIC	__real@3e9eb852
PUBLIC	__real@3ea3d70a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec28f5c
PUBLIC	__real@3ec7ae14
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed1eb85
PUBLIC	__real@3ed70a3d
PUBLIC	__real@3edc28f6
PUBLIC	__real@3ee147ae
PUBLIC	__real@3ee66666
PUBLIC	__real@3eeb851f
PUBLIC	__real@3ef0a3d7
PUBLIC	__real@3ef5c28f
PUBLIC	__real@3efae148
PUBLIC	__real@3f000000
PUBLIC	__real@3f028f5c
PUBLIC	__real@3f051eb8
PUBLIC	__real@3f07ae14
PUBLIC	__real@3f0a3d71
PUBLIC	__real@3f0ccccd
PUBLIC	__real@3f11eb85
PUBLIC	__real@3f170a3d
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1c28f6
PUBLIC	__real@3f1eb852
PUBLIC	__real@3f2147ae
PUBLIC	__real@3f23d70a
PUBLIC	__real@3f2b851f
PUBLIC	__real@3f2e147b
PUBLIC	__real@3f30a3d7
PUBLIC	__real@3f333333
PUBLIC	__real@3f35c28f
PUBLIC	__real@3f3d70a4
PUBLIC	__real@3f400000
PUBLIC	__real@3f47ae14
PUBLIC	__real@3f4a3d71
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f51eb85
PUBLIC	__real@3f547ae1
PUBLIC	__real@3f59999a
PUBLIC	__real@3f5c28f6
PUBLIC	__real@3f5db22d
PUBLIC	__real@3f5eb852
PUBLIC	__real@3f6147ae
PUBLIC	__real@3f666666
PUBLIC	__real@3f6b851f
PUBLIC	__real@3f70a3d7
PUBLIC	__real@3f733333
PUBLIC	__real@3f75c28f
PUBLIC	__real@3f7ae148
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f7fffef
PUBLIC	__real@3f800000
PUBLIC	__real@3f8147ae
PUBLIC	__real@3fc90fdb
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40c90fdb
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@41100000
PUBLIC	__real@41300000
PUBLIC	__real@41400000
PUBLIC	__real@41500000
PUBLIC	__real@41800000
PUBLIC	__real@41880000
PUBLIC	__real@41900000
PUBLIC	__real@41980000
PUBLIC	__real@41a80000
PUBLIC	__real@41b00000
PUBLIC	__real@41b80000
PUBLIC	__real@41f80000
PUBLIC	__real@42400000
PUBLIC	__real@425c0000
PUBLIC	__real@42920000
PUBLIC	__real@42b60000
PUBLIC	__real@42c80000
PUBLIC	__real@42da0000
PUBLIC	__real@437f0000
PUBLIC	__real@44333333
PUBLIC	__real@44b33333
PUBLIC	__real@45333333
PUBLIC	__real@46800000
PUBLIC	__real@47800000
PUBLIC	__real@7f7fffff
PUBLIC	__real@bf400000
PUBLIC	__real@bf5db22d
PUBLIC	__real@bf800000
PUBLIC	__xmm@7fffffffffffffff7fffffffffffffff
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	??3@YAXPEAX_K@Z:PROC				; operator delete
EXTRN	__imp__wassert:PROC
EXTRN	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ:PROC	; ImGui::GetStyle
EXTRN	?GetColorU32@ImGui@@YAII@Z:PROC			; ImGui::GetColorU32
EXTRN	?MemAlloc@ImGui@@YAPEAX_K@Z:PROC		; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPEAX@Z:PROC			; ImGui::MemFree
EXTRN	__imp_qsort:PROC
EXTRN	?ImAlphaBlendColors@@YAIII@Z:PROC		; ImAlphaBlendColors
EXTRN	?ImFormatString@@YAHPEAD_KPEBDZZ:PROC		; ImFormatString
EXTRN	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z:PROC	; ImTextCharFromUtf8
EXTRN	?ImFileLoadToMemory@@YAPEAXPEBD0PEA_KH@Z:PROC	; ImFileLoadToMemory
EXTRN	_RTC_AllocaHelper:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_CheckStackVars2:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__CheckForDebuggerJustMyCode:PROC
EXTRN	__CxxFrameHandler4:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__GSHandlerCheck_EH4:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	acosf:PROC
EXTRN	ceilf:PROC
EXTRN	cosf:PROC
EXTRN	memchr:PROC
EXTRN	memcmp:PROC
EXTRN	memmove:PROC
EXTRN	sinf:PROC
EXTRN	sqrtf:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A DQ 01bH DUP (?) ; FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA
?io@?1??ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ@4U2@A DQ 01H DUP (?) ; `ImFontAtlasGetBuilderForStbTruetype'::`2'::io
?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 01395H DUP (?) ; `ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon'::`2'::full_ranges
	ALIGN	4

?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 01779H DUP (?) ; `ImFontAtlas::GetGlyphRangesJapanese'::`2'::full_ranges
	ALIGN	8

?stb__barrier_out_e@@3PEAEEA DQ 01H DUP (?)		; stb__barrier_out_e
?stb__barrier_out_b@@3PEAEEA DQ 01H DUP (?)		; stb__barrier_out_b
?stb__barrier_in_b@@3PEBEEB DQ 01H DUP (?)		; stb__barrier_in_b
?stb__dout@@3PEAEEA DQ 01H DUP (?)			; stb__dout
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD imagerel $LN7
	DD	imagerel $LN7+172
	DD	imagerel $unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$??0ImVec2@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec2@@QEAA@MM@Z DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$??0ImVec2@@QEAA@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$??0ImVec4@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImVec4@@QEAA@MMMM@Z DD imagerel $LN3
	DD	imagerel $LN3+110
	DD	imagerel $unwind$??0ImVec4@@QEAA@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN5
	DD	imagerel $LN5+4109
	DD	imagerel $unwind$?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN5
	DD	imagerel $LN5+4099
	DD	imagerel $unwind$?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z DD imagerel $LN5
	DD	imagerel $LN5+4094
	DD	imagerel $unwind$?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+57
	DD	imagerel $unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??3@YAXPEAXUImNewWrapper@@0@Z DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$??3@YAXPEAXUImNewWrapper@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@G@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@G@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@G@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@G@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@G@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@G@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@G@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@G@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@G@@QEAAAEAGH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@G@@QEAAAEAGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@G@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@G@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@G@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@G@@QEAAXHAEBG@Z DD imagerel $LN8
	DD	imagerel $LN8+196
	DD	imagerel $unwind$?resize@?$ImVector@G@@QEAAXHAEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?shrink@?$ImVector@G@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$?shrink@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@G@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+183
	DD	imagerel $unwind$?reserve@?$ImVector@G@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@G@@QEAAXAEBG@Z DD imagerel $LN4
	DD	imagerel $LN4+161
	DD	imagerel $unwind$?push_back@?$ImVector@G@@QEAAXAEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawCmd@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$??0ImDrawCmd@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawCmdHeader@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$??0ImDrawCmdHeader@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawCmd@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImDrawCmd@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z DD imagerel $LN5
	DD	imagerel $LN5+288
	DD	imagerel $unwind$?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawChannel@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+72
	DD	imagerel $unwind$??0ImDrawChannel@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawListSplitter@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+83
	DD	imagerel $unwind$??0ImDrawListSplitter@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImDrawListSplitter@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$?Clear@ImDrawListSplitter@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+273
	DD	imagerel $unwind$?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD imagerel $LN14
	DD	imagerel $LN14+601
	DD	imagerel $unwind$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA DD imagerel ?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA
	DD	imagerel ?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z DD imagerel $LN28
	DD	imagerel $LN28+1402
	DD	imagerel $unwind$?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD imagerel $LN13
	DD	imagerel $LN13+539
	DD	imagerel $unwind$?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImDrawVert@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImDrawVert@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImDrawVert@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z DD imagerel $LN3
	DD	imagerel $LN3+186
	DD	imagerel $unwind$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+105
	DD	imagerel $unwind$?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImVec4@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImVec4@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImVec4@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImVec4@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImVec4@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImVec4@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEAX@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@PEAX@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEAX@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@PEAX@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@PEAX@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@PEAX@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@PEAX@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@PEAX@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEAX@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@PEAX@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z DD imagerel $LN4
	DD	imagerel $LN4+161
	DD	imagerel $unwind$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?pop_back@?$ImVector@PEAX@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$?pop_back@?$ImVector@PEAX@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImVec2@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImVec2@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImVec2@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD imagerel $LN4
	DD	imagerel $LN4+161
	DD	imagerel $unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z DD imagerel $LN10
	DD	imagerel $LN10+245
	DD	imagerel $unwind$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD imagerel ?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DD	imagerel ?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA+43
	DD	imagerel $unwind$?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z DD imagerel $LN8
	DD	imagerel $LN8+415
	DD	imagerel $unwind$?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+178
	DD	imagerel $unwind$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PopClipRect@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+189
	DD	imagerel $unwind$?PopClipRect@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PushTextureID@ImDrawList@@QEAAXPEAX@Z DD imagerel $LN3
	DD	imagerel $LN3+116
	DD	imagerel $unwind$?PushTextureID@ImDrawList@@QEAAXPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PopTextureID@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+155
	DD	imagerel $unwind$?PopTextureID@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z DD imagerel $LN4
	DD	imagerel $LN4+235
	DD	imagerel $unwind$?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z DD imagerel $LN6
	DD	imagerel $LN6+450
	DD	imagerel $unwind$?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z DD imagerel $LN7
	DD	imagerel $LN7+226
	DD	imagerel $unwind$?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z DD imagerel $LN4
	DD	imagerel $LN4+551
	DD	imagerel $unwind$?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z DD imagerel $LN4
	DD	imagerel $LN4+181
	DD	imagerel $unwind$?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD imagerel $LN4
	DD	imagerel $LN4+167
	DD	imagerel $unwind$?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z DD imagerel $LN4
	DD	imagerel $LN4+162
	DD	imagerel $unwind$?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z DD imagerel $LN4
	DD	imagerel $LN4+148
	DD	imagerel $unwind$?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD imagerel $LN9
	DD	imagerel $LN9+358
	DD	imagerel $unwind$?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD imagerel $LN9
	DD	imagerel $LN9+322
	DD	imagerel $unwind$?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD imagerel $LN5
	DD	imagerel $LN5+230
	DD	imagerel $unwind$?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD imagerel $LN5
	DD	imagerel $LN5+202
	DD	imagerel $unwind$?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z DD imagerel $LN13
	DD	imagerel $LN13+678
	DD	imagerel $unwind$?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z DD imagerel $LN78
	DD	imagerel $LN78+8621
	DD	imagerel $unwind$?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z DD imagerel $LN25
	DD	imagerel $LN25+2578
	DD	imagerel $unwind$?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z DD imagerel $LN4
	DD	imagerel $LN4+164
	DD	imagerel $unwind$?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z DD imagerel $LN4
	DD	imagerel $LN4+154
	DD	imagerel $unwind$?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z DD imagerel $LN8
	DD	imagerel $LN8+250
	DD	imagerel $unwind$?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z DD imagerel $LN8
	DD	imagerel $LN8+298
	DD	imagerel $unwind$?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z DD imagerel $LN10
	DD	imagerel $LN10+446
	DD	imagerel $unwind$?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z DD imagerel $LN3
	DD	imagerel $LN3+83
	DD	imagerel $unwind$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathFillConvex@ImDrawList@@QEAAXI@Z DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathStroke@ImDrawList@@QEAAXIHM@Z DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$?PathStroke@ImDrawList@@QEAAXIHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD imagerel $LN28
	DD	imagerel $LN28+1415
	DD	imagerel $unwind$?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z DD imagerel $LN4
	DD	imagerel $LN4+194
	DD	imagerel $unwind$?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z DD imagerel $LN8
	DD	imagerel $LN8+484
	DD	imagerel $unwind$?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z DD imagerel $LN8
	DD	imagerel $LN8+433
	DD	imagerel $unwind$?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z DD imagerel $LN18
	DD	imagerel $LN18+1066
	DD	imagerel $unwind$?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z DD imagerel $LN5
	DD	imagerel $LN5+224
	DD	imagerel $unwind$?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddDrawCmd@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+286
	DD	imagerel $unwind$?AddDrawCmd@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD imagerel $LN6
	DD	imagerel $LN6+278
	DD	imagerel $unwind$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA DD imagerel ?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA
	DD	imagerel ?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimReserve@ImDrawList@@QEAAXHH@Z DD imagerel $LN4
	DD	imagerel $LN4+360
	DD	imagerel $unwind$?PrimReserve@ImDrawList@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimUnreserve@ImDrawList@@QEAAXHH@Z DD imagerel $LN3
	DD	imagerel $LN3+204
	DD	imagerel $unwind$?PrimUnreserve@ImDrawList@@QEAAXHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD imagerel $LN3
	DD	imagerel $LN3+840
	DD	imagerel $unwind$?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD imagerel $LN3
	DD	imagerel $LN3+919
	DD	imagerel $unwind$?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z DD imagerel $LN3
	DD	imagerel $LN3+721
	DD	imagerel $unwind$?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD imagerel $LN3
	DD	imagerel $LN3+173
	DD	imagerel $unwind$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PrimWriteIdx@ImDrawList@@QEAAXG@Z DD imagerel $LN3
	DD	imagerel $LN3+93
	DD	imagerel $unwind$?PrimWriteIdx@ImDrawList@@QEAAXG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_ResetForNewFrame@ImDrawList@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+407
	DD	imagerel $unwind$?_ResetForNewFrame@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_ClearFreeMemory@ImDrawList@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+230
	DD	imagerel $unwind$?_ClearFreeMemory@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+123
	DD	imagerel $unwind$?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+166
	DD	imagerel $unwind$?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_OnChangedClipRect@ImDrawList@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+304
	DD	imagerel $unwind$?_OnChangedClipRect@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_OnChangedTextureID@ImDrawList@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+288
	DD	imagerel $unwind$?_OnChangedTextureID@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+176
	DD	imagerel $unwind$?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z DD imagerel $LN5
	DD	imagerel $LN5+211
	DD	imagerel $unwind$?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z DD imagerel $LN23
	DD	imagerel $LN23+1312
	DD	imagerel $unwind$?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD imagerel $LN7
	DD	imagerel $LN7+398
	DD	imagerel $unwind$?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD imagerel $LN11
	DD	imagerel $LN11+503
	DD	imagerel $unwind$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA DD imagerel ?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA
	DD	imagerel ?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z DD imagerel $LN9
	DD	imagerel $LN9+314
	DD	imagerel $unwind$?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFontConfig@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+197
	DD	imagerel $unwind$??0ImFontConfig@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@I@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@I@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@I@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@I@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@I@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@I@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@I@@QEAAAEAIH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@I@@QEAAAEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@I@@QEBAAEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@I@@QEBAAEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?begin@?$ImVector@I@@QEBAPEBIXZ DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$?begin@?$ImVector@I@@QEBAPEBIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?end@?$ImVector@I@@QEBAPEBIXZ DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$?end@?$ImVector@I@@QEBAPEBIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@I@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@I@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@I@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@I@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@I@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@I@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z DD imagerel $LN5
	DD	imagerel $LN5+165
	DD	imagerel $unwind$?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z DD imagerel $LN10
	DD	imagerel $LN10+297
	DD	imagerel $unwind$?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z DD imagerel $LN9
	DD	imagerel $LN9+175
	DD	imagerel $unwind$?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z DD imagerel $LN9
	DD	imagerel $LN9+250
	DD	imagerel $unwind$?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFontAtlasCustomRect@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+200
	DD	imagerel $unwind$??0ImFontAtlasCustomRect@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+88
	DD	imagerel $unwind$?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFontAtlas@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+247
	DD	imagerel $unwind$??0ImFontAtlas@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA DD imagerel ?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DD	imagerel ?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImFontAtlas@@QEAA@XZ DD imagerel $LN5
	DD	imagerel $LN5+171
	DD	imagerel $unwind$??1ImFontAtlas@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD imagerel $LN18
	DD	imagerel $LN18+750
	DD	imagerel $unwind$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA DD imagerel ?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA
	DD	imagerel ?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA+56
	DD	imagerel $unwind$?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD imagerel $LN10
	DD	imagerel $LN10+496
	DD	imagerel $unwind$?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD imagerel $LN14
	DD	imagerel $LN14+679
	DD	imagerel $unwind$?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z DD imagerel $LN11
	DD	imagerel $LN11+461
	DD	imagerel $unwind$?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z DD imagerel $LN6
	DD	imagerel $LN6+388
	DD	imagerel $unwind$?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD imagerel $LN4
	DD	imagerel $LN4+234
	DD	imagerel $unwind$?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearInputData@ImFontAtlas@@QEAAXXZ DD imagerel $LN13
	DD	imagerel $LN13+641
	DD	imagerel $unwind$?ClearInputData@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearTexData@ImFontAtlas@@QEAAXXZ DD imagerel $LN7
	DD	imagerel $LN7+202
	DD	imagerel $unwind$?ClearTexData@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearFonts@ImFontAtlas@@QEAAXXZ DD imagerel $LN5
	DD	imagerel $LN5+131
	DD	imagerel $unwind$?ClearFonts@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImFontAtlas@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$?Clear@ImFontAtlas@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Build@ImFontAtlas@@QEAA_NXZ DD imagerel $LN7
	DD	imagerel $LN7+189
	DD	imagerel $unwind$?Build@ImFontAtlas@@QEAA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD imagerel $LN7
	DD	imagerel $LN7+184
	DD	imagerel $unwind$?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD imagerel $LN11
	DD	imagerel $LN11+479
	DD	imagerel $unwind$?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN4
	DD	imagerel $LN4+153
	DD	imagerel $unwind$?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ DD imagerel $LN3
	DD	imagerel $LN3+63
	DD	imagerel $unwind$?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z DD imagerel $LN7
	DD	imagerel $LN7+313
	DD	imagerel $unwind$?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z DD imagerel $LN8
	DD	imagerel $LN8+413
	DD	imagerel $unwind$?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z DD imagerel $LN6
	DD	imagerel $LN6+357
	DD	imagerel $unwind$?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z DD imagerel $LN7
	DD	imagerel $LN7+751
	DD	imagerel $unwind$?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@PEAUImFont@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@PEAUImFont@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@PEAUImFont@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+110
	DD	imagerel $unwind$?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+82
	DD	imagerel $unwind$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z DD imagerel $LN4
	DD	imagerel $LN4+161
	DD	imagerel $unwind$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontConfig@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImFontConfig@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImFontConfig@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ DD imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z DD imagerel $LN4
	DD	imagerel $LN4+174
	DD	imagerel $unwind$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@M@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@M@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@M@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@M@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@M@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@M@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@M@@QEAAAEAMH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@M@@QEAAAEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@M@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@M@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@M@@QEAAXHAEBM@Z DD imagerel $LN8
	DD	imagerel $LN8+194
	DD	imagerel $unwind$?resize@?$ImVector@M@@QEAAXHAEBM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@M@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@M@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontGlyph@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImFontGlyph@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImFont@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+337
	DD	imagerel $unwind$??0ImFont@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0???0ImFont@@QEAA@XZ@4HA DD imagerel ?dtor$0@?0???0ImFont@@QEAA@XZ@4HA
	DD	imagerel ?dtor$0@?0???0ImFont@@QEAA@XZ@4HA+39
	DD	imagerel $unwind$?dtor$0@?0???0ImFont@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0???0ImFont@@QEAA@XZ@4HA DD imagerel ?dtor$1@?0???0ImFont@@QEAA@XZ@4HA
	DD	imagerel ?dtor$1@?0???0ImFont@@QEAA@XZ@4HA+43
	DD	imagerel $unwind$?dtor$1@?0???0ImFont@@QEAA@XZ@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImFont@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$??1ImFont@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD imagerel $LN5
	DD	imagerel $LN5+151
	DD	imagerel $unwind$?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD imagerel $LN5
	DD	imagerel $LN5+133
	DD	imagerel $unwind$?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsLoaded@ImFont@@QEBA_NXZ DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$?IsLoaded@ImFont@@QEBA_NXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z DD imagerel $LN36
	DD	imagerel $LN36+1148
	DD	imagerel $unwind$?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z DD imagerel $LN26
	DD	imagerel $LN26+933
	DD	imagerel $unwind$?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z DD imagerel $LN8
	DD	imagerel $LN8+565
	DD	imagerel $unwind$?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z DD imagerel $LN54
	DD	imagerel $LN54+3688
	DD	imagerel $unwind$?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?BuildLookupTable@ImFont@@QEAAXXZ DD imagerel $LN20
	DD	imagerel $LN20+1644
	DD	imagerel $unwind$?BuildLookupTable@ImFont@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ClearOutputData@ImFont@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$?ClearOutputData@ImFont@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GrowIndex@ImFont@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+229
	DD	imagerel $unwind$?GrowIndex@ImFont@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z DD imagerel $LN13
	DD	imagerel $LN13+876
	DD	imagerel $unwind$?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AddRemapChar@ImFont@@QEAAXGG_N@Z DD imagerel $LN10
	DD	imagerel $LN10+437
	DD	imagerel $unwind$?AddRemapChar@ImFont@@QEAAXGG_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetGlyphVisible@ImFont@@QEAAXG_N@Z DD imagerel $LN6
	DD	imagerel $LN6+144
	DD	imagerel $unwind$?SetGlyphVisible@ImFont@@QEAAXG_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z DD imagerel $LN8
	DD	imagerel $LN8+173
	DD	imagerel $unwind$?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GImFont@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_GImFont@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fabsf DD	imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$fabsf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImUpperPowerOfTwo@@YAHH@Z DD imagerel ?ImUpperPowerOfTwo@@YAHH@Z
	DD	imagerel ?ImUpperPowerOfTwo@@YAHH@Z+198
	DD	imagerel $unwind$?ImUpperPowerOfTwo@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImCharIsBlankA@@YA_ND@Z DD imagerel ?ImCharIsBlankA@@YA_ND@Z
	DD	imagerel ?ImCharIsBlankA@@YA_ND@Z+93
	DD	imagerel $unwind$?ImCharIsBlankA@@YA_ND@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImCharIsBlankW@@YA_NI@Z DD imagerel ?ImCharIsBlankW@@YA_NI@Z
	DD	imagerel ?ImCharIsBlankW@@YA_NI@Z+99
	DD	imagerel $unwind$?ImCharIsBlankW@@YA_NI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AUImVec2@@AEBU0@M@Z DD imagerel ??D@YA?AUImVec2@@AEBU0@M@Z
	DD	imagerel ??D@YA?AUImVec2@@AEBU0@M@Z+87
	DD	imagerel $unwind$??D@YA?AUImVec2@@AEBU0@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??H@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??H@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??H@YA?AUImVec2@@AEBU0@0@Z+93
	DD	imagerel $unwind$??H@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??G@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??G@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??G@YA?AUImVec2@@AEBU0@0@Z+93
	DD	imagerel $unwind$??G@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??D@YA?AUImVec2@@AEBU0@0@Z DD imagerel ??D@YA?AUImVec2@@AEBU0@0@Z
	DD	imagerel ??D@YA?AUImVec2@@AEBU0@0@Z+93
	DD	imagerel $unwind$??D@YA?AUImVec2@@AEBU0@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD imagerel ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
	DD	imagerel ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z+93
	DD	imagerel $unwind$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD imagerel ??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z
	DD	imagerel ??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z+93
	DD	imagerel $unwind$??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAbs@@YAHH@Z DD imagerel ?ImAbs@@YAHH@Z
	DD	imagerel ?ImAbs@@YAHH@Z+57
	DD	imagerel $unwind$?ImAbs@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAbs@@YAMM@Z DD imagerel ?ImAbs@@YAMM@Z
	DD	imagerel ?ImAbs@@YAMM@Z+44
	DD	imagerel $unwind$?ImAbs@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImRsqrt@@YAMM@Z DD imagerel ?ImRsqrt@@YAMM@Z
	DD	imagerel ?ImRsqrt@@YAMM@Z+85
	DD	imagerel $unwind$?ImRsqrt@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMin@@YA?AUImVec2@@AEBU1@0@Z+160
	DD	imagerel $unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMax@@YA?AUImVec2@@AEBU1@0@Z+160
	DD	imagerel $unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z DD imagerel ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
	DD	imagerel ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z+238
	DD	imagerel $unwind$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z DD imagerel ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z
	DD	imagerel ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z+240
	DD	imagerel $unwind$?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImLengthSqr@@YAMAEBUImVec2@@@Z DD imagerel ?ImLengthSqr@@YAMAEBUImVec2@@@Z
	DD	imagerel ?ImLengthSqr@@YAMAEBUImVec2@@@Z+71
	DD	imagerel $unwind$?ImLengthSqr@@YAMAEBUImVec2@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloor@@YAMM@Z DD imagerel ?ImFloor@@YAMM@Z
	DD	imagerel ?ImFloor@@YAMM@Z+43
	DD	imagerel $unwind$?ImFloor@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFloorSigned@@YAMM@Z DD imagerel ?ImFloorSigned@@YAMM@Z
	DD	imagerel ?ImFloorSigned@@YAMM@Z+90
	DD	imagerel $unwind$?ImFloorSigned@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImDot@@YAMAEBUImVec2@@0@Z DD imagerel ?ImDot@@YAMAEBUImVec2@@0@Z
	DD	imagerel ?ImDot@@YAMAEBUImVec2@@0@Z+76
	DD	imagerel $unwind$?ImDot@@YAMAEBUImVec2@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMin@M@@YAMMM@Z DD imagerel ??$ImMin@M@@YAMMM@Z
	DD	imagerel ??$ImMin@M@@YAMMM@Z+107
	DD	imagerel $unwind$??$ImMin@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@M@@YAMMM@Z DD imagerel ??$ImMax@M@@YAMMM@Z
	DD	imagerel ??$ImMax@M@@YAMMM@Z+107
	DD	imagerel $unwind$??$ImMax@M@@YAMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImMul@@YA?AUImVec2@@AEBU1@0@Z DD imagerel ?ImMul@@YA?AUImVec2@@AEBU1@0@Z
	DD	imagerel ?ImMul@@YA?AUImVec2@@AEBU1@0@Z+93
	DD	imagerel $unwind$?ImMul@@YA?AUImVec2@@AEBU1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z DD imagerel $LN3
	DD	imagerel $LN3+378
	DD	imagerel $unwind$?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z DD imagerel $LN3
	DD	imagerel $LN3+276
	DD	imagerel $unwind$?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArrayTestBit@@YA_NPEBIH@Z DD imagerel $LN5
	DD	imagerel $LN5+138
	DD	imagerel $unwind$?ImBitArrayTestBit@@YA_NPEBIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImBitArraySetBit@@YAXPEAIH@Z DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$?ImBitArraySetBit@@YAXPEAIH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Create@ImBitVector@@QEAAXH@Z DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$?Create@ImBitVector@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Clear@ImBitVector@@QEAAXXZ DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$?Clear@ImBitVector@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?TestBit@ImBitVector@@QEBA_NH@Z DD imagerel $LN4
	DD	imagerel $LN4+115
	DD	imagerel $unwind$?TestBit@ImBitVector@@QEBA_NH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetBit@ImBitVector@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+115
	DD	imagerel $unwind$?SetBit@ImBitVector@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImBitVector@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$??1ImBitVector@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0ImDrawListSharedData@@QEAA@XZ DD imagerel $LN6
	DD	imagerel $LN6+357
	DD	imagerel $unwind$??0ImDrawListSharedData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z DD imagerel $LN10
	DD	imagerel $LN10+425
	DD	imagerel $unwind$?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@H@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@H@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@H@@QEAAAEAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@H@@QEAAAEAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@H@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@H@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@H@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@H@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?push_back@?$ImVector@H@@QEAAXAEBH@Z DD imagerel $LN4
	DD	imagerel $LN4+159
	DD	imagerel $unwind$?push_back@?$ImVector@H@@QEAAXAEBH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z DD imagerel $LN22
	DD	imagerel $LN22+1016
	DD	imagerel $unwind$?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z DD imagerel $LN15
	DD	imagerel $LN15+936
	DD	imagerel $unwind$?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z DD imagerel $LN3
	DD	imagerel $LN3+112
	DD	imagerel $unwind$?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z DD imagerel $LN3
	DD	imagerel $LN3+453
	DD	imagerel $unwind$?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z DD imagerel $LN7
	DD	imagerel $LN7+1200
	DD	imagerel $unwind$?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z DD imagerel $LN11
	DD	imagerel $LN11+740
	DD	imagerel $unwind$?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z DD imagerel $LN15
	DD	imagerel $LN15+2020
	DD	imagerel $unwind$?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z DD imagerel $LN35
	DD	imagerel $LN35+1810
	DD	imagerel $unwind$?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z DD imagerel $LN6
	DD	imagerel $LN6+675
	DD	imagerel $unwind$?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z DD imagerel $LN17
	DD	imagerel $LN17+806
	DD	imagerel $unwind$?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z DD imagerel $LN8
	DD	imagerel $LN8+215
	DD	imagerel $unwind$?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z DD imagerel $LN4
	DD	imagerel $LN4+222
	DD	imagerel $unwind$?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD imagerel $LN15
	DD	imagerel $LN15+863
	DD	imagerel $unwind$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA DD imagerel ?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z DD imagerel $LN14
	DD	imagerel $LN14+734
	DD	imagerel $unwind$?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z DD imagerel $LN15
	DD	imagerel $LN15+433
	DD	imagerel $unwind$?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z DD imagerel $LN15
	DD	imagerel $LN15+428
	DD	imagerel $unwind$?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z DD imagerel $LN8
	DD	imagerel $LN8+154
	DD	imagerel $unwind$?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z DD imagerel $LN9
	DD	imagerel $LN9+212
	DD	imagerel $unwind$?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbrp_pack_rects DD imagerel stbrp_pack_rects
	DD	imagerel stbrp_pack_rects+722
	DD	imagerel $unwind$stbrp_pack_rects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbrp_init_target DD imagerel stbrp_init_target
	DD	imagerel stbrp_init_target+540
	DD	imagerel $unwind$stbrp_init_target
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbrp_setup_allow_out_of_mem DD imagerel stbrp_setup_allow_out_of_mem
	DD	imagerel stbrp_setup_allow_out_of_mem+114
	DD	imagerel $unwind$stbrp_setup_allow_out_of_mem
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z DD imagerel ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z
	DD	imagerel ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z+592
	DD	imagerel $unwind$?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD imagerel ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
	DD	imagerel ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z+1374
	DD	imagerel $unwind$?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD imagerel ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
	DD	imagerel ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z+892
	DD	imagerel $unwind$?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rect_height_compare@@YAHPEBX0@Z DD imagerel ?rect_height_compare@@YAHPEBX0@Z
	DD	imagerel ?rect_height_compare@@YAHPEBX0@Z+214
	DD	imagerel $unwind$?rect_height_compare@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rect_original_order@@YAHPEBX0@Z DD imagerel ?rect_original_order@@YAHPEBX0@Z
	DD	imagerel ?rect_original_order@@YAHPEBX0@Z+152
	DD	imagerel $unwind$?rect_original_order@@YAHPEBX0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_PackBegin DD imagerel stbtt_PackBegin
	DD	imagerel stbtt_PackBegin+480
	DD	imagerel $unwind$stbtt_PackBegin
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_PackEnd DD imagerel stbtt_PackEnd
	DD	imagerel stbtt_PackEnd+73
	DD	imagerel $unwind$stbtt_PackEnd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetPackedQuad DD imagerel stbtt_GetPackedQuad
	DD	imagerel stbtt_GetPackedQuad+631
	DD	imagerel $unwind$stbtt_GetPackedQuad
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_PackFontRangesRenderIntoRects DD imagerel stbtt_PackFontRangesRenderIntoRects
	DD	imagerel stbtt_PackFontRangesRenderIntoRects+2054
	DD	imagerel $unwind$stbtt_PackFontRangesRenderIntoRects
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetFontOffsetForIndex DD imagerel stbtt_GetFontOffsetForIndex
	DD	imagerel stbtt_GetFontOffsetForIndex+63
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_InitFont DD imagerel stbtt_InitFont
	DD	imagerel stbtt_InitFont+77
	DD	imagerel $unwind$stbtt_InitFont
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_FindGlyphIndex DD imagerel stbtt_FindGlyphIndex
	DD	imagerel stbtt_FindGlyphIndex+1702
	DD	imagerel $unwind$stbtt_FindGlyphIndex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_ScaleForPixelHeight DD imagerel stbtt_ScaleForPixelHeight
	DD	imagerel stbtt_ScaleForPixelHeight+155
	DD	imagerel $unwind$stbtt_ScaleForPixelHeight
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_ScaleForMappingEmToPixels DD imagerel stbtt_ScaleForMappingEmToPixels
	DD	imagerel stbtt_ScaleForMappingEmToPixels+108
	DD	imagerel $unwind$stbtt_ScaleForMappingEmToPixels
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetFontVMetrics DD imagerel stbtt_GetFontVMetrics
	DD	imagerel stbtt_GetFontVMetrics+221
	DD	imagerel $unwind$stbtt_GetFontVMetrics
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphHMetrics DD imagerel stbtt_GetGlyphHMetrics
	DD	imagerel stbtt_GetGlyphHMetrics+423
	DD	imagerel $unwind$stbtt_GetGlyphHMetrics
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphBox DD imagerel stbtt_GetGlyphBox
	DD	imagerel stbtt_GetGlyphBox+360
	DD	imagerel $unwind$stbtt_GetGlyphBox
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphShape DD imagerel stbtt_GetGlyphShape
	DD	imagerel stbtt_GetGlyphShape+117
	DD	imagerel $unwind$stbtt_GetGlyphShape
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_MakeGlyphBitmapSubpixel DD imagerel stbtt_MakeGlyphBitmapSubpixel
	DD	imagerel stbtt_MakeGlyphBitmapSubpixel+454
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphBitmapBox DD imagerel stbtt_GetGlyphBitmapBox
	DD	imagerel stbtt_GetGlyphBitmapBox+157
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBox
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_GetGlyphBitmapBoxSubpixel DD imagerel stbtt_GetGlyphBitmapBoxSubpixel
	DD	imagerel stbtt_GetGlyphBitmapBoxSubpixel+493
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBoxSubpixel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbtt_Rasterize DD imagerel stbtt_Rasterize
	DD	imagerel stbtt_Rasterize+423
	DD	imagerel $unwind$stbtt_Rasterize
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z+127
	DD	imagerel $unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z+92
	DD	imagerel $unwind$?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z+184
	DD	imagerel $unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z+75
	DD	imagerel $unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z+183
	DD	imagerel $unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
	DD	imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z+208
	DD	imagerel $unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
	DD	imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z+289
	DD	imagerel $unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
	DD	imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z+301
	DD	imagerel $unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z+334
	DD	imagerel $unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z+208
	DD	imagerel $unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
	DD	imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z+380
	DD	imagerel $unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
	DD	imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z+234
	DD	imagerel $unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z+72
	DD	imagerel $unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z+379
	DD	imagerel $unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttUSHORT@@YAGPEAE@Z DD imagerel ?ttUSHORT@@YAGPEAE@Z
	DD	imagerel ?ttUSHORT@@YAGPEAE@Z+89
	DD	imagerel $unwind$?ttUSHORT@@YAGPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttSHORT@@YAFPEAE@Z DD imagerel ?ttSHORT@@YAFPEAE@Z
	DD	imagerel ?ttSHORT@@YAFPEAE@Z+89
	DD	imagerel $unwind$?ttSHORT@@YAFPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttULONG@@YAIPEAE@Z DD imagerel ?ttULONG@@YAIPEAE@Z
	DD	imagerel ?ttULONG@@YAIPEAE@Z+136
	DD	imagerel $unwind$?ttULONG@@YAIPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ttLONG@@YAHPEAE@Z DD imagerel ?ttLONG@@YAHPEAE@Z
	DD	imagerel ?ttLONG@@YAHPEAE@Z+136
	DD	imagerel $unwind$?ttLONG@@YAHPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__isfont@@YAHPEAE@Z DD imagerel ?stbtt__isfont@@YAHPEAE@Z
	DD	imagerel ?stbtt__isfont@@YAHPEAE@Z+824
	DD	imagerel $unwind$?stbtt__isfont@@YAHPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__find_table@@YAIPEAEIPEBD@Z DD imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z
	DD	imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z+389
	DD	imagerel $unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
	DD	imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z+421
	DD	imagerel $unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
	DD	imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z+576
	DD	imagerel $unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
	DD	imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z+2311
	DD	imagerel $unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z DD imagerel ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z
	DD	imagerel ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z+143
	DD	imagerel $unwind$?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z+476
	DD	imagerel $unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
	DD	imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z+487
	DD	imagerel $unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
	DD	imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z+495
	DD	imagerel $unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+5192
	DD	imagerel $unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z DD imagerel ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z
	DD	imagerel ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z+252
	DD	imagerel $unwind$?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
	DD	imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z+332
	DD	imagerel $unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z+171
	DD	imagerel $unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z+277
	DD	imagerel $unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z+193
	DD	imagerel $unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
	DD	imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z+276
	DD	imagerel $unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z+319
	DD	imagerel $unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z+664
	DD	imagerel $unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z+5400
	DD	imagerel $unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+487
	DD	imagerel $unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
	DD	imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z+358
	DD	imagerel $unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z+85
	DD	imagerel $unwind$?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z+97
	DD	imagerel $unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
	DD	imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z+498
	DD	imagerel $unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
	DD	imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z+1392
	DD	imagerel $unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
	DD	imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z+3933
	DD	imagerel $unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z+1426
	DD	imagerel $unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z+428
	DD	imagerel $unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z+1198
	DD	imagerel $unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z+81
	DD	imagerel $unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z+1065
	DD	imagerel $unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z DD imagerel ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z
	DD	imagerel ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z+124
	DD	imagerel $unwind$?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z+636
	DD	imagerel $unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z+1258
	DD	imagerel $unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
	DD	imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z+1526
	DD	imagerel $unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z+1209
	DD	imagerel $unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z+1365
	DD	imagerel $unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stbtt__oversample_shift@@YAMH@Z DD imagerel ?stbtt__oversample_shift@@YAMH@Z
	DD	imagerel ?stbtt__oversample_shift@@YAMH@Z+95
	DD	imagerel $unwind$?stbtt__oversample_shift@@YAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@H@@YAHHHH@Z DD imagerel ??$ImClamp@H@@YAHHHH@Z
	DD	imagerel ??$ImClamp@H@@YAHHHH@Z+135
	DD	imagerel $unwind$??$ImClamp@H@@YAHHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImMax@H@@YAHHH@Z DD imagerel ??$ImMax@H@@YAHHH@Z
	DD	imagerel ??$ImMax@H@@YAHHH@Z+90
	DD	imagerel $unwind$??$ImMax@H@@YAHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z DD imagerel ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z
	DD	imagerel ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z+1104
	DD	imagerel $unwind$?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z DD imagerel ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z
	DD	imagerel ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z+666
	DD	imagerel $unwind$?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FixRectCornerFlags@@YAHH@Z DD imagerel ?FixRectCornerFlags@@YAHH@Z
	DD	imagerel ?FixRectCornerFlags@@YAHH@Z+182
	DD	imagerel $unwind$?FixRectCornerFlags@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImClamp@M@@YAMMMM@Z DD imagerel ??$ImClamp@M@@YAMMMM@Z
	DD	imagerel ??$ImClamp@M@@YAMMMM@Z+164
	DD	imagerel $unwind$??$ImClamp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ DD imagerel ??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ
	DD	imagerel ??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ+689
	DD	imagerel $unwind$??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_decompress_length@@YAIPEBE@Z DD imagerel ?stb_decompress_length@@YAIPEBE@Z
	DD	imagerel ?stb_decompress_length@@YAIPEBE@Z+136
	DD	imagerel $unwind$?stb_decompress_length@@YAIPEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_decompress@@YAIPEAEPEBEI@Z DD imagerel ?stb_decompress@@YAIPEAEPEBEI@Z
	DD	imagerel ?stb_decompress@@YAIPEAEPEBEI@Z+842
	DD	imagerel $unwind$?stb_decompress@@YAIPEAEPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ DD imagerel ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ
	DD	imagerel ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ+44
	DD	imagerel $unwind$?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Decode85Byte@@YAID@Z DD imagerel ?Decode85Byte@@YAID@Z
	DD	imagerel ?Decode85Byte@@YAID@Z+92
	DD	imagerel $unwind$?Decode85Byte@@YAID@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Decode85@@YAXPEBEPEAE@Z DD imagerel ?Decode85@@YAXPEBEPEAE@Z
	DD	imagerel ?Decode85@@YAXPEBEPEAE@Z+426
	DD	imagerel $unwind$?Decode85@@YAXPEBEPEAE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1ImFontBuildSrcData@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+71
	DD	imagerel $unwind$??1ImFontBuildSrcData@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??_GImFontBuildSrcData@@QEAAPEAXI@Z DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$??_GImFontBuildSrcData@@QEAAPEAXI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z DD imagerel ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z
	DD	imagerel ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z+276
	DD	imagerel $unwind$?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	imagerel ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z+5933
	DD	imagerel $unwind$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+36
	DD	imagerel $unwind$?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD imagerel ?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DD	imagerel ?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA+39
	DD	imagerel $unwind$?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD imagerel $LN6
	DD	imagerel $LN6+129
	DD	imagerel $unwind$?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+191
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ DD imagerel $LN4
	DD	imagerel $LN4+113
	DD	imagerel $unwind$?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z DD imagerel $LN5
	DD	imagerel $LN5+121
	DD	imagerel $unwind$??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z DD imagerel $LN7
	DD	imagerel $LN7+150
	DD	imagerel $unwind$?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD imagerel $LN4
	DD	imagerel $LN4+110
	DD	imagerel $unwind$?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD imagerel $LN5
	DD	imagerel $LN5+185
	DD	imagerel $unwind$?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z
	DD	imagerel ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z+943
	DD	imagerel $unwind$?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z DD imagerel ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z
	DD	imagerel ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z+1261
	DD	imagerel $unwind$?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z DD imagerel ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z
	DD	imagerel ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z+242
	DD	imagerel $unwind$?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z DD imagerel ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z
	DD	imagerel ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z+135
	DD	imagerel $unwind$?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ImAcos01@@YAMM@Z DD imagerel ?ImAcos01@@YAMM@Z
	DD	imagerel ?ImAcos01@@YAMM@Z+99
	DD	imagerel $unwind$?ImAcos01@@YAMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImSwap@M@@YAXAEAM0@Z DD imagerel ??$ImSwap@M@@YAXAEAM0@Z
	DD	imagerel ??$ImSwap@M@@YAXAEAM0@Z+100
	DD	imagerel $unwind$??$ImSwap@M@@YAXAEAM0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$ImLerp@M@@YAMMMM@Z DD imagerel ??$ImLerp@M@@YAMMMM@Z
	DD	imagerel ??$ImLerp@M@@YAMMMM@Z+93
	DD	imagerel $unwind$??$ImLerp@M@@YAMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb__match@@YAXPEBEI@Z DD imagerel ?stb__match@@YAXPEBEI@Z
	DD	imagerel ?stb__match@@YAXPEBEI@Z+304
	DD	imagerel $unwind$?stb__match@@YAXPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb__lit@@YAXPEBEI@Z DD imagerel ?stb__lit@@YAXPEBEI@Z
	DD	imagerel ?stb__lit@@YAXPEBEI@Z+249
	DD	imagerel $unwind$?stb__lit@@YAXPEBEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_decompress_token@@YAPEBEPEBE@Z DD imagerel ?stb_decompress_token@@YAPEBEPEBE@Z
	DD	imagerel ?stb_decompress_token@@YAPEBEPEBE@Z+1419
	DD	imagerel $unwind$?stb_decompress_token@@YAPEBEPEBE@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?stb_adler32@@YAIIPEAEI@Z DD imagerel ?stb_adler32@@YAIIPEAEI@Z
	DD	imagerel ?stb_adler32@@YAIIPEAEI@Z+693
	DD	imagerel $unwind$?stb_adler32@@YAIIPEAEI@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z
pdata	ENDS
CRT$XCU	SEGMENT
?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA$initializer$@@3P6AXXZEA DQ FLAT:??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ ; FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@7fffffffffffffff7fffffffffffffff
CONST	SEGMENT
__xmm@7fffffffffffffff7fffffffffffffff DB 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH
	DB	0ffH, 07fH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 0ffH, 07fH
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf5db22d
CONST	SEGMENT
__real@bf5db22d DD 0bf5db22dr			; -0.866
CONST	ENDS
;	COMDAT __real@bf400000
CONST	SEGMENT
__real@bf400000 DD 0bf400000r			; -0.75
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@45333333
CONST	SEGMENT
__real@45333333 DD 045333333r			; 2867.2
CONST	ENDS
;	COMDAT __real@44b33333
CONST	SEGMENT
__real@44b33333 DD 044b33333r			; 1433.6
CONST	ENDS
;	COMDAT __real@44333333
CONST	SEGMENT
__real@44333333 DD 044333333r			; 716.8
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@42da0000
CONST	SEGMENT
__real@42da0000 DD 042da0000r			; 109
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b60000
CONST	SEGMENT
__real@42b60000 DD 042b60000r			; 91
CONST	ENDS
;	COMDAT __real@42920000
CONST	SEGMENT
__real@42920000 DD 042920000r			; 73
CONST	ENDS
;	COMDAT __real@425c0000
CONST	SEGMENT
__real@425c0000 DD 0425c0000r			; 55
CONST	ENDS
;	COMDAT __real@42400000
CONST	SEGMENT
__real@42400000 DD 042400000r			; 48
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41b80000
CONST	SEGMENT
__real@41b80000 DD 041b80000r			; 23
CONST	ENDS
;	COMDAT __real@41b00000
CONST	SEGMENT
__real@41b00000 DD 041b00000r			; 22
CONST	ENDS
;	COMDAT __real@41a80000
CONST	SEGMENT
__real@41a80000 DD 041a80000r			; 21
CONST	ENDS
;	COMDAT __real@41980000
CONST	SEGMENT
__real@41980000 DD 041980000r			; 19
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41880000
CONST	SEGMENT
__real@41880000 DD 041880000r			; 17
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41500000
CONST	SEGMENT
__real@41500000 DD 041500000r			; 13
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41300000
CONST	SEGMENT
__real@41300000 DD 041300000r			; 11
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40c90fdb
CONST	SEGMENT
__real@40c90fdb DD 040c90fdbr			; 6.28319
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3fc90fdb
CONST	SEGMENT
__real@3fc90fdb DD 03fc90fdbr			; 1.5708
CONST	ENDS
;	COMDAT __real@3f8147ae
CONST	SEGMENT
__real@3f8147ae DD 03f8147aer			; 1.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7fffef
CONST	SEGMENT
__real@3f7fffef DD 03f7fffefr			; 0.999999
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f7ae148
CONST	SEGMENT
__real@3f7ae148 DD 03f7ae148r			; 0.98
CONST	ENDS
;	COMDAT __real@3f75c28f
CONST	SEGMENT
__real@3f75c28f DD 03f75c28fr			; 0.96
CONST	ENDS
;	COMDAT __real@3f733333
CONST	SEGMENT
__real@3f733333 DD 03f733333r			; 0.95
CONST	ENDS
;	COMDAT __real@3f70a3d7
CONST	SEGMENT
__real@3f70a3d7 DD 03f70a3d7r			; 0.94
CONST	ENDS
;	COMDAT __real@3f6b851f
CONST	SEGMENT
__real@3f6b851f DD 03f6b851fr			; 0.92
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f6147ae
CONST	SEGMENT
__real@3f6147ae DD 03f6147aer			; 0.88
CONST	ENDS
;	COMDAT __real@3f5eb852
CONST	SEGMENT
__real@3f5eb852 DD 03f5eb852r			; 0.87
CONST	ENDS
;	COMDAT __real@3f5db22d
CONST	SEGMENT
__real@3f5db22d DD 03f5db22dr			; 0.866
CONST	ENDS
;	COMDAT __real@3f5c28f6
CONST	SEGMENT
__real@3f5c28f6 DD 03f5c28f6r			; 0.86
CONST	ENDS
;	COMDAT __real@3f59999a
CONST	SEGMENT
__real@3f59999a DD 03f59999ar			; 0.85
CONST	ENDS
;	COMDAT __real@3f547ae1
CONST	SEGMENT
__real@3f547ae1 DD 03f547ae1r			; 0.83
CONST	ENDS
;	COMDAT __real@3f51eb85
CONST	SEGMENT
__real@3f51eb85 DD 03f51eb85r			; 0.82
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f4a3d71
CONST	SEGMENT
__real@3f4a3d71 DD 03f4a3d71r			; 0.79
CONST	ENDS
;	COMDAT __real@3f47ae14
CONST	SEGMENT
__real@3f47ae14 DD 03f47ae14r			; 0.78
CONST	ENDS
;	COMDAT __real@3f400000
CONST	SEGMENT
__real@3f400000 DD 03f400000r			; 0.75
CONST	ENDS
;	COMDAT __real@3f3d70a4
CONST	SEGMENT
__real@3f3d70a4 DD 03f3d70a4r			; 0.74
CONST	ENDS
;	COMDAT __real@3f35c28f
CONST	SEGMENT
__real@3f35c28f DD 03f35c28fr			; 0.71
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f30a3d7
CONST	SEGMENT
__real@3f30a3d7 DD 03f30a3d7r			; 0.69
CONST	ENDS
;	COMDAT __real@3f2e147b
CONST	SEGMENT
__real@3f2e147b DD 03f2e147br			; 0.68
CONST	ENDS
;	COMDAT __real@3f2b851f
CONST	SEGMENT
__real@3f2b851f DD 03f2b851fr			; 0.67
CONST	ENDS
;	COMDAT __real@3f23d70a
CONST	SEGMENT
__real@3f23d70a DD 03f23d70ar			; 0.64
CONST	ENDS
;	COMDAT __real@3f2147ae
CONST	SEGMENT
__real@3f2147ae DD 03f2147aer			; 0.63
CONST	ENDS
;	COMDAT __real@3f1eb852
CONST	SEGMENT
__real@3f1eb852 DD 03f1eb852r			; 0.62
CONST	ENDS
;	COMDAT __real@3f1c28f6
CONST	SEGMENT
__real@3f1c28f6 DD 03f1c28f6r			; 0.61
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f170a3d
CONST	SEGMENT
__real@3f170a3d DD 03f170a3dr			; 0.59
CONST	ENDS
;	COMDAT __real@3f11eb85
CONST	SEGMENT
__real@3f11eb85 DD 03f11eb85r			; 0.57
CONST	ENDS
;	COMDAT __real@3f0ccccd
CONST	SEGMENT
__real@3f0ccccd DD 03f0ccccdr			; 0.55
CONST	ENDS
;	COMDAT __real@3f0a3d71
CONST	SEGMENT
__real@3f0a3d71 DD 03f0a3d71r			; 0.54
CONST	ENDS
;	COMDAT __real@3f07ae14
CONST	SEGMENT
__real@3f07ae14 DD 03f07ae14r			; 0.53
CONST	ENDS
;	COMDAT __real@3f051eb8
CONST	SEGMENT
__real@3f051eb8 DD 03f051eb8r			; 0.52
CONST	ENDS
;	COMDAT __real@3f028f5c
CONST	SEGMENT
__real@3f028f5c DD 03f028f5cr			; 0.51
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3efae148
CONST	SEGMENT
__real@3efae148 DD 03efae148r			; 0.49
CONST	ENDS
;	COMDAT __real@3ef5c28f
CONST	SEGMENT
__real@3ef5c28f DD 03ef5c28fr			; 0.48
CONST	ENDS
;	COMDAT __real@3ef0a3d7
CONST	SEGMENT
__real@3ef0a3d7 DD 03ef0a3d7r			; 0.47
CONST	ENDS
;	COMDAT __real@3eeb851f
CONST	SEGMENT
__real@3eeb851f DD 03eeb851fr			; 0.46
CONST	ENDS
;	COMDAT __real@3ee66666
CONST	SEGMENT
__real@3ee66666 DD 03ee66666r			; 0.45
CONST	ENDS
;	COMDAT __real@3ee147ae
CONST	SEGMENT
__real@3ee147ae DD 03ee147aer			; 0.44
CONST	ENDS
;	COMDAT __real@3edc28f6
CONST	SEGMENT
__real@3edc28f6 DD 03edc28f6r			; 0.43
CONST	ENDS
;	COMDAT __real@3ed70a3d
CONST	SEGMENT
__real@3ed70a3d DD 03ed70a3dr			; 0.42
CONST	ENDS
;	COMDAT __real@3ed1eb85
CONST	SEGMENT
__real@3ed1eb85 DD 03ed1eb85r			; 0.41
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec7ae14
CONST	SEGMENT
__real@3ec7ae14 DD 03ec7ae14r			; 0.39
CONST	ENDS
;	COMDAT __real@3ec28f5c
CONST	SEGMENT
__real@3ec28f5c DD 03ec28f5cr			; 0.38
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3ea3d70a
CONST	SEGMENT
__real@3ea3d70a DD 03ea3d70ar			; 0.32
CONST	ENDS
;	COMDAT __real@3e9eb852
CONST	SEGMENT
__real@3e9eb852 DD 03e9eb852r			; 0.31
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e947ae1
CONST	SEGMENT
__real@3e947ae1 DD 03e947ae1r			; 0.29
CONST	ENDS
;	COMDAT __real@3e8f5c29
CONST	SEGMENT
__real@3e8f5c29 DD 03e8f5c29r			; 0.28
CONST	ENDS
;	COMDAT __real@3e8a3d71
CONST	SEGMENT
__real@3e8a3d71 DD 03e8a3d71r			; 0.27
CONST	ENDS
;	COMDAT __real@3e851eb8
CONST	SEGMENT
__real@3e851eb8 DD 03e851eb8r			; 0.26
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e75c28f
CONST	SEGMENT
__real@3e75c28f DD 03e75c28fr			; 0.24
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e428f5c
CONST	SEGMENT
__real@3e428f5c DD 03e428f5cr			; 0.19
CONST	ENDS
;	COMDAT __real@3e2e147b
CONST	SEGMENT
__real@3e2e147b DD 03e2e147br			; 0.17
CONST	ENDS
;	COMDAT __real@3e23d70a
CONST	SEGMENT
__real@3e23d70a DD 03e23d70ar			; 0.16
CONST	ENDS
;	COMDAT __real@3e0f5c29
CONST	SEGMENT
__real@3e0f5c29 DD 03e0f5c29r			; 0.14
CONST	ENDS
;	COMDAT __real@3de147ae
CONST	SEGMENT
__real@3de147ae DD 03de147aer			; 0.11
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3db851ec
CONST	SEGMENT
__real@3db851ec DD 03db851ecr			; 0.09
CONST	ENDS
;	COMDAT __real@3da3d70a
CONST	SEGMENT
__real@3da3d70a DD 03da3d70ar			; 0.08
CONST	ENDS
;	COMDAT __real@3d8f5c29
CONST	SEGMENT
__real@3d8f5c29 DD 03d8f5c29r			; 0.07
CONST	ENDS
;	COMDAT __real@3d75c28f
CONST	SEGMENT
__real@3d75c28f DD 03d75c28fr			; 0.06
CONST	ENDS
;	COMDAT __real@3d23d70a
CONST	SEGMENT
__real@3d23d70a DD 03d23d70ar			; 0.04
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3727c5ac
CONST	SEGMENT
__real@3727c5ac DD 03727c5acr			; 1e-05
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz@
CONST	SEGMENT
??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
CONST	SEGMENT
??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu@
CONST	SEGMENT
??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu@ DB 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu@
CONST	SEGMENT
??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu@ DB 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA DD 0fcdH ; `stb_decompress'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA DD 0f90H	; `stb__lit'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn@
CONST	SEGMENT
??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn@ DB 's'
	DB	00H, 't', 00H, 'b', 00H, '_', 00H, '_', 00H, 'd', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l', 00H, 'e'
	DB	00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, '_'
	DB	00H, 'b', 00H, 'a', 00H, 'r', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	'r', 00H, '_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA DD 0f87H	; `stb__match'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JM@LKKCKIOL@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5@
CONST	SEGMENT
??_C@_1JM@LKKCKIOL@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5@ DB 'm'
	DB	00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H, 'c', 00H
	DB	'u', 00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H
	DB	'M', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'u'
	DB	00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_', 00H, 'N', 00H
	DB	'o', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'm', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, '_', 00H
	DB	'c', 00H, 'u', 00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H
	DB	'i', 00H, 'M', 00H, 'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'C'
	DB	00H, 'u', 00H, 'r', 00H, 's', 00H, 'o', 00H, 'r', 00H, '_', 00H
	DB	'C', 00H, 'O', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z@4JA DD 0ed6H ; `ImGui::RenderMouseCursor'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA DD 0ea3H ; `ImGui::RenderArrow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz@
CONST	SEGMENT
??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz@ DB 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'L', 00H, 'o', 00H
	DB	'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H, '.', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA DD 0cdfH ; `ImFont::AddRemapChar'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS@
CONST	SEGMENT
??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS@ DB 'I'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, 'A', 00H, 'd', 00H
	DB	'v', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 'X', 00H, '.'
	DB	00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x'
	DB	00H, 'L', 00H, 'o', 00H, 'o', 00H, 'k', 00H, 'u', 00H, 'p', 00H
	DB	'.', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA DD 0ca7H ; `ImFont::GrowIndex'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0@ DB 'G'
	DB	00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's', 00H, '.', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H, 'F', 00H, 'F', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA DD 0c4cH ; `ImFont::BuildLookupTable'::`1'::__LINE__Var
_DATA	ENDS
_DATA	SEGMENT
?base_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 020H ; `ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon'::`2'::base_ranges
	DW	0ffH
	DW	02000H
	DW	0206fH
	DW	03000H
	DW	030ffH
	DW	031f0H
	DW	031ffH
	DW	0ff00H
	DW	0ffefH
	DW	0fffdH
	DW	0fffdH
?base_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA DW 020H ; `ImFontAtlas::GetGlyphRangesJapanese'::`2'::base_ranges
	DW	0ffH
	DW	03000H
	DW	030ffH
	DW	031f0H
	DW	031ffH
	DW	0ff00H
	DW	0ffefH
	DW	0fffdH
	DW	0fffdH
_DATA	ENDS
;	COMDAT ??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi@
CONST	SEGMENT
??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'-', 00H, '>', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'a'
	DB	00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'A', 00H, 't', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'a', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl@
CONST	SEGMENT
??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'T', 00H, 'e', 00H, 'x', 00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e'
	DB	00H, 'l', 00H, 's', 00H, 'A', 00H, 'l', 00H, 'p', 00H, 'h', 00H
	DB	'a', 00H, '8', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'a', 00H, 't', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H, 'T', 00H, 'e'
	DB	00H, 'x', 00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H
	DB	's', 00H, 'R', 00H, 'G', 00H, 'B', 00H, 'A', 00H, '3', 00H, '2'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA DD 0adaH ; `ImFontAtlasBuildFinish'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe@
CONST	SEGMENT
??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe@ DB 'p'
	DB	00H, 'a', 00H, 'd', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'f', 00H
	DB	't', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'n'
	DB	00H, 'e', 00H, '_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'd'
	DB	00H, '_', 00H, 'r', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'y', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'r', 00H, '-', 00H, '>', 00H, 'H', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA DD 0a91H ; `ImFontAtlasBuildRenderLinesTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, '-', 00H, '>', 00H
	DB	'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN@
CONST	SEGMENT
??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'F', 00H, 'O'
	DB	00H, 'N', 00H, 'T', 00H, '_', 00H, 'A', 00H, 'T', 00H, 'L', 00H
	DB	'A', 00H, 'S', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'F', 00H, 'A'
	DB	00H, 'U', 00H, 'L', 00H, 'T', 00H, '_', 00H, 'T', 00H, 'E', 00H
	DB	'X', 00H, '_', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'A', 00H, '_'
	DB	00H, 'W', 00H, ' ', 00H, '*', 00H, ' ', 00H, '2', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'r', 00H, '-', 00H, '>', 00H, 'H', 00H, 'e', 00H, 'i', 00H
	DB	'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '_', 00H, 'A', 00H
	DB	'T', 00H, 'L', 00H, 'A', 00H, 'S', 00H, '_', 00H, 'D', 00H, 'E'
	DB	00H, 'F', 00H, 'A', 00H, 'U', 00H, 'L', 00H, 'T', 00H, '_', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, '_', 00H, 'D', 00H, 'A', 00H, 'T'
	DB	00H, 'A', 00H, '_', 00H, 'H', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ@ DB 'r'
	DB	00H, '-', 00H, '>', 00H, 'I', 00H, 's', 00H, 'P', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA DD 0a69H ; `ImFontAtlasBuildRenderDefaultTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA DD 0a5fH ; `ImFontAtlasBuildRender32bppRectFromString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh@
CONST	SEGMENT
??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh@ DB 'y'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'y', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'h', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H, 'T'
	DB	00H, 'e', 00H, 'x', 00H, 'H', 00H, 'e', 00H, 'i', 00H, 'g', 00H
	DB	'h', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw@
CONST	SEGMENT
??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw@ DB 'x'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '+', 00H, ' '
	DB	00H, 'w', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'a', 00H
	DB	't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H, 'T'
	DB	00H, 'e', 00H, 'x', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA DD 0a55H ; `ImFontAtlasBuildRender8bppRectFromString'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw@
CONST	SEGMENT
??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw@ DB 'p'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '[', 00H, 'i', 00H, ']', 00H, '.'
	DB	00H, 'w', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'u', 00H
	DB	's', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 's', 00H, '[', 00H, 'i', 00H, ']', 00H, '.', 00H
	DB	'W', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '['
	DB	00H, 'i', 00H, ']', 00H, '.', 00H, 'h', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 'r', 00H, 'e', 00H, 'c', 00H, 't', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, ']', 00H, '.', 00H, 'H', 00H, 'e', 00H, 'i', 00H, 'g'
	DB	00H, 'h', 00H, 't', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe@ DB 'u'
	DB	00H, 's', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '.', 00H, 'S', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN@
CONST	SEGMENT
??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN@ DB 'p'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA DD 0a3aH ; `ImFontAtlasBuildPackCustomRects'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_@
CONST	SEGMENT
??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_@ DB 'g'
	DB	00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, '_', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, '_', 00H, 'i', 00H, 'n'
	DB	00H, '_', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL@
CONST	SEGMENT
??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	'.', 00H, 'G', 00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h', 00H, 's'
	DB	00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '.', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 's', 00H, 'r', 00H, 'c', 00H, '_', 00H, 't', 00H, 'm', 00H
	DB	'p', 00H, '.', 00H, 'G', 00H, 'l', 00H, 'y', 00H, 'p', 00H, 'h'
	DB	00H, 's', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'o', 00H, 'f', 00H
	DB	'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'D', 00H, 'a'
	DB	00H, 't', 00H, 'a', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'r', 00H, 'r', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, ',', 00H, ' ', 00H, 'o', 00H, 'r', 00H
	DB	' ', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'N', 00H, 'o'
	DB	00H, ' ', 00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 'd', 00H, '.', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontN@
CONST	SEGMENT
??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontN@ DB 'FontData is '
	DB	'incorrect, or FontNo cannot be found.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe@
CONST	SEGMENT
??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe@ DB 's'
	DB	00H, 'r', 00H, 'c', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	'.', 00H, 'D', 00H, 's', 00H, 't', 00H, 'I', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'x', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'-', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB 'c'
	DB	00H, 'f', 00H, 'g', 00H, '.', 00H, 'D', 00H, 's', 00H, 't', 00H
	DB	'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, '(', 00H, '!', 00H, 'c', 00H, 'f', 00H, 'g', 00H
	DB	'.', 00H, 'D', 00H, 's', 00H, 't', 00H, 'F', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'I', 00H, 's', 00H, 'L', 00H
	DB	'o', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'd', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'D', 00H, 's', 00H, 't', 00H, 'F', 00H, 'o'
	DB	00H, 'n', 00H, 't', 00H, '-', 00H, '>', 00H, 'C', 00H, 'o', 00H
	DB	'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 'A', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'a', 00H, 't', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa@
CONST	SEGMENT
??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa@ DB 'a'
	DB	00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H, '-', 00H, '>', 00H
	DB	'C', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, 'D'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'S', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA DD 0926H ; `ImFontAtlasBuildWithStbTruetype'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA DD 08d2H ; `ImFontAtlas::Build'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs@
CONST	SEGMENT
??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs@ DB 'P'
	DB	00H, 'a', 00H, 'c', 00H, 'k', 00H, 'I', 00H, 'd', 00H, 'M', 00H
	DB	'o', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'C', 00H, 'u', 00H, 'r'
	DB	00H, 's', 00H, 'o', 00H, 'r', 00H, 's', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA DD 08bdH ; `ImFontAtlas::GetMouseCursorTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI@
CONST	SEGMENT
??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '-', 00H, '>', 00H, 'I', 00H
	DB	's', 00H, 'P', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@
CONST	SEGMENT
??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@ DB 'T'
	DB	00H, 'e', 00H, 'x', 00H, 'W', 00H, 'i', 00H, 'd', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 'H', 00H
	DB	'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '>'
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA DD 08b5H ; `ImFontAtlas::CalcCustomRectUV'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA DD 08a2H ; `ImFontAtlas::AddCustomRectFontGlyph'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh@
CONST	SEGMENT
??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh@ DB 'h'
	DB	00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H
	DB	'>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'h', 00H, 'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'F'
	DB	00H, 'F', 00H, 'F', 00H, 'F', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi@
CONST	SEGMENT
??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H, 'F'
	DB	00H, 'F', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA DD 0897H ; `ImFontAtlas::AddCustomRectRegular'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA DD 0881H ; `ImFontAtlas::AddFontFromMemoryCompressedTTF'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa@
CONST	SEGMENT
??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '.', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'D'
	DB	00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA DD 0874H ; `ImFontAtlas::AddFontFromMemoryTTF'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx@
CONST	SEGMENT
??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx@ DB '%s, %.0fpx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn@
CONST	SEGMENT
??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn@ DB '('
	DB	00H, '0', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'"', 00H, 'C', 00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'a', 00H, 'd', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '!', 00H
	DB	'"', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA DD 085eH ; `ImFontAtlas::AddFontFromFileTTF'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx@
CONST	SEGMENT
??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx@ DB 'ProggyClean.ttf, %dpx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5@ DB '!'
	DB	00H, 'F', 00H, 'o', 00H, 'n', 00H, 't', 00H, 's', 00H, '.', 00H
	DB	'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'y', 00H, '(', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'C', 00H
	DB	'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'r', 00H
	DB	'g', 00H, 'e', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'h', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '"', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fi@
CONST	SEGMENT
??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fi@ DB 'Cannot use M'
	DB	'ergeMode for the first font', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP@
CONST	SEGMENT
??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '-', 00H, '>', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 'P', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.', 00H, '0', 00H, 'f'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD@
CONST	SEGMENT
??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H, 'f', 00H
	DB	'g', 00H, '-', 00H, '>', 00H, 'F', 00H, 'o', 00H, 'n', 00H, 't'
	DB	00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, '_', 00H, 'c', 00H
	DB	'f', 00H, 'g', 00H, '-', 00H, '>', 00H, 'F', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA DD 0818H ; `ImFontAtlas::AddFont'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA DD 07e6H ; `ImFontAtlas::ClearFonts'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA DD 07d9H ; `ImFontAtlas::ClearTexData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA DD 07c2H ; `ImFontAtlas::ClearInputData'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
CONST	SEGMENT
??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@ DB '!'
	DB	00H, 'L', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'C', 00H, 'a'
	DB	00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'm', 00H
	DB	'o', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'y', 00H, ' ', 00H, 'a'
	DB	00H, ' ', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'F', 00H, 'o', 00H, 'n'
	DB	00H, 't', 00H, 'A', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	' ', 00H, 'b', 00H, 'e', 00H, 't', 00H, 'w', 00H, 'e', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'F', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '(', 00H, ')', 00H, ' '
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 'E', 00H, 'n', 00H
	DB	'd', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, '/'
	DB	00H, 'R', 00H, 'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	'(', 00H, ')', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
CONST	SEGMENT
??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@ DB 'Cannot modify'
	DB	' a locked ImFontAtlas between NewFrame() and EndFrame/Render('
	DB	')!', 00H					; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA DD 07bcH	; `ImFontAtlas::~ImFontAtlas'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx@
CONST	SEGMENT
??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx@ DB 'i'
	DB	00H, 'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, 'd'
	DB	00H, 'x', 00H, ' ', 00H, '<', 00H, ' ', 00H, '_', 00H, 'C', 00H
	DB	'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA DD 06feH ; `ImDrawListSplitter::SetCurrentChannel'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
CONST	SEGMENT
??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@ DB '_'
	DB	00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'n', 00H
	DB	't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, '1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '"', 00H
	DB	'N', 00H, 'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H
	DB	'l', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'l', 00H, 'i', 00H, 't'
	DB	00H, 't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'i', 00H
	DB	's', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 's'
	DB	00H, 'u', 00H, 'p', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, '.', 00H, ' ', 00H, 'P', 00H, 'l', 00H, 'e'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'e', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'p', 00H, 'a', 00H, 'r'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H, 'I', 00H, 'm', 00H
	DB	'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'L', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'S', 00H, 'p', 00H, 'l', 00H, 'i', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, '.', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not@
CONST	SEGMENT
??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not@ DB 'Nested channe'
	DB	'l splitting is not supported. Please use separate instances o'
	DB	'f ImDrawListSplitter.', 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA DD 0699H ; `ImDrawListSplitter::Split'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr@
CONST	SEGMENT
??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr@ DB 'f'
	DB	00H, 'o', 00H, 'n', 00H, 't', 00H, '-', 00H, '>', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'e'
	DB	00H, 'r', 00H, 'A', 00H, 't', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	'-', 00H, '>', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 'I', 00H, 'D'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_', 00H, 'C', 00H
	DB	'm', 00H, 'd', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'e'
	DB	00H, 'r', 00H, '.', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'I', 00H, 'd', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA DD 0628H ; `ImDrawList::AddText'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, '0', 00H, 'x', 00H, '0', 00H, 'F', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, '"', 00H, 'M', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'a', 00H, 'c', 00H, 'y'
	DB	00H, ' ', 00H, 'h', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'I', 00H, 'm'
	DB	00H, 'D', 00H, 'r', 00H, 'a', 00H, 'w', 00H, 'C', 00H, 'o', 00H
	DB	'r', 00H, 'n', 00H, 'e', 00H, 'r', 00H, 'F', 00H, 'l', 00H, 'a'
	DB	00H, 'g', 00H, 's', 00H, ' ', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, 's', 00H, '!', 00H, '"', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDr@
CONST	SEGMENT
??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDr@ DB 'Misuse of leg'
	DB	'acy hardcoded ImDrawCornerFlags values!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA DD 0527H ; `FixRectCornerFlags'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA DD 0229H ; `ImDrawList::_OnChangedVtxOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA DD 0213H ; `ImDrawList::_OnChangedTextureID'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA DD 01fdH ; `ImDrawList::_OnChangedClipRect'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@
CONST	SEGMENT
??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, 'r', 00H, '_', 00H, 'c', 00H, 'm', 00H
	DB	'd', 00H, '-', 00H, '>', 00H, 'U', 00H, 's', 00H, 'e', 00H, 'r'
	DB	00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA DD 01dbH ; `ImDrawList::AddCallback'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@
CONST	SEGMENT
??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@ DB 'd'
	DB	00H, 'r', 00H, 'a', 00H, 'w', 00H, '_', 00H, 'c', 00H, 'm', 00H
	DB	'd', 00H, '.', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p', 00H, 'R'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'a', 00H, 'w'
	DB	00H, '_', 00H, 'c', 00H, 'm', 00H, 'd', 00H, '.', 00H, 'C', 00H
	DB	'l', 00H, 'i', 00H, 'p', 00H, 'R', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, '.', 00H, 'z', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H
	DB	'd', 00H, 'r', 00H, 'a', 00H, 'w', 00H, '_', 00H, 'c', 00H, 'm'
	DB	00H, 'd', 00H, '.', 00H, 'C', 00H, 'l', 00H, 'i', 00H, 'p', 00H
	DB	'R', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'y', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'd', 00H, 'r', 00H, 'a', 00H
	DB	'w', 00H, '_', 00H, 'c', 00H, 'm', 00H, 'd', 00H, '.', 00H, 'C'
	DB	00H, 'l', 00H, 'i', 00H, 'p', 00H, 'R', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'w', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA DD 01c4H ; `ImDrawList::AddDrawCmd'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0@
CONST	SEGMENT
??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0@ DB 'm'
	DB	00H, 'a', 00H, 'x', 00H, '_', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, '.'
	DB	00H, '0', 00H, 'f', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'd', 00H, 'r', 00H
	DB	'a', 00H, 'w', 00H, '.', 00H, 'c', 00H, 'p', 00H, 'p', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA DD 0183H ; `ImDrawListSharedData::SetCircleTessellationMaxError'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe@
CONST	SEGMENT
??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H, 'b', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA DD 0f4bH ; `stbtt__v_prefilter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'p'
	DB	00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H, '[', 00H
	DB	'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA DD 0f0dH ; `stbtt__h_prefilter'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy@
CONST	SEGMENT
??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy@ DB 'z'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n', 00H, '_'
	DB	00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@
CONST	SEGMENT
??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@ DB 'z'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA DD 0c42H ; `stbtt__rasterize_sorted_edges'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5@ DB 'f'
	DB	00H, 'a', 00H, 'b', 00H, 's', 00H, 'f', 00H, '(', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, ')', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl@
CONST	SEGMENT
??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl@ DB 'x'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt@
CONST	SEGMENT
??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o', 00H, 't'
	DB	00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H
	DB	'o', 00H, 'p', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp@
CONST	SEGMENT
??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA DD 0b9eH ; `stbtt__fill_active_edges_new'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM@
CONST	SEGMENT
??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM@ DB 'x'
	DB	00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM@
CONST	SEGMENT
??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@
CONST	SEGMENT
??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	'+', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx@
CONST	SEGMENT
??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx@ DB 'x', 00H
	DB	'1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx@
CONST	SEGMENT
??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx@ DB 'x', 00H
	DB	'1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@
CONST	SEGMENT
??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@ DB 'x'
	DB	00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H
	DB	'+', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy@
CONST	SEGMENT
??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy@ DB 'e'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1@
CONST	SEGMENT
??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1@ DB 'y', 00H, '0'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA DD 0b79H ; `stbtt__handle_clipped_edge'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'z', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA DD 0aceH ; `stbtt__new_active'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_@
CONST	SEGMENT
??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_@ DB 'o'
	DB	00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H, '_', 00H
	DB	'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, '_', 00H
	DB	'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u', 00H, 'm'
	DB	00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H, 'i', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA DD 08beH ; `stbtt__GetGlyphShapeT2'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA DD 0668H ; `stbtt__GetGlyphShapeTT'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe@ DB '!'
	DB	00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'f', 00H, 'f', 00H, '.', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA DD 0621H ; `stbtt__GetGlyfOffset'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1HA@EBGBJFDE@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi@
CONST	SEGMENT
??_C@_1HA@EBGBJFDE@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi@ DB 'u'
	DB	00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'_', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 'o'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 't', 00H, 't', 00H, 'U', 00H, 'S', 00H, 'H', 00H, 'O'
	DB	00H, 'R', 00H, 'T', 00H, '(', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, ' ', 00H, '+', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'C', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H
	DB	'+', 00H, ' ', 00H, '2', 00H, '*', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA DD 05b6H	; `stbtt_FindGlyphIndex'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_04KODIGLGG@maxp@
CONST	SEGMENT
??_C@_04KODIGLGG@maxp@ DB 'maxp', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HJGCPIEK@CFF?5@
CONST	SEGMENT
??_C@_04HJGCPIEK@CFF?5@ DB 'CFF ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04PCFDEHHD@GPOS@
CONST	SEGMENT
??_C@_04PCFDEHHD@GPOS@ DB 'GPOS', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04HHMMLDJI@kern@
CONST	SEGMENT
??_C@_04HHMMLDJI@kern@ DB 'kern', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ONMNCIMC@hmtx@
CONST	SEGMENT
??_C@_04ONMNCIMC@hmtx@ DB 'hmtx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FMPHLIKP@hhea@
CONST	SEGMENT
??_C@_04FMPHLIKP@hhea@ DB 'hhea', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LLIHEPK@glyf@
CONST	SEGMENT
??_C@_04LLIHEPK@glyf@ DB 'glyf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NEODDMOL@head@
CONST	SEGMENT
??_C@_04NEODDMOL@head@ DB 'head', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DACNFKGE@loca@
CONST	SEGMENT
??_C@_04DACNFKGE@loca@ DB 'loca', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EICJPCEA@cmap@
CONST	SEGMENT
??_C@_04EICJPCEA@cmap@ DB 'cmap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KIOEMAHO@ttcf@
CONST	SEGMENT
??_C@_04KIOEMAHO@ttcf@ DB 'ttcf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true@
CONST	SEGMENT
??_C@_04LOAJBDKD@true@ DB 'true', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LLEFIKCJ@OTTO@
CONST	SEGMENT
??_C@_04LLEFIKCJ@OTTO@ DB 'OTTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBBEMOBJ@typ1@
CONST	SEGMENT
??_C@_04LBBEMOBJ@typ1@ DB 'typ1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc@
CONST	SEGMENT
??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc@ DB 'i'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<', 00H, ' '
	DB	00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA DD 04dcH ; `stbtt__cff_index_get'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8@
CONST	SEGMENT
??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8@ DB 'b'
	DB	00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '2', 00H
	DB	'8', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA DD 04afH ; `stbtt__cff_skip_operand'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA DD 04a4H ; `stbtt__cff_int'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG@
CONST	SEGMENT
??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, '4', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA DD 0496H ; `stbtt__cff_get_index'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0@
CONST	SEGMENT
??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H
	DB	'0', 00H, 'x', 00H, '4', 00H, '0', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA DD 0480H ; `stbtt__new_buf'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5@ DB 'n'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA DD 0476H ; `stbtt__buf_get'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM@
CONST	SEGMENT
??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM@ DB '!'
	DB	00H, '(', 00H, 'o', 00H, ' ', 00H, '>', 00H, ' ', 00H, 'b', 00H
	DB	'-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '0', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 't', 00H, 'r', 00H
	DB	'u', 00H, 'e', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA DD 046bH ; `stbtt__buf_seek'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@
CONST	SEGMENT
??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@ DB 'c'
	DB	00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'n', 00H, 'u', 00H
	DB	'm', 00H, '_', 00H, 'n', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, '+', 00H, '2', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H
	DB	'x', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn@
CONST	SEGMENT
??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn@ DB 'c'
	DB	00H, 'u', 00H, 'r', 00H, '-', 00H, '>', 00H, 'x', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, 'c', 00H, 'u', 00H, 'r', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'x', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA DD 01c6H ; `stbrp__skyline_pack_rectangle'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy@
CONST	SEGMENT
??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy@ DB 'y'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'b', 00H, 'e', 00H
	DB	's', 00H, 't', 00H, '_', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@
CONST	SEGMENT
??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, '-', 00H, '>', 00H, 'x', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'x', 00H, 'p', 00H, 'o', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ DB 'x'
	DB	00H, 'p', 00H, 'o', 00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg@
CONST	SEGMENT
??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA DD 0160H ; `stbrp__skyline_find_best_pos'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@
CONST	SEGMENT
??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'x', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@
CONST	SEGMENT
??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@ DB 'n'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '-', 00H, '>', 00H, 'n', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '-', 00H, '>', 00H, 'x', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, 'x', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@
CONST	SEGMENT
??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@ DB 'f'
	DB	00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H
	DB	'x', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA DD 0128H ; `stbrp__skyline_find_min_y'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf@
CONST	SEGMENT
??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf@ DB 'w'
	DB	00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'f', 00H, 'f', 00H, 'f'
	DB	00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'h', 00H
	DB	'e', 00H, 'i', 00H, 'g', 00H, 'h', 00H, 't', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 'x', 00H, 'f', 00H, 'f', 00H
	DB	'f', 00H, 'f', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??stbrp_init_target@@9@4JA
_DATA	SEGMENT
?__LINE__Var@?0??stbrp_init_target@@9@4JA DD 0107H	; `stbrp_init_target'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 's', 00H, 't', 00H, 'b', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi@
CONST	SEGMENT
??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi@ DB 'n'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, '(', 00H, 'S', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '.', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '<', 00H
	DB	' ', 00H, '5', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@ DB 'i'
	DB	00H, 'n', 00H, 'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
CONST	SEGMENT
??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@ DB 'C'
	DB	00H, ':', 00H, '\', 00H, 'd', 00H, 'e', 00H, 'v', 00H, '\', 00H
	DB	'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\'
	DB	00H, 'R', 00H, 'a', 00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H, 'R', 00H, 'a'
	DB	00H, 'i', 00H, 's', 00H, 'i', 00H, 'n', 00H, '\', 00H, 'i', 00H
	DB	'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H, 'i', 00H, 'm'
	DB	00H, 'g', 00H, 'u', 00H, 'i', 00H, '.', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_adler32@@YAIIPEAEI@Z DD 025051c01H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_decompress_token@@YAPEBEPEBE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb__lit@@YAXPEBEI@Z DD 025061801H
	DD	01132318H
	DD	0700c001cH
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb__match@@YAXPEBEI@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImLerp@M@@YAMMMM@Z DD 035052001H
	DD	011b3320H
	DD	07014001fH
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImSwap@M@@YAXAEAM0@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAcos01@@YAMM@Z DD 035051401H
	DD	010f3314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	04d3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z DD 035063e19H
	DD	010f3314H
	DD	07008008aH
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$0 DB 075H ; ImFontAtlasBuildRenderLinesTexData
	DB	076H
	DB	030H
	DB	00H
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$1 DB 075H ; ImFontAtlasBuildRenderLinesTexData
	DB	076H
	DB	031H
	DB	00H
	ORG $+8
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc DD 0218H ; ImFontAtlasBuildRenderLinesTexData
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$1
	DD	01f8H
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcName$0
	ORG $+96
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcFrameData DD 02H ; ImFontAtlasBuildRenderLinesTexData
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z DD 045051301H
	DD	010e4313H
	DD	070070039H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	01714H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DB 01eH
	DB	00H
	DB	00H
	DB	011H, 04H
	DB	02H
	DB	014H
	DB	04H
	DB	'E', 08H
	DB	02H
	DB	014H
	DB	00H
	DB	'*'
	DB	04H
	DB	05H, 02H
	DB	02H
	DB	014H
	DB	00H
	DB	'*'
	DB	04H
	DB	'y', 013H
	DB	06H
	DB	01aH
	DB	08H
	DB	05H, '8'
	DB	06H
	DB	01aH
	DB	04H
	DB	01aH
	DB	02H
	DB	014H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DB 08H
	DB	0eH
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	imagerel $ip2state$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z DD 065053d19H
	DD	010e6313H
	DD	0700701ebH
	DD	05006H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
	DD	0f42H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$0 DB 073H ; ImFontAtlasBuildWithStbTruetype
	DB	072H
	DB	063H
	DB	05fH
	DB	074H
	DB	06dH
	DB	070H
	DB	05fH
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$1 DB 064H ; ImFontAtlasBuildWithStbTruetype
	DB	073H
	DB	074H
	DB	05fH
	DB	074H
	DB	06dH
	DB	070H
	DB	05fH
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$2 DB 062H ; ImFontAtlasBuildWithStbTruetype
	DB	075H
	DB	066H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	073H
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$4 DB 078H ; ImFontAtlasBuildWithStbTruetype
	DB	030H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$3 DB 062H ; ImFontAtlasBuildWithStbTruetype
	DB	075H
	DB	066H
	DB	05fH
	DB	070H
	DB	061H
	DB	063H
	DB	06bH
	DB	065H
	DB	064H
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$5 DB 079H ; ImFontAtlasBuildWithStbTruetype
	DB	030H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$6 DB 078H ; ImFontAtlasBuildWithStbTruetype
	DB	031H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$7 DB 079H ; ImFontAtlasBuildWithStbTruetype
	DB	031H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$8 DB 073H ; ImFontAtlasBuildWithStbTruetype
	DB	070H
	DB	063H
	DB	00H
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$9 DB 06dH ; ImFontAtlasBuildWithStbTruetype
	DB	075H
	DB	06cH
	DB	074H
	DB	069H
	DB	070H
	DB	06cH
	DB	079H
	DB	05fH
	DB	074H
	DB	061H
	DB	062H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+1
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$10 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	05fH
	DB	061H
	DB	073H
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$11 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	05fH
	DB	064H
	DB	065H
	DB	073H
	DB	063H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+3
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$13 DB 071H ; ImFontAtlasBuildWithStbTruetype
	DB	00H
	ORG $+2
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$12 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	073H
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	064H
	DB	05fH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	05fH
	DB	067H
	DB	061H
	DB	070H
	DB	00H
	ORG $+6
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$14 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	075H
	DB	073H
	DB	065H
	DB	064H
	DB	05fH
	DB	078H
	DB	00H
	ORG $+7
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$15 DB 075H ; ImFontAtlasBuildWithStbTruetype
	DB	06eH
	DB	075H
	DB	073H
	DB	065H
	DB	064H
	DB	05fH
	DB	079H
	DB	00H
	ORG $+7
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcVarDesc DD 09e4H ; ImFontAtlasBuildWithStbTruetype
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$15
	DD	09c4H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$14
	DD	0988H
	DD	020H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$13
	DD	0884H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$12
	DD	0864H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$11
	DD	0844H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$10
	DD	0650H
	DD	0100H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$9
	DD	0530H
	DD	040H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$8
	DD	04a4H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$7
	DD	0484H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$6
	DD	0464H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$5
	DD	0444H
	DD	04H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$4
	DD	02f8H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$3
	DD	02c8H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$2
	DD	098H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$1
	DD	068H
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcName$0
	ORG $+768
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcFrameData DD 010H ; ImFontAtlasBuildWithStbTruetype
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0035H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GImFontBuildSrcData@@QEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImFontBuildSrcData@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Decode85@@YAXPEBEPEAE@Z DD 025051801H
	DD	01132318H
	DD	0700c0023H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Decode85Byte@@YAID@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_decompress@@YAIPEAEPEBEI@Z DD 025051d01H
	DD	0118231dH
	DD	070110025H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stb_decompress_length@@YAIPEBE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@M@@YAMMMM@Z DD 035052001H
	DD	011b3320H
	DD	070140021H
	DD	05013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FixRectCornerFlags@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z DD 055052501H
	DD	01205325H
	DD	07019004bH
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z DD 065052501H
	DD	01206325H
	DD	070190081H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@H@@YAHHH@Z DD 025051601H
	DD	01112316H
	DD	0700a001fH
	DD	05009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImClamp@H@@YAHHHH@Z DD 025051b01H
	DD	0116231bH
	DD	0700f001fH
	DD	0500eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__oversample_shift@@YAMH@Z DD 035051201H
	DD	010d3312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	053cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD 025054b19H
	DD	011c2321H
	DD	070150033H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0180H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcName$0 DB 062H	; stbtt__v_prefilter
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+9
?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc DD 028H	; stbtt__v_prefilter
	DD	08H
	DQ	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcName$0
	ORG $+48
?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcFrameData DD 01H	; stbtt__v_prefilter
	DD	00H
	DQ	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	04a0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD 025054b19H
	DD	011c2321H
	DD	070150033H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0180H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcName$0 DB 062H	; stbtt__h_prefilter
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+9
?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc DD 028H	; stbtt__h_prefilter
	DD	08H
	DQ	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcName$0
	ORG $+48
?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcFrameData DD 01H	; stbtt__h_prefilter
	DD	00H
	DQ	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	04cH
	DW	05d6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD 065075319H
	DD	0246829H
	DD	011d6322H
	DD	07016004bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0238H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcName$0 DB 06eH ; stbtt_FlattenCurves
	DB	075H
	DB	06dH
	DB	05fH
	DB	070H
	DB	06fH
	DB	069H
	DB	06eH
	DB	074H
	DB	073H
	DB	00H
	ORG $+5
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcVarDesc DD 084H ; stbtt_FlattenCurves
	DD	04H
	DQ	FLAT:?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcName$0
	ORG $+48
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcFrameData DD 01H ; stbtt_FlattenCurves
	DD	00H
	DQ	FLAT:?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD 065052401H
	DD	011f6324H
	DD	070180099H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD 055052401H
	DD	011f5324H
	DD	070180033H
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z DD 025052301H
	DD	011e2323H
	DD	07017001dH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD 045052201H
	DD	011d4322H
	DD	07016004dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD 025063101H
	DD	01132318H
	DD	0700c003eH
	DD	0500a600bH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0 DB 074H ; stbtt__sort_edges_quicksort
	DB	00H
	ORG $+14
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc DD 028H ; stbtt__sort_edges_quicksort
	DD	014H
	DQ	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0
	ORG $+48
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData DD 01H ; stbtt__sort_edges_quicksort
	DD	00H
	DQ	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0192H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD 025064219H
	DD	01132318H
	DD	0700c0038H
	DD	0500a600bH
	DD	imagerel __GSHandlerCheck
	DD	01b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0 DB 074H ; stbtt__sort_edges_ins_sort
	DB	00H
	ORG $+14
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc DD 068H ; stbtt__sort_edges_ins_sort
	DD	014H
	DQ	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcName$0
	ORG $+48
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData DD 01H ; stbtt__sort_edges_ins_sort
	DD	00H
	DQ	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0579H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD 035054c19H
	DD	011d3322H
	DD	0701600d9H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	06b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$0 DB 068H ; stbtt__rasterize_sorted_edges
	DB	068H
	DB	00H
	ORG $+1
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$1 DB 061H ; stbtt__rasterize_sorted_edges
	DB	063H
	DB	074H
	DB	069H
	DB	076H
	DB	065H
	DB	00H
	ORG $+5
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$2 DB 073H ; stbtt__rasterize_sorted_edges
	DB	063H
	DB	061H
	DB	06eH
	DB	06cH
	DB	069H
	DB	06eH
	DB	065H
	DB	05fH
	DB	064H
	DB	061H
	DB	074H
	DB	061H
	DB	00H
	ORG $+2
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcVarDesc DD 0f0H ; stbtt__rasterize_sorted_edges
	DD	0204H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$2
	DD	068H
	DD	08H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$1
	DD	038H
	DD	018H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcName$0
	ORG $+144
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcFrameData DD 03H ; stbtt__rasterize_sorted_edges
	DD	00H
	DQ	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD 045052201H
	DD	011d4322H
	DD	0701600a9H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD 025052301H
	DD	011e2323H
	DD	070170025H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD 025051d01H
	DD	0118231dH
	DD	070110029H
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	01ceH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 025054619H
	DD	0117231cH
	DD	070100031H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0 DB 063H ; stbtt__GetGlyphShapeT2
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	074H
	DB	078H
	DB	00H
	ORG $+6
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1 DB 06fH ; stbtt__GetGlyphShapeT2
	DB	075H
	DB	074H
	DB	070H
	DB	075H
	DB	074H
	DB	05fH
	DB	063H
	DB	074H
	DB	078H
	DB	00H
	ORG $+5
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc DD 078H ; stbtt__GetGlyphShapeT2
	DD	038H
	DQ	FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1
	DD	028H
	DD	038H
	DQ	FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0
	ORG $+96
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData DD 02H ; stbtt__GetGlyphShapeT2
	DD	00H
	DQ	FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	01480H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD 045064719H
	DD	0118431dH
	DD	07011013eH
	DD	0500f6010H
	DD	imagerel __GSHandlerCheck
	DD	09e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$0 DB 073H ; stbtt__run_charstring
	DB	00H
	ORG $+6
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$1 DB 073H ; stbtt__run_charstring
	DB	075H
	DB	062H
	DB	072H
	DB	05fH
	DB	073H
	DB	074H
	DB	061H
	DB	063H
	DB	06bH
	DB	00H
	ORG $+1
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$2 DB 073H ; stbtt__run_charstring
	DB	075H
	DB	062H
	DB	072H
	DB	073H
	DB	00H
	ORG $+2
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$3 DB 062H ; stbtt__run_charstring
	DB	00H
	ORG $+2
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcVarDesc DD 0338H ; stbtt__run_charstring
	DD	010H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$3
	DD	0308H
	DD	010H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$2
	DD	0250H
	DD	0a0H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$1
	DD	0170H
	DD	0c0H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcName$0
	ORG $+192
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcFrameData DD 04H ; stbtt__run_charstring
	DD	00H
	DQ	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	027eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD 025064819H
	DD	0119231eH
	DD	07012008cH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0458H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcName$0 DB 066H ; stbtt__cid_get_glyph_subrs
	DB	064H
	DB	073H
	DB	065H
	DB	06cH
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+7
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcVarDesc DD 028H ; stbtt__cid_get_glyph_subrs
	DD	010H
	DQ	FLAT:?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcName$0
	ORG $+48
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcFrameData DD 01H ; stbtt__cid_get_glyph_subrs
	DD	00H
	DQ	FLAT:?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD 025061e01H
	DD	0119231eH
	DD	070120042H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD 045052501H
	DD	01204325H
	DD	070190031H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD 045051f01H
	DD	011a431fH
	DD	070130021H
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD 045051f01H
	DD	011a431fH
	DD	070130023H
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD 045051301H
	DD	010e4313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD 035052101H
	DD	011c3321H
	DD	07015001fH
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0142eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 055064719H
	DD	0118531dH
	DD	0701100feH
	DD	0500f6010H
	DD	imagerel __GSHandlerCheck
	DD	07e0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0 DB 063H ; stbtt__GetGlyphShapeTT
	DB	06fH
	DB	06dH
	DB	070H
	DB	05fH
	DB	076H
	DB	065H
	DB	072H
	DB	074H
	DB	073H
	DB	00H
	ORG $+1
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1 DB 06dH ; stbtt__GetGlyphShapeTT
	DB	074H
	DB	078H
	DB	00H
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc DD 04d8H ; stbtt__GetGlyphShapeTT
	DD	018H
	DQ	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$1
	DD	0498H
	DD	08H
	DQ	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcName$0
	ORG $+96
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData DD 02H ; stbtt__GetGlyphShapeTT
	DD	00H
	DQ	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD 035052101H
	DD	011c3321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	01ceH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD 025054b19H
	DD	011c2321H
	DD	07015002bH
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcName$0 DB 063H ; stbtt__GetGlyphInfoT2
	DB	00H
	ORG $+14
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcVarDesc DD 028H ; stbtt__GetGlyphInfoT2
	DD	038H
	DQ	FLAT:?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcName$0
	ORG $+48
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcFrameData DD 01H ; stbtt__GetGlyphInfoT2
	DD	00H
	DQ	FLAT:?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z DD 025052101H
	DD	011c2321H
	DD	07015001dH
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	08edH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD 025064819H
	DD	0119231eH
	DD	07012014cH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	0a58H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$0 DB 062H ; stbtt_InitFont_internal
	DB	00H
	ORG $+6
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$1 DB 074H ; stbtt_InitFont_internal
	DB	06fH
	DB	070H
	DB	064H
	DB	069H
	DB	063H
	DB	074H
	DB	00H
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$2 DB 074H ; stbtt_InitFont_internal
	DB	06fH
	DB	070H
	DB	064H
	DB	069H
	DB	063H
	DB	074H
	DB	069H
	DB	064H
	DB	078H
	DB	00H
	ORG $+1
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$3 DB 063H ; stbtt_InitFont_internal
	DB	073H
	DB	074H
	DB	079H
	DB	070H
	DB	065H
	DB	00H
	ORG $+5
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$4 DB 063H ; stbtt_InitFont_internal
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	074H
	DB	072H
	DB	069H
	DB	06eH
	DB	067H
	DB	073H
	DB	00H
	ORG $+4
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$5 DB 066H ; stbtt_InitFont_internal
	DB	064H
	DB	061H
	DB	072H
	DB	072H
	DB	061H
	DB	079H
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+5
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$6 DB 066H ; stbtt_InitFont_internal
	DB	064H
	DB	073H
	DB	065H
	DB	06cH
	DB	065H
	DB	063H
	DB	074H
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+12
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcVarDesc DD 0194H ; stbtt_InitFont_internal
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$6
	DD	0174H
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$5
	DD	0154H
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$4
	DD	0134H
	DD	04H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$3
	DD	0108H
	DD	010H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$2
	DD	0d8H
	DD	010H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$1
	DD	0a8H
	DD	010H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcName$0
	ORG $+336
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcFrameData DD 07H ; stbtt_InitFont_internal
	DD	00H
	DQ	FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	041H
	DW	0226H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD 025064819H
	DD	0119231eH
	DD	07012005aH
	DD	050106011H
	DD	imagerel __GSHandlerCheck
	DD	02c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$0 DB 073H ; stbtt__get_subrs
	DB	075H
	DB	062H
	DB	072H
	DB	073H
	DB	06fH
	DB	066H
	DB	066H
	DB	00H
	ORG $+7
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$1 DB 070H ; stbtt__get_subrs
	DB	072H
	DB	069H
	DB	076H
	DB	061H
	DB	074H
	DB	065H
	DB	05fH
	DB	06cH
	DB	06fH
	DB	063H
	DB	00H
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$2 DB 070H ; stbtt__get_subrs
	DB	064H
	DB	069H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcFrameData DD 03H ; stbtt__get_subrs
	DD	00H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcVarDesc
	ORG $+8
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcVarDesc DD 068H ; stbtt__get_subrs
	DD	010H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$1
	DD	024H
	DD	04H
	DQ	FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z DD 025051c01H
	DD	0117231cH
	DD	07010002dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__isfont@@YAHPEAE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttLONG@@YAHPEAE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttULONG@@YAIPEAE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttSHORT@@YAFPEAE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ttUSHORT@@YAGPEAE@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD 025061e01H
	DD	0119231eH
	DD	070120038H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	045H
	DB	0d0H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD 025064c19H
	DD	011d2322H
	DD	07016002cH
	DD	050146015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcName$0 DB 06fH ; stbtt__dict_get_ints
	DB	070H
	DB	065H
	DB	072H
	DB	061H
	DB	06eH
	DB	064H
	DB	073H
	DB	00H
	ORG $+7
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcVarDesc DD 048H ; stbtt__dict_get_ints
	DD	010H
	DQ	FLAT:?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcName$0
	ORG $+48
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcFrameData DD 01H ; stbtt__dict_get_ints
	DD	00H
	DQ	FLAT:?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD 025061e01H
	DD	0119231eH
	DD	070120040H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD 025061901H
	DD	01142319H
	DD	0700d0034H
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD 025063c01H
	DD	011e2323H
	DD	070170028H
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcName$0 DB 072H ; stbtt__buf_range
	DB	00H
	ORG $+14
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcVarDesc DD 028H ; stbtt__buf_range
	DD	010H
	DQ	FLAT:?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcName$0
	ORG $+48
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcFrameData DD 01H ; stbtt__buf_range
	DD	00H
	DQ	FLAT:?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD 025063701H
	DD	0119231eH
	DD	070120022H
	DD	050106011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcName$0 DB 072H ; stbtt__new_buf
	DB	00H
	ORG $+14
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcVarDesc DD 028H ; stbtt__new_buf
	DD	010H
	DQ	FLAT:?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcName$0
	ORG $+48
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcFrameData DD 01H ; stbtt__new_buf
	DD	00H
	DQ	FLAT:?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	018eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_Rasterize DD 065054d19H
	DD	011e6323H
	DD	070170035H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0198H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_Rasterize$rtcName$0 DB 077H
	DB	069H
	DB	06eH
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	063H
	DB	06fH
	DB	075H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+2
stbtt_Rasterize$rtcName$1 DB 077H
	DB	069H
	DB	06eH
	DB	064H
	DB	069H
	DB	06eH
	DB	067H
	DB	05fH
	DB	06cH
	DB	065H
	DB	06eH
	DB	067H
	DB	074H
	DB	068H
	DB	073H
	DB	00H
stbtt_Rasterize$rtcVarDesc DD 0a8H
	DD	08H
	DQ	FLAT:stbtt_Rasterize$rtcName$1
	DD	084H
	DD	04H
	DQ	FLAT:stbtt_Rasterize$rtcName$0
	ORG $+96
stbtt_Rasterize$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:stbtt_Rasterize$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	01d4H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphBitmapBoxSubpixel DD 035054d19H
	DD	011e3323H
	DD	07017002fH
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$0 DB 078H
	DB	030H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$1 DB 079H
	DB	030H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$2 DB 078H
	DB	031H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcName$3 DB 079H
	DB	031H
	DB	00H
	ORG $+1
stbtt_GetGlyphBitmapBoxSubpixel$rtcVarDesc DD 094H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$3
	DD	074H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$2
	DD	054H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcName$0
	ORG $+192
stbtt_GetGlyphBitmapBoxSubpixel$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphBitmapBox DD 055052301H
	DD	011e5323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	01adH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_MakeGlyphBitmapSubpixel DD 065054c19H
	DD	011d6322H
	DD	07016003bH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_MakeGlyphBitmapSubpixel$rtcName$0 DB 069H
	DB	078H
	DB	030H
	DB	00H
stbtt_MakeGlyphBitmapSubpixel$rtcName$1 DB 069H
	DB	079H
	DB	030H
	DB	00H
stbtt_MakeGlyphBitmapSubpixel$rtcName$2 DB 076H
	DB	065H
	DB	072H
	DB	074H
	DB	069H
	DB	063H
	DB	065H
	DB	073H
	DB	00H
	ORG $+3
stbtt_MakeGlyphBitmapSubpixel$rtcName$3 DB 067H
	DB	062H
	DB	06dH
	DB	00H
	ORG $+8
stbtt_MakeGlyphBitmapSubpixel$rtcVarDesc DD 0e8H
	DD	018H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$3
	DD	0a8H
	DD	08H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$2
	DD	084H
	DD	04H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$1
	DD	064H
	DD	04H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcName$0
	ORG $+192
stbtt_MakeGlyphBitmapSubpixel$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphShape DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphBox DD 035052101H
	DD	011c3321H
	DD	070150023H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetGlyphHMetrics DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetFontVMetrics DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_ScaleForMappingEmToPixels DD 035051901H
	DD	01143319H
	DD	0700d0023H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_ScaleForPixelHeight DD 035051901H
	DD	01143319H
	DD	0700d0023H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_FindGlyphIndex DD 025051701H
	DD	01122317H
	DD	0700b0091H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_InitFont DD 025051d01H
	DD	0118231dH
	DD	07011001dH
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetFontOffsetForIndex DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	07edH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_PackFontRangesRenderIntoRects DD 055054c19H
	DD	011d5322H
	DD	070160099H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	04b0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbtt_PackFontRangesRenderIntoRects$rtcName$0 DB 061H
	DB	064H
	DB	076H
	DB	061H
	DB	06eH
	DB	063H
	DB	065H
	DB	00H
stbtt_PackFontRangesRenderIntoRects$rtcName$1 DB 06cH
	DB	073H
	DB	062H
	DB	00H
stbtt_PackFontRangesRenderIntoRects$rtcName$2 DB 078H
	DB	030H
	DB	00H
	ORG $+1
stbtt_PackFontRangesRenderIntoRects$rtcName$3 DB 079H
	DB	030H
	DB	00H
	ORG $+1
stbtt_PackFontRangesRenderIntoRects$rtcName$4 DB 078H
	DB	031H
	DB	00H
	ORG $+1
stbtt_PackFontRangesRenderIntoRects$rtcName$5 DB 079H
	DB	031H
	DB	00H
	ORG $+5
stbtt_PackFontRangesRenderIntoRects$rtcVarDesc DD 02b4H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$5
	DD	0294H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$4
	DD	0274H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$3
	DD	0254H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$2
	DD	0234H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$1
	DD	0214H
	DD	04H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcName$0
	ORG $+288
stbtt_PackFontRangesRenderIntoRects$rtcFrameData DD 06H
	DD	00H
	DQ	FLAT:stbtt_PackFontRangesRenderIntoRects$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_GetPackedQuad DD 025052101H
	DD	011c2321H
	DD	070150031H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_PackEnd DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbtt_PackBegin DD 035052201H
	DD	011d3322H
	DD	07016002bH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rect_original_order@@YAHPEBX0@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rect_height_compare@@YAHPEBX0@Z DD 025051801H
	DD	01132318H
	DD	0700c0025H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD 025063c01H
	DD	011e2323H
	DD	07017003cH
	DD	050156016H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0 DB 072H ; stbrp__skyline_pack_rectangle
	DB	065H
	DB	073H
	DB	00H
	ORG $+12
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc DD 028H ; stbrp__skyline_pack_rectangle
	DD	010H
	DQ	FLAT:?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0
	ORG $+48
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData DD 01H ; stbrp__skyline_pack_rectangle
	DD	00H
	DQ	FLAT:?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0544H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z DD 035064d19H
	DD	011e3323H
	DD	070170054H
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0298H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0 DB 066H ; stbrp__skyline_find_best_pos
	DB	072H
	DB	00H
	ORG $+1
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$1 DB 077H ; stbrp__skyline_find_best_pos
	DB	061H
	DB	073H
	DB	074H
	DB	065H
	DB	00H
	ORG $+2
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$2 DB 077H ; stbrp__skyline_find_best_pos
	DB	061H
	DB	073H
	DB	074H
	DB	065H
	DB	00H
	ORG $+6
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData DD 03H ; stbrp__skyline_find_best_pos
	DD	00H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc
	ORG $+8
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcVarDesc DD 01c4H ; stbrp__skyline_find_best_pos
	DD	04H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$2
	DD	0164H
	DD	04H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$1
	DD	098H
	DD	010H
	DQ	FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z DD 025052201H
	DD	011d2322H
	DD	070160035H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbrp_setup_allow_out_of_mem DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbrp_init_target DD 025052101H
	DD	011c2321H
	DD	070150021H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbrp_pack_rects DD 025063701H
	DD	0119231eH
	DD	070120030H
	DD	050106011H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
stbrp_pack_rects$rtcName$0 DB 066H
	DB	072H
	DB	00H
	ORG $+13
stbrp_pack_rects$rtcVarDesc DD 068H
	DD	010H
	DQ	FLAT:stbrp_pack_rects$rtcName$0
	ORG $+48
stbrp_pack_rects$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:stbrp_pack_rects$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z DD 025052201H
	DD	011d2322H
	DD	070160029H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z DD 025051901H
	DD	01142319H
	DD	0700d0025H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z DD 025052101H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z DD 025052101H
	DD	011c2321H
	DD	070150029H
	DD	05014H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	036H
	DW	02c5H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z DD 065053d19H
	DD	010e6313H
	DD	07007003bH
	DD	05006H
	DD	imagerel __GSHandlerCheck
	DD	01c0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$0 DB 075H ; ImFontAtlasBuildFinish
	DB	076H
	DB	030H
	DB	00H
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$1 DB 075H ; ImFontAtlasBuildFinish
	DB	076H
	DB	031H
	DB	00H
	ORG $+8
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc DD 0c8H ; ImFontAtlasBuildFinish
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$1
	DD	0a8H
	DD	08H
	DQ	FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcName$0
	ORG $+96
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcFrameData DD 02H ; ImFontAtlasBuildFinish
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03bH
	DW	0346H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DB 06H
	DB	00H
	DB	00H
	DB	019H, 03H
	DB	02H
	DB	09dH, 09H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DB 028H
	DD	imagerel $stateUnwindMap$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
	DD	imagerel $ip2state$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z DD 025054219H
	DD	01132318H
	DD	0700c0035H
	DD	0500bH
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
	DD	0192H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcName$0 DB 070H ; ImFontAtlasBuildPackCustomRects
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	073H
	DB	00H
	ORG $+5
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcVarDesc DD 068H ; ImFontAtlasBuildPackCustomRects
	DD	010H
	DQ	FLAT:?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcName$0
	ORG $+48
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcFrameData DD 01H ; ImFontAtlasBuildPackCustomRects
	DD	00H
	DQ	FLAT:?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z DD 025052301H
	DD	011e2323H
	DD	07017001dH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ DD 025050f01H
	DD	010a230fH
	DD	07003001dH
	DD	05002H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	030dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z DD 025054b19H
	DD	011c2321H
	DD	070150083H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0400H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$0 DB 073H ; ImGui::ShadeVertsLinearUV
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$1 DB 075H ; ImGui::ShadeVertsLinearUV
	DB	076H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$2 DB 073H ; ImGui::ShadeVertsLinearUV
	DB	063H
	DB	061H
	DB	06cH
	DB	065H
	DB	00H
	ORG $+2
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$3 DB 06dH ; ImGui::ShadeVertsLinearUV
	DB	069H
	DB	06eH
	DB	00H
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$4 DB 06dH ; ImGui::ShadeVertsLinearUV
	DB	061H
	DB	078H
	DB	00H
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcVarDesc DD 0e8H ; ImGui::ShadeVertsLinearUV
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$4
	DD	0c8H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcName$0
	ORG $+240
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcFrameData DD 05H ; ImGui::ShadeVertsLinearUV
	DD	00H
	DQ	FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	028aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z DD 025054b19H
	DD	011c2321H
	DD	070150079H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	03b8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcName$0 DB 067H ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
	DB	072H
	DB	061H
	DB	064H
	DB	069H
	DB	065H
	DB	06eH
	DB	074H
	DB	05fH
	DB	065H
	DB	078H
	DB	074H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcVarDesc DD 028H ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
	DD	08H
	DQ	FLAT:?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcName$0
	ORG $+48
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcFrameData DD 01H ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
	DD	00H
	DQ	FLAT:?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z DD 035052201H
	DD	011d3322H
	DD	070160089H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	07cbH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z DD 035054d19H
	DD	011e3323H
	DD	070170091H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0470H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$0 DB 070H ; ImGui::RenderRectFilledRangeH
	DB	030H
	DB	00H
	ORG $+1
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$1 DB 070H ; ImGui::RenderRectFilledRangeH
	DB	031H
	DB	00H
	ORG $+9
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcVarDesc DD 058H ; ImGui::RenderRectFilledRangeH
	DD	08H
	DQ	FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcName$0
	ORG $+96
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcFrameData DD 02H ; ImGui::RenderRectFilledRangeH
	DD	00H
	DQ	FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z DD 035052201H
	DD	011d3322H
	DD	070160041H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0497H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z DD 045054d19H
	DD	011e4323H
	DD	07017009bH
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	04c8H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcName$0 DB 06fH ; ImGui::RenderMouseCursor
	DB	066H
	DB	066H
	DB	073H
	DB	065H
	DB	074H
	DB	00H
	ORG $+1
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcName$1 DB 073H ; ImGui::RenderMouseCursor
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+3
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcName$2 DB 075H ; ImGui::RenderMouseCursor
	DB	076H
	DB	00H
	ORG $+5
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcFrameData DD 03H ; ImGui::RenderMouseCursor
	DD	00H
	DQ	FLAT:?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcVarDesc
	ORG $+8
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcVarDesc DD 0a8H ; ImGui::RenderMouseCursor
	DD	020H
	DQ	FLAT:?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcName$2
	DD	088H
	DD	08H
	DQ	FLAT:?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcName$1
	DD	068H
	DD	08H
	DQ	FLAT:?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z DD 025052301H
	DD	011e2323H
	DD	07017003dH
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z DD 035051d01H
	DD	0118331dH
	DD	07011001fH
	DD	05010H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0376H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z DD 035054c19H
	DD	011d3322H
	DD	070160093H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0480H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$0 DB 063H ; ImGui::RenderArrow
	DB	065H
	DB	06eH
	DB	074H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$1 DB 061H ; ImGui::RenderArrow
	DB	00H
	ORG $+2
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$2 DB 062H ; ImGui::RenderArrow
	DB	00H
	ORG $+2
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$3 DB 063H ; ImGui::RenderArrow
	DB	00H
	ORG $+6
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcFrameData DD 04H ; ImGui::RenderArrow
	DD	00H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcVarDesc
	ORG $+8
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcVarDesc DD 0d8H ; ImGui::RenderArrow
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$3
	DD	0b8H
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$2
	DD	098H
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcName$0
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z DD 035052201H
	DD	011d3322H
	DD	070160051H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@H@@QEAAXAEBH@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@H@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@H@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@H@@QEAAAEAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@H@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@H@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@H@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@H@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@H@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z DD 025051901H
	DD	01142319H
	DD	0700d0025H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawListSharedData@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070029H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImBitVector@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBit@ImBitVector@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?TestBit@ImBitVector@@QEBA_NH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImBitVector@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Create@ImBitVector@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArraySetBit@@YAXPEAIH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBitArrayTestBit@@YA_NPEBIH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z DD 025052201H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z DD 025052201H
	DD	011d2322H
	DD	070160031H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMul@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMax@M@@YAMMM@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??$ImMin@M@@YAMMM@Z DD 035051a01H
	DD	0115331aH
	DD	0700e0021H
	DD	0500dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImDot@@YAMAEBUImVec2@@0@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloorSigned@@YAMM@Z DD 025031001H
	DD	0d20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImFloor@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLengthSqr@@YAMAEBUImVec2@@@Z DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z DD 035032201H
	DD	0f21d3322H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z DD 025031e01H
	DD	0d219231eH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMax@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImMin@@YA?AUImVec2@@AEBU1@0@Z DD 025031901H
	DD	0d2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImRsqrt@@YAMM@Z DD 025041301H
	DD	010e2313H
	DD	050070012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAbs@@YAMM@Z DD 025031001H
	DD	0b20b2310H
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImAbs@@YAHH@Z DD 025030e01H
	DD	0d209230eH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z DD 025031401H
	DD	0b20f2314H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??G@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??H@YA?AUImVec2@@AEBU0@0@Z DD 025031901H
	DD	0b2142319H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??D@YA?AUImVec2@@AEBU0@M@Z DD 025031a01H
	DD	0b215231aH
	DD	05011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImCharIsBlankW@@YA_NI@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImCharIsBlankA@@YA_ND@Z DD 025051201H
	DD	010d2312H
	DD	07006001fH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ImUpperPowerOfTwo@@YAHH@Z DD 025051201H
	DD	010d2312H
	DD	07006001dH
	DD	05005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fabsf DD 035051401H
	DD	010f3314H
	DD	07008001fH
	DD	05007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_GImFont@@QEAAPEAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z DD 025051c01H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetGlyphVisible@ImFont@@QEAAXG_N@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRemapChar@ImFont@@QEAAXGG_N@Z DD 025052301H
	DD	011e2323H
	DD	070170021H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z DD 025052401H
	DD	011f2324H
	DD	07018002dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GrowIndex@ImFont@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b0025H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearOutputData@ImFont@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0652H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildLookupTable@ImFont@@QEAAXXZ DD 025063e19H
	DD	010f2314H
	DD	070080048H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0230H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$0 DB 065H	; ImFont::BuildLookupTable
	DB	06cH
	DB	06cH
	DB	069H
	DB	070H
	DB	073H
	DB	069H
	DB	073H
	DB	05fH
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$1 DB 064H	; ImFont::BuildLookupTable
	DB	06fH
	DB	074H
	DB	073H
	DB	05fH
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
	ORG $+5
?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$2 DB 066H	; ImFont::BuildLookupTable
	DB	061H
	DB	06cH
	DB	06cH
	DB	062H
	DB	061H
	DB	063H
	DB	06bH
	DB	05fH
	DB	063H
	DB	068H
	DB	061H
	DB	072H
	DB	073H
	DB	00H
	ORG $+1
?BuildLookupTable@ImFont@@QEAAXXZ$rtcVarDesc DD 0124H	; ImFont::BuildLookupTable
	DD	06H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$2
	DD	0104H
	DD	04H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$1
	DD	0e4H
	DD	04H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcName$0
	ORG $+144
?BuildLookupTable@ImFont@@QEAAXXZ$rtcFrameData DD 03H	; ImFont::BuildLookupTable
	DD	00H
	DQ	FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0e4fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z DD 035054d19H
	DD	011e3323H
	DD	0701700afH
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0560H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcName$0 DB 063H ; ImFont::RenderText
	DB	00H
	ORG $+14
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcVarDesc DD 0254H ; ImFont::RenderText
	DD	04H
	DQ	FLAT:?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcName$0
	ORG $+48
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcFrameData DD 01H ; ImFont::RenderText
	DD	00H
	DQ	FLAT:?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z DD 035052301H
	DD	011e3323H
	DD	07017003bH
	DD	05016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	038cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z DD 025054d19H
	DD	011e2323H
	DD	070170047H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcName$0 DB 063H ; ImFont::CalcWordWrapPositionA
	DB	00H
	ORG $+14
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcVarDesc DD 0104H ; ImFont::CalcWordWrapPositionA
	DD	04H
	DQ	FLAT:?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcName$0
	ORG $+48
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcFrameData DD 01H ; ImFont::CalcWordWrapPositionA
	DD	00H
	DQ	FLAT:?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	0463H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z DD 035054e19H
	DD	011f3324H
	DD	07018004dH
	DD	05017H
	DD	imagerel __GSHandlerCheck
	DD	0258H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$0 DB 074H ; ImFont::CalcTextSizeA
	DB	065H
	DB	078H
	DB	074H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+2
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$1 DB 063H ; ImFont::CalcTextSizeA
	DB	00H
	ORG $+2
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcVarDesc DD 0154H ; ImFont::CalcTextSizeA
	DD	04H
	DQ	FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$1
	DD	078H
	DD	08H
	DQ	FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcName$0
	ORG $+96
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcFrameData DD 02H ; ImFont::CalcTextSizeA
	DD	00H
	DQ	FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsLoaded@ImFont@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ImFont@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1ImFont@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1ImFont@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImFont@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1ImFont@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImFont@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImFont@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImFont@@QEAA@XZ DB 08H
	DB	00H
	DB	00H
	DB	'^'
	DB	02H
	DB	'('
	DB	04H
	DB	0f5H, 03H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImFont@@QEAA@XZ DB 04H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImFont@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0ImFont@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImFont@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImFont@@QEAA@XZ
	DD	imagerel $ip2state$??0ImFont@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFont@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImFont@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontGlyph@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@M@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@M@@QEAAXHAEBM@Z DD 025051c01H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@M@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@M@@QEAAAEAMH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@M@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@M@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@M@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@M@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@M@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@M@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@M@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImFontConfig@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontConfig@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImFontConfig@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontConfig@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@PEAUImFont@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEAUImFont@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@PEAUImFont@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEAUImFont@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	044H
	DW	02d6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z DD 025054b19H
	DD	011c2321H
	DD	070150047H
	DD	05014H
	DD	imagerel __GSHandlerCheck
	DD	0220H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$0 DB 070H ; ImFontAtlas::GetMouseCursorTexData
	DB	06fH
	DB	073H
	DB	00H
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$1 DB 073H ; ImFontAtlas::GetMouseCursorTexData
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+7
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcVarDesc DD 068H ; ImFontAtlas::GetMouseCursorTexData
	DD	08H
	DQ	FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcName$0
	ORG $+96
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcFrameData DD 02H ; ImFontAtlas::GetMouseCursorTexData
	DD	00H
	DQ	FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z DD 025052201H
	DD	011d2322H
	DD	070160025H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001fH
	DD	0500aH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0184H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z DD 025054d19H
	DD	011e2323H
	DD	070170027H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcName$0 DB 072H ; ImFontAtlas::AddCustomRectFontGlyph
	DB	00H
	ORG $+14
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcVarDesc DD 028H ; ImFontAtlas::AddCustomRectFontGlyph
	DD	020H
	DQ	FLAT:?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcName$0
	ORG $+48
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcFrameData DD 01H ; ImFontAtlas::AddCustomRectFontGlyph
	DD	00H
	DQ	FLAT:?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03fH
	DW	0120H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z DD 025054619H
	DD	0117231cH
	DD	070100027H
	DD	0500fH
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcName$0 DB 072H ; ImFontAtlas::AddCustomRectRegular
	DB	00H
	ORG $+14
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcVarDesc DD 028H ; ImFontAtlas::AddCustomRectRegular
	DD	020H
	DQ	FLAT:?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcName$0
	ORG $+48
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcFrameData DD 01H ; ImFontAtlas::AddCustomRectRegular
	DD	00H
	DQ	FLAT:?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ DD 025061401H
	DD	010f2314H
	DD	07008001cH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ DD 025061401H
	DD	010f2314H
	DD	07008001cH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	01c6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD 035054c19H
	DD	011d3322H
	DD	07016002fH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0168H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcName$0 DB 070H ; ImFontAtlas::GetTexDataAsRGBA32
	DB	069H
	DB	078H
	DB	065H
	DB	06cH
	DB	073H
	DB	00H
	ORG $+9
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcVarDesc DD 038H ; ImFontAtlas::GetTexDataAsRGBA32
	DD	08H
	DQ	FLAT:?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcName$0
	ORG $+48
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcFrameData DD 01H ; ImFontAtlas::GetTexDataAsRGBA32
	DD	00H
	DQ	FLAT:?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Build@ImFontAtlas@@QEAA_NXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImFontAtlas@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearFonts@ImFontAtlas@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearTexData@ImFontAtlas@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearInputData@ImFontAtlas@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD 035052301H
	DD	011e3323H
	DD	07017002dH
	DD	05016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	016aH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z DD 035064e19H
	DD	011f3324H
	DD	070180086H
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	0420H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcName$0 DB 066H ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc DD 080H ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	DD	088H
	DQ	FLAT:?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcName$0
	ORG $+48
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData DD 01H ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	DD	00H
	DQ	FLAT:?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	01b3H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z DD 025064e19H
	DD	011f2324H
	DD	07018007cH
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	03d0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcName$0 DB 066H ; ImFontAtlas::AddFontFromMemoryTTF
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc DD 030H ; ImFontAtlas::AddFontFromMemoryTTF
	DD	088H
	DQ	FLAT:?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcName$0
	ORG $+48
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData DD 01H ; ImFontAtlas::AddFontFromMemoryTTF
	DD	00H
	DQ	FLAT:?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	028dH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z DD 035064e19H
	DD	011f3324H
	DD	07018008aH
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	0448H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$0 DB 064H ; ImFontAtlas::AddFontFromFileTTF
	DB	061H
	DB	074H
	DB	061H
	DB	05fH
	DB	073H
	DB	069H
	DB	07aH
	DB	065H
	DB	00H
	ORG $+6
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$1 DB 066H ; ImFontAtlas::AddFontFromFileTTF
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcVarDesc DD 080H ; ImFontAtlas::AddFontFromFileTTF
	DD	088H
	DQ	FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$1
	DD	038H
	DD	08H
	DQ	FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcName$0
	ORG $+96
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcFrameData DD 02H ; ImFontAtlas::AddFontFromFileTTF
	DD	00H
	DQ	FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	03cH
	DW	01d6H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD 035064319H
	DD	01143319H
	DD	0700d008aH
	DD	0500b600cH
	DD	imagerel __GSHandlerCheck
	DD	0440H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcName$0 DB 066H ; ImFontAtlas::AddFontDefault
	DB	06fH
	DB	06eH
	DB	074H
	DB	05fH
	DB	063H
	DB	066H
	DB	067H
	DB	00H
	ORG $+7
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcVarDesc DD 040H ; ImFontAtlas::AddFontDefault
	DD	088H
	DQ	FLAT:?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcName$0
	ORG $+48
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcFrameData DD 01H ; ImFontAtlas::AddFontDefault
	DD	00H
	DQ	FLAT:?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DB 06H
	DB	00H
	DB	00H
	DB	0e9H, 04H
	DB	02H
	DB	'p'
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DB 028H
	DD	imagerel $stateUnwindMap$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
	DD	imagerel $ip2state$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z DD 025061911H
	DD	01142319H
	DD	0700d003aH
	DD	0500b600cH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1ImFontAtlas@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1ImFontAtlas@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1ImFontAtlas@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1ImFontAtlas@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1ImFontAtlas@@QEAA@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImFontAtlas@@QEAA@XZ DB 0aH
	DB	00H
	DB	00H
	DB	0b2H
	DB	02H
	DB	'('
	DB	04H
	DB	'('
	DB	06H
	DB	0caH
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImFontAtlas@@QEAA@XZ DB 06H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImFontAtlas@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImFontAtlas@@QEAA@XZ
	DD	imagerel $ip2state$??0ImFontAtlas@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFontAtlas@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImFontAtlas@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFontAtlasCustomRect@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z DD 025051801H
	DD	01132318H
	DD	0700c0031H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	040H
	DW	0110H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z DD 025054719H
	DD	0118231dH
	DD	070110027H
	DD	05010H
	DD	imagerel __GSHandlerCheck
	DD	0120H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcName$0 DB 063H ; ImFontGlyphRangesBuilder::AddText
	DB	00H
	ORG $+14
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcVarDesc DD 024H ; ImFontGlyphRangesBuilder::AddText
	DD	04H
	DQ	FLAT:?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcName$0
	ORG $+48
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcFrameData DD 01H ; ImFontGlyphRangesBuilder::AddText
	DD	00H
	DQ	FLAT:?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0027H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z DD 025051801H
	DD	01132318H
	DD	0700c0027H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@I@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@I@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@I@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?end@?$ImVector@I@@QEBAPEBIXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?begin@?$ImVector@I@@QEBAPEBIXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@I@@QEBAAEBIH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@I@@QEAAAEAIH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@I@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@I@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@I@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@I@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@I@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@I@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@I@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImFontConfig@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z DD 035061901H
	DD	01143319H
	DD	0700d0034H
	DD	0500b600cH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	01ddH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DB 06H
	DB	00H
	DB	00H
	DB	0a8H
	DB	02H
	DB	0c1H, 05H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DB 028H
	DD	imagerel $stateUnwindMap$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
	DD	imagerel $ip2state$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ DD 025063e19H
	DD	010f2314H
	DD	070080036H
	DD	050066007H
	DD	imagerel __GSHandlerCheck_EH4
	DD	imagerel $cppxdata$?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
	DD	01aaH
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcName$0 DB 06eH ; ImDrawData::DeIndexAllBuffers
	DB	065H
	DB	077H
	DB	05fH
	DB	076H
	DB	074H
	DB	078H
	DB	05fH
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcVarDesc DD 028H ; ImDrawData::DeIndexAllBuffers
	DD	010H
	DQ	FLAT:?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcName$0
	ORG $+48
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcFrameData DD 01H ; ImDrawData::DeIndexAllBuffers
	DD	00H
	DQ	FLAT:?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD 025052401H
	DD	011f2324H
	DD	07018002bH
	DD	05017H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0507H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z DD 025054d19H
	DD	011e2323H
	DD	070170053H
	DD	05016H
	DD	imagerel __GSHandlerCheck
	DD	0280H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$0 DB 073H ; ImDrawList::_PathArcToFastEx
	DB	00H
	ORG $+2
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$1 DB 073H ; ImDrawList::_PathArcToFastEx
	DB	00H
	ORG $+2
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$2 DB 073H ; ImDrawList::_PathArcToFastEx
	DB	00H
	ORG $+6
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcVarDesc DD 01a8H ; ImDrawList::_PathArcToFastEx
	DD	08H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$2
	DD	0168H
	DD	08H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$1
	DD	0128H
	DD	08H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcName$0
	ORG $+144
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcFrameData DD 03H ; ImDrawList::_PathArcToFastEx
	DD	00H
	DQ	FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z DD 025051901H
	DD	01142319H
	DD	0700d0021H
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_OnChangedTextureID@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_OnChangedClipRect@ImDrawList@@QEAAXXZ DD 025061401H
	DD	010f2314H
	DD	070080024H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070025H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_ClearFreeMemory@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_ResetForNewFrame@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070027H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimWriteIdx@ImDrawList@@QEAAXG@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z DD 025052201H
	DD	011d2322H
	DD	070160021H
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	037eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD 025054c19H
	DD	011d2322H
	DD	070160031H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0178H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$0 DB 062H ; ImDrawList::PrimRectUV
	DB	00H
	ORG $+2
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$1 DB 064H ; ImDrawList::PrimRectUV
	DB	00H
	ORG $+2
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$2 DB 075H ; ImDrawList::PrimRectUV
	DB	076H
	DB	05fH
	DB	062H
	DB	00H
	ORG $+3
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$3 DB 075H ; ImDrawList::PrimRectUV
	DB	076H
	DB	05fH
	DB	064H
	DB	00H
	ORG $+3
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcFrameData DD 04H ; ImDrawList::PrimRectUV
	DD	00H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcVarDesc
	ORG $+8
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcVarDesc DD 088H ; ImDrawList::PrimRectUV
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$3
	DD	068H
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	032fH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z DD 025054c19H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0158H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$0 DB 062H ; ImDrawList::PrimRect
	DB	00H
	ORG $+2
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$1 DB 064H ; ImDrawList::PrimRect
	DB	00H
	ORG $+2
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$2 DB 075H ; ImDrawList::PrimRect
	DB	076H
	DB	00H
	ORG $+5
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcVarDesc DD 068H ; ImDrawList::PrimRect
	DD	08H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$2
	DD	048H
	DD	08H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcName$0
	ORG $+144
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcFrameData DD 03H ; ImDrawList::PrimRect
	DD	00H
	DQ	FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimUnreserve@ImDrawList@@QEAAXHH@Z DD 025051c01H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PrimReserve@ImDrawList@@QEAAXHH@Z DD 025051c01H
	DD	0117231cH
	DD	070100029H
	DD	0500fH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DB 06H
	DB	00H
	DB	00H
	DB	0c0H
	DB	02H
	DB	086H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DB 028H
	DD	imagerel $stateUnwindMap$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
	DD	imagerel $ip2state$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ DD 025051311H
	DD	010e2313H
	DD	070070035H
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	037H
	DW	0104H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddDrawCmd@ImDrawList@@QEAAXXZ DD 025063e19H
	DD	010f2314H
	DD	070080028H
	DD	050066007H
	DD	imagerel __GSHandlerCheck
	DD	0130H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcName$0 DB 064H	; ImDrawList::AddDrawCmd
	DB	072H
	DB	061H
	DB	077H
	DB	05fH
	DB	063H
	DB	06dH
	DB	064H
	DB	00H
	ORG $+7
?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcVarDesc DD 028H	; ImDrawList::AddDrawCmd
	DD	038H
	DQ	FLAT:?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcName$0
	ORG $+48
?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcFrameData DD 01H	; ImDrawList::AddDrawCmd
	DD	00H
	DQ	FLAT:?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z DD 025051d01H
	DD	0118231dH
	DD	070110021H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z DD 035052301H
	DD	011e3323H
	DD	070170047H
	DD	05016H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	0198H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z DD 055054c19H
	DD	011d5322H
	DD	070160035H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0190H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcName$0 DB 070H ; ImDrawList::PathBezierQuadraticCurveTo
	DB	031H
	DB	00H
	ORG $+13
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcVarDesc DD 058H ; ImDrawList::PathBezierQuadraticCurveTo
	DD	08H
	DQ	FLAT:?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcName$0
	ORG $+48
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcFrameData DD 01H ; ImDrawList::PathBezierQuadraticCurveTo
	DD	00H
	DQ	FLAT:?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	01cbH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z DD 065054c19H
	DD	011d6322H
	DD	070160037H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcName$0 DB 070H ; ImDrawList::PathBezierCubicCurveTo
	DB	031H
	DB	00H
	ORG $+13
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcVarDesc DD 068H ; ImDrawList::PathBezierCubicCurveTo
	DD	08H
	DQ	FLAT:?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcName$0
	ORG $+48
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcFrameData DD 01H ; ImDrawList::PathBezierCubicCurveTo
	DD	00H
	DQ	FLAT:?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z DD 035052301H
	DD	011e3323H
	DD	070170021H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z DD 035052401H
	DD	011f3324H
	DD	07018005dH
	DD	05017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathStroke@ImDrawList@@QEAAXIHM@Z DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathFillConvex@ImDrawList@@QEAAXI@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z DD 045052201H
	DD	011d4322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z DD 055052201H
	DD	011d5322H
	DD	070160027H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z DD 035052201H
	DD	011d3322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	09f9H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z DD 025054c19H
	DD	011d2322H
	DD	0701600afH
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0568H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcName$0 DB 075H ; ImDrawList::AddConvexPolyFilled
	DB	076H
	DB	00H
	ORG $+5
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcName$1 DB 05fH ; ImDrawList::AddConvexPolyFilled
	DB	05fH
	DB	024H
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	050H
	DB	061H
	DB	064H
	DB	024H
	DB	00H
	ORG $+10
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcVarDesc DD 03c8H ; ImDrawList::AddConvexPolyFilled
	DD	08H
	DQ	FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcName$1
	DD	028H
	DD	08H
	DQ	FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcName$0
	ORG $+96
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcFrameData DD 02H ; ImDrawList::AddConvexPolyFilled
	DD	00H
	DQ	FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	02193H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z DD 025064d19H
	DD	011e2323H
	DD	0701701ecH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0f58H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$0 DB 06fH ; ImDrawList::AddPolyline
	DB	070H
	DB	061H
	DB	071H
	DB	075H
	DB	065H
	DB	05fH
	DB	075H
	DB	076H
	DB	00H
	ORG $+6
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$1 DB 074H ; ImDrawList::AddPolyline
	DB	065H
	DB	078H
	DB	05fH
	DB	075H
	DB	076H
	DB	073H
	DB	00H
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$2 DB 074H ; ImDrawList::AddPolyline
	DB	065H
	DB	078H
	DB	05fH
	DB	075H
	DB	076H
	DB	030H
	DB	00H
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$3 DB 074H ; ImDrawList::AddPolyline
	DB	065H
	DB	078H
	DB	05fH
	DB	075H
	DB	076H
	DB	031H
	DB	00H
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$4 DB 05fH ; ImDrawList::AddPolyline
	DB	05fH
	DB	024H
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	050H
	DB	061H
	DB	064H
	DB	024H
	DB	00H
	ORG $+2
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcFrameData DD 05H ; ImDrawList::AddPolyline
	DD	00H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcVarDesc
	ORG $+8
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcVarDesc DD 07b8H ; ImDrawList::AddPolyline
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$4
	DD	0418H
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$3
	DD	03f8H
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$2
	DD	03c8H
	DD	010H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$1
	DD	048H
	DD	08H
	DQ	FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcName$0
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	047H
	DW	028cH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z DD 055064e19H
	DD	011f5324H
	DD	07018002aH
	DD	050166017H
	DD	imagerel __GSHandlerCheck
	DD	0148H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcName$0 DB 063H ; ImDrawList::AddText
	DB	06cH
	DB	069H
	DB	070H
	DB	05fH
	DB	072H
	DB	065H
	DB	063H
	DB	074H
	DB	00H
	ORG $+6
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcVarDesc DD 058H ; ImDrawList::AddText
	DD	010H
	DQ	FLAT:?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcName$0
	ORG $+48
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcFrameData DD 01H ; ImDrawList::AddText
	DD	00H
	DQ	FLAT:?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z DD 055052201H
	DD	011d5322H
	DD	070160023H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD 035052301H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD 035052301H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z DD 035052301H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z DD 035052301H
	DD	011e3323H
	DD	070170023H
	DD	05016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z DD 025052201H
	DD	011d2322H
	DD	07016001dH
	DD	05015H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	045H
	DW	020eH
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z DD 025054c19H
	DD	011d2322H
	DD	070160029H
	DD	05015H
	DD	imagerel __GSHandlerCheck
	DD	0138H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcName$0 DB 075H ; ImDrawList::AddRectFilledMultiColor
	DB	076H
	DB	00H
	ORG $+13
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcVarDesc DD 028H ; ImDrawList::AddRectFilledMultiColor
	DD	08H
	DQ	FLAT:?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcName$0
	ORG $+48
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcFrameData DD 01H ; ImDrawList::AddRectFilledMultiColor
	DD	00H
	DQ	FLAT:?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z DD 035052201H
	DD	011d3322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z DD 035052201H
	DD	011d3322H
	DD	070160041H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z DD 025052201H
	DD	011d2322H
	DD	07016002dH
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PopTextureID@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushTextureID@ImDrawList@@QEAAXPEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001fH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PopClipRect@ImDrawList@@QEAAXXZ DD 025061401H
	DD	010f2314H
	DD	070080020H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushClipRectFullScreen@ImDrawList@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007002dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	046H
	DW	0185H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z DD 035064d19H
	DD	011e3323H
	DD	07017002cH
	DD	050156016H
	DD	imagerel __GSHandlerCheck
	DD	0150H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcName$0 DB 063H ; ImDrawList::PushClipRect
	DB	072H
	DB	00H
	ORG $+5
?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcName$1 DB 063H ; ImDrawList::PushClipRect
	DB	075H
	DB	072H
	DB	072H
	DB	065H
	DB	06eH
	DB	074H
	DB	00H
?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcVarDesc DD 068H ; ImDrawList::PushClipRect
	DD	010H
	DQ	FLAT:?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcName$1
	DD	038H
	DD	010H
	DQ	FLAT:?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcName$0
	ORG $+96
?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcFrameData DD 02H ; ImDrawList::PushClipRect
	DD	00H
	DQ	FLAT:?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcVarDesc
CONST	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z DB 010H
	DB	00H
	DB	00H
	DB	'h'
	DB	02H
	DB	'('
	DB	04H
	DB	'('
	DB	06H
	DB	'('
	DB	08H
	DB	'('
	DB	0aH
	DB	'('
	DB	0cH
	DB	098H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z DB 0cH
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
	DB	02eH
	DD	imagerel ?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z DB 028H
	DD	imagerel $stateUnwindMap$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z
	DD	imagerel $ip2state$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z DD 025051811H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImVec2@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImVec2@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImVec2@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImVec2@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImVec2@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImVec2@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImVec2@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImVec2@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@PEAX@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@PEAX@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@PEAX@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@PEAX@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@PEAX@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@PEAX@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@PEAX@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@PEAX@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@PEAX@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@PEAX@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImVec4@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImVec4@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImVec4@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImVec4@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImVec4@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImVec4@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImVec4@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImVec4@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z DD 025051801H
	DD	01132318H
	DD	0700c0029H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImDrawVert@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImDrawVert@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImDrawVert@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawVert@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD 025061e01H
	DD	0119231eH
	DD	070120020H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z DD 025061901H
	DD	01142319H
	DD	0700d0058H
	DD	0500b600cH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DB 06H
	DB	00H
	DB	00H
	DB	'A', 06H
	DB	02H
	DB	090H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DB 028H
	DD	imagerel $stateUnwindMap$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
	DD	imagerel $ip2state$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z DD 025051d11H
	DD	0118231dH
	DD	07011003bH
	DD	05010H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	070070021H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Clear@ImDrawListSplitter@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawListSplitter@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawChannel@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DB	00H
	DB	05H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA DD 031001H
	DD	0700c4210H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??0ImDrawChannel@@QEAA@XZ DB 06H
	DB	00H
	DB	00H
	DB	'F'
	DB	02H
	DB	'('
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$stateUnwindMap$??0ImDrawChannel@@QEAA@XZ DB 02H
	DB	0eH
	DD	imagerel ?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??0ImDrawChannel@@QEAA@XZ DB 028H
	DD	imagerel $stateUnwindMap$??0ImDrawChannel@@QEAA@XZ
	DD	imagerel $ip2state$??0ImDrawChannel@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawChannel@@QEAA@XZ DD 025051311H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??0ImDrawChannel@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z DD 025051801H
	DD	01132318H
	DD	0700c0021H
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@UImDrawCmd@@@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawCmdHeader@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImDrawCmd@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?push_back@?$ImVector@G@@QEAAXAEBG@Z DD 025051801H
	DD	01132318H
	DD	0700c001dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?reserve@?$ImVector@G@@QEAAXH@Z DD 025061801H
	DD	01132318H
	DD	0700c0020H
	DD	0500a600bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?shrink@?$ImVector@G@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@G@@QEAAXHAEBG@Z DD 025051c01H
	DD	0117231cH
	DD	070100021H
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?resize@?$ImVector@G@@QEAAXH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?_grow_capacity@?$ImVector@G@@QEBAHH@Z DD 025051701H
	DD	01122317H
	DD	0700b0021H
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??A?$ImVector@G@@QEAAAEAGH@Z DD 025051701H
	DD	01122317H
	DD	0700b001dH
	DD	0500aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?empty@?$ImVector@G@@QEBA_NXZ DD 025051301H
	DD	010e2313H
	DD	07007001fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?clear@?$ImVector@G@@QEAAXXZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$ip2state$??1?$ImVector@G@@QEAA@XZ DB 02H
	DB	00H
	DB	00H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$cppxdata$??1?$ImVector@G@@QEAA@XZ DB 060H
	DD	imagerel $ip2state$??1?$ImVector@G@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1?$ImVector@G@@QEAA@XZ DD 025051319H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
	DD	imagerel __CxxFrameHandler4
	DD	imagerel $cppxdata$??1?$ImVector@G@@QEAA@XZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z DD 025061901H
	DD	01142319H
	DD	0700d001cH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0?$ImVector@G@@QEAA@XZ DD 025051301H
	DD	010e2313H
	DD	07007001dH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??3@YAXPEAXUImNewWrapper@@0@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??2@YAPEAX_KUImNewWrapper@@PEAX@Z DD 025051c01H
	DD	0117231cH
	DD	07010001dH
	DD	0500fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z DD 035061401H
	DD	010f3314H
	DD	0700801b8H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z DD 035061401H
	DD	010f3314H
	DD	0700801b8H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z DD 035061401H
	DD	010f3314H
	DD	0700801b8H
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@MMMM@Z DD 025032101H
	DD	0b21c2321H
	DD	05018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec4@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@MM@Z DD 025031b01H
	DD	0b216231bH
	DD	05012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0ImVec2@@QEAA@XZ DD 025030f01H
	DD	0b20a230fH
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??_H@YAXPEAX_K1P6APEAX0@Z@Z DD 025052201H
	DD	011d2322H
	DD	07016001fH
	DD	05015H
xdata	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
	ret	0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z
_TEXT	SEGMENT
p$ = 224
??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z PROC		; IM_DELETE<ImFont>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1653
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	QWORD PTR p$[rbp], 0
	je	SHORT $LN2@IM_DELETE
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rbp]
	call	??_GImFont@@QEAAPEAXI@Z
	mov	rcx, QWORD PTR p$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN2@IM_DELETE:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z ENDP		; IM_DELETE<ImFont>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_adler32@@YAIIPEAEI@Z
_TEXT	SEGMENT
ADLER_MOD$ = 4
s1$ = 36
s2$ = 68
blocklen$ = 100
i$ = 132
tv149 = 340
adler32$ = 384
buffer$ = 392
buflen$ = 400
?stb_adler32@@YAIIPEAEI@Z PROC				; stb_adler32, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 4014
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 4015
	mov	DWORD PTR ADLER_MOD$[rbp], 65521	; 0000fff1H
; Line 4016
	mov	eax, DWORD PTR adler32$[rbp]
	and	eax, 65535				; 0000ffffH
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR adler32$[rbp]
	shr	eax, 16
	mov	DWORD PTR s2$[rbp], eax
; Line 4017
	xor	edx, edx
	mov	eax, DWORD PTR buflen$[rbp]
	mov	ecx, 5552				; 000015b0H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$[rbp], eax
$LN2@stb_adler3:
; Line 4020
	cmp	DWORD PTR buflen$[rbp], 0
	je	$LN3@stb_adler3
; Line 4021
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN6@stb_adler3
$LN4@stb_adler3:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 8
	mov	DWORD PTR i$[rbp], eax
$LN6@stb_adler3:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 7
	cmp	eax, DWORD PTR blocklen$[rbp]
	jae	$LN5@stb_adler3
; Line 4022
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4023
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4024
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4025
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4026
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4027
	mov	eax, 1
	imul	rax, rax, 5
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4028
	mov	eax, 1
	imul	rax, rax, 6
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4029
	mov	eax, 1
	imul	rax, rax, 7
	mov	rcx, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
; Line 4031
	mov	rax, QWORD PTR buffer$[rbp]
	add	rax, 8
	mov	QWORD PTR buffer$[rbp], rax
; Line 4032
	jmp	$LN4@stb_adler3
$LN5@stb_adler3:
; Line 4034
	jmp	SHORT $LN9@stb_adler3
$LN7@stb_adler3:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN9@stb_adler3:
	mov	eax, DWORD PTR blocklen$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jae	SHORT $LN8@stb_adler3
; Line 4035
	mov	rax, QWORD PTR buffer$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv149[rbp], eax
	mov	rax, QWORD PTR buffer$[rbp]
	inc	rax
	mov	QWORD PTR buffer$[rbp], rax
	mov	eax, DWORD PTR tv149[rbp]
	mov	ecx, DWORD PTR s1$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$[rbp], eax
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, DWORD PTR s2$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$[rbp], eax
	jmp	SHORT $LN7@stb_adler3
$LN8@stb_adler3:
; Line 4037
	xor	edx, edx
	mov	eax, DWORD PTR s1$[rbp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$[rbp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$[rbp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$[rbp], eax
; Line 4038
	mov	eax, DWORD PTR blocklen$[rbp]
	mov	ecx, DWORD PTR buflen$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buflen$[rbp], eax
; Line 4039
	mov	DWORD PTR blocklen$[rbp], 5552		; 000015b0H
; Line 4040
	jmp	$LN2@stb_adler3
$LN3@stb_adler3:
; Line 4041
	mov	eax, DWORD PTR s2$[rbp]
	shl	eax, 16
	add	eax, DWORD PTR s1$[rbp]
; Line 4042
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?stb_adler32@@YAIIPEAEI@Z ENDP				; stb_adler32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_decompress_token@@YAPEBEPEBE@Z
_TEXT	SEGMENT
i$ = 224
?stb_decompress_token@@YAPEBEPEBE@Z PROC		; stb_decompress_token, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3997
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3998
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jl	$LN2@stb_decomp
; Line 3999
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN4@stb_decomp
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 127				; 0000007fH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	dec	rcx
	mov	edx, eax
	call	?stb__match@@YAXPEBEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 2
	mov	QWORD PTR i$[rbp], rax
	jmp	$LN5@stb_decomp
$LN4@stb_decomp:
; Line 4000
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 64					; 00000040H
	jl	SHORT $LN6@stb_decomp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	inc	eax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	lea	ecx, DWORD PTR [rcx+rdx-16383]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEBEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 3
	mov	QWORD PTR i$[rbp], rax
	jmp	SHORT $LN7@stb_decomp
$LN6@stb_decomp:
; Line 4001
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 31
	mov	rcx, QWORD PTR i$[rbp]
	inc	rcx
	mov	edx, eax
	call	?stb__lit@@YAXPEBEI@Z			; stb__lit
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 30
	cdqe
	mov	rcx, QWORD PTR i$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR i$[rbp], rax
$LN7@stb_decomp:
$LN5@stb_decomp:
; Line 4002
	jmp	$LN3@stb_decomp
$LN2@stb_decomp:
; Line 4003
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 24
	jl	$LN8@stb_decomp
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	inc	eax
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 2
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx-1572863]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEBEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 4
	mov	QWORD PTR i$[rbp], rax
	jmp	$LN9@stb_decomp
$LN8@stb_decomp:
; Line 4004
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 16
	jl	$LN10@stb_decomp
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 2
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx-1048575]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEBEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 5
	mov	QWORD PTR i$[rbp], rax
	jmp	$LN11@stb_decomp
$LN10@stb_decomp:
; Line 4005
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	jl	$LN12@stb_decomp
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-2047]
	mov	rcx, QWORD PTR i$[rbp]
	add	rcx, 2
	mov	edx, eax
	call	?stb__lit@@YAXPEBEI@Z			; stb__lit
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-2045]
	cdqe
	mov	rcx, QWORD PTR i$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR i$[rbp], rax
	jmp	$LN13@stb_decomp
$LN12@stb_decomp:
; Line 4006
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 7
	jne	$LN14@stb_decomp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	rcx, QWORD PTR i$[rbp]
	add	rcx, 3
	mov	edx, eax
	call	?stb__lit@@YAXPEBEI@Z			; stb__lit
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+4]
	cdqe
	mov	rcx, QWORD PTR i$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR i$[rbp], rax
	jmp	$LN15@stb_decomp
$LN14@stb_decomp:
; Line 4007
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 6
	jne	$LN16@stb_decomp
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	inc	eax
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 3
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEBEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 5
	mov	QWORD PTR i$[rbp], rax
	jmp	$LN17@stb_decomp
$LN16@stb_decomp:
; Line 4008
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 4
	jne	$LN18@stb_decomp
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 3
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	lea	ecx, DWORD PTR [rcx+rdx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ?stb__dout@@3PEAEEA
	sub	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stb__match@@YAXPEBEI@Z			; stb__match
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 6
	mov	QWORD PTR i$[rbp], rax
$LN18@stb_decomp:
$LN17@stb_decomp:
$LN15@stb_decomp:
$LN13@stb_decomp:
$LN11@stb_decomp:
$LN9@stb_decomp:
$LN3@stb_decomp:
; Line 4010
	mov	rax, QWORD PTR i$[rbp]
; Line 4011
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_decompress_token@@YAPEBEPEBE@Z ENDP		; stb_decompress_token
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb__lit@@YAXPEBEI@Z
_TEXT	SEGMENT
data$ = 224
length$ = 232
?stb__lit@@YAXPEBEI@Z PROC				; stb__lit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3984
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3985
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
	jbe	SHORT $LN5@stb__lit
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb__lit@@YAXPEBEI@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stb__lit:
; Line 3986
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
	jbe	SHORT $LN2@stb__lit
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__lit
$LN2@stb__lit:
; Line 3987
	mov	rax, QWORD PTR ?stb__barrier_in_b@@3PEBEEB
	cmp	QWORD PTR data$[rbp], rax
	jae	SHORT $LN3@stb__lit
	mov	rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__lit
$LN3@stb__lit:
; Line 3988
	mov	eax, DWORD PTR length$[rbp]
	mov	rdi, QWORD PTR ?stb__dout@@3PEAEEA
	mov	rsi, QWORD PTR data$[rbp]
	mov	ecx, eax
	rep movsb
; Line 3989
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
$LN1@stb__lit:
; Line 3990
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stb__lit@@YAXPEBEI@Z ENDP				; stb__lit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb__match@@YAXPEBEI@Z
_TEXT	SEGMENT
tv85 = 192
tv80 = 192
data$ = 240
length$ = 248
?stb__match@@YAXPEBEI@Z PROC				; stb__match, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3975
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3977
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
	jbe	SHORT $LN7@stb__match
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb__match@@YAXPEBEI@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FC@IADGHEAH@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAe?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stb__match:
; Line 3978
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	cmp	rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
	jbe	SHORT $LN4@stb__match
	mov	eax, DWORD PTR length$[rbp]
	mov	rcx, QWORD PTR ?stb__dout@@3PEAEEA
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	$LN1@stb__match
$LN4@stb__match:
; Line 3979
	mov	rax, QWORD PTR ?stb__barrier_out_b@@3PEAEEA
	cmp	QWORD PTR data$[rbp], rax
	jae	SHORT $LN5@stb__match
	mov	rax, QWORD PTR ?stb__barrier_out_e@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN1@stb__match
$LN5@stb__match:
$LN2@stb__match:
; Line 3980
	mov	eax, DWORD PTR length$[rbp]
	mov	DWORD PTR tv80[rbp], eax
	mov	eax, DWORD PTR length$[rbp]
	dec	eax
	mov	DWORD PTR length$[rbp], eax
	cmp	DWORD PTR tv80[rbp], 0
	je	SHORT $LN3@stb__match
	mov	rax, QWORD PTR data$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv85[rbp], al
	mov	rax, QWORD PTR data$[rbp]
	inc	rax
	mov	QWORD PTR data$[rbp], rax
	mov	rax, QWORD PTR ?stb__dout@@3PEAEEA
	movzx	ecx, BYTE PTR tv85[rbp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR ?stb__dout@@3PEAEEA
	inc	rax
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jmp	SHORT $LN2@stb__match
$LN3@stb__match:
$LN1@stb__match:
; Line 3981
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?stb__match@@YAXPEBEI@Z ENDP				; stb__match
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImLerp@M@@YAMMMM@Z
_TEXT	SEGMENT
a$ = 224
b$ = 232
t$ = 240
??$ImLerp@M@@YAMMMM@Z PROC				; ImLerp<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 415
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR b$[rbp]
	subss	xmm0, DWORD PTR a$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	xmm1, DWORD PTR a$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??$ImLerp@M@@YAMMMM@Z ENDP				; ImLerp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImSwap@M@@YAXAEAM0@Z
_TEXT	SEGMENT
tmp$ = 4
a$ = 256
b$ = 264
??$ImSwap@M@@YAXAEAM0@Z PROC				; ImSwap<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 416
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tmp$[rbp], xmm0
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR tmp$[rbp]
	movss	DWORD PTR [rax], xmm0
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??$ImSwap@M@@YAXAEAM0@Z ENDP				; ImSwap<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImAcos01@@YAMM@Z
_TEXT	SEGMENT
x$ = 224
?ImAcos01@@YAMM@Z PROC					; ImAcos01, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3832
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3833
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR x$[rbp]
	jb	SHORT $LN2@ImAcos01
	movss	xmm0, DWORD PTR __real@3fc90fdb
	jmp	SHORT $LN1@ImAcos01
$LN2@ImAcos01:
; Line 3834
	movss	xmm0, DWORD PTR x$[rbp]
	comiss	xmm0, DWORD PTR __real@3f800000
	jb	SHORT $LN3@ImAcos01
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@ImAcos01
$LN3@ImAcos01:
; Line 3835
	movss	xmm0, DWORD PTR x$[rbp]
	call	acosf
$LN1@ImAcos01:
; Line 3837
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ImAcos01@@YAMM@Z ENDP					; ImAcos01
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z
_TEXT	SEGMENT
n$1 = 4
font$ = 256
candidate_chars$ = 264
candidate_chars_count$ = 272
?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z PROC	; FindFirstExistingGlyph, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3140
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3141
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@FindFirstE
$LN2@FindFirstE:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@FindFirstE:
	mov	eax, DWORD PTR candidate_chars_count$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@FindFirstE
; Line 3142
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR candidate_chars$[rbp]
	movzx	edx, WORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR font$[rbp]
	call	?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
	test	rax, rax
	je	SHORT $LN5@FindFirstE
; Line 3143
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR candidate_chars$[rbp]
	movzx	eax, WORD PTR [rcx+rax*2]
	jmp	SHORT $LN1@FindFirstE
$LN5@FindFirstE:
	jmp	SHORT $LN2@FindFirstE
$LN3@FindFirstE:
; Line 3144
	mov	eax, 65535				; 0000ffffH
$LN1@FindFirstE:
; Line 3145
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ENDP	; FindFirstExistingGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z
_TEXT	SEGMENT
n$1 = 4
tv75 = 212
base_codepoint$ = 256
accumulative_offsets$ = 264
accumulative_offsets_count$ = 272
out_ranges$ = 280
?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z PROC ; UnpackAccumulativeOffsetsIntoRanges, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2847
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2848
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@UnpackAccu
$LN2@UnpackAccu:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
	mov	rax, QWORD PTR out_ranges$[rbp]
	add	rax, 4
	mov	QWORD PTR out_ranges$[rbp], rax
$LN4@UnpackAccu:
	mov	eax, DWORD PTR accumulative_offsets_count$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@UnpackAccu
; Line 2850
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR accumulative_offsets$[rbp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR base_codepoint$[rbp]
	add	ecx, eax
	mov	DWORD PTR tv75[rbp], ecx
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_ranges$[rbp]
	movzx	edx, WORD PTR tv75[rbp]
	mov	WORD PTR [rcx+rax], dx
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out_ranges$[rbp]
	movzx	edx, WORD PTR tv75[rbp]
	mov	WORD PTR [rcx+rax], dx
; Line 2851
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR accumulative_offsets$[rbp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR base_codepoint$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR base_codepoint$[rbp], eax
; Line 2852
	jmp	$LN2@UnpackAccu
$LN3@UnpackAccu:
; Line 2853
	mov	eax, 2
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR out_ranges$[rbp]
	mov	WORD PTR [rdx+rax], cx
; Line 2854
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z ENDP ; UnpackAccumulativeOffsetsIntoRanges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
r$ = 8
n$5 = 36
y$6 = 68
line_width$7 = 100
pad_left$8 = 132
pad_right$9 = 164
write_ptr$10 = 200
i$11 = 228
i$12 = 260
i$13 = 292
write_ptr$14 = 328
i$15 = 356
i$16 = 388
i$17 = 420
uv0$18 = 456
uv1$19 = 488
half_v$20 = 516
$T21 = 932
$T22 = 964
$T23 = 996
tv221 = 1032
tv204 = 1032
__$ArrayPad$ = 1040
atlas$ = 1088
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z PROC ; ImFontAtlasBuildRenderLinesTexData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2705
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1104				; 00000450H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 168				; 000000a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2706
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN23@ImFontAtla
; Line 2707
	jmp	$LN1@ImFontAtla
$LN23@ImFontAtla:
; Line 2710
	mov	rax, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR [rax+1160]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
	mov	QWORD PTR r$[rbp], rax
; Line 2711
	mov	rcx, QWORD PTR r$[rbp]
	call	?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ; ImFontAtlasCustomRect::IsPacked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN27@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@ImFontAtla:
; Line 2712
	mov	DWORD PTR n$5[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR n$5[rbp]
	inc	eax
	mov	DWORD PTR n$5[rbp], eax
$LN4@ImFontAtla:
	cmp	DWORD PTR n$5[rbp], 64			; 00000040H
	jae	$LN3@ImFontAtla
; Line 2715
	mov	eax, DWORD PTR n$5[rbp]
	mov	DWORD PTR y$6[rbp], eax
; Line 2716
	mov	eax, DWORD PTR n$5[rbp]
	mov	DWORD PTR line_width$7[rbp], eax
; Line 2717
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax]
	sub	eax, DWORD PTR line_width$7[rbp]
	xor	edx, edx
	mov	ecx, 2
	div	ecx
	mov	DWORD PTR pad_left$8[rbp], eax
; Line 2718
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR line_width$7[rbp]
	mov	edx, DWORD PTR pad_left$8[rbp]
	add	edx, ecx
	mov	ecx, edx
	sub	eax, ecx
	mov	DWORD PTR pad_right$9[rbp], eax
; Line 2721
	mov	eax, DWORD PTR line_width$7[rbp]
	mov	ecx, DWORD PTR pad_left$8[rbp]
	add	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR pad_right$9[rbp]
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jne	SHORT $LN28@ImFontAtla
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+2]
	cmp	DWORD PTR y$6[rbp], eax
	jb	SHORT $LN29@ImFontAtla
$LN28@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 16
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HO@DLMJCKJA@?$AAp?$AAa?$AAd?$AA_?$AAl?$AAe?$AAf?$AAt?$AA?5?$AA?$CL?$AA?5?$AAl?$AAi?$AAn?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@ImFontAtla:
; Line 2722
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+32], 0
	je	$LN24@ImFontAtla
; Line 2724
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	add	ecx, DWORD PTR y$6[rbp]
	mov	rdx, QWORD PTR atlas$[rbp]
	imul	ecx, DWORD PTR [rdx+48]
	add	eax, ecx
	mov	eax, eax
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR write_ptr$10[rbp], rax
; Line 2725
	mov	DWORD PTR i$11[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR i$11[rbp]
	inc	eax
	mov	DWORD PTR i$11[rbp], eax
$LN7@ImFontAtla:
	mov	eax, DWORD PTR pad_left$8[rbp]
	cmp	DWORD PTR i$11[rbp], eax
	jae	SHORT $LN6@ImFontAtla
; Line 2726
	mov	eax, DWORD PTR i$11[rbp]
	mov	rcx, QWORD PTR write_ptr$10[rbp]
	mov	BYTE PTR [rcx+rax], 0
	jmp	SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
; Line 2728
	mov	DWORD PTR i$12[rbp], 0
	jmp	SHORT $LN10@ImFontAtla
$LN8@ImFontAtla:
	mov	eax, DWORD PTR i$12[rbp]
	inc	eax
	mov	DWORD PTR i$12[rbp], eax
$LN10@ImFontAtla:
	mov	eax, DWORD PTR line_width$7[rbp]
	cmp	DWORD PTR i$12[rbp], eax
	jae	SHORT $LN9@ImFontAtla
; Line 2729
	mov	eax, DWORD PTR pad_left$8[rbp]
	mov	rcx, QWORD PTR write_ptr$10[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR i$12[rbp]
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
	jmp	SHORT $LN8@ImFontAtla
$LN9@ImFontAtla:
; Line 2731
	mov	DWORD PTR i$13[rbp], 0
	jmp	SHORT $LN13@ImFontAtla
$LN11@ImFontAtla:
	mov	eax, DWORD PTR i$13[rbp]
	inc	eax
	mov	DWORD PTR i$13[rbp], eax
$LN13@ImFontAtla:
	mov	eax, DWORD PTR pad_right$9[rbp]
	cmp	DWORD PTR i$13[rbp], eax
	jae	SHORT $LN12@ImFontAtla
; Line 2732
	mov	eax, DWORD PTR pad_left$8[rbp]
	mov	rcx, QWORD PTR write_ptr$10[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR line_width$7[rbp]
	add	rax, rcx
	mov	ecx, DWORD PTR i$13[rbp]
	mov	BYTE PTR [rax+rcx], 0
	jmp	SHORT $LN11@ImFontAtla
$LN12@ImFontAtla:
; Line 2733
	jmp	$LN25@ImFontAtla
$LN24@ImFontAtla:
; Line 2736
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	add	ecx, DWORD PTR y$6[rbp]
	mov	rdx, QWORD PTR atlas$[rbp]
	imul	ecx, DWORD PTR [rdx+48]
	add	eax, ecx
	mov	eax, eax
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR write_ptr$14[rbp], rax
; Line 2737
	mov	DWORD PTR i$15[rbp], 0
	jmp	SHORT $LN16@ImFontAtla
$LN14@ImFontAtla:
	mov	eax, DWORD PTR i$15[rbp]
	inc	eax
	mov	DWORD PTR i$15[rbp], eax
$LN16@ImFontAtla:
	mov	eax, DWORD PTR pad_left$8[rbp]
	cmp	DWORD PTR i$15[rbp], eax
	jae	SHORT $LN15@ImFontAtla
; Line 2738
	mov	eax, DWORD PTR i$15[rbp]
	mov	rcx, QWORD PTR write_ptr$14[rbp]
	mov	DWORD PTR [rcx+rax*4], 0
	jmp	SHORT $LN14@ImFontAtla
$LN15@ImFontAtla:
; Line 2740
	mov	DWORD PTR i$16[rbp], 0
	jmp	SHORT $LN19@ImFontAtla
$LN17@ImFontAtla:
	mov	eax, DWORD PTR i$16[rbp]
	inc	eax
	mov	DWORD PTR i$16[rbp], eax
$LN19@ImFontAtla:
	mov	eax, DWORD PTR line_width$7[rbp]
	cmp	DWORD PTR i$16[rbp], eax
	jae	SHORT $LN18@ImFontAtla
; Line 2741
	mov	eax, DWORD PTR pad_left$8[rbp]
	mov	rcx, QWORD PTR write_ptr$14[rbp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR i$16[rbp]
	mov	DWORD PTR [rax+rcx*4], -1		; ffffffffH
	jmp	SHORT $LN17@ImFontAtla
$LN18@ImFontAtla:
; Line 2743
	mov	DWORD PTR i$17[rbp], 0
	jmp	SHORT $LN22@ImFontAtla
$LN20@ImFontAtla:
	mov	eax, DWORD PTR i$17[rbp]
	inc	eax
	mov	DWORD PTR i$17[rbp], eax
$LN22@ImFontAtla:
	mov	eax, DWORD PTR pad_right$9[rbp]
	cmp	DWORD PTR i$17[rbp], eax
	jae	SHORT $LN21@ImFontAtla
; Line 2744
	mov	eax, DWORD PTR pad_left$8[rbp]
	mov	rcx, QWORD PTR write_ptr$14[rbp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR line_width$7[rbp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	ecx, DWORD PTR i$17[rbp]
	mov	DWORD PTR [rax+rcx*4], 0
	jmp	SHORT $LN20@ImFontAtla
$LN21@ImFontAtla:
$LN25@ImFontAtla:
; Line 2748
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv204[rbp], rax
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	add	ecx, DWORD PTR y$6[rbp]
	mov	ecx, ecx
	cvtsi2ss xmm0, rcx
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	edx, DWORD PTR pad_left$8[rbp]
	lea	ecx, DWORD PTR [rcx+rdx-1]
	mov	ecx, ecx
	cvtsi2ss xmm1, rcx
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR tv204[rbp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR uv0$18[rbp]
	call	??D@YA?AUImVec2@@AEBU0@0@Z		; operator*
; Line 2749
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv221[rbp], rax
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	mov	edx, DWORD PTR y$6[rbp]
	lea	ecx, DWORD PTR [rcx+rdx+1]
	mov	ecx, ecx
	cvtsi2ss xmm0, rcx
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	add	ecx, DWORD PTR pad_left$8[rbp]
	mov	edx, DWORD PTR line_width$7[rbp]
	lea	ecx, DWORD PTR [rcx+rdx+1]
	mov	ecx, ecx
	cvtsi2ss xmm1, rcx
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rcx, QWORD PTR tv221[rbp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR uv1$19[rbp]
	call	??D@YA?AUImVec2@@AEBU0@0@Z		; operator*
; Line 2750
	movss	xmm0, DWORD PTR uv0$18[rbp+4]
	addss	xmm0, DWORD PTR uv1$19[rbp+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR half_v$20[rbp], xmm0
; Line 2751
	movss	xmm0, DWORD PTR half_v$20[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR uv1$19[rbp]
	movss	xmm2, DWORD PTR half_v$20[rbp]
	movss	xmm1, DWORD PTR uv0$18[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, DWORD PTR n$5[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR atlas$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx+120]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 2752
	jmp	$LN2@ImFontAtla
$LN3@ImFontAtla:
$LN1@ImFontAtla:
; Line 2753
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1056]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z ENDP ; ImFontAtlasBuildRenderLinesTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
r$ = 8
w$ = 36
x_for_white$1 = 68
x_for_black$2 = 100
offset$3 = 132
$T4 = 356
atlas$ = 416
?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z PROC ; ImFontAtlasBuildRenderDefaultTexData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2665
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 456				; 000001c8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2666
	mov	rax, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR [rax+1156]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
	mov	QWORD PTR r$[rbp], rax
; Line 2667
	mov	rcx, QWORD PTR r$[rbp]
	call	?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ; ImFontAtlasCustomRect::IsPacked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BM@DDBMCGAE@?$AAr?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI?$AA?$CJ@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@ImFontAtla:
; Line 2669
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+48]
	mov	DWORD PTR w$[rbp], eax
; Line 2670
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 2
	test	eax, eax
	jne	$LN2@ImFontAtla
; Line 2673
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 217				; 000000d9H
	jne	SHORT $LN10@ImFontAtla
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+2]
	cmp	eax, 27
	je	SHORT $LN11@ImFontAtla
$LN10@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1MA@PDHEAINP@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAF?$AAO?$AAN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@ImFontAtla:
; Line 2674
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	DWORD PTR x_for_white$1[rbp], eax
; Line 2675
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	add	eax, 109				; 0000006dH
	mov	DWORD PTR x_for_black$2[rbp], eax
; Line 2676
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+32], 0
	je	$LN4@ImFontAtla
; Line 2678
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	BYTE PTR [rsp+56], 255			; 000000ffH
	mov	BYTE PTR [rsp+48], 46			; 0000002eH
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 27
	mov	r9d, 108				; 0000006cH
	mov	r8d, eax
	mov	edx, DWORD PTR x_for_white$1[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ; ImFontAtlasBuildRender8bppRectFromString
; Line 2679
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	BYTE PTR [rsp+56], 255			; 000000ffH
	mov	BYTE PTR [rsp+48], 88			; 00000058H
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 27
	mov	r9d, 108				; 0000006cH
	mov	r8d, eax
	mov	edx, DWORD PTR x_for_black$2[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ; ImFontAtlasBuildRender8bppRectFromString
; Line 2680
	jmp	$LN5@ImFontAtla
$LN4@ImFontAtla:
; Line 2683
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	DWORD PTR [rsp+56], -1			; ffffffffH
	mov	BYTE PTR [rsp+48], 46			; 0000002eH
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 27
	mov	r9d, 108				; 0000006cH
	mov	r8d, eax
	mov	edx, DWORD PTR x_for_white$1[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ; ImFontAtlasBuildRender32bppRectFromString
; Line 2684
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	DWORD PTR [rsp+56], -1			; ffffffffH
	mov	BYTE PTR [rsp+48], 88			; 00000058H
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS@@3QBDB
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 27
	mov	r9d, 108				; 0000006cH
	mov	r8d, eax
	mov	edx, DWORD PTR x_for_black$2[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ; ImFontAtlasBuildRender32bppRectFromString
$LN5@ImFontAtla:
; Line 2686
	jmp	$LN3@ImFontAtla
$LN2@ImFontAtla:
; Line 2690
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, 2
	jne	SHORT $LN12@ImFontAtla
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+2]
	cmp	eax, 2
	je	SHORT $LN13@ImFontAtla
$LN12@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 25
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EA@DBHHBIED@?$AAr?$AA?9?$AA?$DO?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA2?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@ImFontAtla:
; Line 2691
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR r$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	imul	ecx, DWORD PTR w$[rbp]
	add	eax, ecx
	mov	DWORD PTR offset$3[rbp], eax
; Line 2692
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@ImFontAtla
; Line 2694
	mov	eax, DWORD PTR offset$3[rbp]
	mov	ecx, DWORD PTR w$[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR w$[rbp]
	mov	ecx, DWORD PTR offset$3[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR offset$3[rbp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR offset$3[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 2695
	jmp	SHORT $LN7@ImFontAtla
$LN6@ImFontAtla:
; Line 2698
	mov	eax, DWORD PTR offset$3[rbp]
	mov	ecx, DWORD PTR w$[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	DWORD PTR [rcx+rax*4], -1		; ffffffffH
	mov	eax, DWORD PTR w$[rbp]
	mov	ecx, DWORD PTR offset$3[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	DWORD PTR [rcx+rax*4], -1		; ffffffffH
	mov	eax, DWORD PTR offset$3[rbp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	DWORD PTR [rcx+rax*4], -1		; ffffffffH
	movsxd	rax, DWORD PTR offset$3[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	DWORD PTR [rcx+rax*4], -1		; ffffffffH
$LN7@ImFontAtla:
$LN3@ImFontAtla:
; Line 2701
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR atlas$[rbp]
	mulss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm1, eax
	addss	xmm1, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR atlas$[rbp]
	mulss	xmm1, DWORD PTR [rax+56]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rcx+64], rax
; Line 2702
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z ENDP ; ImFontAtlasBuildRenderDefaultTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z PROC	; ImVector<stbtt_packedchar>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 28
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ENDP	; ImVector<stbtt_packedchar>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z PROC	; ImVector<stbtt_packedchar>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z ; ImVector<stbtt_packedchar>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ENDP	; ImVector<stbtt_packedchar>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z PROC ; ImVector<stbtt_packedchar>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@Ustbtt_packedchar@@@@QEBAHH@Z ENDP ; ImVector<stbtt_packedchar>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z PROC ; ImVector<stbtt_packedchar>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z ENDP ; ImVector<stbtt_packedchar>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ PROC ; ImVector<stbtt_packedchar>::size_in_bytes, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1691
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	imul	eax, DWORD PTR [rax], 28
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ ENDP ; ImVector<stbtt_packedchar>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ PROC		; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ENDP		; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ PROC		; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ENDP		; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z PROC	; ImVector<stbrp_rect>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 16
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ENDP	; ImVector<stbrp_rect>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z PROC		; ImVector<stbrp_rect>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z ; ImVector<stbrp_rect>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ; ImVector<stbrp_rect>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ENDP		; ImVector<stbrp_rect>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z PROC	; ImVector<stbrp_rect>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@Ustbrp_rect@@@@QEBAHH@Z ENDP	; ImVector<stbrp_rect>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z PROC ; ImVector<stbrp_rect>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ENDP ; ImVector<stbrp_rect>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ PROC	; ImVector<stbrp_rect>::size_in_bytes, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1691
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	imul	eax, DWORD PTR [rax], 16
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ENDP	; ImVector<stbrp_rect>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ PROC		; ImVector<stbrp_rect>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ ENDP		; ImVector<stbrp_rect>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ PROC		; ImVector<stbrp_rect>::~ImVector<stbrp_rect>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ ENDP		; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ PROC		; ImVector<stbrp_rect>::ImVector<stbrp_rect>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ ENDP		; ImVector<stbrp_rect>::ImVector<stbrp_rect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z PROC ; ImVector<ImFontBuildDstData>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ENDP ; ImVector<ImFontBuildDstData>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z PROC	; ImVector<ImFontBuildDstData>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z ; ImVector<ImFontBuildDstData>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ENDP	; ImVector<ImFontBuildDstData>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z PROC ; ImVector<ImFontBuildDstData>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImFontBuildDstData@@@@QEBAHH@Z ENDP ; ImVector<ImFontBuildDstData>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z PROC ; ImVector<ImFontBuildDstData>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ENDP ; ImVector<ImFontBuildDstData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ PROC ; ImVector<ImFontBuildDstData>::size_in_bytes, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1691
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	imul	eax, DWORD PTR [rax], 32		; 00000020H
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ ENDP ; ImVector<ImFontBuildDstData>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ PROC	; ImVector<ImFontBuildDstData>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ ENDP	; ImVector<ImFontBuildDstData>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z PROC ; ImVector<ImFontBuildSrcData>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 272				; 00000110H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 272				; 00000110H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ENDP ; ImVector<ImFontBuildSrcData>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z PROC	; ImVector<ImFontBuildSrcData>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z ; ImVector<ImFontBuildSrcData>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ENDP	; ImVector<ImFontBuildSrcData>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z PROC ; ImVector<ImFontBuildSrcData>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImFontBuildSrcData@@@@QEBAHH@Z ENDP ; ImVector<ImFontBuildSrcData>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z PROC ; ImVector<ImFontBuildSrcData>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 272				; 00000110H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ENDP ; ImVector<ImFontBuildSrcData>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ
_TEXT	SEGMENT
this$ = 224
?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ PROC ; ImVector<ImFontBuildSrcData>::size_in_bytes, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1691
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	imul	eax, DWORD PTR [rax], 272		; 00000110H
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ ENDP ; ImVector<ImFontBuildSrcData>::size_in_bytes
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
_TEXT	SEGMENT
n$1 = 4
tv75 = 216
this$ = 256
?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ PROC ; ImVector<ImFontBuildSrcData>::clear_destruct, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1687
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@clear_dest
$LN2@clear_dest:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@clear_dest:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@clear_dest
	movsxd	rax, DWORD PTR n$1[rbp]
	imul	rax, rax, 272				; 00000110H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR tv75[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv75[rbp]
	call	??_GImFontBuildSrcData@@QEAAPEAXI@Z
	jmp	SHORT $LN2@clear_dest
$LN3@clear_dest:
	mov	rcx, QWORD PTR this$[rbp]
	call	?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ENDP ; ImVector<ImFontBuildSrcData>::clear_destruct
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ PROC	; ImVector<ImFontBuildSrcData>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ENDP	; ImVector<ImFontBuildSrcData>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ PROC	; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ENDP	; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
tv803 = 3796
tv794 = 3796
tv647 = 3796
tv583 = 3796
tv489 = 3796
tv830 = 3800
tv777 = 3800
tv685 = 3800
tv672 = 3800
tv582 = 3800
tv501 = 3800
tv453 = 3800
tv426 = 3800
tv419 = 3800
tv349 = 3800
tv337 = 3800
tv332 = 3800
tv312 = 3800
tv288 = 3800
tv275 = 3800
tv231 = 3800
tv190 = 3800
tv161 = 3800
tv146 = 3800
tv139 = 3800
tv581 = 3804
__$ArrayPad$ = 3808
atlas$ = 3856
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z PROC ; ImFontAtlasBuildWithStbTruetype, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2342
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 3928				; 00000f58H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 670				; 0000029eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+3960]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2343
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	DWORD PTR [rax+104], 0
	jg	SHORT $LN66@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@BBHAKCJP@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAf?$AAi?$AAg?$AAD?$AAa@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN66@ImFontAtla:
; Line 2345
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildInit
; Line 2348
	mov	rax, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rax+8], 0
; Line 2349
	mov	rax, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rax+52], 0
	mov	rax, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rax+48], 0
; Line 2350
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T72[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rcx+56], rax
; Line 2351
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T73[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rcx+64], rax
; Line 2352
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ClearTexData@ImFontAtlas@@QEAAXXZ	; ImFontAtlas::ClearTexData
; Line 2355
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??0?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::ImVector<ImFontBuildSrcData>
	npad	1
; Line 2356
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??0?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::ImVector<ImFontBuildDstData>
	npad	1
; Line 2357
	mov	rax, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR [rax+104]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	?resize@?$ImVector@UImFontBuildSrcData@@@@QEAAXH@Z ; ImVector<ImFontBuildSrcData>::resize
; Line 2358
	mov	rax, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR [rax+72]
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	?resize@?$ImVector@UImFontBuildDstData@@@@QEAAXH@Z ; ImVector<ImFontBuildDstData>::resize
; Line 2359
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	?size_in_bytes@?$ImVector@UImFontBuildSrcData@@@@QEBAHXZ ; ImVector<ImFontBuildSrcData>::size_in_bytes
	cdqe
	mov	QWORD PTR tv139[rbp], rax
	mov	rdi, QWORD PTR src_tmp_array$[rbp+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv139[rbp]
	rep stosb
; Line 2360
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	?size_in_bytes@?$ImVector@UImFontBuildDstData@@@@QEBAHXZ ; ImVector<ImFontBuildDstData>::size_in_bytes
	cdqe
	mov	QWORD PTR tv146[rbp], rax
	mov	rdi, QWORD PTR dst_tmp_array$[rbp+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv146[rbp]
	rep stosb
; Line 2363
	mov	DWORD PTR src_i$19[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR src_i$19[rbp]
	inc	eax
	mov	DWORD PTR src_i$19[rbp], eax
$LN4@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+104]
	cmp	DWORD PTR src_i$19[rbp], eax
	jge	$LN3@ImFontAtla
; Line 2365
	mov	edx, DWORD PTR src_i$19[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$20[rbp], rax
; Line 2366
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv161[rbp], rax
	mov	edx, DWORD PTR src_i$19[rbp]
	mov	rcx, QWORD PTR tv161[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	mov	QWORD PTR cfg$21[rbp], rax
; Line 2367
	mov	rax, QWORD PTR cfg$21[rbp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN68@ImFontAtla
	mov	rax, QWORD PTR cfg$21[rbp]
	mov	rcx, QWORD PTR [rax+128]
	call	?IsLoaded@ImFont@@QEBA_NXZ		; ImFont::IsLoaded
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN67@ImFontAtla
	mov	rax, QWORD PTR cfg$21[rbp]
	mov	rax, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+64], rcx
	je	SHORT $LN67@ImFontAtla
$LN68@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
	add	eax, 25
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1KE@NPGLPIC@?$AAc?$AAf?$AAg?$AA?4?$AAD?$AAs?$AAt?$AAF?$AAo?$AAn?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN67@ImFontAtla:
; Line 2370
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	DWORD PTR [rax+224], -1
; Line 2371
	mov	DWORD PTR output_i$22[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR output_i$22[rbp]
	inc	eax
	mov	DWORD PTR output_i$22[rbp], eax
$LN7@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+72]
	cmp	DWORD PTR output_i$22[rbp], eax
	jge	SHORT $LN6@ImFontAtla
	mov	rax, QWORD PTR src_tmp$20[rbp]
	cmp	DWORD PTR [rax+224], -1
	jne	SHORT $LN6@ImFontAtla
; Line 2372
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv190[rbp], rax
	mov	edx, DWORD PTR output_i$22[rbp]
	mov	rcx, QWORD PTR tv190[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rcx, QWORD PTR cfg$21[rbp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR [rcx+128], rax
	jne	SHORT $LN50@ImFontAtla
; Line 2373
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	ecx, DWORD PTR output_i$22[rbp]
	mov	DWORD PTR [rax+224], ecx
$LN50@ImFontAtla:
	jmp	SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
; Line 2374
	mov	rax, QWORD PTR src_tmp$20[rbp]
	cmp	DWORD PTR [rax+224], -1
	jne	SHORT $LN51@ImFontAtla
; Line 2376
	mov	rax, QWORD PTR src_tmp$20[rbp]
	cmp	DWORD PTR [rax+224], -1
	jne	SHORT $LN69@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
	add	eax, 34					; 00000022H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CO@NKKOCLPN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAD?$AAs?$AAt?$AAI?$AAn?$AAd?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN69@ImFontAtla:
; Line 2377
	mov	BYTE PTR $T74[rbp], 0
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
	npad	1
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
	movzx	eax, BYTE PTR $T74[rbp]
	jmp	$LN1@ImFontAtla
$LN51@ImFontAtla:
; Line 2380
	mov	rax, QWORD PTR cfg$21[rbp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR cfg$21[rbp]
	mov	rcx, QWORD PTR [rax]
	call	stbtt_GetFontOffsetForIndex
	mov	DWORD PTR font_offset$23[rbp], eax
; Line 2381
	cmp	DWORD PTR font_offset$23[rbp], 0
	jl	SHORT $LN70@ImFontAtla
	lea	rax, OFFSET FLAT:??_C@_0DC@IFELKFNN@FontData?5is?5incorrect?0?5or?5FontN@
	test	rax, rax
	jne	SHORT $LN71@ImFontAtla
$LN70@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
	add	eax, 39					; 00000027H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JA@MENENCJI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN71@ImFontAtla:
; Line 2382
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	r8d, DWORD PTR font_offset$23[rbp]
	mov	rcx, QWORD PTR cfg$21[rbp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, rax
	call	stbtt_InitFont
	test	eax, eax
	jne	SHORT $LN52@ImFontAtla
; Line 2383
	mov	BYTE PTR $T75[rbp], 0
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
	npad	1
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
	movzx	eax, BYTE PTR $T75[rbp]
	jmp	$LN1@ImFontAtla
$LN52@ImFontAtla:
; Line 2386
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	edx, DWORD PTR [rax+224]
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
	mov	QWORD PTR dst_tmp$24[rbp], rax
; Line 2387
	mov	rax, QWORD PTR cfg$21[rbp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN72@ImFontAtla
	mov	rax, QWORD PTR cfg$21[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv231[rbp], rax
	jmp	SHORT $LN73@ImFontAtla
$LN72@ImFontAtla:
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesDefault
	mov	QWORD PTR tv231[rbp], rax
$LN73@ImFontAtla:
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	rcx, QWORD PTR tv231[rbp]
	mov	QWORD PTR [rax+216], rcx
; Line 2388
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR src_range$25[rbp], rax
	jmp	SHORT $LN10@ImFontAtla
$LN8@ImFontAtla:
	mov	rax, QWORD PTR src_range$25[rbp]
	add	rax, 4
	mov	QWORD PTR src_range$25[rbp], rax
$LN10@ImFontAtla:
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR src_range$25[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN9@ImFontAtla
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR src_range$25[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN9@ImFontAtla
; Line 2389
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR src_range$25[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	edx, eax
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	ecx, DWORD PTR [rax+228]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	rcx, QWORD PTR src_tmp$20[rbp]
	mov	DWORD PTR [rcx+228], eax
	jmp	SHORT $LN8@ImFontAtla
$LN9@ImFontAtla:
; Line 2390
	mov	rax, QWORD PTR dst_tmp$24[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR dst_tmp$24[rbp]
	mov	DWORD PTR [rcx], eax
; Line 2391
	mov	rax, QWORD PTR src_tmp$20[rbp]
	mov	edx, DWORD PTR [rax+228]
	mov	rax, QWORD PTR dst_tmp$24[rbp]
	mov	ecx, DWORD PTR [rax+4]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	rcx, QWORD PTR dst_tmp$24[rbp]
	mov	DWORD PTR [rcx+4], eax
; Line 2392
	jmp	$LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2395
	mov	DWORD PTR total_glyphs_count$[rbp], 0
; Line 2396
	mov	DWORD PTR src_i$26[rbp], 0
	jmp	SHORT $LN13@ImFontAtla
$LN11@ImFontAtla:
	mov	eax, DWORD PTR src_i$26[rbp]
	inc	eax
	mov	DWORD PTR src_i$26[rbp], eax
$LN13@ImFontAtla:
	mov	eax, DWORD PTR src_tmp_array$[rbp]
	cmp	DWORD PTR src_i$26[rbp], eax
	jge	$LN12@ImFontAtla
; Line 2398
	mov	edx, DWORD PTR src_i$26[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$27[rbp], rax
; Line 2399
	mov	rax, QWORD PTR src_tmp$27[rbp]
	mov	edx, DWORD PTR [rax+224]
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
	mov	QWORD PTR dst_tmp$28[rbp], rax
; Line 2400
	mov	rax, QWORD PTR src_tmp$27[rbp]
	add	rax, 240				; 000000f0H
	mov	QWORD PTR tv275[rbp], rax
	mov	rax, QWORD PTR src_tmp$27[rbp]
	mov	eax, DWORD PTR [rax+228]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv275[rbp]
	call	?Create@ImBitVector@@QEAAXH@Z		; ImBitVector::Create
; Line 2401
	mov	rax, QWORD PTR dst_tmp$28[rbp]
	add	rax, 16
	mov	rcx, rax
	call	?empty@?$ImVector@I@@QEBA_NXZ		; ImVector<unsigned int>::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN53@ImFontAtla
; Line 2402
	mov	rax, QWORD PTR dst_tmp$28[rbp]
	add	rax, 16
	mov	QWORD PTR tv288[rbp], rax
	mov	rax, QWORD PTR dst_tmp$28[rbp]
	mov	eax, DWORD PTR [rax+4]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv288[rbp]
	call	?Create@ImBitVector@@QEAAXH@Z		; ImBitVector::Create
$LN53@ImFontAtla:
; Line 2404
	mov	rax, QWORD PTR src_tmp$27[rbp]
	mov	rax, QWORD PTR [rax+216]
	mov	QWORD PTR src_range$29[rbp], rax
	jmp	SHORT $LN16@ImFontAtla
$LN14@ImFontAtla:
	mov	rax, QWORD PTR src_range$29[rbp]
	add	rax, 4
	mov	QWORD PTR src_range$29[rbp], rax
$LN16@ImFontAtla:
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR src_range$29[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN15@ImFontAtla
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR src_range$29[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN15@ImFontAtla
; Line 2405
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR src_range$29[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR codepoint$30[rbp], eax
	jmp	SHORT $LN19@ImFontAtla
$LN17@ImFontAtla:
	mov	eax, DWORD PTR codepoint$30[rbp]
	inc	eax
	mov	DWORD PTR codepoint$30[rbp], eax
$LN19@ImFontAtla:
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR src_range$29[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	DWORD PTR codepoint$30[rbp], eax
	ja	$LN18@ImFontAtla
; Line 2407
	mov	rax, QWORD PTR dst_tmp$28[rbp]
	add	rax, 16
	mov	QWORD PTR tv312[rbp], rax
	mov	edx, DWORD PTR codepoint$30[rbp]
	mov	rcx, QWORD PTR tv312[rbp]
	call	?TestBit@ImBitVector@@QEBA_NH@Z		; ImBitVector::TestBit
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN54@ImFontAtla
; Line 2408
	jmp	SHORT $LN17@ImFontAtla
$LN54@ImFontAtla:
; Line 2409
	mov	rax, QWORD PTR src_tmp$27[rbp]
	mov	edx, DWORD PTR codepoint$30[rbp]
	mov	rcx, rax
	call	stbtt_FindGlyphIndex
	test	eax, eax
	jne	SHORT $LN55@ImFontAtla
; Line 2410
	jmp	SHORT $LN17@ImFontAtla
$LN55@ImFontAtla:
; Line 2413
	mov	rax, QWORD PTR src_tmp$27[rbp]
	mov	eax, DWORD PTR [rax+232]
	inc	eax
	mov	rcx, QWORD PTR src_tmp$27[rbp]
	mov	DWORD PTR [rcx+232], eax
; Line 2414
	mov	rax, QWORD PTR dst_tmp$28[rbp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR dst_tmp$28[rbp]
	mov	DWORD PTR [rcx+8], eax
; Line 2415
	mov	rax, QWORD PTR src_tmp$27[rbp]
	add	rax, 240				; 000000f0H
	mov	QWORD PTR tv332[rbp], rax
	mov	edx, DWORD PTR codepoint$30[rbp]
	mov	rcx, QWORD PTR tv332[rbp]
	call	?SetBit@ImBitVector@@QEAAXH@Z		; ImBitVector::SetBit
; Line 2416
	mov	rax, QWORD PTR dst_tmp$28[rbp]
	add	rax, 16
	mov	QWORD PTR tv337[rbp], rax
	mov	edx, DWORD PTR codepoint$30[rbp]
	mov	rcx, QWORD PTR tv337[rbp]
	call	?SetBit@ImBitVector@@QEAAXH@Z		; ImBitVector::SetBit
; Line 2417
	mov	eax, DWORD PTR total_glyphs_count$[rbp]
	inc	eax
	mov	DWORD PTR total_glyphs_count$[rbp], eax
; Line 2418
	jmp	$LN17@ImFontAtla
$LN18@ImFontAtla:
	jmp	$LN14@ImFontAtla
$LN15@ImFontAtla:
; Line 2419
	jmp	$LN11@ImFontAtla
$LN12@ImFontAtla:
; Line 2422
	mov	DWORD PTR src_i$31[rbp], 0
	jmp	SHORT $LN22@ImFontAtla
$LN20@ImFontAtla:
	mov	eax, DWORD PTR src_i$31[rbp]
	inc	eax
	mov	DWORD PTR src_i$31[rbp], eax
$LN22@ImFontAtla:
	mov	eax, DWORD PTR src_tmp_array$[rbp]
	cmp	DWORD PTR src_i$31[rbp], eax
	jge	$LN21@ImFontAtla
; Line 2424
	mov	edx, DWORD PTR src_i$31[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$32[rbp], rax
; Line 2425
	mov	rax, QWORD PTR src_tmp$32[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR tv349[rbp], rax
	mov	rax, QWORD PTR src_tmp$32[rbp]
	mov	edx, DWORD PTR [rax+232]
	mov	rcx, QWORD PTR tv349[rbp]
	call	?reserve@?$ImVector@H@@QEAAXH@Z		; ImVector<int>::reserve
; Line 2426
	mov	rax, QWORD PTR src_tmp$32[rbp]
	add	rax, 256				; 00000100H
	mov	rcx, QWORD PTR src_tmp$32[rbp]
	add	rcx, 240				; 000000f0H
	mov	rdx, rax
	call	?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z ; UnpackBitVectorToFlatIndexList
; Line 2427
	mov	rax, QWORD PTR src_tmp$32[rbp]
	add	rax, 240				; 000000f0H
	mov	rcx, rax
	call	?Clear@ImBitVector@@QEAAXXZ		; ImBitVector::Clear
; Line 2428
	mov	rax, QWORD PTR src_tmp$32[rbp]
	mov	rcx, QWORD PTR src_tmp$32[rbp]
	mov	ecx, DWORD PTR [rcx+232]
	cmp	DWORD PTR [rax+256], ecx
	je	SHORT $LN74@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
	add	eax, 86					; 00000056H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FO@GJGKHCEN@?$AAs?$AAr?$AAc?$AA_?$AAt?$AAm?$AAp?$AA?4?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AAL@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN74@ImFontAtla:
; Line 2429
	jmp	$LN20@ImFontAtla
$LN21@ImFontAtla:
; Line 2430
	mov	DWORD PTR dst_i$33[rbp], 0
	jmp	SHORT $LN25@ImFontAtla
$LN23@ImFontAtla:
	mov	eax, DWORD PTR dst_i$33[rbp]
	inc	eax
	mov	DWORD PTR dst_i$33[rbp], eax
$LN25@ImFontAtla:
	mov	eax, DWORD PTR dst_tmp_array$[rbp]
	cmp	DWORD PTR dst_i$33[rbp], eax
	jge	SHORT $LN24@ImFontAtla
; Line 2431
	mov	edx, DWORD PTR dst_i$33[rbp]
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildDstData@@@@QEAAAEAUImFontBuildDstData@@H@Z ; ImVector<ImFontBuildDstData>::operator[]
	add	rax, 16
	mov	rcx, rax
	call	?Clear@ImBitVector@@QEAAXXZ		; ImBitVector::Clear
	jmp	SHORT $LN23@ImFontAtla
$LN24@ImFontAtla:
; Line 2432
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	?clear@?$ImVector@UImFontBuildDstData@@@@QEAAXXZ ; ImVector<ImFontBuildDstData>::clear
; Line 2436
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ	; ImVector<stbrp_rect>::ImVector<stbrp_rect>
	npad	1
; Line 2437
	lea	rcx, QWORD PTR buf_packedchars$[rbp]
	call	??0?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::ImVector<stbtt_packedchar>
	npad	1
; Line 2438
	mov	edx, DWORD PTR total_glyphs_count$[rbp]
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ; ImVector<stbrp_rect>::resize
; Line 2439
	mov	edx, DWORD PTR total_glyphs_count$[rbp]
	lea	rcx, QWORD PTR buf_packedchars$[rbp]
	call	?resize@?$ImVector@Ustbtt_packedchar@@@@QEAAXH@Z ; ImVector<stbtt_packedchar>::resize
; Line 2440
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ; ImVector<stbrp_rect>::size_in_bytes
	cdqe
	mov	QWORD PTR tv419[rbp], rax
	mov	rdi, QWORD PTR buf_rects$[rbp+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv419[rbp]
	rep stosb
; Line 2441
	lea	rcx, QWORD PTR buf_packedchars$[rbp]
	call	?size_in_bytes@?$ImVector@Ustbtt_packedchar@@@@QEBAHXZ ; ImVector<stbtt_packedchar>::size_in_bytes
	cdqe
	mov	QWORD PTR tv426[rbp], rax
	mov	rdi, QWORD PTR buf_packedchars$[rbp+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv426[rbp]
	rep stosb
; Line 2444
	mov	DWORD PTR total_surface$[rbp], 0
; Line 2445
	mov	DWORD PTR buf_rects_out_n$[rbp], 0
; Line 2446
	mov	DWORD PTR buf_packedchars_out_n$[rbp], 0
; Line 2447
	mov	DWORD PTR src_i$34[rbp], 0
	jmp	SHORT $LN28@ImFontAtla
$LN26@ImFontAtla:
	mov	eax, DWORD PTR src_i$34[rbp]
	inc	eax
	mov	DWORD PTR src_i$34[rbp], eax
$LN28@ImFontAtla:
	mov	eax, DWORD PTR src_tmp_array$[rbp]
	cmp	DWORD PTR src_i$34[rbp], eax
	jge	$LN27@ImFontAtla
; Line 2449
	mov	edx, DWORD PTR src_i$34[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$35[rbp], rax
; Line 2450
	mov	rax, QWORD PTR src_tmp$35[rbp]
	cmp	DWORD PTR [rax+232], 0
	jne	SHORT $LN56@ImFontAtla
; Line 2451
	jmp	SHORT $LN26@ImFontAtla
$LN56@ImFontAtla:
; Line 2453
	mov	edx, DWORD PTR buf_rects_out_n$[rbp]
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	QWORD PTR [rcx+200], rax
; Line 2454
	mov	edx, DWORD PTR buf_packedchars_out_n$[rbp]
	lea	rcx, QWORD PTR buf_packedchars$[rbp]
	call	??A?$ImVector@Ustbtt_packedchar@@@@QEAAAEAUstbtt_packedchar@@H@Z ; ImVector<stbtt_packedchar>::operator[]
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	QWORD PTR [rcx+208], rax
; Line 2455
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	eax, DWORD PTR [rax+232]
	mov	ecx, DWORD PTR buf_rects_out_n$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_rects_out_n$[rbp], eax
; Line 2456
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	eax, DWORD PTR [rax+232]
	mov	ecx, DWORD PTR buf_packedchars_out_n$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR buf_packedchars_out_n$[rbp], eax
; Line 2459
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv453[rbp], rax
	mov	edx, DWORD PTR src_i$34[rbp]
	mov	rcx, QWORD PTR tv453[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	mov	QWORD PTR cfg$36[rbp], rax
; Line 2460
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR cfg$36[rbp]
	movss	xmm0, DWORD PTR [rcx+20]
	movss	DWORD PTR [rax+160], xmm0
; Line 2461
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	DWORD PTR [rax+164], 0
; Line 2462
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR [rcx+264]
	mov	QWORD PTR [rax+168], rcx
; Line 2463
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	ecx, DWORD PTR [rcx+256]
	mov	DWORD PTR [rax+176], ecx
; Line 2464
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	QWORD PTR [rax+184], rcx
; Line 2465
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR cfg$36[rbp]
	movzx	ecx, BYTE PTR [rcx+24]
	mov	BYTE PTR [rax+192], cl
; Line 2466
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR cfg$36[rbp]
	movzx	ecx, BYTE PTR [rcx+28]
	mov	BYTE PTR [rax+193], cl
; Line 2469
	mov	rax, QWORD PTR cfg$36[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN75@ImFontAtla
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR cfg$36[rbp]
	movss	xmm1, DWORD PTR [rcx+20]
	mov	rcx, rax
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv489[rbp], xmm0
	jmp	SHORT $LN76@ImFontAtla
$LN75@ImFontAtla:
	mov	rax, QWORD PTR cfg$36[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR src_tmp$35[rbp]
	movaps	xmm1, xmm0
	mov	rcx, rax
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv489[rbp], xmm0
$LN76@ImFontAtla:
	movss	xmm0, DWORD PTR tv489[rbp]
	movss	DWORD PTR scale$37[rbp], xmm0
; Line 2470
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR padding$38[rbp], eax
; Line 2471
	mov	DWORD PTR glyph_i$39[rbp], 0
	jmp	SHORT $LN31@ImFontAtla
$LN29@ImFontAtla:
	mov	eax, DWORD PTR glyph_i$39[rbp]
	inc	eax
	mov	DWORD PTR glyph_i$39[rbp], eax
$LN31@ImFontAtla:
	mov	rax, QWORD PTR src_tmp$35[rbp]
	mov	eax, DWORD PTR [rax+256]
	cmp	DWORD PTR glyph_i$39[rbp], eax
	jge	$LN30@ImFontAtla
; Line 2474
	mov	rax, QWORD PTR src_tmp$35[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR tv501[rbp], rax
	mov	edx, DWORD PTR glyph_i$39[rbp]
	mov	rcx, QWORD PTR tv501[rbp]
	call	??A?$ImVector@H@@QEAAAEAHH@Z		; ImVector<int>::operator[]
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	edx, DWORD PTR [rax]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph_index_in_font$44[rbp], eax
; Line 2475
	cmp	DWORD PTR glyph_index_in_font$44[rbp], 0
	jne	SHORT $LN77@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4JA
	add	eax, 133				; 00000085H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@ENBGOGEF@?$AAg?$AAl?$AAy?$AAp?$AAh?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA_?$AAi?$AAn?$AA_@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN77@ImFontAtla:
; Line 2476
	mov	rax, QWORD PTR cfg$36[rbp]
	cvtsi2ss xmm0, DWORD PTR [rax+28]
	movss	xmm1, DWORD PTR scale$37[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR cfg$36[rbp]
	cvtsi2ss xmm1, DWORD PTR [rax+24]
	movss	xmm2, DWORD PTR scale$37[rbp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR src_tmp$35[rbp]
	lea	rcx, QWORD PTR y1$43[rbp]
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR x1$42[rbp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, QWORD PTR y0$41[rbp]
	mov	QWORD PTR [rsp+56], rcx
	lea	rcx, QWORD PTR x0$40[rbp]
	mov	QWORD PTR [rsp+48], rcx
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+40], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+32], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph_index_in_font$44[rbp]
	mov	rcx, rax
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2477
	mov	eax, DWORD PTR x0$40[rbp]
	mov	ecx, DWORD PTR x1$42[rbp]
	sub	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR padding$38[rbp]
	mov	rcx, QWORD PTR cfg$36[rbp]
	mov	ecx, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR glyph_i$39[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR src_tmp$35[rbp]
	mov	rdx, QWORD PTR [rdx+200]
	mov	WORD PTR [rdx+rcx+4], ax
; Line 2478
	mov	eax, DWORD PTR y0$41[rbp]
	mov	ecx, DWORD PTR y1$43[rbp]
	sub	ecx, eax
	mov	eax, ecx
	add	eax, DWORD PTR padding$38[rbp]
	mov	rcx, QWORD PTR cfg$36[rbp]
	mov	ecx, DWORD PTR [rcx+28]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR glyph_i$39[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR src_tmp$35[rbp]
	mov	rdx, QWORD PTR [rdx+200]
	mov	WORD PTR [rdx+rcx+6], ax
; Line 2479
	movsxd	rax, DWORD PTR glyph_i$39[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR src_tmp$35[rbp]
	mov	rcx, QWORD PTR [rcx+200]
	movzx	eax, WORD PTR [rcx+rax+4]
	movsxd	rcx, DWORD PTR glyph_i$39[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR src_tmp$35[rbp]
	mov	rdx, QWORD PTR [rdx+200]
	movzx	ecx, WORD PTR [rdx+rcx+6]
	imul	eax, ecx
	mov	ecx, DWORD PTR total_surface$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total_surface$[rbp], eax
; Line 2480
	jmp	$LN29@ImFontAtla
$LN30@ImFontAtla:
; Line 2481
	jmp	$LN26@ImFontAtla
$LN27@ImFontAtla:
; Line 2486
	cvtsi2ss xmm0, DWORD PTR total_surface$[rbp]
	call	sqrtf
	cvttss2si eax, xmm0
	inc	eax
	mov	DWORD PTR surface_sqrt$[rbp], eax
; Line 2487
	mov	rax, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rax+52], 0
; Line 2488
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	DWORD PTR [rax+16], 0
	jle	SHORT $LN57@ImFontAtla
; Line 2489
	mov	rax, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+48], ecx
	jmp	$LN58@ImFontAtla
$LN57@ImFontAtla:
; Line 2491
	cvtsi2ss xmm0, DWORD PTR surface_sqrt$[rbp]
	comiss	xmm0, DWORD PTR __real@45333333
	jb	SHORT $LN82@ImFontAtla
	mov	DWORD PTR tv583[rbp], 4096		; 00001000H
	jmp	SHORT $LN83@ImFontAtla
$LN82@ImFontAtla:
	cvtsi2ss xmm0, DWORD PTR surface_sqrt$[rbp]
	comiss	xmm0, DWORD PTR __real@44b33333
	jb	SHORT $LN80@ImFontAtla
	mov	DWORD PTR tv582[rbp], 2048		; 00000800H
	jmp	SHORT $LN81@ImFontAtla
$LN80@ImFontAtla:
	cvtsi2ss xmm0, DWORD PTR surface_sqrt$[rbp]
	comiss	xmm0, DWORD PTR __real@44333333
	jb	SHORT $LN78@ImFontAtla
	mov	DWORD PTR tv581[rbp], 1024		; 00000400H
	jmp	SHORT $LN79@ImFontAtla
$LN78@ImFontAtla:
	mov	DWORD PTR tv581[rbp], 512		; 00000200H
$LN79@ImFontAtla:
	mov	eax, DWORD PTR tv581[rbp]
	mov	DWORD PTR tv582[rbp], eax
$LN81@ImFontAtla:
	mov	eax, DWORD PTR tv582[rbp]
	mov	DWORD PTR tv583[rbp], eax
$LN83@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	ecx, DWORD PTR tv583[rbp]
	mov	DWORD PTR [rax+48], ecx
$LN58@ImFontAtla:
; Line 2495
	mov	DWORD PTR TEX_HEIGHT_MAX$[rbp], 32768	; 00008000H
; Line 2496
	lea	rax, QWORD PTR spc$[rbp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
; Line 2497
	mov	QWORD PTR [rsp+48], 0
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 32768				; 00008000H
	mov	rax, QWORD PTR atlas$[rbp]
	mov	r8d, DWORD PTR [rax+48]
	xor	edx, edx
	lea	rcx, QWORD PTR spc$[rbp]
	call	stbtt_PackBegin
; Line 2498
	mov	rdx, QWORD PTR spc$[rbp+8]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z ; ImFontAtlasBuildPackCustomRects
; Line 2501
	mov	DWORD PTR src_i$45[rbp], 0
	jmp	SHORT $LN34@ImFontAtla
$LN32@ImFontAtla:
	mov	eax, DWORD PTR src_i$45[rbp]
	inc	eax
	mov	DWORD PTR src_i$45[rbp], eax
$LN34@ImFontAtla:
	mov	eax, DWORD PTR src_tmp_array$[rbp]
	cmp	DWORD PTR src_i$45[rbp], eax
	jge	$LN33@ImFontAtla
; Line 2503
	mov	edx, DWORD PTR src_i$45[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$46[rbp], rax
; Line 2504
	mov	rax, QWORD PTR src_tmp$46[rbp]
	cmp	DWORD PTR [rax+232], 0
	jne	SHORT $LN59@ImFontAtla
; Line 2505
	jmp	SHORT $LN32@ImFontAtla
$LN59@ImFontAtla:
; Line 2507
	mov	rax, QWORD PTR src_tmp$46[rbp]
	mov	r8d, DWORD PTR [rax+232]
	mov	rax, QWORD PTR src_tmp$46[rbp]
	mov	rdx, QWORD PTR [rax+200]
	mov	rcx, QWORD PTR spc$[rbp+8]
	call	stbrp_pack_rects
; Line 2511
	mov	DWORD PTR glyph_i$47[rbp], 0
	jmp	SHORT $LN37@ImFontAtla
$LN35@ImFontAtla:
	mov	eax, DWORD PTR glyph_i$47[rbp]
	inc	eax
	mov	DWORD PTR glyph_i$47[rbp], eax
$LN37@ImFontAtla:
	mov	rax, QWORD PTR src_tmp$46[rbp]
	mov	eax, DWORD PTR [rax+232]
	cmp	DWORD PTR glyph_i$47[rbp], eax
	jge	SHORT $LN36@ImFontAtla
; Line 2512
	movsxd	rax, DWORD PTR glyph_i$47[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR src_tmp$46[rbp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	DWORD PTR [rcx+rax+12], 0
	je	SHORT $LN60@ImFontAtla
; Line 2513
	movsxd	rax, DWORD PTR glyph_i$47[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR src_tmp$46[rbp]
	mov	rcx, QWORD PTR [rcx+200]
	movzx	eax, WORD PTR [rcx+rax+10]
	movsxd	rcx, DWORD PTR glyph_i$47[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR src_tmp$46[rbp]
	mov	rdx, QWORD PTR [rdx+200]
	movzx	ecx, WORD PTR [rdx+rcx+6]
	add	eax, ecx
	mov	edx, eax
	mov	rax, QWORD PTR atlas$[rbp]
	mov	ecx, DWORD PTR [rax+52]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rcx+52], eax
$LN60@ImFontAtla:
	jmp	$LN35@ImFontAtla
$LN36@ImFontAtla:
; Line 2514
	jmp	$LN32@ImFontAtla
$LN33@ImFontAtla:
; Line 2517
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN84@ImFontAtla
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+52]
	inc	eax
	mov	DWORD PTR tv647[rbp], eax
	jmp	SHORT $LN85@ImFontAtla
$LN84@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	ecx, DWORD PTR [rax+52]
	call	?ImUpperPowerOfTwo@@YAHH@Z		; ImUpperPowerOfTwo
	mov	DWORD PTR tv647[rbp], eax
$LN85@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	ecx, DWORD PTR tv647[rbp]
	mov	DWORD PTR [rax+52], ecx
; Line 2518
	mov	rax, QWORD PTR atlas$[rbp]
	cvtsi2ss xmm0, DWORD PTR [rax+52]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR atlas$[rbp]
	cvtsi2ss xmm1, DWORD PTR [rax+48]
	movss	xmm2, DWORD PTR __real@3f800000
	divss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T76[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rcx+56], rax
; Line 2519
	mov	rax, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+48]
	imul	eax, DWORD PTR [rcx+52]
	cdqe
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rcx+32], rax
; Line 2520
	mov	rax, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+48]
	imul	eax, DWORD PTR [rcx+52]
	cdqe
	mov	QWORD PTR tv672[rbp], rax
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rdi, QWORD PTR [rcx+32]
	xor	eax, eax
	mov	rcx, QWORD PTR tv672[rbp]
	rep stosb
; Line 2521
	mov	rax, QWORD PTR atlas$[rbp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR spc$[rbp+48], rax
; Line 2522
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR spc$[rbp+20], eax
; Line 2525
	mov	DWORD PTR src_i$48[rbp], 0
	jmp	SHORT $LN40@ImFontAtla
$LN38@ImFontAtla:
	mov	eax, DWORD PTR src_i$48[rbp]
	inc	eax
	mov	DWORD PTR src_i$48[rbp], eax
$LN40@ImFontAtla:
	mov	eax, DWORD PTR src_tmp_array$[rbp]
	cmp	DWORD PTR src_i$48[rbp], eax
	jge	$LN39@ImFontAtla
; Line 2527
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv685[rbp], rax
	mov	edx, DWORD PTR src_i$48[rbp]
	mov	rcx, QWORD PTR tv685[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	mov	QWORD PTR cfg$49[rbp], rax
; Line 2528
	mov	edx, DWORD PTR src_i$48[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$50[rbp], rax
; Line 2529
	mov	rax, QWORD PTR src_tmp$50[rbp]
	cmp	DWORD PTR [rax+232], 0
	jne	SHORT $LN61@ImFontAtla
; Line 2530
	jmp	SHORT $LN38@ImFontAtla
$LN61@ImFontAtla:
; Line 2532
	mov	rax, QWORD PTR src_tmp$50[rbp]
	add	rax, 160				; 000000a0H
	mov	rcx, QWORD PTR src_tmp$50[rbp]
	mov	rdx, QWORD PTR src_tmp$50[rbp]
	mov	rdx, QWORD PTR [rdx+200]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9d, 1
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR spc$[rbp]
	call	stbtt_PackFontRangesRenderIntoRects
; Line 2535
	mov	rax, QWORD PTR cfg$49[rbp]
	movss	xmm0, DWORD PTR [rax+80]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN94@ImFontAtla
	je	$LN62@ImFontAtla
$LN94@ImFontAtla:
; Line 2538
	mov	rax, QWORD PTR cfg$49[rbp]
	movss	xmm1, DWORD PTR [rax+80]
	lea	rcx, QWORD PTR multiply_table$51[rbp]
	call	?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z ; ImFontAtlasBuildMultiplyCalcLookupTable
; Line 2539
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR src_tmp$50[rbp]
	add	rax, QWORD PTR [rcx+200]
	mov	QWORD PTR r$52[rbp], rax
; Line 2540
	mov	DWORD PTR glyph_i$53[rbp], 0
	jmp	SHORT $LN43@ImFontAtla
$LN41@ImFontAtla:
	mov	eax, DWORD PTR glyph_i$53[rbp]
	inc	eax
	mov	DWORD PTR glyph_i$53[rbp], eax
	mov	rax, QWORD PTR r$52[rbp]
	add	rax, 16
	mov	QWORD PTR r$52[rbp], rax
$LN43@ImFontAtla:
	mov	rax, QWORD PTR src_tmp$50[rbp]
	mov	eax, DWORD PTR [rax+232]
	cmp	DWORD PTR glyph_i$53[rbp], eax
	jge	SHORT $LN62@ImFontAtla
; Line 2541
	mov	rax, QWORD PTR r$52[rbp]
	cmp	DWORD PTR [rax+12], 0
	je	SHORT $LN63@ImFontAtla
; Line 2542
	mov	rax, QWORD PTR r$52[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR r$52[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	rdx, QWORD PTR r$52[rbp]
	movzx	edx, WORD PTR [rdx+10]
	mov	rdi, QWORD PTR r$52[rbp]
	movzx	edi, WORD PTR [rdi+8]
	mov	r8, QWORD PTR atlas$[rbp]
	mov	r8d, DWORD PTR [r8+48]
	mov	DWORD PTR [rsp+48], r8d
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	mov	r8d, edi
	mov	rax, QWORD PTR atlas$[rbp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, QWORD PTR multiply_table$51[rbp]
	call	?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z ; ImFontAtlasBuildMultiplyRectAlpha8
$LN63@ImFontAtla:
	jmp	$LN41@ImFontAtla
$LN62@ImFontAtla:
; Line 2544
	mov	rax, QWORD PTR src_tmp$50[rbp]
	mov	QWORD PTR [rax+200], 0
; Line 2545
	jmp	$LN38@ImFontAtla
$LN39@ImFontAtla:
; Line 2548
	lea	rcx, QWORD PTR spc$[rbp]
	call	stbtt_PackEnd
; Line 2549
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	?clear@?$ImVector@Ustbrp_rect@@@@QEAAXXZ ; ImVector<stbrp_rect>::clear
; Line 2552
	mov	DWORD PTR src_i$54[rbp], 0
	jmp	SHORT $LN46@ImFontAtla
$LN44@ImFontAtla:
	mov	eax, DWORD PTR src_i$54[rbp]
	inc	eax
	mov	DWORD PTR src_i$54[rbp], eax
$LN46@ImFontAtla:
	mov	eax, DWORD PTR src_tmp_array$[rbp]
	cmp	DWORD PTR src_i$54[rbp], eax
	jge	$LN45@ImFontAtla
; Line 2554
	mov	edx, DWORD PTR src_i$54[rbp]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??A?$ImVector@UImFontBuildSrcData@@@@QEAAAEAUImFontBuildSrcData@@H@Z ; ImVector<ImFontBuildSrcData>::operator[]
	mov	QWORD PTR src_tmp$55[rbp], rax
; Line 2555
	mov	rax, QWORD PTR src_tmp$55[rbp]
	cmp	DWORD PTR [rax+232], 0
	jne	SHORT $LN64@ImFontAtla
; Line 2556
	jmp	SHORT $LN44@ImFontAtla
$LN64@ImFontAtla:
; Line 2561
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv777[rbp], rax
	mov	edx, DWORD PTR src_i$54[rbp]
	mov	rcx, QWORD PTR tv777[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	mov	QWORD PTR cfg$56[rbp], rax
; Line 2562
	mov	rax, QWORD PTR cfg$56[rbp]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR dst_font$57[rbp], rax
; Line 2564
	mov	rax, QWORD PTR src_tmp$55[rbp]
	mov	rcx, QWORD PTR cfg$56[rbp]
	movss	xmm1, DWORD PTR [rcx+20]
	mov	rcx, rax
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR font_scale$58[rbp], xmm0
; Line 2566
	mov	rax, QWORD PTR src_tmp$55[rbp]
	lea	r9, QWORD PTR unscaled_line_gap$61[rbp]
	lea	r8, QWORD PTR unscaled_descent$60[rbp]
	lea	rdx, QWORD PTR unscaled_ascent$59[rbp]
	mov	rcx, rax
	call	stbtt_GetFontVMetrics
; Line 2568
	cvtsi2ss xmm0, DWORD PTR unscaled_ascent$59[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN86@ImFontAtla
	mov	DWORD PTR tv794[rbp], 1
	jmp	SHORT $LN87@ImFontAtla
$LN86@ImFontAtla:
	mov	DWORD PTR tv794[rbp], -1
$LN87@ImFontAtla:
	cvtsi2ss xmm0, DWORD PTR unscaled_ascent$59[rbp]
	mulss	xmm0, DWORD PTR font_scale$58[rbp]
	cvtsi2ss xmm1, DWORD PTR tv794[rbp]
	addss	xmm0, xmm1
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR ascent$62[rbp], xmm0
; Line 2569
	cvtsi2ss xmm0, DWORD PTR unscaled_descent$60[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN88@ImFontAtla
	mov	DWORD PTR tv803[rbp], 1
	jmp	SHORT $LN89@ImFontAtla
$LN88@ImFontAtla:
	mov	DWORD PTR tv803[rbp], -1
$LN89@ImFontAtla:
	cvtsi2ss xmm0, DWORD PTR unscaled_descent$60[rbp]
	mulss	xmm0, DWORD PTR font_scale$58[rbp]
	cvtsi2ss xmm1, DWORD PTR tv803[rbp]
	addss	xmm0, xmm1
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR descent$63[rbp], xmm0
; Line 2570
	movss	xmm0, DWORD PTR descent$63[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR ascent$62[rbp]
	mov	r8, QWORD PTR cfg$56[rbp]
	mov	rdx, QWORD PTR dst_font$57[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z ; ImFontAtlasBuildSetupFont
; Line 2571
	mov	rax, QWORD PTR cfg$56[rbp]
	movss	xmm0, DWORD PTR [rax+44]
	movss	DWORD PTR font_off_x$64[rbp], xmm0
; Line 2572
	mov	rax, QWORD PTR dst_font$57[rbp]
	movss	xmm0, DWORD PTR [rax+96]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR cfg$56[rbp]
	movss	xmm1, DWORD PTR [rax+48]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR font_off_y$65[rbp], xmm0
; Line 2574
	mov	DWORD PTR glyph_i$66[rbp], 0
	jmp	SHORT $LN49@ImFontAtla
$LN47@ImFontAtla:
	mov	eax, DWORD PTR glyph_i$66[rbp]
	inc	eax
	mov	DWORD PTR glyph_i$66[rbp], eax
$LN49@ImFontAtla:
	mov	rax, QWORD PTR src_tmp$55[rbp]
	mov	eax, DWORD PTR [rax+232]
	cmp	DWORD PTR glyph_i$66[rbp], eax
	jge	$LN48@ImFontAtla
; Line 2577
	mov	rax, QWORD PTR src_tmp$55[rbp]
	add	rax, 256				; 00000100H
	mov	QWORD PTR tv830[rbp], rax
	mov	edx, DWORD PTR glyph_i$66[rbp]
	mov	rcx, QWORD PTR tv830[rbp]
	call	??A?$ImVector@H@@QEAAAEAHH@Z		; ImVector<int>::operator[]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR codepoint$67[rbp], eax
; Line 2578
	movsxd	rax, DWORD PTR glyph_i$66[rbp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR src_tmp$55[rbp]
	add	rax, QWORD PTR [rcx+208]
	mov	QWORD PTR pc$68[rbp], rax
; Line 2580
	xorps	xmm0, xmm0
	movss	DWORD PTR unused_x$70[rbp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR unused_y$71[rbp], xmm0
; Line 2581
	mov	DWORD PTR [rsp+56], 0
	lea	rax, QWORD PTR q$69[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR unused_y$71[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR unused_x$70[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR glyph_i$66[rbp]
	mov	rax, QWORD PTR atlas$[rbp]
	mov	r8d, DWORD PTR [rax+52]
	mov	rax, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR [rax+48]
	mov	rax, QWORD PTR src_tmp$55[rbp]
	mov	rcx, QWORD PTR [rax+208]
	call	stbtt_GetPackedQuad
; Line 2582
	movss	xmm0, DWORD PTR q$69[rbp+20]
	addss	xmm0, DWORD PTR font_off_y$65[rbp]
	movss	xmm1, DWORD PTR q$69[rbp+16]
	addss	xmm1, DWORD PTR font_off_x$64[rbp]
	movss	xmm2, DWORD PTR q$69[rbp+4]
	addss	xmm2, DWORD PTR font_off_y$65[rbp]
	movss	xmm3, DWORD PTR q$69[rbp]
	addss	xmm3, DWORD PTR font_off_x$64[rbp]
	mov	rax, QWORD PTR pc$68[rbp]
	movss	xmm4, DWORD PTR [rax+16]
	movss	DWORD PTR [rsp+88], xmm4
	movss	xmm4, DWORD PTR q$69[rbp+28]
	movss	DWORD PTR [rsp+80], xmm4
	movss	xmm4, DWORD PTR q$69[rbp+24]
	movss	DWORD PTR [rsp+72], xmm4
	movss	xmm4, DWORD PTR q$69[rbp+12]
	movss	DWORD PTR [rsp+64], xmm4
	movss	xmm4, DWORD PTR q$69[rbp+8]
	movss	DWORD PTR [rsp+56], xmm4
	movss	DWORD PTR [rsp+48], xmm0
	movss	DWORD PTR [rsp+40], xmm1
	movss	DWORD PTR [rsp+32], xmm2
	movzx	r8d, WORD PTR codepoint$67[rbp]
	mov	rdx, QWORD PTR cfg$56[rbp]
	mov	rcx, QWORD PTR dst_font$57[rbp]
	call	?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ; ImFont::AddGlyph
; Line 2583
	jmp	$LN47@ImFontAtla
$LN48@ImFontAtla:
; Line 2584
	jmp	$LN44@ImFontAtla
$LN45@ImFontAtla:
; Line 2587
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	?clear_destruct@?$ImVector@UImFontBuildSrcData@@@@QEAAXXZ ; ImVector<ImFontBuildSrcData>::clear_destruct
; Line 2589
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildFinish
; Line 2590
	mov	BYTE PTR $T77[rbp], 1
	lea	rcx, QWORD PTR buf_packedchars$[rbp]
	call	??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
	npad	1
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ	; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
	npad	1
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
	npad	1
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
	movzx	eax, BYTE PTR $T77[rbp]
$LN1@ImFontAtla:
; Line 2591
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-96]
	lea	rdx, OFFSET FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+3832]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z ENDP ; ImFontAtlasBuildWithStbTruetype
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
tv803 = 3796
tv794 = 3796
tv647 = 3796
tv583 = 3796
tv489 = 3796
tv830 = 3800
tv777 = 3800
tv685 = 3800
tv672 = 3800
tv582 = 3800
tv501 = 3800
tv453 = 3800
tv426 = 3800
tv419 = 3800
tv349 = 3800
tv337 = 3800
tv332 = 3800
tv312 = 3800
tv288 = 3800
tv275 = 3800
tv231 = 3800
tv190 = 3800
tv161 = 3800
tv146 = 3800
tv139 = 3800
tv581 = 3804
__$ArrayPad$ = 3808
atlas$ = 3856
?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+96]
	lea	rcx, QWORD PTR src_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildSrcData@@@@QEAA@XZ ; ImVector<ImFontBuildSrcData>::~ImVector<ImFontBuildSrcData>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
tv803 = 3796
tv794 = 3796
tv647 = 3796
tv583 = 3796
tv489 = 3796
tv830 = 3800
tv777 = 3800
tv685 = 3800
tv672 = 3800
tv582 = 3800
tv501 = 3800
tv453 = 3800
tv426 = 3800
tv419 = 3800
tv349 = 3800
tv337 = 3800
tv332 = 3800
tv312 = 3800
tv288 = 3800
tv275 = 3800
tv231 = 3800
tv190 = 3800
tv161 = 3800
tv146 = 3800
tv139 = 3800
tv581 = 3804
__$ArrayPad$ = 3808
atlas$ = 3856
?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+96]
	lea	rcx, QWORD PTR dst_tmp_array$[rbp]
	call	??1?$ImVector@UImFontBuildDstData@@@@QEAA@XZ ; ImVector<ImFontBuildDstData>::~ImVector<ImFontBuildDstData>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
tv803 = 3796
tv794 = 3796
tv647 = 3796
tv583 = 3796
tv489 = 3796
tv830 = 3800
tv777 = 3800
tv685 = 3800
tv672 = 3800
tv582 = 3800
tv501 = 3800
tv453 = 3800
tv426 = 3800
tv419 = 3800
tv349 = 3800
tv337 = 3800
tv332 = 3800
tv312 = 3800
tv288 = 3800
tv275 = 3800
tv231 = 3800
tv190 = 3800
tv161 = 3800
tv146 = 3800
tv139 = 3800
tv581 = 3804
__$ArrayPad$ = 3808
atlas$ = 3856
?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+96]
	lea	rcx, QWORD PTR buf_rects$[rbp]
	call	??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ	; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
src_tmp_array$ = 8
dst_tmp_array$ = 56
src_i$19 = 100
src_tmp$20 = 136
cfg$21 = 168
output_i$22 = 196
font_offset$23 = 228
dst_tmp$24 = 264
src_range$25 = 296
total_glyphs_count$ = 324
src_i$26 = 356
src_tmp$27 = 392
dst_tmp$28 = 424
src_range$29 = 456
codepoint$30 = 484
src_i$31 = 516
src_tmp$32 = 552
dst_i$33 = 580
buf_rects$ = 616
buf_packedchars$ = 664
total_surface$ = 708
buf_rects_out_n$ = 740
buf_packedchars_out_n$ = 772
src_i$34 = 804
src_tmp$35 = 840
cfg$36 = 872
scale$37 = 900
padding$38 = 932
glyph_i$39 = 964
x0$40 = 996
y0$41 = 1028
x1$42 = 1060
y1$43 = 1092
glyph_index_in_font$44 = 1124
surface_sqrt$ = 1156
TEX_HEIGHT_MAX$ = 1188
spc$ = 1232
src_i$45 = 1316
src_tmp$46 = 1352
glyph_i$47 = 1380
src_i$48 = 1412
cfg$49 = 1448
src_tmp$50 = 1480
multiply_table$51 = 1520
r$52 = 1800
glyph_i$53 = 1828
src_i$54 = 1860
src_tmp$55 = 1896
cfg$56 = 1928
dst_font$57 = 1960
font_scale$58 = 1988
unscaled_ascent$59 = 2020
unscaled_descent$60 = 2052
unscaled_line_gap$61 = 2084
ascent$62 = 2116
descent$63 = 2148
font_off_x$64 = 2180
font_off_y$65 = 2212
glyph_i$66 = 2244
codepoint$67 = 2276
pc$68 = 2312
q$69 = 2344
unused_x$70 = 2404
unused_y$71 = 2436
$T72 = 3620
$T73 = 3652
$T74 = 3684
$T75 = 3716
$T76 = 3748
$T77 = 3780
tv803 = 3796
tv794 = 3796
tv647 = 3796
tv583 = 3796
tv489 = 3796
tv830 = 3800
tv777 = 3800
tv685 = 3800
tv672 = 3800
tv582 = 3800
tv501 = 3800
tv453 = 3800
tv426 = 3800
tv419 = 3800
tv349 = 3800
tv337 = 3800
tv332 = 3800
tv312 = 3800
tv288 = 3800
tv275 = 3800
tv231 = 3800
tv190 = 3800
tv161 = 3800
tv146 = 3800
tv139 = 3800
tv581 = 3804
__$ArrayPad$ = 3808
atlas$ = 3856
?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA PROC ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+96]
	lea	rcx, QWORD PTR buf_packedchars$[rbp]
	call	??1?$ImVector@Ustbtt_packedchar@@@@QEAA@XZ ; ImVector<stbtt_packedchar>::~ImVector<stbtt_packedchar>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0??ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z@4HA ENDP ; `ImFontAtlasBuildWithStbTruetype'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z
_TEXT	SEGMENT
it_begin$ = 8
it_end$ = 40
it$1 = 72
entries_32$2 = 100
bit_n$3 = 132
$T4 = 356
tv129 = 372
in$ = 416
out$ = 424
?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z PROC ; UnpackBitVectorToFlatIndexList, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2330
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2332
	mov	rax, QWORD PTR in$[rbp]
	mov	rcx, rax
	call	?begin@?$ImVector@I@@QEBAPEBIXZ		; ImVector<unsigned int>::begin
	mov	QWORD PTR it_begin$[rbp], rax
; Line 2333
	mov	rax, QWORD PTR in$[rbp]
	mov	rcx, rax
	call	?end@?$ImVector@I@@QEBAPEBIXZ		; ImVector<unsigned int>::end
	mov	QWORD PTR it_end$[rbp], rax
; Line 2334
	mov	rax, QWORD PTR it_begin$[rbp]
	mov	QWORD PTR it$1[rbp], rax
	jmp	SHORT $LN4@UnpackBitV
$LN2@UnpackBitV:
	mov	rax, QWORD PTR it$1[rbp]
	add	rax, 4
	mov	QWORD PTR it$1[rbp], rax
$LN4@UnpackBitV:
	mov	rax, QWORD PTR it_end$[rbp]
	cmp	QWORD PTR it$1[rbp], rax
	jae	$LN3@UnpackBitV
; Line 2335
	mov	rax, QWORD PTR it$1[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR entries_32$2[rbp], eax
	cmp	DWORD PTR entries_32$2[rbp], 0
	je	$LN8@UnpackBitV
; Line 2336
	mov	DWORD PTR bit_n$3[rbp], 0
	jmp	SHORT $LN7@UnpackBitV
$LN5@UnpackBitV:
	mov	eax, DWORD PTR bit_n$3[rbp]
	inc	eax
	mov	DWORD PTR bit_n$3[rbp], eax
$LN7@UnpackBitV:
	cmp	DWORD PTR bit_n$3[rbp], 32		; 00000020H
	jae	SHORT $LN6@UnpackBitV
; Line 2337
	mov	eax, DWORD PTR bit_n$3[rbp]
	mov	ecx, 1
	mov	DWORD PTR tv129[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv129[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR entries_32$2[rbp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN9@UnpackBitV
; Line 2338
	mov	rax, QWORD PTR it_begin$[rbp]
	mov	rcx, QWORD PTR it$1[rbp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 2
	shl	rax, 5
	mov	ecx, DWORD PTR bit_n$3[rbp]
	add	rax, rcx
	mov	DWORD PTR $T4[rbp], eax
	lea	rdx, QWORD PTR $T4[rbp]
	mov	rcx, QWORD PTR out$[rbp]
	call	?push_back@?$ImVector@H@@QEAAXAEBH@Z	; ImVector<int>::push_back
$LN9@UnpackBitV:
	jmp	SHORT $LN5@UnpackBitV
$LN6@UnpackBitV:
$LN8@UnpackBitV:
	jmp	$LN2@UnpackBitV
$LN3@UnpackBitV:
; Line 2339
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?UnpackBitVectorToFlatIndexList@@YAXPEBUImBitVector@@PEAU?$ImVector@H@@@Z ENDP ; UnpackBitVectorToFlatIndexList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GImFontBuildSrcData@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GImFontBuildSrcData@@QEAAPEAXI@Z PROC		; ImFontBuildSrcData::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1ImFontBuildSrcData@@QEAA@XZ
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 272				; 00000110H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_GImFontBuildSrcData@@QEAAPEAXI@Z ENDP		; ImFontBuildSrcData::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImFontBuildSrcData@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImFontBuildSrcData@@QEAA@XZ PROC			; ImFontBuildSrcData::~ImFontBuildSrcData, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 256				; 00000100H
	mov	rcx, rax
	call	??1?$ImVector@H@@QEAA@XZ		; ImVector<int>::~ImVector<int>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 240				; 000000f0H
	mov	rcx, rax
	call	??1ImBitVector@@QEAA@XZ
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImFontBuildSrcData@@QEAA@XZ ENDP			; ImFontBuildSrcData::~ImFontBuildSrcData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Decode85@@YAXPEBEPEAE@Z
_TEXT	SEGMENT
tmp$1 = 4
tv66 = 212
tv70 = 216
tv74 = 220
tv78 = 224
src$ = 272
dst$ = 280
?Decode85@@YAXPEBEPEAE@Z PROC				; Decode85, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2109
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
$LN2@Decode85:
; Line 2110
	mov	rax, QWORD PTR src$[rbp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@Decode85
; Line 2112
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR src$[rbp]
	movzx	ecx, BYTE PTR [rcx+rax]
	call	?Decode85Byte@@YAID@Z			; Decode85Byte
	mov	DWORD PTR tv66[rbp], eax
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	call	?Decode85Byte@@YAID@Z			; Decode85Byte
	mov	DWORD PTR tv70[rbp], eax
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR src$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	call	?Decode85Byte@@YAID@Z			; Decode85Byte
	mov	DWORD PTR tv74[rbp], eax
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR src$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	call	?Decode85Byte@@YAID@Z			; Decode85Byte
	mov	DWORD PTR tv78[rbp], eax
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR src$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	call	?Decode85Byte@@YAID@Z			; Decode85Byte
	imul	eax, eax, 85				; 00000055H
	mov	ecx, DWORD PTR tv78[rbp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 85				; 00000055H
	mov	ecx, DWORD PTR tv74[rbp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 85				; 00000055H
	mov	ecx, DWORD PTR tv70[rbp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 85				; 00000055H
	mov	ecx, DWORD PTR tv66[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tmp$1[rbp], eax
; Line 2113
	mov	eax, DWORD PTR tmp$1[rbp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dst$[rbp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR tmp$1[rbp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dst$[rbp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR tmp$1[rbp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dst$[rbp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR tmp$1[rbp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dst$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2114
	mov	rax, QWORD PTR src$[rbp]
	add	rax, 5
	mov	QWORD PTR src$[rbp], rax
; Line 2115
	mov	rax, QWORD PTR dst$[rbp]
	add	rax, 4
	mov	QWORD PTR dst$[rbp], rax
; Line 2116
	jmp	$LN2@Decode85
$LN3@Decode85:
; Line 2117
	lea	rsp, QWORD PTR [rbp+248]
	pop	rdi
	pop	rbp
	ret	0
?Decode85@@YAXPEBEPEAE@Z ENDP				; Decode85
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Decode85Byte@@YAID@Z
_TEXT	SEGMENT
tv70 = 192
c$ = 240
?Decode85Byte@@YAID@Z PROC				; Decode85Byte, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2107
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
	movsx	eax, BYTE PTR c$[rbp]
	cmp	eax, 92					; 0000005cH
	jl	SHORT $LN3@Decode85By
	movsx	eax, BYTE PTR c$[rbp]
	sub	eax, 36					; 00000024H
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@Decode85By
$LN3@Decode85By:
	movsx	eax, BYTE PTR c$[rbp]
	sub	eax, 35					; 00000023H
	mov	DWORD PTR tv70[rbp], eax
$LN4@Decode85By:
	mov	eax, DWORD PTR tv70[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?Decode85Byte@@YAID@Z ENDP				; Decode85Byte
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ
_TEXT	SEGMENT
?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ PROC	; GetDefaultCompressedFontDataTTFBase85, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 4177
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 4178
	lea	rax, OFFSET FLAT:?proggy_clean_ttf_compressed_data_base85@@3QBDB
; Line 4179
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ ENDP	; GetDefaultCompressedFontDataTTFBase85
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_decompress@@YAIPEAEPEBEI@Z
_TEXT	SEGMENT
olen$ = 4
old_i$1 = 40
output$ = 288
i$ = 296
__formal$ = 304
?stb_decompress@@YAIPEAEPEBEI@Z PROC			; stb_decompress, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 4045
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 4046
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 3
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	add	ecx, edx
	add	eax, ecx
	cmp	eax, 1471938560				; 57bc0000H
	je	SHORT $LN5@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN5@stb_decomp:
; Line 4047
	mov	eax, 1
	imul	rax, rax, 4
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	mov	edx, 1
	imul	rdx, rdx, 6
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 8
	mov	r8d, 1
	imul	r8, r8, 7
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	add	edx, r8d
	add	ecx, edx
	add	eax, ecx
	test	eax, eax
	je	SHORT $LN6@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN6@stb_decomp:
; Line 4048
	mov	rcx, QWORD PTR i$[rbp]
	call	?stb_decompress_length@@YAIPEBE@Z	; stb_decompress_length
	mov	DWORD PTR olen$[rbp], eax
; Line 4049
	mov	rax, QWORD PTR i$[rbp]
	mov	QWORD PTR ?stb__barrier_in_b@@3PEBEEB, rax
; Line 4050
	mov	eax, DWORD PTR olen$[rbp]
	mov	rcx, QWORD PTR output$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ?stb__barrier_out_e@@3PEAEEA, rax
; Line 4051
	mov	rax, QWORD PTR output$[rbp]
	mov	QWORD PTR ?stb__barrier_out_b@@3PEAEEA, rax
; Line 4052
	mov	rax, QWORD PTR i$[rbp]
	add	rax, 16
	mov	QWORD PTR i$[rbp], rax
; Line 4054
	mov	rax, QWORD PTR output$[rbp]
	mov	QWORD PTR ?stb__dout@@3PEAEEA, rax
$LN2@stb_decomp:
; Line 4056
	mov	rax, QWORD PTR i$[rbp]
	mov	QWORD PTR old_i$1[rbp], rax
; Line 4057
	mov	rcx, QWORD PTR i$[rbp]
	call	?stb_decompress_token@@YAPEBEPEBE@Z	; stb_decompress_token
	mov	QWORD PTR i$[rbp], rax
; Line 4058
	mov	rax, QWORD PTR old_i$1[rbp]
	cmp	QWORD PTR i$[rbp], rax
	jne	$LN7@stb_decomp
; Line 4059
	mov	rax, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 5
	jne	$LN8@stb_decomp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 250				; 000000faH
	jne	$LN8@stb_decomp
; Line 4060
	mov	eax, DWORD PTR olen$[rbp]
	mov	rcx, QWORD PTR output$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	je	SHORT $LN14@stb_decomp
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@GCANDLHA@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN14@stb_decomp:
; Line 4061
	mov	eax, DWORD PTR olen$[rbp]
	mov	rcx, QWORD PTR output$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	je	SHORT $LN10@stb_decomp
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN10@stb_decomp:
; Line 4062
	mov	r8d, DWORD PTR olen$[rbp]
	mov	rdx, QWORD PTR output$[rbp]
	mov	ecx, 1
	call	?stb_adler32@@YAIIPEAEI@Z		; stb_adler32
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR i$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 24
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR i$[rbp]
	movzx	edx, BYTE PTR [r8+rdx]
	shl	edx, 16
	mov	r8d, 1
	imul	r8, r8, 4
	mov	r9, QWORD PTR i$[rbp]
	movzx	r8d, BYTE PTR [r9+r8]
	shl	r8d, 8
	mov	r9d, 1
	imul	r9, r9, 5
	mov	r10, QWORD PTR i$[rbp]
	movzx	r9d, BYTE PTR [r10+r9]
	add	r8d, r9d
	add	edx, r8d
	add	ecx, edx
	cmp	eax, ecx
	je	SHORT $LN11@stb_decomp
; Line 4063
	xor	eax, eax
	jmp	$LN1@stb_decomp
$LN11@stb_decomp:
; Line 4064
	mov	eax, DWORD PTR olen$[rbp]
	jmp	$LN1@stb_decomp
; Line 4065
	jmp	SHORT $LN9@stb_decomp
$LN8@stb_decomp:
; Line 4066
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN15@stb_decomp
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
	add	eax, 21
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stb_decomp:
; Line 4067
	xor	eax, eax
	jmp	SHORT $LN1@stb_decomp
$LN9@stb_decomp:
$LN7@stb_decomp:
; Line 4070
	mov	eax, DWORD PTR olen$[rbp]
	mov	rcx, QWORD PTR output$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jbe	SHORT $LN16@stb_decomp
	mov	eax, DWORD PTR ?__LINE__Var@?0??stb_decompress@@YAIPEAEPEBEI@Z@4JA
	add	eax, 25
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DG@EGIPGKEG@?$AAs?$AAt?$AAb?$AA_?$AA_?$AAd?$AAo?$AAu?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAu@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN16@stb_decomp:
; Line 4071
	mov	eax, DWORD PTR olen$[rbp]
	mov	rcx, QWORD PTR output$[rbp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR ?stb__dout@@3PEAEEA, rax
	jbe	SHORT $LN12@stb_decomp
; Line 4072
	xor	eax, eax
	jmp	SHORT $LN1@stb_decomp
$LN12@stb_decomp:
; Line 4073
	jmp	$LN2@stb_decomp
$LN1@stb_decomp:
; Line 4074
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stb_decompress@@YAIPEAEPEBEI@Z ENDP			; stb_decompress
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stb_decompress_length@@YAIPEBE@Z
_TEXT	SEGMENT
input$ = 224
?stb_decompress_length@@YAIPEBE@Z PROC			; stb_decompress_length, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3967
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3968
	mov	eax, 1
	imul	rax, rax, 8
	mov	rcx, QWORD PTR input$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR input$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR input$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR input$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
; Line 3969
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stb_decompress_length@@YAIPEBE@Z ENDP			; stb_decompress_length
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ
text$di	SEGMENT
??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ PROC	; `dynamic initializer for 'FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA'', COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1970
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1962
	movss	xmm2, DWORD PTR __real@40400000
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41980000
	movss	xmm1, DWORD PTR __real@41400000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+8
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+16
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1963
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@41500000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+24
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41800000
	movss	xmm1, DWORD PTR __real@40e00000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+32
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41000000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+40
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1964
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@41f80000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+48
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41b80000
	movss	xmm1, DWORD PTR __real@41b80000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+56
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41300000
	movss	xmm1, DWORD PTR __real@41300000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+64
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1965
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@41a80000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+72
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41b80000
	movss	xmm1, DWORD PTR __real@41100000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+80
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41300000
	movss	xmm1, DWORD PTR __real@40800000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+88
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1966
	movss	xmm2, DWORD PTR __real@41900000
	movss	xmm1, DWORD PTR __real@425c0000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+96
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41100000
	movss	xmm1, DWORD PTR __real@41b80000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+104
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR __real@41300000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+112
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1967
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@42920000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+120
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41880000
	movss	xmm1, DWORD PTR __real@41880000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+128
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41000000
	movss	xmm1, DWORD PTR __real@41000000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+136
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1968
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@425c0000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+144
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41880000
	movss	xmm1, DWORD PTR __real@41880000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+152
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41000000
	movss	xmm1, DWORD PTR __real@41000000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+160
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1969
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@42b60000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+168
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR __real@41b00000
	movss	xmm1, DWORD PTR __real@41880000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+176
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@40a00000
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+184
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	lea	r9, OFFSET FLAT:??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
	mov	r8d, 3
	mov	edx, 8
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A+192
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??__EFONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@YAXXZ ENDP	; `dynamic initializer for 'FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA''
text$di	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@M@@YAMMMM@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@M@@YAMMMM@Z PROC				; ImClamp<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR mn$[rbp]
	comiss	xmm0, DWORD PTR v$[rbp]
	jbe	SHORT $LN5@ImClamp
	movss	xmm0, DWORD PTR mn$[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	movss	xmm0, DWORD PTR v$[rbp]
	comiss	xmm0, DWORD PTR mx$[rbp]
	jbe	SHORT $LN3@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	movss	xmm0, DWORD PTR v$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
$LN4@ImClamp:
	movss	xmm0, DWORD PTR tv66[rbp]
	movss	DWORD PTR tv67[rbp], xmm0
$LN6@ImClamp:
	movss	xmm0, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@M@@YAMMMM@Z ENDP				; ImClamp<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FixRectCornerFlags@@YAHH@Z
_TEXT	SEGMENT
flags$ = 224
?FixRectCornerFlags@@YAHH@Z PROC			; FixRectCornerFlags, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1319
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1323
	cmp	DWORD PTR flags$[rbp], -1
	jne	SHORT $LN2@FixRectCor
; Line 1324
	mov	eax, 240				; 000000f0H
	jmp	SHORT $LN1@FixRectCor
$LN2@FixRectCor:
; Line 1335
	cmp	DWORD PTR flags$[rbp], 1
	jl	SHORT $LN3@FixRectCor
	cmp	DWORD PTR flags$[rbp], 15
	jg	SHORT $LN3@FixRectCor
; Line 1336
	mov	eax, DWORD PTR flags$[rbp]
	shl	eax, 4
	jmp	SHORT $LN1@FixRectCor
$LN3@FixRectCor:
; Line 1343
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 15
	test	eax, eax
	jne	SHORT $LN6@FixRectCor
	lea	rax, OFFSET FLAT:??_C@_0DF@FNKJFHEE@Misuse?5of?5legacy?5hardcoded?5ImDr@
	test	rax, rax
	jne	SHORT $LN7@FixRectCor
$LN6@FixRectCor:
	mov	eax, DWORD PTR ?__LINE__Var@?0??FixRectCornerFlags@@YAHH@Z@4JA
	add	eax, 24
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JM@GAJOFMMN@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA0?$AAx?$AA0?$AAF?$AA?$CJ?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@FixRectCor:
; Line 1345
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 496				; 000001f0H
	test	eax, eax
	jne	SHORT $LN4@FixRectCor
; Line 1346
	mov	eax, DWORD PTR flags$[rbp]
	or	eax, 240				; 000000f0H
	mov	DWORD PTR flags$[rbp], eax
$LN4@FixRectCor:
; Line 1348
	mov	eax, DWORD PTR flags$[rbp]
$LN1@FixRectCor:
; Line 1349
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?FixRectCornerFlags@@YAHH@Z ENDP			; FixRectCornerFlags
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z
_TEXT	SEGMENT
dx$ = 4
dy$ = 36
det$ = 68
x12$1 = 100
y12$2 = 132
x23$3 = 164
y23$4 = 196
x123$5 = 228
y123$6 = 260
$T7 = 484
path$ = 544
x1$ = 552
y1$ = 560
x2$ = 568
y2$ = 576
x3$ = 584
y3$ = 592
tess_tol$ = 600
level$ = 608
?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z PROC ; PathBezierQuadraticCurveToCasteljau, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1270
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1271
	movss	xmm0, DWORD PTR x3$[rbp]
	subss	xmm0, DWORD PTR x1$[rbp]
	movss	DWORD PTR dx$[rbp], xmm0
	movss	xmm0, DWORD PTR y3$[rbp]
	subss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR dy$[rbp], xmm0
; Line 1272
	movss	xmm0, DWORD PTR x2$[rbp]
	subss	xmm0, DWORD PTR x3$[rbp]
	mulss	xmm0, DWORD PTR dy$[rbp]
	movss	xmm1, DWORD PTR y2$[rbp]
	subss	xmm1, DWORD PTR y3$[rbp]
	mulss	xmm1, DWORD PTR dx$[rbp]
	subss	xmm0, xmm1
	movss	DWORD PTR det$[rbp], xmm0
; Line 1273
	movss	xmm0, DWORD PTR det$[rbp]
	mulss	xmm0, DWORD PTR det$[rbp]
	mulss	xmm0, DWORD PTR __real@40800000
	movss	xmm1, DWORD PTR dx$[rbp]
	mulss	xmm1, DWORD PTR dx$[rbp]
	movss	xmm2, DWORD PTR dy$[rbp]
	mulss	xmm2, DWORD PTR dy$[rbp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR tess_tol$[rbp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@PathBezier
; Line 1275
	movss	xmm2, DWORD PTR y3$[rbp]
	movss	xmm1, DWORD PTR x3$[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR path$[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1276
	jmp	$LN3@PathBezier
$LN2@PathBezier:
; Line 1277
	cmp	DWORD PTR level$[rbp], 10
	jge	$LN4@PathBezier
; Line 1279
	movss	xmm0, DWORD PTR x1$[rbp]
	addss	xmm0, DWORD PTR x2$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x12$1[rbp], xmm0
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR y2$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y12$2[rbp], xmm0
; Line 1280
	movss	xmm0, DWORD PTR x2$[rbp]
	addss	xmm0, DWORD PTR x3$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x23$3[rbp], xmm0
	movss	xmm0, DWORD PTR y2$[rbp]
	addss	xmm0, DWORD PTR y3$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y23$4[rbp], xmm0
; Line 1281
	movss	xmm0, DWORD PTR x12$1[rbp]
	addss	xmm0, DWORD PTR x23$3[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x123$5[rbp], xmm0
	movss	xmm0, DWORD PTR y12$2[rbp]
	addss	xmm0, DWORD PTR y23$4[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y123$6[rbp], xmm0
; Line 1282
	mov	eax, DWORD PTR level$[rbp]
	inc	eax
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR tess_tol$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR y123$6[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x123$5[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y12$2[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x12$1[rbp]
	movss	xmm2, DWORD PTR y1$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	mov	rcx, QWORD PTR path$[rbp]
	call	?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ; PathBezierQuadraticCurveToCasteljau
; Line 1283
	mov	eax, DWORD PTR level$[rbp]
	inc	eax
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR tess_tol$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR y3$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y23$4[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x23$3[rbp]
	movss	xmm2, DWORD PTR y123$6[rbp]
	movss	xmm1, DWORD PTR x123$5[rbp]
	mov	rcx, QWORD PTR path$[rbp]
	call	?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ; PathBezierQuadraticCurveToCasteljau
$LN4@PathBezier:
$LN3@PathBezier:
; Line 1285
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ENDP ; PathBezierQuadraticCurveToCasteljau
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z
_TEXT	SEGMENT
dx$ = 4
dy$ = 36
d2$ = 68
d3$ = 100
x12$1 = 132
y12$2 = 164
x23$3 = 196
y23$4 = 228
x34$5 = 260
y34$6 = 292
x123$7 = 324
y123$8 = 356
x234$9 = 388
y234$10 = 420
x1234$11 = 452
y1234$12 = 484
$T13 = 900
tv81 = 916
tv78 = 916
path$ = 960
x1$ = 968
y1$ = 976
x2$ = 984
y2$ = 992
x3$ = 1000
y3$ = 1008
x4$ = 1016
y4$ = 1024
tess_tol$ = 1032
level$ = 1040
?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z PROC ; PathBezierCubicCurveToCasteljau, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1245
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1032				; 00000408H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1246
	movss	xmm0, DWORD PTR x4$[rbp]
	subss	xmm0, DWORD PTR x1$[rbp]
	movss	DWORD PTR dx$[rbp], xmm0
; Line 1247
	movss	xmm0, DWORD PTR y4$[rbp]
	subss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR dy$[rbp], xmm0
; Line 1248
	movss	xmm0, DWORD PTR x2$[rbp]
	subss	xmm0, DWORD PTR x4$[rbp]
	mulss	xmm0, DWORD PTR dy$[rbp]
	movss	xmm1, DWORD PTR y2$[rbp]
	subss	xmm1, DWORD PTR y4$[rbp]
	mulss	xmm1, DWORD PTR dx$[rbp]
	subss	xmm0, xmm1
	movss	DWORD PTR d2$[rbp], xmm0
; Line 1249
	movss	xmm0, DWORD PTR x3$[rbp]
	subss	xmm0, DWORD PTR x4$[rbp]
	mulss	xmm0, DWORD PTR dy$[rbp]
	movss	xmm1, DWORD PTR y3$[rbp]
	subss	xmm1, DWORD PTR y4$[rbp]
	mulss	xmm1, DWORD PTR dx$[rbp]
	subss	xmm0, xmm1
	movss	DWORD PTR d3$[rbp], xmm0
; Line 1250
	movss	xmm0, DWORD PTR d2$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN6@PathBezier
	movss	xmm0, DWORD PTR d2$[rbp]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN7@PathBezier
$LN6@PathBezier:
	movss	xmm0, DWORD PTR d2$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv78[rbp], xmm0
$LN7@PathBezier:
	movss	xmm0, DWORD PTR tv78[rbp]
	movss	DWORD PTR d2$[rbp], xmm0
; Line 1251
	movss	xmm0, DWORD PTR d3$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN8@PathBezier
	movss	xmm0, DWORD PTR d3$[rbp]
	movss	DWORD PTR tv81[rbp], xmm0
	jmp	SHORT $LN9@PathBezier
$LN8@PathBezier:
	movss	xmm0, DWORD PTR d3$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv81[rbp], xmm0
$LN9@PathBezier:
	movss	xmm0, DWORD PTR tv81[rbp]
	movss	DWORD PTR d3$[rbp], xmm0
; Line 1252
	movss	xmm0, DWORD PTR d2$[rbp]
	addss	xmm0, DWORD PTR d3$[rbp]
	movss	xmm1, DWORD PTR d2$[rbp]
	addss	xmm1, DWORD PTR d3$[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR dx$[rbp]
	mulss	xmm1, DWORD PTR dx$[rbp]
	movss	xmm2, DWORD PTR dy$[rbp]
	mulss	xmm2, DWORD PTR dy$[rbp]
	addss	xmm1, xmm2
	movss	xmm2, DWORD PTR tess_tol$[rbp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	comiss	xmm1, xmm0
	jbe	SHORT $LN2@PathBezier
; Line 1254
	movss	xmm2, DWORD PTR y4$[rbp]
	movss	xmm1, DWORD PTR x4$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR path$[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1255
	jmp	$LN3@PathBezier
$LN2@PathBezier:
; Line 1256
	cmp	DWORD PTR level$[rbp], 10
	jge	$LN4@PathBezier
; Line 1258
	movss	xmm0, DWORD PTR x1$[rbp]
	addss	xmm0, DWORD PTR x2$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x12$1[rbp], xmm0
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR y2$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y12$2[rbp], xmm0
; Line 1259
	movss	xmm0, DWORD PTR x2$[rbp]
	addss	xmm0, DWORD PTR x3$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x23$3[rbp], xmm0
	movss	xmm0, DWORD PTR y2$[rbp]
	addss	xmm0, DWORD PTR y3$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y23$4[rbp], xmm0
; Line 1260
	movss	xmm0, DWORD PTR x3$[rbp]
	addss	xmm0, DWORD PTR x4$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x34$5[rbp], xmm0
	movss	xmm0, DWORD PTR y3$[rbp]
	addss	xmm0, DWORD PTR y4$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y34$6[rbp], xmm0
; Line 1261
	movss	xmm0, DWORD PTR x12$1[rbp]
	addss	xmm0, DWORD PTR x23$3[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x123$7[rbp], xmm0
	movss	xmm0, DWORD PTR y12$2[rbp]
	addss	xmm0, DWORD PTR y23$4[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y123$8[rbp], xmm0
; Line 1262
	movss	xmm0, DWORD PTR x23$3[rbp]
	addss	xmm0, DWORD PTR x34$5[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x234$9[rbp], xmm0
	movss	xmm0, DWORD PTR y23$4[rbp]
	addss	xmm0, DWORD PTR y34$6[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y234$10[rbp], xmm0
; Line 1263
	movss	xmm0, DWORD PTR x123$7[rbp]
	addss	xmm0, DWORD PTR x234$9[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR x1234$11[rbp], xmm0
	movss	xmm0, DWORD PTR y123$8[rbp]
	addss	xmm0, DWORD PTR y234$10[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR y1234$12[rbp], xmm0
; Line 1264
	mov	eax, DWORD PTR level$[rbp]
	inc	eax
	mov	DWORD PTR [rsp+80], eax
	movss	xmm0, DWORD PTR tess_tol$[rbp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR y1234$12[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR x1234$11[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR y123$8[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x123$7[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y12$2[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x12$1[rbp]
	movss	xmm2, DWORD PTR y1$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	mov	rcx, QWORD PTR path$[rbp]
	call	?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ; PathBezierCubicCurveToCasteljau
; Line 1265
	mov	eax, DWORD PTR level$[rbp]
	inc	eax
	mov	DWORD PTR [rsp+80], eax
	movss	xmm0, DWORD PTR tess_tol$[rbp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR y4$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR x4$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR y34$6[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x34$5[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y234$10[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x234$9[rbp]
	movss	xmm2, DWORD PTR y1234$12[rbp]
	movss	xmm1, DWORD PTR x1234$11[rbp]
	mov	rcx, QWORD PTR path$[rbp]
	call	?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ; PathBezierCubicCurveToCasteljau
$LN4@PathBezier:
$LN3@PathBezier:
; Line 1267
	lea	rsp, QWORD PTR [rbp+936]
	pop	rdi
	pop	rbp
	ret	0
?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ENDP ; PathBezierCubicCurveToCasteljau
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMax@H@@YAHHH@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@H@@YAHHH@Z PROC				; ImMax<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 413
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR rhs$[rbp]
	cmp	DWORD PTR lhs$[rbp], eax
	jl	SHORT $LN3@ImMax
	mov	eax, DWORD PTR lhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	mov	eax, DWORD PTR rhs$[rbp]
	mov	DWORD PTR tv65[rbp], eax
$LN4@ImMax:
	mov	eax, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMax@H@@YAHHH@Z ENDP				; ImMax<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImClamp@H@@YAHHHH@Z
_TEXT	SEGMENT
tv67 = 192
tv66 = 196
v$ = 240
mn$ = 248
mx$ = 256
??$ImClamp@H@@YAHHHH@Z PROC				; ImClamp<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 414
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR mn$[rbp]
	cmp	DWORD PTR v$[rbp], eax
	jge	SHORT $LN5@ImClamp
	mov	eax, DWORD PTR mn$[rbp]
	mov	DWORD PTR tv67[rbp], eax
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	eax, DWORD PTR mx$[rbp]
	cmp	DWORD PTR v$[rbp], eax
	jle	SHORT $LN3@ImClamp
	mov	eax, DWORD PTR mx$[rbp]
	mov	DWORD PTR tv66[rbp], eax
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	eax, DWORD PTR v$[rbp]
	mov	DWORD PTR tv66[rbp], eax
$LN4@ImClamp:
	mov	eax, DWORD PTR tv66[rbp]
	mov	DWORD PTR tv67[rbp], eax
$LN6@ImClamp:
	mov	eax, DWORD PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImClamp@H@@YAHHHH@Z ENDP				; ImClamp<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__oversample_shift@@YAMH@Z
_TEXT	SEGMENT
oversample$ = 224
?stbtt__oversample_shift@@YAMH@Z PROC			; stbtt__oversample_shift, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3977
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3978
	cmp	DWORD PTR oversample$[rbp], 0
	jne	SHORT $LN2@stbtt__ove
; Line 3979
	xorps	xmm0, xmm0
	jmp	SHORT $LN1@stbtt__ove
$LN2@stbtt__ove:
; Line 3985
	mov	eax, DWORD PTR oversample$[rbp]
	dec	eax
	neg	eax
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR oversample$[rbp]
	movss	xmm2, DWORD PTR __real@40000000
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	divss	xmm0, xmm1
$LN1@stbtt__ove:
; Line 3986
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__oversample_shift@@YAMH@Z ENDP			; stbtt__oversample_shift
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
_TEXT	SEGMENT
buffer$ = 8
safe_h$ = 36
j$ = 68
i$4 = 100
total$5 = 132
tv71 = 340
tv73 = 344
__$ArrayPad$ = 352
pixels$ = 400
w$ = 408
h$ = 416
stride_in_bytes$ = 424
kernel_width$ = 432
?stbtt__v_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__v_prefilter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3915
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+440]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3917
	mov	eax, DWORD PTR kernel_width$[rbp]
	mov	ecx, DWORD PTR h$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_h$[rbp], eax
; Line 3919
	lea	rax, QWORD PTR buffer$[rbp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
; Line 3920
	mov	DWORD PTR j$[rbp], 0
	jmp	SHORT $LN4@stbtt__v_p
$LN2@stbtt__v_p:
	mov	eax, DWORD PTR j$[rbp]
	inc	eax
	mov	DWORD PTR j$[rbp], eax
$LN4@stbtt__v_p:
	mov	eax, DWORD PTR w$[rbp]
	cmp	DWORD PTR j$[rbp], eax
	jge	$LN3@stbtt__v_p
; Line 3923
	mov	eax, DWORD PTR kernel_width$[rbp]
	mov	QWORD PTR tv73[rbp], rax
	lea	rcx, QWORD PTR buffer$[rbp]
	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, QWORD PTR tv73[rbp]
	rep stosb
; Line 3925
	mov	DWORD PTR total$5[rbp], 0
; Line 3928
	mov	eax, DWORD PTR kernel_width$[rbp]
	mov	DWORD PTR tv71[rbp], eax
	cmp	DWORD PTR tv71[rbp], 2
	je	SHORT $LN28@stbtt__v_p
	cmp	DWORD PTR tv71[rbp], 3
	je	$LN29@stbtt__v_p
	cmp	DWORD PTR tv71[rbp], 4
	je	$LN30@stbtt__v_p
	cmp	DWORD PTR tv71[rbp], 5
	je	$LN31@stbtt__v_p
	jmp	$LN32@stbtt__v_p
$LN28@stbtt__v_p:
; Line 3930
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN9@stbtt__v_p
$LN7@stbtt__v_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN9@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	$LN8@stbtt__v_p
; Line 3931
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3932
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3933
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 2
	div	ecx
	mov	ecx, DWORD PTR i$4[rbp]
	imul	ecx, DWORD PTR stride_in_bytes$[rbp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3934
	jmp	$LN7@stbtt__v_p
$LN8@stbtt__v_p:
; Line 3935
	jmp	$LN5@stbtt__v_p
$LN29@stbtt__v_p:
; Line 3937
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN12@stbtt__v_p
$LN10@stbtt__v_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN12@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	$LN11@stbtt__v_p
; Line 3938
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3939
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3940
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 3
	div	ecx
	mov	ecx, DWORD PTR i$4[rbp]
	imul	ecx, DWORD PTR stride_in_bytes$[rbp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3941
	jmp	$LN10@stbtt__v_p
$LN11@stbtt__v_p:
; Line 3942
	jmp	$LN5@stbtt__v_p
$LN30@stbtt__v_p:
; Line 3944
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN15@stbtt__v_p
$LN13@stbtt__v_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN15@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	$LN14@stbtt__v_p
; Line 3945
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3946
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3947
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 4
	div	ecx
	mov	ecx, DWORD PTR i$4[rbp]
	imul	ecx, DWORD PTR stride_in_bytes$[rbp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3948
	jmp	$LN13@stbtt__v_p
$LN14@stbtt__v_p:
; Line 3949
	jmp	$LN5@stbtt__v_p
$LN31@stbtt__v_p:
; Line 3951
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN18@stbtt__v_p
$LN16@stbtt__v_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN18@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	$LN17@stbtt__v_p
; Line 3952
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3953
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3954
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 5
	div	ecx
	mov	ecx, DWORD PTR i$4[rbp]
	imul	ecx, DWORD PTR stride_in_bytes$[rbp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3955
	jmp	$LN16@stbtt__v_p
$LN17@stbtt__v_p:
; Line 3956
	jmp	$LN5@stbtt__v_p
$LN32@stbtt__v_p:
; Line 3958
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN21@stbtt__v_p
$LN19@stbtt__v_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN21@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	$LN20@stbtt__v_p
; Line 3959
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3960
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3961
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	div	DWORD PTR kernel_width$[rbp]
	mov	ecx, DWORD PTR i$4[rbp]
	imul	ecx, DWORD PTR stride_in_bytes$[rbp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3962
	jmp	$LN19@stbtt__v_p
$LN20@stbtt__v_p:
$LN5@stbtt__v_p:
; Line 3966
	jmp	SHORT $LN24@stbtt__v_p
$LN22@stbtt__v_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN24@stbtt__v_p:
	mov	eax, DWORD PTR h$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jge	$LN23@stbtt__v_p
$LN27@stbtt__v_p:
; Line 3967
	mov	eax, DWORD PTR i$4[rbp]
	imul	eax, DWORD PTR stride_in_bytes$[rbp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN34@stbtt__v_p
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__v_prefilter@@YAXPEAEHHHI@Z@4JA
	add	eax, 52					; 00000034H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@LAPBLJ@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$CK?$AAs?$AAt?$AAr?$AAi?$AAd?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN34@stbtt__v_p:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN27@stbtt__v_p
; Line 3968
	mov	eax, DWORD PTR i$4[rbp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rbp+rax]
	mov	ecx, DWORD PTR total$5[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3969
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	div	DWORD PTR kernel_width$[rbp]
	mov	ecx, DWORD PTR i$4[rbp]
	imul	ecx, DWORD PTR stride_in_bytes$[rbp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3970
	jmp	$LN22@stbtt__v_p
$LN23@stbtt__v_p:
; Line 3972
	mov	rax, QWORD PTR pixels$[rbp]
	inc	rax
	mov	QWORD PTR pixels$[rbp], rax
; Line 3973
	jmp	$LN2@stbtt__v_p
$LN3@stbtt__v_p:
; Line 3974
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__v_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__v_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
_TEXT	SEGMENT
buffer$ = 8
safe_w$ = 36
j$ = 68
i$4 = 100
total$5 = 132
tv71 = 340
tv73 = 344
__$ArrayPad$ = 352
pixels$ = 400
w$ = 408
h$ = 416
stride_in_bytes$ = 424
kernel_width$ = 432
?stbtt__h_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__h_prefilter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3853
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+440]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3855
	mov	eax, DWORD PTR kernel_width$[rbp]
	mov	ecx, DWORD PTR w$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_w$[rbp], eax
; Line 3857
	lea	rax, QWORD PTR buffer$[rbp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
; Line 3858
	mov	DWORD PTR j$[rbp], 0
	jmp	SHORT $LN4@stbtt__h_p
$LN2@stbtt__h_p:
	mov	eax, DWORD PTR j$[rbp]
	inc	eax
	mov	DWORD PTR j$[rbp], eax
$LN4@stbtt__h_p:
	mov	eax, DWORD PTR h$[rbp]
	cmp	DWORD PTR j$[rbp], eax
	jge	$LN3@stbtt__h_p
; Line 3861
	mov	eax, DWORD PTR kernel_width$[rbp]
	mov	QWORD PTR tv73[rbp], rax
	lea	rcx, QWORD PTR buffer$[rbp]
	mov	rdi, rcx
	xor	eax, eax
	mov	rcx, QWORD PTR tv73[rbp]
	rep stosb
; Line 3863
	mov	DWORD PTR total$5[rbp], 0
; Line 3866
	mov	eax, DWORD PTR kernel_width$[rbp]
	mov	DWORD PTR tv71[rbp], eax
	cmp	DWORD PTR tv71[rbp], 2
	je	SHORT $LN28@stbtt__h_p
	cmp	DWORD PTR tv71[rbp], 3
	je	$LN29@stbtt__h_p
	cmp	DWORD PTR tv71[rbp], 4
	je	$LN30@stbtt__h_p
	cmp	DWORD PTR tv71[rbp], 5
	je	$LN31@stbtt__h_p
	jmp	$LN32@stbtt__h_p
$LN28@stbtt__h_p:
; Line 3868
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN9@stbtt__h_p
$LN7@stbtt__h_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN9@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	SHORT $LN8@stbtt__h_p
; Line 3869
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3870
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3871
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 2
	div	ecx
	movsxd	rcx, DWORD PTR i$4[rbp]
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3872
	jmp	$LN7@stbtt__h_p
$LN8@stbtt__h_p:
; Line 3873
	jmp	$LN5@stbtt__h_p
$LN29@stbtt__h_p:
; Line 3875
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN12@stbtt__h_p
$LN10@stbtt__h_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN12@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	SHORT $LN11@stbtt__h_p
; Line 3876
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3877
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3878
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 3
	div	ecx
	movsxd	rcx, DWORD PTR i$4[rbp]
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3879
	jmp	$LN10@stbtt__h_p
$LN11@stbtt__h_p:
; Line 3880
	jmp	$LN5@stbtt__h_p
$LN30@stbtt__h_p:
; Line 3882
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN15@stbtt__h_p
$LN13@stbtt__h_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN15@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	SHORT $LN14@stbtt__h_p
; Line 3883
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3884
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3885
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 4
	div	ecx
	movsxd	rcx, DWORD PTR i$4[rbp]
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3886
	jmp	$LN13@stbtt__h_p
$LN14@stbtt__h_p:
; Line 3887
	jmp	$LN5@stbtt__h_p
$LN31@stbtt__h_p:
; Line 3889
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN18@stbtt__h_p
$LN16@stbtt__h_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN18@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	SHORT $LN17@stbtt__h_p
; Line 3890
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3891
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3892
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	mov	ecx, 5
	div	ecx
	movsxd	rcx, DWORD PTR i$4[rbp]
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3893
	jmp	$LN16@stbtt__h_p
$LN17@stbtt__h_p:
; Line 3894
	jmp	$LN5@stbtt__h_p
$LN32@stbtt__h_p:
; Line 3896
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN21@stbtt__h_p
$LN19@stbtt__h_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN21@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jg	SHORT $LN20@stbtt__h_p
; Line 3897
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$4[rbp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rbp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$5[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3898
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	ecx, DWORD PTR kernel_width$[rbp]
	mov	edx, DWORD PTR i$4[rbp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rbp+rcx], al
; Line 3899
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	div	DWORD PTR kernel_width$[rbp]
	movsxd	rcx, DWORD PTR i$4[rbp]
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3900
	jmp	$LN19@stbtt__h_p
$LN20@stbtt__h_p:
$LN5@stbtt__h_p:
; Line 3904
	jmp	SHORT $LN24@stbtt__h_p
$LN22@stbtt__h_p:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN24@stbtt__h_p:
	mov	eax, DWORD PTR w$[rbp]
	cmp	DWORD PTR i$4[rbp], eax
	jge	SHORT $LN23@stbtt__h_p
$LN27@stbtt__h_p:
; Line 3905
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN34@stbtt__h_p
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__h_prefilter@@YAXPEAEHHHI@Z@4JA
	add	eax, 52					; 00000034H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BO@BDJAMAMF@?$AAp?$AAi?$AAx?$AAe?$AAl?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN34@stbtt__h_p:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN27@stbtt__h_p
; Line 3906
	mov	eax, DWORD PTR i$4[rbp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rbp+rax]
	mov	ecx, DWORD PTR total$5[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$5[rbp], eax
; Line 3907
	xor	edx, edx
	mov	eax, DWORD PTR total$5[rbp]
	div	DWORD PTR kernel_width$[rbp]
	movsxd	rcx, DWORD PTR i$4[rbp]
	mov	rdx, QWORD PTR pixels$[rbp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3908
	jmp	$LN22@stbtt__h_p
$LN23@stbtt__h_p:
; Line 3910
	movsxd	rax, DWORD PTR stride_in_bytes$[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixels$[rbp], rax
; Line 3911
	jmp	$LN2@stbtt__h_p
$LN3@stbtt__h_p:
; Line 3912
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__h_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__h_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
_TEXT	SEGMENT
points$ = 8
num_points$ = 36
objspace_flatness_squared$ = 68
i$ = 100
n$ = 132
start$ = 164
pass$ = 196
x$4 = 228
y$5 = 260
tv167 = 468
tv149 = 468
tv95 = 468
__$ArrayPad$ = 472
vertices$ = 528
num_verts$ = 536
objspace_flatness$ = 544
contour_lengths$ = 552
num_contours$ = 560
userdata$ = 568
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z PROC ; stbtt_FlattenCurves, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3459
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 600				; 00000258H
	lea	rbp, QWORD PTR [rsp+96]
	movaps	XMMWORD PTR [rbp+480], xmm6
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 72					; 00000048H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+632]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3460
	mov	QWORD PTR points$[rbp], 0
; Line 3461
	mov	DWORD PTR num_points$[rbp], 0
; Line 3463
	movss	xmm0, DWORD PTR objspace_flatness$[rbp]
	mulss	xmm0, DWORD PTR objspace_flatness$[rbp]
	movss	DWORD PTR objspace_flatness_squared$[rbp], xmm0
; Line 3464
	mov	DWORD PTR n$[rbp], 0
	mov	DWORD PTR start$[rbp], 0
; Line 3467
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt_Flat
$LN2@stbtt_Flat:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stbtt_Flat
; Line 3468
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 1
	jne	SHORT $LN13@stbtt_Flat
; Line 3469
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	mov	DWORD PTR n$[rbp], eax
$LN13@stbtt_Flat:
	jmp	SHORT $LN2@stbtt_Flat
$LN3@stbtt_Flat:
; Line 3471
	mov	rax, QWORD PTR num_contours$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 3472
	cmp	DWORD PTR n$[rbp], 0
	jne	SHORT $LN14@stbtt_Flat
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN14@stbtt_Flat:
; Line 3474
	movsxd	rax, DWORD PTR n$[rbp]
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	rcx, QWORD PTR contour_lengths$[rbp]
	mov	QWORD PTR [rcx], rax
; Line 3476
	mov	rax, QWORD PTR contour_lengths$[rbp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN15@stbtt_Flat
; Line 3477
	mov	rax, QWORD PTR num_contours$[rbp]
	mov	DWORD PTR [rax], 0
; Line 3478
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN15@stbtt_Flat:
; Line 3482
	mov	DWORD PTR pass$[rbp], 0
	jmp	SHORT $LN7@stbtt_Flat
$LN5@stbtt_Flat:
	mov	eax, DWORD PTR pass$[rbp]
	inc	eax
	mov	DWORD PTR pass$[rbp], eax
$LN7@stbtt_Flat:
	cmp	DWORD PTR pass$[rbp], 2
	jge	$LN6@stbtt_Flat
; Line 3483
	xorps	xmm0, xmm0
	movss	DWORD PTR x$4[rbp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR y$5[rbp], xmm0
; Line 3484
	cmp	DWORD PTR pass$[rbp], 1
	jne	SHORT $LN16@stbtt_Flat
; Line 3485
	movsxd	rax, DWORD PTR num_points$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR points$[rbp], rax
; Line 3486
	cmp	QWORD PTR points$[rbp], 0
	jne	SHORT $LN17@stbtt_Flat
	jmp	$LN18@stbtt_Flat
	jmp	$error$25
$LN17@stbtt_Flat:
$LN16@stbtt_Flat:
; Line 3488
	mov	DWORD PTR num_points$[rbp], 0
; Line 3489
	mov	DWORD PTR n$[rbp], -1
; Line 3490
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN10@stbtt_Flat
$LN8@stbtt_Flat:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN10@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN9@stbtt_Flat
; Line 3491
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR tv95[rbp], al
	cmp	BYTE PTR tv95[rbp], 1
	je	SHORT $LN19@stbtt_Flat
	cmp	BYTE PTR tv95[rbp], 2
	je	$LN21@stbtt_Flat
	cmp	BYTE PTR tv95[rbp], 3
	je	$LN22@stbtt_Flat
	cmp	BYTE PTR tv95[rbp], 4
	je	$LN23@stbtt_Flat
	jmp	$LN11@stbtt_Flat
$LN19@stbtt_Flat:
; Line 3494
	cmp	DWORD PTR n$[rbp], 0
	jl	SHORT $LN20@stbtt_Flat
; Line 3495
	mov	eax, DWORD PTR start$[rbp]
	mov	ecx, DWORD PTR num_points$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rbp]
	mov	rdx, QWORD PTR contour_lengths$[rbp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN20@stbtt_Flat:
; Line 3496
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	mov	DWORD PTR n$[rbp], eax
; Line 3497
	mov	eax, DWORD PTR num_points$[rbp]
	mov	DWORD PTR start$[rbp], eax
; Line 3499
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$4[rbp], xmm0
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$5[rbp], xmm0
; Line 3500
	mov	eax, DWORD PTR num_points$[rbp]
	mov	DWORD PTR tv149[rbp], eax
	mov	eax, DWORD PTR num_points$[rbp]
	inc	eax
	mov	DWORD PTR num_points$[rbp], eax
	movss	xmm3, DWORD PTR y$5[rbp]
	movss	xmm2, DWORD PTR x$4[rbp]
	mov	edx, DWORD PTR tv149[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3501
	jmp	$LN11@stbtt_Flat
$LN21@stbtt_Flat:
; Line 3503
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$4[rbp], xmm0
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$5[rbp], xmm0
; Line 3504
	mov	eax, DWORD PTR num_points$[rbp]
	mov	DWORD PTR tv167[rbp], eax
	mov	eax, DWORD PTR num_points$[rbp]
	inc	eax
	mov	DWORD PTR num_points$[rbp], eax
	movss	xmm3, DWORD PTR y$5[rbp]
	movss	xmm2, DWORD PTR x$4[rbp]
	mov	edx, DWORD PTR tv167[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3505
	jmp	$LN11@stbtt_Flat
$LN22@stbtt_Flat:
; Line 3507
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm3, eax
	mov	DWORD PTR [rsp+72], 0
	movss	xmm4, DWORD PTR objspace_flatness_squared$[rbp]
	movss	DWORD PTR [rsp+64], xmm4
	movss	DWORD PTR [rsp+56], xmm0
	movss	DWORD PTR [rsp+48], xmm1
	movss	DWORD PTR [rsp+40], xmm2
	movss	DWORD PTR [rsp+32], xmm3
	movss	xmm3, DWORD PTR y$5[rbp]
	movss	xmm2, DWORD PTR x$4[rbp]
	lea	rdx, QWORD PTR num_points$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3511
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$4[rbp], xmm0
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$5[rbp], xmm0
; Line 3512
	jmp	$LN11@stbtt_Flat
$LN23@stbtt_Flat:
; Line 3514
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+10]
	cvtsi2ss xmm2, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+8]
	cvtsi2ss xmm3, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+6]
	cvtsi2ss xmm4, eax
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+4]
	cvtsi2ss xmm5, eax
	mov	DWORD PTR [rsp+88], 0
	movss	xmm6, DWORD PTR objspace_flatness_squared$[rbp]
	movss	DWORD PTR [rsp+80], xmm6
	movss	DWORD PTR [rsp+72], xmm0
	movss	DWORD PTR [rsp+64], xmm1
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm3
	movss	DWORD PTR [rsp+40], xmm4
	movss	DWORD PTR [rsp+32], xmm5
	movss	xmm3, DWORD PTR y$5[rbp]
	movss	xmm2, DWORD PTR x$4[rbp]
	lea	rdx, QWORD PTR num_points$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3519
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$4[rbp], xmm0
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$5[rbp], xmm0
$LN11@stbtt_Flat:
; Line 3522
	jmp	$LN8@stbtt_Flat
$LN9@stbtt_Flat:
; Line 3523
	mov	eax, DWORD PTR start$[rbp]
	mov	ecx, DWORD PTR num_points$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rbp]
	mov	rdx, QWORD PTR contour_lengths$[rbp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 3524
	jmp	$LN5@stbtt_Flat
$LN6@stbtt_Flat:
; Line 3526
	mov	rax, QWORD PTR points$[rbp]
	jmp	SHORT $LN1@stbtt_Flat
$LN18@stbtt_Flat:
$error$25:
; Line 3528
	mov	rcx, QWORD PTR points$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 3529
	mov	rax, QWORD PTR contour_lengths$[rbp]
	mov	rcx, QWORD PTR [rax]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 3530
	mov	rax, QWORD PTR contour_lengths$[rbp]
	mov	QWORD PTR [rax], 0
; Line 3531
	mov	rax, QWORD PTR num_contours$[rbp]
	mov	DWORD PTR [rax], 0
; Line 3532
	xor	eax, eax
$LN1@stbtt_Flat:
; Line 3533
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-96]
	lea	rdx, OFFSET FLAT:?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	movaps	xmm6, XMMWORD PTR [rbp+480]
	lea	rsp, QWORD PTR [rbp+504]
	pop	rdi
	pop	rbp
	ret	0
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ENDP ; stbtt_FlattenCurves
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
_TEXT	SEGMENT
dx0$ = 4
dy0$ = 36
dx1$ = 68
dy1$ = 100
dx2$ = 132
dy2$ = 164
dx$ = 196
dy$ = 228
longlen$ = 260
shortlen$ = 292
flatness_squared$ = 324
x01$1 = 356
y01$2 = 388
x12$3 = 420
y12$4 = 452
x23$5 = 484
y23$6 = 516
xa$7 = 548
ya$8 = 580
xb$9 = 612
yb$10 = 644
mx$11 = 676
my$12 = 708
tv72 = 1108
tv82 = 1112
points$ = 1152
num_points$ = 1160
x0$ = 1168
y0$ = 1176
x1$ = 1184
y1$ = 1192
x2$ = 1200
y2$ = 1208
x3$ = 1216
y3$ = 1224
objspace_flatness_squared$ = 1232
n$ = 1240
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z PROC ; stbtt__tesselate_cubic, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3416
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1224				; 000004c8H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3418
	movss	xmm0, DWORD PTR x1$[rbp]
	subss	xmm0, DWORD PTR x0$[rbp]
	movss	DWORD PTR dx0$[rbp], xmm0
; Line 3419
	movss	xmm0, DWORD PTR y1$[rbp]
	subss	xmm0, DWORD PTR y0$[rbp]
	movss	DWORD PTR dy0$[rbp], xmm0
; Line 3420
	movss	xmm0, DWORD PTR x2$[rbp]
	subss	xmm0, DWORD PTR x1$[rbp]
	movss	DWORD PTR dx1$[rbp], xmm0
; Line 3421
	movss	xmm0, DWORD PTR y2$[rbp]
	subss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR dy1$[rbp], xmm0
; Line 3422
	movss	xmm0, DWORD PTR x3$[rbp]
	subss	xmm0, DWORD PTR x2$[rbp]
	movss	DWORD PTR dx2$[rbp], xmm0
; Line 3423
	movss	xmm0, DWORD PTR y3$[rbp]
	subss	xmm0, DWORD PTR y2$[rbp]
	movss	DWORD PTR dy2$[rbp], xmm0
; Line 3424
	movss	xmm0, DWORD PTR x3$[rbp]
	subss	xmm0, DWORD PTR x0$[rbp]
	movss	DWORD PTR dx$[rbp], xmm0
; Line 3425
	movss	xmm0, DWORD PTR y3$[rbp]
	subss	xmm0, DWORD PTR y0$[rbp]
	movss	DWORD PTR dy$[rbp], xmm0
; Line 3426
	movss	xmm0, DWORD PTR dx0$[rbp]
	mulss	xmm0, DWORD PTR dx0$[rbp]
	movss	xmm1, DWORD PTR dy0$[rbp]
	mulss	xmm1, DWORD PTR dy0$[rbp]
	addss	xmm0, xmm1
	call	sqrtf
	movss	DWORD PTR tv72[rbp], xmm0
	movss	xmm1, DWORD PTR dx1$[rbp]
	mulss	xmm1, DWORD PTR dx1$[rbp]
	movss	xmm2, DWORD PTR dy1$[rbp]
	mulss	xmm2, DWORD PTR dy1$[rbp]
	addss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	sqrtf
	movss	xmm1, DWORD PTR tv72[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv82[rbp], xmm0
	movss	xmm1, DWORD PTR dx2$[rbp]
	mulss	xmm1, DWORD PTR dx2$[rbp]
	movss	xmm2, DWORD PTR dy2$[rbp]
	mulss	xmm2, DWORD PTR dy2$[rbp]
	addss	xmm1, xmm2
	movaps	xmm0, xmm1
	call	sqrtf
	movss	xmm1, DWORD PTR tv82[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR longlen$[rbp], xmm0
; Line 3427
	movss	xmm0, DWORD PTR dx$[rbp]
	mulss	xmm0, DWORD PTR dx$[rbp]
	movss	xmm1, DWORD PTR dy$[rbp]
	mulss	xmm1, DWORD PTR dy$[rbp]
	addss	xmm0, xmm1
	call	sqrtf
	movss	DWORD PTR shortlen$[rbp], xmm0
; Line 3428
	movss	xmm0, DWORD PTR longlen$[rbp]
	mulss	xmm0, DWORD PTR longlen$[rbp]
	movss	xmm1, DWORD PTR shortlen$[rbp]
	mulss	xmm1, DWORD PTR shortlen$[rbp]
	subss	xmm0, xmm1
	movss	DWORD PTR flatness_squared$[rbp], xmm0
; Line 3430
	cmp	DWORD PTR n$[rbp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3431
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3433
	movss	xmm0, DWORD PTR flatness_squared$[rbp]
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rbp]
	jbe	$LN3@stbtt__tes
; Line 3434
	movss	xmm0, DWORD PTR x0$[rbp]
	addss	xmm0, DWORD PTR x1$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x01$1[rbp], xmm0
; Line 3435
	movss	xmm0, DWORD PTR y0$[rbp]
	addss	xmm0, DWORD PTR y1$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y01$2[rbp], xmm0
; Line 3436
	movss	xmm0, DWORD PTR x1$[rbp]
	addss	xmm0, DWORD PTR x2$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x12$3[rbp], xmm0
; Line 3437
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR y2$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y12$4[rbp], xmm0
; Line 3438
	movss	xmm0, DWORD PTR x2$[rbp]
	addss	xmm0, DWORD PTR x3$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR x23$5[rbp], xmm0
; Line 3439
	movss	xmm0, DWORD PTR y2$[rbp]
	addss	xmm0, DWORD PTR y3$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR y23$6[rbp], xmm0
; Line 3441
	movss	xmm0, DWORD PTR x01$1[rbp]
	addss	xmm0, DWORD PTR x12$3[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xa$7[rbp], xmm0
; Line 3442
	movss	xmm0, DWORD PTR y01$2[rbp]
	addss	xmm0, DWORD PTR y12$4[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR ya$8[rbp], xmm0
; Line 3443
	movss	xmm0, DWORD PTR x12$3[rbp]
	addss	xmm0, DWORD PTR x23$5[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR xb$9[rbp], xmm0
; Line 3444
	movss	xmm0, DWORD PTR y12$4[rbp]
	addss	xmm0, DWORD PTR y23$6[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR yb$10[rbp], xmm0
; Line 3446
	movss	xmm0, DWORD PTR xa$7[rbp]
	addss	xmm0, DWORD PTR xb$9[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR mx$11[rbp], xmm0
; Line 3447
	movss	xmm0, DWORD PTR ya$8[rbp]
	addss	xmm0, DWORD PTR yb$10[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR my$12[rbp], xmm0
; Line 3449
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rbp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR my$12[rbp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR mx$11[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR ya$8[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR xa$7[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR y01$2[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR x01$1[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y0$[rbp]
	movss	xmm2, DWORD PTR x0$[rbp]
	mov	rdx, QWORD PTR num_points$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3450
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	movss	xmm0, DWORD PTR objspace_flatness_squared$[rbp]
	movss	DWORD PTR [rsp+80], xmm0
	movss	xmm0, DWORD PTR y3$[rbp]
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR x3$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR y23$6[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR x23$5[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR yb$10[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR xb$9[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR my$12[rbp]
	movss	xmm2, DWORD PTR mx$11[rbp]
	mov	rdx, QWORD PTR num_points$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3451
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3452
	movss	xmm3, DWORD PTR y3$[rbp]
	movss	xmm2, DWORD PTR x3$[rbp]
	mov	rax, QWORD PTR num_points$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3453
	mov	rax, QWORD PTR num_points$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rbp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
$LN1@stbtt__tes:
; Line 3455
	lea	rsp, QWORD PTR [rbp+1128]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ENDP ; stbtt__tesselate_cubic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
_TEXT	SEGMENT
mx$ = 4
my$ = 36
dx$ = 68
dy$ = 100
points$ = 352
num_points$ = 360
x0$ = 368
y0$ = 376
x1$ = 384
y1$ = 392
x2$ = 400
y2$ = 408
objspace_flatness_squared$ = 416
n$ = 424
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z PROC ; stbtt__tesselate_curve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3396
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 408				; 00000198H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3398
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR x1$[rbp]
	movss	xmm1, DWORD PTR x0$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR x2$[rbp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR mx$[rbp], xmm0
; Line 3399
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR y1$[rbp]
	movss	xmm1, DWORD PTR y0$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	addss	xmm0, DWORD PTR y2$[rbp]
	divss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR my$[rbp], xmm0
; Line 3401
	movss	xmm0, DWORD PTR x0$[rbp]
	addss	xmm0, DWORD PTR x2$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR mx$[rbp]
	movss	DWORD PTR dx$[rbp], xmm0
; Line 3402
	movss	xmm0, DWORD PTR y0$[rbp]
	addss	xmm0, DWORD PTR y2$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	subss	xmm0, DWORD PTR my$[rbp]
	movss	DWORD PTR dy$[rbp], xmm0
; Line 3403
	cmp	DWORD PTR n$[rbp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3404
	mov	eax, 1
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3405
	movss	xmm0, DWORD PTR dx$[rbp]
	mulss	xmm0, DWORD PTR dx$[rbp]
	movss	xmm1, DWORD PTR dy$[rbp]
	mulss	xmm1, DWORD PTR dy$[rbp]
	addss	xmm0, xmm1
	comiss	xmm0, DWORD PTR objspace_flatness_squared$[rbp]
	jbe	$LN3@stbtt__tes
; Line 3406
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	movss	xmm0, DWORD PTR y0$[rbp]
	addss	xmm0, DWORD PTR y1$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x0$[rbp]
	addss	xmm1, DWORD PTR x1$[rbp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rbp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR my$[rbp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR mx$[rbp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR y0$[rbp]
	movss	xmm2, DWORD PTR x0$[rbp]
	mov	rdx, QWORD PTR num_points$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3407
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	movss	xmm0, DWORD PTR y1$[rbp]
	addss	xmm0, DWORD PTR y2$[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x1$[rbp]
	addss	xmm1, DWORD PTR x2$[rbp]
	divss	xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	movss	xmm2, DWORD PTR objspace_flatness_squared$[rbp]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR y2$[rbp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	xmm2, DWORD PTR x2$[rbp]
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR my$[rbp]
	movss	xmm2, DWORD PTR mx$[rbp]
	mov	rdx, QWORD PTR num_points$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3408
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3409
	movss	xmm3, DWORD PTR y2$[rbp]
	movss	xmm2, DWORD PTR x2$[rbp]
	mov	rax, QWORD PTR num_points$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rbp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3410
	mov	rax, QWORD PTR num_points$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rbp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
; Line 3412
	mov	eax, 1
$LN1@stbtt__tes:
; Line 3413
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ENDP ; stbtt__tesselate_curve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z
_TEXT	SEGMENT
points$ = 224
n$ = 232
x$ = 240
y$ = 248
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z PROC	; stbtt__add_point, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3388
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3389
	cmp	QWORD PTR points$[rbp], 0
	jne	SHORT $LN2@stbtt__add
	jmp	SHORT $LN1@stbtt__add
$LN2@stbtt__add:
; Line 3390
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR x$[rbp]
	movss	DWORD PTR [rcx+rax*8], xmm0
; Line 3391
	movsxd	rax, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR y$[rbp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
$LN1@stbtt__add:
; Line 3392
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ENDP	; stbtt__add_point
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
_TEXT	SEGMENT
y_scale_inv$ = 4
e$ = 40
n$ = 68
i$ = 100
j$ = 132
k$ = 164
m$ = 196
vsubsample$ = 228
p$1 = 264
a$2 = 292
b$3 = 324
tv163 = 532
tv94 = 532
tv66 = 532
tv165 = 536
tv162 = 540
result$ = 576
pts$ = 584
wcount$ = 592
windings$ = 600
scale_x$ = 608
scale_y$ = 616
shift_x$ = 624
shift_y$ = 632
off_x$ = 640
off_y$ = 648
invert$ = 656
userdata$ = 664
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z PROC ; stbtt__rasterize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3331
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 616				; 00000268H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3332
	cmp	DWORD PTR invert$[rbp], 0
	je	SHORT $LN15@stbtt__ras
	movss	xmm0, DWORD PTR scale_y$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv66[rbp], xmm0
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
	movss	xmm0, DWORD PTR scale_y$[rbp]
	movss	DWORD PTR tv66[rbp], xmm0
$LN16@stbtt__ras:
	movss	xmm0, DWORD PTR tv66[rbp]
	movss	DWORD PTR y_scale_inv$[rbp], xmm0
; Line 3338
	mov	DWORD PTR vsubsample$[rbp], 1
; Line 3345
	mov	DWORD PTR n$[rbp], 0
; Line 3346
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt__ras
$LN2@stbtt__ras:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt__ras:
	mov	eax, DWORD PTR windings$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stbtt__ras
; Line 3347
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR wcount$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR n$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rbp], eax
	jmp	SHORT $LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3349
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR e$[rbp], rax
; Line 3350
	cmp	QWORD PTR e$[rbp], 0
	jne	SHORT $LN11@stbtt__ras
	jmp	$LN1@stbtt__ras
$LN11@stbtt__ras:
; Line 3351
	mov	DWORD PTR n$[rbp], 0
; Line 3353
	mov	DWORD PTR m$[rbp], 0
; Line 3354
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN7@stbtt__ras
$LN5@stbtt__ras:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN7@stbtt__ras:
	mov	eax, DWORD PTR windings$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN6@stbtt__ras
; Line 3355
	movsxd	rax, DWORD PTR m$[rbp]
	mov	rcx, QWORD PTR pts$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$1[rbp], rax
; Line 3356
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR wcount$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR m$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$[rbp], eax
; Line 3357
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR wcount$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	dec	eax
	mov	DWORD PTR j$[rbp], eax
; Line 3358
	mov	DWORD PTR k$[rbp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR k$[rbp]
	mov	DWORD PTR tv94[rbp], eax
	mov	eax, DWORD PTR k$[rbp]
	inc	eax
	mov	DWORD PTR k$[rbp], eax
	mov	eax, DWORD PTR tv94[rbp]
	mov	DWORD PTR j$[rbp], eax
$LN10@stbtt__ras:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR wcount$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR k$[rbp], eax
	jge	$LN9@stbtt__ras
; Line 3359
	mov	eax, DWORD PTR k$[rbp]
	mov	DWORD PTR a$2[rbp], eax
	mov	eax, DWORD PTR j$[rbp]
	mov	DWORD PTR b$3[rbp], eax
; Line 3361
	movsxd	rax, DWORD PTR j$[rbp]
	movsxd	rcx, DWORD PTR k$[rbp]
	mov	rdx, QWORD PTR p$1[rbp]
	mov	r8, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	ucomiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jp	SHORT $LN12@stbtt__ras
	jne	SHORT $LN12@stbtt__ras
; Line 3362
	jmp	$LN8@stbtt__ras
$LN12@stbtt__ras:
; Line 3364
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	mov	DWORD PTR [rcx+rax+16], 0
; Line 3365
	cmp	DWORD PTR invert$[rbp], 0
	je	SHORT $LN21@stbtt__ras
	movsxd	rax, DWORD PTR j$[rbp]
	movsxd	rcx, DWORD PTR k$[rbp]
	mov	rdx, QWORD PTR p$1[rbp]
	mov	r8, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	comiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jbe	SHORT $LN19@stbtt__ras
	mov	DWORD PTR tv163[rbp], 1
	jmp	SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
	mov	DWORD PTR tv163[rbp], 0
$LN20@stbtt__ras:
	mov	eax, DWORD PTR tv163[rbp]
	mov	DWORD PTR tv165[rbp], eax
	jmp	SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
	movsxd	rax, DWORD PTR j$[rbp]
	movsxd	rcx, DWORD PTR k$[rbp]
	mov	rdx, QWORD PTR p$1[rbp]
	mov	r8, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx*8+4]
	comiss	xmm0, DWORD PTR [r8+rax*8+4]
	jbe	SHORT $LN17@stbtt__ras
	mov	DWORD PTR tv162[rbp], 1
	jmp	SHORT $LN18@stbtt__ras
$LN17@stbtt__ras:
	mov	DWORD PTR tv162[rbp], 0
$LN18@stbtt__ras:
	mov	eax, DWORD PTR tv162[rbp]
	mov	DWORD PTR tv165[rbp], eax
$LN22@stbtt__ras:
	cmp	DWORD PTR tv165[rbp], 0
	je	SHORT $LN13@stbtt__ras
; Line 3366
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	mov	DWORD PTR [rcx+rax+16], 1
; Line 3367
	mov	eax, DWORD PTR j$[rbp]
	mov	DWORD PTR a$2[rbp], eax
	mov	eax, DWORD PTR k$[rbp]
	mov	DWORD PTR b$3[rbp], eax
$LN13@stbtt__ras:
; Line 3369
	movsxd	rax, DWORD PTR a$2[rbp]
	mov	rcx, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rbp]
	addss	xmm0, DWORD PTR shift_x$[rbp]
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 3370
	movsxd	rax, DWORD PTR a$2[rbp]
	mov	rcx, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rbp]
	addss	xmm0, DWORD PTR shift_y$[rbp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rbp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 3371
	movsxd	rax, DWORD PTR b$3[rbp]
	mov	rcx, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	mulss	xmm0, DWORD PTR scale_x$[rbp]
	addss	xmm0, DWORD PTR shift_x$[rbp]
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	movss	DWORD PTR [rcx+rax+8], xmm0
; Line 3372
	movsxd	rax, DWORD PTR b$3[rbp]
	mov	rcx, QWORD PTR p$1[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	mulss	xmm0, DWORD PTR y_scale_inv$[rbp]
	addss	xmm0, DWORD PTR shift_y$[rbp]
	cvtsi2ss xmm1, DWORD PTR vsubsample$[rbp]
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3373
	mov	eax, DWORD PTR n$[rbp]
	inc	eax
	mov	DWORD PTR n$[rbp], eax
; Line 3374
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3375
	jmp	$LN5@stbtt__ras
$LN6@stbtt__ras:
; Line 3379
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	call	?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges
; Line 3382
	mov	rax, QWORD PTR userdata$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR off_y$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR off_x$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR vsubsample$[rbp]
	mov	r8d, DWORD PTR n$[rbp]
	mov	rdx, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR result$[rbp]
	call	?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ; stbtt__rasterize_sorted_edges
; Line 3384
	mov	rcx, QWORD PTR e$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN1@stbtt__ras:
; Line 3385
	lea	rsp, QWORD PTR [rbp+552]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ENDP ; stbtt__rasterize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
_TEXT	SEGMENT
p$ = 224
n$ = 232
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z PROC	; stbtt__sort_edges, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3320
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3321
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3322
	mov	edx, DWORD PTR n$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_ins_sort
; Line 3323
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ENDP	; stbtt__sort_edges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
_TEXT	SEGMENT
t$4 = 8
c01$5 = 52
c12$6 = 84
c$7 = 116
m$8 = 148
i$9 = 180
j$10 = 212
z$11 = 244
tv131 = 452
tv128 = 452
tv85 = 452
tv74 = 452
tv280 = 456
tv253 = 456
tv236 = 456
p$ = 496
n$ = 504
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_quicksort, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3258
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 496				; 000001f0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 68					; 00000044H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+536]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
$LN2@stbtt__sor:
; Line 3260
	cmp	DWORD PTR n$[rbp], 12
	jle	$LN3@stbtt__sor
; Line 3265
	mov	eax, DWORD PTR n$[rbp]
	sar	eax, 1
	mov	DWORD PTR m$8[rbp], eax
; Line 3266
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR m$8[rbp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	r8, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN20@stbtt__sor
	mov	DWORD PTR tv74[rbp], 1
	jmp	SHORT $LN21@stbtt__sor
$LN20@stbtt__sor:
	mov	DWORD PTR tv74[rbp], 0
$LN21@stbtt__sor:
	mov	eax, DWORD PTR tv74[rbp]
	mov	DWORD PTR c01$5[rbp], eax
; Line 3267
	movsxd	rax, DWORD PTR m$8[rbp]
	imul	rax, rax, 20
	mov	ecx, DWORD PTR n$[rbp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	r8, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN22@stbtt__sor
	mov	DWORD PTR tv85[rbp], 1
	jmp	SHORT $LN23@stbtt__sor
$LN22@stbtt__sor:
	mov	DWORD PTR tv85[rbp], 0
$LN23@stbtt__sor:
	mov	eax, DWORD PTR tv85[rbp]
	mov	DWORD PTR c12$6[rbp], eax
; Line 3269
	mov	eax, DWORD PTR c12$6[rbp]
	cmp	DWORD PTR c01$5[rbp], eax
	je	$LN13@stbtt__sor
; Line 3272
	mov	eax, 20
	imul	rax, rax, 0
	mov	ecx, DWORD PTR n$[rbp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	r8, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN24@stbtt__sor
	mov	DWORD PTR tv128[rbp], 1
	jmp	SHORT $LN25@stbtt__sor
$LN24@stbtt__sor:
	mov	DWORD PTR tv128[rbp], 0
$LN25@stbtt__sor:
	mov	eax, DWORD PTR tv128[rbp]
	mov	DWORD PTR c$7[rbp], eax
; Line 3275
	mov	eax, DWORD PTR c12$6[rbp]
	cmp	DWORD PTR c$7[rbp], eax
	jne	SHORT $LN26@stbtt__sor
	mov	DWORD PTR tv131[rbp], 0
	jmp	SHORT $LN27@stbtt__sor
$LN26@stbtt__sor:
	mov	eax, DWORD PTR n$[rbp]
	dec	eax
	mov	DWORD PTR tv131[rbp], eax
$LN27@stbtt__sor:
	mov	eax, DWORD PTR tv131[rbp]
	mov	DWORD PTR z$11[rbp], eax
; Line 3276
	movsxd	rax, DWORD PTR z$11[rbp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rbp]
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3277
	movsxd	rax, DWORD PTR m$8[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR z$11[rbp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, QWORD PTR p$[rbp]
	mov	QWORD PTR tv236[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv236[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3278
	movsxd	rax, DWORD PTR m$8[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rbp]
	lea	rdx, QWORD PTR t$4[rbp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN13@stbtt__sor:
; Line 3282
	mov	eax, 20
	imul	rax, rax, 0
	lea	rcx, QWORD PTR t$4[rbp]
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3283
	movsxd	rax, DWORD PTR m$8[rbp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, QWORD PTR p$[rbp]
	mov	QWORD PTR tv253[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv253[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3284
	movsxd	rax, DWORD PTR m$8[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rbp]
	lea	rdx, QWORD PTR t$4[rbp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3287
	mov	DWORD PTR i$9[rbp], 1
; Line 3288
	mov	eax, DWORD PTR n$[rbp]
	dec	eax
	mov	DWORD PTR j$10[rbp], eax
$LN4@stbtt__sor:
; Line 3292
	jmp	SHORT $LN9@stbtt__sor
$LN7@stbtt__sor:
	mov	eax, DWORD PTR i$9[rbp]
	inc	eax
	mov	DWORD PTR i$9[rbp], eax
$LN9@stbtt__sor:
; Line 3293
	movsxd	rax, DWORD PTR i$9[rbp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN14@stbtt__sor
	jmp	SHORT $LN8@stbtt__sor
$LN14@stbtt__sor:
; Line 3294
	jmp	SHORT $LN7@stbtt__sor
$LN8@stbtt__sor:
; Line 3295
	jmp	SHORT $LN12@stbtt__sor
$LN10@stbtt__sor:
	mov	eax, DWORD PTR j$10[rbp]
	dec	eax
	mov	DWORD PTR j$10[rbp], eax
$LN12@stbtt__sor:
; Line 3296
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR j$10[rbp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, QWORD PTR p$[rbp]
	movss	xmm0, DWORD PTR [rdx+rcx+4]
	comiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN15@stbtt__sor
	jmp	SHORT $LN11@stbtt__sor
$LN15@stbtt__sor:
; Line 3297
	jmp	SHORT $LN10@stbtt__sor
$LN11@stbtt__sor:
; Line 3299
	mov	eax, DWORD PTR j$10[rbp]
	cmp	DWORD PTR i$9[rbp], eax
	jl	SHORT $LN16@stbtt__sor
	jmp	$LN5@stbtt__sor
$LN16@stbtt__sor:
; Line 3300
	movsxd	rax, DWORD PTR i$9[rbp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rbp]
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3301
	movsxd	rax, DWORD PTR j$10[rbp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR i$9[rbp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, QWORD PTR p$[rbp]
	mov	QWORD PTR tv280[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv280[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3302
	movsxd	rax, DWORD PTR j$10[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rbp]
	lea	rdx, QWORD PTR t$4[rbp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3304
	mov	eax, DWORD PTR i$9[rbp]
	inc	eax
	mov	DWORD PTR i$9[rbp], eax
; Line 3305
	mov	eax, DWORD PTR j$10[rbp]
	dec	eax
	mov	DWORD PTR j$10[rbp], eax
; Line 3306
	jmp	$LN4@stbtt__sor
$LN5@stbtt__sor:
; Line 3308
	mov	eax, DWORD PTR i$9[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR j$10[rbp], eax
	jge	SHORT $LN17@stbtt__sor
; Line 3309
	mov	edx, DWORD PTR j$10[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3310
	movsxd	rax, DWORD PTR i$9[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rbp], rax
; Line 3311
	mov	eax, DWORD PTR i$9[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rbp], eax
; Line 3312
	jmp	SHORT $LN18@stbtt__sor
$LN17@stbtt__sor:
; Line 3313
	mov	eax, DWORD PTR i$9[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$9[rbp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3314
	mov	eax, DWORD PTR j$10[rbp]
	mov	DWORD PTR n$[rbp], eax
$LN18@stbtt__sor:
; Line 3316
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3317
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	lea	rsp, QWORD PTR [rbp+464]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_quicksort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
_TEXT	SEGMENT
i$ = 4
j$ = 36
t$4 = 72
a$5 = 120
b$6 = 152
c$7 = 180
tv78 = 388
tv143 = 392
__$ArrayPad$ = 400
p$ = 448
n$ = 456
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_ins_sort, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3240
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 448				; 000001c0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 56					; 00000038H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+488]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3242
	mov	DWORD PTR i$[rbp], 1
	jmp	SHORT $LN4@stbtt__sor
$LN2@stbtt__sor:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt__sor:
	mov	eax, DWORD PTR n$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN3@stbtt__sor
; Line 3243
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rbp]
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
	lea	rax, QWORD PTR t$4[rbp]
	mov	QWORD PTR a$5[rbp], rax
; Line 3244
	mov	eax, DWORD PTR i$[rbp]
	mov	DWORD PTR j$[rbp], eax
$LN5@stbtt__sor:
; Line 3245
	cmp	DWORD PTR j$[rbp], 0
	jle	$LN6@stbtt__sor
; Line 3246
	mov	eax, DWORD PTR j$[rbp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$6[rbp], rax
; Line 3247
	mov	rax, QWORD PTR b$6[rbp]
	mov	rcx, QWORD PTR a$5[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN10@stbtt__sor
	mov	DWORD PTR tv78[rbp], 1
	jmp	SHORT $LN11@stbtt__sor
$LN10@stbtt__sor:
	mov	DWORD PTR tv78[rbp], 0
$LN11@stbtt__sor:
	mov	eax, DWORD PTR tv78[rbp]
	mov	DWORD PTR c$7[rbp], eax
; Line 3248
	cmp	DWORD PTR c$7[rbp], 0
	jne	SHORT $LN7@stbtt__sor
	jmp	SHORT $LN6@stbtt__sor
$LN7@stbtt__sor:
; Line 3249
	mov	eax, DWORD PTR j$[rbp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR j$[rbp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rbp]
	mov	rdi, QWORD PTR p$[rbp]
	mov	QWORD PTR tv143[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv143[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3250
	mov	eax, DWORD PTR j$[rbp]
	dec	eax
	mov	DWORD PTR j$[rbp], eax
; Line 3251
	jmp	$LN5@stbtt__sor
$LN6@stbtt__sor:
; Line 3252
	mov	eax, DWORD PTR j$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	je	SHORT $LN8@stbtt__sor
; Line 3253
	movsxd	rax, DWORD PTR j$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rbp]
	lea	rdx, QWORD PTR t$4[rbp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN8@stbtt__sor:
; Line 3254
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3255
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+416]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_ins_sort
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
_TEXT	SEGMENT
hh$ = 8
active$ = 56
y$ = 84
j$ = 116
i$ = 148
scanline_data$ = 192
scanline$ = 744
scanline2$ = 776
scan_y_top$6 = 804
scan_y_bottom$7 = 836
step$8 = 872
z$9 = 904
z$10 = 936
sum$11 = 964
k$12 = 996
m$13 = 1028
z$14 = 1064
tv135 = 1656
tv95 = 1656
__$ArrayPad$ = 1664
result$ = 1712
e$ = 1720
n$ = 1728
vsubsample$ = 1736
off_x$ = 1744
off_y$ = 1752
userdata$ = 1760
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z PROC ; stbtt__rasterize_sorted_edges, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3138
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1736				; 000006c8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 278				; 00000116H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1768]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3139
	mov	QWORD PTR hh$[rbp], 0
	mov	QWORD PTR hh$[rbp+8], 0
	mov	DWORD PTR hh$[rbp+16], 0
; Line 3140
	mov	QWORD PTR active$[rbp], 0
; Line 3141
	mov	DWORD PTR j$[rbp], 0
; Line 3146
	mov	rax, QWORD PTR result$[rbp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jle	SHORT $LN19@stbtt__ras
; Line 3147
	mov	rax, QWORD PTR result$[rbp]
	mov	eax, DWORD PTR [rax]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR scanline$[rbp], rax
	jmp	SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
; Line 3149
	lea	rax, QWORD PTR scanline_data$[rbp]
	mov	QWORD PTR scanline$[rbp], rax
$LN20@stbtt__ras:
; Line 3151
	mov	rax, QWORD PTR result$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR scanline$[rbp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR scanline2$[rbp], rax
; Line 3153
	mov	eax, DWORD PTR off_y$[rbp]
	mov	DWORD PTR y$[rbp], eax
; Line 3154
	mov	rax, QWORD PTR result$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR off_y$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	addss	xmm0, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR n$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
$LN2@stbtt__ras:
; Line 3156
	mov	rax, QWORD PTR result$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rbp], eax
	jge	$LN3@stbtt__ras
; Line 3158
	cvtsi2ss xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR __real@00000000
	movss	DWORD PTR scan_y_top$6[rbp], xmm0
; Line 3159
	cvtsi2ss xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR scan_y_bottom$7[rbp], xmm0
; Line 3160
	lea	rax, QWORD PTR active$[rbp]
	mov	QWORD PTR step$8[rbp], rax
; Line 3162
	mov	rax, QWORD PTR result$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	QWORD PTR tv95[rbp], rax
	mov	rdi, QWORD PTR scanline$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR tv95[rbp]
	rep stosb
; Line 3163
	mov	rax, QWORD PTR result$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	cdqe
	shl	rax, 2
	mov	QWORD PTR tv135[rbp], rax
	mov	rdi, QWORD PTR scanline2$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR tv135[rbp]
	rep stosb
$LN4@stbtt__ras:
; Line 3167
	mov	rax, QWORD PTR step$8[rbp]
	cmp	QWORD PTR [rax], 0
	je	$LN5@stbtt__ras
; Line 3168
	mov	rax, QWORD PTR step$8[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$9[rbp], rax
; Line 3169
	mov	rax, QWORD PTR z$9[rbp]
	movss	xmm0, DWORD PTR scan_y_top$6[rbp]
	comiss	xmm0, DWORD PTR [rax+28]
	jb	SHORT $LN21@stbtt__ras
; Line 3170
	mov	rax, QWORD PTR step$8[rbp]
	mov	rcx, QWORD PTR z$9[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
$LN8@stbtt__ras:
; Line 3171
	mov	rax, QWORD PTR z$9[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN31@stbtt__ras
	jne	SHORT $LN31@stbtt__ras
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA
	add	eax, 33					; 00000021H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BK@LMAHJHLI@?$AAz?$AA?9?$AA?$DO?$AAd?$AAi?$AAr?$AAe?$AAc?$AAt?$AAi?$AAo?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt__ras:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN8@stbtt__ras
; Line 3172
	mov	rax, QWORD PTR z$9[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+20], xmm0
; Line 3173
	mov	rdx, QWORD PTR z$9[rbp]
	lea	rcx, QWORD PTR hh$[rbp]
	call	?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_free
; Line 3174
	jmp	SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
; Line 3175
	mov	rax, QWORD PTR step$8[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$8[rbp], rax
$LN22@stbtt__ras:
; Line 3177
	jmp	$LN4@stbtt__ras
$LN5@stbtt__ras:
$LN9@stbtt__ras:
; Line 3180
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR scan_y_bottom$7[rbp]
	comiss	xmm0, DWORD PTR [rax+4]
	jb	$LN10@stbtt__ras
; Line 3181
	mov	rax, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	ucomiss	xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN33@stbtt__ras
	je	$LN23@stbtt__ras
$LN33@stbtt__ras:
; Line 3182
	mov	rax, QWORD PTR userdata$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR scan_y_top$6[rbp]
	mov	r8d, DWORD PTR off_x$[rbp]
	mov	rdx, QWORD PTR e$[rbp]
	lea	rcx, QWORD PTR hh$[rbp]
	call	?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ; stbtt__new_active
	mov	QWORD PTR z$10[rbp], rax
; Line 3183
	cmp	QWORD PTR z$10[rbp], 0
	je	$LN24@stbtt__ras
; Line 3184
	cmp	DWORD PTR j$[rbp], 0
	jne	SHORT $LN25@stbtt__ras
	cmp	DWORD PTR off_y$[rbp], 0
	je	SHORT $LN25@stbtt__ras
; Line 3185
	mov	rax, QWORD PTR z$10[rbp]
	movss	xmm0, DWORD PTR scan_y_top$6[rbp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN26@stbtt__ras
; Line 3187
	mov	rax, QWORD PTR z$10[rbp]
	movss	xmm0, DWORD PTR scan_y_top$6[rbp]
	movss	DWORD PTR [rax+28], xmm0
$LN26@stbtt__ras:
$LN25@stbtt__ras:
$LN13@stbtt__ras:
; Line 3190
	mov	rax, QWORD PTR z$10[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR scan_y_top$6[rbp]
	jae	SHORT $LN32@stbtt__ras
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z@4JA
	add	eax, 52					; 00000034H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CI@PMJHELI@?$AAz?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAs?$AAc?$AAa?$AAn?$AA_?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN32@stbtt__ras:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@stbtt__ras
; Line 3192
	mov	rax, QWORD PTR z$10[rbp]
	mov	rcx, QWORD PTR active$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 3193
	mov	rax, QWORD PTR z$10[rbp]
	mov	QWORD PTR active$[rbp], rax
$LN24@stbtt__ras:
$LN23@stbtt__ras:
; Line 3196
	mov	rax, QWORD PTR e$[rbp]
	add	rax, 20
	mov	QWORD PTR e$[rbp], rax
; Line 3197
	jmp	$LN9@stbtt__ras
$LN10@stbtt__ras:
; Line 3200
	cmp	QWORD PTR active$[rbp], 0
	je	SHORT $LN27@stbtt__ras
; Line 3201
	mov	rax, QWORD PTR scanline2$[rbp]
	add	rax, 4
	movss	xmm0, DWORD PTR scan_y_top$6[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR active$[rbp]
	mov	rcx, QWORD PTR result$[rbp]
	mov	r8d, DWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ; stbtt__fill_active_edges_new
$LN27@stbtt__ras:
; Line 3204
	xorps	xmm0, xmm0
	movss	DWORD PTR sum$11[rbp], xmm0
; Line 3205
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN16@stbtt__ras
$LN14@stbtt__ras:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN16@stbtt__ras:
	mov	rax, QWORD PTR result$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN15@stbtt__ras
; Line 3208
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR scanline2$[rbp]
	movss	xmm0, DWORD PTR sum$11[rbp]
	addss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR sum$11[rbp], xmm0
; Line 3209
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	addss	xmm0, DWORD PTR sum$11[rbp]
	movss	DWORD PTR k$12[rbp], xmm0
; Line 3210
	movss	xmm0, DWORD PTR k$12[rbp]
	call	fabsf
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR k$12[rbp], xmm0
; Line 3211
	cvttss2si eax, DWORD PTR k$12[rbp]
	mov	DWORD PTR m$13[rbp], eax
; Line 3212
	cmp	DWORD PTR m$13[rbp], 255		; 000000ffH
	jle	SHORT $LN28@stbtt__ras
	mov	DWORD PTR m$13[rbp], 255		; 000000ffH
$LN28@stbtt__ras:
; Line 3213
	mov	rax, QWORD PTR result$[rbp]
	mov	ecx, DWORD PTR j$[rbp]
	imul	ecx, DWORD PTR [rax+8]
	mov	eax, ecx
	add	eax, DWORD PTR i$[rbp]
	cdqe
	mov	rcx, QWORD PTR result$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR m$13[rbp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3214
	jmp	$LN14@stbtt__ras
$LN15@stbtt__ras:
; Line 3217
	lea	rax, QWORD PTR active$[rbp]
	mov	QWORD PTR step$8[rbp], rax
$LN17@stbtt__ras:
; Line 3218
	mov	rax, QWORD PTR step$8[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN18@stbtt__ras
; Line 3219
	mov	rax, QWORD PTR step$8[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$14[rbp], rax
; Line 3220
	mov	rax, QWORD PTR z$14[rbp]
	mov	rcx, QWORD PTR z$14[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR z$14[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3221
	mov	rax, QWORD PTR step$8[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$8[rbp], rax
; Line 3222
	jmp	SHORT $LN17@stbtt__ras
$LN18@stbtt__ras:
; Line 3224
	mov	eax, DWORD PTR y$[rbp]
	inc	eax
	mov	DWORD PTR y$[rbp], eax
; Line 3225
	mov	eax, DWORD PTR j$[rbp]
	inc	eax
	mov	DWORD PTR j$[rbp], eax
; Line 3226
	jmp	$LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3228
	mov	rdx, QWORD PTR userdata$[rbp]
	lea	rcx, QWORD PTR hh$[rbp]
	call	?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_cleanup
; Line 3230
	lea	rax, QWORD PTR scanline_data$[rbp]
	cmp	QWORD PTR scanline$[rbp], rax
	je	SHORT $LN29@stbtt__ras
; Line 3231
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN29@stbtt__ras:
; Line 3232
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1688]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ENDP ; stbtt__rasterize_sorted_edges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
_TEXT	SEGMENT
y_bottom$ = 4
x0$1 = 36
x0$2 = 68
dx$3 = 100
xb$4 = 132
x_top$5 = 164
x_bottom$6 = 196
sy0$7 = 228
sy1$8 = 260
dy$9 = 292
height$10 = 324
x$11 = 356
x$12 = 388
x1$13 = 420
x2$14 = 452
y_crossing$15 = 484
step$16 = 516
sign$17 = 548
area$18 = 580
t$19 = 612
x$20 = 644
y0$21 = 676
x1$22 = 708
x2$23 = 740
x3$24 = 772
y3$25 = 804
y1$26 = 836
y2$27 = 868
scanline$ = 1312
scanline_fill$ = 1320
len$ = 1328
e$ = 1336
y_top$ = 1344
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z PROC ; stbtt__fill_active_edges_new, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2974
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1352				; 00000548H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2975
	movss	xmm0, DWORD PTR y_top$[rbp]
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR y_bottom$[rbp], xmm0
$LN2@stbtt__fil:
; Line 2977
	cmp	QWORD PTR e$[rbp], 0
	je	$LN3@stbtt__fil
$LN6@stbtt__fil:
; Line 2981
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rbp]
	jae	SHORT $LN49@stbtt__fil
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BO@MDBOACOJ@?$AAe?$AA?9?$AA?$DO?$AAe?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAy?$AA_?$AAt?$AAo?$AAp@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN49@stbtt__fil:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN6@stbtt__fil
; Line 2983
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN22@stbtt__fil
	jne	$LN22@stbtt__fil
; Line 2984
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$1[rbp], xmm0
; Line 2985
	cvtsi2ss xmm0, DWORD PTR len$[rbp]
	comiss	xmm0, DWORD PTR x0$1[rbp]
	jbe	$LN24@stbtt__fil
; Line 2986
	movss	xmm0, DWORD PTR x0$1[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN25@stbtt__fil
; Line 2987
	cvttss2si eax, DWORD PTR x0$1[rbp]
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$1[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 2988
	cvttss2si eax, DWORD PTR x0$1[rbp]
	inc	eax
	mov	rcx, QWORD PTR scanline_fill$[rbp]
	sub	rcx, 4
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$1[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, eax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 2989
	jmp	SHORT $LN26@stbtt__fil
$LN25@stbtt__fil:
; Line 2990
	mov	rax, QWORD PTR scanline_fill$[rbp]
	sub	rax, 4
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x0$1[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$1[rbp]
	mov	r8, QWORD PTR e$[rbp]
	xor	edx, edx
	mov	rcx, rax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN26@stbtt__fil:
$LN24@stbtt__fil:
; Line 2993
	jmp	$LN23@stbtt__fil
$LN22@stbtt__fil:
; Line 2994
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x0$2[rbp], xmm0
; Line 2995
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR dx$3[rbp], xmm0
; Line 2996
	movss	xmm0, DWORD PTR x0$2[rbp]
	addss	xmm0, DWORD PTR dx$3[rbp]
	movss	DWORD PTR xb$4[rbp], xmm0
; Line 2999
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR dy$9[rbp], xmm0
$LN9@stbtt__fil:
; Line 3000
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	comiss	xmm0, DWORD PTR [rax+24]
	jb	SHORT $LN50@stbtt__fil
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR y_top$[rbp]
	jae	SHORT $LN51@stbtt__fil
$LN50@stbtt__fil:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
	add	eax, 26
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EI@KOIFPDFH@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAy?$AA_?$AAb?$AAo?$AAt?$AAt@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN51@stbtt__fil:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@stbtt__fil
; Line 3005
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y_top$[rbp]
	jbe	SHORT $LN27@stbtt__fil
; Line 3006
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	subss	xmm0, DWORD PTR y_top$[rbp]
	movss	xmm1, DWORD PTR dx$3[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$2[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_top$5[rbp], xmm0
; Line 3007
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR sy0$7[rbp], xmm0
; Line 3008
	jmp	SHORT $LN28@stbtt__fil
$LN27@stbtt__fil:
; Line 3009
	movss	xmm0, DWORD PTR x0$2[rbp]
	movss	DWORD PTR x_top$5[rbp], xmm0
; Line 3010
	movss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR sy0$7[rbp], xmm0
$LN28@stbtt__fil:
; Line 3012
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN29@stbtt__fil
; Line 3013
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	subss	xmm0, DWORD PTR y_top$[rbp]
	movss	xmm1, DWORD PTR dx$3[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$2[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x_bottom$6[rbp], xmm0
; Line 3014
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR sy1$8[rbp], xmm0
; Line 3015
	jmp	SHORT $LN30@stbtt__fil
$LN29@stbtt__fil:
; Line 3016
	movss	xmm0, DWORD PTR xb$4[rbp]
	movss	DWORD PTR x_bottom$6[rbp], xmm0
; Line 3017
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	movss	DWORD PTR sy1$8[rbp], xmm0
$LN30@stbtt__fil:
; Line 3020
	movss	xmm0, DWORD PTR x_top$5[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN31@stbtt__fil
	movss	xmm0, DWORD PTR x_bottom$6[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	$LN31@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rbp]
	comiss	xmm0, DWORD PTR x_top$5[rbp]
	jbe	$LN31@stbtt__fil
	cvtsi2ss xmm0, DWORD PTR len$[rbp]
	comiss	xmm0, DWORD PTR x_bottom$6[rbp]
	jbe	$LN31@stbtt__fil
; Line 3023
	cvttss2si eax, DWORD PTR x_top$5[rbp]
	cvttss2si ecx, DWORD PTR x_bottom$6[rbp]
	cmp	eax, ecx
	jne	$LN33@stbtt__fil
; Line 3026
	cvttss2si eax, DWORD PTR x_top$5[rbp]
	mov	DWORD PTR x$11[rbp], eax
; Line 3027
	movss	xmm0, DWORD PTR sy1$8[rbp]
	subss	xmm0, DWORD PTR sy0$7[rbp]
	movss	DWORD PTR height$10[rbp], xmm0
$LN12@stbtt__fil:
; Line 3028
	cmp	DWORD PTR x$11[rbp], 0
	jl	SHORT $LN52@stbtt__fil
	mov	eax, DWORD PTR len$[rbp]
	cmp	DWORD PTR x$11[rbp], eax
	jl	SHORT $LN53@stbtt__fil
$LN52@stbtt__fil:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
	add	eax, 54					; 00000036H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CE@GDDDMDCC@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$DM?$AA?5?$AAl@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN53@stbtt__fil:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbtt__fil
; Line 3029
	cvtsi2ss xmm0, DWORD PTR x$11[rbp]
	movss	xmm1, DWORD PTR x_top$5[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x$11[rbp]
	movss	xmm2, DWORD PTR x_bottom$6[rbp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mulss	xmm0, DWORD PTR height$10[rbp]
	movsxd	rax, DWORD PTR x$11[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$11[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3030
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	mulss	xmm0, DWORD PTR height$10[rbp]
	movsxd	rax, DWORD PTR x$11[rbp]
	mov	rcx, QWORD PTR scanline_fill$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$11[rbp]
	mov	rcx, QWORD PTR scanline_fill$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3031
	jmp	$LN34@stbtt__fil
$LN33@stbtt__fil:
; Line 3035
	movss	xmm0, DWORD PTR x_top$5[rbp]
	comiss	xmm0, DWORD PTR x_bottom$6[rbp]
	jbe	$LN35@stbtt__fil
; Line 3038
	movss	xmm0, DWORD PTR sy0$7[rbp]
	subss	xmm0, DWORD PTR y_top$[rbp]
	movss	xmm1, DWORD PTR y_bottom$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy0$7[rbp], xmm0
; Line 3039
	movss	xmm0, DWORD PTR sy1$8[rbp]
	subss	xmm0, DWORD PTR y_top$[rbp]
	movss	xmm1, DWORD PTR y_bottom$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sy1$8[rbp], xmm0
; Line 3040
	movss	xmm0, DWORD PTR sy0$7[rbp]
	movss	DWORD PTR t$19[rbp], xmm0
	movss	xmm0, DWORD PTR sy1$8[rbp]
	movss	DWORD PTR sy0$7[rbp], xmm0
	movss	xmm0, DWORD PTR t$19[rbp]
	movss	DWORD PTR sy1$8[rbp], xmm0
; Line 3041
	movss	xmm0, DWORD PTR x_bottom$6[rbp]
	movss	DWORD PTR t$19[rbp], xmm0
	movss	xmm0, DWORD PTR x_top$5[rbp]
	movss	DWORD PTR x_bottom$6[rbp], xmm0
	movss	xmm0, DWORD PTR t$19[rbp]
	movss	DWORD PTR x_top$5[rbp], xmm0
; Line 3042
	movss	xmm0, DWORD PTR dx$3[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx$3[rbp], xmm0
; Line 3043
	movss	xmm0, DWORD PTR dy$9[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy$9[rbp], xmm0
; Line 3044
	movss	xmm0, DWORD PTR x0$2[rbp]
	movss	DWORD PTR t$19[rbp], xmm0
	movss	xmm0, DWORD PTR xb$4[rbp]
	movss	DWORD PTR x0$2[rbp], xmm0
	movss	xmm0, DWORD PTR t$19[rbp]
	movss	DWORD PTR xb$4[rbp], xmm0
$LN35@stbtt__fil:
; Line 3049
	cvttss2si eax, DWORD PTR x_top$5[rbp]
	mov	DWORD PTR x1$13[rbp], eax
; Line 3050
	cvttss2si eax, DWORD PTR x_bottom$6[rbp]
	mov	DWORD PTR x2$14[rbp], eax
; Line 3052
	mov	eax, DWORD PTR x1$13[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$2[rbp]
	mulss	xmm0, DWORD PTR dy$9[rbp]
	addss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR y_crossing$15[rbp], xmm0
; Line 3054
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR sign$17[rbp], xmm0
; Line 3056
	movss	xmm0, DWORD PTR y_crossing$15[rbp]
	subss	xmm0, DWORD PTR sy0$7[rbp]
	movss	xmm1, DWORD PTR sign$17[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR area$18[rbp], xmm0
; Line 3058
	cvtsi2ss xmm0, DWORD PTR x1$13[rbp]
	movss	xmm1, DWORD PTR x_top$5[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, DWORD PTR x1$13[rbp]
	inc	eax
	sub	eax, DWORD PTR x1$13[rbp]
	cvtsi2ss xmm1, eax
	addss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR area$18[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x1$13[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x1$13[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3060
	movss	xmm0, DWORD PTR sign$17[rbp]
	mulss	xmm0, DWORD PTR dy$9[rbp]
	movss	DWORD PTR step$16[rbp], xmm0
; Line 3061
	mov	eax, DWORD PTR x1$13[rbp]
	inc	eax
	mov	DWORD PTR x$12[rbp], eax
	jmp	SHORT $LN15@stbtt__fil
$LN13@stbtt__fil:
	mov	eax, DWORD PTR x$12[rbp]
	inc	eax
	mov	DWORD PTR x$12[rbp], eax
$LN15@stbtt__fil:
	mov	eax, DWORD PTR x2$14[rbp]
	cmp	DWORD PTR x$12[rbp], eax
	jge	SHORT $LN14@stbtt__fil
; Line 3062
	movss	xmm0, DWORD PTR step$16[rbp]
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR area$18[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$12[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$12[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3063
	movss	xmm0, DWORD PTR area$18[rbp]
	addss	xmm0, DWORD PTR step$16[rbp]
	movss	DWORD PTR area$18[rbp], xmm0
; Line 3064
	jmp	$LN13@stbtt__fil
$LN14@stbtt__fil:
; Line 3065
	mov	eax, DWORD PTR x1$13[rbp]
	inc	eax
	mov	ecx, DWORD PTR x2$14[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR dy$9[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR y_crossing$15[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y_crossing$15[rbp], xmm0
$LN18@stbtt__fil:
; Line 3067
	movss	xmm0, DWORD PTR area$18[rbp]
	call	fabsf
	movss	xmm1, DWORD PTR __real@3f8147ae
	comiss	xmm1, xmm0
	jae	SHORT $LN54@stbtt__fil
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z@4JA
	add	eax, 93					; 0000005dH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CK@PHOJNIKI@?$AAf?$AAa?$AAb?$AAs?$AAf?$AA?$CI?$AAa?$AAr?$AAe?$AAa?$AA?$CJ?$AA?5?$AA?$DM?$AA?$DN?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN54@stbtt__fil:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbtt__fil
; Line 3069
	mov	eax, DWORD PTR x2$14[rbp]
	mov	ecx, DWORD PTR x2$14[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	cvtsi2ss xmm1, DWORD PTR x2$14[rbp]
	movss	xmm2, DWORD PTR x_bottom$6[rbp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	divss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR sign$17[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR sy1$8[rbp]
	subss	xmm1, DWORD PTR y_crossing$15[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR area$18[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$14[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$14[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 3071
	movss	xmm0, DWORD PTR sy1$8[rbp]
	subss	xmm0, DWORD PTR sy0$7[rbp]
	movss	xmm1, DWORD PTR sign$17[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$14[rbp]
	mov	rcx, QWORD PTR scanline_fill$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x2$14[rbp]
	mov	rcx, QWORD PTR scanline_fill$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN34@stbtt__fil:
; Line 3073
	jmp	$LN32@stbtt__fil
$LN31@stbtt__fil:
; Line 3079
	mov	DWORD PTR x$20[rbp], 0
	jmp	SHORT $LN21@stbtt__fil
$LN19@stbtt__fil:
	mov	eax, DWORD PTR x$20[rbp]
	inc	eax
	mov	DWORD PTR x$20[rbp], eax
$LN21@stbtt__fil:
	mov	eax, DWORD PTR len$[rbp]
	cmp	DWORD PTR x$20[rbp], eax
	jge	$LN20@stbtt__fil
; Line 3094
	movss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR y0$21[rbp], xmm0
; Line 3095
	cvtsi2ss xmm0, DWORD PTR x$20[rbp]
	movss	DWORD PTR x1$22[rbp], xmm0
; Line 3096
	mov	eax, DWORD PTR x$20[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x2$23[rbp], xmm0
; Line 3097
	movss	xmm0, DWORD PTR xb$4[rbp]
	movss	DWORD PTR x3$24[rbp], xmm0
; Line 3098
	movss	xmm0, DWORD PTR y_bottom$[rbp]
	movss	DWORD PTR y3$25[rbp], xmm0
; Line 3103
	cvtsi2ss xmm0, DWORD PTR x$20[rbp]
	subss	xmm0, DWORD PTR x0$2[rbp]
	divss	xmm0, DWORD PTR dx$3[rbp]
	addss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR y1$26[rbp], xmm0
; Line 3104
	mov	eax, DWORD PTR x$20[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	subss	xmm0, DWORD PTR x0$2[rbp]
	divss	xmm0, DWORD PTR dx$3[rbp]
	addss	xmm0, DWORD PTR y_top$[rbp]
	movss	DWORD PTR y2$27[rbp], xmm0
; Line 3106
	movss	xmm0, DWORD PTR x1$22[rbp]
	comiss	xmm0, DWORD PTR x0$2[rbp]
	jbe	$LN36@stbtt__fil
	movss	xmm0, DWORD PTR x3$24[rbp]
	comiss	xmm0, DWORD PTR x2$23[rbp]
	jbe	$LN36@stbtt__fil
; Line 3107
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$22[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3108
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$23[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$22[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3109
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$23[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN37@stbtt__fil
$LN36@stbtt__fil:
; Line 3110
	movss	xmm0, DWORD PTR x1$22[rbp]
	comiss	xmm0, DWORD PTR x3$24[rbp]
	jbe	$LN38@stbtt__fil
	movss	xmm0, DWORD PTR x0$2[rbp]
	comiss	xmm0, DWORD PTR x2$23[rbp]
	jbe	$LN38@stbtt__fil
; Line 3111
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$23[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3112
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$22[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$23[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3113
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$22[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN39@stbtt__fil
$LN38@stbtt__fil:
; Line 3114
	movss	xmm0, DWORD PTR x1$22[rbp]
	comiss	xmm0, DWORD PTR x0$2[rbp]
	jbe	$LN40@stbtt__fil
	movss	xmm0, DWORD PTR x3$24[rbp]
	comiss	xmm0, DWORD PTR x1$22[rbp]
	jbe	$LN40@stbtt__fil
; Line 3115
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$22[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3116
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$22[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN41@stbtt__fil
$LN40@stbtt__fil:
; Line 3117
	movss	xmm0, DWORD PTR x1$22[rbp]
	comiss	xmm0, DWORD PTR x3$24[rbp]
	jbe	$LN42@stbtt__fil
	movss	xmm0, DWORD PTR x0$2[rbp]
	comiss	xmm0, DWORD PTR x1$22[rbp]
	jbe	$LN42@stbtt__fil
; Line 3118
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x1$22[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3119
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y1$26[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x1$22[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN43@stbtt__fil
$LN42@stbtt__fil:
; Line 3120
	movss	xmm0, DWORD PTR x2$23[rbp]
	comiss	xmm0, DWORD PTR x0$2[rbp]
	jbe	$LN44@stbtt__fil
	movss	xmm0, DWORD PTR x3$24[rbp]
	comiss	xmm0, DWORD PTR x2$23[rbp]
	jbe	$LN44@stbtt__fil
; Line 3121
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$23[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3122
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$23[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN45@stbtt__fil
$LN44@stbtt__fil:
; Line 3123
	movss	xmm0, DWORD PTR x2$23[rbp]
	comiss	xmm0, DWORD PTR x3$24[rbp]
	jbe	$LN46@stbtt__fil
	movss	xmm0, DWORD PTR x0$2[rbp]
	comiss	xmm0, DWORD PTR x2$23[rbp]
	jbe	$LN46@stbtt__fil
; Line 3124
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x2$23[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3125
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y2$27[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x2$23[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3126
	jmp	SHORT $LN47@stbtt__fil
$LN46@stbtt__fil:
; Line 3127
	movss	xmm0, DWORD PTR y3$25[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR x3$24[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR y0$21[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR x0$2[rbp]
	mov	r8, QWORD PTR e$[rbp]
	mov	edx, DWORD PTR x$20[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN47@stbtt__fil:
$LN45@stbtt__fil:
$LN43@stbtt__fil:
$LN41@stbtt__fil:
$LN39@stbtt__fil:
$LN37@stbtt__fil:
; Line 3129
	jmp	$LN19@stbtt__fil
$LN20@stbtt__fil:
$LN32@stbtt__fil:
$LN23@stbtt__fil:
; Line 3132
	mov	rax, QWORD PTR e$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR e$[rbp], rax
; Line 3133
	jmp	$LN2@stbtt__fil
$LN3@stbtt__fil:
; Line 3134
	lea	rsp, QWORD PTR [rbp+1288]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ENDP ; stbtt__fill_active_edges_new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
_TEXT	SEGMENT
scanline$ = 224
x$ = 232
e$ = 240
x0$ = 248
y0$ = 256
x1$ = 264
y1$ = 272
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z PROC ; stbtt__handle_clipped_edge, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2937
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2938
	movss	xmm0, DWORD PTR y0$[rbp]
	ucomiss	xmm0, DWORD PTR y1$[rbp]
	jp	SHORT $LN26@stbtt__han
	jne	SHORT $LN26@stbtt__han
	jmp	$LN1@stbtt__han
$LN26@stbtt__han:
$LN4@stbtt__han:
; Line 2939
	movss	xmm0, DWORD PTR y1$[rbp]
	comiss	xmm0, DWORD PTR y0$[rbp]
	ja	SHORT $LN44@stbtt__han
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BA@ENLNFFAM@?$AAy?$AA0?$AA?5?$AA?$DM?$AA?5?$AAy?$AA1@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN44@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__han
$LN7@stbtt__han:
; Line 2940
	mov	rax, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	comiss	xmm0, DWORD PTR [rcx+24]
	jae	SHORT $LN45@stbtt__han
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BO@JGPMADBG@?$AAe?$AA?9?$AA?$DO?$AAs?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAe?$AA?9?$AA?$DO?$AAe?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN45@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@stbtt__han
; Line 2941
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR y0$[rbp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN27@stbtt__han
	jmp	$LN1@stbtt__han
$LN27@stbtt__han:
; Line 2942
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y1$[rbp]
	jbe	SHORT $LN28@stbtt__han
	jmp	$LN1@stbtt__han
$LN28@stbtt__han:
; Line 2943
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	comiss	xmm0, DWORD PTR y0$[rbp]
	jbe	SHORT $LN29@stbtt__han
; Line 2944
	movss	xmm0, DWORD PTR x1$[rbp]
	subss	xmm0, DWORD PTR x0$[rbp]
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax+24]
	subss	xmm1, DWORD PTR y0$[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rbp]
	subss	xmm1, DWORD PTR y0$[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x0$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x0$[rbp], xmm0
; Line 2945
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR y0$[rbp], xmm0
$LN29@stbtt__han:
; Line 2947
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR y1$[rbp]
	comiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN30@stbtt__han
; Line 2948
	movss	xmm0, DWORD PTR x1$[rbp]
	subss	xmm0, DWORD PTR x0$[rbp]
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax+28]
	subss	xmm1, DWORD PTR y1$[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR y1$[rbp]
	subss	xmm1, DWORD PTR y0$[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR x1$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x1$[rbp], xmm0
; Line 2949
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR y1$[rbp], xmm0
$LN30@stbtt__han:
; Line 2952
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	movss	xmm1, DWORD PTR x0$[rbp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN31@stbtt__han
	jne	SHORT $LN31@stbtt__han
$LN10@stbtt__han:
; Line 2953
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rbp]
	jae	SHORT $LN46@stbtt__han
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 16
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BE@DHAKMBPL@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@stbtt__han
	jmp	$LN32@stbtt__han
$LN31@stbtt__han:
; Line 2954
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rbp]
	ucomiss	xmm1, xmm0
	jp	SHORT $LN33@stbtt__han
	jne	SHORT $LN33@stbtt__han
$LN13@stbtt__han:
; Line 2955
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	comiss	xmm1, xmm0
	jae	SHORT $LN47@stbtt__han
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 18
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BA@FAAMJPKE@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN47@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@stbtt__han
	jmp	$LN34@stbtt__han
$LN33@stbtt__han:
; Line 2956
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	comiss	xmm0, DWORD PTR x0$[rbp]
	jb	SHORT $LN35@stbtt__han
$LN16@stbtt__han:
; Line 2957
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	comiss	xmm0, DWORD PTR x1$[rbp]
	jae	SHORT $LN48@stbtt__han
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 20
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BA@FEPJEPJJ@?$AAx?$AA1?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN48@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@stbtt__han
	jmp	$LN36@stbtt__han
$LN35@stbtt__han:
; Line 2958
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN37@stbtt__han
$LN19@stbtt__han:
; Line 2959
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rbp]
	comiss	xmm1, xmm0
	jae	SHORT $LN49@stbtt__han
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 22
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BE@NGGEAFFG@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?$CL?$AA1@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN49@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN19@stbtt__han
	jmp	SHORT $LN38@stbtt__han
$LN37@stbtt__han:
$LN22@stbtt__han:
; Line 2961
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN50@stbtt__han
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rbp]
	jae	SHORT $LN51@stbtt__han
$LN50@stbtt__han:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 24
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CK@NILBPPPH@?$AAx?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA1?$AA?5?$AA?$DM@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN51@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN22@stbtt__han
$LN38@stbtt__han:
$LN36@stbtt__han:
$LN34@stbtt__han:
$LN32@stbtt__han:
; Line 2963
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	comiss	xmm0, DWORD PTR x0$[rbp]
	jb	SHORT $LN39@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	comiss	xmm0, DWORD PTR x1$[rbp]
	jb	SHORT $LN39@stbtt__han
; Line 2964
	movss	xmm0, DWORD PTR y1$[rbp]
	subss	xmm0, DWORD PTR y0$[rbp]
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN40@stbtt__han
$LN39@stbtt__han:
; Line 2965
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x0$[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN41@stbtt__han
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR x1$[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN41@stbtt__han
; Line 2966
	jmp	$LN42@stbtt__han
$LN41@stbtt__han:
$LN25@stbtt__han:
; Line 2968
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	movss	xmm1, DWORD PTR x0$[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN52@stbtt__han
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x0$[rbp]
	jb	SHORT $LN52@stbtt__han
	cvtsi2ss xmm0, DWORD PTR x$[rbp]
	movss	xmm1, DWORD PTR x1$[rbp]
	comiss	xmm1, xmm0
	jb	SHORT $LN52@stbtt__han
	mov	eax, DWORD PTR x$[rbp]
	inc	eax
	cvtsi2ss xmm0, eax
	comiss	xmm0, DWORD PTR x1$[rbp]
	jae	SHORT $LN53@stbtt__han
$LN52@stbtt__han:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z@4JA
	add	eax, 31
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FK@JPMIPNJF@?$AAx?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAx?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA0?$AA?5?$AA?$DM@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN53@stbtt__han:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN25@stbtt__han
; Line 2969
	movss	xmm0, DWORD PTR y1$[rbp]
	subss	xmm0, DWORD PTR y0$[rbp]
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax+20]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR x$[rbp]
	movss	xmm2, DWORD PTR x0$[rbp]
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtsi2ss xmm2, DWORD PTR x$[rbp]
	movss	xmm3, DWORD PTR x1$[rbp]
	subss	xmm3, xmm2
	movaps	xmm2, xmm3
	addss	xmm1, xmm2
	divss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR __real@3f800000
	subss	xmm2, xmm1
	movaps	xmm1, xmm2
	mulss	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR scanline$[rbp]
	movss	DWORD PTR [rcx+rax*4], xmm0
$LN42@stbtt__han:
$LN40@stbtt__han:
$LN1@stbtt__han:
; Line 2971
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ENDP ; stbtt__handle_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
_TEXT	SEGMENT
z$ = 8
dxdy$ = 36
tv133 = 244
tv87 = 244
hh$ = 288
e$ = 296
off_x$ = 304
start_point$ = 312
userdata$ = 320
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z PROC ; stbtt__new_active, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2766
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2767
	mov	r8, QWORD PTR userdata$[rbp]
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR hh$[rbp]
	call	?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ; stbtt__hheap_alloc
	mov	QWORD PTR z$[rbp], rax
; Line 2768
	mov	rax, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR e$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	subss	xmm1, DWORD PTR [rcx+4]
	divss	xmm0, xmm1
	movss	DWORD PTR dxdy$[rbp], xmm0
$LN4@stbtt__new:
; Line 2769
	cmp	QWORD PTR z$[rbp], 0
	jne	SHORT $LN7@stbtt__new
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1O@EHPNOHML@?$AAz?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbtt__new:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__new
; Line 2771
	cmp	QWORD PTR z$[rbp], 0
	jne	SHORT $LN5@stbtt__new
	mov	rax, QWORD PTR z$[rbp]
	jmp	$LN1@stbtt__new
$LN5@stbtt__new:
; Line 2772
	mov	rax, QWORD PTR z$[rbp]
	movss	xmm0, DWORD PTR dxdy$[rbp]
	movss	DWORD PTR [rax+12], xmm0
; Line 2773
	movss	xmm0, DWORD PTR dxdy$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN12@stbtt__new
	je	SHORT $LN8@stbtt__new
$LN12@stbtt__new:
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR dxdy$[rbp]
	movss	DWORD PTR tv87[rbp], xmm0
	jmp	SHORT $LN9@stbtt__new
$LN8@stbtt__new:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv87[rbp], xmm0
$LN9@stbtt__new:
	mov	rax, QWORD PTR z$[rbp]
	movss	xmm0, DWORD PTR tv87[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 2774
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR start_point$[rbp]
	subss	xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR dxdy$[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR e$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2775
	cvtsi2ss xmm0, DWORD PTR off_x$[rbp]
	mov	rax, QWORD PTR z$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR z$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 2776
	mov	rax, QWORD PTR e$[rbp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN10@stbtt__new
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv133[rbp], xmm0
	jmp	SHORT $LN11@stbtt__new
$LN10@stbtt__new:
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR tv133[rbp], xmm0
$LN11@stbtt__new:
	mov	rax, QWORD PTR z$[rbp]
	movss	xmm0, DWORD PTR tv133[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 2777
	mov	rax, QWORD PTR z$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR [rax+24], xmm0
; Line 2778
	mov	rax, QWORD PTR z$[rbp]
	mov	rcx, QWORD PTR e$[rbp]
	movss	xmm0, DWORD PTR [rcx+12]
	movss	DWORD PTR [rax+28], xmm0
; Line 2779
	mov	rax, QWORD PTR z$[rbp]
	mov	QWORD PTR [rax], 0
; Line 2780
	mov	rax, QWORD PTR z$[rbp]
$LN1@stbtt__new:
; Line 2781
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ENDP ; stbtt__new_active
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
_TEXT	SEGMENT
c$ = 8
n$1 = 40
hh$ = 288
userdata$ = 296
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_cleanup, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2706
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2707
	mov	rax, QWORD PTR hh$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rbp], rax
$LN2@stbtt__hhe:
; Line 2708
	cmp	QWORD PTR c$[rbp], 0
	je	SHORT $LN3@stbtt__hhe
; Line 2709
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR n$1[rbp], rax
; Line 2710
	mov	rcx, QWORD PTR c$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 2711
	mov	rax, QWORD PTR n$1[rbp]
	mov	QWORD PTR c$[rbp], rax
; Line 2712
	jmp	SHORT $LN2@stbtt__hhe
$LN3@stbtt__hhe:
; Line 2713
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_cleanup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z
_TEXT	SEGMENT
hh$ = 224
p$ = 232
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_free, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2700
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2701
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR hh$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 2702
	mov	rax, QWORD PTR hh$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	mov	QWORD PTR [rax+8], rcx
; Line 2703
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_free
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
_TEXT	SEGMENT
p$1 = 8
count$2 = 36
c$3 = 72
tv73 = 276
tv72 = 280
hh$ = 320
size$ = 328
userdata$ = 336
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z PROC ; stbtt__hheap_alloc, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2679
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2680
	mov	rax, QWORD PTR hh$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@stbtt__hhe
; Line 2681
	mov	rax, QWORD PTR hh$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR p$1[rbp], rax
; Line 2682
	mov	rax, QWORD PTR hh$[rbp]
	mov	rcx, QWORD PTR p$1[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rcx
; Line 2683
	mov	rax, QWORD PTR p$1[rbp]
	jmp	$LN1@stbtt__hhe
; Line 2684
	jmp	$LN3@stbtt__hhe
$LN2@stbtt__hhe:
; Line 2685
	mov	rax, QWORD PTR hh$[rbp]
	cmp	DWORD PTR [rax+16], 0
	jne	$LN4@stbtt__hhe
; Line 2686
	cmp	QWORD PTR size$[rbp], 32		; 00000020H
	jae	SHORT $LN9@stbtt__hhe
	mov	DWORD PTR tv73[rbp], 2000		; 000007d0H
	jmp	SHORT $LN10@stbtt__hhe
$LN9@stbtt__hhe:
	cmp	QWORD PTR size$[rbp], 128		; 00000080H
	jae	SHORT $LN7@stbtt__hhe
	mov	DWORD PTR tv72[rbp], 800		; 00000320H
	jmp	SHORT $LN8@stbtt__hhe
$LN7@stbtt__hhe:
	mov	DWORD PTR tv72[rbp], 100		; 00000064H
$LN8@stbtt__hhe:
	mov	eax, DWORD PTR tv72[rbp]
	mov	DWORD PTR tv73[rbp], eax
$LN10@stbtt__hhe:
	mov	eax, DWORD PTR tv73[rbp]
	mov	DWORD PTR count$2[rbp], eax
; Line 2687
	movsxd	rax, DWORD PTR count$2[rbp]
	mov	rcx, QWORD PTR size$[rbp]
	imul	rcx, rax
	mov	rax, rcx
	add	rax, 8
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR c$3[rbp], rax
; Line 2688
	cmp	QWORD PTR c$3[rbp], 0
	jne	SHORT $LN5@stbtt__hhe
; Line 2689
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__hhe
$LN5@stbtt__hhe:
; Line 2690
	mov	rax, QWORD PTR c$3[rbp]
	mov	rcx, QWORD PTR hh$[rbp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2691
	mov	rax, QWORD PTR hh$[rbp]
	mov	rcx, QWORD PTR c$3[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2692
	mov	rax, QWORD PTR hh$[rbp]
	mov	ecx, DWORD PTR count$2[rbp]
	mov	DWORD PTR [rax+16], ecx
$LN4@stbtt__hhe:
; Line 2694
	mov	rax, QWORD PTR hh$[rbp]
	mov	eax, DWORD PTR [rax+16]
	dec	eax
	mov	rcx, QWORD PTR hh$[rbp]
	mov	DWORD PTR [rcx+16], eax
; Line 2695
	mov	rax, QWORD PTR hh$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR hh$[rbp]
	movsxd	rcx, DWORD PTR [rcx+16]
	mov	rdx, QWORD PTR size$[rbp]
	imul	rdx, rcx
	mov	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+8]
$LN3@stbtt__hhe:
$LN1@stbtt__hhe:
; Line 2697
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ENDP ; stbtt__hheap_alloc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
_TEXT	SEGMENT
count_ctx$ = 8
output_ctx$ = 88
__$ArrayPad$ = 344
info$ = 384
glyph_index$ = 392
pvertices$ = 400
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeT2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2238
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2240
	mov	DWORD PTR count_ctx$[rbp], 1
	mov	DWORD PTR count_ctx$[rbp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rbp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rbp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rbp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR count_ctx$[rbp+20], xmm0
	mov	DWORD PTR count_ctx$[rbp+24], 0
	mov	DWORD PTR count_ctx$[rbp+28], 0
	mov	DWORD PTR count_ctx$[rbp+32], 0
	mov	DWORD PTR count_ctx$[rbp+36], 0
	mov	QWORD PTR count_ctx$[rbp+40], 0
	mov	DWORD PTR count_ctx$[rbp+48], 0
; Line 2241
	mov	DWORD PTR output_ctx$[rbp], 0
	mov	DWORD PTR output_ctx$[rbp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rbp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rbp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rbp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR output_ctx$[rbp+20], xmm0
	mov	DWORD PTR output_ctx$[rbp+24], 0
	mov	DWORD PTR output_ctx$[rbp+28], 0
	mov	DWORD PTR output_ctx$[rbp+32], 0
	mov	DWORD PTR output_ctx$[rbp+36], 0
	mov	QWORD PTR output_ctx$[rbp+40], 0
	mov	DWORD PTR output_ctx$[rbp+48], 0
; Line 2242
	lea	r8, QWORD PTR count_ctx$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	$LN5@stbtt__Get
; Line 2243
	movsxd	rax, DWORD PTR count_ctx$[rbp+48]
	imul	rax, rax, 14
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	rcx, QWORD PTR pvertices$[rbp]
	mov	QWORD PTR [rcx], rax
; Line 2244
	mov	rax, QWORD PTR pvertices$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR output_ctx$[rbp+40], rax
; Line 2245
	lea	r8, QWORD PTR output_ctx$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN6@stbtt__Get
$LN4@stbtt__Get:
; Line 2246
	mov	eax, DWORD PTR count_ctx$[rbp+48]
	cmp	DWORD PTR output_ctx$[rbp+48], eax
	je	SHORT $LN8@stbtt__Get
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GE@KABFAMEA@?$AAo?$AAu?$AAt?$AAp?$AAu?$AAt?$AA_?$AAc?$AAt?$AAx?$AA?4?$AAn?$AAu?$AAm?$AA_@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stbtt__Get:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__Get
; Line 2247
	mov	eax, DWORD PTR output_ctx$[rbp+48]
	jmp	SHORT $LN1@stbtt__Get
$LN6@stbtt__Get:
$LN5@stbtt__Get:
; Line 2250
	mov	rax, QWORD PTR pvertices$[rbp]
	mov	QWORD PTR [rax], 0
; Line 2251
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2252
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
_TEXT	SEGMENT
in_header$ = 4
maskbits$ = 36
subr_stack_height$ = 68
sp$ = 100
v$ = 132
i$ = 164
b0$ = 196
has_subrs$ = 228
clear_stack$ = 260
s$ = 304
subr_stack$ = 528
subrs$ = 712
b$ = 760
f$ = 804
dx1$7 = 836
dx2$8 = 868
dx3$9 = 900
dx4$10 = 932
dx5$11 = 964
dx6$12 = 996
dy1$13 = 1028
dy2$14 = 1060
dy3$15 = 1092
dy4$16 = 1124
dy5$17 = 1156
dy6$18 = 1188
dx$19 = 1220
dy$20 = 1252
b1$21 = 1284
$T22 = 2088
$T23 = 2136
$T24 = 2184
$T25 = 2232
$T26 = 2280
$T27 = 2328
$T28 = 2384
$T29 = 2432
tv640 = 2452
tv470 = 2452
tv456 = 2452
tv244 = 2452
tv188 = 2452
tv76 = 2452
tv453 = 2456
tv225 = 2456
__$ArrayPad$ = 2464
info$ = 2512
glyph_index$ = 2520
c$ = 2528
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z PROC ; stbtt__run_charstring, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1979
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2544				; 000009f0H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 428				; 000001acH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2584]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1980
	mov	DWORD PTR in_header$[rbp], 1
	mov	DWORD PTR maskbits$[rbp], 0
	mov	DWORD PTR subr_stack_height$[rbp], 0
	mov	DWORD PTR sp$[rbp], 0
; Line 1981
	mov	DWORD PTR has_subrs$[rbp], 0
; Line 1983
	lea	rax, QWORD PTR subrs$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+112]
	mov	ecx, 16
	rep movsb
; Line 1989
	lea	rax, QWORD PTR $T28[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+80]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR glyph_index$[rbp]
	lea	rdx, QWORD PTR $T28[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T22[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T22[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN2@stbtt__run:
; Line 1990
	mov	eax, DWORD PTR b$[rbp+12]
	cmp	DWORD PTR b$[rbp+8], eax
	jge	$LN3@stbtt__run
; Line 1991
	mov	DWORD PTR i$[rbp], 0
; Line 1992
	mov	DWORD PTR clear_stack$[rbp], 1
; Line 1993
	lea	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rbp], eax
; Line 1994
	mov	eax, DWORD PTR b0$[rbp]
	mov	DWORD PTR tv76[rbp], eax
	mov	eax, DWORD PTR tv76[rbp]
	dec	eax
	mov	DWORD PTR tv76[rbp], eax
	cmp	DWORD PTR tv76[rbp], 30
	ja	$LN94@stbtt__run
	movsxd	rax, DWORD PTR tv76[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN108@stbtt__run[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN29@stbtt__run:
$LN30@stbtt__run:
; Line 1998
	cmp	DWORD PTR in_header$[rbp], 0
	je	SHORT $LN31@stbtt__run
; Line 1999
	mov	eax, DWORD PTR sp$[rbp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rbp], eax
$LN31@stbtt__run:
; Line 2000
	mov	DWORD PTR in_header$[rbp], 0
; Line 2001
	mov	eax, DWORD PTR maskbits$[rbp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, eax
	lea	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2002
	jmp	$LN4@stbtt__run
$LN32@stbtt__run:
$LN33@stbtt__run:
$LN34@stbtt__run:
$LN35@stbtt__run:
; Line 2008
	mov	eax, DWORD PTR sp$[rbp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rbp], eax
; Line 2009
	jmp	$LN4@stbtt__run
$LN36@stbtt__run:
; Line 2012
	mov	DWORD PTR in_header$[rbp], 0
; Line 2013
	cmp	DWORD PTR sp$[rbp], 2
	jge	SHORT $LN37@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN37@stbtt__run:
; Line 2014
	mov	eax, DWORD PTR sp$[rbp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR sp$[rbp]
	sub	ecx, 2
	movsxd	rcx, ecx
	movss	xmm2, DWORD PTR s$[rbp+rax*4]
	movss	xmm1, DWORD PTR s$[rbp+rcx*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2015
	jmp	$LN4@stbtt__run
$LN38@stbtt__run:
; Line 2017
	mov	DWORD PTR in_header$[rbp], 0
; Line 2018
	cmp	DWORD PTR sp$[rbp], 1
	jge	SHORT $LN39@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN39@stbtt__run:
; Line 2019
	mov	eax, DWORD PTR sp$[rbp]
	dec	eax
	cdqe
	movss	xmm2, DWORD PTR s$[rbp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2020
	jmp	$LN4@stbtt__run
$LN40@stbtt__run:
; Line 2022
	mov	DWORD PTR in_header$[rbp], 0
; Line 2023
	cmp	DWORD PTR sp$[rbp], 1
	jge	SHORT $LN41@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN41@stbtt__run:
; Line 2024
	mov	eax, DWORD PTR sp$[rbp]
	dec	eax
	cdqe
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rbp+rax*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2025
	jmp	$LN4@stbtt__run
$LN42@stbtt__run:
; Line 2028
	cmp	DWORD PTR sp$[rbp], 2
	jge	SHORT $LN43@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN43@stbtt__run:
; Line 2029
	jmp	SHORT $LN8@stbtt__run
$LN6@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 2
	mov	DWORD PTR i$[rbp], eax
$LN8@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rbp]
	jge	SHORT $LN7@stbtt__run
; Line 2030
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rbp]
	movss	xmm2, DWORD PTR s$[rbp+rax*4]
	movss	xmm1, DWORD PTR s$[rbp+rcx*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN6@stbtt__run
$LN7@stbtt__run:
; Line 2031
	jmp	$LN4@stbtt__run
$LN44@stbtt__run:
; Line 2037
	cmp	DWORD PTR sp$[rbp], 1
	jge	SHORT $LN45@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN45@stbtt__run:
; Line 2038
	jmp	SHORT $LN46@stbtt__run
	jmp	SHORT $vlineto$109
$LN47@stbtt__run:
; Line 2040
	cmp	DWORD PTR sp$[rbp], 1
	jge	SHORT $LN48@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN48@stbtt__run:
$LN9@stbtt__run:
; Line 2042
	mov	eax, DWORD PTR sp$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN49@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN49@stbtt__run:
; Line 2043
	movsxd	rax, DWORD PTR i$[rbp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rbp+rax*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2044
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN46@stbtt__run:
$vlineto$109:
; Line 2046
	mov	eax, DWORD PTR sp$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN50@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN50@stbtt__run:
; Line 2047
	movsxd	rax, DWORD PTR i$[rbp]
	movss	xmm2, DWORD PTR s$[rbp+rax*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2048
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
; Line 2049
	jmp	SHORT $LN9@stbtt__run
$LN10@stbtt__run:
; Line 2050
	jmp	$LN4@stbtt__run
$LN51@stbtt__run:
; Line 2053
	cmp	DWORD PTR sp$[rbp], 4
	jge	SHORT $LN52@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN52@stbtt__run:
; Line 2054
	jmp	$LN53@stbtt__run
	jmp	$hvcurveto$110
$LN54@stbtt__run:
; Line 2056
	cmp	DWORD PTR sp$[rbp], 4
	jge	SHORT $LN55@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN55@stbtt__run:
$LN12@stbtt__run:
; Line 2058
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rbp]
	jl	SHORT $LN56@stbtt__run
	jmp	$LN13@stbtt__run
$LN56@stbtt__run:
; Line 2059
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR sp$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN102@stbtt__run
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR tv188[rbp], xmm0
	jmp	SHORT $LN103@stbtt__run
$LN102@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv188[rbp], xmm0
$LN103@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rbp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR tv188[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rdx*4]
	movss	xmm2, DWORD PTR s$[rbp+rdi*4]
	xorps	xmm1, xmm1
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2060
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 4
	mov	DWORD PTR i$[rbp], eax
$LN53@stbtt__run:
$hvcurveto$110:
; Line 2062
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rbp]
	jl	SHORT $LN57@stbtt__run
	jmp	$LN13@stbtt__run
$LN57@stbtt__run:
; Line 2063
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cdqe
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR tv244[rbp], xmm0
	mov	eax, DWORD PTR i$[rbp]
	mov	ecx, DWORD PTR sp$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN104@stbtt__run
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 4
	cdqe
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR tv225[rbp], xmm0
	jmp	SHORT $LN105@stbtt__run
$LN104@stbtt__run:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv225[rbp], xmm0
$LN105@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	inc	ecx
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR tv244[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR tv225[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rcx*4]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR s$[rbp+rdx*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2064
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 4
	mov	DWORD PTR i$[rbp], eax
; Line 2065
	jmp	$LN12@stbtt__run
$LN13@stbtt__run:
; Line 2066
	jmp	$LN4@stbtt__run
$LN58@stbtt__run:
; Line 2069
	cmp	DWORD PTR sp$[rbp], 6
	jge	SHORT $LN59@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN59@stbtt__run:
; Line 2070
	jmp	SHORT $LN17@stbtt__run
$LN15@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 6
	mov	DWORD PTR i$[rbp], eax
$LN17@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rbp]
	jge	$LN16@stbtt__run
; Line 2071
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rbp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rbp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rbp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rdi*4]
	movss	xmm2, DWORD PTR s$[rbp+rsi*4]
	movss	xmm1, DWORD PTR s$[rbp+r8*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN15@stbtt__run
$LN16@stbtt__run:
; Line 2072
	jmp	$LN4@stbtt__run
$LN60@stbtt__run:
; Line 2075
	cmp	DWORD PTR sp$[rbp], 8
	jge	SHORT $LN61@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN61@stbtt__run:
; Line 2076
	jmp	SHORT $LN20@stbtt__run
$LN18@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 6
	mov	DWORD PTR i$[rbp], eax
$LN20@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 5
	mov	ecx, DWORD PTR sp$[rbp]
	sub	ecx, 2
	cmp	eax, ecx
	jge	$LN19@stbtt__run
; Line 2077
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rbp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rbp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rbp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rdi*4]
	movss	xmm2, DWORD PTR s$[rbp+rsi*4]
	movss	xmm1, DWORD PTR s$[rbp+r8*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN18@stbtt__run
$LN19@stbtt__run:
; Line 2078
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rbp]
	jl	SHORT $LN62@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN62@stbtt__run:
; Line 2079
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rbp]
	movss	xmm2, DWORD PTR s$[rbp+rax*4]
	movss	xmm1, DWORD PTR s$[rbp+rcx*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2080
	jmp	$LN4@stbtt__run
$LN63@stbtt__run:
; Line 2083
	cmp	DWORD PTR sp$[rbp], 8
	jge	SHORT $LN64@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN64@stbtt__run:
; Line 2084
	jmp	SHORT $LN23@stbtt__run
$LN21@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 2
	mov	DWORD PTR i$[rbp], eax
$LN23@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	ecx, DWORD PTR sp$[rbp]
	sub	ecx, 6
	cmp	eax, ecx
	jge	SHORT $LN22@stbtt__run
; Line 2085
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rbp]
	movss	xmm2, DWORD PTR s$[rbp+rax*4]
	movss	xmm1, DWORD PTR s$[rbp+rcx*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN21@stbtt__run
$LN22@stbtt__run:
; Line 2086
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rbp]
	jl	SHORT $LN65@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN65@stbtt__run:
; Line 2087
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rbp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rbp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rbp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rcx*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rdx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rdi*4]
	movss	xmm2, DWORD PTR s$[rbp+rsi*4]
	movss	xmm1, DWORD PTR s$[rbp+r8*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2088
	jmp	$LN4@stbtt__run
$LN66@stbtt__run:
$LN67@stbtt__run:
; Line 2092
	cmp	DWORD PTR sp$[rbp], 4
	jge	SHORT $LN68@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN68@stbtt__run:
; Line 2093
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rbp], xmm0
; Line 2094
	mov	eax, DWORD PTR sp$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN69@stbtt__run
	movsxd	rax, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR f$[rbp], xmm0
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN69@stbtt__run:
; Line 2095
	jmp	SHORT $LN26@stbtt__run
$LN24@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 4
	mov	DWORD PTR i$[rbp], eax
$LN26@stbtt__run:
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rbp]
	jge	$LN25@stbtt__run
; Line 2096
	cmp	DWORD PTR b0$[rbp], 27
	jne	SHORT $LN70@stbtt__run
; Line 2097
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rbp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rdx*4]
	movss	xmm2, DWORD PTR f$[rbp]
	movss	xmm1, DWORD PTR s$[rbp+rdi*4]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	SHORT $LN71@stbtt__run
$LN70@stbtt__run:
; Line 2099
	mov	eax, DWORD PTR i$[rbp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rbp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rbp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rbp]
	movss	xmm0, DWORD PTR s$[rbp+rax*4]
	movss	DWORD PTR [rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR s$[rbp+rcx*4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR s$[rbp+rdx*4]
	movss	xmm2, DWORD PTR s$[rbp+rdi*4]
	movss	xmm1, DWORD PTR f$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
$LN71@stbtt__run:
; Line 2100
	xorps	xmm0, xmm0
	movss	DWORD PTR f$[rbp], xmm0
; Line 2101
	jmp	$LN24@stbtt__run
$LN25@stbtt__run:
; Line 2102
	jmp	$LN4@stbtt__run
$LN72@stbtt__run:
; Line 2105
	cmp	DWORD PTR has_subrs$[rbp], 0
	jne	SHORT $LN73@stbtt__run
; Line 2106
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+156], 0
	je	SHORT $LN74@stbtt__run
; Line 2107
	mov	r8d, DWORD PTR glyph_index$[rbp]
	mov	rdx, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T25[rbp]
	call	?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ; stbtt__cid_get_glyph_subrs
	lea	rcx, QWORD PTR $T24[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR subrs$[rbp]
	lea	rcx, QWORD PTR $T24[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN74@stbtt__run:
; Line 2108
	mov	DWORD PTR has_subrs$[rbp], 1
$LN73@stbtt__run:
$LN75@stbtt__run:
; Line 2112
	cmp	DWORD PTR sp$[rbp], 1
	jge	SHORT $LN76@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN76@stbtt__run:
; Line 2113
	mov	eax, DWORD PTR sp$[rbp]
	dec	eax
	mov	DWORD PTR sp$[rbp], eax
	movsxd	rax, DWORD PTR sp$[rbp]
	cvttss2si eax, DWORD PTR s$[rbp+rax*4]
	mov	DWORD PTR v$[rbp], eax
; Line 2114
	cmp	DWORD PTR subr_stack_height$[rbp], 10
	jl	SHORT $LN77@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN77@stbtt__run:
; Line 2115
	movsxd	rax, DWORD PTR subr_stack_height$[rbp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rbp]
	lea	rdi, QWORD PTR subr_stack$[rbp+rax]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR subr_stack_height$[rbp]
	inc	eax
	mov	DWORD PTR subr_stack_height$[rbp], eax
; Line 2116
	mov	eax, DWORD PTR v$[rbp]
	mov	DWORD PTR tv456[rbp], eax
	cmp	DWORD PTR b0$[rbp], 10
	jne	SHORT $LN106@stbtt__run
	lea	rax, QWORD PTR subrs$[rbp]
	mov	QWORD PTR tv453[rbp], rax
	jmp	SHORT $LN107@stbtt__run
$LN106@stbtt__run:
	mov	rax, QWORD PTR info$[rbp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv453[rbp], rax
$LN107@stbtt__run:
	lea	rax, QWORD PTR $T29[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv453[rbp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR tv456[rbp]
	lea	rdx, QWORD PTR $T29[rbp]
	lea	rcx, QWORD PTR $T27[rbp]
	call	?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__get_subr
	lea	rcx, QWORD PTR $T26[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T26[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 2117
	cmp	DWORD PTR b$[rbp+12], 0
	jne	SHORT $LN78@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN78@stbtt__run:
; Line 2118
	mov	DWORD PTR b$[rbp+8], 0
; Line 2119
	mov	DWORD PTR clear_stack$[rbp], 0
; Line 2120
	jmp	$LN4@stbtt__run
$LN79@stbtt__run:
; Line 2123
	cmp	DWORD PTR subr_stack_height$[rbp], 0
	jg	SHORT $LN80@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN80@stbtt__run:
; Line 2124
	mov	eax, DWORD PTR subr_stack_height$[rbp]
	dec	eax
	mov	DWORD PTR subr_stack_height$[rbp], eax
	movsxd	rax, DWORD PTR subr_stack_height$[rbp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rbp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR subr_stack$[rbp+rax]
	mov	ecx, 16
	rep movsb
; Line 2125
	mov	DWORD PTR clear_stack$[rbp], 0
; Line 2126
	jmp	$LN4@stbtt__run
$LN81@stbtt__run:
; Line 2129
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 2130
	mov	eax, 1
	jmp	$LN1@stbtt__run
$LN82@stbtt__run:
; Line 2135
	lea	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b1$21[rbp], eax
; Line 2136
	mov	eax, DWORD PTR b1$21[rbp]
	mov	DWORD PTR tv470[rbp], eax
	cmp	DWORD PTR tv470[rbp], 34		; 00000022H
	je	SHORT $LN83@stbtt__run
	cmp	DWORD PTR tv470[rbp], 35		; 00000023H
	je	$LN85@stbtt__run
	cmp	DWORD PTR tv470[rbp], 36		; 00000024H
	je	$LN87@stbtt__run
	cmp	DWORD PTR tv470[rbp], 37		; 00000025H
	je	$LN89@stbtt__run
	jmp	$LN93@stbtt__run
$LN83@stbtt__run:
; Line 2140
	cmp	DWORD PTR sp$[rbp], 7
	jge	SHORT $LN84@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN84@stbtt__run:
; Line 2141
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx1$7[rbp], xmm0
; Line 2142
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx2$8[rbp], xmm0
; Line 2143
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy2$14[rbp], xmm0
; Line 2144
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx3$9[rbp], xmm0
; Line 2145
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx4$10[rbp], xmm0
; Line 2146
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx5$11[rbp], xmm0
; Line 2147
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx6$12[rbp], xmm0
; Line 2148
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$9[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$14[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$8[rbp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx1$7[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2149
	movss	xmm0, DWORD PTR dy2$14[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	xorps	xmm1, xmm1
	movss	DWORD PTR [rsp+48], xmm1
	movss	xmm1, DWORD PTR dx6$12[rbp]
	movss	DWORD PTR [rsp+40], xmm1
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$11[rbp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$10[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2150
	jmp	$LN27@stbtt__run
$LN85@stbtt__run:
; Line 2153
	cmp	DWORD PTR sp$[rbp], 13
	jge	SHORT $LN86@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN86@stbtt__run:
; Line 2154
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx1$7[rbp], xmm0
; Line 2155
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy1$13[rbp], xmm0
; Line 2156
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx2$8[rbp], xmm0
; Line 2157
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy2$14[rbp], xmm0
; Line 2158
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx3$9[rbp], xmm0
; Line 2159
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy3$15[rbp], xmm0
; Line 2160
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx4$10[rbp], xmm0
; Line 2161
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy4$16[rbp], xmm0
; Line 2162
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx5$11[rbp], xmm0
; Line 2163
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy5$17[rbp], xmm0
; Line 2164
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx6$12[rbp], xmm0
; Line 2165
	mov	eax, 4
	imul	rax, rax, 11
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy6$18[rbp], xmm0
; Line 2167
	movss	xmm0, DWORD PTR dy3$15[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$9[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$14[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$8[rbp]
	movss	xmm2, DWORD PTR dy1$13[rbp]
	movss	xmm1, DWORD PTR dx1$7[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2168
	movss	xmm0, DWORD PTR dy6$18[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$12[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$17[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$11[rbp]
	movss	xmm2, DWORD PTR dy4$16[rbp]
	movss	xmm1, DWORD PTR dx4$10[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2169
	jmp	$LN27@stbtt__run
$LN87@stbtt__run:
; Line 2172
	cmp	DWORD PTR sp$[rbp], 9
	jge	SHORT $LN88@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN88@stbtt__run:
; Line 2173
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx1$7[rbp], xmm0
; Line 2174
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy1$13[rbp], xmm0
; Line 2175
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx2$8[rbp], xmm0
; Line 2176
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy2$14[rbp], xmm0
; Line 2177
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx3$9[rbp], xmm0
; Line 2178
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx4$10[rbp], xmm0
; Line 2179
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx5$11[rbp], xmm0
; Line 2180
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy5$17[rbp], xmm0
; Line 2181
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx6$12[rbp], xmm0
; Line 2182
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$9[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$14[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$8[rbp]
	movss	xmm2, DWORD PTR dy1$13[rbp]
	movss	xmm1, DWORD PTR dx1$7[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2183
	movss	xmm0, DWORD PTR dy1$13[rbp]
	addss	xmm0, DWORD PTR dy2$14[rbp]
	addss	xmm0, DWORD PTR dy5$17[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$12[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$17[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$11[rbp]
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR dx4$10[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2184
	jmp	$LN27@stbtt__run
$LN89@stbtt__run:
; Line 2187
	cmp	DWORD PTR sp$[rbp], 11
	jge	SHORT $LN90@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN90@stbtt__run:
; Line 2188
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx1$7[rbp], xmm0
; Line 2189
	mov	eax, 4
	imul	rax, rax, 1
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy1$13[rbp], xmm0
; Line 2190
	mov	eax, 4
	imul	rax, rax, 2
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx2$8[rbp], xmm0
; Line 2191
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy2$14[rbp], xmm0
; Line 2192
	mov	eax, 4
	imul	rax, rax, 4
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx3$9[rbp], xmm0
; Line 2193
	mov	eax, 4
	imul	rax, rax, 5
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy3$15[rbp], xmm0
; Line 2194
	mov	eax, 4
	imul	rax, rax, 6
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx4$10[rbp], xmm0
; Line 2195
	mov	eax, 4
	imul	rax, rax, 7
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy4$16[rbp], xmm0
; Line 2196
	mov	eax, 4
	imul	rax, rax, 8
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dx5$11[rbp], xmm0
; Line 2197
	mov	eax, 4
	imul	rax, rax, 9
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy5$17[rbp], xmm0
; Line 2198
	mov	eax, 4
	imul	rax, rax, 10
	movss	xmm0, DWORD PTR s$[rbp+rax]
	movss	DWORD PTR dy6$18[rbp], xmm0
	movss	xmm0, DWORD PTR dy6$18[rbp]
	movss	DWORD PTR dx6$12[rbp], xmm0
; Line 2199
	movss	xmm0, DWORD PTR dx1$7[rbp]
	addss	xmm0, DWORD PTR dx2$8[rbp]
	addss	xmm0, DWORD PTR dx3$9[rbp]
	addss	xmm0, DWORD PTR dx4$10[rbp]
	addss	xmm0, DWORD PTR dx5$11[rbp]
	movss	DWORD PTR dx$19[rbp], xmm0
; Line 2200
	movss	xmm0, DWORD PTR dy1$13[rbp]
	addss	xmm0, DWORD PTR dy2$14[rbp]
	addss	xmm0, DWORD PTR dy3$15[rbp]
	addss	xmm0, DWORD PTR dy4$16[rbp]
	addss	xmm0, DWORD PTR dy5$17[rbp]
	movss	DWORD PTR dy$20[rbp], xmm0
; Line 2201
	movss	xmm0, DWORD PTR dx$19[rbp]
	call	fabsf
	movss	DWORD PTR tv640[rbp], xmm0
	movss	xmm0, DWORD PTR dy$20[rbp]
	call	fabsf
	movss	xmm1, DWORD PTR tv640[rbp]
	comiss	xmm1, xmm0
	jbe	SHORT $LN91@stbtt__run
; Line 2202
	movss	xmm0, DWORD PTR dy$20[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dy6$18[rbp], xmm0
	jmp	SHORT $LN92@stbtt__run
$LN91@stbtt__run:
; Line 2204
	movss	xmm0, DWORD PTR dx$19[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR dx6$12[rbp], xmm0
$LN92@stbtt__run:
; Line 2205
	movss	xmm0, DWORD PTR dy3$15[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx3$9[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy2$14[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx2$8[rbp]
	movss	xmm2, DWORD PTR dy1$13[rbp]
	movss	xmm1, DWORD PTR dx1$7[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2206
	movss	xmm0, DWORD PTR dy6$18[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR dx6$12[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR dy5$17[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR dx5$11[rbp]
	movss	xmm2, DWORD PTR dy4$16[rbp]
	movss	xmm1, DWORD PTR dx4$10[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2207
	jmp	SHORT $LN27@stbtt__run
$LN93@stbtt__run:
; Line 2210
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN27@stbtt__run:
; Line 2212
	jmp	$LN4@stbtt__run
$LN94@stbtt__run:
; Line 2215
	cmp	DWORD PTR b0$[rbp], 255			; 000000ffH
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rbp], 28
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rbp], 32			; 00000020H
	jl	SHORT $LN96@stbtt__run
	cmp	DWORD PTR b0$[rbp], 254			; 000000feH
	jle	SHORT $LN95@stbtt__run
$LN96@stbtt__run:
; Line 2216
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN95@stbtt__run:
; Line 2219
	cmp	DWORD PTR b0$[rbp], 255			; 000000ffH
	jne	SHORT $LN97@stbtt__run
; Line 2220
	mov	edx, 4
	lea	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@47800000
	movss	DWORD PTR f$[rbp], xmm0
; Line 2221
	jmp	SHORT $LN98@stbtt__run
$LN97@stbtt__run:
; Line 2222
	mov	edx, -1
	lea	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2223
	lea	rcx, QWORD PTR b$[rbp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	cwde
	cvtsi2ss xmm0, eax
	movss	DWORD PTR f$[rbp], xmm0
$LN98@stbtt__run:
; Line 2225
	cmp	DWORD PTR sp$[rbp], 48			; 00000030H
	jl	SHORT $LN99@stbtt__run
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__run
$LN99@stbtt__run:
; Line 2226
	movsxd	rax, DWORD PTR sp$[rbp]
	movss	xmm0, DWORD PTR f$[rbp]
	movss	DWORD PTR s$[rbp+rax*4], xmm0
	mov	eax, DWORD PTR sp$[rbp]
	inc	eax
	mov	DWORD PTR sp$[rbp], eax
; Line 2227
	mov	DWORD PTR clear_stack$[rbp], 0
$LN4@stbtt__run:
; Line 2230
	cmp	DWORD PTR clear_stack$[rbp], 0
	je	SHORT $LN100@stbtt__run
	mov	DWORD PTR sp$[rbp], 0
$LN100@stbtt__run:
; Line 2231
	jmp	$LN2@stbtt__run
$LN3@stbtt__run:
; Line 2232
	xor	eax, eax
$LN1@stbtt__run:
; Line 2235
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2480]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
	npad	2
$LN108@stbtt__run:
	DD	$LN32@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN33@stbtt__run
	DD	$LN38@stbtt__run
	DD	$LN42@stbtt__run
	DD	$LN47@stbtt__run
	DD	$LN44@stbtt__run
	DD	$LN58@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN72@stbtt__run
	DD	$LN79@stbtt__run
	DD	$LN82@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN81@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN34@stbtt__run
	DD	$LN29@stbtt__run
	DD	$LN30@stbtt__run
	DD	$LN36@stbtt__run
	DD	$LN40@stbtt__run
	DD	$LN35@stbtt__run
	DD	$LN60@stbtt__run
	DD	$LN63@stbtt__run
	DD	$LN66@stbtt__run
	DD	$LN67@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN75@stbtt__run
	DD	$LN54@stbtt__run
	DD	$LN51@stbtt__run
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ENDP ; stbtt__run_charstring
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
_TEXT	SEGMENT
fdselect$ = 8
nranges$ = 52
start$ = 84
end$ = 116
v$ = 148
fmt$ = 180
fdselector$ = 212
i$ = 244
$T4 = 664
$T5 = 712
$T6 = 760
$T7 = 808
$T8 = 856
$T9 = 904
$T10 = 960
$T11 = 1008
$T12 = 1056
__$ArrayPad$ = 1080
__$ReturnAddress$ = 1120
info$ = 1128
glyph_index$ = 1136
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z PROC ; stbtt__cid_get_glyph_subrs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1951
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1120				; 00000460H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 176				; 000000b0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1160]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1952
	lea	rax, QWORD PTR fdselect$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+144]
	mov	ecx, 16
	rep movsb
; Line 1953
	mov	DWORD PTR fdselector$[rbp], -1
; Line 1955
	xor	edx, edx
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1956
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fmt$[rbp], eax
; Line 1957
	cmp	DWORD PTR fmt$[rbp], 0
	jne	SHORT $LN5@stbtt__cid
; Line 1959
	mov	edx, DWORD PTR glyph_index$[rbp]
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1960
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fdselector$[rbp], eax
	jmp	$LN6@stbtt__cid
$LN5@stbtt__cid:
; Line 1961
	cmp	DWORD PTR fmt$[rbp], 3
	jne	$LN7@stbtt__cid
; Line 1962
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR nranges$[rbp], eax
; Line 1963
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rbp], eax
; Line 1964
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt__cid
$LN2@stbtt__cid:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt__cid:
	mov	eax, DWORD PTR nranges$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stbtt__cid
; Line 1965
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rbp], eax
; Line 1966
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rbp], eax
; Line 1967
	mov	eax, DWORD PTR start$[rbp]
	cmp	DWORD PTR glyph_index$[rbp], eax
	jl	SHORT $LN8@stbtt__cid
	mov	eax, DWORD PTR end$[rbp]
	cmp	DWORD PTR glyph_index$[rbp], eax
	jge	SHORT $LN8@stbtt__cid
; Line 1968
	mov	eax, DWORD PTR v$[rbp]
	mov	DWORD PTR fdselector$[rbp], eax
; Line 1969
	jmp	SHORT $LN3@stbtt__cid
$LN8@stbtt__cid:
; Line 1971
	mov	eax, DWORD PTR end$[rbp]
	mov	DWORD PTR start$[rbp], eax
; Line 1972
	jmp	SHORT $LN2@stbtt__cid
$LN3@stbtt__cid:
$LN7@stbtt__cid:
$LN6@stbtt__cid:
; Line 1974
	cmp	DWORD PTR fdselector$[rbp], -1
	jne	SHORT $LN9@stbtt__cid
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T4[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN9@stbtt__cid:
; Line 1975
	lea	rax, QWORD PTR $T10[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+128]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR fdselector$[rbp]
	lea	rdx, QWORD PTR $T10[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T7[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T12[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T11[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T12[rbp]
	lea	rdx, QWORD PTR $T11[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T6[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
; Line 1976
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1088]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ENDP ; stbtt__cid_get_glyph_subrs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
_TEXT	SEGMENT
count$ = 4
bias$ = 36
$T1 = 264
$T2 = 312
$T3 = 360
$T4 = 408
$T5 = 464
__$ReturnAddress$ = 528
idx$ = 536
n$ = 544
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z PROC		; stbtt__get_subr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1937
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 528				; 00000210H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1938
	mov	rcx, QWORD PTR idx$[rbp]
	call	?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ; stbtt__cff_index_count
	mov	DWORD PTR count$[rbp], eax
; Line 1939
	mov	DWORD PTR bias$[rbp], 107		; 0000006bH
; Line 1940
	cmp	DWORD PTR count$[rbp], 33900		; 0000846cH
	jl	SHORT $LN2@stbtt__get
; Line 1941
	mov	DWORD PTR bias$[rbp], 32768		; 00008000H
	jmp	SHORT $LN3@stbtt__get
$LN2@stbtt__get:
; Line 1942
	cmp	DWORD PTR count$[rbp], 1240		; 000004d8H
	jl	SHORT $LN4@stbtt__get
; Line 1943
	mov	DWORD PTR bias$[rbp], 1131		; 0000046bH
$LN4@stbtt__get:
$LN3@stbtt__get:
; Line 1944
	mov	eax, DWORD PTR bias$[rbp]
	mov	ecx, DWORD PTR n$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rbp], eax
; Line 1945
	cmp	DWORD PTR n$[rbp], 0
	jl	SHORT $LN6@stbtt__get
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR n$[rbp], eax
	jl	SHORT $LN5@stbtt__get
$LN6@stbtt__get:
; Line 1946
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T1[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	SHORT $LN1@stbtt__get
$LN5@stbtt__get:
; Line 1947
	lea	rax, QWORD PTR $T5[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR idx$[rbp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR n$[rbp]
	lea	rdx, QWORD PTR $T5[rbp]
	lea	rcx, QWORD PTR $T4[rbp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T3[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
$LN1@stbtt__get:
; Line 1948
	lea	rsp, QWORD PTR [rbp+496]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ENDP		; stbtt__get_subr
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
_TEXT	SEGMENT
cx1$ = 4
cy1$ = 36
cx2$ = 68
cy2$ = 100
ctx$ = 352
dx1$ = 360
dy1$ = 368
dx2$ = 376
dy2$ = 384
dx3$ = 392
dy3$ = 400
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z PROC ; stbtt__csctx_rccurve_to, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1926
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1927
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx1$[rbp]
	movss	DWORD PTR cx1$[rbp], xmm0
; Line 1928
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy1$[rbp]
	movss	DWORD PTR cy1$[rbp], xmm0
; Line 1929
	movss	xmm0, DWORD PTR cx1$[rbp]
	addss	xmm0, DWORD PTR dx2$[rbp]
	movss	DWORD PTR cx2$[rbp], xmm0
; Line 1930
	movss	xmm0, DWORD PTR cy1$[rbp]
	addss	xmm0, DWORD PTR dy2$[rbp]
	movss	DWORD PTR cy2$[rbp], xmm0
; Line 1931
	movss	xmm0, DWORD PTR cx2$[rbp]
	addss	xmm0, DWORD PTR dx3$[rbp]
	mov	rax, QWORD PTR ctx$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1932
	movss	xmm0, DWORD PTR cy2$[rbp]
	addss	xmm0, DWORD PTR dy3$[rbp]
	mov	rax, QWORD PTR ctx$[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1933
	cvttss2si eax, DWORD PTR cy2$[rbp]
	cvttss2si ecx, DWORD PTR cx2$[rbp]
	cvttss2si edx, DWORD PTR cy1$[rbp]
	cvttss2si r8d, DWORD PTR cx1$[rbp]
	mov	r9, QWORD PTR ctx$[rbp]
	cvttss2si r9d, DWORD PTR [r9+20]
	mov	r10, QWORD PTR ctx$[rbp]
	cvttss2si r10d, DWORD PTR [r10+16]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, r10d
	mov	dl, 4
	mov	rcx, QWORD PTR ctx$[rbp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1934
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ENDP ; stbtt__csctx_rccurve_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
_TEXT	SEGMENT
ctx$ = 224
dx$ = 232
dy$ = 240
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rline_to, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1919
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1920
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rbp]
	mov	rax, QWORD PTR ctx$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 1921
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rbp]
	mov	rax, QWORD PTR ctx$[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 1922
	mov	rax, QWORD PTR ctx$[rbp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rbp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rbp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1923
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rline_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
_TEXT	SEGMENT
tv72 = 192
tv68 = 192
ctx$ = 240
dx$ = 248
dy$ = 256
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rmove_to, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1911
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1912
	mov	rcx, QWORD PTR ctx$[rbp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 1913
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	addss	xmm0, DWORD PTR dx$[rbp]
	movss	DWORD PTR tv68[rbp], xmm0
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR tv68[rbp]
	movss	DWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR tv68[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 1914
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR dy$[rbp]
	movss	DWORD PTR tv72[rbp], xmm0
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR tv72[rbp]
	movss	DWORD PTR [rax+20], xmm0
	mov	rax, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR tv72[rbp]
	movss	DWORD PTR [rax+12], xmm0
; Line 1915
	mov	rax, QWORD PTR ctx$[rbp]
	cvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rbp]
	cvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 1
	mov	rcx, QWORD PTR ctx$[rbp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1916
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rmove_to
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
_TEXT	SEGMENT
ctx$ = 224
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z PROC	; stbtt__csctx_close_shape, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1905
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1906
	mov	rax, QWORD PTR ctx$[rbp]
	mov	rcx, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	ucomiss	xmm0, DWORD PTR [rcx+16]
	jp	SHORT $LN3@stbtt__csc
	jne	SHORT $LN3@stbtt__csc
	mov	rax, QWORD PTR ctx$[rbp]
	mov	rcx, QWORD PTR ctx$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	ucomiss	xmm0, DWORD PTR [rcx+20]
	jp	SHORT $LN5@stbtt__csc
	je	SHORT $LN2@stbtt__csc
$LN5@stbtt__csc:
$LN3@stbtt__csc:
; Line 1907
	mov	rax, QWORD PTR ctx$[rbp]
	cvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR ctx$[rbp]
	cvttss2si ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rbp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
$LN2@stbtt__csc:
; Line 1908
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ENDP	; stbtt__csctx_close_shape
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
_TEXT	SEGMENT
c$ = 224
type$ = 232
x$ = 240
y$ = 248
cx$ = 256
cy$ = 264
cx1$ = 272
cy1$ = 280
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z PROC	; stbtt__csctx_v, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1889
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1890
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN2@stbtt__csc
; Line 1891
	mov	r8d, DWORD PTR y$[rbp]
	mov	edx, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1892
	movzx	eax, BYTE PTR type$[rbp]
	cmp	eax, 4
	jne	SHORT $LN4@stbtt__csc
; Line 1893
	mov	r8d, DWORD PTR cy$[rbp]
	mov	edx, DWORD PTR cx$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1894
	mov	r8d, DWORD PTR cy1$[rbp]
	mov	edx, DWORD PTR cx1$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
$LN4@stbtt__csc:
; Line 1896
	jmp	$LN3@stbtt__csc
$LN2@stbtt__csc:
; Line 1897
	mov	rax, QWORD PTR c$[rbp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rbp]
	add	rax, QWORD PTR [rcx+40]
	mov	ecx, DWORD PTR cy$[rbp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR cx$[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR y$[rbp]
	mov	r8d, DWORD PTR x$[rbp]
	movzx	edx, BYTE PTR type$[rbp]
	mov	rcx, rax
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1898
	mov	rax, QWORD PTR c$[rbp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cx1$[rbp]
	mov	WORD PTR [rcx+rax+8], dx
; Line 1899
	mov	rax, QWORD PTR c$[rbp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cy1$[rbp]
	mov	WORD PTR [rcx+rax+10], dx
$LN3@stbtt__csc:
; Line 1901
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+48]
	inc	eax
	mov	rcx, QWORD PTR c$[rbp]
	mov	DWORD PTR [rcx+48], eax
; Line 1902
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ENDP	; stbtt__csctx_v
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z
_TEXT	SEGMENT
c$ = 224
x$ = 232
y$ = 240
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z PROC	; stbtt__track_vertex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1880
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1881
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR x$[rbp], eax
	jg	SHORT $LN3@stbtt__tra
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@stbtt__tra
$LN3@stbtt__tra:
	mov	rax, QWORD PTR c$[rbp]
	mov	ecx, DWORD PTR x$[rbp]
	mov	DWORD PTR [rax+28], ecx
$LN2@stbtt__tra:
; Line 1882
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR y$[rbp], eax
	jg	SHORT $LN5@stbtt__tra
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN4@stbtt__tra
$LN5@stbtt__tra:
	mov	rax, QWORD PTR c$[rbp]
	mov	ecx, DWORD PTR y$[rbp]
	mov	DWORD PTR [rax+36], ecx
$LN4@stbtt__tra:
; Line 1883
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR x$[rbp], eax
	jl	SHORT $LN7@stbtt__tra
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@stbtt__tra
$LN7@stbtt__tra:
	mov	rax, QWORD PTR c$[rbp]
	mov	ecx, DWORD PTR x$[rbp]
	mov	DWORD PTR [rax+24], ecx
$LN6@stbtt__tra:
; Line 1884
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR y$[rbp], eax
	jl	SHORT $LN9@stbtt__tra
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@stbtt__tra
$LN9@stbtt__tra:
	mov	rax, QWORD PTR c$[rbp]
	mov	ecx, DWORD PTR y$[rbp]
	mov	DWORD PTR [rax+32], ecx
$LN8@stbtt__tra:
; Line 1885
	mov	rax, QWORD PTR c$[rbp]
	mov	DWORD PTR [rax+4], 1
; Line 1886
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ENDP	; stbtt__track_vertex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
_TEXT	SEGMENT
numberOfContours$ = 4
endPtsOfContours$ = 40
data$ = 72
vertices$ = 104
num_vertices$ = 132
g$ = 164
flags$5 = 196
flagcount$6 = 228
ins$7 = 260
i$8 = 292
j$9 = 324
m$10 = 356
n$11 = 388
next_move$12 = 420
was_off$13 = 452
off$14 = 484
start_off$15 = 516
x$16 = 548
y$17 = 580
cx$18 = 612
cy$19 = 644
sx$20 = 676
sy$21 = 708
scx$22 = 740
scy$23 = 772
points$24 = 808
dx$25 = 836
dy$26 = 868
more$27 = 900
comp$28 = 936
flags$29 = 964
gidx$30 = 996
comp_num_verts$31 = 1028
i$32 = 1060
comp_verts$33 = 1096
tmp$34 = 1128
mtx$35 = 1160
m$36 = 1204
n$37 = 1236
v$38 = 1272
x$39 = 1300
y$40 = 1332
tv494 = 1924
tv318 = 1924
tv229 = 1924
tv222 = 1924
tv187 = 1924
tv180 = 1924
tv160 = 1924
tv154 = 1924
tv421 = 1928
tv410 = 1928
tv398 = 1928
tv371 = 1928
__$ArrayPad$ = 1936
info$ = 1984
glyph_index$ = 1992
pvertices$ = 2000
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeTT, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1640
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2032				; 000007f0H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 344				; 00000158H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2072]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1643
	mov	rax, QWORD PTR info$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rbp], rax
; Line 1644
	mov	QWORD PTR vertices$[rbp], 0
; Line 1645
	mov	DWORD PTR num_vertices$[rbp], 0
; Line 1646
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rbp], eax
; Line 1648
	mov	rax, QWORD PTR pvertices$[rbp]
	mov	QWORD PTR [rax], 0
; Line 1650
	cmp	DWORD PTR g$[rbp], 0
	jge	SHORT $LN25@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN25@stbtt__Get:
; Line 1652
	movsxd	rax, DWORD PTR g$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rbp], ax
; Line 1654
	movsx	eax, WORD PTR numberOfContours$[rbp]
	test	eax, eax
	jle	$LN26@stbtt__Get
; Line 1655
	mov	BYTE PTR flags$5[rbp], 0
; Line 1656
	mov	DWORD PTR j$9[rbp], 0
	mov	DWORD PTR was_off$13[rbp], 0
	mov	DWORD PTR start_off$15[rbp], 0
; Line 1659
	movsxd	rax, DWORD PTR g$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR endPtsOfContours$[rbp], rax
; Line 1660
	movsxd	rax, DWORD PTR g$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR ins$7[rbp], eax
; Line 1661
	movsxd	rax, DWORD PTR g$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	movsxd	rcx, DWORD PTR ins$7[rbp]
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	QWORD PTR points$24[rbp], rax
; Line 1663
	movsx	eax, WORD PTR numberOfContours$[rbp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rbp]
	lea	rax, QWORD PTR [rcx+rax-2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR n$11[rbp], eax
; Line 1665
	movsx	eax, WORD PTR numberOfContours$[rbp]
	mov	ecx, DWORD PTR n$11[rbp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR m$10[rbp], eax
; Line 1666
	movsxd	rax, DWORD PTR m$10[rbp]
	imul	rax, rax, 14
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR vertices$[rbp], rax
; Line 1667
	cmp	QWORD PTR vertices$[rbp], 0
	jne	SHORT $LN28@stbtt__Get
; Line 1668
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN28@stbtt__Get:
; Line 1670
	mov	DWORD PTR next_move$12[rbp], 0
; Line 1671
	mov	BYTE PTR flagcount$6[rbp], 0
; Line 1677
	mov	eax, DWORD PTR n$11[rbp]
	mov	ecx, DWORD PTR m$10[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR off$14[rbp], eax
; Line 1681
	mov	DWORD PTR i$8[rbp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$8[rbp]
	inc	eax
	mov	DWORD PTR i$8[rbp], eax
$LN4@stbtt__Get:
	mov	eax, DWORD PTR n$11[rbp]
	cmp	DWORD PTR i$8[rbp], eax
	jge	$LN3@stbtt__Get
; Line 1682
	movzx	eax, BYTE PTR flagcount$6[rbp]
	test	eax, eax
	jne	SHORT $LN29@stbtt__Get
; Line 1683
	mov	rax, QWORD PTR points$24[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv154[rbp], al
	mov	rax, QWORD PTR points$24[rbp]
	inc	rax
	mov	QWORD PTR points$24[rbp], rax
	movzx	eax, BYTE PTR tv154[rbp]
	mov	BYTE PTR flags$5[rbp], al
; Line 1684
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN31@stbtt__Get
; Line 1685
	mov	rax, QWORD PTR points$24[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv160[rbp], al
	mov	rax, QWORD PTR points$24[rbp]
	inc	rax
	mov	QWORD PTR points$24[rbp], rax
	movzx	eax, BYTE PTR tv160[rbp]
	mov	BYTE PTR flagcount$6[rbp], al
$LN31@stbtt__Get:
; Line 1686
	jmp	SHORT $LN30@stbtt__Get
$LN29@stbtt__Get:
; Line 1687
	movzx	eax, BYTE PTR flagcount$6[rbp]
	dec	al
	mov	BYTE PTR flagcount$6[rbp], al
$LN30@stbtt__Get:
; Line 1688
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	edx, BYTE PTR flags$5[rbp]
	mov	BYTE PTR [rcx+rax+12], dl
; Line 1689
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 1692
	mov	DWORD PTR x$16[rbp], 0
; Line 1693
	mov	DWORD PTR i$8[rbp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR i$8[rbp]
	inc	eax
	mov	DWORD PTR i$8[rbp], eax
$LN7@stbtt__Get:
	mov	eax, DWORD PTR n$11[rbp]
	cmp	DWORD PTR i$8[rbp], eax
	jge	$LN6@stbtt__Get
; Line 1694
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$5[rbp], al
; Line 1695
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN32@stbtt__Get
; Line 1696
	mov	rax, QWORD PTR points$24[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv180[rbp], ax
	mov	rax, QWORD PTR points$24[rbp]
	inc	rax
	mov	QWORD PTR points$24[rbp], rax
	movzx	eax, WORD PTR tv180[rbp]
	mov	WORD PTR dx$25[rbp], ax
; Line 1697
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN70@stbtt__Get
	movsx	eax, WORD PTR dx$25[rbp]
	mov	DWORD PTR tv187[rbp], eax
	jmp	SHORT $LN71@stbtt__Get
$LN70@stbtt__Get:
	movsx	eax, WORD PTR dx$25[rbp]
	neg	eax
	mov	DWORD PTR tv187[rbp], eax
$LN71@stbtt__Get:
	mov	eax, DWORD PTR tv187[rbp]
	mov	ecx, DWORD PTR x$16[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$16[rbp], eax
; Line 1698
	jmp	SHORT $LN33@stbtt__Get
$LN32@stbtt__Get:
; Line 1699
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN34@stbtt__Get
; Line 1700
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$24[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$24[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR x$16[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$16[rbp], eax
; Line 1701
	mov	rax, QWORD PTR points$24[rbp]
	add	rax, 2
	mov	QWORD PTR points$24[rbp], rax
$LN34@stbtt__Get:
$LN33@stbtt__Get:
; Line 1704
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	edx, WORD PTR x$16[rbp]
	mov	WORD PTR [rcx+rax], dx
; Line 1705
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 1708
	mov	DWORD PTR y$17[rbp], 0
; Line 1709
	mov	DWORD PTR i$8[rbp], 0
	jmp	SHORT $LN10@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR i$8[rbp]
	inc	eax
	mov	DWORD PTR i$8[rbp], eax
$LN10@stbtt__Get:
	mov	eax, DWORD PTR n$11[rbp]
	cmp	DWORD PTR i$8[rbp], eax
	jge	$LN9@stbtt__Get
; Line 1710
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$5[rbp], al
; Line 1711
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN35@stbtt__Get
; Line 1712
	mov	rax, QWORD PTR points$24[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv222[rbp], ax
	mov	rax, QWORD PTR points$24[rbp]
	inc	rax
	mov	QWORD PTR points$24[rbp], rax
	movzx	eax, WORD PTR tv222[rbp]
	mov	WORD PTR dy$26[rbp], ax
; Line 1713
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN72@stbtt__Get
	movsx	eax, WORD PTR dy$26[rbp]
	mov	DWORD PTR tv229[rbp], eax
	jmp	SHORT $LN73@stbtt__Get
$LN72@stbtt__Get:
	movsx	eax, WORD PTR dy$26[rbp]
	neg	eax
	mov	DWORD PTR tv229[rbp], eax
$LN73@stbtt__Get:
	mov	eax, DWORD PTR tv229[rbp]
	mov	ecx, DWORD PTR y$17[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$17[rbp], eax
; Line 1714
	jmp	SHORT $LN36@stbtt__Get
$LN35@stbtt__Get:
; Line 1715
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN37@stbtt__Get
; Line 1716
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$24[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$24[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR y$17[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$17[rbp], eax
; Line 1717
	mov	rax, QWORD PTR points$24[rbp]
	add	rax, 2
	mov	QWORD PTR points$24[rbp], rax
$LN37@stbtt__Get:
$LN36@stbtt__Get:
; Line 1720
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	edx, WORD PTR y$17[rbp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 1721
	jmp	$LN8@stbtt__Get
$LN9@stbtt__Get:
; Line 1724
	mov	DWORD PTR num_vertices$[rbp], 0
; Line 1725
	mov	DWORD PTR scy$23[rbp], 0
	mov	eax, DWORD PTR scy$23[rbp]
	mov	DWORD PTR scx$22[rbp], eax
	mov	eax, DWORD PTR scx$22[rbp]
	mov	DWORD PTR cy$19[rbp], eax
	mov	eax, DWORD PTR cy$19[rbp]
	mov	DWORD PTR cx$18[rbp], eax
	mov	eax, DWORD PTR cx$18[rbp]
	mov	DWORD PTR sy$21[rbp], eax
	mov	eax, DWORD PTR sy$21[rbp]
	mov	DWORD PTR sx$20[rbp], eax
; Line 1726
	mov	DWORD PTR i$8[rbp], 0
	jmp	SHORT $LN13@stbtt__Get
$LN11@stbtt__Get:
	mov	eax, DWORD PTR i$8[rbp]
	inc	eax
	mov	DWORD PTR i$8[rbp], eax
$LN13@stbtt__Get:
	mov	eax, DWORD PTR n$11[rbp]
	cmp	DWORD PTR i$8[rbp], eax
	jge	$LN12@stbtt__Get
; Line 1727
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$5[rbp], al
; Line 1728
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x$16[rbp], eax
; Line 1729
	mov	eax, DWORD PTR i$8[rbp]
	mov	ecx, DWORD PTR off$14[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y$17[rbp], eax
; Line 1731
	mov	eax, DWORD PTR i$8[rbp]
	cmp	DWORD PTR next_move$12[rbp], eax
	jne	$LN38@stbtt__Get
; Line 1732
	cmp	DWORD PTR i$8[rbp], 0
	je	SHORT $LN40@stbtt__Get
; Line 1733
	mov	eax, DWORD PTR cy$19[rbp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$18[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$23[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$21[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$20[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$15[rbp]
	mov	r8d, DWORD PTR was_off$13[rbp]
	mov	edx, DWORD PTR num_vertices$[rbp]
	mov	rcx, QWORD PTR vertices$[rbp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rbp], eax
$LN40@stbtt__Get:
; Line 1736
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN74@stbtt__Get
	mov	DWORD PTR tv318[rbp], 1
	jmp	SHORT $LN75@stbtt__Get
$LN74@stbtt__Get:
	mov	DWORD PTR tv318[rbp], 0
$LN75@stbtt__Get:
	mov	eax, DWORD PTR tv318[rbp]
	mov	DWORD PTR start_off$15[rbp], eax
; Line 1737
	cmp	DWORD PTR start_off$15[rbp], 0
	je	$LN41@stbtt__Get
; Line 1740
	mov	eax, DWORD PTR x$16[rbp]
	mov	DWORD PTR scx$22[rbp], eax
; Line 1741
	mov	eax, DWORD PTR y$17[rbp]
	mov	DWORD PTR scy$23[rbp], eax
; Line 1742
	mov	eax, DWORD PTR off$14[rbp]
	mov	ecx, DWORD PTR i$8[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN43@stbtt__Get
; Line 1744
	mov	eax, DWORD PTR off$14[rbp]
	mov	ecx, DWORD PTR i$8[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR x$16[rbp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sx$20[rbp], eax
; Line 1745
	mov	eax, DWORD PTR off$14[rbp]
	mov	ecx, DWORD PTR i$8[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	ecx, DWORD PTR y$17[rbp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sy$21[rbp], eax
; Line 1746
	jmp	SHORT $LN44@stbtt__Get
$LN43@stbtt__Get:
; Line 1748
	mov	eax, DWORD PTR off$14[rbp]
	mov	ecx, DWORD PTR i$8[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR sx$20[rbp], eax
; Line 1749
	mov	eax, DWORD PTR off$14[rbp]
	mov	ecx, DWORD PTR i$8[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR sy$21[rbp], eax
; Line 1750
	mov	eax, DWORD PTR i$8[rbp]
	inc	eax
	mov	DWORD PTR i$8[rbp], eax
$LN44@stbtt__Get:
; Line 1752
	jmp	SHORT $LN42@stbtt__Get
$LN41@stbtt__Get:
; Line 1753
	mov	eax, DWORD PTR x$16[rbp]
	mov	DWORD PTR sx$20[rbp], eax
; Line 1754
	mov	eax, DWORD PTR y$17[rbp]
	mov	DWORD PTR sy$21[rbp], eax
$LN42@stbtt__Get:
; Line 1756
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv371[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$21[rbp]
	mov	r8d, DWORD PTR sx$20[rbp]
	mov	dl, 1
	mov	rcx, QWORD PTR tv371[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1757
	mov	DWORD PTR was_off$13[rbp], 0
; Line 1758
	mov	eax, DWORD PTR j$9[rbp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR next_move$12[rbp], eax
; Line 1759
	mov	eax, DWORD PTR j$9[rbp]
	inc	eax
	mov	DWORD PTR j$9[rbp], eax
; Line 1760
	jmp	$LN39@stbtt__Get
$LN38@stbtt__Get:
; Line 1761
	movzx	eax, BYTE PTR flags$5[rbp]
	and	eax, 1
	test	eax, eax
	jne	$LN45@stbtt__Get
; Line 1762
	cmp	DWORD PTR was_off$13[rbp], 0
	je	SHORT $LN47@stbtt__Get
; Line 1763
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv398[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	eax, DWORD PTR y$17[rbp]
	mov	ecx, DWORD PTR cy$19[rbp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR x$16[rbp]
	mov	edx, DWORD PTR cx$18[rbp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$19[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$18[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv398[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN47@stbtt__Get:
; Line 1764
	mov	eax, DWORD PTR x$16[rbp]
	mov	DWORD PTR cx$18[rbp], eax
; Line 1765
	mov	eax, DWORD PTR y$17[rbp]
	mov	DWORD PTR cy$19[rbp], eax
; Line 1766
	mov	DWORD PTR was_off$13[rbp], 1
; Line 1767
	jmp	$LN46@stbtt__Get
$LN45@stbtt__Get:
; Line 1768
	cmp	DWORD PTR was_off$13[rbp], 0
	je	SHORT $LN48@stbtt__Get
; Line 1769
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv410[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	eax, DWORD PTR cy$19[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$18[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$17[rbp]
	mov	r8d, DWORD PTR x$16[rbp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv410[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN49@stbtt__Get
$LN48@stbtt__Get:
; Line 1771
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv421[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$17[rbp]
	mov	r8d, DWORD PTR x$16[rbp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv421[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN49@stbtt__Get:
; Line 1772
	mov	DWORD PTR was_off$13[rbp], 0
$LN46@stbtt__Get:
$LN39@stbtt__Get:
; Line 1775
	jmp	$LN11@stbtt__Get
$LN12@stbtt__Get:
; Line 1776
	mov	eax, DWORD PTR cy$19[rbp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$18[rbp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$23[rbp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$21[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$20[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$15[rbp]
	mov	r8d, DWORD PTR was_off$13[rbp]
	mov	edx, DWORD PTR num_vertices$[rbp]
	mov	rcx, QWORD PTR vertices$[rbp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rbp], eax
	jmp	$LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 1777
	movsx	eax, WORD PTR numberOfContours$[rbp]
	cmp	eax, -1
	jne	$LN50@stbtt__Get
; Line 1779
	mov	DWORD PTR more$27[rbp], 1
; Line 1780
	movsxd	rax, DWORD PTR g$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR comp$28[rbp], rax
; Line 1781
	mov	DWORD PTR num_vertices$[rbp], 0
; Line 1782
	mov	QWORD PTR vertices$[rbp], 0
$LN14@stbtt__Get:
; Line 1783
	cmp	DWORD PTR more$27[rbp], 0
	je	$LN15@stbtt__Get
; Line 1785
	mov	DWORD PTR comp_num_verts$31[rbp], 0
; Line 1786
	mov	QWORD PTR comp_verts$33[rbp], 0
	mov	QWORD PTR tmp$34[rbp], 0
; Line 1787
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$35[rbp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR mtx$35[rbp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+20], xmm0
; Line 1789
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR flags$29[rbp], ax
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1790
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR gidx$30[rbp], ax
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1792
	movzx	eax, WORD PTR flags$29[rbp]
	and	eax, 2
	test	eax, eax
	je	$LN52@stbtt__Get
; Line 1793
	movzx	eax, WORD PTR flags$29[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN54@stbtt__Get
; Line 1794
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1795
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1796
	jmp	SHORT $LN55@stbtt__Get
$LN54@stbtt__Get:
; Line 1797
	mov	rax, QWORD PTR comp$28[rbp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	inc	rax
	mov	QWORD PTR comp$28[rbp], rax
; Line 1798
	mov	rax, QWORD PTR comp$28[rbp]
	movsx	eax, BYTE PTR [rax]
	cvtsi2ss xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	inc	rax
	mov	QWORD PTR comp$28[rbp], rax
$LN55@stbtt__Get:
; Line 1800
	jmp	SHORT $LN53@stbtt__Get
$LN52@stbtt__Get:
$LN18@stbtt__Get:
; Line 1803
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN76@stbtt__Get
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
	add	eax, 163				; 000000a3H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN76@stbtt__Get:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbtt__Get
$LN53@stbtt__Get:
; Line 1805
	movzx	eax, WORD PTR flags$29[rbp]
	and	eax, 8
	test	eax, eax
	je	$LN56@stbtt__Get
; Line 1806
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	movss	DWORD PTR tv494[rbp], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	movss	xmm0, DWORD PTR tv494[rbp]
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	movss	xmm0, DWORD PTR tv494[rbp]
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1807
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	jmp	$LN57@stbtt__Get
$LN56@stbtt__Get:
; Line 1808
	movzx	eax, WORD PTR flags$29[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	$LN58@stbtt__Get
; Line 1809
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1810
	mov	eax, 4
	imul	rax, rax, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
; Line 1811
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
	jmp	$LN59@stbtt__Get
$LN58@stbtt__Get:
; Line 1812
	movzx	eax, WORD PTR flags$29[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN60@stbtt__Get
; Line 1813
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1814
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 1
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1815
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 2
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
; Line 1816
	mov	rcx, QWORD PTR comp$28[rbp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	movss	DWORD PTR mtx$35[rbp+rax], xmm0
	mov	rax, QWORD PTR comp$28[rbp]
	add	rax, 2
	mov	QWORD PTR comp$28[rbp], rax
$LN60@stbtt__Get:
$LN59@stbtt__Get:
$LN57@stbtt__Get:
; Line 1820
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm0, DWORD PTR mtx$35[rbp+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm1, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm1, DWORD PTR mtx$35[rbp+rcx]
	addss	xmm0, xmm1
	call	sqrtf
	movss	DWORD PTR m$36[rbp], xmm0
; Line 1821
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm0, DWORD PTR mtx$35[rbp+rcx]
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm1, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm1, DWORD PTR mtx$35[rbp+rcx]
	addss	xmm0, xmm1
	call	sqrtf
	movss	DWORD PTR n$37[rbp], xmm0
; Line 1824
	movzx	eax, WORD PTR gidx$30[rbp]
	lea	r8, QWORD PTR comp_verts$33[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR comp_num_verts$31[rbp], eax
; Line 1825
	cmp	DWORD PTR comp_num_verts$31[rbp], 0
	jle	$LN61@stbtt__Get
; Line 1827
	mov	DWORD PTR i$32[rbp], 0
	jmp	SHORT $LN21@stbtt__Get
$LN19@stbtt__Get:
	mov	eax, DWORD PTR i$32[rbp]
	inc	eax
	mov	DWORD PTR i$32[rbp], eax
$LN21@stbtt__Get:
	mov	eax, DWORD PTR comp_num_verts$31[rbp]
	cmp	DWORD PTR i$32[rbp], eax
	jge	$LN20@stbtt__Get
; Line 1828
	movsxd	rax, DWORD PTR i$32[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR comp_verts$33[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$38[rbp], rax
; Line 1830
	mov	rax, QWORD PTR v$38[rbp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR x$39[rbp], ax
	mov	rax, QWORD PTR v$38[rbp]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR y$40[rbp], ax
; Line 1831
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$39[rbp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$40[rbp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$35[rbp+rax]
	movss	xmm1, DWORD PTR m$36[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$38[rbp]
	mov	WORD PTR [rcx], ax
; Line 1832
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$39[rbp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$40[rbp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$35[rbp+rax]
	movss	xmm1, DWORD PTR n$37[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$38[rbp]
	mov	WORD PTR [rcx+2], ax
; Line 1833
	mov	rax, QWORD PTR v$38[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	WORD PTR x$39[rbp], ax
	mov	rax, QWORD PTR v$38[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	WORD PTR y$40[rbp], ax
; Line 1834
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$39[rbp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$40[rbp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	addss	xmm0, DWORD PTR mtx$35[rbp+rax]
	movss	xmm1, DWORD PTR m$36[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$38[rbp]
	mov	WORD PTR [rcx+4], ax
; Line 1835
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$39[rbp]
	cvtsi2ss xmm0, ecx
	movss	xmm1, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$40[rbp]
	cvtsi2ss xmm1, ecx
	movss	xmm2, DWORD PTR mtx$35[rbp+rax]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	addss	xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	addss	xmm0, DWORD PTR mtx$35[rbp+rax]
	movss	xmm1, DWORD PTR n$37[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$38[rbp]
	mov	WORD PTR [rcx+6], ax
; Line 1836
	jmp	$LN19@stbtt__Get
$LN20@stbtt__Get:
; Line 1838
	mov	eax, DWORD PTR comp_num_verts$31[rbp]
	mov	ecx, DWORD PTR num_vertices$[rbp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR tmp$34[rbp], rax
; Line 1839
	cmp	QWORD PTR tmp$34[rbp], 0
	jne	SHORT $LN62@stbtt__Get
; Line 1840
	cmp	QWORD PTR vertices$[rbp], 0
	je	SHORT $LN63@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN63@stbtt__Get:
; Line 1841
	cmp	QWORD PTR comp_verts$33[rbp], 0
	je	SHORT $LN64@stbtt__Get
	mov	rcx, QWORD PTR comp_verts$33[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN64@stbtt__Get:
; Line 1842
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN62@stbtt__Get:
; Line 1844
	cmp	DWORD PTR num_vertices$[rbp], 0
	jle	SHORT $LN65@stbtt__Get
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rdi, QWORD PTR tmp$34[rbp]
	mov	rsi, QWORD PTR vertices$[rbp]
	mov	rcx, rax
	rep movsb
$LN65@stbtt__Get:
; Line 1845
	movsxd	rax, DWORD PTR comp_num_verts$31[rbp]
	imul	rax, rax, 14
	movsxd	rcx, DWORD PTR num_vertices$[rbp]
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR tmp$34[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdi, rcx
	mov	rsi, QWORD PTR comp_verts$33[rbp]
	mov	rcx, rax
	rep movsb
; Line 1846
	cmp	QWORD PTR vertices$[rbp], 0
	je	SHORT $LN66@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN66@stbtt__Get:
; Line 1847
	mov	rax, QWORD PTR tmp$34[rbp]
	mov	QWORD PTR vertices$[rbp], rax
; Line 1848
	mov	rcx, QWORD PTR comp_verts$33[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 1849
	mov	eax, DWORD PTR comp_num_verts$31[rbp]
	mov	ecx, DWORD PTR num_vertices$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_vertices$[rbp], eax
$LN61@stbtt__Get:
; Line 1852
	movzx	eax, WORD PTR flags$29[rbp]
	and	eax, 32					; 00000020H
	mov	DWORD PTR more$27[rbp], eax
; Line 1853
	jmp	$LN14@stbtt__Get
$LN15@stbtt__Get:
; Line 1854
	jmp	SHORT $LN51@stbtt__Get
$LN50@stbtt__Get:
	movsx	eax, WORD PTR numberOfContours$[rbp]
	test	eax, eax
	jge	SHORT $LN67@stbtt__Get
$LN24@stbtt__Get:
; Line 1856
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN77@stbtt__Get
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z@4JA
	add	eax, 216				; 000000d8H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN77@stbtt__Get:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN24@stbtt__Get
$LN67@stbtt__Get:
$LN51@stbtt__Get:
$LN27@stbtt__Get:
; Line 1861
	mov	rax, QWORD PTR pvertices$[rbp]
	mov	rcx, QWORD PTR vertices$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 1862
	mov	eax, DWORD PTR num_vertices$[rbp]
$LN1@stbtt__Get:
; Line 1863
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1952]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeTT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
_TEXT	SEGMENT
tv145 = 192
tv134 = 192
tv90 = 192
tv79 = 192
vertices$ = 240
num_vertices$ = 248
was_off$ = 256
start_off$ = 264
sx$ = 272
sy$ = 280
scx$ = 288
scy$ = 296
cx$ = 304
cy$ = 312
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z PROC ; stbtt__close_shape, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1625
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1626
	cmp	DWORD PTR start_off$[rbp], 0
	je	$LN2@stbtt__clo
; Line 1627
	cmp	DWORD PTR was_off$[rbp], 0
	je	SHORT $LN4@stbtt__clo
; Line 1628
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv79[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	eax, DWORD PTR scy$[rbp]
	mov	ecx, DWORD PTR cy$[rbp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR scx$[rbp]
	mov	edx, DWORD PTR cx$[rbp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$[rbp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv79[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN4@stbtt__clo:
; Line 1629
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv90[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	eax, DWORD PTR scy$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR scx$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rbp]
	mov	r8d, DWORD PTR sx$[rbp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv90[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1630
	jmp	$LN3@stbtt__clo
$LN2@stbtt__clo:
; Line 1631
	cmp	DWORD PTR was_off$[rbp], 0
	je	SHORT $LN5@stbtt__clo
; Line 1632
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv134[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	eax, DWORD PTR cy$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rbp]
	mov	r8d, DWORD PTR sx$[rbp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv134[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN6@stbtt__clo
$LN5@stbtt__clo:
; Line 1634
	movsxd	rax, DWORD PTR num_vertices$[rbp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv145[rbp], rax
	mov	eax, DWORD PTR num_vertices$[rbp]
	inc	eax
	mov	DWORD PTR num_vertices$[rbp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$[rbp]
	mov	r8d, DWORD PTR sx$[rbp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv145[rbp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN6@stbtt__clo:
$LN3@stbtt__clo:
; Line 1636
	mov	eax, DWORD PTR num_vertices$[rbp]
; Line 1637
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ENDP ; stbtt__close_shape
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
_TEXT	SEGMENT
c$ = 8
r$ = 84
tv81 = 292
tv79 = 292
tv76 = 292
tv73 = 292
tv70 = 292
__$ArrayPad$ = 296
info$ = 336
glyph_index$ = 344
x0$ = 352
y0$ = 360
x1$ = 368
y1$ = 376
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z PROC ; stbtt__GetGlyphInfoT2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2255
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 30
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+376]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2256
	mov	DWORD PTR c$[rbp], 1
	mov	DWORD PTR c$[rbp+4], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rbp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rbp+12], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rbp+16], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR c$[rbp+20], xmm0
	mov	DWORD PTR c$[rbp+24], 0
	mov	DWORD PTR c$[rbp+28], 0
	mov	DWORD PTR c$[rbp+32], 0
	mov	DWORD PTR c$[rbp+36], 0
	mov	QWORD PTR c$[rbp+40], 0
	mov	DWORD PTR c$[rbp+48], 0
; Line 2257
	lea	r8, QWORD PTR c$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	mov	DWORD PTR r$[rbp], eax
; Line 2258
	cmp	QWORD PTR x0$[rbp], 0
	je	SHORT $LN2@stbtt__Get
	cmp	DWORD PTR r$[rbp], 0
	je	SHORT $LN7@stbtt__Get
	mov	eax, DWORD PTR c$[rbp+24]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
	mov	DWORD PTR tv70[rbp], 0
$LN8@stbtt__Get:
	mov	rax, QWORD PTR x0$[rbp]
	mov	ecx, DWORD PTR tv70[rbp]
	mov	DWORD PTR [rax], ecx
$LN2@stbtt__Get:
; Line 2259
	cmp	QWORD PTR y0$[rbp], 0
	je	SHORT $LN3@stbtt__Get
	cmp	DWORD PTR r$[rbp], 0
	je	SHORT $LN9@stbtt__Get
	mov	eax, DWORD PTR c$[rbp+32]
	mov	DWORD PTR tv73[rbp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
	mov	DWORD PTR tv73[rbp], 0
$LN10@stbtt__Get:
	mov	rax, QWORD PTR y0$[rbp]
	mov	ecx, DWORD PTR tv73[rbp]
	mov	DWORD PTR [rax], ecx
$LN3@stbtt__Get:
; Line 2260
	cmp	QWORD PTR x1$[rbp], 0
	je	SHORT $LN4@stbtt__Get
	cmp	DWORD PTR r$[rbp], 0
	je	SHORT $LN11@stbtt__Get
	mov	eax, DWORD PTR c$[rbp+28]
	mov	DWORD PTR tv76[rbp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
	mov	DWORD PTR tv76[rbp], 0
$LN12@stbtt__Get:
	mov	rax, QWORD PTR x1$[rbp]
	mov	ecx, DWORD PTR tv76[rbp]
	mov	DWORD PTR [rax], ecx
$LN4@stbtt__Get:
; Line 2261
	cmp	QWORD PTR y1$[rbp], 0
	je	SHORT $LN5@stbtt__Get
	cmp	DWORD PTR r$[rbp], 0
	je	SHORT $LN13@stbtt__Get
	mov	eax, DWORD PTR c$[rbp+36]
	mov	DWORD PTR tv79[rbp], eax
	jmp	SHORT $LN14@stbtt__Get
$LN13@stbtt__Get:
	mov	DWORD PTR tv79[rbp], 0
$LN14@stbtt__Get:
	mov	rax, QWORD PTR y1$[rbp]
	mov	ecx, DWORD PTR tv79[rbp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt__Get:
; Line 2262
	cmp	DWORD PTR r$[rbp], 0
	je	SHORT $LN15@stbtt__Get
	mov	eax, DWORD PTR c$[rbp+48]
	mov	DWORD PTR tv81[rbp], eax
	jmp	SHORT $LN16@stbtt__Get
$LN15@stbtt__Get:
	mov	DWORD PTR tv81[rbp], 0
$LN16@stbtt__Get:
	mov	eax, DWORD PTR tv81[rbp]
; Line 2263
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ENDP ; stbtt__GetGlyphInfoT2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
_TEXT	SEGMENT
g1$ = 4
g2$ = 36
tv162 = 244
info$ = 288
glyph_index$ = 296
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z PROC	; stbtt__GetGlyfOffset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1569
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
$LN4@stbtt__Get:
; Line 1572
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN10@stbtt__Get
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CA@MDABGEPC@?$AA?$CB?$AAi?$AAn?$AAf?$AAo?$AA?9?$AA?$DO?$AAc?$AAf?$AAf?$AA?4?$AAs?$AAi?$AAz?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stbtt__Get:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__Get
; Line 1574
	mov	rax, QWORD PTR info$[rbp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR glyph_index$[rbp], eax
	jl	SHORT $LN5@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN5@stbtt__Get:
; Line 1575
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+56], 2
	jl	SHORT $LN6@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN6@stbtt__Get:
; Line 1577
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+56], 0
	jne	$LN7@stbtt__Get
; Line 1578
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rbp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g1$[rbp], eax
; Line 1579
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rbp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g2$[rbp], eax
; Line 1580
	jmp	$LN8@stbtt__Get
$LN7@stbtt__Get:
; Line 1581
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rbp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g1$[rbp], eax
; Line 1582
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rbp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g2$[rbp], eax
$LN8@stbtt__Get:
; Line 1585
	mov	eax, DWORD PTR g2$[rbp]
	cmp	DWORD PTR g1$[rbp], eax
	jne	SHORT $LN11@stbtt__Get
	mov	DWORD PTR tv162[rbp], -1
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
	mov	eax, DWORD PTR g1$[rbp]
	mov	DWORD PTR tv162[rbp], eax
$LN12@stbtt__Get:
	mov	eax, DWORD PTR tv162[rbp]
$LN1@stbtt__Get:
; Line 1586
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ENDP	; stbtt__GetGlyfOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z
_TEXT	SEGMENT
v$ = 224
type$ = 232
x$ = 240
y$ = 248
cx$ = 256
cy$ = 264
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z PROC	; stbtt_setvertex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1560
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1561
	mov	rax, QWORD PTR v$[rbp]
	movzx	ecx, BYTE PTR type$[rbp]
	mov	BYTE PTR [rax+12], cl
; Line 1562
	mov	rax, QWORD PTR v$[rbp]
	movzx	ecx, WORD PTR x$[rbp]
	mov	WORD PTR [rax], cx
; Line 1563
	mov	rax, QWORD PTR v$[rbp]
	movzx	ecx, WORD PTR y$[rbp]
	mov	WORD PTR [rax+2], cx
; Line 1564
	mov	rax, QWORD PTR v$[rbp]
	movzx	ecx, WORD PTR cx$[rbp]
	mov	WORD PTR [rax+4], cx
; Line 1565
	mov	rax, QWORD PTR v$[rbp]
	movzx	ecx, WORD PTR cy$[rbp]
	mov	WORD PTR [rax+6], cx
; Line 1566
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ENDP	; stbtt_setvertex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
_TEXT	SEGMENT
cmap$ = 4
t$ = 36
i$ = 68
numTables$ = 100
b$10 = 136
topdict$11 = 184
topdictidx$12 = 232
cstype$13 = 276
charstrings$14 = 308
fdarrayoff$15 = 340
fdselectoff$16 = 372
cff$17 = 404
encoding_record$18 = 436
$T19 = 1240
$T20 = 1288
$T21 = 1336
$T22 = 1384
$T23 = 1432
$T24 = 1480
$T25 = 1528
$T26 = 1576
$T27 = 1624
$T28 = 1672
$T29 = 1720
$T30 = 1768
$T31 = 1816
$T32 = 1864
$T33 = 1912
$T34 = 1960
$T35 = 2008
$T36 = 2056
$T37 = 2104
$T38 = 2152
$T39 = 2200
$T40 = 2248
$T41 = 2296
$T42 = 2344
$T43 = 2392
$T44 = 2440
$T45 = 2496
$T46 = 2544
$T47 = 2592
tv327 = 2612
tv320 = 2612
__$ArrayPad$ = 2616
info$ = 2656
data$ = 2664
fontstart$ = 2672
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z PROC ; stbtt_InitFont_internal, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1351
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 2656				; 00000a60H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 464				; 000001d0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+2696]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1355
	mov	rax, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	mov	QWORD PTR [rax+8], rcx
; Line 1356
	mov	rax, QWORD PTR info$[rbp]
	mov	ecx, DWORD PTR fontstart$[rbp]
	mov	DWORD PTR [rax+16], ecx
; Line 1357
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T20[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T19[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1359
	lea	r8, OFFSET FLAT:??_C@_04EICJPCEA@cmap@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cmap$[rbp], eax
; Line 1360
	lea	r8, OFFSET FLAT:??_C@_04DACNFKGE@loca@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+24], eax
; Line 1361
	lea	r8, OFFSET FLAT:??_C@_04NEODDMOL@head@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+28], eax
; Line 1362
	lea	r8, OFFSET FLAT:??_C@_04LLIHEPK@glyf@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 1363
	lea	r8, OFFSET FLAT:??_C@_04FMPHLIKP@hhea@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+36], eax
; Line 1364
	lea	r8, OFFSET FLAT:??_C@_04ONMNCIMC@hmtx@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+40], eax
; Line 1365
	lea	r8, OFFSET FLAT:??_C@_04HHMMLDJI@kern@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+44], eax
; Line 1366
	lea	r8, OFFSET FLAT:??_C@_04PCFDEHHD@GPOS@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+48], eax
; Line 1368
	cmp	DWORD PTR cmap$[rbp], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+40], 0
	jne	SHORT $LN9@stbtt_Init
$LN10@stbtt_Init:
; Line 1369
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN9@stbtt_Init:
; Line 1370
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN11@stbtt_Init
; Line 1372
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN13@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN13@stbtt_Init:
; Line 1373
	jmp	$LN12@stbtt_Init
$LN11@stbtt_Init:
; Line 1376
	mov	DWORD PTR cstype$13[rbp], 2
	mov	DWORD PTR charstrings$14[rbp], 0
	mov	DWORD PTR fdarrayoff$15[rbp], 0
	mov	DWORD PTR fdselectoff$16[rbp], 0
; Line 1379
	lea	r8, OFFSET FLAT:??_C@_04HJGCPIEK@CFF?5@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cff$17[rbp], eax
; Line 1380
	cmp	DWORD PTR cff$17[rbp], 0
	jne	SHORT $LN14@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN14@stbtt_Init:
; Line 1382
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T22[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T21[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1383
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T24[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T23[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1386
	mov	eax, DWORD PTR cff$17[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 536870912				; 20000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T26[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T25[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T25[rbp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1387
	lea	rax, QWORD PTR b$10[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
; Line 1390
	mov	edx, 2
	lea	rcx, QWORD PTR b$10[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1391
	lea	rcx, QWORD PTR b$10[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	edx, eax
	lea	rcx, QWORD PTR b$10[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1395
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T28[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T27[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1396
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T30[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T29[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdictidx$12[rbp]
	lea	rcx, QWORD PTR $T29[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1397
	lea	rax, QWORD PTR $T45[rbp]
	lea	rcx, QWORD PTR topdictidx$12[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	xor	r8d, r8d
	lea	rdx, QWORD PTR $T45[rbp]
	lea	rcx, QWORD PTR $T32[rbp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T31[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdict$11[rbp]
	lea	rcx, QWORD PTR $T31[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1398
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T34[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T33[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1399
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T36[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T35[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T35[rbp]
	lea	rdi, QWORD PTR [rax+96]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1401
	lea	r9, QWORD PTR charstrings$14[rbp]
	mov	r8d, 1
	mov	edx, 17
	lea	rcx, QWORD PTR topdict$11[rbp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1402
	lea	r9, QWORD PTR cstype$13[rbp]
	mov	r8d, 1
	mov	edx, 262				; 00000106H
	lea	rcx, QWORD PTR topdict$11[rbp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1403
	lea	r9, QWORD PTR fdarrayoff$15[rbp]
	mov	r8d, 1
	mov	edx, 292				; 00000124H
	lea	rcx, QWORD PTR topdict$11[rbp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1404
	lea	r9, QWORD PTR fdselectoff$16[rbp]
	mov	r8d, 1
	mov	edx, 293				; 00000125H
	lea	rcx, QWORD PTR topdict$11[rbp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1405
	lea	rax, QWORD PTR $T47[rbp]
	lea	rcx, QWORD PTR topdict$11[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T46[rbp]
	lea	rcx, QWORD PTR b$10[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T47[rbp]
	lea	rdx, QWORD PTR $T46[rbp]
	lea	rcx, QWORD PTR $T38[rbp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T37[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T37[rbp]
	lea	rdi, QWORD PTR [rax+112]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1408
	cmp	DWORD PTR cstype$13[rbp], 2
	je	SHORT $LN15@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN15@stbtt_Init:
; Line 1409
	cmp	DWORD PTR charstrings$14[rbp], 0
	jne	SHORT $LN16@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN16@stbtt_Init:
; Line 1411
	cmp	DWORD PTR fdarrayoff$15[rbp], 0
	je	$LN17@stbtt_Init
; Line 1413
	cmp	DWORD PTR fdselectoff$16[rbp], 0
	jne	SHORT $LN18@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN18@stbtt_Init:
; Line 1414
	mov	edx, DWORD PTR fdarrayoff$15[rbp]
	lea	rcx, QWORD PTR b$10[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1415
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T40[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T39[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T39[rbp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1416
	mov	eax, DWORD PTR fdselectoff$16[rbp]
	mov	ecx, DWORD PTR b$10[rbp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR fdselectoff$16[rbp]
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T42[rbp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T41[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T41[rbp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN17@stbtt_Init:
; Line 1419
	mov	edx, DWORD PTR charstrings$14[rbp]
	lea	rcx, QWORD PTR b$10[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1420
	lea	rdx, QWORD PTR b$10[rbp]
	lea	rcx, QWORD PTR $T44[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T43[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rbp]
	lea	rcx, QWORD PTR $T43[rbp]
	lea	rdi, QWORD PTR [rax+80]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN12@stbtt_Init:
; Line 1423
	lea	r8, OFFSET FLAT:??_C@_04KODIGLGG@maxp@
	mov	edx, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rbp], eax
; Line 1424
	cmp	DWORD PTR t$[rbp], 0
	je	SHORT $LN19@stbtt_Init
; Line 1425
	mov	eax, DWORD PTR t$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+20], eax
	jmp	SHORT $LN20@stbtt_Init
$LN19@stbtt_Init:
; Line 1427
	mov	rax, QWORD PTR info$[rbp]
	mov	DWORD PTR [rax+20], 65535		; 0000ffffH
$LN20@stbtt_Init:
; Line 1432
	mov	eax, DWORD PTR cmap$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numTables$[rbp], eax
; Line 1433
	mov	rax, QWORD PTR info$[rbp]
	mov	DWORD PTR [rax+52], 0
; Line 1434
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt_Init
$LN2@stbtt_Init:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt_Init:
	mov	eax, DWORD PTR numTables$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN3@stbtt_Init
; Line 1435
	mov	eax, DWORD PTR cmap$[rbp]
	mov	ecx, DWORD PTR i$[rbp]
	lea	eax, DWORD PTR [rax+rcx*8+4]
	mov	DWORD PTR encoding_record$18[rbp], eax
; Line 1437
	mov	eax, DWORD PTR encoding_record$18[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv320[rbp], eax
	cmp	DWORD PTR tv320[rbp], 0
	je	SHORT $LN24@stbtt_Init
	cmp	DWORD PTR tv320[rbp], 3
	je	SHORT $LN21@stbtt_Init
	jmp	$LN5@stbtt_Init
$LN21@stbtt_Init:
; Line 1439
	mov	eax, DWORD PTR encoding_record$18[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv327[rbp], eax
	cmp	DWORD PTR tv327[rbp], 1
	je	SHORT $LN22@stbtt_Init
	cmp	DWORD PTR tv327[rbp], 10
	je	SHORT $LN23@stbtt_Init
	jmp	SHORT $LN7@stbtt_Init
$LN22@stbtt_Init:
$LN23@stbtt_Init:
; Line 1443
	mov	eax, DWORD PTR encoding_record$18[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+52], eax
$LN7@stbtt_Init:
; Line 1446
	jmp	SHORT $LN5@stbtt_Init
$LN24@stbtt_Init:
; Line 1450
	mov	eax, DWORD PTR encoding_record$18[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+52], eax
$LN5@stbtt_Init:
; Line 1453
	jmp	$LN2@stbtt_Init
$LN3@stbtt_Init:
; Line 1454
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+52], 0
	jne	SHORT $LN25@stbtt_Init
; Line 1455
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Init
$LN25@stbtt_Init:
; Line 1457
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+50]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rbp]
	mov	DWORD PTR [rcx+56], eax
; Line 1458
	mov	eax, 1
$LN1@stbtt_Init:
; Line 1459
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+2624]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ENDP ; stbtt_InitFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
_TEXT	SEGMENT
subrsoff$ = 4
private_loc$ = 40
pdict$ = 72
$T6 = 312
$T7 = 360
$T8 = 408
$T9 = 456
$T10 = 504
$T11 = 552
$T12 = 600
$T13 = 648
__$ArrayPad$ = 680
__$ReturnAddress$ = 720
cff$ = 728
fontdict$ = 736
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z PROC		; stbtt__get_subrs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1338
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 720				; 000002d0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 124				; 0000007cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+760]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1339
	mov	DWORD PTR subrsoff$[rbp], 0
	mov	DWORD PTR private_loc$[rbp], 0
	mov	DWORD PTR private_loc$[rbp+4], 0
; Line 1341
	lea	r9, QWORD PTR private_loc$[rbp]
	mov	r8d, 2
	mov	edx, 18
	mov	rcx, QWORD PTR fontdict$[rbp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1342
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR private_loc$[rbp+rax], 0
	je	SHORT $LN3@stbtt__get
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR private_loc$[rbp+rax], 0
	jne	SHORT $LN2@stbtt__get
$LN3@stbtt__get:
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T6[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	$LN1@stbtt__get
$LN2@stbtt__get:
; Line 1343
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	r9d, DWORD PTR private_loc$[rbp+rax]
	mov	r8d, DWORD PTR private_loc$[rbp+rcx]
	mov	rdx, QWORD PTR cff$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T8[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR pdict$[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1344
	lea	r9, QWORD PTR subrsoff$[rbp]
	mov	r8d, 1
	mov	edx, 19
	lea	rcx, QWORD PTR pdict$[rbp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1345
	cmp	DWORD PTR subrsoff$[rbp], 0
	jne	SHORT $LN4@stbtt__get
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T10[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T10[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	SHORT $LN1@stbtt__get
$LN4@stbtt__get:
; Line 1346
	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR private_loc$[rbp+rax]
	add	eax, DWORD PTR subrsoff$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR cff$[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1347
	mov	rdx, QWORD PTR cff$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T12[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T12[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
$LN1@stbtt__get:
; Line 1348
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+688]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ENDP		; stbtt__get_subrs
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
_TEXT	SEGMENT
n$1 = 4
tv68 = 212
font_collection$ = 256
index$ = 264
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z PROC	; stbtt_GetFontOffsetForIndex_internal, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1303
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1305
	mov	rcx, QWORD PTR font_collection$[rbp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetF
; Line 1306
	cmp	DWORD PTR index$[rbp], 0
	jne	SHORT $LN8@stbtt_GetF
	mov	DWORD PTR tv68[rbp], 0
	jmp	SHORT $LN9@stbtt_GetF
$LN8@stbtt_GetF:
	mov	DWORD PTR tv68[rbp], -1
$LN9@stbtt_GetF:
	mov	eax, DWORD PTR tv68[rbp]
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 1309
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:??_C@_04KIOEMAHO@ttcf@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetF
; Line 1311
	mov	rax, QWORD PTR font_collection$[rbp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetF
	mov	rax, QWORD PTR font_collection$[rbp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetF
$LN5@stbtt_GetF:
; Line 1312
	mov	rax, QWORD PTR font_collection$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	mov	DWORD PTR n$1[rbp], eax
; Line 1313
	mov	eax, DWORD PTR n$1[rbp]
	cmp	DWORD PTR index$[rbp], eax
	jl	SHORT $LN6@stbtt_GetF
; Line 1314
	mov	eax, -1
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 1315
	mov	eax, DWORD PTR index$[rbp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR font_collection$[rbp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetF
$LN4@stbtt_GetF:
$LN3@stbtt_GetF:
; Line 1318
	mov	eax, -1
$LN1@stbtt_GetF:
; Line 1319
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ENDP	; stbtt_GetFontOffsetForIndex_internal
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__find_table@@YAIPEAEIPEBD@Z
_TEXT	SEGMENT
num_tables$ = 4
tabledir$ = 36
i$ = 68
loc$1 = 100
data$ = 352
fontstart$ = 360
tag$ = 368
?stbtt__find_table@@YAIPEAEIPEBD@Z PROC			; stbtt__find_table, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1290
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1291
	mov	eax, DWORD PTR fontstart$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR num_tables$[rbp], eax
; Line 1292
	mov	eax, DWORD PTR fontstart$[rbp]
	add	eax, 12
	mov	DWORD PTR tabledir$[rbp], eax
; Line 1294
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt__fin
$LN2@stbtt__fin:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt__fin:
	mov	eax, DWORD PTR num_tables$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN3@stbtt__fin
; Line 1295
	imul	eax, DWORD PTR i$[rbp], 16
	mov	ecx, DWORD PTR tabledir$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR loc$1[rbp], eax
; Line 1296
	mov	eax, DWORD PTR loc$1[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tag$[rbp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tag$[rbp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tag$[rbp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR tag$[rbp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
; Line 1297
	mov	eax, DWORD PTR loc$1[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt__fin
$LN5@stbtt__fin:
; Line 1298
	jmp	$LN2@stbtt__fin
$LN3@stbtt__fin:
; Line 1299
	xor	eax, eax
$LN1@stbtt__fin:
; Line 1300
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__find_table@@YAIPEAEIPEBD@Z ENDP			; stbtt__find_table
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__isfont@@YAHPEAE@Z
_TEXT	SEGMENT
font$ = 224
?stbtt__isfont@@YAHPEAE@Z PROC				; stbtt__isfont, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1278
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1280
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN2@stbtt__isf:
; Line 1281
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:??_C@_04LBBEMOBJ@typ1@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN3@stbtt__isf:
; Line 1282
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:??_C@_04LLEFIKCJ@OTTO@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN4@stbtt__isf:
; Line 1283
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 1
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN5@stbtt__isf:
; Line 1284
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:??_C@_04LOAJBDKD@true@
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__isf
$LN6@stbtt__isf:
; Line 1285
	xor	eax, eax
$LN1@stbtt__isf:
; Line 1286
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__isfont@@YAHPEAE@Z ENDP				; stbtt__isfont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ttLONG@@YAHPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttLONG@@YAHPEAE@Z PROC					; ttLONG, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1272
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ttLONG@@YAHPEAE@Z ENDP					; ttLONG
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ttULONG@@YAIPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttULONG@@YAIPEAE@Z PROC				; ttULONG, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1271
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ttULONG@@YAIPEAE@Z ENDP				; ttULONG
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ttSHORT@@YAFPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttSHORT@@YAFPEAE@Z PROC				; ttSHORT, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1270
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ttSHORT@@YAFPEAE@Z ENDP				; ttSHORT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ttUSHORT@@YAGPEAE@Z
_TEXT	SEGMENT
p$ = 224
?ttUSHORT@@YAGPEAE@Z PROC				; ttUSHORT, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1269
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ttUSHORT@@YAGPEAE@Z ENDP				; ttUSHORT
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
_TEXT	SEGMENT
count$ = 4
offsize$ = 36
start$ = 68
end$ = 100
$T1 = 328
$T2 = 376
__$ReturnAddress$ = 448
b$ = 456
i$ = 464
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z PROC	; stbtt__cff_index_get, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1244
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 448				; 000001c0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1246
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1247
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rbp], eax
; Line 1248
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rbp], eax
$LN4@stbtt__cff:
; Line 1249
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN9@stbtt__cff
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN10@stbtt__cff
$LN9@stbtt__cff:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CI@PFMEGAIA@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAc@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stbtt__cff:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__cff
$LN7@stbtt__cff:
; Line 1250
	cmp	DWORD PTR offsize$[rbp], 1
	jl	SHORT $LN11@stbtt__cff
	cmp	DWORD PTR offsize$[rbp], 4
	jle	SHORT $LN12@stbtt__cff
$LN11@stbtt__cff:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_index_get@@YA?AUstbtt__buf@@U2@H@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbtt__cff:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@stbtt__cff
; Line 1251
	mov	eax, DWORD PTR i$[rbp]
	imul	eax, DWORD PTR offsize$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1252
	mov	edx, DWORD PTR offsize$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rbp], eax
; Line 1253
	mov	edx, DWORD PTR offsize$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rbp], eax
; Line 1254
	mov	eax, DWORD PTR start$[rbp]
	mov	ecx, DWORD PTR end$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR count$[rbp]
	inc	ecx
	imul	ecx, DWORD PTR offsize$[rbp]
	mov	edx, DWORD PTR start$[rbp]
	lea	ecx, DWORD PTR [rcx+rdx+2]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T2[rbp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
; Line 1255
	lea	rsp, QWORD PTR [rbp+416]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ENDP	; stbtt__cff_index_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
b$ = 224
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z PROC	; stbtt__cff_index_count, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1238
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1239
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1240
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
; Line 1241
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_index_count
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
_TEXT	SEGMENT
i$ = 4
operands$ = 40
$T4 = 280
__$ArrayPad$ = 312
b$ = 352
key$ = 360
outcount$ = 368
out$ = 376
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z PROC	; stbtt__dict_get_ints, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1230
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1232
	mov	r8d, DWORD PTR key$[rbp]
	mov	rdx, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T4[rbp]
	call	?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ; stbtt__dict_get
	lea	rcx, QWORD PTR operands$[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1233
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt__dic
$LN2@stbtt__dic:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt__dic:
	mov	eax, DWORD PTR outcount$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stbtt__dic
	mov	eax, DWORD PTR operands$[rbp+12]
	cmp	DWORD PTR operands$[rbp+8], eax
	jge	SHORT $LN3@stbtt__dic
; Line 1234
	lea	rcx, QWORD PTR operands$[rbp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	movsxd	rcx, DWORD PTR i$[rbp]
	mov	rdx, QWORD PTR out$[rbp]
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1235
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+320]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ENDP	; stbtt__dict_get_ints
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
_TEXT	SEGMENT
start$1 = 4
end$2 = 36
op$3 = 68
$T4 = 296
$T5 = 344
$T6 = 392
$T7 = 440
__$ReturnAddress$ = 512
b$ = 520
key$ = 528
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z PROC	; stbtt__dict_get, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1215
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 512				; 00000200H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1216
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
$LN2@stbtt__dic:
; Line 1217
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN3@stbtt__dic
; Line 1218
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$1[rbp], eax
$LN4@stbtt__dic:
; Line 1219
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	cmp	eax, 28
	jl	SHORT $LN5@stbtt__dic
; Line 1220
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ; stbtt__cff_skip_operand
	jmp	SHORT $LN4@stbtt__dic
$LN5@stbtt__dic:
; Line 1221
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR end$2[rbp], eax
; Line 1222
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR op$3[rbp], eax
; Line 1223
	cmp	DWORD PTR op$3[rbp], 12
	jne	SHORT $LN6@stbtt__dic
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	bts	eax, 8
	mov	DWORD PTR op$3[rbp], eax
$LN6@stbtt__dic:
; Line 1224
	mov	eax, DWORD PTR key$[rbp]
	cmp	DWORD PTR op$3[rbp], eax
	jne	SHORT $LN7@stbtt__dic
	mov	eax, DWORD PTR start$1[rbp]
	mov	ecx, DWORD PTR end$2[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$1[rbp]
	mov	rdx, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T5[rbp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T4[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	SHORT $LN1@stbtt__dic
$LN7@stbtt__dic:
; Line 1225
	jmp	$LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1226
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T6[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
$LN1@stbtt__dic:
; Line 1227
	lea	rsp, QWORD PTR [rbp+480]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ENDP	; stbtt__dict_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
v$ = 4
b0$ = 36
b$ = 288
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z PROC	; stbtt__cff_skip_operand, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1199
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1200
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	mov	DWORD PTR b0$[rbp], eax
$LN4@stbtt__cff:
; Line 1201
	cmp	DWORD PTR b0$[rbp], 28
	jge	SHORT $LN12@stbtt__cff
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KDMJFGHG@?$AAb?$AA0?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA8@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbtt__cff:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__cff
; Line 1202
	cmp	DWORD PTR b0$[rbp], 30
	jne	SHORT $LN7@stbtt__cff
; Line 1203
	mov	edx, 1
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN5@stbtt__cff:
; Line 1204
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN6@stbtt__cff
; Line 1205
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rbp], eax
; Line 1206
	mov	eax, DWORD PTR v$[rbp]
	and	eax, 15
	cmp	eax, 15
	je	SHORT $LN10@stbtt__cff
	mov	eax, DWORD PTR v$[rbp]
	sar	eax, 4
	cmp	eax, 15
	jne	SHORT $LN9@stbtt__cff
$LN10@stbtt__cff:
; Line 1207
	jmp	SHORT $LN6@stbtt__cff
$LN9@stbtt__cff:
; Line 1208
	jmp	SHORT $LN5@stbtt__cff
$LN6@stbtt__cff:
; Line 1209
	jmp	SHORT $LN8@stbtt__cff
$LN7@stbtt__cff:
; Line 1210
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
$LN8@stbtt__cff:
; Line 1212
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_skip_operand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
b0$ = 4
tv83 = 212
tv73 = 212
b$ = 256
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z PROC		; stbtt__cff_int, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1188
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1189
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rbp], eax
; Line 1190
	cmp	DWORD PTR b0$[rbp], 32			; 00000020H
	jl	SHORT $LN5@stbtt__cff
	cmp	DWORD PTR b0$[rbp], 246			; 000000f6H
	jg	SHORT $LN5@stbtt__cff
	mov	eax, DWORD PTR b0$[rbp]
	sub	eax, 139				; 0000008bH
	jmp	$LN1@stbtt__cff
	jmp	$LN6@stbtt__cff
$LN5@stbtt__cff:
; Line 1191
	cmp	DWORD PTR b0$[rbp], 247			; 000000f7H
	jl	SHORT $LN7@stbtt__cff
	cmp	DWORD PTR b0$[rbp], 250			; 000000faH
	jg	SHORT $LN7@stbtt__cff
	mov	eax, DWORD PTR b0$[rbp]
	sub	eax, 247				; 000000f7H
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv73[rbp], eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv73[rbp]
	lea	eax, DWORD PTR [rcx+rax+108]
	jmp	$LN1@stbtt__cff
	jmp	SHORT $LN8@stbtt__cff
$LN7@stbtt__cff:
; Line 1192
	cmp	DWORD PTR b0$[rbp], 251			; 000000fbH
	jl	SHORT $LN9@stbtt__cff
	cmp	DWORD PTR b0$[rbp], 254			; 000000feH
	jg	SHORT $LN9@stbtt__cff
	mov	eax, DWORD PTR b0$[rbp]
	sub	eax, 251				; 000000fbH
	neg	eax
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv83[rbp], eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv83[rbp]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 108				; 0000006cH
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN10@stbtt__cff
$LN9@stbtt__cff:
; Line 1193
	cmp	DWORD PTR b0$[rbp], 28
	jne	SHORT $LN11@stbtt__cff
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN12@stbtt__cff
$LN11@stbtt__cff:
; Line 1194
	cmp	DWORD PTR b0$[rbp], 29
	jne	SHORT $LN13@stbtt__cff
	mov	edx, 4
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
$LN13@stbtt__cff:
$LN12@stbtt__cff:
$LN10@stbtt__cff:
$LN8@stbtt__cff:
$LN6@stbtt__cff:
$LN4@stbtt__cff:
; Line 1195
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN15@stbtt__cff
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN15@stbtt__cff:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__cff
; Line 1196
	xor	eax, eax
$LN1@stbtt__cff:
; Line 1197
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ENDP		; stbtt__cff_int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
_TEXT	SEGMENT
count$ = 4
start$ = 36
offsize$ = 68
$T1 = 296
$T2 = 344
__$ReturnAddress$ = 416
b$ = 424
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z PROC	; stbtt__cff_get_index, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1174
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1176
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$[rbp], eax
; Line 1177
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rbp], eax
; Line 1178
	cmp	DWORD PTR count$[rbp], 0
	je	SHORT $LN5@stbtt__cff
; Line 1179
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rbp], eax
$LN4@stbtt__cff:
; Line 1180
	cmp	DWORD PTR offsize$[rbp], 1
	jl	SHORT $LN7@stbtt__cff
	cmp	DWORD PTR offsize$[rbp], 4
	jle	SHORT $LN8@stbtt__cff
$LN7@stbtt__cff:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU2@@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@IJDIOPHB@?$AAo?$AAf?$AAf?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@stbtt__cff:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__cff
; Line 1181
	mov	eax, DWORD PTR offsize$[rbp]
	imul	eax, DWORD PTR count$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1182
	mov	edx, DWORD PTR offsize$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN5@stbtt__cff:
; Line 1184
	mov	rax, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR start$[rbp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$[rbp]
	mov	rdx, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR $T2[rbp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
; Line 1185
	lea	rsp, QWORD PTR [rbp+384]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ENDP	; stbtt__cff_get_index
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
_TEXT	SEGMENT
r$ = 8
$T4 = 248
__$ReturnAddress$ = 320
b$ = 328
o$ = 336
s$ = 344
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z PROC	; stbtt__buf_range, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1165
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1166
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rbp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR r$[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1167
	cmp	DWORD PTR o$[rbp], 0
	jl	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR s$[rbp], 0
	jl	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rbp], eax
	jg	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR o$[rbp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	cmp	DWORD PTR s$[rbp], eax
	jle	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
	lea	rax, QWORD PTR r$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1168
	movsxd	rax, DWORD PTR o$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR r$[rbp], rax
; Line 1169
	mov	eax, DWORD PTR s$[rbp]
	mov	DWORD PTR r$[rbp+12], eax
; Line 1170
	lea	rax, QWORD PTR r$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
$LN1@stbtt__buf:
; Line 1171
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+288]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ENDP	; stbtt__buf_range
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
_TEXT	SEGMENT
r$ = 8
__$ReturnAddress$ = 272
p$ = 280
size$ = 288
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z PROC		; stbtt__new_buf, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1152
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 272				; 00000110H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+312]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
$LN4@stbtt__new:
; Line 1154
	cmp	QWORD PTR size$[rbp], 1073741824	; 40000000H
	jb	SHORT $LN6@stbtt__new
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CE@EPOLDKHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0?$AAx?$AA4?$AA0?$AA0?$AA0?$AA0?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbtt__new:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__new
; Line 1155
	mov	rax, QWORD PTR p$[rbp]
	mov	QWORD PTR r$[rbp], rax
; Line 1156
	mov	eax, DWORD PTR size$[rbp]
	mov	DWORD PTR r$[rbp+12], eax
; Line 1157
	mov	DWORD PTR r$[rbp+8], 0
; Line 1158
	lea	rax, QWORD PTR r$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
; Line 1159
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+240]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ENDP		; stbtt__new_buf
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
_TEXT	SEGMENT
v$ = 4
i$ = 36
tv74 = 244
b$ = 288
n$ = 296
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_get, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1142
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1143
	mov	DWORD PTR v$[rbp], 0
$LN4@stbtt__buf:
; Line 1145
	cmp	DWORD PTR n$[rbp], 1
	jl	SHORT $LN9@stbtt__buf
	cmp	DWORD PTR n$[rbp], 4
	jle	SHORT $LN10@stbtt__buf
$LN9@stbtt__buf:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@OMFGMKMB@?$AAn?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stbtt__buf:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__buf
; Line 1146
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN7@stbtt__buf
$LN5@stbtt__buf:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN7@stbtt__buf:
	mov	eax, DWORD PTR n$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN6@stbtt__buf
; Line 1147
	mov	eax, DWORD PTR v$[rbp]
	shl	eax, 8
	mov	DWORD PTR tv74[rbp], eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv74[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rbp], eax
	jmp	SHORT $LN5@stbtt__buf
$LN6@stbtt__buf:
; Line 1148
	mov	eax, DWORD PTR v$[rbp]
; Line 1149
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_get
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
_TEXT	SEGMENT
b$ = 224
o$ = 232
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_skip, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1137
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1138
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR o$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rbp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1139
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_skip
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
_TEXT	SEGMENT
tv78 = 192
b$ = 240
o$ = 248
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_seek, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1131
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
$LN4@stbtt__buf:
; Line 1132
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rbp], eax
	jg	SHORT $LN6@stbtt__buf
	cmp	DWORD PTR o$[rbp], 0
	jge	SHORT $LN7@stbtt__buf
$LN6@stbtt__buf:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DA@CPAEOPEI@?$AA?$CB?$AA?$CI?$AAo?$AA?5?$AA?$DO?$AA?5?$AAb?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$HM@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbtt__buf:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt__buf
; Line 1133
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rbp], eax
	jg	SHORT $LN8@stbtt__buf
	cmp	DWORD PTR o$[rbp], 0
	jl	SHORT $LN8@stbtt__buf
	mov	eax, DWORD PTR o$[rbp]
	mov	DWORD PTR tv78[rbp], eax
	jmp	SHORT $LN9@stbtt__buf
$LN8@stbtt__buf:
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv78[rbp], eax
$LN9@stbtt__buf:
	mov	rax, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR tv78[rbp]
	mov	DWORD PTR [rax+8], ecx
; Line 1134
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_seek
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
b$ = 224
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_peek8, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1124
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1125
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1126
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1127
	mov	rax, QWORD PTR b$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@stbtt__buf:
; Line 1128
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_peek8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
_TEXT	SEGMENT
tv75 = 192
b$ = 240
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_get8, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1117
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1118
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1119
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1120
	mov	rax, QWORD PTR b$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv75[rbp], al
	mov	rax, QWORD PTR b$[rbp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR b$[rbp]
	mov	DWORD PTR [rcx+8], eax
	movzx	eax, BYTE PTR tv75[rbp]
$LN1@stbtt__buf:
; Line 1121
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_get8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_Rasterize
_TEXT	SEGMENT
scale$ = 4
winding_count$ = 36
winding_lengths$ = 72
windings$ = 104
tv65 = 308
__$ArrayPad$ = 312
result$ = 352
flatness_in_pixels$ = 360
vertices$ = 368
num_verts$ = 376
scale_x$ = 384
scale_y$ = 392
shift_x$ = 400
shift_y$ = 408
x_off$ = 416
y_off$ = 424
invert$ = 432
userdata$ = 440
stbtt_Rasterize PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3536
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3537
	movss	xmm0, DWORD PTR scale_x$[rbp]
	comiss	xmm0, DWORD PTR scale_y$[rbp]
	jbe	SHORT $LN4@stbtt_Rast
	movss	xmm0, DWORD PTR scale_y$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN5@stbtt_Rast
$LN4@stbtt_Rast:
	movss	xmm0, DWORD PTR scale_x$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN5@stbtt_Rast:
	movss	xmm0, DWORD PTR tv65[rbp]
	movss	DWORD PTR scale$[rbp], xmm0
; Line 3538
	mov	DWORD PTR winding_count$[rbp], 0
; Line 3539
	mov	QWORD PTR winding_lengths$[rbp], 0
; Line 3540
	movss	xmm0, DWORD PTR flatness_in_pixels$[rbp]
	divss	xmm0, DWORD PTR scale$[rbp]
	mov	rax, QWORD PTR userdata$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR winding_count$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR winding_lengths$[rbp]
	movaps	xmm2, xmm0
	mov	edx, DWORD PTR num_verts$[rbp]
	mov	rcx, QWORD PTR vertices$[rbp]
	call	?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ; stbtt_FlattenCurves
	mov	QWORD PTR windings$[rbp], rax
; Line 3541
	cmp	QWORD PTR windings$[rbp], 0
	je	$LN2@stbtt_Rast
; Line 3542
	mov	rax, QWORD PTR userdata$[rbp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR invert$[rbp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR y_off$[rbp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR x_off$[rbp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR winding_count$[rbp]
	mov	r8, QWORD PTR winding_lengths$[rbp]
	mov	rdx, QWORD PTR windings$[rbp]
	mov	rcx, QWORD PTR result$[rbp]
	call	?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ; stbtt__rasterize
; Line 3543
	mov	rcx, QWORD PTR winding_lengths$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 3544
	mov	rcx, QWORD PTR windings$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN2@stbtt_Rast:
; Line 3546
	lea	rcx, QWORD PTR [rbp-96]
	lea	rdx, OFFSET FLAT:stbtt_Rasterize$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
stbtt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetGlyphBitmapBoxSubpixel
_TEXT	SEGMENT
x0$ = 4
y0$ = 36
x1$ = 68
y1$ = 100
__$ArrayPad$ = 312
font$ = 352
glyph$ = 360
scale_x$ = 368
scale_y$ = 376
shift_x$ = 384
shift_y$ = 392
ix0$ = 400
iy0$ = 408
ix1$ = 416
iy1$ = 424
stbtt_GetGlyphBitmapBoxSubpixel PROC			; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2630
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2631
	mov	DWORD PTR x0$[rbp], 0
	mov	DWORD PTR y0$[rbp], 0
; Line 2632
	lea	rax, QWORD PTR y1$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x1$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR y0$[rbp]
	lea	r8, QWORD PTR x0$[rbp]
	mov	edx, DWORD PTR glyph$[rbp]
	mov	rcx, QWORD PTR font$[rbp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	jne	SHORT $LN2@stbtt_GetG
; Line 2634
	cmp	QWORD PTR ix0$[rbp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR ix0$[rbp]
	mov	DWORD PTR [rax], 0
$LN4@stbtt_GetG:
; Line 2635
	cmp	QWORD PTR iy0$[rbp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR iy0$[rbp]
	mov	DWORD PTR [rax], 0
$LN5@stbtt_GetG:
; Line 2636
	cmp	QWORD PTR ix1$[rbp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR ix1$[rbp]
	mov	DWORD PTR [rax], 0
$LN6@stbtt_GetG:
; Line 2637
	cmp	QWORD PTR iy1$[rbp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR iy1$[rbp]
	mov	DWORD PTR [rax], 0
$LN7@stbtt_GetG:
; Line 2638
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2640
	cmp	QWORD PTR ix0$[rbp], 0
	je	SHORT $LN8@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x0$[rbp]
	mulss	xmm0, DWORD PTR scale_x$[rbp]
	addss	xmm0, DWORD PTR shift_x$[rbp]
	call	?ImFloorSigned@@YAMM@Z			; ImFloorSigned
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR ix0$[rbp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
; Line 2641
	cmp	QWORD PTR iy0$[rbp], 0
	je	SHORT $LN9@stbtt_GetG
	mov	eax, DWORD PTR y1$[rbp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rbp]
	addss	xmm0, DWORD PTR shift_y$[rbp]
	call	?ImFloorSigned@@YAMM@Z			; ImFloorSigned
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR iy0$[rbp]
	mov	DWORD PTR [rcx], eax
$LN9@stbtt_GetG:
; Line 2642
	cmp	QWORD PTR ix1$[rbp], 0
	je	SHORT $LN10@stbtt_GetG
	cvtsi2ss xmm0, DWORD PTR x1$[rbp]
	mulss	xmm0, DWORD PTR scale_x$[rbp]
	addss	xmm0, DWORD PTR shift_x$[rbp]
	call	ceilf
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR ix1$[rbp]
	mov	DWORD PTR [rcx], eax
$LN10@stbtt_GetG:
; Line 2643
	cmp	QWORD PTR iy1$[rbp], 0
	je	SHORT $LN11@stbtt_GetG
	mov	eax, DWORD PTR y0$[rbp]
	neg	eax
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR scale_y$[rbp]
	addss	xmm0, DWORD PTR shift_y$[rbp]
	call	ceilf
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR iy1$[rbp]
	mov	DWORD PTR [rcx], eax
$LN11@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2645
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:stbtt_GetGlyphBitmapBoxSubpixel$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetGlyphBitmapBox
_TEXT	SEGMENT
font$ = 224
glyph$ = 232
scale_x$ = 240
scale_y$ = 248
ix0$ = 256
iy0$ = 264
ix1$ = 272
iy1$ = 280
stbtt_GetGlyphBitmapBox PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2648
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2649
	mov	rax, QWORD PTR iy1$[rbp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rbp]
	mov	QWORD PTR [rsp+48], rax
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rbp]
	movss	xmm2, DWORD PTR scale_x$[rbp]
	mov	edx, DWORD PTR glyph$[rbp]
	mov	rcx, QWORD PTR font$[rbp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2650
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_MakeGlyphBitmapSubpixel
_TEXT	SEGMENT
ix0$ = 4
iy0$ = 36
vertices$ = 72
num_verts$ = 100
gbm$ = 136
__$ArrayPad$ = 360
info$ = 400
output$ = 408
out_w$ = 416
out_h$ = 424
out_stride$ = 432
scale_x$ = 440
scale_y$ = 448
shift_x$ = 456
shift_y$ = 464
glyph$ = 472
stbtt_MakeGlyphBitmapSubpixel PROC			; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3599
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3602
	lea	r8, QWORD PTR vertices$[rbp]
	mov	edx, DWORD PTR glyph$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rbp], eax
; Line 3605
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR iy0$[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rbp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR shift_y$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR shift_x$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR scale_y$[rbp]
	movss	xmm2, DWORD PTR scale_x$[rbp]
	mov	edx, DWORD PTR glyph$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3606
	mov	rax, QWORD PTR output$[rbp]
	mov	QWORD PTR gbm$[rbp+16], rax
; Line 3607
	mov	eax, DWORD PTR out_w$[rbp]
	mov	DWORD PTR gbm$[rbp], eax
; Line 3608
	mov	eax, DWORD PTR out_h$[rbp]
	mov	DWORD PTR gbm$[rbp+4], eax
; Line 3609
	mov	eax, DWORD PTR out_stride$[rbp]
	mov	DWORD PTR gbm$[rbp+8], eax
; Line 3611
	cmp	DWORD PTR gbm$[rbp], 0
	je	$LN2@stbtt_Make
	cmp	DWORD PTR gbm$[rbp+4], 0
	je	SHORT $LN2@stbtt_Make
; Line 3612
	mov	rax, QWORD PTR info$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rbp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rbp]
	mov	DWORD PTR [rsp+64], eax
	movss	xmm0, DWORD PTR shift_y$[rbp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR shift_x$[rbp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR scale_y$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR scale_x$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rbp]
	mov	r8, QWORD PTR vertices$[rbp]
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rbp]
	call	stbtt_Rasterize
$LN2@stbtt_Make:
; Line 3614
	mov	rcx, QWORD PTR vertices$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 3615
	lea	rcx, QWORD PTR [rbp-96]
	lea	rdx, OFFSET FLAT:stbtt_MakeGlyphBitmapSubpixel$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
stbtt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetGlyphShape
_TEXT	SEGMENT
info$ = 224
glyph_index$ = 232
pvertices$ = 240
stbtt_GetGlyphShape PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2266
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2267
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+76], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2268
	mov	r8, QWORD PTR pvertices$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeTT
	jmp	SHORT $LN1@stbtt_GetG
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2270
	mov	r8, QWORD PTR pvertices$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeT2
$LN3@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2271
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetGlyphBox
_TEXT	SEGMENT
g$1 = 4
info$ = 256
glyph_index$ = 264
x0$ = 272
y0$ = 280
x1$ = 288
y1$ = 296
stbtt_GetGlyphBox PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1591
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1592
	mov	rax, QWORD PTR info$[rbp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_GetG
; Line 1593
	mov	rax, QWORD PTR y1$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR x1$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y0$[rbp]
	mov	r8, QWORD PTR x0$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
; Line 1594
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 1595
	mov	edx, DWORD PTR glyph_index$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$1[rbp], eax
; Line 1596
	cmp	DWORD PTR g$1[rbp], 0
	jge	SHORT $LN4@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 1598
	cmp	QWORD PTR x0$[rbp], 0
	je	SHORT $LN5@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rbp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 1599
	cmp	QWORD PTR y0$[rbp], 0
	je	SHORT $LN6@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 1600
	cmp	QWORD PTR x1$[rbp], 0
	je	SHORT $LN7@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rbp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
; Line 1601
	cmp	QWORD PTR y1$[rbp], 0
	je	SHORT $LN8@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rbp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 1603
	mov	eax, 1
$LN1@stbtt_GetG:
; Line 1604
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetGlyphHMetrics
_TEXT	SEGMENT
numOfLongHorMetrics$ = 4
info$ = 256
glyph_index$ = 264
advanceWidth$ = 272
leftSideBearing$ = 280
stbtt_GetGlyphHMetrics PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2274
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2275
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+34]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR numOfLongHorMetrics$[rbp], ax
; Line 2276
	movzx	eax, WORD PTR numOfLongHorMetrics$[rbp]
	cmp	DWORD PTR glyph_index$[rbp], eax
	jge	$LN2@stbtt_GetG
; Line 2277
	cmp	QWORD PTR advanceWidth$[rbp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rbp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetG:
; Line 2278
	cmp	QWORD PTR leftSideBearing$[rbp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rbp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 2279
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2280
	cmp	QWORD PTR advanceWidth$[rbp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rbp]
	lea	ecx, DWORD PTR [rcx*4-4]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rbp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 2281
	cmp	QWORD PTR leftSideBearing$[rbp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rbp]
	mov	edx, DWORD PTR glyph_index$[rbp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rbp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2283
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetFontVMetrics
_TEXT	SEGMENT
info$ = 224
ascent$ = 232
descent$ = 240
lineGap$ = 248
stbtt_GetFontVMetrics PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2582
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2583
	cmp	QWORD PTR ascent$[rbp], 0
	je	SHORT $LN2@stbtt_GetF
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR ascent$[rbp]
	mov	DWORD PTR [rcx], eax
$LN2@stbtt_GetF:
; Line 2584
	cmp	QWORD PTR descent$[rbp], 0
	je	SHORT $LN3@stbtt_GetF
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR descent$[rbp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2585
	cmp	QWORD PTR lineGap$[rbp], 0
	je	SHORT $LN4@stbtt_GetF
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR lineGap$[rbp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2586
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_ScaleForMappingEmToPixels
_TEXT	SEGMENT
unitsPerEm$ = 4
info$ = 256
pixels$ = 264
stbtt_ScaleForMappingEmToPixels PROC			; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2614
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2615
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR unitsPerEm$[rbp], eax
; Line 2616
	cvtsi2ss xmm0, DWORD PTR unitsPerEm$[rbp]
	movss	xmm1, DWORD PTR pixels$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2617
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
stbtt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_ScaleForPixelHeight
_TEXT	SEGMENT
fheight$ = 4
tv71 = 212
info$ = 256
height$ = 264
stbtt_ScaleForPixelHeight PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 2608
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 2609
	mov	rax, QWORD PTR info$[rbp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	DWORD PTR tv71[rbp], eax
	mov	rcx, QWORD PTR info$[rbp]
	movsxd	rcx, DWORD PTR [rcx+36]
	mov	rdx, QWORD PTR info$[rbp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+6]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR tv71[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fheight$[rbp], eax
; Line 2610
	cvtsi2ss xmm0, DWORD PTR fheight$[rbp]
	movss	xmm1, DWORD PTR height$[rbp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 2611
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
stbtt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_FindGlyphIndex
_TEXT	SEGMENT
data$ = 8
index_map$ = 36
format$ = 68
bytes$1 = 100
first$2 = 132
count$3 = 164
segcount$4 = 196
searchRange$5 = 228
entrySelector$6 = 260
rangeShift$7 = 292
endCount$8 = 324
search$9 = 356
end$10 = 388
offset$11 = 420
start$12 = 452
item$13 = 484
ngroups$14 = 516
low$15 = 548
high$16 = 580
mid$17 = 612
start_char$18 = 644
end_char$19 = 676
start_glyph$20 = 708
info$ = 1152
unicode_codepoint$ = 1160
stbtt_FindGlyphIndex PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 1462
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1160				; 00000488H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 1463
	mov	rax, QWORD PTR info$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rbp], rax
; Line 1464
	mov	rax, QWORD PTR info$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR index_map$[rbp], eax
; Line 1466
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR format$[rbp], ax
; Line 1467
	movzx	eax, WORD PTR format$[rbp]
	test	eax, eax
	jne	SHORT $LN15@stbtt_Find
; Line 1468
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR bytes$1[rbp], eax
; Line 1469
	mov	eax, DWORD PTR bytes$1[rbp]
	sub	eax, 6
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jge	SHORT $LN17@stbtt_Find
; Line 1470
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR unicode_codepoint$[rbp]
	movzx	eax, BYTE PTR [rax+rcx+6]
	jmp	$LN1@stbtt_Find
$LN17@stbtt_Find:
; Line 1471
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN16@stbtt_Find
$LN15@stbtt_Find:
; Line 1472
	movzx	eax, WORD PTR format$[rbp]
	cmp	eax, 6
	jne	$LN18@stbtt_Find
; Line 1473
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR first$2[rbp], eax
; Line 1474
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$3[rbp], eax
; Line 1475
	mov	eax, DWORD PTR first$2[rbp]
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jb	SHORT $LN20@stbtt_Find
	mov	eax, DWORD PTR count$3[rbp]
	mov	ecx, DWORD PTR first$2[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jae	SHORT $LN20@stbtt_Find
; Line 1476
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR first$2[rbp]
	mov	edx, DWORD PTR unicode_codepoint$[rbp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	mov	ecx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN20@stbtt_Find:
; Line 1477
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN19@stbtt_Find
$LN18@stbtt_Find:
; Line 1478
	movzx	eax, WORD PTR format$[rbp]
	cmp	eax, 2
	jne	SHORT $LN21@stbtt_Find
$LN4@stbtt_Find:
; Line 1479
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN39@stbtt_Find
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
	add	eax, 17
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN39@stbtt_Find:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbtt_Find
; Line 1480
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN22@stbtt_Find
$LN21@stbtt_Find:
; Line 1481
	movzx	eax, WORD PTR format$[rbp]
	cmp	eax, 4
	jne	$LN23@stbtt_Find
; Line 1482
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR segcount$4[rbp], ax
; Line 1483
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR searchRange$5[rbp], ax
; Line 1484
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR entrySelector$6[rbp], ax
; Line 1485
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR rangeShift$7[rbp], ax
; Line 1488
	mov	eax, DWORD PTR index_map$[rbp]
	add	eax, 14
	mov	DWORD PTR endCount$8[rbp], eax
; Line 1489
	mov	eax, DWORD PTR endCount$8[rbp]
	mov	DWORD PTR search$9[rbp], eax
; Line 1491
	cmp	DWORD PTR unicode_codepoint$[rbp], 65535 ; 0000ffffH
	jle	SHORT $LN25@stbtt_Find
; Line 1492
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN25@stbtt_Find:
; Line 1496
	mov	eax, DWORD PTR search$9[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR rangeShift$7[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jl	SHORT $LN26@stbtt_Find
; Line 1497
	movzx	eax, WORD PTR rangeShift$7[rbp]
	mov	ecx, DWORD PTR search$9[rbp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$9[rbp], eax
$LN26@stbtt_Find:
; Line 1500
	mov	eax, DWORD PTR search$9[rbp]
	sub	eax, 2
	mov	DWORD PTR search$9[rbp], eax
$LN5@stbtt_Find:
; Line 1501
	movzx	eax, WORD PTR entrySelector$6[rbp]
	test	eax, eax
	je	SHORT $LN6@stbtt_Find
; Line 1503
	movzx	eax, WORD PTR searchRange$5[rbp]
	shr	ax, 1
	mov	WORD PTR searchRange$5[rbp], ax
; Line 1504
	mov	eax, DWORD PTR search$9[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR searchRange$5[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR end$10[rbp], ax
; Line 1505
	movzx	eax, WORD PTR end$10[rbp]
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jle	SHORT $LN27@stbtt_Find
; Line 1506
	movzx	eax, WORD PTR searchRange$5[rbp]
	mov	ecx, DWORD PTR search$9[rbp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$9[rbp], eax
$LN27@stbtt_Find:
; Line 1507
	movzx	eax, WORD PTR entrySelector$6[rbp]
	dec	ax
	mov	WORD PTR entrySelector$6[rbp], ax
; Line 1508
	jmp	$LN5@stbtt_Find
$LN6@stbtt_Find:
; Line 1509
	mov	eax, DWORD PTR search$9[rbp]
	add	eax, 2
	mov	DWORD PTR search$9[rbp], eax
; Line 1513
	mov	eax, DWORD PTR endCount$8[rbp]
	mov	ecx, DWORD PTR search$9[rbp]
	sub	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	WORD PTR item$13[rbp], ax
$LN9@stbtt_Find:
; Line 1515
	mov	eax, DWORD PTR endCount$8[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR item$13[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jle	SHORT $LN40@stbtt_Find
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
	add	eax, 53					; 00000035H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HA@EBGBJFDE@?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAc?$AAo?$AAd?$AAe?$AAp?$AAo?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN40@stbtt_Find:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@stbtt_Find
; Line 1516
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$13[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR start$12[rbp], ax
; Line 1517
	movzx	eax, WORD PTR start$12[rbp]
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jge	SHORT $LN28@stbtt_Find
; Line 1518
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN28@stbtt_Find:
; Line 1520
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rbp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$13[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR offset$11[rbp], ax
; Line 1521
	movzx	eax, WORD PTR offset$11[rbp]
	test	eax, eax
	jne	SHORT $LN29@stbtt_Find
; Line 1522
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$13[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR unicode_codepoint$[rbp]
	add	ecx, eax
	mov	eax, ecx
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN29@stbtt_Find:
; Line 1524
	movzx	eax, WORD PTR offset$11[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR start$12[rbp]
	mov	edx, DWORD PTR unicode_codepoint$[rbp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR index_map$[rbp]
	add	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rbp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$13[rbp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
	jmp	$LN24@stbtt_Find
$LN23@stbtt_Find:
; Line 1526
	movzx	eax, WORD PTR format$[rbp]
	cmp	eax, 12
	je	SHORT $LN31@stbtt_Find
	movzx	eax, WORD PTR format$[rbp]
	cmp	eax, 13
	jne	$LN30@stbtt_Find
$LN31@stbtt_Find:
; Line 1527
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR ngroups$14[rbp], eax
; Line 1529
	mov	DWORD PTR low$15[rbp], 0
	mov	eax, DWORD PTR ngroups$14[rbp]
	mov	DWORD PTR high$16[rbp], eax
$LN10@stbtt_Find:
; Line 1531
	mov	eax, DWORD PTR high$16[rbp]
	cmp	DWORD PTR low$15[rbp], eax
	jge	$LN11@stbtt_Find
; Line 1532
	mov	eax, DWORD PTR low$15[rbp]
	mov	ecx, DWORD PTR high$16[rbp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR low$15[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR mid$17[rbp], eax
; Line 1533
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$17[rbp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+16]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_char$18[rbp], eax
; Line 1534
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$17[rbp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+20]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR end_char$19[rbp], eax
; Line 1535
	mov	eax, DWORD PTR start_char$18[rbp]
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jae	SHORT $LN32@stbtt_Find
; Line 1536
	mov	eax, DWORD PTR mid$17[rbp]
	mov	DWORD PTR high$16[rbp], eax
	jmp	SHORT $LN33@stbtt_Find
$LN32@stbtt_Find:
; Line 1537
	mov	eax, DWORD PTR end_char$19[rbp]
	cmp	DWORD PTR unicode_codepoint$[rbp], eax
	jbe	SHORT $LN34@stbtt_Find
; Line 1538
	mov	eax, DWORD PTR mid$17[rbp]
	inc	eax
	mov	DWORD PTR low$15[rbp], eax
	jmp	SHORT $LN35@stbtt_Find
$LN34@stbtt_Find:
; Line 1540
	mov	eax, DWORD PTR index_map$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$17[rbp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_glyph$20[rbp], eax
; Line 1541
	movzx	eax, WORD PTR format$[rbp]
	cmp	eax, 12
	jne	SHORT $LN36@stbtt_Find
; Line 1542
	mov	eax, DWORD PTR unicode_codepoint$[rbp]
	mov	ecx, DWORD PTR start_glyph$20[rbp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR start_char$18[rbp]
	jmp	SHORT $LN1@stbtt_Find
	jmp	SHORT $LN37@stbtt_Find
$LN36@stbtt_Find:
; Line 1544
	mov	eax, DWORD PTR start_glyph$20[rbp]
	jmp	SHORT $LN1@stbtt_Find
$LN37@stbtt_Find:
$LN35@stbtt_Find:
$LN33@stbtt_Find:
; Line 1546
	jmp	$LN10@stbtt_Find
$LN11@stbtt_Find:
; Line 1547
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Find
$LN30@stbtt_Find:
$LN24@stbtt_Find:
$LN22@stbtt_Find:
$LN19@stbtt_Find:
$LN16@stbtt_Find:
$LN14@stbtt_Find:
; Line 1550
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN41@stbtt_Find
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbtt_FindGlyphIndex@@9@4JA
	add	eax, 88					; 00000058H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@HJHOIBBP@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN41@stbtt_Find:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN14@stbtt_Find
; Line 1551
	xor	eax, eax
$LN1@stbtt_Find:
; Line 1552
	lea	rsp, QWORD PTR [rbp+1128]
	pop	rdi
	pop	rbp
	ret	0
stbtt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_InitFont
_TEXT	SEGMENT
info$ = 224
data$ = 232
offset$ = 240
stbtt_InitFont PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 4785
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 4786
	mov	r8d, DWORD PTR offset$[rbp]
	mov	rdx, QWORD PTR data$[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ; stbtt_InitFont_internal
; Line 4787
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbtt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetFontOffsetForIndex
_TEXT	SEGMENT
data$ = 224
index$ = 232
stbtt_GetFontOffsetForIndex PROC			; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 4775
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 4776
	mov	edx, DWORD PTR index$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	call	?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ; stbtt_GetFontOffsetForIndex_internal
; Line 4777
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetFontOffsetForIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_PackFontRangesRenderIntoRects
_TEXT	SEGMENT
i$ = 4
j$ = 36
k$ = 68
return_value$ = 100
old_h_over$ = 132
old_v_over$ = 164
fh$9 = 196
scale$10 = 228
recip_h$11 = 260
recip_v$12 = 292
sub_x$13 = 324
sub_y$14 = 356
r$15 = 392
bc$16 = 424
advance$17 = 452
lsb$18 = 484
x0$19 = 516
y0$20 = 548
x1$21 = 580
y1$22 = 612
codepoint$23 = 644
glyph$24 = 676
pad$25 = 708
tv178 = 1108
tv80 = 1108
tv306 = 1112
tv283 = 1112
__$ArrayPad$ = 1120
spc$ = 1168
info$ = 1176
ranges$ = 1184
num_ranges$ = 1192
rects$ = 1200
stbtt_PackFontRangesRenderIntoRects PROC		; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 4046
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1224				; 000004c8H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1256]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 4047
	mov	DWORD PTR return_value$[rbp], 1
; Line 4050
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR old_h_over$[rbp], eax
; Line 4051
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR old_v_over$[rbp], eax
; Line 4053
	mov	DWORD PTR k$[rbp], 0
; Line 4054
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN3@stbtt_Pack
; Line 4055
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR fh$9[rbp], xmm0
; Line 4056
	movss	xmm0, DWORD PTR fh$9[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@stbtt_Pack
	movss	xmm1, DWORD PTR fh$9[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_ScaleForPixelHeight
	movss	DWORD PTR tv80[rbp], xmm0
	jmp	SHORT $LN14@stbtt_Pack
$LN13@stbtt_Pack:
	movss	xmm0, DWORD PTR fh$9[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_ScaleForMappingEmToPixels
	movss	DWORD PTR tv80[rbp], xmm0
$LN14@stbtt_Pack:
	movss	xmm0, DWORD PTR tv80[rbp]
	movss	DWORD PTR scale$10[rbp], xmm0
; Line 4058
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+32]
	mov	rcx, QWORD PTR spc$[rbp]
	mov	DWORD PTR [rcx+36], eax
; Line 4059
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+33]
	mov	rcx, QWORD PTR spc$[rbp]
	mov	DWORD PTR [rcx+40], eax
; Line 4060
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_h$11[rbp], xmm0
; Line 4061
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR recip_v$12[rbp], xmm0
; Line 4062
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR [rax+36]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	movss	DWORD PTR sub_x$13[rbp], xmm0
; Line 4063
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR [rax+40]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	movss	DWORD PTR sub_y$14[rbp], xmm0
; Line 4064
	mov	DWORD PTR j$[rbp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rbp]
	inc	eax
	mov	DWORD PTR j$[rbp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rbp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rbp], eax
	jge	$LN6@stbtt_Pack
; Line 4065
	movsxd	rax, DWORD PTR k$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$15[rbp], rax
; Line 4066
	mov	rax, QWORD PTR r$15[rbp]
	cmp	DWORD PTR [rax+12], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+4]
	test	eax, eax
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+6]
	test	eax, eax
	je	$LN8@stbtt_Pack
; Line 4067
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rbp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rbp]
	add	rcx, QWORD PTR [rdx+rax+24]
	mov	rax, rcx
	mov	QWORD PTR bc$16[rbp], rax
; Line 4069
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rbp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN15@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rbp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rbp]
	mov	DWORD PTR tv178[rbp], eax
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rbp]
	mov	rdx, QWORD PTR ranges$[rbp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv178[rbp], eax
$LN16@stbtt_Pack:
	mov	eax, DWORD PTR tv178[rbp]
	mov	DWORD PTR codepoint$23[rbp], eax
; Line 4070
	mov	edx, DWORD PTR codepoint$23[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$24[rbp], eax
; Line 4071
	mov	rax, QWORD PTR spc$[rbp]
	movzx	eax, WORD PTR [rax+28]
	mov	WORD PTR pad$25[rbp], ax
; Line 4074
	movzx	eax, WORD PTR pad$25[rbp]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+8]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$15[rbp]
	mov	WORD PTR [rcx+8], ax
; Line 4075
	movzx	eax, WORD PTR pad$25[rbp]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+10]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$15[rbp]
	mov	WORD PTR [rcx+10], ax
; Line 4076
	movzx	eax, WORD PTR pad$25[rbp]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$15[rbp]
	mov	WORD PTR [rcx+4], ax
; Line 4077
	movzx	eax, WORD PTR pad$25[rbp]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR r$15[rbp]
	mov	WORD PTR [rcx+6], ax
; Line 4078
	lea	r9, QWORD PTR lsb$18[rbp]
	lea	r8, QWORD PTR advance$17[rbp]
	mov	edx, DWORD PTR glyph$24[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_GetGlyphHMetrics
; Line 4079
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$10[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$10[rbp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	lea	rax, QWORD PTR y1$22[rbp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$21[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$20[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$19[rbp]
	mov	QWORD PTR [rsp+32], rax
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	mov	edx, DWORD PTR glyph$24[rbp]
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_GetGlyphBitmapBox
; Line 4083
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+40]
	cvtsi2ss xmm0, rax
	movss	xmm1, DWORD PTR scale$10[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR spc$[rbp]
	mov	eax, DWORD PTR [rax+36]
	cvtsi2ss xmm1, rax
	movss	xmm2, DWORD PTR scale$10[rbp]
	mulss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR spc$[rbp]
	sub	eax, DWORD PTR [rcx+40]
	inc	eax
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	rdx, QWORD PTR spc$[rbp]
	sub	ecx, DWORD PTR [rdx+36]
	inc	ecx
	mov	rdx, QWORD PTR r$15[rbp]
	movzx	edx, WORD PTR [rdx+8]
	mov	r8, QWORD PTR spc$[rbp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$15[rbp]
	movzx	r8d, WORD PTR [r8+10]
	mov	r9, QWORD PTR spc$[rbp]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	r8d, DWORD PTR glyph$24[rbp]
	mov	DWORD PTR [rsp+72], r8d
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+64], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm0
	movss	DWORD PTR [rsp+40], xmm1
	mov	r8, QWORD PTR spc$[rbp]
	mov	r8d, DWORD PTR [r8+24]
	mov	DWORD PTR [rsp+32], r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR info$[rbp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4093
	mov	rax, QWORD PTR spc$[rbp]
	cmp	DWORD PTR [rax+36], 1
	jbe	$LN10@stbtt_Pack
; Line 4094
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	rdx, QWORD PTR r$15[rbp]
	movzx	edx, WORD PTR [rdx+8]
	mov	r8, QWORD PTR spc$[rbp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$15[rbp]
	movzx	r8d, WORD PTR [r8+10]
	mov	r9, QWORD PTR spc$[rbp]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	QWORD PTR tv283[rbp], rdx
	mov	r8, QWORD PTR spc$[rbp]
	mov	r8d, DWORD PTR [r8+36]
	mov	DWORD PTR [rsp+32], r8d
	mov	r8, QWORD PTR spc$[rbp]
	mov	r9d, DWORD PTR [r8+24]
	mov	r8d, eax
	mov	edx, ecx
	mov	rax, QWORD PTR tv283[rbp]
	mov	rcx, rax
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN10@stbtt_Pack:
; Line 4098
	mov	rax, QWORD PTR spc$[rbp]
	cmp	DWORD PTR [rax+40], 1
	jbe	$LN11@stbtt_Pack
; Line 4099
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	rdx, QWORD PTR r$15[rbp]
	movzx	edx, WORD PTR [rdx+8]
	mov	r8, QWORD PTR spc$[rbp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$15[rbp]
	movzx	r8d, WORD PTR [r8+10]
	mov	r9, QWORD PTR spc$[rbp]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	QWORD PTR tv306[rbp], rdx
	mov	r8, QWORD PTR spc$[rbp]
	mov	r8d, DWORD PTR [r8+40]
	mov	DWORD PTR [rsp+32], r8d
	mov	r8, QWORD PTR spc$[rbp]
	mov	r9d, DWORD PTR [r8+24]
	mov	r8d, eax
	mov	edx, ecx
	mov	rax, QWORD PTR tv306[rbp]
	mov	rcx, rax
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN11@stbtt_Pack:
; Line 4103
	mov	rax, QWORD PTR bc$16[rbp]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+8]
	mov	WORD PTR [rax], cx
; Line 4104
	mov	rax, QWORD PTR bc$16[rbp]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+10]
	mov	WORD PTR [rax+2], cx
; Line 4105
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+8]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	add	eax, ecx
	mov	rcx, QWORD PTR bc$16[rbp]
	mov	WORD PTR [rcx+4], ax
; Line 4106
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+10]
	mov	rcx, QWORD PTR r$15[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	add	eax, ecx
	mov	rcx, QWORD PTR bc$16[rbp]
	mov	WORD PTR [rcx+6], ax
; Line 4107
	cvtsi2ss xmm0, DWORD PTR advance$17[rbp]
	movss	xmm1, DWORD PTR scale$10[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR bc$16[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4108
	cvtsi2ss xmm0, DWORD PTR x0$19[rbp]
	mulss	xmm0, DWORD PTR recip_h$11[rbp]
	addss	xmm0, DWORD PTR sub_x$13[rbp]
	mov	rax, QWORD PTR bc$16[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4109
	cvtsi2ss xmm0, DWORD PTR y0$20[rbp]
	mulss	xmm0, DWORD PTR recip_v$12[rbp]
	addss	xmm0, DWORD PTR sub_y$14[rbp]
	mov	rax, QWORD PTR bc$16[rbp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4110
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	ecx, DWORD PTR x0$19[rbp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_h$11[rbp]
	addss	xmm0, DWORD PTR sub_x$13[rbp]
	mov	rax, QWORD PTR bc$16[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4111
	mov	rax, QWORD PTR r$15[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	ecx, DWORD PTR y0$20[rbp]
	add	ecx, eax
	mov	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR recip_v$12[rbp]
	addss	xmm0, DWORD PTR sub_y$14[rbp]
	mov	rax, QWORD PTR bc$16[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4112
	jmp	SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4113
	mov	DWORD PTR return_value$[rbp], 0
$LN9@stbtt_Pack:
; Line 4116
	mov	eax, DWORD PTR k$[rbp]
	inc	eax
	mov	DWORD PTR k$[rbp], eax
; Line 4117
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4118
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4121
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR old_h_over$[rbp]
	mov	DWORD PTR [rax+36], ecx
; Line 4122
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR old_v_over$[rbp]
	mov	DWORD PTR [rax+40], ecx
; Line 4124
	mov	eax, DWORD PTR return_value$[rbp]
; Line 4125
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:stbtt_PackFontRangesRenderIntoRects$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1144]
	pop	rdi
	pop	rbp
	ret	0
stbtt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_GetPackedQuad
_TEXT	SEGMENT
ipw$ = 4
iph$ = 36
b$ = 72
x$1 = 100
y$2 = 132
chardata$ = 384
pw$ = 392
ph$ = 400
char_index$ = 408
xpos$ = 416
ypos$ = 424
q$ = 432
align_to_integer$ = 440
stbtt_GetPackedQuad PROC				; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 4194
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 4195
	cvtsi2ss xmm0, DWORD PTR pw$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ipw$[rbp], xmm0
	cvtsi2ss xmm0, DWORD PTR ph$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR iph$[rbp], xmm0
; Line 4196
	movsxd	rax, DWORD PTR char_index$[rbp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR chardata$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rbp], rax
; Line 4198
	cmp	DWORD PTR align_to_integer$[rbp], 0
	je	$LN2@stbtt_GetP
; Line 4199
	mov	rax, QWORD PTR xpos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	addss	xmm0, DWORD PTR __real@3f000000
	call	?ImFloorSigned@@YAMM@Z			; ImFloorSigned
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR x$1[rbp], xmm0
; Line 4200
	mov	rax, QWORD PTR ypos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	addss	xmm0, DWORD PTR __real@3f000000
	call	?ImFloorSigned@@YAMM@Z			; ImFloorSigned
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR y$2[rbp], xmm0
; Line 4201
	mov	rax, QWORD PTR q$[rbp]
	movss	xmm0, DWORD PTR x$1[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 4202
	mov	rax, QWORD PTR q$[rbp]
	movss	xmm0, DWORD PTR y$2[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4203
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR x$1[rbp]
	addss	xmm0, DWORD PTR [rax+20]
	mov	rax, QWORD PTR b$[rbp]
	subss	xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4204
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR y$2[rbp]
	addss	xmm0, DWORD PTR [rax+24]
	mov	rax, QWORD PTR b$[rbp]
	subss	xmm0, DWORD PTR [rax+12]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 4205
	jmp	SHORT $LN3@stbtt_GetP
$LN2@stbtt_GetP:
; Line 4206
	mov	rax, QWORD PTR xpos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 4207
	mov	rax, QWORD PTR ypos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 4208
	mov	rax, QWORD PTR xpos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+20]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 4209
	mov	rax, QWORD PTR ypos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+24]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+20], xmm0
$LN3@stbtt_GetP:
; Line 4212
	mov	rax, QWORD PTR b$[rbp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rbp]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 4213
	mov	rax, QWORD PTR b$[rbp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rbp]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+12], xmm0
; Line 4214
	mov	rax, QWORD PTR b$[rbp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ipw$[rbp]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 4215
	mov	rax, QWORD PTR b$[rbp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR iph$[rbp]
	mov	rax, QWORD PTR q$[rbp]
	movss	DWORD PTR [rax+28], xmm0
; Line 4217
	mov	rax, QWORD PTR xpos$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 4218
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
stbtt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_PackEnd
_TEXT	SEGMENT
spc$ = 224
stbtt_PackEnd PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3830
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3831
	mov	rax, QWORD PTR spc$[rbp]
	mov	rcx, QWORD PTR [rax+56]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 3832
	mov	rax, QWORD PTR spc$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 3833
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbtt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbtt_PackBegin
_TEXT	SEGMENT
context$ = 8
num_nodes$ = 36
nodes$ = 72
tv86 = 276
tv133 = 280
spc$ = 320
pixels$ = 328
pw$ = 336
ph$ = 344
stride_in_bytes$ = 352
padding$ = 360
alloc_context$ = 368
stbtt_PackBegin PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_truetype.h
; Line 3798
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__B2779E6C_imstb_truetype@h
	call	__CheckForDebuggerJustMyCode
; Line 3799
	mov	ecx, 72					; 00000048H
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR context$[rbp], rax
; Line 3800
	mov	eax, DWORD PTR padding$[rbp]
	mov	ecx, DWORD PTR pw$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_nodes$[rbp], eax
; Line 3801
	movsxd	rax, DWORD PTR num_nodes$[rbp]
	imul	rax, rax, 16
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR nodes$[rbp], rax
; Line 3803
	cmp	QWORD PTR context$[rbp], 0
	je	SHORT $LN3@stbtt_Pack
	cmp	QWORD PTR nodes$[rbp], 0
	jne	SHORT $LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 3804
	cmp	QWORD PTR context$[rbp], 0
	je	SHORT $LN4@stbtt_Pack
	mov	rcx, QWORD PTR context$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN4@stbtt_Pack:
; Line 3805
	cmp	QWORD PTR nodes$[rbp], 0
	je	SHORT $LN5@stbtt_Pack
	mov	rcx, QWORD PTR nodes$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN5@stbtt_Pack:
; Line 3806
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN2@stbtt_Pack:
; Line 3809
	mov	rax, QWORD PTR spc$[rbp]
	mov	rcx, QWORD PTR alloc_context$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 3810
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR pw$[rbp]
	mov	DWORD PTR [rax+16], ecx
; Line 3811
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR ph$[rbp]
	mov	DWORD PTR [rax+20], ecx
; Line 3812
	mov	rax, QWORD PTR spc$[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	mov	QWORD PTR [rax+48], rcx
; Line 3813
	mov	rax, QWORD PTR spc$[rbp]
	mov	rcx, QWORD PTR context$[rbp]
	mov	QWORD PTR [rax+8], rcx
; Line 3814
	mov	rax, QWORD PTR spc$[rbp]
	mov	rcx, QWORD PTR nodes$[rbp]
	mov	QWORD PTR [rax+56], rcx
; Line 3815
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR padding$[rbp]
	mov	DWORD PTR [rax+28], ecx
; Line 3816
	cmp	DWORD PTR stride_in_bytes$[rbp], 0
	je	SHORT $LN8@stbtt_Pack
	mov	eax, DWORD PTR stride_in_bytes$[rbp]
	mov	DWORD PTR tv86[rbp], eax
	jmp	SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR pw$[rbp]
	mov	DWORD PTR tv86[rbp], eax
$LN9@stbtt_Pack:
	mov	rax, QWORD PTR spc$[rbp]
	mov	ecx, DWORD PTR tv86[rbp]
	mov	DWORD PTR [rax+24], ecx
; Line 3817
	mov	rax, QWORD PTR spc$[rbp]
	mov	DWORD PTR [rax+36], 1
; Line 3818
	mov	rax, QWORD PTR spc$[rbp]
	mov	DWORD PTR [rax+40], 1
; Line 3819
	mov	rax, QWORD PTR spc$[rbp]
	mov	DWORD PTR [rax+32], 0
; Line 3821
	mov	eax, DWORD PTR padding$[rbp]
	mov	ecx, DWORD PTR ph$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR padding$[rbp]
	mov	edx, DWORD PTR pw$[rbp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR num_nodes$[rbp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, QWORD PTR nodes$[rbp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR context$[rbp]
	call	stbrp_init_target
; Line 3823
	cmp	QWORD PTR pixels$[rbp], 0
	je	SHORT $LN6@stbtt_Pack
; Line 3824
	mov	eax, DWORD PTR pw$[rbp]
	imul	eax, DWORD PTR ph$[rbp]
	cdqe
	mov	QWORD PTR tv133[rbp], rax
	mov	rdi, QWORD PTR pixels$[rbp]
	xor	eax, eax
	mov	rcx, QWORD PTR tv133[rbp]
	rep stosb
$LN6@stbtt_Pack:
; Line 3826
	mov	eax, 1
$LN1@stbtt_Pack:
; Line 3827
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
stbtt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?rect_original_order@@YAHPEBX0@Z
_TEXT	SEGMENT
p$ = 8
q$ = 40
tv71 = 244
tv70 = 248
a$ = 288
b$ = 296
?rect_original_order@@YAHPEBX0@Z PROC			; rect_original_order, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 546
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 547
	mov	rax, QWORD PTR a$[rbp]
	mov	QWORD PTR p$[rbp], rax
; Line 548
	mov	rax, QWORD PTR b$[rbp]
	mov	QWORD PTR q$[rbp], rax
; Line 549
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+12], ecx
	jge	SHORT $LN5@rect_origi
	mov	DWORD PTR tv71[rbp], -1
	jmp	SHORT $LN6@rect_origi
$LN5@rect_origi:
	mov	rax, QWORD PTR p$[rbp]
	mov	rcx, QWORD PTR q$[rbp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+12], ecx
	jle	SHORT $LN3@rect_origi
	mov	DWORD PTR tv70[rbp], 1
	jmp	SHORT $LN4@rect_origi
$LN3@rect_origi:
	mov	DWORD PTR tv70[rbp], 0
$LN4@rect_origi:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR tv71[rbp], eax
$LN6@rect_origi:
	mov	eax, DWORD PTR tv71[rbp]
; Line 550
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?rect_original_order@@YAHPEBX0@Z ENDP			; rect_original_order
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?rect_height_compare@@YAHPEBX0@Z
_TEXT	SEGMENT
p$ = 8
q$ = 40
tv85 = 244
tv84 = 248
a$ = 288
b$ = 296
?rect_height_compare@@YAHPEBX0@Z PROC			; rect_height_compare, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 534
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 535
	mov	rax, QWORD PTR a$[rbp]
	mov	QWORD PTR p$[rbp], rax
; Line 536
	mov	rax, QWORD PTR b$[rbp]
	mov	QWORD PTR q$[rbp], rax
; Line 537
	mov	rax, QWORD PTR p$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR q$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	cmp	eax, ecx
	jle	SHORT $LN2@rect_heigh
; Line 538
	mov	eax, -1
	jmp	SHORT $LN1@rect_heigh
$LN2@rect_heigh:
; Line 539
	mov	rax, QWORD PTR p$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR q$[rbp]
	movzx	ecx, WORD PTR [rcx+6]
	cmp	eax, ecx
	jge	SHORT $LN3@rect_heigh
; Line 540
	mov	eax, 1
	jmp	SHORT $LN1@rect_heigh
$LN3@rect_heigh:
; Line 541
	mov	rax, QWORD PTR p$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR q$[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	cmp	eax, ecx
	jle	SHORT $LN7@rect_heigh
	mov	DWORD PTR tv85[rbp], -1
	jmp	SHORT $LN8@rect_heigh
$LN7@rect_heigh:
	mov	rax, QWORD PTR p$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR q$[rbp]
	movzx	ecx, WORD PTR [rcx+4]
	cmp	eax, ecx
	jge	SHORT $LN5@rect_heigh
	mov	DWORD PTR tv84[rbp], 1
	jmp	SHORT $LN6@rect_heigh
$LN5@rect_heigh:
	mov	DWORD PTR tv84[rbp], 0
$LN6@rect_heigh:
	mov	eax, DWORD PTR tv84[rbp]
	mov	DWORD PTR tv85[rbp], eax
$LN8@rect_heigh:
	mov	eax, DWORD PTR tv85[rbp]
$LN1@rect_heigh:
; Line 542
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?rect_height_compare@@YAHPEBX0@Z ENDP			; rect_height_compare
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
_TEXT	SEGMENT
res$ = 8
node$ = 56
cur$ = 88
next$4 = 120
next$5 = 152
count$6 = 180
$T7 = 408
__$ReturnAddress$ = 480
context$ = 488
width$ = 496
height$ = 504
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z PROC ; stbrp__skyline_pack_rectangle, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 454
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 480				; 000001e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+520]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 456
	mov	r9d, DWORD PTR height$[rbp]
	mov	r8d, DWORD PTR width$[rbp]
	mov	rdx, QWORD PTR context$[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ; stbrp__skyline_find_best_pos
	lea	rcx, QWORD PTR res$[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 463
	cmp	QWORD PTR res$[rbp+8], 0
	je	SHORT $LN20@stbrp__sky
	mov	eax, DWORD PTR height$[rbp]
	mov	ecx, DWORD PTR res$[rbp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR context$[rbp]
	cmp	eax, DWORD PTR [rcx+4]
	jg	SHORT $LN20@stbrp__sky
	mov	rax, QWORD PTR context$[rbp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN19@stbrp__sky
$LN20@stbrp__sky:
; Line 464
	mov	QWORD PTR res$[rbp+8], 0
; Line 465
	lea	rax, QWORD PTR res$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	$LN1@stbrp__sky
$LN19@stbrp__sky:
; Line 469
	mov	rax, QWORD PTR context$[rbp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR node$[rbp], rax
; Line 470
	mov	rax, QWORD PTR node$[rbp]
	movzx	ecx, WORD PTR res$[rbp]
	mov	WORD PTR [rax], cx
; Line 471
	mov	eax, DWORD PTR height$[rbp]
	mov	ecx, DWORD PTR res$[rbp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR node$[rbp]
	mov	WORD PTR [rcx+2], ax
; Line 473
	mov	rax, QWORD PTR context$[rbp]
	mov	rcx, QWORD PTR node$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+32], rcx
; Line 479
	mov	rax, QWORD PTR res$[rbp+8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR cur$[rbp], rax
; Line 480
	mov	rax, QWORD PTR cur$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR res$[rbp]
	jge	SHORT $LN21@stbrp__sky
; Line 482
	mov	rax, QWORD PTR cur$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR next$4[rbp], rax
; Line 483
	mov	rax, QWORD PTR cur$[rbp]
	mov	rcx, QWORD PTR node$[rbp]
	mov	QWORD PTR [rax+8], rcx
; Line 484
	mov	rax, QWORD PTR next$4[rbp]
	mov	QWORD PTR cur$[rbp], rax
; Line 485
	jmp	SHORT $LN22@stbrp__sky
$LN21@stbrp__sky:
; Line 486
	mov	rax, QWORD PTR res$[rbp+8]
	mov	rcx, QWORD PTR node$[rbp]
	mov	QWORD PTR [rax], rcx
$LN22@stbrp__sky:
$LN2@stbrp__sky:
; Line 491
	mov	rax, QWORD PTR cur$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@stbrp__sky
	mov	rax, QWORD PTR cur$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR width$[rbp]
	mov	edx, DWORD PTR res$[rbp]
	add	edx, ecx
	mov	ecx, edx
	cmp	eax, ecx
	jg	SHORT $LN3@stbrp__sky
; Line 492
	mov	rax, QWORD PTR cur$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR next$5[rbp], rax
; Line 494
	mov	rax, QWORD PTR cur$[rbp]
	mov	rcx, QWORD PTR context$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+8], rcx
; Line 495
	mov	rax, QWORD PTR context$[rbp]
	mov	rcx, QWORD PTR cur$[rbp]
	mov	QWORD PTR [rax+32], rcx
; Line 496
	mov	rax, QWORD PTR next$5[rbp]
	mov	QWORD PTR cur$[rbp], rax
; Line 497
	jmp	SHORT $LN2@stbrp__sky
$LN3@stbrp__sky:
; Line 500
	mov	rax, QWORD PTR node$[rbp]
	mov	rcx, QWORD PTR cur$[rbp]
	mov	QWORD PTR [rax+8], rcx
; Line 502
	mov	rax, QWORD PTR cur$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR width$[rbp]
	mov	edx, DWORD PTR res$[rbp]
	add	edx, ecx
	mov	ecx, edx
	cmp	eax, ecx
	jge	SHORT $LN23@stbrp__sky
; Line 503
	mov	eax, DWORD PTR width$[rbp]
	mov	ecx, DWORD PTR res$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR cur$[rbp]
	mov	WORD PTR [rcx], ax
$LN23@stbrp__sky:
; Line 506
	mov	rax, QWORD PTR context$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$[rbp], rax
$LN4@stbrp__sky:
; Line 507
	mov	rax, QWORD PTR cur$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR context$[rbp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN5@stbrp__sky
$LN8@stbrp__sky:
; Line 508
	mov	rax, QWORD PTR cur$[rbp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR cur$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	movzx	ecx, WORD PTR [rcx]
	cmp	eax, ecx
	jl	SHORT $LN25@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 54					; 00000036H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CM@NCKIDPDA@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?5?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN8@stbrp__sky
; Line 509
	mov	rax, QWORD PTR cur$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR cur$[rbp], rax
; Line 510
	jmp	SHORT $LN4@stbrp__sky
$LN5@stbrp__sky:
$LN11@stbrp__sky:
; Line 511
	mov	rax, QWORD PTR cur$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN26@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 57					; 00000039H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BO@NJIDGHPD@?$AAc?$AAu?$AAr?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN26@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN11@stbrp__sky
; Line 514
	mov	DWORD PTR count$6[rbp], 0
; Line 515
	mov	rax, QWORD PTR context$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$[rbp], rax
$LN12@stbrp__sky:
; Line 516
	cmp	QWORD PTR cur$[rbp], 0
	je	SHORT $LN13@stbrp__sky
; Line 517
	mov	rax, QWORD PTR cur$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR cur$[rbp], rax
; Line 518
	mov	eax, DWORD PTR count$6[rbp]
	inc	eax
	mov	DWORD PTR count$6[rbp], eax
; Line 519
	jmp	SHORT $LN12@stbrp__sky
$LN13@stbrp__sky:
; Line 520
	mov	rax, QWORD PTR context$[rbp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR cur$[rbp], rax
$LN14@stbrp__sky:
; Line 521
	cmp	QWORD PTR cur$[rbp], 0
	je	SHORT $LN15@stbrp__sky
; Line 522
	mov	rax, QWORD PTR cur$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR cur$[rbp], rax
; Line 523
	mov	eax, DWORD PTR count$6[rbp]
	inc	eax
	mov	DWORD PTR count$6[rbp], eax
; Line 524
	jmp	SHORT $LN14@stbrp__sky
$LN15@stbrp__sky:
$LN18@stbrp__sky:
; Line 525
	mov	rax, QWORD PTR context$[rbp]
	mov	eax, DWORD PTR [rax+20]
	add	eax, 2
	cmp	DWORD PTR count$6[rbp], eax
	je	SHORT $LN27@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 71					; 00000047H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DM@MABMKAHD@?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbrp__sky
; Line 529
	lea	rax, QWORD PTR res$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
$LN1@stbrp__sky:
; Line 530
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	lea	rsp, QWORD PTR [rbp+448]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ENDP ; stbrp__skyline_pack_rectangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z
_TEXT	SEGMENT
best_waste$ = 4
best_x$ = 36
best_y$ = 68
fr$ = 104
prev$ = 152
node$ = 184
tail$ = 216
best$ = 248
y$6 = 276
waste$7 = 308
xpos$8 = 340
y$9 = 372
waste$10 = 404
tv144 = 612
__$ArrayPad$ = 616
__$ReturnAddress$ = 656
c$ = 664
width$ = 672
height$ = 680
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z PROC ; stbrp__skyline_find_best_pos, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 352
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 672				; 000002a0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+712]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 353
	mov	DWORD PTR best_waste$[rbp], 1073741824	; 40000000H
	mov	DWORD PTR best_y$[rbp], 1073741824	; 40000000H
; Line 355
	mov	QWORD PTR best$[rbp], 0
; Line 358
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	ecx, DWORD PTR width$[rbp]
	lea	eax, DWORD PTR [rcx+rax-1]
	mov	DWORD PTR width$[rbp], eax
; Line 359
	mov	eax, DWORD PTR width$[rbp]
	cdq
	mov	rcx, QWORD PTR c$[rbp]
	idiv	DWORD PTR [rcx+8]
	mov	eax, edx
	mov	ecx, DWORD PTR width$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR width$[rbp], eax
$LN4@stbrp__sky:
; Line 360
	mov	eax, DWORD PTR width$[rbp]
	cdq
	mov	rcx, QWORD PTR c$[rbp]
	idiv	DWORD PTR [rcx+8]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN36@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CM@LEHAODMI@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$CF?$AA?5?$AAc?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN36@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbrp__sky
; Line 363
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR width$[rbp], eax
	jg	SHORT $LN23@stbrp__sky
	mov	rax, QWORD PTR c$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR height$[rbp], eax
	jle	SHORT $LN22@stbrp__sky
$LN23@stbrp__sky:
; Line 364
	mov	QWORD PTR fr$[rbp+8], 0
; Line 365
	mov	DWORD PTR fr$[rbp+4], 0
	mov	eax, DWORD PTR fr$[rbp+4]
	mov	DWORD PTR fr$[rbp], eax
; Line 366
	lea	rax, QWORD PTR fr$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
	jmp	$LN1@stbrp__sky
$LN22@stbrp__sky:
; Line 369
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR node$[rbp], rax
; Line 370
	mov	rax, QWORD PTR c$[rbp]
	add	rax, 24
	mov	QWORD PTR prev$[rbp], rax
$LN5@stbrp__sky:
; Line 371
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax]
	add	eax, DWORD PTR width$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	cmp	eax, DWORD PTR [rcx]
	jg	$LN6@stbrp__sky
; Line 373
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax]
	lea	rcx, QWORD PTR waste$7[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR width$[rbp]
	mov	r8d, eax
	mov	rdx, QWORD PTR node$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z ; stbrp__skyline_find_min_y
	mov	DWORD PTR y$6[rbp], eax
; Line 374
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN24@stbrp__sky
; Line 376
	mov	eax, DWORD PTR best_y$[rbp]
	cmp	DWORD PTR y$6[rbp], eax
	jge	SHORT $LN26@stbrp__sky
; Line 377
	mov	eax, DWORD PTR y$6[rbp]
	mov	DWORD PTR best_y$[rbp], eax
; Line 378
	mov	rax, QWORD PTR prev$[rbp]
	mov	QWORD PTR best$[rbp], rax
$LN26@stbrp__sky:
; Line 380
	jmp	SHORT $LN25@stbrp__sky
$LN24@stbrp__sky:
; Line 382
	mov	eax, DWORD PTR height$[rbp]
	mov	ecx, DWORD PTR y$6[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR c$[rbp]
	cmp	eax, DWORD PTR [rcx+4]
	jg	SHORT $LN27@stbrp__sky
; Line 384
	mov	eax, DWORD PTR best_y$[rbp]
	cmp	DWORD PTR y$6[rbp], eax
	jl	SHORT $LN29@stbrp__sky
	mov	eax, DWORD PTR best_y$[rbp]
	cmp	DWORD PTR y$6[rbp], eax
	jne	SHORT $LN28@stbrp__sky
	mov	eax, DWORD PTR best_waste$[rbp]
	cmp	DWORD PTR waste$7[rbp], eax
	jge	SHORT $LN28@stbrp__sky
$LN29@stbrp__sky:
; Line 385
	mov	eax, DWORD PTR y$6[rbp]
	mov	DWORD PTR best_y$[rbp], eax
; Line 386
	mov	eax, DWORD PTR waste$7[rbp]
	mov	DWORD PTR best_waste$[rbp], eax
; Line 387
	mov	rax, QWORD PTR prev$[rbp]
	mov	QWORD PTR best$[rbp], rax
$LN28@stbrp__sky:
$LN27@stbrp__sky:
$LN25@stbrp__sky:
; Line 391
	mov	rax, QWORD PTR node$[rbp]
	add	rax, 8
	mov	QWORD PTR prev$[rbp], rax
; Line 392
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR node$[rbp], rax
; Line 393
	jmp	$LN5@stbrp__sky
$LN6@stbrp__sky:
; Line 395
	cmp	QWORD PTR best$[rbp], 0
	jne	SHORT $LN37@stbrp__sky
	mov	DWORD PTR tv144[rbp], 0
	jmp	SHORT $LN38@stbrp__sky
$LN37@stbrp__sky:
	mov	rax, QWORD PTR best$[rbp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR tv144[rbp], eax
$LN38@stbrp__sky:
	mov	eax, DWORD PTR tv144[rbp]
	mov	DWORD PTR best_x$[rbp], eax
; Line 414
	mov	rax, QWORD PTR c$[rbp]
	cmp	DWORD PTR [rax+16], 1
	jne	$LN30@stbrp__sky
; Line 415
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tail$[rbp], rax
; Line 416
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR node$[rbp], rax
; Line 417
	mov	rax, QWORD PTR c$[rbp]
	add	rax, 24
	mov	QWORD PTR prev$[rbp], rax
$LN7@stbrp__sky:
; Line 419
	mov	rax, QWORD PTR tail$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR width$[rbp]
	jge	SHORT $LN8@stbrp__sky
; Line 420
	mov	rax, QWORD PTR tail$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tail$[rbp], rax
	jmp	SHORT $LN7@stbrp__sky
$LN8@stbrp__sky:
$LN9@stbrp__sky:
; Line 421
	cmp	QWORD PTR tail$[rbp], 0
	je	$LN10@stbrp__sky
; Line 422
	mov	rax, QWORD PTR tail$[rbp]
	movzx	eax, WORD PTR [rax]
	sub	eax, DWORD PTR width$[rbp]
	mov	DWORD PTR xpos$8[rbp], eax
$LN13@stbrp__sky:
; Line 424
	cmp	DWORD PTR xpos$8[rbp], 0
	jge	SHORT $LN39@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 72					; 00000048H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BE@MNLKNDNL@?$AAx?$AAp?$AAo?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN39@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@stbrp__sky
$LN14@stbrp__sky:
; Line 426
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR xpos$8[rbp]
	jg	SHORT $LN15@stbrp__sky
; Line 427
	mov	rax, QWORD PTR node$[rbp]
	add	rax, 8
	mov	QWORD PTR prev$[rbp], rax
; Line 428
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR node$[rbp], rax
; Line 429
	jmp	SHORT $LN14@stbrp__sky
$LN15@stbrp__sky:
$LN18@stbrp__sky:
; Line 430
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR xpos$8[rbp]
	jle	SHORT $LN40@stbrp__sky
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR xpos$8[rbp]
	jle	SHORT $LN41@stbrp__sky
$LN40@stbrp__sky:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 78					; 0000004eH
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1FA@GPDJEJHP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN41@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbrp__sky
; Line 431
	lea	rax, QWORD PTR waste$10[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR width$[rbp]
	mov	r8d, DWORD PTR xpos$8[rbp]
	mov	rdx, QWORD PTR node$[rbp]
	mov	rcx, QWORD PTR c$[rbp]
	call	?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z ; stbrp__skyline_find_min_y
	mov	DWORD PTR y$9[rbp], eax
; Line 432
	mov	eax, DWORD PTR height$[rbp]
	mov	ecx, DWORD PTR y$9[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR c$[rbp]
	cmp	eax, DWORD PTR [rcx+4]
	jg	$LN31@stbrp__sky
; Line 433
	mov	eax, DWORD PTR best_y$[rbp]
	cmp	DWORD PTR y$9[rbp], eax
	jg	$LN32@stbrp__sky
; Line 434
	mov	eax, DWORD PTR best_y$[rbp]
	cmp	DWORD PTR y$9[rbp], eax
	jl	SHORT $LN34@stbrp__sky
	mov	eax, DWORD PTR best_waste$[rbp]
	cmp	DWORD PTR waste$10[rbp], eax
	jl	SHORT $LN34@stbrp__sky
	mov	eax, DWORD PTR best_waste$[rbp]
	cmp	DWORD PTR waste$10[rbp], eax
	jne	SHORT $LN33@stbrp__sky
	mov	eax, DWORD PTR best_x$[rbp]
	cmp	DWORD PTR xpos$8[rbp], eax
	jge	SHORT $LN33@stbrp__sky
$LN34@stbrp__sky:
; Line 435
	mov	eax, DWORD PTR xpos$8[rbp]
	mov	DWORD PTR best_x$[rbp], eax
$LN21@stbrp__sky:
; Line 436
	mov	eax, DWORD PTR best_y$[rbp]
	cmp	DWORD PTR y$9[rbp], eax
	jle	SHORT $LN42@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z@4JA
	add	eax, 84					; 00000054H
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BI@JNFMLHFF@?$AAy?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAb?$AAe?$AAs?$AAt?$AA_?$AAy@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN42@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN21@stbrp__sky
; Line 437
	mov	eax, DWORD PTR y$9[rbp]
	mov	DWORD PTR best_y$[rbp], eax
; Line 438
	mov	eax, DWORD PTR waste$10[rbp]
	mov	DWORD PTR best_waste$[rbp], eax
; Line 439
	mov	rax, QWORD PTR prev$[rbp]
	mov	QWORD PTR best$[rbp], rax
$LN33@stbrp__sky:
$LN32@stbrp__sky:
$LN31@stbrp__sky:
; Line 443
	mov	rax, QWORD PTR tail$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tail$[rbp], rax
; Line 444
	jmp	$LN9@stbrp__sky
$LN10@stbrp__sky:
$LN30@stbrp__sky:
; Line 447
	mov	rax, QWORD PTR best$[rbp]
	mov	QWORD PTR fr$[rbp+8], rax
; Line 448
	mov	eax, DWORD PTR best_x$[rbp]
	mov	DWORD PTR fr$[rbp], eax
; Line 449
	mov	eax, DWORD PTR best_y$[rbp]
	mov	DWORD PTR fr$[rbp+4], eax
; Line 450
	lea	rax, QWORD PTR fr$[rbp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rbp]
$LN1@stbrp__sky:
; Line 451
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+624]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?stbrp__skyline_find_best_pos@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ENDP ; stbrp__skyline_find_best_pos
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z
_TEXT	SEGMENT
node$ = 8
x1$ = 36
min_y$ = 68
visited_width$ = 100
waste_area$ = 132
under_width$1 = 164
c$ = 416
first$ = 424
x0$ = 432
width$ = 440
pwaste$ = 448
?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z PROC ; stbrp__skyline_find_min_y, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 296
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 297
	mov	rax, QWORD PTR first$[rbp]
	mov	QWORD PTR node$[rbp], rax
; Line 298
	mov	eax, DWORD PTR width$[rbp]
	mov	ecx, DWORD PTR x0$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$[rbp], eax
$LN4@stbrp__sky:
; Line 303
	mov	rax, QWORD PTR first$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR x0$[rbp]
	jle	SHORT $LN19@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BO@KBODBKOH@?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbrp__sky
$LN7@stbrp__sky:
; Line 310
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR x0$[rbp]
	jg	SHORT $LN20@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
	add	eax, 14
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@BDIGDJGP@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DO@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@stbrp__sky
$LN10@stbrp__sky:
; Line 313
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR x0$[rbp]
	jle	SHORT $LN21@stbrp__sky
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z@4JA
	add	eax, 17
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BM@JHJLEEND@?$AAn?$AAo?$AAd?$AAe?$AA?9?$AA?$DO?$AAx?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAx?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@stbrp__sky:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@stbrp__sky
; Line 315
	mov	DWORD PTR min_y$[rbp], 0
; Line 316
	mov	DWORD PTR waste_area$[rbp], 0
; Line 317
	mov	DWORD PTR visited_width$[rbp], 0
$LN11@stbrp__sky:
; Line 318
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR x1$[rbp]
	jge	$LN12@stbrp__sky
; Line 319
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax+2]
	cmp	eax, DWORD PTR min_y$[rbp]
	jle	SHORT $LN13@stbrp__sky
; Line 323
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax+2]
	sub	eax, DWORD PTR min_y$[rbp]
	mov	ecx, DWORD PTR visited_width$[rbp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR waste_area$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR waste_area$[rbp], eax
; Line 324
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax+2]
	mov	DWORD PTR min_y$[rbp], eax
; Line 326
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax]
	cmp	eax, DWORD PTR x0$[rbp]
	jge	SHORT $LN15@stbrp__sky
; Line 327
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	sub	eax, DWORD PTR x0$[rbp]
	mov	ecx, DWORD PTR visited_width$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR visited_width$[rbp], eax
	jmp	SHORT $LN16@stbrp__sky
$LN15@stbrp__sky:
; Line 329
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR node$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR visited_width$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR visited_width$[rbp], eax
$LN16@stbrp__sky:
; Line 330
	jmp	SHORT $LN14@stbrp__sky
$LN13@stbrp__sky:
; Line 332
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR node$[rbp]
	movzx	ecx, WORD PTR [rcx]
	sub	eax, ecx
	mov	DWORD PTR under_width$1[rbp], eax
; Line 333
	mov	eax, DWORD PTR visited_width$[rbp]
	mov	ecx, DWORD PTR under_width$1[rbp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR width$[rbp]
	jle	SHORT $LN17@stbrp__sky
; Line 334
	mov	eax, DWORD PTR visited_width$[rbp]
	mov	ecx, DWORD PTR width$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR under_width$1[rbp], eax
$LN17@stbrp__sky:
; Line 335
	mov	rax, QWORD PTR node$[rbp]
	movzx	eax, WORD PTR [rax+2]
	mov	ecx, DWORD PTR min_y$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR under_width$1[rbp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR waste_area$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR waste_area$[rbp], eax
; Line 336
	mov	eax, DWORD PTR under_width$1[rbp]
	mov	ecx, DWORD PTR visited_width$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR visited_width$[rbp], eax
$LN14@stbrp__sky:
; Line 338
	mov	rax, QWORD PTR node$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR node$[rbp], rax
; Line 339
	jmp	$LN11@stbrp__sky
$LN12@stbrp__sky:
; Line 341
	mov	rax, QWORD PTR pwaste$[rbp]
	mov	ecx, DWORD PTR waste_area$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 342
	mov	eax, DWORD PTR min_y$[rbp]
; Line 343
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?stbrp__skyline_find_min_y@@YAHPEAUstbrp_context@@PEAUstbrp_node@@HHPEAH@Z ENDP ; stbrp__skyline_find_min_y
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbrp_setup_allow_out_of_mem
_TEXT	SEGMENT
context$ = 224
allow_out_of_mem$ = 232
stbrp_setup_allow_out_of_mem PROC			; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 243
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 244
	cmp	DWORD PTR allow_out_of_mem$[rbp], 0
	je	SHORT $LN2@stbrp_setu
; Line 249
	mov	rax, QWORD PTR context$[rbp]
	mov	DWORD PTR [rax+8], 1
	jmp	SHORT $LN3@stbrp_setu
$LN2@stbrp_setu:
; Line 258
	mov	rax, QWORD PTR context$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR context$[rbp]
	mov	ecx, DWORD PTR [rcx+20]
	lea	eax, DWORD PTR [rax+rcx-1]
	cdq
	mov	rcx, QWORD PTR context$[rbp]
	idiv	DWORD PTR [rcx+20]
	mov	rcx, QWORD PTR context$[rbp]
	mov	DWORD PTR [rcx+8], eax
$LN3@stbrp_setu:
; Line 260
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
stbrp_setup_allow_out_of_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbrp_init_target
_TEXT	SEGMENT
i$ = 4
context$ = 256
width$ = 264
height$ = 272
nodes$ = 280
num_nodes$ = 288
stbrp_init_target PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 263
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
$LN4@stbrp_init:
; Line 266
	cmp	DWORD PTR width$[rbp], 65535		; 0000ffffH
	jg	SHORT $LN9@stbrp_init
	cmp	DWORD PTR height$[rbp], 65535		; 0000ffffH
	jle	SHORT $LN10@stbrp_init
$LN9@stbrp_init:
	mov	eax, DWORD PTR ?__LINE__Var@?0??stbrp_init_target@@9@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GO@KIDGKFHL@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EI@NNJKMECF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA0?$AAx?$AAf?$AAf?$AAf?$AAf@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stbrp_init:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@stbrp_init
; Line 269
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN7@stbrp_init
$LN5@stbrp_init:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN7@stbrp_init:
	mov	eax, DWORD PTR num_nodes$[rbp]
	dec	eax
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN6@stbrp_init
; Line 270
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR nodes$[rbp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR i$[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR nodes$[rbp]
	mov	QWORD PTR [rdx+rcx+8], rax
	jmp	SHORT $LN5@stbrp_init
$LN6@stbrp_init:
; Line 271
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR nodes$[rbp]
	mov	QWORD PTR [rcx+rax+8], 0
; Line 272
	mov	rax, QWORD PTR context$[rbp]
	mov	DWORD PTR [rax+12], 1
; Line 273
	mov	rax, QWORD PTR context$[rbp]
	mov	DWORD PTR [rax+16], 0
; Line 274
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR nodes$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR context$[rbp]
	mov	QWORD PTR [rcx+32], rax
; Line 275
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR context$[rbp]
	lea	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, QWORD PTR context$[rbp]
	mov	QWORD PTR [rcx+24], rax
; Line 276
	mov	rax, QWORD PTR context$[rbp]
	mov	ecx, DWORD PTR width$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 277
	mov	rax, QWORD PTR context$[rbp]
	mov	ecx, DWORD PTR height$[rbp]
	mov	DWORD PTR [rax+4], ecx
; Line 278
	mov	rax, QWORD PTR context$[rbp]
	mov	ecx, DWORD PTR num_nodes$[rbp]
	mov	DWORD PTR [rax+20], ecx
; Line 279
	xor	edx, edx
	mov	rcx, QWORD PTR context$[rbp]
	call	stbrp_setup_allow_out_of_mem
; Line 282
	mov	eax, 16
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR context$[rbp]
	mov	WORD PTR [rdx+rax+40], cx
; Line 283
	mov	eax, 16
	imul	rax, rax, 0
	xor	ecx, ecx
	mov	rdx, QWORD PTR context$[rbp]
	mov	WORD PTR [rdx+rax+42], cx
; Line 284
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR context$[rbp]
	lea	rax, QWORD PTR [rcx+rax+40]
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR context$[rbp]
	mov	QWORD PTR [rdx+rcx+48], rax
; Line 285
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR context$[rbp]
	movzx	edx, WORD PTR width$[rbp]
	mov	WORD PTR [rcx+rax+40], dx
; Line 289
	mov	eax, 16
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR context$[rbp]
	mov	WORD PTR [rdx+rax+42], cx
; Line 291
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR context$[rbp]
	mov	QWORD PTR [rcx+rax+48], 0
; Line 292
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
stbrp_init_target ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT stbrp_pack_rects
_TEXT	SEGMENT
i$ = 4
all_rects_packed$ = 36
fr$4 = 72
$T5 = 312
tv185 = 340
context$ = 384
rects$ = 392
num_rects$ = 400
stbrp_pack_rects PROC					; COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imstb_rectpack.h
; Line 559
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 384				; 00000180H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	lea	rcx, OFFSET FLAT:__8F86256B_imstb_rectpack@h
	call	__CheckForDebuggerJustMyCode
; Line 560
	mov	DWORD PTR all_rects_packed$[rbp], 1
; Line 563
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN4@stbrp_pack
$LN2@stbrp_pack:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN4@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	SHORT $LN3@stbrp_pack
; Line 564
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	mov	edx, DWORD PTR i$[rbp]
	mov	DWORD PTR [rcx+rax+12], edx
; Line 565
	jmp	SHORT $LN2@stbrp_pack
$LN3@stbrp_pack:
; Line 568
	movsxd	rax, DWORD PTR num_rects$[rbp]
	lea	r9, OFFSET FLAT:?rect_height_compare@@YAHPEBX0@Z ; rect_height_compare
	mov	r8d, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR rects$[rbp]
	call	QWORD PTR __imp_qsort
; Line 570
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN7@stbrp_pack
$LN5@stbrp_pack:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN7@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN6@stbrp_pack
; Line 571
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	eax, WORD PTR [rcx+rax+4]
	test	eax, eax
	je	SHORT $LN13@stbrp_pack
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	eax, WORD PTR [rcx+rax+6]
	test	eax, eax
	jne	SHORT $LN11@stbrp_pack
$LN13@stbrp_pack:
; Line 572
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	xor	ecx, ecx
	mov	rdx, QWORD PTR rects$[rbp]
	mov	WORD PTR [rdx+rax+10], cx
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	xor	ecx, ecx
	mov	rdx, QWORD PTR rects$[rbp]
	mov	WORD PTR [rdx+rax+8], cx
; Line 573
	jmp	$LN12@stbrp_pack
$LN11@stbrp_pack:
; Line 574
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	eax, WORD PTR [rcx+rax+6]
	movsxd	rcx, DWORD PTR i$[rbp]
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR rects$[rbp]
	movzx	ecx, WORD PTR [rdx+rcx+4]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR context$[rbp]
	lea	rcx, QWORD PTR $T5[rbp]
	call	?stbrp__skyline_pack_rectangle@@YA?AUstbrp__findresult@@PEAUstbrp_context@@HH@Z ; stbrp__skyline_pack_rectangle
	lea	rcx, QWORD PTR fr$4[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 575
	cmp	QWORD PTR fr$4[rbp+8], 0
	je	SHORT $LN14@stbrp_pack
; Line 576
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	edx, WORD PTR fr$4[rbp]
	mov	WORD PTR [rcx+rax+8], dx
; Line 577
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	edx, WORD PTR fr$4[rbp+4]
	mov	WORD PTR [rcx+rax+10], dx
; Line 578
	jmp	SHORT $LN15@stbrp_pack
$LN14@stbrp_pack:
; Line 579
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR rects$[rbp]
	mov	WORD PTR [rdx+rax+10], cx
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR rects$[rbp]
	mov	WORD PTR [rdx+rax+8], cx
$LN15@stbrp_pack:
$LN12@stbrp_pack:
; Line 582
	jmp	$LN5@stbrp_pack
$LN6@stbrp_pack:
; Line 585
	movsxd	rax, DWORD PTR num_rects$[rbp]
	lea	r9, OFFSET FLAT:?rect_original_order@@YAHPEBX0@Z ; rect_original_order
	mov	r8d, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR rects$[rbp]
	call	QWORD PTR __imp_qsort
; Line 588
	mov	DWORD PTR i$[rbp], 0
	jmp	SHORT $LN10@stbrp_pack
$LN8@stbrp_pack:
	mov	eax, DWORD PTR i$[rbp]
	inc	eax
	mov	DWORD PTR i$[rbp], eax
$LN10@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rbp]
	cmp	DWORD PTR i$[rbp], eax
	jge	$LN9@stbrp_pack
; Line 589
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	eax, WORD PTR [rcx+rax+8]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN18@stbrp_pack
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	movzx	eax, WORD PTR [rcx+rax+10]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN18@stbrp_pack
	mov	DWORD PTR tv185[rbp], 0
	jmp	SHORT $LN19@stbrp_pack
$LN18@stbrp_pack:
	mov	DWORD PTR tv185[rbp], 1
$LN19@stbrp_pack:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	mov	edx, DWORD PTR tv185[rbp]
	mov	DWORD PTR [rcx+rax+12], edx
; Line 590
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rects$[rbp]
	cmp	DWORD PTR [rcx+rax+12], 0
	jne	SHORT $LN16@stbrp_pack
; Line 591
	mov	DWORD PTR all_rects_packed$[rbp], 0
$LN16@stbrp_pack:
; Line 592
	jmp	$LN8@stbrp_pack
$LN9@stbrp_pack:
; Line 595
	mov	eax, DWORD PTR all_rects_packed$[rbp]
; Line 596
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:stbrp_pack_rects$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	lea	rsp, QWORD PTR [rbp+352]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
stbrp_pack_rects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z
_TEXT	SEGMENT
data$ = 8
j$1 = 36
i$2 = 68
table$ = 320
pixels$ = 328
x$ = 336
y$ = 344
w$ = 352
h$ = 360
stride$ = 368
?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z PROC ; ImFontAtlasBuildMultiplyRectAlpha8, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2296
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2297
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR pixels$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR y$[rbp]
	imul	ecx, DWORD PTR stride$[rbp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR data$[rbp], rax
; Line 2298
	mov	eax, DWORD PTR h$[rbp]
	mov	DWORD PTR j$1[rbp], eax
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR j$1[rbp]
	dec	eax
	mov	DWORD PTR j$1[rbp], eax
	movsxd	rax, DWORD PTR stride$[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR data$[rbp], rax
$LN4@ImFontAtla:
	cmp	DWORD PTR j$1[rbp], 0
	jle	SHORT $LN3@ImFontAtla
; Line 2299
	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN7@ImFontAtla:
	mov	eax, DWORD PTR w$[rbp]
	cmp	DWORD PTR i$2[rbp], eax
	jge	SHORT $LN6@ImFontAtla
; Line 2300
	movsxd	rax, DWORD PTR i$2[rbp]
	mov	rcx, QWORD PTR data$[rbp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$2[rbp]
	mov	rdx, QWORD PTR data$[rbp]
	mov	r8, QWORD PTR table$[rbp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
	jmp	SHORT $LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2301
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildMultiplyRectAlpha8@@YAXQEBEPEAEHHHHH@Z ENDP ; ImFontAtlasBuildMultiplyRectAlpha8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z
_TEXT	SEGMENT
i$1 = 4
value$2 = 36
tv75 = 244
out_table$ = 288
in_brighten_factor$ = 296
?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z PROC ; ImFontAtlasBuildMultiplyCalcLookupTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2287
$LN8:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2288
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@ImFontAtla:
	cmp	DWORD PTR i$1[rbp], 256			; 00000100H
	jae	SHORT $LN3@ImFontAtla
; Line 2290
	mov	eax, DWORD PTR i$1[rbp]
	cvtsi2ss xmm0, rax
	mulss	xmm0, DWORD PTR in_brighten_factor$[rbp]
	cvttss2si rax, xmm0
	mov	DWORD PTR value$2[rbp], eax
; Line 2291
	cmp	DWORD PTR value$2[rbp], 255		; 000000ffH
	jbe	SHORT $LN6@ImFontAtla
	mov	DWORD PTR tv75[rbp], 255		; 000000ffH
	jmp	SHORT $LN7@ImFontAtla
$LN6@ImFontAtla:
	mov	eax, DWORD PTR value$2[rbp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR tv75[rbp], eax
$LN7@ImFontAtla:
	mov	eax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR out_table$[rbp]
	movzx	edx, BYTE PTR tv75[rbp]
	mov	BYTE PTR [rcx+rax], dl
; Line 2292
	jmp	SHORT $LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2293
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildMultiplyCalcLookupTable@@YAXQEAEM@Z ENDP ; ImFontAtlasBuildMultiplyCalcLookupTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z
_TEXT	SEGMENT
out_pixel$ = 8
off_y$1 = 36
off_x$2 = 68
tv142 = 276
atlas$ = 320
x$ = 328
y$ = 336
w$ = 344
h$ = 352
in_str$ = 360
in_marker_char$ = 368
in_marker_pixel_value$ = 376
?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z PROC ; ImFontAtlasBuildRender32bppRectFromString, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2655
$LN15:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2656
	cmp	DWORD PTR x$[rbp], 0
	jl	SHORT $LN9@ImFontAtla
	mov	eax, DWORD PTR w$[rbp]
	mov	ecx, DWORD PTR x$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR atlas$[rbp]
	cmp	eax, DWORD PTR [rcx+48]
	jle	SHORT $LN10@ImFontAtla
$LN9@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@ImFontAtla:
; Line 2657
	cmp	DWORD PTR y$[rbp], 0
	jl	SHORT $LN11@ImFontAtla
	mov	eax, DWORD PTR h$[rbp]
	mov	ecx, DWORD PTR y$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR atlas$[rbp]
	cmp	eax, DWORD PTR [rcx+52]
	jle	SHORT $LN12@ImFontAtla
$LN11@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@ImFontAtla:
; Line 2658
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR y$[rbp]
	imul	edx, DWORD PTR [rcx+48]
	mov	ecx, edx
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR out_pixel$[rbp], rax
; Line 2659
	mov	DWORD PTR off_y$1[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR off_y$1[rbp]
	inc	eax
	mov	DWORD PTR off_y$1[rbp], eax
	mov	rax, QWORD PTR atlas$[rbp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR out_pixel$[rbp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR out_pixel$[rbp], rax
	movsxd	rax, DWORD PTR w$[rbp]
	mov	rcx, QWORD PTR in_str$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR in_str$[rbp], rax
$LN4@ImFontAtla:
	mov	eax, DWORD PTR h$[rbp]
	cmp	DWORD PTR off_y$1[rbp], eax
	jge	SHORT $LN3@ImFontAtla
; Line 2660
	mov	DWORD PTR off_x$2[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR off_x$2[rbp]
	inc	eax
	mov	DWORD PTR off_x$2[rbp], eax
$LN7@ImFontAtla:
	mov	eax, DWORD PTR w$[rbp]
	cmp	DWORD PTR off_x$2[rbp], eax
	jge	SHORT $LN6@ImFontAtla
; Line 2661
	movsxd	rax, DWORD PTR off_x$2[rbp]
	mov	rcx, QWORD PTR in_str$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	movsx	ecx, BYTE PTR in_marker_char$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN13@ImFontAtla
	mov	eax, DWORD PTR in_marker_pixel_value$[rbp]
	mov	DWORD PTR tv142[rbp], eax
	jmp	SHORT $LN14@ImFontAtla
$LN13@ImFontAtla:
	mov	DWORD PTR tv142[rbp], 0
$LN14@ImFontAtla:
	movsxd	rax, DWORD PTR off_x$2[rbp]
	mov	rcx, QWORD PTR out_pixel$[rbp]
	mov	edx, DWORD PTR tv142[rbp]
	mov	DWORD PTR [rcx+rax*4], edx
	jmp	SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
	jmp	$LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2662
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildRender32bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDI@Z ENDP ; ImFontAtlasBuildRender32bppRectFromString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z
_TEXT	SEGMENT
out_pixel$ = 8
off_y$1 = 36
off_x$2 = 68
tv140 = 276
atlas$ = 320
x$ = 328
y$ = 336
w$ = 344
h$ = 352
in_str$ = 360
in_marker_char$ = 368
in_marker_pixel_value$ = 376
?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z PROC ; ImFontAtlasBuildRender8bppRectFromString, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2645
$LN15:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2646
	cmp	DWORD PTR x$[rbp], 0
	jl	SHORT $LN9@ImFontAtla
	mov	eax, DWORD PTR w$[rbp]
	mov	ecx, DWORD PTR x$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR atlas$[rbp]
	cmp	eax, DWORD PTR [rcx+48]
	jle	SHORT $LN10@ImFontAtla
$LN9@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EG@KOLNNAOF@?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?5?$AA?$CL?$AA?5?$AAw@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@ImFontAtla:
; Line 2647
	cmp	DWORD PTR y$[rbp], 0
	jl	SHORT $LN11@ImFontAtla
	mov	eax, DWORD PTR h$[rbp]
	mov	ecx, DWORD PTR y$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR atlas$[rbp]
	cmp	eax, DWORD PTR [rcx+52]
	jle	SHORT $LN12@ImFontAtla
$LN11@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EI@CHFOHLGN@?$AAy?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAy?$AA?5?$AA?$CL?$AA?5?$AAh@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@ImFontAtla:
; Line 2648
	movsxd	rax, DWORD PTR x$[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	edx, DWORD PTR y$[rbp]
	imul	edx, DWORD PTR [rcx+48]
	mov	ecx, edx
	movsxd	rcx, ecx
	add	rax, rcx
	mov	QWORD PTR out_pixel$[rbp], rax
; Line 2649
	mov	DWORD PTR off_y$1[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR off_y$1[rbp]
	inc	eax
	mov	DWORD PTR off_y$1[rbp], eax
	mov	rax, QWORD PTR atlas$[rbp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR out_pixel$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out_pixel$[rbp], rax
	movsxd	rax, DWORD PTR w$[rbp]
	mov	rcx, QWORD PTR in_str$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR in_str$[rbp], rax
$LN4@ImFontAtla:
	mov	eax, DWORD PTR h$[rbp]
	cmp	DWORD PTR off_y$1[rbp], eax
	jge	SHORT $LN3@ImFontAtla
; Line 2650
	mov	DWORD PTR off_x$2[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR off_x$2[rbp]
	inc	eax
	mov	DWORD PTR off_x$2[rbp], eax
$LN7@ImFontAtla:
	mov	eax, DWORD PTR w$[rbp]
	cmp	DWORD PTR off_x$2[rbp], eax
	jge	SHORT $LN6@ImFontAtla
; Line 2651
	movsxd	rax, DWORD PTR off_x$2[rbp]
	mov	rcx, QWORD PTR in_str$[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	movsx	ecx, BYTE PTR in_marker_char$[rbp]
	cmp	eax, ecx
	jne	SHORT $LN13@ImFontAtla
	movzx	eax, BYTE PTR in_marker_pixel_value$[rbp]
	mov	DWORD PTR tv140[rbp], eax
	jmp	SHORT $LN14@ImFontAtla
$LN13@ImFontAtla:
	mov	DWORD PTR tv140[rbp], 0
$LN14@ImFontAtla:
	movsxd	rax, DWORD PTR off_x$2[rbp]
	mov	rcx, QWORD PTR out_pixel$[rbp]
	movzx	edx, BYTE PTR tv140[rbp]
	mov	BYTE PTR [rcx+rax], dl
	jmp	SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
	jmp	$LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2652
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildRender8bppRectFromString@@YAXPEAUImFontAtlas@@HHHHPEBDDE@Z ENDP ; ImFontAtlasBuildRender8bppRectFromString
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
i$5 = 4
r$6 = 40
uv0$7 = 72
uv1$8 = 104
i$9 = 132
tv186 = 344
tv177 = 344
tv167 = 344
tv84 = 344
__$ArrayPad$ = 352
atlas$ = 400
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z PROC	; ImFontAtlasBuildFinish, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2778
$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 46					; 0000002eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+504]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2780
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN12@ImFontAtla
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN12@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HG@JLCPLJIF@?$AAa?$AAt?$AAl?$AAa?$AAs?$AA?9?$AA?$DO?$AAT?$AAe?$AAx?$AAP?$AAi?$AAx?$AAe?$AAl@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@ImFontAtla:
; Line 2781
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildRenderDefaultTexData@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildRenderDefaultTexData
; Line 2782
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?ImFontAtlasBuildRenderLinesTexData@@YAXPEAUImFontAtlas@@@Z ; ImFontAtlasBuildRenderLinesTexData
; Line 2785
	mov	DWORD PTR i$5[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR i$5[rbp]
	inc	eax
	mov	DWORD PTR i$5[rbp], eax
$LN4@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+88]
	cmp	DWORD PTR i$5[rbp], eax
	jge	$LN3@ImFontAtla
; Line 2787
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR tv84[rbp], rax
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR tv84[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	mov	QWORD PTR r$6[rbp], rax
; Line 2788
	mov	rax, QWORD PTR r$6[rbp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN9@ImFontAtla
	mov	rax, QWORD PTR r$6[rbp]
	cmp	DWORD PTR [rax+8], 0
	jne	SHORT $LN8@ImFontAtla
$LN9@ImFontAtla:
; Line 2789
	jmp	SHORT $LN2@ImFontAtla
$LN8@ImFontAtla:
; Line 2792
	mov	rax, QWORD PTR r$6[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR atlas$[rbp]
	cmp	QWORD PTR [rax+64], rcx
	je	SHORT $LN13@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z@4JA
	add	eax, 14
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EC@BJJINGAO@?$AAr?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@ImFontAtla:
; Line 2793
	lea	rcx, QWORD PTR uv0$7[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	lea	rcx, QWORD PTR uv1$8[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
; Line 2794
	lea	r9, QWORD PTR uv1$8[rbp]
	lea	r8, QWORD PTR uv0$7[rbp]
	mov	rdx, QWORD PTR r$6[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z ; ImFontAtlas::CalcCustomRectUV
; Line 2795
	mov	rax, QWORD PTR r$6[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv167[rbp], rax
	mov	rax, QWORD PTR r$6[rbp]
	movzx	eax, WORD PTR [rax+2]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR r$6[rbp]
	movss	xmm1, DWORD PTR [rax+20]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR r$6[rbp]
	movzx	eax, WORD PTR [rax]
	cvtsi2ss xmm1, eax
	mov	rax, QWORD PTR r$6[rbp]
	movss	xmm2, DWORD PTR [rax+16]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR r$6[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	movss	DWORD PTR [rsp+88], xmm2
	movss	xmm2, DWORD PTR uv1$8[rbp+4]
	movss	DWORD PTR [rsp+80], xmm2
	movss	xmm2, DWORD PTR uv1$8[rbp]
	movss	DWORD PTR [rsp+72], xmm2
	movss	xmm2, DWORD PTR uv0$7[rbp+4]
	movss	DWORD PTR [rsp+64], xmm2
	movss	xmm2, DWORD PTR uv0$7[rbp]
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm0
	movss	DWORD PTR [rsp+40], xmm1
	mov	rax, QWORD PTR r$6[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR r$6[rbp]
	movss	xmm3, DWORD PTR [rax+16]
	mov	rax, QWORD PTR r$6[rbp]
	movzx	r8d, WORD PTR [rax+8]
	xor	edx, edx
	mov	rcx, QWORD PTR tv167[rbp]
	call	?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ; ImFont::AddGlyph
; Line 2796
	jmp	$LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2799
	mov	DWORD PTR i$9[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR i$9[rbp]
	inc	eax
	mov	DWORD PTR i$9[rbp], eax
$LN7@ImFontAtla:
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+72]
	cmp	DWORD PTR i$9[rbp], eax
	jge	SHORT $LN6@ImFontAtla
; Line 2800
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv177[rbp], rax
	mov	edx, DWORD PTR i$9[rbp]
	mov	rcx, QWORD PTR tv177[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax+88]
	test	eax, eax
	je	SHORT $LN10@ImFontAtla
; Line 2801
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv186[rbp], rax
	mov	edx, DWORD PTR i$9[rbp]
	mov	rcx, QWORD PTR tv186[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rcx, QWORD PTR [rax]
	call	?BuildLookupTable@ImFont@@QEAAXXZ	; ImFont::BuildLookupTable
$LN10@ImFontAtla:
	jmp	SHORT $LN5@ImFontAtla
$LN6@ImFontAtla:
; Line 2803
	mov	rax, QWORD PTR atlas$[rbp]
	mov	BYTE PTR [rax+25], 1
; Line 2804
	lea	rcx, QWORD PTR [rbp-96]
	lea	rdx, OFFSET FLAT:?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+376]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildFinish@@YAXPEAUImFontAtlas@@@Z ENDP	; ImFontAtlasBuildFinish
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z
_TEXT	SEGMENT
pack_context$ = 8
user_rects$ = 40
pack_rects$ = 72
i$4 = 116
i$5 = 148
tv212 = 356
tv183 = 356
tv178 = 356
tv168 = 356
tv145 = 356
tv135 = 356
tv225 = 360
tv194 = 360
tv88 = 360
tv223 = 364
__$ArrayPad$ = 368
atlas$ = 416
stbrp_context_opaque$ = 424
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z PROC ; ImFontAtlasBuildPackCustomRects, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2618
$LN15:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 50					; 00000032H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2619
	mov	rax, QWORD PTR stbrp_context_opaque$[rbp]
	mov	QWORD PTR pack_context$[rbp], rax
; Line 2620
	cmp	QWORD PTR pack_context$[rbp], 0
	jne	SHORT $LN10@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CE@FMMHMDCM@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AA?5?$AA?$CB?$AA?$DN@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@ImFontAtla:
; Line 2622
	mov	rax, QWORD PTR atlas$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR user_rects$[rbp], rax
; Line 2623
	mov	rax, QWORD PTR user_rects$[rbp]
	cmp	DWORD PTR [rax], 1
	jge	SHORT $LN11@ImFontAtla
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CK@POMOOFJC@?$AAu?$AAs?$AAe?$AAr?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@ImFontAtla:
; Line 2625
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??0?$ImVector@Ustbrp_rect@@@@QEAA@XZ	; ImVector<stbrp_rect>::ImVector<stbrp_rect>
	npad	1
; Line 2626
	mov	rax, QWORD PTR user_rects$[rbp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	?resize@?$ImVector@Ustbrp_rect@@@@QEAAXH@Z ; ImVector<stbrp_rect>::resize
; Line 2627
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	?size_in_bytes@?$ImVector@Ustbrp_rect@@@@QEBAHXZ ; ImVector<stbrp_rect>::size_in_bytes
	cdqe
	mov	QWORD PTR tv88[rbp], rax
	mov	rdi, QWORD PTR pack_rects$[rbp+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv88[rbp]
	rep stosb
; Line 2628
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN4@ImFontAtla
$LN2@ImFontAtla:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN4@ImFontAtla:
	mov	rax, QWORD PTR user_rects$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$4[rbp], eax
	jge	SHORT $LN3@ImFontAtla
; Line 2630
	mov	edx, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR user_rects$[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR tv135[rbp], ax
	mov	edx, DWORD PTR i$4[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	ecx, WORD PTR tv135[rbp]
	mov	WORD PTR [rax+4], cx
; Line 2631
	mov	edx, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR user_rects$[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR tv145[rbp], ax
	mov	edx, DWORD PTR i$4[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	ecx, WORD PTR tv145[rbp]
	mov	WORD PTR [rax+6], cx
; Line 2632
	jmp	SHORT $LN2@ImFontAtla
$LN3@ImFontAtla:
; Line 2633
	xor	edx, edx
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	mov	r8d, DWORD PTR pack_rects$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR pack_context$[rbp]
	call	stbrp_pack_rects
; Line 2634
	mov	DWORD PTR i$5[rbp], 0
	jmp	SHORT $LN7@ImFontAtla
$LN5@ImFontAtla:
	mov	eax, DWORD PTR i$5[rbp]
	inc	eax
	mov	DWORD PTR i$5[rbp], eax
$LN7@ImFontAtla:
	mov	eax, DWORD PTR pack_rects$[rbp]
	cmp	DWORD PTR i$5[rbp], eax
	jge	$LN6@ImFontAtla
; Line 2635
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	cmp	DWORD PTR [rax+12], 0
	je	$LN8@ImFontAtla
; Line 2637
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	eax, WORD PTR [rax+8]
	mov	WORD PTR tv168[rbp], ax
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR user_rects$[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	movzx	ecx, WORD PTR tv168[rbp]
	mov	WORD PTR [rax+4], cx
; Line 2638
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	eax, WORD PTR [rax+10]
	mov	WORD PTR tv178[rbp], ax
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR user_rects$[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	movzx	ecx, WORD PTR tv178[rbp]
	mov	WORD PTR [rax+6], cx
; Line 2639
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	eax, WORD PTR [rax+4]
	mov	DWORD PTR tv183[rbp], eax
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR user_rects$[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	ecx, DWORD PTR tv183[rbp]
	cmp	ecx, eax
	jne	SHORT $LN12@ImFontAtla
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	eax, WORD PTR [rax+6]
	mov	DWORD PTR tv194[rbp], eax
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR user_rects$[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	movzx	eax, WORD PTR [rax+2]
	mov	ecx, DWORD PTR tv194[rbp]
	cmp	ecx, eax
	je	SHORT $LN13@ImFontAtla
$LN12@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4JA
	add	eax, 21
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1KE@CBAIECN@?$AAp?$AAa?$AAc?$AAk?$AA_?$AAr?$AAe?$AAc?$AAt?$AAs?$AA?$FL?$AAi?$AA?$FN?$AA?4?$AAw@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@ImFontAtla:
; Line 2640
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	eax, WORD PTR [rax+10]
	mov	DWORD PTR tv212[rbp], eax
	mov	edx, DWORD PTR i$5[rbp]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??A?$ImVector@Ustbrp_rect@@@@QEAAAEAUstbrp_rect@@H@Z ; ImVector<stbrp_rect>::operator[]
	movzx	eax, WORD PTR [rax+6]
	mov	ecx, DWORD PTR tv212[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv225[rbp], eax
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR tv223[rbp], eax
	mov	edx, DWORD PTR tv225[rbp]
	mov	ecx, DWORD PTR tv223[rbp]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rcx+52], eax
$LN8@ImFontAtla:
; Line 2641
	jmp	$LN5@ImFontAtla
$LN6@ImFontAtla:
; Line 2642
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ	; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z ENDP ; ImFontAtlasBuildPackCustomRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
pack_context$ = 8
user_rects$ = 40
pack_rects$ = 72
i$4 = 116
i$5 = 148
tv212 = 356
tv183 = 356
tv178 = 356
tv168 = 356
tv145 = 356
tv135 = 356
tv225 = 360
tv194 = 360
tv88 = 360
tv223 = 364
__$ArrayPad$ = 368
atlas$ = 416
stbrp_context_opaque$ = 424
?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA PROC ; `ImFontAtlasBuildPackCustomRects'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR pack_rects$[rbp]
	call	??1?$ImVector@Ustbrp_rect@@@@QEAA@XZ	; ImVector<stbrp_rect>::~ImVector<stbrp_rect>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??ImFontAtlasBuildPackCustomRects@@YAXPEAUImFontAtlas@@PEAX@Z@4HA ENDP ; `ImFontAtlasBuildPackCustomRects'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z
_TEXT	SEGMENT
atlas$ = 224
font$ = 232
font_config$ = 240
ascent$ = 248
descent$ = 256
?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z PROC ; ImFontAtlasBuildSetupFont, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2603
$LN4:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2604
	mov	rax, QWORD PTR font_config$[rbp]
	movzx	eax, BYTE PTR [rax+72]
	test	eax, eax
	jne	SHORT $LN2@ImFontAtla
; Line 2606
	mov	rcx, QWORD PTR font$[rbp]
	call	?ClearOutputData@ImFont@@QEAAXXZ	; ImFont::ClearOutputData
; Line 2607
	mov	rax, QWORD PTR font$[rbp]
	mov	rcx, QWORD PTR font_config$[rbp]
	movss	xmm0, DWORD PTR [rcx+20]
	movss	DWORD PTR [rax+20], xmm0
; Line 2608
	mov	rax, QWORD PTR font$[rbp]
	mov	rcx, QWORD PTR font_config$[rbp]
	mov	QWORD PTR [rax+72], rcx
; Line 2609
	xor	eax, eax
	mov	rcx, QWORD PTR font$[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 2610
	mov	rax, QWORD PTR font$[rbp]
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	QWORD PTR [rax+64], rcx
; Line 2611
	mov	rax, QWORD PTR font$[rbp]
	movss	xmm0, DWORD PTR ascent$[rbp]
	movss	DWORD PTR [rax+96], xmm0
; Line 2612
	mov	rax, QWORD PTR font$[rbp]
	movss	xmm0, DWORD PTR descent$[rbp]
	movss	DWORD PTR [rax+100], xmm0
$LN2@ImFontAtla:
; Line 2614
	mov	rax, QWORD PTR font$[rbp]
	movzx	eax, WORD PTR [rax+80]
	inc	ax
	mov	rcx, QWORD PTR font$[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 2615
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildSetupFont@@YAXPEAUImFontAtlas@@PEAUImFont@@PEAUImFontConfig@@MM@Z ENDP ; ImFontAtlasBuildSetupFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z
_TEXT	SEGMENT
atlas$ = 224
?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z PROC	; ImFontAtlasBuildInit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2757
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2759
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	DWORD PTR [rax+1156], 0
	jge	SHORT $LN2@ImFontAtla
; Line 2761
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN3@ImFontAtla
; Line 2762
	mov	r8d, 27
	mov	edx, 217				; 000000d9H
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ; ImFontAtlas::AddCustomRectRegular
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rcx+1156], eax
	jmp	SHORT $LN4@ImFontAtla
$LN3@ImFontAtla:
; Line 2764
	mov	r8d, 2
	mov	edx, 2
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ; ImFontAtlas::AddCustomRectRegular
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rcx+1156], eax
$LN4@ImFontAtla:
$LN2@ImFontAtla:
; Line 2769
	mov	rax, QWORD PTR atlas$[rbp]
	cmp	DWORD PTR [rax+1160], 0
	jge	SHORT $LN5@ImFontAtla
; Line 2771
	mov	rax, QWORD PTR atlas$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN6@ImFontAtla
; Line 2772
	mov	r8d, 64					; 00000040H
	mov	edx, 65					; 00000041H
	mov	rcx, QWORD PTR atlas$[rbp]
	call	?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ; ImFontAtlas::AddCustomRectRegular
	mov	rcx, QWORD PTR atlas$[rbp]
	mov	DWORD PTR [rcx+1160], eax
$LN6@ImFontAtla:
$LN5@ImFontAtla:
; Line 2774
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasBuildInit@@YAXPEAUImFontAtlas@@@Z ENDP	; ImFontAtlasBuildInit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ
_TEXT	SEGMENT
?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ PROC ; ImFontAtlasGetBuilderForStbTruetype, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2594
$LN3:
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2596
	lea	rax, OFFSET FLAT:?ImFontAtlasBuildWithStbTruetype@@YA_NPEAUImFontAtlas@@@Z ; ImFontAtlasBuildWithStbTruetype
	mov	QWORD PTR ?io@?1??ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ@4U2@A, rax
; Line 2597
	lea	rax, OFFSET FLAT:?io@?1??ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ@4U2@A
; Line 2598
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ ENDP ; ImFontAtlasGetBuilderForStbTruetype
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z
_TEXT	SEGMENT
size$ = 8
uv_size$ = 40
scale$ = 72
vert_start$ = 104
vert_end$ = 136
min$8 = 168
max$9 = 200
vertex$10 = 232
vertex$11 = 264
$T12 = 676
$T13 = 708
$T14 = 740
$T15 = 772
$T16 = 804
$T17 = 840
$T18 = 868
$T19 = 900
$T20 = 932
$T21 = 964
tv74 = 980
tv158 = 984
tv78 = 984
__$ArrayPad$ = 992
draw_list$ = 1040
vert_start_idx$ = 1048
vert_end_idx$ = 1056
a$ = 1064
b$ = 1072
uv_a$ = 1080
uv_b$ = 1088
clamp$ = 1096
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z PROC ; ImGui::ShadeVertsLinearUV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1882
$LN17:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1048				; 00000418H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 158				; 0000009eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1080]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1883
	mov	r8, QWORD PTR a$[rbp]
	mov	rdx, QWORD PTR b$[rbp]
	lea	rcx, QWORD PTR size$[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 1884
	mov	r8, QWORD PTR uv_a$[rbp]
	mov	rdx, QWORD PTR uv_b$[rbp]
	lea	rcx, QWORD PTR uv_size$[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 1885
	movss	xmm0, DWORD PTR size$[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN16@ShadeVerts
	je	SHORT $LN11@ShadeVerts
$LN16@ShadeVerts:
	movss	xmm0, DWORD PTR uv_size$[rbp+4]
	divss	xmm0, DWORD PTR size$[rbp+4]
	movss	DWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN12@ShadeVerts
$LN11@ShadeVerts:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv74[rbp], xmm0
$LN12@ShadeVerts:
	movss	xmm0, DWORD PTR size$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN15@ShadeVerts
	je	SHORT $LN13@ShadeVerts
$LN15@ShadeVerts:
	movss	xmm0, DWORD PTR uv_size$[rbp]
	divss	xmm0, DWORD PTR size$[rbp]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN14@ShadeVerts
$LN13@ShadeVerts:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv78[rbp], xmm0
$LN14@ShadeVerts:
	movss	xmm2, DWORD PTR tv74[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	lea	rcx, QWORD PTR scale$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 1889
	movsxd	rax, DWORD PTR vert_start_idx$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR draw_list$[rbp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR vert_start$[rbp], rax
; Line 1890
	movsxd	rax, DWORD PTR vert_end_idx$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR draw_list$[rbp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR vert_end$[rbp], rax
; Line 1891
	movzx	eax, BYTE PTR clamp$[rbp]
	test	eax, eax
	je	$LN8@ShadeVerts
; Line 1893
	mov	r8, QWORD PTR uv_b$[rbp]
	mov	rdx, QWORD PTR uv_a$[rbp]
	lea	rcx, QWORD PTR min$8[rbp]
	call	?ImMin@@YA?AUImVec2@@AEBU1@0@Z		; ImMin
; Line 1894
	mov	r8, QWORD PTR uv_b$[rbp]
	mov	rdx, QWORD PTR uv_a$[rbp]
	lea	rcx, QWORD PTR max$9[rbp]
	call	?ImMax@@YA?AUImVec2@@AEBU1@0@Z		; ImMax
; Line 1895
	mov	rax, QWORD PTR vert_start$[rbp]
	mov	QWORD PTR vertex$10[rbp], rax
	jmp	SHORT $LN4@ShadeVerts
$LN2@ShadeVerts:
	mov	rax, QWORD PTR vertex$10[rbp]
	add	rax, 20
	mov	QWORD PTR vertex$10[rbp], rax
$LN4@ShadeVerts:
	mov	rax, QWORD PTR vert_end$[rbp]
	cmp	QWORD PTR vertex$10[rbp], rax
	jae	$LN3@ShadeVerts
; Line 1896
	mov	rax, QWORD PTR max$9[rbp]
	mov	QWORD PTR $T17[rbp], rax
	mov	rax, QWORD PTR vertex$10[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR vertex$10[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, QWORD PTR a$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	lea	r8, QWORD PTR scale$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rbp]
	call	?ImMul@@YA?AUImVec2@@AEBU1@0@Z		; ImMul
	mov	r8, rax
	mov	rdx, QWORD PTR uv_a$[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv158[rbp], rax
	mov	r9, QWORD PTR $T17[rbp]
	lea	r8, QWORD PTR min$8[rbp]
	mov	rdx, QWORD PTR tv158[rbp]
	lea	rcx, QWORD PTR $T16[rbp]
	call	?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z	; ImClamp
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR vertex$10[rbp]
	mov	QWORD PTR [rcx+8], rax
	jmp	$LN2@ShadeVerts
$LN3@ShadeVerts:
; Line 1897
	jmp	$LN9@ShadeVerts
$LN8@ShadeVerts:
; Line 1900
	mov	rax, QWORD PTR vert_start$[rbp]
	mov	QWORD PTR vertex$11[rbp], rax
	jmp	SHORT $LN7@ShadeVerts
$LN5@ShadeVerts:
	mov	rax, QWORD PTR vertex$11[rbp]
	add	rax, 20
	mov	QWORD PTR vertex$11[rbp], rax
$LN7@ShadeVerts:
	mov	rax, QWORD PTR vert_end$[rbp]
	cmp	QWORD PTR vertex$11[rbp], rax
	jae	SHORT $LN6@ShadeVerts
; Line 1901
	mov	rax, QWORD PTR vertex$11[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR vertex$11[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, QWORD PTR a$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	lea	r8, QWORD PTR scale$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T20[rbp]
	call	?ImMul@@YA?AUImVec2@@AEBU1@0@Z		; ImMul
	mov	r8, rax
	mov	rdx, QWORD PTR uv_a$[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR vertex$11[rbp]
	mov	QWORD PTR [rcx+8], rax
	jmp	$LN5@ShadeVerts
$LN6@ShadeVerts:
$LN9@ShadeVerts:
; Line 1903
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1016]
	pop	rdi
	pop	rbp
	ret	0
?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z ENDP ; ImGui::ShadeVertsLinearUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z
_TEXT	SEGMENT
gradient_extent$ = 8
gradient_inv_length2$ = 36
vert_start$ = 72
vert_end$ = 104
col0_r$ = 132
col0_g$ = 164
col0_b$ = 196
col_delta_r$ = 228
col_delta_g$ = 260
col_delta_b$ = 292
vert$4 = 328
d$5 = 356
t$6 = 388
r$7 = 420
g$8 = 452
b$9 = 484
$T10 = 900
__$ArrayPad$ = 920
draw_list$ = 960
vert_start_idx$ = 968
vert_end_idx$ = 976
gradient_p0$ = 984
gradient_p1$ = 992
col0$ = 1000
col1$ = 1008
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z PROC ; ImGui::ShadeVertsLinearColorGradientKeepAlpha, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1858
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 968				; 000003c8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 138				; 0000008aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1000]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1859
	lea	r8, QWORD PTR gradient_p0$[rbp]
	lea	rdx, QWORD PTR gradient_p1$[rbp]
	lea	rcx, QWORD PTR gradient_extent$[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
; Line 1860
	lea	rcx, QWORD PTR gradient_extent$[rbp]
	call	?ImLengthSqr@@YAMAEBUImVec2@@@Z		; ImLengthSqr
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR gradient_inv_length2$[rbp], xmm0
; Line 1861
	movsxd	rax, DWORD PTR vert_start_idx$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR draw_list$[rbp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR vert_start$[rbp], rax
; Line 1862
	movsxd	rax, DWORD PTR vert_end_idx$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR draw_list$[rbp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR vert_end$[rbp], rax
; Line 1863
	mov	eax, DWORD PTR col0$[rbp]
	and	eax, 255				; 000000ffH
	mov	DWORD PTR col0_r$[rbp], eax
; Line 1864
	mov	eax, DWORD PTR col0$[rbp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	DWORD PTR col0_g$[rbp], eax
; Line 1865
	mov	eax, DWORD PTR col0$[rbp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	DWORD PTR col0_b$[rbp], eax
; Line 1866
	mov	eax, DWORD PTR col1$[rbp]
	and	eax, 255				; 000000ffH
	sub	eax, DWORD PTR col0_r$[rbp]
	mov	DWORD PTR col_delta_r$[rbp], eax
; Line 1867
	mov	eax, DWORD PTR col1$[rbp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	sub	eax, DWORD PTR col0_g$[rbp]
	mov	DWORD PTR col_delta_g$[rbp], eax
; Line 1868
	mov	eax, DWORD PTR col1$[rbp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	sub	eax, DWORD PTR col0_b$[rbp]
	mov	DWORD PTR col_delta_b$[rbp], eax
; Line 1869
	mov	rax, QWORD PTR vert_start$[rbp]
	mov	QWORD PTR vert$4[rbp], rax
	jmp	SHORT $LN4@ShadeVerts
$LN2@ShadeVerts:
	mov	rax, QWORD PTR vert$4[rbp]
	add	rax, 20
	mov	QWORD PTR vert$4[rbp], rax
$LN4@ShadeVerts:
	mov	rax, QWORD PTR vert_end$[rbp]
	cmp	QWORD PTR vert$4[rbp], rax
	jae	$LN3@ShadeVerts
; Line 1871
	mov	rax, QWORD PTR vert$4[rbp]
	lea	r8, QWORD PTR gradient_p0$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	lea	rdx, QWORD PTR gradient_extent$[rbp]
	mov	rcx, rax
	call	?ImDot@@YAMAEBUImVec2@@0@Z		; ImDot
	movss	DWORD PTR d$5[rbp], xmm0
; Line 1872
	movss	xmm0, DWORD PTR d$5[rbp]
	mulss	xmm0, DWORD PTR gradient_inv_length2$[rbp]
	movss	xmm2, DWORD PTR __real@3f800000
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR t$6[rbp], xmm0
; Line 1873
	cvtsi2ss xmm0, DWORD PTR col0_r$[rbp]
	cvtsi2ss xmm1, DWORD PTR col_delta_r$[rbp]
	mulss	xmm1, DWORD PTR t$6[rbp]
	addss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR r$7[rbp], eax
; Line 1874
	cvtsi2ss xmm0, DWORD PTR col0_g$[rbp]
	cvtsi2ss xmm1, DWORD PTR col_delta_g$[rbp]
	mulss	xmm1, DWORD PTR t$6[rbp]
	addss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR g$8[rbp], eax
; Line 1875
	cvtsi2ss xmm0, DWORD PTR col0_b$[rbp]
	cvtsi2ss xmm1, DWORD PTR col_delta_b$[rbp]
	mulss	xmm1, DWORD PTR t$6[rbp]
	addss	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR b$9[rbp], eax
; Line 1876
	mov	eax, DWORD PTR g$8[rbp]
	shl	eax, 8
	mov	ecx, DWORD PTR r$7[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR b$9[rbp]
	shl	ecx, 16
	or	eax, ecx
	mov	rcx, QWORD PTR vert$4[rbp]
	mov	ecx, DWORD PTR [rcx+16]
	and	ecx, -16777216				; ff000000H
	or	eax, ecx
	mov	rcx, QWORD PTR vert$4[rbp]
	mov	DWORD PTR [rcx+16], eax
; Line 1877
	jmp	$LN2@ShadeVerts
$LN3@ShadeVerts:
; Line 1878
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+936]
	pop	rdi
	pop	rbp
	ret	0
?ShadeVertsLinearColorGradientKeepAlpha@ImGui@@YAXPEAUImDrawList@@HHUImVec2@@1II@Z ENDP ; ImGui::ShadeVertsLinearColorGradientKeepAlpha
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z
_TEXT	SEGMENT
fill_L$ = 4
fill_R$ = 36
fill_U$ = 68
fill_D$ = 100
$T1 = 516
$T2 = 548
$T3 = 580
$T4 = 612
$T5 = 644
$T6 = 676
$T7 = 708
$T8 = 740
$T9 = 772
$T10 = 804
$T11 = 836
$T12 = 868
$T13 = 900
$T14 = 932
$T15 = 964
$T16 = 996
tv230 = 1012
tv195 = 1012
tv160 = 1012
tv93 = 1012
tv87 = 1012
tv81 = 1012
tv75 = 1012
tv69 = 1012
tv379 = 1016
tv349 = 1016
tv319 = 1016
tv289 = 1016
tv233 = 1016
tv198 = 1016
tv163 = 1016
tv128 = 1016
tv377 = 1024
tv347 = 1024
tv317 = 1024
tv287 = 1024
tv259 = 1024
tv224 = 1024
tv189 = 1024
tv154 = 1024
tv257 = 1032
tv222 = 1032
tv187 = 1032
tv152 = 1032
draw_list$ = 1072
outer$ = 1080
inner$ = 1088
col$ = 1096
rounding$ = 1104
?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z PROC ; ImGui::RenderRectFilledWithHole, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3901
$LN35:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1096				; 00000448H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3902
	mov	rax, QWORD PTR inner$[rbp]
	mov	rcx, QWORD PTR outer$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN11@RenderRect
	mov	BYTE PTR tv69[rbp], 1
	jmp	SHORT $LN12@RenderRect
$LN11@RenderRect:
	mov	BYTE PTR tv69[rbp], 0
$LN12@RenderRect:
	movzx	eax, BYTE PTR tv69[rbp]
	mov	BYTE PTR fill_L$[rbp], al
; Line 3903
	mov	rax, QWORD PTR outer$[rbp]
	mov	rcx, QWORD PTR inner$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR [rcx+8]
	jbe	SHORT $LN13@RenderRect
	mov	BYTE PTR tv75[rbp], 1
	jmp	SHORT $LN14@RenderRect
$LN13@RenderRect:
	mov	BYTE PTR tv75[rbp], 0
$LN14@RenderRect:
	movzx	eax, BYTE PTR tv75[rbp]
	mov	BYTE PTR fill_R$[rbp], al
; Line 3904
	mov	rax, QWORD PTR inner$[rbp]
	mov	rcx, QWORD PTR outer$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN15@RenderRect
	mov	BYTE PTR tv81[rbp], 1
	jmp	SHORT $LN16@RenderRect
$LN15@RenderRect:
	mov	BYTE PTR tv81[rbp], 0
$LN16@RenderRect:
	movzx	eax, BYTE PTR tv81[rbp]
	mov	BYTE PTR fill_U$[rbp], al
; Line 3905
	mov	rax, QWORD PTR outer$[rbp]
	mov	rcx, QWORD PTR inner$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR [rcx+12]
	jbe	SHORT $LN17@RenderRect
	mov	BYTE PTR tv87[rbp], 1
	jmp	SHORT $LN18@RenderRect
$LN17@RenderRect:
	mov	BYTE PTR tv87[rbp], 0
$LN18@RenderRect:
	movzx	eax, BYTE PTR tv87[rbp]
	mov	BYTE PTR fill_D$[rbp], al
; Line 3906
	movzx	eax, BYTE PTR fill_L$[rbp]
	test	eax, eax
	je	$LN2@RenderRect
	movzx	eax, BYTE PTR fill_U$[rbp]
	test	eax, eax
	je	SHORT $LN19@RenderRect
	mov	DWORD PTR tv93[rbp], 0
	jmp	SHORT $LN20@RenderRect
$LN19@RenderRect:
	mov	DWORD PTR tv93[rbp], 16
$LN20@RenderRect:
	movzx	eax, BYTE PTR fill_D$[rbp]
	test	eax, eax
	je	SHORT $LN21@RenderRect
	mov	DWORD PTR tv128[rbp], 0
	jmp	SHORT $LN22@RenderRect
$LN21@RenderRect:
	mov	DWORD PTR tv128[rbp], 64		; 00000040H
$LN22@RenderRect:
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv154[rbp], rax
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv152[rbp], rax
	mov	eax, DWORD PTR tv128[rbp]
	mov	ecx, DWORD PTR tv93[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv154[rbp]
	mov	rdx, QWORD PTR tv152[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN2@RenderRect:
; Line 3907
	movzx	eax, BYTE PTR fill_R$[rbp]
	test	eax, eax
	je	$LN3@RenderRect
	movzx	eax, BYTE PTR fill_U$[rbp]
	test	eax, eax
	je	SHORT $LN23@RenderRect
	mov	DWORD PTR tv160[rbp], 0
	jmp	SHORT $LN24@RenderRect
$LN23@RenderRect:
	mov	DWORD PTR tv160[rbp], 32		; 00000020H
$LN24@RenderRect:
	movzx	eax, BYTE PTR fill_D$[rbp]
	test	eax, eax
	je	SHORT $LN25@RenderRect
	mov	DWORD PTR tv163[rbp], 0
	jmp	SHORT $LN26@RenderRect
$LN25@RenderRect:
	mov	DWORD PTR tv163[rbp], 128		; 00000080H
$LN26@RenderRect:
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv189[rbp], rax
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv187[rbp], rax
	mov	eax, DWORD PTR tv163[rbp]
	mov	ecx, DWORD PTR tv160[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv189[rbp]
	mov	rdx, QWORD PTR tv187[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN3@RenderRect:
; Line 3908
	movzx	eax, BYTE PTR fill_U$[rbp]
	test	eax, eax
	je	$LN4@RenderRect
	movzx	eax, BYTE PTR fill_L$[rbp]
	test	eax, eax
	je	SHORT $LN27@RenderRect
	mov	DWORD PTR tv195[rbp], 0
	jmp	SHORT $LN28@RenderRect
$LN27@RenderRect:
	mov	DWORD PTR tv195[rbp], 16
$LN28@RenderRect:
	movzx	eax, BYTE PTR fill_R$[rbp]
	test	eax, eax
	je	SHORT $LN29@RenderRect
	mov	DWORD PTR tv198[rbp], 0
	jmp	SHORT $LN30@RenderRect
$LN29@RenderRect:
	mov	DWORD PTR tv198[rbp], 32		; 00000020H
$LN30@RenderRect:
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv224[rbp], rax
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv222[rbp], rax
	mov	eax, DWORD PTR tv198[rbp]
	mov	ecx, DWORD PTR tv195[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv224[rbp]
	mov	rdx, QWORD PTR tv222[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN4@RenderRect:
; Line 3909
	movzx	eax, BYTE PTR fill_D$[rbp]
	test	eax, eax
	je	$LN5@RenderRect
	movzx	eax, BYTE PTR fill_L$[rbp]
	test	eax, eax
	je	SHORT $LN31@RenderRect
	mov	DWORD PTR tv230[rbp], 0
	jmp	SHORT $LN32@RenderRect
$LN31@RenderRect:
	mov	DWORD PTR tv230[rbp], 64		; 00000040H
$LN32@RenderRect:
	movzx	eax, BYTE PTR fill_R$[rbp]
	test	eax, eax
	je	SHORT $LN33@RenderRect
	mov	DWORD PTR tv233[rbp], 0
	jmp	SHORT $LN34@RenderRect
$LN33@RenderRect:
	mov	DWORD PTR tv233[rbp], 128		; 00000080H
$LN34@RenderRect:
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv259[rbp], rax
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv257[rbp], rax
	mov	eax, DWORD PTR tv233[rbp]
	mov	ecx, DWORD PTR tv230[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv259[rbp]
	mov	rdx, QWORD PTR tv257[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN5@RenderRect:
; Line 3910
	movzx	eax, BYTE PTR fill_L$[rbp]
	test	eax, eax
	je	$LN6@RenderRect
	movzx	eax, BYTE PTR fill_U$[rbp]
	test	eax, eax
	je	$LN6@RenderRect
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv289[rbp], rax
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv287[rbp], rax
	mov	DWORD PTR [rsp+40], 16
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv289[rbp]
	mov	rdx, QWORD PTR tv287[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN6@RenderRect:
; Line 3911
	movzx	eax, BYTE PTR fill_R$[rbp]
	test	eax, eax
	je	$LN7@RenderRect
	movzx	eax, BYTE PTR fill_U$[rbp]
	test	eax, eax
	je	$LN7@RenderRect
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv319[rbp], rax
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv317[rbp], rax
	mov	DWORD PTR [rsp+40], 32			; 00000020H
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv319[rbp]
	mov	rdx, QWORD PTR tv317[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN7@RenderRect:
; Line 3912
	movzx	eax, BYTE PTR fill_L$[rbp]
	test	eax, eax
	je	$LN8@RenderRect
	movzx	eax, BYTE PTR fill_D$[rbp]
	test	eax, eax
	je	$LN8@RenderRect
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv349[rbp], rax
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv347[rbp], rax
	mov	DWORD PTR [rsp+40], 64			; 00000040H
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv349[rbp]
	mov	rdx, QWORD PTR tv347[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN8@RenderRect:
; Line 3913
	movzx	eax, BYTE PTR fill_R$[rbp]
	test	eax, eax
	je	$LN9@RenderRect
	movzx	eax, BYTE PTR fill_D$[rbp]
	test	eax, eax
	je	$LN9@RenderRect
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR outer$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv379[rbp], rax
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm2, DWORD PTR [rax+12]
	mov	rax, QWORD PTR inner$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv377[rbp], rax
	mov	DWORD PTR [rsp+40], 128			; 00000080H
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR tv379[rbp]
	mov	rdx, QWORD PTR tv377[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN9@RenderRect:
; Line 3914
	lea	rsp, QWORD PTR [rbp+1048]
	pop	rdi
	pop	rbp
	ret	0
?RenderRectFilledWithHole@ImGui@@YAXPEAUImDrawList@@UImRect@@1IM@Z ENDP ; ImGui::RenderRectFilledWithHole
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z
_TEXT	SEGMENT
p0$ = 8
p1$ = 40
inv_rounding$ = 68
arc0_b$ = 100
arc0_e$ = 132
half_pi$ = 164
x0$ = 196
arc1_b$5 = 228
arc1_e$6 = 260
x1$7 = 292
$T8 = 708
$T9 = 740
$T10 = 772
$T11 = 804
$T12 = 836
$T13 = 868
$T14 = 900
$T15 = 932
$T16 = 964
$T17 = 996
$T18 = 1028
$T19 = 1060
tv336 = 1076
tv232 = 1076
tv219 = 1076
tv157 = 1076
tv134 = 1076
tv85 = 1076
tv338 = 1080
tv234 = 1080
tv221 = 1080
tv132 = 1080
tv83 = 1080
__$ArrayPad$ = 1088
draw_list$ = 1136
rect$ = 1144
col$ = 1152
x_start_norm$ = 1160
x_end_norm$ = 1168
rounding$ = 1176
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z PROC ; ImGui::RenderRectFilledRangeH, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3841
$LN15:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1160				; 00000488H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 182				; 000000b6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1192]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3842
	movss	xmm0, DWORD PTR x_end_norm$[rbp]
	ucomiss	xmm0, DWORD PTR x_start_norm$[rbp]
	jp	SHORT $LN2@RenderRect
	jne	SHORT $LN2@RenderRect
; Line 3843
	jmp	$LN1@RenderRect
$LN2@RenderRect:
; Line 3844
	movss	xmm0, DWORD PTR x_start_norm$[rbp]
	comiss	xmm0, DWORD PTR x_end_norm$[rbp]
	jbe	SHORT $LN3@RenderRect
; Line 3845
	lea	rdx, QWORD PTR x_end_norm$[rbp]
	lea	rcx, QWORD PTR x_start_norm$[rbp]
	call	??$ImSwap@M@@YAXAEAM0@Z			; ImSwap<float>
$LN3@RenderRect:
; Line 3847
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv85[rbp], xmm0
	movss	xmm2, DWORD PTR x_start_norm$[rbp]
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR tv83[rbp], xmm0
	movss	xmm2, DWORD PTR tv85[rbp]
	movss	xmm1, DWORD PTR tv83[rbp]
	lea	rcx, QWORD PTR p0$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 3848
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR tv134[rbp], xmm0
	movss	xmm2, DWORD PTR x_end_norm$[rbp]
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax]
	call	??$ImLerp@M@@YAMMMM@Z			; ImLerp<float>
	movss	DWORD PTR tv132[rbp], xmm0
	movss	xmm2, DWORD PTR tv134[rbp]
	movss	xmm1, DWORD PTR tv132[rbp]
	lea	rcx, QWORD PTR p1$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 3849
	movss	xmm0, DWORD PTR rounding$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@RenderRect
	jne	SHORT $LN4@RenderRect
; Line 3851
	mov	DWORD PTR [rsp+40], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	lea	r8, QWORD PTR p1$[rbp]
	lea	rdx, QWORD PTR p0$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 3852
	jmp	$LN1@RenderRect
$LN4@RenderRect:
; Line 3855
	mov	rax, QWORD PTR rect$[rbp]
	mov	rcx, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	mov	rax, QWORD PTR rect$[rbp]
	mov	rcx, QWORD PTR rect$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx]
	mulss	xmm1, DWORD PTR __real@3f000000
	movss	DWORD PTR tv157[rbp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv157[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR rounding$[rbp]
	xorps	xmm1, xmm1
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR rounding$[rbp], xmm0
; Line 3856
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR inv_rounding$[rbp], xmm0
; Line 3857
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR p0$[rbp]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR inv_rounding$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?ImAcos01@@YAMM@Z			; ImAcos01
	movss	DWORD PTR arc0_b$[rbp], xmm0
; Line 3858
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR p1$[rbp]
	subss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR inv_rounding$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?ImAcos01@@YAMM@Z			; ImAcos01
	movss	DWORD PTR arc0_e$[rbp], xmm0
; Line 3859
	movss	xmm0, DWORD PTR __real@3fc90fdb
	movss	DWORD PTR half_pi$[rbp], xmm0
; Line 3860
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR p0$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR x0$[rbp], xmm0
; Line 3861
	movss	xmm0, DWORD PTR arc0_b$[rbp]
	ucomiss	xmm0, DWORD PTR arc0_e$[rbp]
	jp	SHORT $LN5@RenderRect
	jne	SHORT $LN5@RenderRect
; Line 3863
	movss	xmm2, DWORD PTR p1$[rbp+4]
	movss	xmm1, DWORD PTR x0$[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3864
	movss	xmm2, DWORD PTR p0$[rbp+4]
	movss	xmm1, DWORD PTR x0$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3865
	jmp	$LN6@RenderRect
$LN5@RenderRect:
; Line 3866
	movss	xmm0, DWORD PTR arc0_b$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN7@RenderRect
	jne	$LN7@RenderRect
	movss	xmm0, DWORD PTR arc0_e$[rbp]
	ucomiss	xmm0, DWORD PTR __real@3fc90fdb
	jp	$LN7@RenderRect
	jne	$LN7@RenderRect
; Line 3868
	movss	xmm0, DWORD PTR p1$[rbp+4]
	subss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR x0$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 6
	mov	r9d, 3
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 3869
	movss	xmm0, DWORD PTR p0$[rbp+4]
	addss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR x0$[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 6
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 3870
	jmp	$LN8@RenderRect
$LN7@RenderRect:
; Line 3873
	movss	xmm0, DWORD PTR __real@40490fdb
	subss	xmm0, DWORD PTR arc0_b$[rbp]
	movss	DWORD PTR tv219[rbp], xmm0
	movss	xmm1, DWORD PTR __real@40490fdb
	subss	xmm1, DWORD PTR arc0_e$[rbp]
	movss	DWORD PTR tv221[rbp], xmm1
	movss	xmm2, DWORD PTR p1$[rbp+4]
	subss	xmm2, DWORD PTR rounding$[rbp]
	movss	xmm1, DWORD PTR x0$[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+40], 3
	movss	xmm0, DWORD PTR tv219[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm0, DWORD PTR tv221[rbp]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
; Line 3874
	movss	xmm0, DWORD PTR __real@40490fdb
	addss	xmm0, DWORD PTR arc0_e$[rbp]
	movss	DWORD PTR tv232[rbp], xmm0
	movss	xmm1, DWORD PTR __real@40490fdb
	addss	xmm1, DWORD PTR arc0_b$[rbp]
	movss	DWORD PTR tv234[rbp], xmm1
	movss	xmm2, DWORD PTR p0$[rbp+4]
	addss	xmm2, DWORD PTR rounding$[rbp]
	movss	xmm1, DWORD PTR x0$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+40], 3
	movss	xmm0, DWORD PTR tv232[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm0, DWORD PTR tv234[rbp]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN8@RenderRect:
$LN6@RenderRect:
; Line 3876
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR rounding$[rbp]
	movss	xmm1, DWORD PTR p1$[rbp]
	comiss	xmm1, xmm0
	jbe	$LN9@RenderRect
; Line 3878
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR p1$[rbp]
	mulss	xmm0, DWORD PTR inv_rounding$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?ImAcos01@@YAMM@Z			; ImAcos01
	movss	DWORD PTR arc1_b$5[rbp], xmm0
; Line 3879
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR p0$[rbp]
	mulss	xmm0, DWORD PTR inv_rounding$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	?ImAcos01@@YAMM@Z			; ImAcos01
	movss	DWORD PTR arc1_e$6[rbp], xmm0
; Line 3880
	mov	rax, QWORD PTR rect$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR p1$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR x1$7[rbp], xmm0
; Line 3881
	movss	xmm0, DWORD PTR arc1_b$5[rbp]
	ucomiss	xmm0, DWORD PTR arc1_e$6[rbp]
	jp	SHORT $LN10@RenderRect
	jne	SHORT $LN10@RenderRect
; Line 3883
	movss	xmm2, DWORD PTR p0$[rbp+4]
	movss	xmm1, DWORD PTR x1$7[rbp]
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3884
	movss	xmm2, DWORD PTR p1$[rbp+4]
	movss	xmm1, DWORD PTR x1$7[rbp]
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3885
	jmp	$LN11@RenderRect
$LN10@RenderRect:
; Line 3886
	movss	xmm0, DWORD PTR arc1_b$5[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	$LN12@RenderRect
	jne	$LN12@RenderRect
	movss	xmm0, DWORD PTR arc1_e$6[rbp]
	ucomiss	xmm0, DWORD PTR __real@3fc90fdb
	jp	$LN12@RenderRect
	jne	$LN12@RenderRect
; Line 3888
	movss	xmm0, DWORD PTR p0$[rbp+4]
	addss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR x1$7[rbp]
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, 9
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 3889
	movss	xmm0, DWORD PTR p1$[rbp+4]
	subss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR x1$7[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 3890
	jmp	$LN13@RenderRect
$LN12@RenderRect:
; Line 3893
	movss	xmm0, DWORD PTR arc1_b$5[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv336[rbp], xmm0
	movss	xmm1, DWORD PTR arc1_e$6[rbp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv338[rbp], xmm1
	movss	xmm2, DWORD PTR p0$[rbp+4]
	addss	xmm2, DWORD PTR rounding$[rbp]
	movss	xmm1, DWORD PTR x1$7[rbp]
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+40], 3
	movss	xmm0, DWORD PTR tv336[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm0, DWORD PTR tv338[rbp]
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
; Line 3894
	movss	xmm0, DWORD PTR p1$[rbp+4]
	subss	xmm0, DWORD PTR rounding$[rbp]
	movaps	xmm2, xmm0
	movss	xmm1, DWORD PTR x1$7[rbp]
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+40], 3
	movss	xmm0, DWORD PTR arc1_e$6[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR arc1_b$5[rbp]
	movss	xmm2, DWORD PTR rounding$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN13@RenderRect:
$LN11@RenderRect:
$LN9@RenderRect:
; Line 3897
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
$LN1@RenderRect:
; Line 3898
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1112]
	pop	rdi
	pop	rbp
	ret	0
?RenderRectFilledRangeH@ImGui@@YAXPEAUImDrawList@@AEBUImRect@@IMMM@Z ENDP ; ImGui::RenderRectFilledRangeH
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
$T5 = 324
$T6 = 356
$T7 = 388
$T8 = 420
tv64 = 436
tv180 = 440
tv159 = 440
tv138 = 440
tv85 = 440
tv178 = 448
tv157 = 448
tv136 = 448
tv83 = 448
draw_list$ = 496
pos$ = 504
half_sz$ = 512
direction$ = 520
col$ = 528
?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z PROC ; ImGui::RenderArrowPointingAt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3820
$LN11:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3821
	mov	eax, DWORD PTR direction$[rbp]
	mov	DWORD PTR tv64[rbp], eax
	cmp	DWORD PTR tv64[rbp], 0
	je	SHORT $LN4@RenderArro
	cmp	DWORD PTR tv64[rbp], 1
	je	$LN5@RenderArro
	cmp	DWORD PTR tv64[rbp], 2
	je	$LN6@RenderArro
	cmp	DWORD PTR tv64[rbp], 3
	je	$LN7@RenderArro
	jmp	$LN2@RenderArro
$LN4@RenderArro:
; Line 3823
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	addss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv85[rbp], rax
	movss	xmm0, DWORD PTR pos$[rbp+4]
	subss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	addss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv83[rbp], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR pos$[rbp]
	mov	r8, QWORD PTR tv85[rbp]
	mov	rdx, QWORD PTR tv83[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
	jmp	$LN1@RenderArro
$LN5@RenderArro:
; Line 3824
	movss	xmm0, DWORD PTR pos$[rbp+4]
	subss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	subss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv138[rbp], rax
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	subss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv136[rbp], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR pos$[rbp]
	mov	r8, QWORD PTR tv138[rbp]
	mov	rdx, QWORD PTR tv136[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
	jmp	$LN1@RenderArro
$LN6@RenderArro:
; Line 3825
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	subss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv159[rbp], rax
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	addss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv157[rbp], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR pos$[rbp]
	mov	r8, QWORD PTR tv159[rbp]
	mov	rdx, QWORD PTR tv157[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
	jmp	$LN1@RenderArro
$LN7@RenderArro:
; Line 3826
	movss	xmm0, DWORD PTR pos$[rbp+4]
	subss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	addss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv180[rbp], rax
	movss	xmm0, DWORD PTR pos$[rbp+4]
	subss	xmm0, DWORD PTR half_sz$[rbp+4]
	movss	xmm1, DWORD PTR pos$[rbp]
	subss	xmm1, DWORD PTR half_sz$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv178[rbp], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR pos$[rbp]
	mov	r8, QWORD PTR tv180[rbp]
	mov	rdx, QWORD PTR tv178[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
$LN2@RenderArro:
$LN1@RenderArro:
; Line 3829
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?RenderArrowPointingAt@ImGui@@YAXPEAUImDrawList@@UImVec2@@1HI@Z ENDP ; ImGui::RenderArrowPointingAt
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z
_TEXT	SEGMENT
font_atlas$ = 8
offset$ = 40
size$ = 72
uv$ = 104
tex_id$6 = 168
$T7 = 580
$T8 = 612
$T9 = 644
$T10 = 676
$T11 = 708
$T12 = 740
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
$T17 = 900
$T18 = 932
$T19 = 964
$T20 = 996
$T21 = 1028
$T22 = 1060
$T23 = 1092
$T24 = 1124
tv239 = 1144
tv220 = 1144
tv216 = 1144
tv173 = 1144
tv242 = 1152
tv223 = 1152
tv214 = 1152
tv171 = 1152
__$ArrayPad$ = 1160
draw_list$ = 1200
pos$ = 1208
scale$ = 1216
mouse_cursor$ = 1224
col_fill$ = 1232
col_border$ = 1240
col_shadow$ = 1248
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z PROC ; ImGui::RenderMouseCursor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3798
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1240				; 000004d8H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rdi, QWORD PTR [rsp+64]
	mov	ecx, 198				; 000000c6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1272]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3799
	cmp	DWORD PTR mouse_cursor$[rbp], -1
	jne	SHORT $LN2@RenderMous
; Line 3800
	jmp	$LN1@RenderMous
$LN2@RenderMous:
; Line 3801
	cmp	DWORD PTR mouse_cursor$[rbp], -1
	jle	SHORT $LN5@RenderMous
	cmp	DWORD PTR mouse_cursor$[rbp], 9
	jl	SHORT $LN6@RenderMous
$LN5@RenderMous:
	mov	eax, DWORD PTR ?__LINE__Var@?0??RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1JM@LKKCKIOL@?$AAm?$AAo?$AAu?$AAs?$AAe?$AA_?$AAc?$AAu?$AAr?$AAs?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@RenderMous:
; Line 3803
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR font_atlas$[rbp], rax
; Line 3804
	lea	rcx, QWORD PTR offset$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	lea	rcx, QWORD PTR size$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	lea	r9, OFFSET FLAT:??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
	mov	r8d, 4
	mov	edx, 8
	lea	rcx, QWORD PTR uv$[rbp]
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
; Line 3805
	mov	eax, 8
	imul	rax, rax, 2
	lea	rax, QWORD PTR uv$[rbp+rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR uv$[rbp+rcx]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR size$[rbp]
	lea	r8, QWORD PTR offset$[rbp]
	mov	edx, DWORD PTR mouse_cursor$[rbp]
	mov	rcx, QWORD PTR font_atlas$[rbp]
	call	?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z ; ImFontAtlas::GetMouseCursorTexData
	movzx	eax, al
	test	eax, eax
	je	$LN3@RenderMous
; Line 3807
	lea	rdx, QWORD PTR offset$[rbp]
	lea	rcx, QWORD PTR pos$[rbp]
	call	??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z	; operator-=
; Line 3808
	mov	rax, QWORD PTR font_atlas$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tex_id$6[rbp], rax
; Line 3809
	mov	rdx, QWORD PTR tex_id$6[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PushTextureID@ImDrawList@@QEAAXPEAX@Z	; ImDrawList::PushTextureID
; Line 3810
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	lea	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	movss	xmm2, DWORD PTR scale$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv173[rbp], rax
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR scale$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T12[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T13[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv171[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	lea	rax, QWORD PTR uv$[rbp+rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR uv$[rbp+rcx]
	mov	edx, DWORD PTR col_shadow$[rbp]
	mov	DWORD PTR [rsp+48], edx
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR tv173[rbp]
	mov	r8, QWORD PTR tv171[rbp]
	mov	rdx, QWORD PTR tex_id$6[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 3811
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	lea	r8, QWORD PTR size$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	movss	xmm2, DWORD PTR scale$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T17[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv216[rbp], rax
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR scale$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T20[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv214[rbp], rax
	mov	eax, 8
	imul	rax, rax, 3
	lea	rax, QWORD PTR uv$[rbp+rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR uv$[rbp+rcx]
	mov	edx, DWORD PTR col_shadow$[rbp]
	mov	DWORD PTR [rsp+48], edx
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR tv216[rbp]
	mov	r8, QWORD PTR tv214[rbp]
	mov	rdx, QWORD PTR tex_id$6[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 3812
	mov	eax, 8
	imul	rax, rax, 3
	lea	rax, QWORD PTR uv$[rbp+rax]
	mov	QWORD PTR tv220[rbp], rax
	mov	ecx, 8
	imul	rcx, rcx, 2
	lea	rcx, QWORD PTR uv$[rbp+rcx]
	mov	QWORD PTR tv223[rbp], rcx
	movss	xmm2, DWORD PTR scale$[rbp]
	lea	rdx, QWORD PTR size$[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T22[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	ecx, DWORD PTR col_border$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR tv220[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR tv223[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	lea	r8, QWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR tex_id$6[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 3813
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR uv$[rbp+rax]
	mov	QWORD PTR tv239[rbp], rax
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rcx, QWORD PTR uv$[rbp+rcx]
	mov	QWORD PTR tv242[rbp], rcx
	movss	xmm2, DWORD PTR scale$[rbp]
	lea	rdx, QWORD PTR size$[rbp]
	lea	rcx, QWORD PTR $T23[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T24[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	ecx, DWORD PTR col_fill$[rbp]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR tv239[rbp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR tv242[rbp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	lea	r8, QWORD PTR pos$[rbp]
	mov	rdx, QWORD PTR tex_id$6[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 3814
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PopTextureID@ImDrawList@@QEAAXXZ	; ImDrawList::PopTextureID
$LN3@RenderMous:
$LN1@RenderMous:
; Line 3816
	lea	rcx, QWORD PTR [rbp-64]
	lea	rdx, OFFSET FLAT:?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1176]
	pop	rdi
	pop	rbp
	ret	0
?RenderMouseCursor@ImGui@@YAXPEAUImDrawList@@UImVec2@@MHIII@Z ENDP ; ImGui::RenderMouseCursor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z
_TEXT	SEGMENT
thickness$ = 4
third$ = 36
bx$ = 68
by$ = 100
$T1 = 324
$T2 = 356
$T3 = 388
$T4 = 420
draw_list$ = 480
pos$ = 488
col$ = 496
sz$ = 504
?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z PROC ; ImGui::RenderCheckMark, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3783
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 488				; 000001e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3784
	movss	xmm0, DWORD PTR sz$[rbp]
	divss	xmm0, DWORD PTR __real@40a00000
	movss	xmm1, DWORD PTR __real@3f800000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR thickness$[rbp], xmm0
; Line 3785
	movss	xmm0, DWORD PTR thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR sz$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sz$[rbp], xmm0
; Line 3786
	movss	xmm0, DWORD PTR thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR thickness$[rbp]
	mulss	xmm1, DWORD PTR __real@3e800000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	lea	rcx, QWORD PTR pos$[rbp]
	call	??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z	; operator+=
; Line 3788
	movss	xmm0, DWORD PTR sz$[rbp]
	divss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR third$[rbp], xmm0
; Line 3789
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR third$[rbp]
	movss	DWORD PTR bx$[rbp], xmm0
; Line 3790
	movss	xmm0, DWORD PTR pos$[rbp+4]
	addss	xmm0, DWORD PTR sz$[rbp]
	movss	xmm1, DWORD PTR third$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	subss	xmm0, xmm1
	movss	DWORD PTR by$[rbp], xmm0
; Line 3791
	movss	xmm0, DWORD PTR by$[rbp]
	subss	xmm0, DWORD PTR third$[rbp]
	movss	xmm1, DWORD PTR bx$[rbp]
	subss	xmm1, DWORD PTR third$[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3792
	movss	xmm2, DWORD PTR by$[rbp]
	movss	xmm1, DWORD PTR bx$[rbp]
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3793
	movss	xmm0, DWORD PTR third$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR by$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR third$[rbp]
	mulss	xmm1, DWORD PTR __real@40000000
	movss	xmm2, DWORD PTR bx$[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 3794
	movss	xmm3, DWORD PTR thickness$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
; Line 3795
	lea	rsp, QWORD PTR [rbp+456]
	pop	rdi
	pop	rbp
	ret	0
?RenderCheckMark@ImGui@@YAXPEAUImDrawList@@UImVec2@@IM@Z ENDP ; ImGui::RenderCheckMark
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z
_TEXT	SEGMENT
draw_list$ = 224
pos$ = 232
col$ = 240
?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z PROC ; ImGui::RenderBullet, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3778
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3779
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movss	xmm0, DWORD PTR [rax+16]
	mulss	xmm0, DWORD PTR __real@3e4ccccd
	mov	DWORD PTR [rsp+32], 8
	mov	r9d, DWORD PTR col$[rbp]
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
; Line 3780
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?RenderBullet@ImGui@@YAXPEAUImDrawList@@UImVec2@@I@Z ENDP ; ImGui::RenderBullet
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z
_TEXT	SEGMENT
h$ = 4
r$ = 36
center$ = 72
a$ = 104
b$ = 136
c$ = 168
$T7 = 580
$T8 = 612
$T9 = 644
$T10 = 676
$T11 = 708
$T12 = 740
$T13 = 772
$T14 = 804
$T15 = 836
$T16 = 868
$T17 = 900
$T18 = 932
$T19 = 964
$T20 = 996
$T21 = 1028
$T22 = 1060
tv82 = 1076
tv203 = 1080
tv201 = 1088
tv199 = 1096
__$ArrayPad$ = 1104
draw_list$ = 1152
pos$ = 1160
col$ = 1168
dir$ = 1176
scale$ = 1184
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z PROC ; ImGui::RenderArrow, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3747
$LN15:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1176				; 00000498H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 186				; 000000baH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1208]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3748
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movss	xmm0, DWORD PTR [rax+16]
	mulss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR h$[rbp], xmm0
; Line 3749
	movss	xmm0, DWORD PTR h$[rbp]
	mulss	xmm0, DWORD PTR __real@3ecccccd
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	DWORD PTR r$[rbp], xmm0
; Line 3750
	movss	xmm0, DWORD PTR h$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR h$[rbp]
	mulss	xmm1, DWORD PTR __real@3f000000
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR center$[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
; Line 3752
	lea	rcx, QWORD PTR a$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	lea	rcx, QWORD PTR b$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	lea	rcx, QWORD PTR c$[rbp]
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
; Line 3753
	mov	eax, DWORD PTR dir$[rbp]
	mov	DWORD PTR tv82[rbp], eax
	mov	eax, DWORD PTR tv82[rbp]
	inc	eax
	mov	DWORD PTR tv82[rbp], eax
	cmp	DWORD PTR tv82[rbp], 5
	ja	$LN2@RenderArro
	movsxd	rax, DWORD PTR tv82[rbp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN14@RenderArro[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@RenderArro:
$LN5@RenderArro:
; Line 3757
	cmp	DWORD PTR dir$[rbp], 2
	jne	SHORT $LN6@RenderArro
	movss	xmm0, DWORD PTR r$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR r$[rbp], xmm0
$LN6@RenderArro:
; Line 3758
	movss	xmm2, DWORD PTR __real@3f400000
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR r$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T9[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR a$[rbp], rax
; Line 3759
	movss	xmm2, DWORD PTR __real@bf400000
	movss	xmm1, DWORD PTR __real@bf5db22d
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR r$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR b$[rbp], rax
; Line 3760
	movss	xmm2, DWORD PTR __real@bf400000
	movss	xmm1, DWORD PTR __real@3f5db22d
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR r$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T13[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rbp], rax
; Line 3761
	jmp	$LN2@RenderArro
$LN7@RenderArro:
$LN8@RenderArro:
; Line 3764
	cmp	DWORD PTR dir$[rbp], 0
	jne	SHORT $LN9@RenderArro
	movss	xmm0, DWORD PTR r$[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR r$[rbp], xmm0
$LN9@RenderArro:
; Line 3765
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR __real@3f400000
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR r$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR a$[rbp], rax
; Line 3766
	movss	xmm2, DWORD PTR __real@3f5db22d
	movss	xmm1, DWORD PTR __real@bf400000
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR r$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR b$[rbp], rax
; Line 3767
	movss	xmm2, DWORD PTR __real@bf5db22d
	movss	xmm1, DWORD PTR __real@bf400000
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movss	xmm2, DWORD PTR r$[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T19[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rbp], rax
; Line 3768
	jmp	SHORT $LN2@RenderArro
$LN10@RenderArro:
$LN11@RenderArro:
; Line 3771
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@RenderArro
	mov	eax, DWORD PTR ?__LINE__Var@?0??RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z@4JA
	add	eax, 24
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN13@RenderArro:
$LN2@RenderArro:
; Line 3774
	lea	r8, QWORD PTR c$[rbp]
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T20[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv203[rbp], rax
	lea	r8, QWORD PTR b$[rbp]
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T21[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv201[rbp], rax
	lea	r8, QWORD PTR a$[rbp]
	lea	rdx, QWORD PTR center$[rbp]
	lea	rcx, QWORD PTR $T22[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv199[rbp], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv203[rbp]
	mov	r8, QWORD PTR tv201[rbp]
	mov	rdx, QWORD PTR tv199[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
; Line 3775
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1128]
	pop	rdi
	pop	rbp
	ret	0
	npad	1
$LN14@RenderArro:
	DD	$LN10@RenderArro
	DD	$LN7@RenderArro
	DD	$LN8@RenderArro
	DD	$LN4@RenderArro
	DD	$LN5@RenderArro
	DD	$LN11@RenderArro
?RenderArrow@ImGui@@YAXPEAUImDrawList@@UImVec2@@IHM@Z ENDP ; ImGui::RenderArrow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z
_TEXT	SEGMENT
col_bg1$1 = 4
col_bg2$2 = 36
yi$3 = 68
y$4 = 100
y1$5 = 132
y2$6 = 164
x$7 = 196
x1$8 = 228
x2$9 = 260
cell_flags$10 = 292
$T11 = 516
$T12 = 548
tv160 = 564
tv178 = 568
tv176 = 576
draw_list$ = 624
p_min$ = 632
p_max$ = 640
col$ = 648
grid_step$ = 656
grid_off$ = 664
rounding$ = 672
flags$ = 680
?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z PROC ; ImGui::RenderColorRectWithAlphaCheckerboard, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3921
$LN22:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 648				; 00000288H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3922
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 496				; 000001f0H
	test	eax, eax
	jne	SHORT $LN8@RenderColo
; Line 3923
	mov	DWORD PTR flags$[rbp], 240		; 000000f0H
$LN8@RenderColo:
; Line 3924
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	shr	eax, 24
	cmp	eax, 255				; 000000ffH
	jae	$LN9@RenderColo
; Line 3926
	mov	edx, DWORD PTR col$[rbp]
	mov	ecx, -3355444				; ffccccccH
	call	?ImAlphaBlendColors@@YAIII@Z		; ImAlphaBlendColors
	mov	ecx, eax
	call	?GetColorU32@ImGui@@YAII@Z		; ImGui::GetColorU32
	mov	DWORD PTR col_bg1$1[rbp], eax
; Line 3927
	mov	edx, DWORD PTR col$[rbp]
	mov	ecx, -8355712				; ff808080H
	call	?ImAlphaBlendColors@@YAIII@Z		; ImAlphaBlendColors
	mov	ecx, eax
	call	?GetColorU32@ImGui@@YAII@Z		; ImGui::GetColorU32
	mov	DWORD PTR col_bg2$2[rbp], eax
; Line 3928
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col_bg1$1[rbp]
	lea	r8, QWORD PTR p_max$[rbp]
	lea	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 3930
	mov	DWORD PTR yi$3[rbp], 0
; Line 3931
	movss	xmm0, DWORD PTR p_min$[rbp+4]
	addss	xmm0, DWORD PTR grid_off$[rbp+4]
	movss	DWORD PTR y$4[rbp], xmm0
	jmp	SHORT $LN4@RenderColo
$LN2@RenderColo:
	movss	xmm0, DWORD PTR y$4[rbp]
	addss	xmm0, DWORD PTR grid_step$[rbp]
	movss	DWORD PTR y$4[rbp], xmm0
	mov	eax, DWORD PTR yi$3[rbp]
	inc	eax
	mov	DWORD PTR yi$3[rbp], eax
$LN4@RenderColo:
	movss	xmm0, DWORD PTR p_max$[rbp+4]
	comiss	xmm0, DWORD PTR y$4[rbp]
	jbe	$LN3@RenderColo
; Line 3933
	movss	xmm2, DWORD PTR p_max$[rbp+4]
	movss	xmm1, DWORD PTR p_min$[rbp+4]
	movss	xmm0, DWORD PTR y$4[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR y1$5[rbp], xmm0
	movss	xmm0, DWORD PTR y$4[rbp]
	addss	xmm0, DWORD PTR grid_step$[rbp]
	movss	xmm1, DWORD PTR p_max$[rbp+4]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR y2$6[rbp], xmm0
; Line 3934
	movss	xmm0, DWORD PTR y1$5[rbp]
	comiss	xmm0, DWORD PTR y2$6[rbp]
	jb	SHORT $LN11@RenderColo
; Line 3935
	jmp	$LN2@RenderColo
$LN11@RenderColo:
; Line 3936
	movss	xmm0, DWORD PTR p_min$[rbp]
	addss	xmm0, DWORD PTR grid_off$[rbp]
	mov	eax, DWORD PTR yi$3[rbp]
	and	eax, 1
	cvtsi2ss xmm1, eax
	mulss	xmm1, DWORD PTR grid_step$[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR x$7[rbp], xmm0
	jmp	SHORT $LN7@RenderColo
$LN5@RenderColo:
	movss	xmm0, DWORD PTR grid_step$[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	movss	xmm1, DWORD PTR x$7[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x$7[rbp], xmm0
$LN7@RenderColo:
	movss	xmm0, DWORD PTR p_max$[rbp]
	comiss	xmm0, DWORD PTR x$7[rbp]
	jbe	$LN6@RenderColo
; Line 3938
	movss	xmm2, DWORD PTR p_max$[rbp]
	movss	xmm1, DWORD PTR p_min$[rbp]
	movss	xmm0, DWORD PTR x$7[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR x1$8[rbp], xmm0
	movss	xmm0, DWORD PTR x$7[rbp]
	addss	xmm0, DWORD PTR grid_step$[rbp]
	movss	xmm1, DWORD PTR p_max$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR x2$9[rbp], xmm0
; Line 3939
	movss	xmm0, DWORD PTR x1$8[rbp]
	comiss	xmm0, DWORD PTR x2$9[rbp]
	jb	SHORT $LN12@RenderColo
; Line 3940
	jmp	$LN5@RenderColo
$LN12@RenderColo:
; Line 3941
	mov	DWORD PTR cell_flags$10[rbp], 256	; 00000100H
; Line 3942
	movss	xmm0, DWORD PTR p_min$[rbp+4]
	comiss	xmm0, DWORD PTR y1$5[rbp]
	jb	SHORT $LN13@RenderColo
	movss	xmm0, DWORD PTR p_min$[rbp]
	comiss	xmm0, DWORD PTR x1$8[rbp]
	jb	SHORT $LN14@RenderColo
	mov	eax, DWORD PTR cell_flags$10[rbp]
	or	eax, 16
	mov	DWORD PTR cell_flags$10[rbp], eax
$LN14@RenderColo:
	movss	xmm0, DWORD PTR x2$9[rbp]
	comiss	xmm0, DWORD PTR p_max$[rbp]
	jb	SHORT $LN15@RenderColo
	mov	eax, DWORD PTR cell_flags$10[rbp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR cell_flags$10[rbp], eax
$LN15@RenderColo:
$LN13@RenderColo:
; Line 3943
	movss	xmm0, DWORD PTR y2$6[rbp]
	comiss	xmm0, DWORD PTR p_max$[rbp+4]
	jb	SHORT $LN16@RenderColo
	movss	xmm0, DWORD PTR p_min$[rbp]
	comiss	xmm0, DWORD PTR x1$8[rbp]
	jb	SHORT $LN17@RenderColo
	mov	eax, DWORD PTR cell_flags$10[rbp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR cell_flags$10[rbp], eax
$LN17@RenderColo:
	movss	xmm0, DWORD PTR x2$9[rbp]
	comiss	xmm0, DWORD PTR p_max$[rbp]
	jb	SHORT $LN18@RenderColo
	mov	eax, DWORD PTR cell_flags$10[rbp]
	bts	eax, 7
	mov	DWORD PTR cell_flags$10[rbp], eax
$LN18@RenderColo:
$LN16@RenderColo:
; Line 3946
	cmp	DWORD PTR flags$[rbp], 256		; 00000100H
	je	SHORT $LN20@RenderColo
	cmp	DWORD PTR cell_flags$10[rbp], 256	; 00000100H
	je	SHORT $LN20@RenderColo
	mov	eax, DWORD PTR flags$[rbp]
	mov	ecx, DWORD PTR cell_flags$10[rbp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv160[rbp], eax
	jmp	SHORT $LN21@RenderColo
$LN20@RenderColo:
	mov	DWORD PTR tv160[rbp], 256		; 00000100H
$LN21@RenderColo:
	mov	eax, DWORD PTR tv160[rbp]
	mov	DWORD PTR cell_flags$10[rbp], eax
; Line 3947
	movss	xmm2, DWORD PTR y2$6[rbp]
	movss	xmm1, DWORD PTR x2$9[rbp]
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv178[rbp], rax
	movss	xmm2, DWORD PTR y1$5[rbp]
	movss	xmm1, DWORD PTR x1$8[rbp]
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv176[rbp], rax
	mov	eax, DWORD PTR cell_flags$10[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col_bg2$2[rbp]
	mov	r8, QWORD PTR tv178[rbp]
	mov	rdx, QWORD PTR tv176[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
; Line 3948
	jmp	$LN5@RenderColo
$LN6@RenderColo:
; Line 3949
	jmp	$LN2@RenderColo
$LN3@RenderColo:
; Line 3950
	jmp	SHORT $LN10@RenderColo
$LN9@RenderColo:
; Line 3953
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR col$[rbp]
	lea	r8, QWORD PTR p_max$[rbp]
	lea	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
$LN10@RenderColo:
; Line 3955
	lea	rsp, QWORD PTR [rbp+600]
	pop	rdi
	pop	rbp
	ret	0
?RenderColorRectWithAlphaCheckerboard@ImGui@@YAXPEAUImDrawList@@UImVec2@@1IM1MH@Z ENDP ; ImGui::RenderColorRectWithAlphaCheckerboard
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@H@@QEAAXAEBH@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@H@@QEAAXAEBH@Z PROC		; ImVector<int>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@H@@QEBAHH@Z	; ImVector<int>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@H@@QEAAXH@Z		; ImVector<int>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+rax*4], edx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@H@@QEAAXAEBH@Z ENDP		; ImVector<int>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@H@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@H@@QEAAXH@Z PROC			; ImVector<int>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@H@@QEAAXH@Z ENDP			; ImVector<int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@H@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@H@@QEBAHH@Z PROC		; ImVector<int>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@H@@QEBAHH@Z ENDP		; ImVector<int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@H@@QEAAAEAHH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@H@@QEAAAEAHH@Z PROC			; ImVector<int>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@H@@QEAAAEAHH@Z ENDP			; ImVector<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@H@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@H@@QEAA@XZ PROC				; ImVector<int>::~ImVector<int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@H@@QEAA@XZ ENDP				; ImVector<int>::~ImVector<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z
_TEXT	SEGMENT
i$1 = 4
radius$2 = 36
tv133 = 244
this$ = 288
max_error$ = 296
?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z PROC ; ImDrawListSharedData::SetCircleTessellationMaxError, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 387
$LN10:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 388
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	ucomiss	xmm0, DWORD PTR max_error$[rbp]
	jp	SHORT $LN5@SetCircleT
	jne	SHORT $LN5@SetCircleT
; Line 389
	jmp	$LN1@SetCircleT
$LN5@SetCircleT:
; Line 391
	movss	xmm0, DWORD PTR max_error$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN7@SetCircleT
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@JCMOPDC@?$AAm?$AAa?$AAx?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?4?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@SetCircleT:
; Line 392
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR max_error$[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 393
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@SetCircleT
$LN2@SetCircleT:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@SetCircleT:
	cmp	DWORD PTR i$1[rbp], 64			; 00000040H
	jge	$LN3@SetCircleT
; Line 395
	cvtsi2ss xmm0, DWORD PTR i$1[rbp]
	movss	DWORD PTR radius$2[rbp], xmm0
; Line 396
	cmp	DWORD PTR i$1[rbp], 0
	jle	SHORT $LN8@SetCircleT
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	xmm1, DWORD PTR radius$2[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	divss	xmm0, DWORD PTR radius$2[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	acosf
	movss	xmm1, DWORD PTR __real@40490fdb
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	ceilf
	cvttss2si eax, xmm0
	inc	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	r8d, 512				; 00000200H
	mov	edx, 4
	mov	ecx, eax
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR tv133[rbp], eax
	jmp	SHORT $LN9@SetCircleT
$LN8@SetCircleT:
	mov	DWORD PTR tv133[rbp], 0
$LN9@SetCircleT:
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movzx	edx, BYTE PTR tv133[rbp]
	mov	BYTE PTR [rcx+rax+436], dl
; Line 397
	jmp	$LN2@SetCircleT
$LN3@SetCircleT:
; Line 398
	movss	xmm1, DWORD PTR __real@40490fdb
	movss	xmm0, DWORD PTR __real@42400000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR __real@40490fdb
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	cosf
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+24]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+432], xmm0
$LN1@SetCircleT:
; Line 399
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?SetCircleTessellationMaxError@ImDrawListSharedData@@QEAAXM@Z ENDP ; ImDrawListSharedData::SetCircleTessellationMaxError
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawListSharedData@@QEAA@XZ
_TEXT	SEGMENT
i$1 = 4
a$2 = 36
$T3 = 260
tv89 = 276
this$ = 320
??0ImDrawListSharedData@@QEAA@XZ PROC			; ImDrawListSharedData::ImDrawListSharedData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 376
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 28
	mov	rcx, rax
	call	??0ImVec4@@QEAA@XZ			; ImVec4::ImVec4
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 48					; 00000030H
	lea	r9, OFFSET FLAT:??0ImVec2@@QEAA@XZ	; ImVec2::ImVec2
	mov	r8d, 48					; 00000030H
	mov	edx, 8
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
; Line 377
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 512				; 00000200H
	rep stosb
; Line 378
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@ImDrawList
$LN2@ImDrawList:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@ImDrawList:
	cmp	DWORD PTR i$1[rbp], 48			; 00000030H
	jge	SHORT $LN3@ImDrawList
; Line 380
	cvtsi2ss xmm0, DWORD PTR i$1[rbp]
	mulss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR __real@40490fdb
	divss	xmm0, DWORD PTR __real@42400000
	movss	DWORD PTR a$2[rbp], xmm0
; Line 381
	movss	xmm0, DWORD PTR a$2[rbp]
	call	sinf
	movss	DWORD PTR tv89[rbp], xmm0
	movss	xmm0, DWORD PTR a$2[rbp]
	call	cosf
	movss	xmm1, DWORD PTR tv89[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR i$1[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rdx+rcx*8+48], rax
; Line 382
	jmp	SHORT $LN2@ImDrawList
$LN3@ImDrawList:
; Line 383
	movss	xmm1, DWORD PTR __real@40490fdb
	movss	xmm0, DWORD PTR __real@42400000
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	xmm1, DWORD PTR __real@40490fdb
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	cosf
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm1, DWORD PTR [rax+24]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR this$[rbp]
	movss	DWORD PTR [rax+432], xmm0
; Line 384
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawListSharedData@@QEAA@XZ ENDP			; ImDrawListSharedData::ImDrawListSharedData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImBitVector@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImBitVector@@QEAA@XZ PROC				; ImBitVector::~ImBitVector, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??1?$ImVector@I@@QEAA@XZ		; ImVector<unsigned int>::~ImVector<unsigned int>
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImBitVector@@QEAA@XZ ENDP				; ImBitVector::~ImBitVector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetBit@ImBitVector@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?SetBit@ImBitVector@@QEAAXH@Z PROC			; ImBitVector::SetBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 550
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 5
	cmp	DWORD PTR n$[rbp], eax
	jl	SHORT $LN3@SetBit
	mov	r8d, 550				; 00000226H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@SetBit:
	mov	edx, DWORD PTR n$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?ImBitArraySetBit@@YAXPEAIH@Z		; ImBitArraySetBit
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?SetBit@ImBitVector@@QEAAXH@Z ENDP			; ImBitVector::SetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?TestBit@ImBitVector@@QEBA_NH@Z
_TEXT	SEGMENT
this$ = 224
n$ = 232
?TestBit@ImBitVector@@QEBA_NH@Z PROC			; ImBitVector::TestBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 549
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 5
	cmp	DWORD PTR n$[rbp], eax
	jl	SHORT $LN3@TestBit
	mov	r8d, 549				; 00000225H
	lea	rdx, OFFSET FLAT:??_C@_1GO@IOCEAJPC@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DA@HCNHOFJN@?$AAn?$AA?5?$AA?$DM?$AA?5?$AA?$CI?$AAS?$AAt?$AAo?$AAr?$AAa?$AAg?$AAe?$AA?4?$AAS?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@TestBit:
	mov	edx, DWORD PTR n$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?ImBitArrayTestBit@@YA_NPEBIH@Z		; ImBitArrayTestBit
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?TestBit@ImBitVector@@QEBA_NH@Z ENDP			; ImBitVector::TestBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Clear@ImBitVector@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Clear@ImBitVector@@QEAAXXZ PROC			; ImBitVector::Clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 548
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?clear@?$ImVector@I@@QEAAXXZ		; ImVector<unsigned int>::clear
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Clear@ImBitVector@@QEAAXXZ ENDP			; ImBitVector::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Create@ImBitVector@@QEAAXH@Z
_TEXT	SEGMENT
tv76 = 192
tv70 = 192
this$ = 240
sz$ = 248
?Create@ImBitVector@@QEAAXH@Z PROC			; ImBitVector::Create, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 547
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv70[rbp], rax
	mov	eax, DWORD PTR sz$[rbp]
	add	eax, 31
	sar	eax, 5
	mov	edx, eax
	mov	rcx, QWORD PTR tv70[rbp]
	call	?resize@?$ImVector@I@@QEAAXH@Z		; ImVector<unsigned int>::resize
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	QWORD PTR tv76[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR [rcx+8]
	xor	eax, eax
	mov	rcx, QWORD PTR tv76[rbp]
	rep stosb
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?Create@ImBitVector@@QEAAXH@Z ENDP			; ImBitVector::Create
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBitArraySetBit@@YAXPEAIH@Z
_TEXT	SEGMENT
mask$ = 4
tv79 = 212
arr$ = 256
n$ = 264
?ImBitArraySetBit@@YAXPEAIH@Z PROC			; ImBitArraySetBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR n$[rbp]
	and	eax, 31
	mov	ecx, 1
	mov	DWORD PTR tv79[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv79[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	eax, DWORD PTR n$[rbp]
	sar	eax, 5
	cdqe
	mov	rcx, QWORD PTR arr$[rbp]
	mov	edx, DWORD PTR mask$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	or	eax, edx
	mov	ecx, DWORD PTR n$[rbp]
	sar	ecx, 5
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR arr$[rbp]
	mov	DWORD PTR [rdx+rcx*4], eax
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImBitArraySetBit@@YAXPEAIH@Z ENDP			; ImBitArraySetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBitArrayTestBit@@YA_NPEBIH@Z
_TEXT	SEGMENT
mask$ = 4
tv78 = 212
tv72 = 212
arr$ = 256
n$ = 264
?ImBitArrayTestBit@@YA_NPEBIH@Z PROC			; ImBitArrayTestBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 511
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR n$[rbp]
	and	eax, 31
	mov	ecx, 1
	mov	DWORD PTR tv78[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv78[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	eax, DWORD PTR n$[rbp]
	sar	eax, 5
	cdqe
	mov	rcx, QWORD PTR arr$[rbp]
	mov	edx, DWORD PTR mask$[rbp]
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	test	eax, eax
	je	SHORT $LN3@ImBitArray
	mov	DWORD PTR tv72[rbp], 1
	jmp	SHORT $LN4@ImBitArray
$LN3@ImBitArray:
	mov	DWORD PTR tv72[rbp], 0
$LN4@ImBitArray:
	movzx	eax, BYTE PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ImBitArrayTestBit@@YA_NPEBIH@Z ENDP			; ImBitArrayTestBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z
_TEXT	SEGMENT
u$ = 4
w1$ = 36
w2$ = 68
w3$ = 100
__$ReturnUdt$ = 352
p1$ = 360
p2$ = 368
p3$ = 376
t$ = 384
?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z PROC	; ImBezierQuadraticCalc, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1235
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1236
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR u$[rbp], xmm0
; Line 1237
	movss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR u$[rbp]
	movss	DWORD PTR w1$[rbp], xmm0
; Line 1238
	movss	xmm0, DWORD PTR __real@40000000
	mulss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR w2$[rbp], xmm0
; Line 1239
	movss	xmm0, DWORD PTR t$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR w3$[rbp], xmm0
; Line 1240
	mov	rax, QWORD PTR p1$[rbp]
	movss	xmm0, DWORD PTR w1$[rbp]
	mulss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm1, DWORD PTR w2$[rbp]
	mulss	xmm1, DWORD PTR [rax+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm1, DWORD PTR w3$[rbp]
	mulss	xmm1, DWORD PTR [rax+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p1$[rbp]
	movss	xmm1, DWORD PTR w1$[rbp]
	mulss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm2, DWORD PTR w2$[rbp]
	mulss	xmm2, DWORD PTR [rax]
	addss	xmm1, xmm2
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm2, DWORD PTR w3$[rbp]
	mulss	xmm2, DWORD PTR [rax]
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 1241
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z ENDP	; ImBezierQuadraticCalc
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z
_TEXT	SEGMENT
u$ = 4
w1$ = 36
w2$ = 68
w3$ = 100
w4$ = 132
__$ReturnUdt$ = 384
p1$ = 392
p2$ = 400
p3$ = 408
p4$ = 416
t$ = 424
?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z PROC	; ImBezierCubicCalc, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1225
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1226
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR u$[rbp], xmm0
; Line 1227
	movss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR u$[rbp]
	movss	DWORD PTR w1$[rbp], xmm0
; Line 1228
	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR w2$[rbp], xmm0
; Line 1229
	movss	xmm0, DWORD PTR __real@40400000
	mulss	xmm0, DWORD PTR u$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR w3$[rbp], xmm0
; Line 1230
	movss	xmm0, DWORD PTR t$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	mulss	xmm0, DWORD PTR t$[rbp]
	movss	DWORD PTR w4$[rbp], xmm0
; Line 1231
	mov	rax, QWORD PTR p1$[rbp]
	movss	xmm0, DWORD PTR w1$[rbp]
	mulss	xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm1, DWORD PTR w2$[rbp]
	mulss	xmm1, DWORD PTR [rax+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm1, DWORD PTR w3$[rbp]
	mulss	xmm1, DWORD PTR [rax+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p4$[rbp]
	movss	xmm1, DWORD PTR w4$[rbp]
	mulss	xmm1, DWORD PTR [rax+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR p1$[rbp]
	movss	xmm1, DWORD PTR w1$[rbp]
	mulss	xmm1, DWORD PTR [rax]
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm2, DWORD PTR w2$[rbp]
	mulss	xmm2, DWORD PTR [rax]
	addss	xmm1, xmm2
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm2, DWORD PTR w3$[rbp]
	mulss	xmm2, DWORD PTR [rax]
	addss	xmm1, xmm2
	mov	rax, QWORD PTR p4$[rbp]
	movss	xmm2, DWORD PTR w4$[rbp]
	mulss	xmm2, DWORD PTR [rax]
	addss	xmm1, xmm2
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 1232
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z ENDP	; ImBezierCubicCalc
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMul@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
?ImMul@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMul, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 437
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImMul@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMul
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMax@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMax@M@@YAMMM@Z PROC				; ImMax<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 413
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR lhs$[rbp]
	comiss	xmm0, DWORD PTR rhs$[rbp]
	jb	SHORT $LN3@ImMax
	movss	xmm0, DWORD PTR lhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	movss	xmm0, DWORD PTR rhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN4@ImMax:
	movss	xmm0, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMax@M@@YAMMM@Z ENDP				; ImMax<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??$ImMin@M@@YAMMM@Z
_TEXT	SEGMENT
tv65 = 192
lhs$ = 240
rhs$ = 248
??$ImMin@M@@YAMMM@Z PROC				; ImMin<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 412
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR rhs$[rbp]
	comiss	xmm0, DWORD PTR lhs$[rbp]
	jbe	SHORT $LN3@ImMin
	movss	xmm0, DWORD PTR lhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	movss	xmm0, DWORD PTR rhs$[rbp]
	movss	DWORD PTR tv65[rbp], xmm0
$LN4@ImMin:
	movss	xmm0, DWORD PTR tv65[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??$ImMin@M@@YAMMM@Z ENDP				; ImMin<float>
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImDot@@YAMAEBUImVec2@@0@Z
_TEXT	SEGMENT
a$ = 80
b$ = 88
?ImDot@@YAMAEBUImVec2@@0@Z PROC				; ImDot, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 434
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR b$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImDot@@YAMAEBUImVec2@@0@Z ENDP				; ImDot
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImFloorSigned@@YAMM@Z
_TEXT	SEGMENT
tv71 = 64
f$ = 96
?ImFloorSigned@@YAMM@Z PROC				; ImFloorSigned, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 431
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR f$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@ImFloorSig
	cvttss2si eax, DWORD PTR f$[rbp]
	cvtsi2ss xmm0, eax
	ucomiss	xmm0, DWORD PTR f$[rbp]
	jp	SHORT $LN5@ImFloorSig
	je	SHORT $LN3@ImFloorSig
$LN5@ImFloorSig:
	cvttss2si eax, DWORD PTR f$[rbp]
	dec	eax
	mov	DWORD PTR tv71[rbp], eax
	jmp	SHORT $LN4@ImFloorSig
$LN3@ImFloorSig:
	cvttss2si eax, DWORD PTR f$[rbp]
	mov	DWORD PTR tv71[rbp], eax
$LN4@ImFloorSig:
	cvtsi2ss xmm0, DWORD PTR tv71[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImFloorSigned@@YAMM@Z ENDP				; ImFloorSigned
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImFloor@@YAMM@Z
_TEXT	SEGMENT
f$ = 80
?ImFloor@@YAMM@Z PROC					; ImFloor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 430
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cvttss2si eax, DWORD PTR f$[rbp]
	cvtsi2ss xmm0, eax
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImFloor@@YAMM@Z ENDP					; ImFloor
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLengthSqr@@YAMAEBUImVec2@@@Z
_TEXT	SEGMENT
lhs$ = 80
?ImLengthSqr@@YAMAEBUImVec2@@@Z PROC			; ImLengthSqr, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 427
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImLengthSqr@@YAMAEBUImVec2@@@Z ENDP			; ImLengthSqr
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z
_TEXT	SEGMENT
tv92 = 64
__$ReturnUdt$ = 96
a$ = 104
b$ = 112
t$ = 120
?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z PROC			; ImLerp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 425
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 128				; 00000080H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR [rcx+12]
	mulss	xmm0, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	subss	xmm1, DWORD PTR [rcx+8]
	mulss	xmm1, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax+8]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	subss	xmm2, DWORD PTR [rcx+4]
	mulss	xmm2, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm3, DWORD PTR [rax+4]
	addss	xmm3, xmm2
	movaps	xmm2, xmm3
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm3, DWORD PTR [rax]
	subss	xmm3, DWORD PTR [rcx]
	mulss	xmm3, DWORD PTR t$[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm4, DWORD PTR [rax]
	addss	xmm4, xmm3
	movaps	xmm3, xmm4
	movss	DWORD PTR tv92[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv92[rbp]
	movaps	xmm1, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z ENDP			; ImLerp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z
_TEXT	SEGMENT
tv74 = 64
tv73 = 68
tv84 = 72
tv83 = 76
__$ReturnUdt$ = 96
v$ = 104
mn$ = 112
mx$ = 120
?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z PROC		; ImClamp, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 422
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR mn$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN5@ImClamp
	mov	rax, QWORD PTR mn$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv74[rbp], xmm0
	jmp	SHORT $LN6@ImClamp
$LN5@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR mx$[rbp+4]
	jbe	SHORT $LN3@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp+4]
	movss	DWORD PTR tv73[rbp], xmm0
	jmp	SHORT $LN4@ImClamp
$LN3@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv73[rbp], xmm0
$LN4@ImClamp:
	movss	xmm0, DWORD PTR tv73[rbp]
	movss	DWORD PTR tv74[rbp], xmm0
$LN6@ImClamp:
	mov	rax, QWORD PTR mn$[rbp]
	mov	rcx, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN9@ImClamp
	mov	rax, QWORD PTR mn$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv84[rbp], xmm0
	jmp	SHORT $LN10@ImClamp
$LN9@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR mx$[rbp]
	jbe	SHORT $LN7@ImClamp
	movss	xmm0, DWORD PTR mx$[rbp]
	movss	DWORD PTR tv83[rbp], xmm0
	jmp	SHORT $LN8@ImClamp
$LN7@ImClamp:
	mov	rax, QWORD PTR v$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv83[rbp], xmm0
$LN8@ImClamp:
	movss	xmm0, DWORD PTR tv83[rbp]
	movss	DWORD PTR tv84[rbp], xmm0
$LN10@ImClamp:
	movss	xmm2, DWORD PTR tv74[rbp]
	movss	xmm1, DWORD PTR tv84[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImClamp@@YA?AUImVec2@@AEBU1@0U1@@Z ENDP		; ImClamp
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMax@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMax@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMax, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 421
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jb	SHORT $LN3@ImMax
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
	jmp	SHORT $LN4@ImMax
$LN3@ImMax:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
$LN4@ImMax:
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jb	SHORT $LN5@ImMax
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN6@ImMax
$LN5@ImMax:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
$LN6@ImMax:
	movss	xmm2, DWORD PTR tv71[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImMax@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMax
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImMin@@YA?AUImVec2@@AEBU1@0@Z
_TEXT	SEGMENT
tv71 = 64
tv78 = 68
__$ReturnUdt$ = 96
lhs$ = 104
rhs$ = 112
?ImMin@@YA?AUImVec2@@AEBU1@0@Z PROC			; ImMin, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 420
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN3@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
	jmp	SHORT $LN4@ImMin
$LN3@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rbp], xmm0
$LN4@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR [rcx]
	jbe	SHORT $LN5@ImMin
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
	jmp	SHORT $LN6@ImMin
$LN5@ImMin:
	mov	rax, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv78[rbp], xmm0
$LN6@ImMin:
	movss	xmm2, DWORD PTR tv71[rbp]
	movss	xmm1, DWORD PTR tv78[rbp]
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImMin@@YA?AUImVec2@@AEBU1@0@Z ENDP			; ImMin
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImRsqrt@@YAMM@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 80
tv70 = 96
x$ = 128
?ImRsqrt@@YAMM@Z PROC					; ImRsqrt, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 404
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 144				; 00000090H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR x$[rbp]
	xorps	xmm1, xmm1
	movss	xmm1, xmm0
	movaps	xmm0, xmm1
	movaps	XMMWORD PTR $T2[rbp], xmm0
	movaps	xmm0, XMMWORD PTR $T2[rbp]
	rsqrtss	xmm0, xmm0
	movaps	XMMWORD PTR $T1[rbp], xmm0
	movaps	xmm0, XMMWORD PTR $T1[rbp]
	movss	DWORD PTR tv70[rbp], xmm0
	movss	xmm0, DWORD PTR tv70[rbp]
	lea	rsp, QWORD PTR [rbp+112]
	pop	rbp
	ret	0
?ImRsqrt@@YAMM@Z ENDP					; ImRsqrt
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImAbs@@YAMM@Z
_TEXT	SEGMENT
x$ = 80
?ImAbs@@YAMM@Z PROC					; ImAbs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 399
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR x$[rbp]
	call	fabsf
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
?ImAbs@@YAMM@Z ENDP					; ImAbs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ?ImAbs@@YAHH@Z
_TEXT	SEGMENT
tv66 = 64
x$ = 96
?ImAbs@@YAHH@Z PROC					; ImAbs, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 398
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	sub	rsp, 112				; 00000070H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR x$[rbp], 0
	jge	SHORT $LN3@ImAbs
	mov	eax, DWORD PTR x$[rbp]
	neg	eax
	mov	DWORD PTR tv66[rbp], eax
	jmp	SHORT $LN4@ImAbs
$LN3@ImAbs:
	mov	eax, DWORD PTR x$[rbp]
	mov	DWORD PTR tv66[rbp], eax
$LN4@ImAbs:
	mov	eax, DWORD PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+80]
	pop	rbp
	ret	0
?ImAbs@@YAHH@Z ENDP					; ImAbs
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z
_TEXT	SEGMENT
lhs$ = 80
rhs$ = 88
??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z PROC			; operator-=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 349
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??Z@YAAEAUImVec2@@AEAU0@AEBU0@@Z ENDP			; operator-=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z
_TEXT	SEGMENT
lhs$ = 80
rhs$ = 88
??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z PROC			; operator+=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 348
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR lhs$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??Y@YAAEAUImVec2@@AEAU0@AEBU0@@Z ENDP			; operator+=
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??D@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??D@YA?AUImVec2@@AEBU0@0@Z PROC				; operator*, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 344
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??D@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??G@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??G@YA?AUImVec2@@AEBU0@0@Z PROC				; operator-, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 343
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??G@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??H@YA?AUImVec2@@AEBU0@0@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??H@YA?AUImVec2@@AEBU0@0@Z PROC				; operator+, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 342
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR lhs$[rbp]
	mov	rcx, QWORD PTR rhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR [rcx]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??H@YA?AUImVec2@@AEBU0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??D@YA?AUImVec2@@AEBU0@M@Z
_TEXT	SEGMENT
__$ReturnUdt$ = 80
lhs$ = 88
rhs$ = 96
??D@YA?AUImVec2@@AEBU0@M@Z PROC				; operator*, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 340
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR rhs$[rbp]
	mov	rax, QWORD PTR lhs$[rbp]
	movss	xmm1, DWORD PTR [rax]
	mulss	xmm1, DWORD PTR rhs$[rbp]
	movaps	xmm2, xmm0
	mov	rcx, QWORD PTR __$ReturnUdt$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??D@YA?AUImVec2@@AEBU0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImCharIsBlankW@@YA_NI@Z
_TEXT	SEGMENT
tv67 = 192
c$ = 240
?ImCharIsBlankW@@YA_NI@Z PROC				; ImCharIsBlankW, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 324
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR c$[rbp], 32			; 00000020H
	je	SHORT $LN3@ImCharIsBl
	cmp	DWORD PTR c$[rbp], 9
	je	SHORT $LN3@ImCharIsBl
	cmp	DWORD PTR c$[rbp], 12288		; 00003000H
	je	SHORT $LN3@ImCharIsBl
	mov	DWORD PTR tv67[rbp], 0
	jmp	SHORT $LN4@ImCharIsBl
$LN3@ImCharIsBl:
	mov	DWORD PTR tv67[rbp], 1
$LN4@ImCharIsBl:
	movzx	eax, BYTE PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?ImCharIsBlankW@@YA_NI@Z ENDP				; ImCharIsBlankW
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImCharIsBlankA@@YA_ND@Z
_TEXT	SEGMENT
tv68 = 192
c$ = 240
?ImCharIsBlankA@@YA_ND@Z PROC				; ImCharIsBlankA, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 323
	mov	BYTE PTR [rsp+8], cl
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	movsx	eax, BYTE PTR c$[rbp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@ImCharIsBl
	movsx	eax, BYTE PTR c$[rbp]
	cmp	eax, 9
	je	SHORT $LN3@ImCharIsBl
	mov	DWORD PTR tv68[rbp], 0
	jmp	SHORT $LN4@ImCharIsBl
$LN3@ImCharIsBl:
	mov	DWORD PTR tv68[rbp], 1
$LN4@ImCharIsBl:
	movzx	eax, BYTE PTR tv68[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?ImCharIsBlankA@@YA_ND@Z ENDP				; ImCharIsBlankA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ImUpperPowerOfTwo@@YAHH@Z
_TEXT	SEGMENT
v$ = 224
?ImUpperPowerOfTwo@@YAHH@Z PROC				; ImUpperPowerOfTwo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_internal.h
; Line 302
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__D68E48C9_imgui_internal@h
	call	__CheckForDebuggerJustMyCode
	mov	eax, DWORD PTR v$[rbp]
	dec	eax
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	sar	eax, 1
	mov	ecx, DWORD PTR v$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	sar	eax, 2
	mov	ecx, DWORD PTR v$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	sar	eax, 4
	mov	ecx, DWORD PTR v$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	sar	eax, 8
	mov	ecx, DWORD PTR v$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	sar	eax, 16
	mov	ecx, DWORD PTR v$[rbp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	inc	eax
	mov	DWORD PTR v$[rbp], eax
	mov	eax, DWORD PTR v$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ImUpperPowerOfTwo@@YAHH@Z ENDP				; ImUpperPowerOfTwo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT fabsf
_TEXT	SEGMENT
_X$ = 224
fabsf	PROC						; COMDAT
; File C:\Program Files (x86)\Windows Kits\10\Include\10.0.22621.0\ucrt\corecrt_math.h
; Line 679
$LN3:
	movss	DWORD PTR [rsp+8], xmm0
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__BB16330F_corecrt_math@h
	call	__CheckForDebuggerJustMyCode
; Line 680
	cvtss2sd xmm0, DWORD PTR _X$[rbp]
	andps	xmm0, QWORD PTR __xmm@7fffffffffffffff7fffffffffffffff
	cvtsd2ss xmm0, xmm0
; Line 681
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
fabsf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GImFont@@QEAAPEAXI@Z
_TEXT	SEGMENT
this$ = 224
__flags$ = 232
??_GImFont@@QEAAPEAXI@Z PROC				; ImFont::`scalar deleting destructor', COMDAT
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1ImFont@@QEAA@XZ			; ImFont::~ImFont
	mov	eax, DWORD PTR __flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@scalar
	mov	edx, 112				; 00000070H
	mov	rcx, QWORD PTR this$[rbp]
	call	??3@YAXPEAX_K@Z				; operator delete
$LN2@scalar:
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??_GImFont@@QEAAPEAXI@Z ENDP				; ImFont::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z
_TEXT	SEGMENT
page_begin$ = 4
page_last$ = 36
page_n$1 = 68
this$ = 320
c_begin$ = 328
c_last$ = 336
?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z PROC		; ImFont::IsGlyphRangeUnused, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3222
$LN8:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3223
	xor	edx, edx
	mov	eax, DWORD PTR c_begin$[rbp]
	mov	ecx, 4096				; 00001000H
	div	ecx
	mov	DWORD PTR page_begin$[rbp], eax
; Line 3224
	xor	edx, edx
	mov	eax, DWORD PTR c_last$[rbp]
	mov	ecx, 4096				; 00001000H
	div	ecx
	mov	DWORD PTR page_last$[rbp], eax
; Line 3225
	mov	eax, DWORD PTR page_begin$[rbp]
	mov	DWORD PTR page_n$1[rbp], eax
	jmp	SHORT $LN4@IsGlyphRan
$LN2@IsGlyphRan:
	mov	eax, DWORD PTR page_n$1[rbp]
	inc	eax
	mov	DWORD PTR page_n$1[rbp], eax
$LN4@IsGlyphRan:
	mov	eax, DWORD PTR page_last$[rbp]
	cmp	DWORD PTR page_n$1[rbp], eax
	ja	SHORT $LN3@IsGlyphRan
; Line 3226
	mov	eax, DWORD PTR page_n$1[rbp]
	shr	eax, 3
	mov	eax, eax
	cmp	rax, 2
	jae	SHORT $LN5@IsGlyphRan
; Line 3227
	mov	eax, DWORD PTR page_n$1[rbp]
	shr	eax, 3
	mov	eax, eax
	mov	rcx, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rcx+rax+108]
	mov	ecx, DWORD PTR page_n$1[rbp]
	and	ecx, 7
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN6@IsGlyphRan
; Line 3228
	xor	al, al
	jmp	SHORT $LN1@IsGlyphRan
$LN6@IsGlyphRan:
$LN5@IsGlyphRan:
	jmp	SHORT $LN2@IsGlyphRan
$LN3@IsGlyphRan:
; Line 3229
	mov	al, 1
$LN1@IsGlyphRan:
; Line 3230
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?IsGlyphRangeUnused@ImFont@@QEAA_NII@Z ENDP		; ImFont::IsGlyphRangeUnused
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetGlyphVisible@ImFont@@QEAAXG_N@Z
_TEXT	SEGMENT
glyph$1 = 8
tv71 = 212
this$ = 256
c$ = 264
visible$ = 272
?SetGlyphVisible@ImFont@@QEAAXG_N@Z PROC		; ImFont::SetGlyphVisible, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3233
$LN6:
	mov	BYTE PTR [rsp+24], r8b
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3234
	movzx	edx, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
	mov	QWORD PTR glyph$1[rbp], rax
	cmp	QWORD PTR glyph$1[rbp], 0
	je	SHORT $LN2@SetGlyphVi
; Line 3235
	movzx	eax, BYTE PTR visible$[rbp]
	test	eax, eax
	je	SHORT $LN4@SetGlyphVi
	mov	DWORD PTR tv71[rbp], 1
	jmp	SHORT $LN5@SetGlyphVi
$LN4@SetGlyphVi:
	mov	DWORD PTR tv71[rbp], 0
$LN5@SetGlyphVi:
	mov	eax, DWORD PTR tv71[rbp]
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR glyph$1[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR glyph$1[rbp]
	mov	DWORD PTR [rcx], eax
$LN2@SetGlyphVi:
; Line 3236
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?SetGlyphVisible@ImFont@@QEAAXG_N@Z ENDP		; ImFont::SetGlyphVisible
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRemapChar@ImFont@@QEAAXGG_N@Z
_TEXT	SEGMENT
index_size$ = 4
tv154 = 212
tv139 = 212
tv146 = 216
tv131 = 216
this$ = 256
dst$ = 264
src$ = 272
overwrite_dst$ = 280
?AddRemapChar@ImFont@@QEAAXGG_N@Z PROC			; ImFont::AddRemapChar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3295
$LN10:
	mov	BYTE PTR [rsp+32], r9b
	mov	WORD PTR [rsp+24], r8w
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3296
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+24], 0
	jg	SHORT $LN5@AddRemapCh
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddRemapChar@ImFont@@QEAAXGG_N@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CK@OHOOGJPG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAL?$AAo?$AAo?$AAk?$AAu?$AAp?$AA?4?$AAS?$AAi?$AAz@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@AddRemapCh:
; Line 3297
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR index_size$[rbp], eax
; Line 3299
	movzx	eax, WORD PTR dst$[rbp]
	cmp	eax, DWORD PTR index_size$[rbp]
	jae	SHORT $LN2@AddRemapCh
	movzx	eax, WORD PTR dst$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	eax, WORD PTR [rcx+rax*2]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN2@AddRemapCh
	movzx	eax, BYTE PTR overwrite_dst$[rbp]
	test	eax, eax
	jne	SHORT $LN2@AddRemapCh
; Line 3300
	jmp	$LN1@AddRemapCh
$LN2@AddRemapCh:
; Line 3301
	movzx	eax, WORD PTR src$[rbp]
	cmp	eax, DWORD PTR index_size$[rbp]
	jb	SHORT $LN3@AddRemapCh
	movzx	eax, WORD PTR dst$[rbp]
	cmp	eax, DWORD PTR index_size$[rbp]
	jb	SHORT $LN3@AddRemapCh
; Line 3302
	jmp	$LN1@AddRemapCh
$LN3@AddRemapCh:
; Line 3304
	movzx	eax, WORD PTR dst$[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?GrowIndex@ImFont@@QEAAXH@Z		; ImFont::GrowIndex
; Line 3305
	movzx	eax, WORD PTR src$[rbp]
	cmp	eax, DWORD PTR index_size$[rbp]
	jae	SHORT $LN6@AddRemapCh
	movzx	eax, WORD PTR src$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR tv139[rbp], ax
	jmp	SHORT $LN7@AddRemapCh
$LN6@AddRemapCh:
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR tv139[rbp], ax
$LN7@AddRemapCh:
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	QWORD PTR tv131[rbp], rax
	movzx	eax, WORD PTR dst$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv131[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	ecx, WORD PTR tv139[rbp]
	mov	WORD PTR [rax], cx
; Line 3306
	movzx	eax, WORD PTR src$[rbp]
	cmp	eax, DWORD PTR index_size$[rbp]
	jae	SHORT $LN8@AddRemapCh
	movzx	eax, WORD PTR src$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv154[rbp], xmm0
	jmp	SHORT $LN9@AddRemapCh
$LN8@AddRemapCh:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv154[rbp], xmm0
$LN9@AddRemapCh:
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv146[rbp], rax
	movzx	eax, WORD PTR dst$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv146[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR tv154[rbp]
	movss	DWORD PTR [rax], xmm0
$LN1@AddRemapCh:
; Line 3307
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddRemapChar@ImFont@@QEAAXGG_N@Z ENDP			; ImFont::AddRemapChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z
_TEXT	SEGMENT
advance_x_original$1 = 4
char_off_x$2 = 36
glyph$ = 72
pad$ = 100
tv147 = 308
tv81 = 308
tv133 = 312
this$ = 352
cfg$ = 360
codepoint$ = 368
x0$ = 376
y0$ = 384
x1$ = 392
y1$ = 400
u0$ = 408
v0$ = 416
u1$ = 424
v1$ = 432
advance_x$ = 440
?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z PROC ; ImFont::AddGlyph, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3251
$LN13:
	movss	DWORD PTR [rsp+32], xmm3
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3252
	cmp	QWORD PTR cfg$[rbp], 0
	je	$LN2@AddGlyph
; Line 3255
	movss	xmm0, DWORD PTR advance_x$[rbp]
	movss	DWORD PTR advance_x_original$1[rbp], xmm0
; Line 3256
	mov	rax, QWORD PTR cfg$[rbp]
	movss	xmm2, DWORD PTR [rax+68]
	mov	rax, QWORD PTR cfg$[rbp]
	movss	xmm1, DWORD PTR [rax+64]
	movss	xmm0, DWORD PTR advance_x$[rbp]
	call	??$ImClamp@M@@YAMMMM@Z			; ImClamp<float>
	movss	DWORD PTR advance_x$[rbp], xmm0
; Line 3257
	movss	xmm0, DWORD PTR advance_x$[rbp]
	ucomiss	xmm0, DWORD PTR advance_x_original$1[rbp]
	jp	SHORT $LN12@AddGlyph
	je	$LN3@AddGlyph
$LN12@AddGlyph:
; Line 3259
	mov	rax, QWORD PTR cfg$[rbp]
	movzx	eax, BYTE PTR [rax+32]
	test	eax, eax
	je	SHORT $LN6@AddGlyph
	movss	xmm0, DWORD PTR advance_x$[rbp]
	subss	xmm0, DWORD PTR advance_x_original$1[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	call	?ImFloor@@YAMM@Z			; ImFloor
	movss	DWORD PTR tv81[rbp], xmm0
	jmp	SHORT $LN7@AddGlyph
$LN6@AddGlyph:
	movss	xmm0, DWORD PTR advance_x$[rbp]
	subss	xmm0, DWORD PTR advance_x_original$1[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv81[rbp], xmm0
$LN7@AddGlyph:
	movss	xmm0, DWORD PTR tv81[rbp]
	movss	DWORD PTR char_off_x$2[rbp], xmm0
; Line 3260
	movss	xmm0, DWORD PTR x0$[rbp]
	addss	xmm0, DWORD PTR char_off_x$2[rbp]
	movss	DWORD PTR x0$[rbp], xmm0
; Line 3261
	movss	xmm0, DWORD PTR x1$[rbp]
	addss	xmm0, DWORD PTR char_off_x$2[rbp]
	movss	DWORD PTR x1$[rbp], xmm0
$LN3@AddGlyph:
; Line 3265
	mov	rax, QWORD PTR cfg$[rbp]
	movzx	eax, BYTE PTR [rax+32]
	test	eax, eax
	je	SHORT $LN4@AddGlyph
; Line 3266
	movss	xmm0, DWORD PTR advance_x$[rbp]
	addss	xmm0, DWORD PTR __real@3f000000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	DWORD PTR advance_x$[rbp], xmm0
$LN4@AddGlyph:
; Line 3269
	mov	rax, QWORD PTR cfg$[rbp]
	movss	xmm0, DWORD PTR advance_x$[rbp]
	addss	xmm0, DWORD PTR [rax+36]
	movss	DWORD PTR advance_x$[rbp], xmm0
$LN2@AddGlyph:
; Line 3272
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv133[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv133[rbp]
	call	?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ; ImVector<ImFontGlyph>::resize
; Line 3273
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
	mov	QWORD PTR glyph$[rbp], rax
; Line 3274
	movzx	eax, WORD PTR codepoint$[rbp]
	and	eax, 1073741823				; 3fffffffH
	shl	eax, 2
	mov	rcx, QWORD PTR glyph$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, 3
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR glyph$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 3275
	movss	xmm0, DWORD PTR x0$[rbp]
	ucomiss	xmm0, DWORD PTR x1$[rbp]
	jp	SHORT $LN11@AddGlyph
	je	SHORT $LN8@AddGlyph
$LN11@AddGlyph:
	movss	xmm0, DWORD PTR y0$[rbp]
	ucomiss	xmm0, DWORD PTR y1$[rbp]
	jp	SHORT $LN10@AddGlyph
	je	SHORT $LN8@AddGlyph
$LN10@AddGlyph:
	mov	DWORD PTR tv147[rbp], 1
	jmp	SHORT $LN9@AddGlyph
$LN8@AddGlyph:
	mov	DWORD PTR tv147[rbp], 0
$LN9@AddGlyph:
	mov	eax, DWORD PTR tv147[rbp]
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR glyph$[rbp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR glyph$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 3276
	mov	rax, QWORD PTR glyph$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR glyph$[rbp]
	mov	DWORD PTR [rcx], eax
; Line 3277
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR x0$[rbp]
	movss	DWORD PTR [rax+8], xmm0
; Line 3278
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR y0$[rbp]
	movss	DWORD PTR [rax+12], xmm0
; Line 3279
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR x1$[rbp]
	movss	DWORD PTR [rax+16], xmm0
; Line 3280
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR y1$[rbp]
	movss	DWORD PTR [rax+20], xmm0
; Line 3281
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR u0$[rbp]
	movss	DWORD PTR [rax+24], xmm0
; Line 3282
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR v0$[rbp]
	movss	DWORD PTR [rax+28], xmm0
; Line 3283
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR u1$[rbp]
	movss	DWORD PTR [rax+32], xmm0
; Line 3284
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR v1$[rbp]
	movss	DWORD PTR [rax+36], xmm0
; Line 3285
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR advance_x$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 3289
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+64]
	cvtsi2ss xmm0, DWORD PTR [rax+20]
	addss	xmm0, DWORD PTR __real@3f7d70a4
	movss	DWORD PTR pad$[rbp], xmm0
; Line 3290
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+88], 1
; Line 3291
	mov	rax, QWORD PTR glyph$[rbp]
	mov	rcx, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR [rax+32]
	subss	xmm0, DWORD PTR [rcx+24]
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+64]
	cvtsi2ss xmm1, DWORD PTR [rax+48]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR pad$[rbp]
	cvttss2si eax, xmm0
	mov	rcx, QWORD PTR glyph$[rbp]
	mov	rdx, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR [rcx+36]
	subss	xmm0, DWORD PTR [rdx+28]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+64]
	cvtsi2ss xmm1, DWORD PTR [rcx+52]
	mulss	xmm0, xmm1
	addss	xmm0, DWORD PTR pad$[rbp]
	cvttss2si ecx, xmm0
	imul	eax, ecx
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+104]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+104], eax
; Line 3292
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?AddGlyph@ImFont@@QEAAXPEBUImFontConfig@@GMMMMMMMMM@Z ENDP ; ImFont::AddGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GrowIndex@ImFont@@QEAAXH@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
tv88 = 248
tv82 = 248
this$ = 288
new_size$ = 296
?GrowIndex@ImFont@@QEAAXH@Z PROC			; ImFont::GrowIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3239
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3240
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+24]
	cmp	DWORD PTR [rax], ecx
	je	SHORT $LN4@GrowIndex
	mov	eax, DWORD PTR ?__LINE__Var@?0??GrowIndex@ImFont@@QEAAXH@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EO@HLFAHELG@?$AAI?$AAn?$AAd?$AAe?$AAx?$AAA?$AAd?$AAv?$AAa?$AAn?$AAc?$AAe?$AAX?$AA?4?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@GrowIndex:
; Line 3241
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR new_size$[rbp], eax
	jg	SHORT $LN2@GrowIndex
; Line 3242
	jmp	SHORT $LN1@GrowIndex
$LN2@GrowIndex:
; Line 3243
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv82[rbp], rax
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR $T1[rbp], xmm0
	lea	r8, QWORD PTR $T1[rbp]
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR tv82[rbp]
	call	?resize@?$ImVector@M@@QEAAXHAEBM@Z	; ImVector<float>::resize
; Line 3244
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	QWORD PTR tv88[rbp], rax
	mov	eax, 65535				; 0000ffffH
	mov	WORD PTR $T2[rbp], ax
	lea	r8, QWORD PTR $T2[rbp]
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR tv88[rbp]
	call	?resize@?$ImVector@G@@QEAAXHAEBG@Z	; ImVector<unsigned short>::resize
$LN1@GrowIndex:
; Line 3245
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?GrowIndex@ImFont@@QEAAXH@Z ENDP			; ImFont::GrowIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearOutputData@ImFont@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearOutputData@ImFont@@QEAAXXZ PROC			; ImFont::ClearOutputData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3126
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3127
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+20], xmm0
; Line 3128
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+16], xmm0
; Line 3129
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ ; ImVector<ImFontGlyph>::clear
; Line 3130
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?clear@?$ImVector@M@@QEAAXXZ		; ImVector<float>::clear
; Line 3131
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	?clear@?$ImVector@G@@QEAAXXZ		; ImVector<unsigned short>::clear
; Line 3132
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+56], 0
; Line 3133
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+64], 0
; Line 3134
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+88], 1
; Line 3135
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+100], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+96], xmm0
; Line 3136
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+104], 0
; Line 3137
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearOutputData@ImFont@@QEAAXXZ ENDP			; ImFont::ClearOutputData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BuildLookupTable@ImFont@@QEAAXXZ
_TEXT	SEGMENT
max_codepoint$ = 4
i$6 = 36
i$7 = 68
codepoint$8 = 100
page_n$9 = 132
tab_glyph$10 = 168
ellipsis_chars$ = 196
dots_chars$ = 228
fallback_chars$ = 260
i$11 = 292
tv392 = 500
tv315 = 500
tv242 = 500
tv227 = 500
tv312 = 504
tv305 = 504
tv236 = 504
tv224 = 504
tv201 = 504
tv166 = 504
tv157 = 504
tv142 = 504
tv74 = 504
tv160 = 512
tv151 = 520
__$ArrayPad$ = 528
this$ = 576
?BuildLookupTable@ImFont@@QEAAXXZ PROC			; ImFont::BuildLookupTable, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3148
$LN20:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 576				; 00000240H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+616]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3149
	mov	DWORD PTR max_codepoint$[rbp], 0
; Line 3150
	mov	DWORD PTR i$6[rbp], 0
	jmp	SHORT $LN4@BuildLooku
$LN2@BuildLooku:
	mov	eax, DWORD PTR i$6[rbp]
	inc	eax
	mov	DWORD PTR i$6[rbp], eax
$LN4@BuildLooku:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+40]
	cmp	DWORD PTR i$6[rbp], eax
	je	SHORT $LN3@BuildLooku
; Line 3151
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv74[rbp], rax
	mov	edx, DWORD PTR i$6[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	call	??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1073741823				; 3fffffffH
	mov	edx, eax
	mov	ecx, DWORD PTR max_codepoint$[rbp]
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR max_codepoint$[rbp], eax
	jmp	SHORT $LN2@BuildLooku
$LN3@BuildLooku:
; Line 3154
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+40], 65535		; 0000ffffH
	jl	SHORT $LN19@BuildLooku
	mov	eax, DWORD PTR ?__LINE__Var@?0??BuildLookupTable@ImFont@@QEAAXXZ@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CK@FHBHHKB@?$AAG?$AAl?$AAy?$AAp?$AAh?$AAs?$AA?4?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN19@BuildLooku:
; Line 3155
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?clear@?$ImVector@M@@QEAAXXZ		; ImVector<float>::clear
; Line 3156
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	?clear@?$ImVector@G@@QEAAXXZ		; ImVector<unsigned short>::clear
; Line 3157
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+88], 0
; Line 3158
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 108				; 0000006cH
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 2
	rep stosb
; Line 3159
	mov	eax, DWORD PTR max_codepoint$[rbp]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?GrowIndex@ImFont@@QEAAXH@Z		; ImFont::GrowIndex
; Line 3160
	mov	DWORD PTR i$7[rbp], 0
	jmp	SHORT $LN7@BuildLooku
$LN5@BuildLooku:
	mov	eax, DWORD PTR i$7[rbp]
	inc	eax
	mov	DWORD PTR i$7[rbp], eax
$LN7@BuildLooku:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+40]
	cmp	DWORD PTR i$7[rbp], eax
	jge	$LN6@BuildLooku
; Line 3162
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv142[rbp], rax
	mov	edx, DWORD PTR i$7[rbp]
	mov	rcx, QWORD PTR tv142[rbp]
	call	??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1073741823				; 3fffffffH
	mov	DWORD PTR codepoint$8[rbp], eax
; Line 3163
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv157[rbp], rax
	mov	edx, DWORD PTR i$7[rbp]
	mov	rcx, QWORD PTR tv157[rbp]
	call	??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ; ImVector<ImFontGlyph>::operator[]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv160[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv151[rbp], rax
	mov	edx, DWORD PTR codepoint$8[rbp]
	mov	rcx, QWORD PTR tv151[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR tv160[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 3164
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	QWORD PTR tv166[rbp], rax
	mov	edx, DWORD PTR codepoint$8[rbp]
	mov	rcx, QWORD PTR tv166[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	ecx, WORD PTR i$7[rbp]
	mov	WORD PTR [rax], cx
; Line 3167
	mov	eax, DWORD PTR codepoint$8[rbp]
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12
	mov	DWORD PTR page_n$9[rbp], eax
; Line 3168
	mov	eax, DWORD PTR page_n$9[rbp]
	and	eax, 7
	mov	ecx, 1
	mov	DWORD PTR tv392[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv392[rbp]
	shl	eax, cl
	mov	ecx, DWORD PTR page_n$9[rbp]
	sar	ecx, 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rbp]
	movzx	ecx, BYTE PTR [rdx+rcx+108]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR page_n$9[rbp]
	sar	ecx, 3
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR this$[rbp]
	mov	BYTE PTR [rdx+rcx+108], al
; Line 3169
	jmp	$LN5@BuildLooku
$LN6@BuildLooku:
; Line 3173
	mov	dx, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
	test	rax, rax
	je	$LN11@BuildLooku
; Line 3175
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1073741823				; 3fffffffH
	cmp	eax, 9
	je	SHORT $LN12@BuildLooku
; Line 3176
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv201[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv201[rbp]
	call	?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ; ImVector<ImFontGlyph>::resize
$LN12@BuildLooku:
; Line 3177
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
	mov	QWORD PTR tab_glyph$10[rbp], rax
; Line 3178
	mov	dx, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
	mov	rdi, QWORD PTR tab_glyph$10[rbp]
	mov	rsi, rax
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 3179
	mov	rax, QWORD PTR tab_glyph$10[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 3
	or	eax, 36					; 00000024H
	mov	rcx, QWORD PTR tab_glyph$10[rbp]
	mov	DWORD PTR [rcx], eax
; Line 3180
	mov	rax, QWORD PTR tab_glyph$10[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR __real@40800000
	mov	rax, QWORD PTR tab_glyph$10[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 3181
	mov	rax, QWORD PTR tab_glyph$10[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv227[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv224[rbp], rax
	mov	rax, QWORD PTR tab_glyph$10[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1073741823				; 3fffffffH
	mov	edx, eax
	mov	rcx, QWORD PTR tv224[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR tv227[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 3182
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+40]
	dec	eax
	mov	WORD PTR tv242[rbp], ax
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	QWORD PTR tv236[rbp], rax
	mov	rax, QWORD PTR tab_glyph$10[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1073741823				; 3fffffffH
	mov	edx, eax
	mov	rcx, QWORD PTR tv236[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	ecx, WORD PTR tv242[rbp]
	mov	WORD PTR [rax], cx
$LN11@BuildLooku:
; Line 3186
	xor	r8d, r8d
	mov	dx, 32					; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	call	?SetGlyphVisible@ImFont@@QEAAXG_N@Z	; ImFont::SetGlyphVisible
; Line 3187
	xor	r8d, r8d
	mov	dx, 9
	mov	rcx, QWORD PTR this$[rbp]
	call	?SetGlyphVisible@ImFont@@QEAAXG_N@Z	; ImFont::SetGlyphVisible
; Line 3192
	mov	eax, 8230				; 00002026H
	mov	WORD PTR ellipsis_chars$[rbp], ax
	mov	eax, 133				; 00000085H
	mov	WORD PTR ellipsis_chars$[rbp+2], ax
; Line 3193
	mov	eax, 46					; 0000002eH
	mov	WORD PTR dots_chars$[rbp], ax
	mov	eax, 65294				; 0000ff0eH
	mov	WORD PTR dots_chars$[rbp+2], ax
; Line 3194
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, WORD PTR [rax+84]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN13@BuildLooku
; Line 3195
	mov	r8d, 2
	lea	rdx, QWORD PTR ellipsis_chars$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ; FindFirstExistingGlyph
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+84], ax
$LN13@BuildLooku:
; Line 3196
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, WORD PTR [rax+86]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN14@BuildLooku
; Line 3197
	mov	r8d, 2
	lea	rdx, QWORD PTR dots_chars$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ; FindFirstExistingGlyph
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+86], ax
$LN14@BuildLooku:
; Line 3200
	mov	eax, 65533				; 0000fffdH
	mov	WORD PTR fallback_chars$[rbp], ax
	mov	eax, 63					; 0000003fH
	mov	WORD PTR fallback_chars$[rbp+2], ax
	mov	eax, 32					; 00000020H
	mov	WORD PTR fallback_chars$[rbp+4], ax
; Line 3201
	mov	rax, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rax+82]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+56], rax
; Line 3202
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+56], 0
	jne	$LN15@BuildLooku
; Line 3204
	mov	r8d, 3
	lea	rdx, QWORD PTR fallback_chars$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindFirstExistingGlyph@@YAGPEAUImFont@@PEBGH@Z ; FindFirstExistingGlyph
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+82], ax
; Line 3205
	mov	rax, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rax+82]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+56], rax
; Line 3206
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+56], 0
	jne	SHORT $LN16@BuildLooku
; Line 3208
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ; ImVector<ImFontGlyph>::back
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+56], rax
; Line 3209
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	eax, DWORD PTR [rax]
	shr	eax, 2
	and	eax, 1073741823				; 3fffffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+82], ax
$LN16@BuildLooku:
$LN15@BuildLooku:
; Line 3213
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rcx+16], xmm0
; Line 3214
	mov	DWORD PTR i$11[rbp], 0
	jmp	SHORT $LN10@BuildLooku
$LN8@BuildLooku:
	mov	eax, DWORD PTR i$11[rbp]
	inc	eax
	mov	DWORD PTR i$11[rbp], eax
$LN10@BuildLooku:
	mov	eax, DWORD PTR max_codepoint$[rbp]
	inc	eax
	cmp	DWORD PTR i$11[rbp], eax
	jge	SHORT $LN9@BuildLooku
; Line 3215
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv305[rbp], rax
	mov	edx, DWORD PTR i$11[rbp]
	mov	rcx, QWORD PTR tv305[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN17@BuildLooku
; Line 3216
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv315[rbp], xmm0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv312[rbp], rax
	mov	edx, DWORD PTR i$11[rbp]
	mov	rcx, QWORD PTR tv312[rbp]
	call	??A?$ImVector@M@@QEAAAEAMH@Z		; ImVector<float>::operator[]
	movss	xmm0, DWORD PTR tv315[rbp]
	movss	DWORD PTR [rax], xmm0
$LN17@BuildLooku:
	jmp	$LN8@BuildLooku
$LN9@BuildLooku:
; Line 3217
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?BuildLookupTable@ImFont@@QEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+544]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?BuildLookupTable@ImFont@@QEAAXXZ ENDP			; ImFont::BuildLookupTable
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z
_TEXT	SEGMENT
x$ = 4
y$ = 36
scale$ = 68
line_height$ = 100
word_wrap_enabled$ = 132
word_wrap_eol$ = 168
s$ = 200
s_end$4 = 232
y_end$5 = 260
vtx_count_max$ = 292
idx_count_max$ = 324
idx_expected_size$ = 356
vtx_write$ = 392
idx_write$ = 424
vtx_current_idx$ = 452
col_untinted$ = 484
c$6 = 516
c$7 = 548
glyph$8 = 584
char_width$9 = 612
x1$10 = 644
x2$11 = 676
y1$12 = 708
y2$13 = 740
u1$14 = 772
v1$15 = 804
u2$16 = 836
v2$17 = 868
glyph_col$18 = 900
tv447 = 1300
tv315 = 1300
tv79 = 1300
tv467 = 1304
tv438 = 1304
tv144 = 1304
tv128 = 1304
tv468 = 1312
tv443 = 1312
tv445 = 1320
__$ArrayPad$ = 1328
this$ = 1376
draw_list$ = 1384
size$ = 1392
pos$ = 1400
col$ = 1408
clip_rect$ = 1416
text_begin$ = 1424
text_end$ = 1432
wrap_width$ = 1440
cpu_fine_clip$ = 1448
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z PROC ; ImFont::RenderText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3539
$LN54:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1400				; 00000578H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 242				; 000000f2H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1432]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3540
	cmp	QWORD PTR text_end$[rbp], 0
	jne	SHORT $LN10@RenderText
; Line 3541
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR tv467[rbp], rax
	mov	QWORD PTR tv468[rbp], -1
$LL53@RenderText:
	inc	QWORD PTR tv468[rbp]
	mov	rax, QWORD PTR tv467[rbp]
	mov	rcx, QWORD PTR tv468[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL53@RenderText
	mov	rax, QWORD PTR tv468[rbp]
	mov	rcx, QWORD PTR text_begin$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_end$[rbp], rax
$LN10@RenderText:
; Line 3544
	cvttss2si eax, DWORD PTR pos$[rbp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR pos$[rbp], xmm0
; Line 3545
	cvttss2si eax, DWORD PTR pos$[rbp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR pos$[rbp+4], xmm0
; Line 3546
	movss	xmm0, DWORD PTR pos$[rbp]
	movss	DWORD PTR x$[rbp], xmm0
; Line 3547
	movss	xmm0, DWORD PTR pos$[rbp+4]
	movss	DWORD PTR y$[rbp], xmm0
; Line 3548
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR y$[rbp]
	comiss	xmm0, DWORD PTR [rax+12]
	jbe	SHORT $LN11@RenderText
; Line 3549
	jmp	$LN1@RenderText
$LN11@RenderText:
; Line 3551
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	divss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR scale$[rbp], xmm0
; Line 3552
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	DWORD PTR line_height$[rbp], xmm0
; Line 3553
	movss	xmm0, DWORD PTR wrap_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN40@RenderText
	mov	BYTE PTR tv79[rbp], 1
	jmp	SHORT $LN41@RenderText
$LN40@RenderText:
	mov	BYTE PTR tv79[rbp], 0
$LN41@RenderText:
	movzx	eax, BYTE PTR tv79[rbp]
	mov	BYTE PTR word_wrap_enabled$[rbp], al
; Line 3554
	mov	QWORD PTR word_wrap_eol$[rbp], 0
; Line 3557
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR s$[rbp], rax
; Line 3558
	movss	xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR line_height$[rbp]
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	comiss	xmm1, xmm0
	jbe	$LN12@RenderText
	movzx	eax, BYTE PTR word_wrap_enabled$[rbp]
	test	eax, eax
	jne	$LN12@RenderText
$LN2@RenderText:
; Line 3559
	movss	xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR line_height$[rbp]
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	comiss	xmm1, xmm0
	jbe	$LN3@RenderText
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	SHORT $LN3@RenderText
; Line 3561
	mov	rax, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, 10
	mov	rcx, QWORD PTR s$[rbp]
	call	memchr
	mov	QWORD PTR s$[rbp], rax
; Line 3562
	cmp	QWORD PTR s$[rbp], 0
	je	SHORT $LN42@RenderText
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR tv128[rbp], rax
	jmp	SHORT $LN43@RenderText
$LN42@RenderText:
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR tv128[rbp], rax
$LN43@RenderText:
	mov	rax, QWORD PTR tv128[rbp]
	mov	QWORD PTR s$[rbp], rax
; Line 3563
	movss	xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR y$[rbp], xmm0
; Line 3564
	jmp	$LN2@RenderText
$LN3@RenderText:
$LN12@RenderText:
; Line 3568
	mov	rax, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cmp	rax, 10000				; 00002710H
	jle	$LN13@RenderText
	movzx	eax, BYTE PTR word_wrap_enabled$[rbp]
	test	eax, eax
	jne	$LN13@RenderText
; Line 3570
	mov	rax, QWORD PTR s$[rbp]
	mov	QWORD PTR s_end$4[rbp], rax
; Line 3571
	movss	xmm0, DWORD PTR y$[rbp]
	movss	DWORD PTR y_end$5[rbp], xmm0
$LN4@RenderText:
; Line 3572
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	comiss	xmm0, DWORD PTR y_end$5[rbp]
	jbe	$LN5@RenderText
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s_end$4[rbp], rax
	jae	$LN5@RenderText
; Line 3574
	mov	rax, QWORD PTR s_end$4[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, 10
	mov	rcx, QWORD PTR s_end$4[rbp]
	call	memchr
	mov	QWORD PTR s_end$4[rbp], rax
; Line 3575
	cmp	QWORD PTR s_end$4[rbp], 0
	je	SHORT $LN44@RenderText
	mov	rax, QWORD PTR s_end$4[rbp]
	inc	rax
	mov	QWORD PTR tv144[rbp], rax
	jmp	SHORT $LN45@RenderText
$LN44@RenderText:
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR tv144[rbp], rax
$LN45@RenderText:
	mov	rax, QWORD PTR tv144[rbp]
	mov	QWORD PTR s_end$4[rbp], rax
; Line 3576
	movss	xmm0, DWORD PTR y_end$5[rbp]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR y_end$5[rbp], xmm0
; Line 3577
	jmp	$LN4@RenderText
$LN5@RenderText:
; Line 3578
	mov	rax, QWORD PTR s_end$4[rbp]
	mov	QWORD PTR text_end$[rbp], rax
$LN13@RenderText:
; Line 3580
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jne	SHORT $LN14@RenderText
; Line 3581
	jmp	$LN1@RenderText
$LN14@RenderText:
; Line 3584
	mov	rax, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	shl	eax, 2
	mov	DWORD PTR vtx_count_max$[rbp], eax
; Line 3585
	mov	rax, QWORD PTR s$[rbp]
	mov	rcx, QWORD PTR text_end$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	imul	eax, eax, 6
	mov	DWORD PTR idx_count_max$[rbp], eax
; Line 3586
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, DWORD PTR idx_count_max$[rbp]
	mov	DWORD PTR idx_expected_size$[rbp], eax
; Line 3587
	mov	r8d, DWORD PTR vtx_count_max$[rbp]
	mov	edx, DWORD PTR idx_count_max$[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 3589
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR vtx_write$[rbp], rax
; Line 3590
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR idx_write$[rbp], rax
; Line 3591
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR vtx_current_idx$[rbp], eax
; Line 3593
	mov	eax, DWORD PTR col$[rbp]
	or	eax, 16777215				; 00ffffffH
	mov	DWORD PTR col_untinted$[rbp], eax
$LN52@RenderText:
$LN51@RenderText:
$LN50@RenderText:
$LN49@RenderText:
$LN48@RenderText:
$LN6@RenderText:
; Line 3595
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	$LN7@RenderText
; Line 3597
	movzx	eax, BYTE PTR word_wrap_enabled$[rbp]
	test	eax, eax
	je	$LN15@RenderText
; Line 3600
	cmp	QWORD PTR word_wrap_eol$[rbp], 0
	jne	SHORT $LN16@RenderText
; Line 3602
	movss	xmm0, DWORD PTR x$[rbp]
	subss	xmm0, DWORD PTR pos$[rbp]
	movss	xmm1, DWORD PTR wrap_width$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR text_end$[rbp]
	mov	r8, QWORD PTR s$[rbp]
	movss	xmm1, DWORD PTR scale$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
	mov	QWORD PTR word_wrap_eol$[rbp], rax
; Line 3603
	mov	rax, QWORD PTR s$[rbp]
	cmp	QWORD PTR word_wrap_eol$[rbp], rax
	jne	SHORT $LN17@RenderText
; Line 3604
	mov	rax, QWORD PTR word_wrap_eol$[rbp]
	inc	rax
	mov	QWORD PTR word_wrap_eol$[rbp], rax
$LN17@RenderText:
$LN16@RenderText:
; Line 3607
	mov	rax, QWORD PTR word_wrap_eol$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jb	$LN18@RenderText
; Line 3609
	movss	xmm0, DWORD PTR pos$[rbp]
	movss	DWORD PTR x$[rbp], xmm0
; Line 3610
	movss	xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR y$[rbp], xmm0
; Line 3611
	mov	QWORD PTR word_wrap_eol$[rbp], 0
$LN8@RenderText:
; Line 3614
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	SHORT $LN9@RenderText
; Line 3616
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$6[rbp], al
; Line 3617
	movzx	ecx, BYTE PTR c$6[rbp]
	call	?ImCharIsBlankA@@YA_ND@Z		; ImCharIsBlankA
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN19@RenderText
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
	jmp	SHORT $LN20@RenderText
$LN19@RenderText:
	movsx	eax, BYTE PTR c$6[rbp]
	cmp	eax, 10
	jne	SHORT $LN21@RenderText
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
	jmp	SHORT $LN9@RenderText
	jmp	SHORT $LN22@RenderText
$LN21@RenderText:
	jmp	SHORT $LN9@RenderText
$LN22@RenderText:
$LN20@RenderText:
; Line 3618
	jmp	SHORT $LN8@RenderText
$LN9@RenderText:
; Line 3619
	jmp	$LN6@RenderText
$LN18@RenderText:
$LN15@RenderText:
; Line 3624
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR c$7[rbp], eax
; Line 3625
	cmp	DWORD PTR c$7[rbp], 128			; 00000080H
	jae	SHORT $LN23@RenderText
; Line 3627
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
; Line 3628
	jmp	SHORT $LN24@RenderText
$LN23@RenderText:
; Line 3631
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR s$[rbp]
	lea	rcx, QWORD PTR c$7[rbp]
	call	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z	; ImTextCharFromUtf8
	cdqe
	mov	rcx, QWORD PTR s$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rbp], rax
; Line 3632
	cmp	DWORD PTR c$7[rbp], 0
	jne	SHORT $LN25@RenderText
; Line 3633
	jmp	$LN7@RenderText
$LN25@RenderText:
$LN24@RenderText:
; Line 3636
	cmp	DWORD PTR c$7[rbp], 32			; 00000020H
	jae	SHORT $LN26@RenderText
; Line 3638
	cmp	DWORD PTR c$7[rbp], 10
	jne	SHORT $LN27@RenderText
; Line 3640
	movss	xmm0, DWORD PTR pos$[rbp]
	movss	DWORD PTR x$[rbp], xmm0
; Line 3641
	movss	xmm0, DWORD PTR y$[rbp]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR y$[rbp], xmm0
; Line 3642
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR y$[rbp]
	comiss	xmm0, DWORD PTR [rax+12]
	jbe	SHORT $LN28@RenderText
; Line 3643
	jmp	$LN7@RenderText
$LN28@RenderText:
; Line 3644
	jmp	$LN48@RenderText
$LN27@RenderText:
; Line 3646
	cmp	DWORD PTR c$7[rbp], 13
	jne	SHORT $LN29@RenderText
; Line 3647
	jmp	$LN49@RenderText
$LN29@RenderText:
$LN26@RenderText:
; Line 3650
	movzx	edx, WORD PTR c$7[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
	mov	QWORD PTR glyph$8[rbp], rax
; Line 3651
	cmp	QWORD PTR glyph$8[rbp], 0
	jne	SHORT $LN30@RenderText
; Line 3652
	jmp	$LN50@RenderText
$LN30@RenderText:
; Line 3654
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	DWORD PTR char_width$9[rbp], xmm0
; Line 3655
	mov	rax, QWORD PTR glyph$8[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	$LN31@RenderText
; Line 3658
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR x$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x1$10[rbp], xmm0
; Line 3659
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR x$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR x2$11[rbp], xmm0
; Line 3660
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR y$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y1$12[rbp], xmm0
; Line 3661
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR y$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR y2$13[rbp], xmm0
; Line 3662
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR x1$10[rbp]
	jb	$LN32@RenderText
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR x2$11[rbp]
	comiss	xmm0, DWORD PTR [rax]
	jb	$LN32@RenderText
; Line 3665
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+24]
	movss	DWORD PTR u1$14[rbp], xmm0
; Line 3666
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+28]
	movss	DWORD PTR v1$15[rbp], xmm0
; Line 3667
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+32]
	movss	DWORD PTR u2$16[rbp], xmm0
; Line 3668
	mov	rax, QWORD PTR glyph$8[rbp]
	movss	xmm0, DWORD PTR [rax+36]
	movss	DWORD PTR v2$17[rbp], xmm0
; Line 3671
	movzx	eax, BYTE PTR cpu_fine_clip$[rbp]
	test	eax, eax
	je	$LN33@RenderText
; Line 3673
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR x1$10[rbp]
	jbe	SHORT $LN34@RenderText
; Line 3675
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR x2$11[rbp]
	subss	xmm0, DWORD PTR [rax]
	movss	xmm1, DWORD PTR x2$11[rbp]
	subss	xmm1, DWORD PTR x1$10[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR u2$16[rbp]
	subss	xmm1, DWORD PTR u1$14[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR u1$14[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR u1$14[rbp], xmm0
; Line 3676
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR x1$10[rbp], xmm0
$LN34@RenderText:
; Line 3678
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR y1$12[rbp]
	jbe	SHORT $LN35@RenderText
; Line 3680
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR y2$13[rbp]
	subss	xmm0, DWORD PTR [rax+4]
	movss	xmm1, DWORD PTR y2$13[rbp]
	subss	xmm1, DWORD PTR y1$12[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR v2$17[rbp]
	subss	xmm1, DWORD PTR v1$15[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR v1$15[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR v1$15[rbp], xmm0
; Line 3681
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR y1$12[rbp], xmm0
$LN35@RenderText:
; Line 3683
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR x2$11[rbp]
	comiss	xmm0, DWORD PTR [rax+8]
	jbe	SHORT $LN36@RenderText
; Line 3685
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR x1$10[rbp]
	movss	xmm1, DWORD PTR x2$11[rbp]
	subss	xmm1, DWORD PTR x1$10[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR u2$16[rbp]
	subss	xmm1, DWORD PTR u1$14[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR u1$14[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR u2$16[rbp], xmm0
; Line 3686
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR x2$11[rbp], xmm0
$LN36@RenderText:
; Line 3688
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR y2$13[rbp]
	comiss	xmm0, DWORD PTR [rax+12]
	jbe	SHORT $LN37@RenderText
; Line 3690
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	subss	xmm0, DWORD PTR y1$12[rbp]
	movss	xmm1, DWORD PTR y2$13[rbp]
	subss	xmm1, DWORD PTR y1$12[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR v2$17[rbp]
	subss	xmm1, DWORD PTR v1$15[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR v1$15[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR v2$17[rbp], xmm0
; Line 3691
	mov	rax, QWORD PTR clip_rect$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	movss	DWORD PTR y2$13[rbp], xmm0
$LN37@RenderText:
; Line 3693
	movss	xmm0, DWORD PTR y1$12[rbp]
	comiss	xmm0, DWORD PTR y2$13[rbp]
	jb	SHORT $LN38@RenderText
; Line 3695
	movss	xmm0, DWORD PTR x$[rbp]
	addss	xmm0, DWORD PTR char_width$9[rbp]
	movss	DWORD PTR x$[rbp], xmm0
; Line 3696
	jmp	$LN51@RenderText
$LN38@RenderText:
$LN33@RenderText:
; Line 3701
	mov	rax, QWORD PTR glyph$8[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN46@RenderText
	mov	eax, DWORD PTR col_untinted$[rbp]
	mov	DWORD PTR tv315[rbp], eax
	jmp	SHORT $LN47@RenderText
$LN46@RenderText:
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR tv315[rbp], eax
$LN47@RenderText:
	mov	eax, DWORD PTR tv315[rbp]
	mov	DWORD PTR glyph_col$18[rbp], eax
; Line 3705
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR idx_write$[rbp]
	movzx	edx, WORD PTR vtx_current_idx$[rbp]
	mov	WORD PTR [rcx+rax], dx
	mov	eax, DWORD PTR vtx_current_idx$[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR idx_write$[rbp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, DWORD PTR vtx_current_idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR idx_write$[rbp]
	mov	WORD PTR [rdx+rcx], ax
; Line 3706
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR idx_write$[rbp]
	movzx	edx, WORD PTR vtx_current_idx$[rbp]
	mov	WORD PTR [rcx+rax], dx
	mov	eax, DWORD PTR vtx_current_idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR idx_write$[rbp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, DWORD PTR vtx_current_idx$[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR idx_write$[rbp]
	mov	WORD PTR [rdx+rcx], ax
; Line 3707
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR x1$10[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR y1$12[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vtx_write$[rbp]
	mov	edx, DWORD PTR glyph_col$18[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR u1$14[rbp]
	movss	DWORD PTR [rcx+rax+8], xmm0
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR v1$15[rbp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3708
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR x2$11[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR y1$12[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR vtx_write$[rbp]
	mov	edx, DWORD PTR glyph_col$18[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR u2$16[rbp]
	movss	DWORD PTR [rcx+rax+8], xmm0
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR v1$15[rbp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3709
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR x2$11[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR y2$13[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR vtx_write$[rbp]
	mov	edx, DWORD PTR glyph_col$18[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR u2$16[rbp]
	movss	DWORD PTR [rcx+rax+8], xmm0
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR v2$17[rbp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3710
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR x1$10[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR y2$13[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR vtx_write$[rbp]
	mov	edx, DWORD PTR glyph_col$18[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR u1$14[rbp]
	movss	DWORD PTR [rcx+rax+8], xmm0
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR vtx_write$[rbp]
	movss	xmm0, DWORD PTR v2$17[rbp]
	movss	DWORD PTR [rcx+rax+12], xmm0
; Line 3711
	mov	rax, QWORD PTR vtx_write$[rbp]
	add	rax, 80					; 00000050H
	mov	QWORD PTR vtx_write$[rbp], rax
; Line 3712
	mov	eax, DWORD PTR vtx_current_idx$[rbp]
	add	eax, 4
	mov	DWORD PTR vtx_current_idx$[rbp], eax
; Line 3713
	mov	rax, QWORD PTR idx_write$[rbp]
	add	rax, 12
	mov	QWORD PTR idx_write$[rbp], rax
$LN32@RenderText:
$LN31@RenderText:
; Line 3717
	movss	xmm0, DWORD PTR x$[rbp]
	addss	xmm0, DWORD PTR char_width$9[rbp]
	movss	DWORD PTR x$[rbp], xmm0
; Line 3718
	jmp	$LN52@RenderText
$LN7@RenderText:
; Line 3721
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR vtx_write$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 20
	idiv	rcx
	mov	rcx, QWORD PTR draw_list$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 3722
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR idx_write$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	sar	rax, 1
	mov	rcx, QWORD PTR draw_list$[rbp]
	mov	DWORD PTR [rcx+16], eax
; Line 3723
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR idx_expected_size$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv447[rbp], eax
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	QWORD PTR tv438[rbp], rax
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR tv438[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv443[rbp], rax
	mov	rax, QWORD PTR tv443[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv445[rbp], eax
	mov	eax, DWORD PTR tv447[rbp]
	mov	ecx, DWORD PTR tv445[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR tv443[rbp]
	mov	DWORD PTR [rcx], eax
; Line 3724
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR vtx_write$[rbp]
	mov	QWORD PTR [rax+72], rcx
; Line 3725
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR idx_write$[rbp]
	mov	QWORD PTR [rax+80], rcx
; Line 3726
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	ecx, DWORD PTR vtx_current_idx$[rbp]
	mov	DWORD PTR [rax+52], ecx
$LN1@RenderText:
; Line 3727
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1352]
	pop	rdi
	pop	rbp
	ret	0
?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z ENDP ; ImFont::RenderText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z
_TEXT	SEGMENT
glyph$ = 8
scale$ = 36
$T1 = 260
$T2 = 292
$T3 = 324
$T4 = 356
tv79 = 372
tv164 = 376
tv162 = 384
tv160 = 392
tv158 = 400
this$ = 448
draw_list$ = 456
size$ = 464
pos$ = 472
col$ = 480
c$ = 488
?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z PROC ; ImFont::RenderChar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3524
$LN8:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3525
	movzx	edx, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ; ImFont::FindGlyph
	mov	QWORD PTR glyph$[rbp], rax
; Line 3526
	cmp	QWORD PTR glyph$[rbp], 0
	je	SHORT $LN3@RenderChar
	mov	rax, QWORD PTR glyph$[rbp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@RenderChar
$LN3@RenderChar:
; Line 3527
	jmp	$LN1@RenderChar
$LN2@RenderChar:
; Line 3528
	mov	rax, QWORD PTR glyph$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@RenderChar
; Line 3529
	mov	eax, DWORD PTR col$[rbp]
	or	eax, 16777215				; 00ffffffH
	mov	DWORD PTR col$[rbp], eax
$LN4@RenderChar:
; Line 3530
	movss	xmm0, DWORD PTR size$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN6@RenderChar
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	divss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR tv79[rbp], xmm0
	jmp	SHORT $LN7@RenderChar
$LN6@RenderChar:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv79[rbp], xmm0
$LN7@RenderChar:
	movss	xmm0, DWORD PTR tv79[rbp]
	movss	DWORD PTR scale$[rbp], xmm0
; Line 3531
	cvttss2si eax, DWORD PTR pos$[rbp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR pos$[rbp], xmm0
; Line 3532
	cvttss2si eax, DWORD PTR pos$[rbp+4]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR pos$[rbp+4], xmm0
; Line 3533
	mov	r8d, 4
	mov	edx, 6
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 3534
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm2, DWORD PTR [rax+36]
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm1, DWORD PTR [rax+32]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv164[rbp], rax
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm2, DWORD PTR [rax+28]
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm1, DWORD PTR [rax+24]
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv162[rbp], rax
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm1, DWORD PTR [rax+16]
	mulss	xmm1, DWORD PTR scale$[rbp]
	movss	xmm2, DWORD PTR pos$[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv160[rbp], rax
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	xmm1, DWORD PTR pos$[rbp+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR glyph$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR scale$[rbp]
	movss	xmm2, DWORD PTR pos$[rbp]
	addss	xmm2, xmm1
	movaps	xmm1, xmm2
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	QWORD PTR tv158[rbp], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR tv164[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv162[rbp]
	mov	r8, QWORD PTR tv160[rbp]
	mov	rdx, QWORD PTR tv158[rbp]
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ; ImDrawList::PrimRectUV
$LN1@RenderChar:
; Line 3535
	lea	rsp, QWORD PTR [rbp+424]
	pop	rdi
	pop	rbp
	ret	0
?RenderChar@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IG@Z ENDP ; ImFont::RenderChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z
_TEXT	SEGMENT
line_width$ = 4
word_width$ = 36
blank_width$ = 68
word_end$ = 104
prev_word_end$ = 136
inside_word$ = 164
s$ = 200
c$4 = 228
next_s$5 = 264
char_width$6 = 292
tv140 = 500
tv88 = 500
tv146 = 504
__$ArrayPad$ = 512
this$ = 560
scale$ = 568
text$ = 576
text_end$ = 584
wrap_width$ = 592
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z PROC	; ImFont::CalcWordWrapPositionA, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3330
$LN26:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3346
	xorps	xmm0, xmm0
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3347
	xorps	xmm0, xmm0
	movss	DWORD PTR word_width$[rbp], xmm0
; Line 3348
	xorps	xmm0, xmm0
	movss	DWORD PTR blank_width$[rbp], xmm0
; Line 3349
	movss	xmm0, DWORD PTR wrap_width$[rbp]
	divss	xmm0, DWORD PTR scale$[rbp]
	movss	DWORD PTR wrap_width$[rbp], xmm0
; Line 3351
	mov	rax, QWORD PTR text$[rbp]
	mov	QWORD PTR word_end$[rbp], rax
; Line 3352
	mov	QWORD PTR prev_word_end$[rbp], 0
; Line 3353
	mov	BYTE PTR inside_word$[rbp], 1
; Line 3355
	mov	rax, QWORD PTR text$[rbp]
	mov	QWORD PTR s$[rbp], rax
$LN25@CalcWordWr:
$LN24@CalcWordWr:
$LN2@CalcWordWr:
; Line 3356
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	$LN3@CalcWordWr
; Line 3358
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR c$4[rbp], eax
; Line 3360
	cmp	DWORD PTR c$4[rbp], 128			; 00000080H
	jae	SHORT $LN4@CalcWordWr
; Line 3361
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR next_s$5[rbp], rax
	jmp	SHORT $LN5@CalcWordWr
$LN4@CalcWordWr:
; Line 3363
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR s$[rbp]
	lea	rcx, QWORD PTR c$4[rbp]
	call	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z	; ImTextCharFromUtf8
	cdqe
	mov	rcx, QWORD PTR s$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR next_s$5[rbp], rax
$LN5@CalcWordWr:
; Line 3364
	cmp	DWORD PTR c$4[rbp], 0
	jne	SHORT $LN6@CalcWordWr
; Line 3365
	jmp	$LN3@CalcWordWr
$LN6@CalcWordWr:
; Line 3367
	cmp	DWORD PTR c$4[rbp], 32			; 00000020H
	jae	SHORT $LN7@CalcWordWr
; Line 3369
	cmp	DWORD PTR c$4[rbp], 10
	jne	SHORT $LN8@CalcWordWr
; Line 3371
	xorps	xmm0, xmm0
	movss	DWORD PTR blank_width$[rbp], xmm0
	movss	xmm0, DWORD PTR blank_width$[rbp]
	movss	DWORD PTR word_width$[rbp], xmm0
	movss	xmm0, DWORD PTR word_width$[rbp]
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3372
	mov	BYTE PTR inside_word$[rbp], 1
; Line 3373
	mov	rax, QWORD PTR next_s$5[rbp]
	mov	QWORD PTR s$[rbp], rax
; Line 3374
	jmp	$LN2@CalcWordWr
$LN8@CalcWordWr:
; Line 3376
	cmp	DWORD PTR c$4[rbp], 13
	jne	SHORT $LN9@CalcWordWr
; Line 3378
	mov	rax, QWORD PTR next_s$5[rbp]
	mov	QWORD PTR s$[rbp], rax
; Line 3379
	jmp	$LN24@CalcWordWr
$LN9@CalcWordWr:
$LN7@CalcWordWr:
; Line 3383
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR c$4[rbp], eax
	jge	SHORT $LN18@CalcWordWr
	mov	eax, DWORD PTR c$4[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv88[rbp], xmm0
	jmp	SHORT $LN19@CalcWordWr
$LN18@CalcWordWr:
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv88[rbp], xmm0
$LN19@CalcWordWr:
	movss	xmm0, DWORD PTR tv88[rbp]
	movss	DWORD PTR char_width$6[rbp], xmm0
; Line 3384
	mov	ecx, DWORD PTR c$4[rbp]
	call	?ImCharIsBlankW@@YA_NI@Z		; ImCharIsBlankW
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@CalcWordWr
; Line 3386
	movzx	eax, BYTE PTR inside_word$[rbp]
	test	eax, eax
	je	SHORT $LN12@CalcWordWr
; Line 3388
	movss	xmm0, DWORD PTR line_width$[rbp]
	addss	xmm0, DWORD PTR blank_width$[rbp]
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3389
	xorps	xmm0, xmm0
	movss	DWORD PTR blank_width$[rbp], xmm0
; Line 3390
	mov	rax, QWORD PTR s$[rbp]
	mov	QWORD PTR word_end$[rbp], rax
$LN12@CalcWordWr:
; Line 3392
	movss	xmm0, DWORD PTR blank_width$[rbp]
	addss	xmm0, DWORD PTR char_width$6[rbp]
	movss	DWORD PTR blank_width$[rbp], xmm0
; Line 3393
	mov	BYTE PTR inside_word$[rbp], 0
; Line 3394
	jmp	$LN11@CalcWordWr
$LN10@CalcWordWr:
; Line 3397
	movss	xmm0, DWORD PTR word_width$[rbp]
	addss	xmm0, DWORD PTR char_width$6[rbp]
	movss	DWORD PTR word_width$[rbp], xmm0
; Line 3398
	movzx	eax, BYTE PTR inside_word$[rbp]
	test	eax, eax
	je	SHORT $LN13@CalcWordWr
; Line 3400
	mov	rax, QWORD PTR next_s$5[rbp]
	mov	QWORD PTR word_end$[rbp], rax
; Line 3401
	jmp	SHORT $LN14@CalcWordWr
$LN13@CalcWordWr:
; Line 3404
	mov	rax, QWORD PTR word_end$[rbp]
	mov	QWORD PTR prev_word_end$[rbp], rax
; Line 3405
	movss	xmm0, DWORD PTR word_width$[rbp]
	addss	xmm0, DWORD PTR blank_width$[rbp]
	movss	xmm1, DWORD PTR line_width$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3406
	xorps	xmm0, xmm0
	movss	DWORD PTR blank_width$[rbp], xmm0
	movss	xmm0, DWORD PTR blank_width$[rbp]
	movss	DWORD PTR word_width$[rbp], xmm0
$LN14@CalcWordWr:
; Line 3410
	cmp	DWORD PTR c$4[rbp], 46			; 0000002eH
	je	SHORT $LN20@CalcWordWr
	cmp	DWORD PTR c$4[rbp], 44			; 0000002cH
	je	SHORT $LN20@CalcWordWr
	cmp	DWORD PTR c$4[rbp], 59			; 0000003bH
	je	SHORT $LN20@CalcWordWr
	cmp	DWORD PTR c$4[rbp], 33			; 00000021H
	je	SHORT $LN20@CalcWordWr
	cmp	DWORD PTR c$4[rbp], 63			; 0000003fH
	je	SHORT $LN20@CalcWordWr
	cmp	DWORD PTR c$4[rbp], 34			; 00000022H
	je	SHORT $LN20@CalcWordWr
	mov	DWORD PTR tv140[rbp], 1
	jmp	SHORT $LN21@CalcWordWr
$LN20@CalcWordWr:
	mov	DWORD PTR tv140[rbp], 0
$LN21@CalcWordWr:
	movzx	eax, BYTE PTR tv140[rbp]
	mov	BYTE PTR inside_word$[rbp], al
$LN11@CalcWordWr:
; Line 3414
	movss	xmm0, DWORD PTR line_width$[rbp]
	addss	xmm0, DWORD PTR word_width$[rbp]
	comiss	xmm0, DWORD PTR wrap_width$[rbp]
	jbe	SHORT $LN15@CalcWordWr
; Line 3417
	movss	xmm0, DWORD PTR wrap_width$[rbp]
	comiss	xmm0, DWORD PTR word_width$[rbp]
	jbe	SHORT $LN16@CalcWordWr
; Line 3418
	cmp	QWORD PTR prev_word_end$[rbp], 0
	je	SHORT $LN22@CalcWordWr
	mov	rax, QWORD PTR prev_word_end$[rbp]
	mov	QWORD PTR tv146[rbp], rax
	jmp	SHORT $LN23@CalcWordWr
$LN22@CalcWordWr:
	mov	rax, QWORD PTR word_end$[rbp]
	mov	QWORD PTR tv146[rbp], rax
$LN23@CalcWordWr:
	mov	rax, QWORD PTR tv146[rbp]
	mov	QWORD PTR s$[rbp], rax
$LN16@CalcWordWr:
; Line 3419
	jmp	SHORT $LN3@CalcWordWr
$LN15@CalcWordWr:
; Line 3422
	mov	rax, QWORD PTR next_s$5[rbp]
	mov	QWORD PTR s$[rbp], rax
; Line 3423
	jmp	$LN25@CalcWordWr
$LN3@CalcWordWr:
; Line 3425
	mov	rax, QWORD PTR s$[rbp]
; Line 3426
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ENDP	; ImFont::CalcWordWrapPositionA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z
_TEXT	SEGMENT
line_height$ = 4
scale$ = 36
text_size$ = 72
line_width$ = 100
word_wrap_enabled$ = 132
word_wrap_eol$ = 168
s$ = 200
c$5 = 228
prev_s$6 = 264
c$7 = 292
char_width$8 = 324
tv158 = 532
tv74 = 532
tv180 = 536
tv181 = 544
__$ArrayPad$ = 552
this$ = 592
__$ReturnUdt$ = 600
size$ = 608
max_width$ = 616
wrap_width$ = 624
text_begin$ = 632
text_end$ = 640
remaining$ = 648
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z PROC ; ImFont::CalcTextSizeA, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3429
$LN36:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 616				; 00000268H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 94					; 0000005eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+648]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3430
	cmp	QWORD PTR text_end$[rbp], 0
	jne	SHORT $LN6@CalcTextSi
; Line 3431
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR tv180[rbp], rax
	mov	QWORD PTR tv181[rbp], -1
$LL35@CalcTextSi:
	inc	QWORD PTR tv181[rbp]
	mov	rax, QWORD PTR tv180[rbp]
	mov	rcx, QWORD PTR tv181[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL35@CalcTextSi
	mov	rax, QWORD PTR tv181[rbp]
	mov	rcx, QWORD PTR text_begin$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_end$[rbp], rax
$LN6@CalcTextSi:
; Line 3433
	movss	xmm0, DWORD PTR size$[rbp]
	movss	DWORD PTR line_height$[rbp], xmm0
; Line 3434
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR size$[rbp]
	divss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR scale$[rbp], xmm0
; Line 3436
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR text_size$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 3437
	xorps	xmm0, xmm0
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3439
	movss	xmm0, DWORD PTR wrap_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN28@CalcTextSi
	mov	BYTE PTR tv74[rbp], 1
	jmp	SHORT $LN29@CalcTextSi
$LN28@CalcTextSi:
	mov	BYTE PTR tv74[rbp], 0
$LN29@CalcTextSi:
	movzx	eax, BYTE PTR tv74[rbp]
	mov	BYTE PTR word_wrap_enabled$[rbp], al
; Line 3440
	mov	QWORD PTR word_wrap_eol$[rbp], 0
; Line 3442
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR s$[rbp], rax
$LN34@CalcTextSi:
$LN33@CalcTextSi:
$LN32@CalcTextSi:
$LN2@CalcTextSi:
; Line 3443
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	$LN3@CalcTextSi
; Line 3445
	movzx	eax, BYTE PTR word_wrap_enabled$[rbp]
	test	eax, eax
	je	$LN7@CalcTextSi
; Line 3448
	cmp	QWORD PTR word_wrap_eol$[rbp], 0
	jne	SHORT $LN8@CalcTextSi
; Line 3450
	movss	xmm0, DWORD PTR wrap_width$[rbp]
	subss	xmm0, DWORD PTR line_width$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR text_end$[rbp]
	mov	r8, QWORD PTR s$[rbp]
	movss	xmm1, DWORD PTR scale$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?CalcWordWrapPositionA@ImFont@@QEBAPEBDMPEBD0M@Z ; ImFont::CalcWordWrapPositionA
	mov	QWORD PTR word_wrap_eol$[rbp], rax
; Line 3451
	mov	rax, QWORD PTR s$[rbp]
	cmp	QWORD PTR word_wrap_eol$[rbp], rax
	jne	SHORT $LN9@CalcTextSi
; Line 3452
	mov	rax, QWORD PTR word_wrap_eol$[rbp]
	inc	rax
	mov	QWORD PTR word_wrap_eol$[rbp], rax
$LN9@CalcTextSi:
$LN8@CalcTextSi:
; Line 3455
	mov	rax, QWORD PTR word_wrap_eol$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jb	$LN10@CalcTextSi
; Line 3457
	movss	xmm0, DWORD PTR line_width$[rbp]
	comiss	xmm0, DWORD PTR text_size$[rbp]
	jbe	SHORT $LN11@CalcTextSi
; Line 3458
	movss	xmm0, DWORD PTR line_width$[rbp]
	movss	DWORD PTR text_size$[rbp], xmm0
$LN11@CalcTextSi:
; Line 3459
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR text_size$[rbp+4], xmm0
; Line 3460
	xorps	xmm0, xmm0
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3461
	mov	QWORD PTR word_wrap_eol$[rbp], 0
$LN4@CalcTextSi:
; Line 3464
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR s$[rbp], rax
	jae	SHORT $LN5@CalcTextSi
; Line 3466
	mov	rax, QWORD PTR s$[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$5[rbp], al
; Line 3467
	movzx	ecx, BYTE PTR c$5[rbp]
	call	?ImCharIsBlankA@@YA_ND@Z		; ImCharIsBlankA
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN12@CalcTextSi
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
	jmp	SHORT $LN13@CalcTextSi
$LN12@CalcTextSi:
	movsx	eax, BYTE PTR c$5[rbp]
	cmp	eax, 10
	jne	SHORT $LN14@CalcTextSi
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
	jmp	SHORT $LN5@CalcTextSi
	jmp	SHORT $LN15@CalcTextSi
$LN14@CalcTextSi:
	jmp	SHORT $LN5@CalcTextSi
$LN15@CalcTextSi:
$LN13@CalcTextSi:
; Line 3468
	jmp	SHORT $LN4@CalcTextSi
$LN5@CalcTextSi:
; Line 3469
	jmp	$LN2@CalcTextSi
$LN10@CalcTextSi:
$LN7@CalcTextSi:
; Line 3474
	mov	rax, QWORD PTR s$[rbp]
	mov	QWORD PTR prev_s$6[rbp], rax
; Line 3475
	mov	rax, QWORD PTR s$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR c$7[rbp], eax
; Line 3476
	cmp	DWORD PTR c$7[rbp], 128			; 00000080H
	jae	SHORT $LN16@CalcTextSi
; Line 3478
	mov	rax, QWORD PTR s$[rbp]
	inc	rax
	mov	QWORD PTR s$[rbp], rax
; Line 3479
	jmp	SHORT $LN17@CalcTextSi
$LN16@CalcTextSi:
; Line 3482
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR s$[rbp]
	lea	rcx, QWORD PTR c$7[rbp]
	call	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z	; ImTextCharFromUtf8
	cdqe
	mov	rcx, QWORD PTR s$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR s$[rbp], rax
; Line 3483
	cmp	DWORD PTR c$7[rbp], 0
	jne	SHORT $LN18@CalcTextSi
; Line 3484
	jmp	$LN3@CalcTextSi
$LN18@CalcTextSi:
$LN17@CalcTextSi:
; Line 3487
	cmp	DWORD PTR c$7[rbp], 32			; 00000020H
	jae	SHORT $LN19@CalcTextSi
; Line 3489
	cmp	DWORD PTR c$7[rbp], 10
	jne	SHORT $LN20@CalcTextSi
; Line 3491
	movss	xmm1, DWORD PTR line_width$[rbp]
	movss	xmm0, DWORD PTR text_size$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR text_size$[rbp], xmm0
; Line 3492
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR text_size$[rbp+4], xmm0
; Line 3493
	xorps	xmm0, xmm0
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3494
	jmp	$LN32@CalcTextSi
$LN20@CalcTextSi:
; Line 3496
	cmp	DWORD PTR c$7[rbp], 13
	jne	SHORT $LN21@CalcTextSi
; Line 3497
	jmp	$LN33@CalcTextSi
$LN21@CalcTextSi:
$LN19@CalcTextSi:
; Line 3500
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR c$7[rbp], eax
	jge	SHORT $LN30@CalcTextSi
	mov	eax, DWORD PTR c$7[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	movss	DWORD PTR tv158[rbp], xmm0
	jmp	SHORT $LN31@CalcTextSi
$LN30@CalcTextSi:
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR tv158[rbp], xmm0
$LN31@CalcTextSi:
	movss	xmm0, DWORD PTR tv158[rbp]
	mulss	xmm0, DWORD PTR scale$[rbp]
	movss	DWORD PTR char_width$8[rbp], xmm0
; Line 3501
	movss	xmm0, DWORD PTR line_width$[rbp]
	addss	xmm0, DWORD PTR char_width$8[rbp]
	comiss	xmm0, DWORD PTR max_width$[rbp]
	jb	SHORT $LN22@CalcTextSi
; Line 3503
	mov	rax, QWORD PTR prev_s$6[rbp]
	mov	QWORD PTR s$[rbp], rax
; Line 3504
	jmp	SHORT $LN3@CalcTextSi
$LN22@CalcTextSi:
; Line 3507
	movss	xmm0, DWORD PTR line_width$[rbp]
	addss	xmm0, DWORD PTR char_width$8[rbp]
	movss	DWORD PTR line_width$[rbp], xmm0
; Line 3508
	jmp	$LN34@CalcTextSi
$LN3@CalcTextSi:
; Line 3510
	movss	xmm0, DWORD PTR line_width$[rbp]
	comiss	xmm0, DWORD PTR text_size$[rbp]
	jbe	SHORT $LN23@CalcTextSi
; Line 3511
	movss	xmm0, DWORD PTR line_width$[rbp]
	movss	DWORD PTR text_size$[rbp], xmm0
$LN23@CalcTextSi:
; Line 3513
	movss	xmm0, DWORD PTR line_width$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN25@CalcTextSi
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN24@CalcTextSi
	jne	SHORT $LN24@CalcTextSi
$LN25@CalcTextSi:
; Line 3514
	movss	xmm0, DWORD PTR text_size$[rbp+4]
	addss	xmm0, DWORD PTR line_height$[rbp]
	movss	DWORD PTR text_size$[rbp+4], xmm0
$LN24@CalcTextSi:
; Line 3516
	cmp	QWORD PTR remaining$[rbp], 0
	je	SHORT $LN26@CalcTextSi
; Line 3517
	mov	rax, QWORD PTR remaining$[rbp]
	mov	rcx, QWORD PTR s$[rbp]
	mov	QWORD PTR [rax], rcx
$LN26@CalcTextSi:
; Line 3519
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
	mov	rcx, QWORD PTR text_size$[rbp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR __$ReturnUdt$[rbp]
; Line 3520
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+568]
	pop	rdi
	pop	rbp
	ret	0
?CalcTextSizeA@ImFont@@QEBA?AUImVec2@@MMMPEBD0PEAPEBD@Z ENDP ; ImFont::CalcTextSizeA
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsLoaded@ImFont@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?IsLoaded@ImFont@@QEBA_NXZ PROC				; ImFont::IsLoaded, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2740
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN3@IsLoaded
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@IsLoaded
$LN3@IsLoaded:
	mov	DWORD PTR tv66[rbp], 0
$LN4@IsLoaded:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?IsLoaded@ImFont@@QEBA_NXZ ENDP				; ImFont::IsLoaded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z
_TEXT	SEGMENT
i$ = 4
this$ = 256
c$ = 264
?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z PROC ; ImFont::FindGlyphNoFallback, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3320
$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3321
	movzx	eax, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movsxd	rcx, DWORD PTR [rcx+24]
	cmp	rax, rcx
	jb	SHORT $LN2@FindGlyphN
; Line 3322
	xor	eax, eax
	jmp	SHORT $LN1@FindGlyphN
$LN2@FindGlyphN:
; Line 3323
	movzx	eax, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR i$[rbp], ax
; Line 3324
	movzx	eax, WORD PTR i$[rbp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN3@FindGlyphN
; Line 3325
	xor	eax, eax
	jmp	SHORT $LN1@FindGlyphN
$LN3@FindGlyphN:
; Line 3326
	movzx	eax, WORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+48]
$LN1@FindGlyphN:
; Line 3327
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?FindGlyphNoFallback@ImFont@@QEBAPEBUImFontGlyph@@G@Z ENDP ; ImFont::FindGlyphNoFallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z
_TEXT	SEGMENT
i$ = 4
this$ = 256
c$ = 264
?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z PROC	; ImFont::FindGlyph, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3310
$LN5:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3311
	movzx	eax, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	movsxd	rcx, DWORD PTR [rcx+24]
	cmp	rax, rcx
	jb	SHORT $LN2@FindGlyph
; Line 3312
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	jmp	SHORT $LN1@FindGlyph
$LN2@FindGlyph:
; Line 3313
	movzx	eax, WORD PTR c$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	WORD PTR i$[rbp], ax
; Line 3314
	movzx	eax, WORD PTR i$[rbp]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN3@FindGlyph
; Line 3315
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	jmp	SHORT $LN1@FindGlyph
$LN3@FindGlyph:
; Line 3316
	movzx	eax, WORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+48]
$LN1@FindGlyph:
; Line 3317
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?FindGlyph@ImFont@@QEBAPEBUImFontGlyph@@G@Z ENDP	; ImFont::FindGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImFont@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImFont@@QEAA@XZ PROC					; ImFont::~ImFont, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3121
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3122
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearOutputData@ImFont@@QEAAXXZ	; ImFont::ClearOutputData
; Line 3123
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	??1?$ImVector@UImFontGlyph@@@@QEAA@XZ	; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	??1?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::~ImVector<unsigned short>
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??1?$ImVector@M@@QEAA@XZ		; ImVector<float>::~ImVector<float>
	npad	1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImFont@@QEAA@XZ ENDP					; ImFont::~ImFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImFont@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImFont@@QEAA@XZ PROC					; ImFont::ImFont, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3103
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@M@@QEAA@XZ		; ImVector<float>::ImVector<float>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 24
	mov	rcx, rax
	call	??0?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::ImVector<unsigned short>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 40					; 00000028H
	mov	rcx, rax
	call	??0?$ImVector@UImFontGlyph@@@@QEAA@XZ	; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>
; Line 3104
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+20], xmm0
; Line 3105
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+16], xmm0
; Line 3106
	mov	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+82], ax
; Line 3107
	mov	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+84], ax
; Line 3108
	mov	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+86], ax
; Line 3109
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+56], 0
; Line 3110
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+64], 0
; Line 3111
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+72], 0
; Line 3112
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+80], ax
; Line 3113
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+88], 0
; Line 3114
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+92], xmm0
; Line 3115
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+100], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+96], xmm0
; Line 3116
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+104], 0
; Line 3117
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 108				; 0000006cH
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 2
	rep stosb
; Line 3118
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImFont@@QEAA@XZ ENDP					; ImFont::ImFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImFont@@QEAA@XZ@4HA PROC			; `ImFont::ImFont'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$ImVector@M@@QEAA@XZ		; ImVector<float>::~ImVector<float>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImFont@@QEAA@XZ@4HA ENDP			; `ImFont::ImFont'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$1@?0???0ImFont@@QEAA@XZ@4HA PROC			; `ImFont::ImFont'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 24
	call	??1?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::~ImVector<unsigned short>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0ImFont@@QEAA@XZ@4HA ENDP			; `ImFont::ImFont'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z PROC	; ImVector<ImFontGlyph>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ENDP	; ImVector<ImFontGlyph>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z PROC	; ImVector<ImFontGlyph>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z ; ImVector<ImFontGlyph>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ; ImVector<ImFontGlyph>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImFontGlyph@@@@QEAAXH@Z ENDP	; ImVector<ImFontGlyph>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z PROC ; ImVector<ImFontGlyph>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImFontGlyph@@@@QEBAHH@Z ENDP ; ImVector<ImFontGlyph>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ PROC ; ImVector<ImFontGlyph>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@XZ ENDP ; ImVector<ImFontGlyph>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z PROC ; ImVector<ImFontGlyph>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImFontGlyph@@@@QEAAAEAUImFontGlyph@@H@Z ENDP ; ImVector<ImFontGlyph>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ PROC		; ImVector<ImFontGlyph>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImFontGlyph@@@@QEAAXXZ ENDP		; ImVector<ImFontGlyph>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImFontGlyph@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImFontGlyph@@@@QEAA@XZ PROC		; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImFontGlyph@@@@QEAA@XZ ENDP		; ImVector<ImFontGlyph>::~ImVector<ImFontGlyph>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImFontGlyph@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontGlyph@@@@QEAA@XZ PROC		; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImFontGlyph@@@@QEAA@XZ ENDP		; ImVector<ImFontGlyph>::ImVector<ImFontGlyph>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@M@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@M@@QEAAXH@Z PROC			; ImVector<float>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@M@@QEAAXH@Z ENDP			; ImVector<float>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@M@@QEAAXHAEBM@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@M@@QEAAXHAEBM@Z PROC			; ImVector<float>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1709
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN5@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@M@@QEBAHH@Z	; ImVector<float>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@M@@QEAAXH@Z		; ImVector<float>::reserve
$LN5@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN6@resize
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR n$1[rbp], eax
	jmp	SHORT $LN4@resize
$LN2@resize:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@resize:
	mov	eax, DWORD PTR new_size$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@resize
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	edx, DWORD PTR [rdx]
	mov	DWORD PTR [rcx+rax*4], edx
	jmp	SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@M@@QEAAXHAEBM@Z ENDP			; ImVector<float>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@M@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@M@@QEBAHH@Z PROC		; ImVector<float>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@M@@QEBAHH@Z ENDP		; ImVector<float>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@M@@QEAAAEAMH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@M@@QEAAAEAMH@Z PROC			; ImVector<float>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@M@@QEAAAEAMH@Z ENDP			; ImVector<float>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@M@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@M@@QEAAXXZ PROC			; ImVector<float>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@M@@QEAAXXZ ENDP			; ImVector<float>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@M@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@M@@QEAA@XZ PROC				; ImVector<float>::~ImVector<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@M@@QEAA@XZ ENDP				; ImVector<float>::~ImVector<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@M@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@M@@QEAA@XZ PROC				; ImVector<float>::ImVector<float>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@M@@QEAA@XZ ENDP				; ImVector<float>::ImVector<float>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z PROC ; ImVector<ImFontConfig>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z ; ImVector<ImFontConfig>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z ; ImVector<ImFontConfig>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z ENDP ; ImVector<ImFontConfig>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z PROC	; ImVector<ImFontConfig>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImFontConfig@@@@QEAAXH@Z ENDP	; ImVector<ImFontConfig>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z PROC ; ImVector<ImFontConfig>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImFontConfig@@@@QEBAHH@Z ENDP ; ImVector<ImFontConfig>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ PROC ; ImVector<ImFontConfig>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ ENDP ; ImVector<ImFontConfig>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z PROC ; ImVector<ImFontConfig>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ENDP ; ImVector<ImFontConfig>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ PROC		; ImVector<ImFontConfig>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ ENDP		; ImVector<ImFontConfig>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImFontConfig@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImFontConfig@@@@QEAA@XZ PROC		; ImVector<ImFontConfig>::~ImVector<ImFontConfig>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImFontConfig@@@@QEAA@XZ ENDP		; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImFontConfig@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontConfig@@@@QEAA@XZ PROC		; ImVector<ImFontConfig>::ImVector<ImFontConfig>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImFontConfig@@@@QEAA@XZ ENDP		; ImVector<ImFontConfig>::ImVector<ImFontConfig>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z PROC ; ImVector<ImFontAtlasCustomRect>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z ; ImVector<ImFontAtlasCustomRect>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z ; ImVector<ImFontAtlasCustomRect>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ENDP ; ImVector<ImFontAtlasCustomRect>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z PROC ; ImVector<ImFontAtlasCustomRect>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXH@Z ENDP ; ImVector<ImFontAtlasCustomRect>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z PROC ; ImVector<ImFontAtlasCustomRect>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImFontAtlasCustomRect@@@@QEBAHH@Z ENDP ; ImVector<ImFontAtlasCustomRect>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z PROC ; ImVector<ImFontAtlasCustomRect>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ENDP ; ImVector<ImFontAtlasCustomRect>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ PROC ; ImVector<ImFontAtlasCustomRect>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ ENDP ; ImVector<ImFontAtlasCustomRect>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ PROC	; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ENDP	; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ PROC	; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ENDP	; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z PROC ; ImVector<ImFont *>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z ; ImVector<ImFont *>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z ; ImVector<ImFont *>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z ENDP ; ImVector<ImFont *>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z PROC		; ImVector<ImFont *>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@PEAUImFont@@@@QEAAXH@Z ENDP		; ImVector<ImFont *>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z PROC	; ImVector<ImFont *>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@PEAUImFont@@@@QEBAHH@Z ENDP	; ImVector<ImFont *>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ PROC ; ImVector<ImFont *>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ ENDP ; ImVector<ImFont *>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z PROC	; ImVector<ImFont *>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ENDP	; ImVector<ImFont *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ PROC		; ImVector<ImFont *>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ ENDP		; ImVector<ImFont *>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ
_TEXT	SEGMENT
n$1 = 4
this$ = 256
?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ PROC	; ImVector<ImFont *>::clear_delete, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1686
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@clear_dele
$LN2@clear_dele:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@clear_dele:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@clear_dele
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	??$IM_DELETE@UImFont@@@@YAXPEAUImFont@@@Z ; IM_DELETE<ImFont>
	jmp	SHORT $LN2@clear_dele
$LN3@clear_dele:
	mov	rcx, QWORD PTR this$[rbp]
	call	?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ	; ImVector<ImFont *>::clear
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ ENDP	; ImVector<ImFont *>::clear_delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ PROC		; ImVector<ImFont *>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@PEAUImFont@@@@QEAAXXZ ENDP		; ImVector<ImFont *>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@PEAUImFont@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@PEAUImFont@@@@QEAA@XZ PROC		; ImVector<ImFont *>::~ImVector<ImFont *>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@PEAUImFont@@@@QEAA@XZ ENDP		; ImVector<ImFont *>::~ImVector<ImFont *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@PEAUImFont@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEAUImFont@@@@QEAA@XZ PROC		; ImVector<ImFont *>::ImVector<ImFont *>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@PEAUImFont@@@@QEAA@XZ ENDP		; ImVector<ImFont *>::ImVector<ImFont *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z
_TEXT	SEGMENT
r$ = 8
pos$ = 40
size$ = 72
$T5 = 292
$T6 = 324
$T7 = 356
$T8 = 388
$T9 = 420
$T10 = 452
$T11 = 484
tv174 = 504
tv153 = 504
__$ArrayPad$ = 512
this$ = 560
cursor_type$ = 568
out_offset$ = 576
out_size$ = 584
out_uv_border$ = 592
out_uv_fill$ = 600
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z PROC ; ImFontAtlas::GetMouseCursorTexData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2237
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 86					; 00000056H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+600]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2238
	cmp	DWORD PTR cursor_type$[rbp], -1
	jle	SHORT $LN3@GetMouseCu
	cmp	DWORD PTR cursor_type$[rbp], 9
	jl	SHORT $LN2@GetMouseCu
$LN3@GetMouseCu:
; Line 2239
	xor	al, al
	jmp	$LN1@GetMouseCu
$LN2@GetMouseCu:
; Line 2240
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN4@GetMouseCu
; Line 2241
	xor	al, al
	jmp	$LN1@GetMouseCu
$LN4@GetMouseCu:
; Line 2243
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+1156], -1
	jne	SHORT $LN6@GetMouseCu
	mov	eax, DWORD PTR ?__LINE__Var@?0??GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU3@1@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@JHOLDEIK@?$AAP?$AAa?$AAc?$AAk?$AAI?$AAd?$AAM?$AAo?$AAu?$AAs?$AAe?$AAC?$AAu?$AAr?$AAs@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@GetMouseCu:
; Line 2244
	mov	rax, QWORD PTR this$[rbp]
	mov	edx, DWORD PTR [rax+1156]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ; ImFontAtlas::GetCustomRectByIndex
	mov	QWORD PTR r$[rbp], rax
; Line 2245
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR r$[rbp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm1, eax
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	movsxd	rcx, DWORD PTR cursor_type$[rbp]
	imul	rcx, rcx, 24
	lea	rdx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 8
	imul	rdx, rdx, 0
	add	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR pos$[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
; Line 2246
	movsxd	rax, DWORD PTR cursor_type$[rbp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR size$[rbp], rax
; Line 2247
	mov	rax, QWORD PTR out_size$[rbp]
	mov	rcx, QWORD PTR size$[rbp]
	mov	QWORD PTR [rax], rcx
; Line 2248
	movsxd	rax, DWORD PTR cursor_type$[rbp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:?FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA@@3QAY02$$CBUImVec2@@A
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rax, QWORD PTR [rax+rcx]
	mov	rcx, QWORD PTR out_offset$[rbp]
	mov	QWORD PTR [rcx], rax
; Line 2249
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??D@YA?AUImVec2@@AEBU0@0@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out_uv_border$[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 2250
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv153[rbp], rax
	lea	r8, QWORD PTR size$[rbp]
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T7[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR tv153[rbp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rbp]
	call	??D@YA?AUImVec2@@AEBU0@0@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out_uv_border$[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 2251
	movss	xmm0, DWORD PTR pos$[rbp]
	addss	xmm0, DWORD PTR __real@42da0000
	movss	DWORD PTR pos$[rbp], xmm0
; Line 2252
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	r8, rax
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T9[rbp]
	call	??D@YA?AUImVec2@@AEBU0@0@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out_uv_fill$[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 2253
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv174[rbp], rax
	lea	r8, QWORD PTR size$[rbp]
	lea	rdx, QWORD PTR pos$[rbp]
	lea	rcx, QWORD PTR $T10[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rcx, QWORD PTR tv174[rbp]
	mov	r8, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rbp]
	call	??D@YA?AUImVec2@@AEBU0@0@Z		; operator*
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out_uv_fill$[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 2254
	mov	al, 1
$LN1@GetMouseCu:
; Line 2255
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+536]
	pop	rdi
	pop	rbp
	ret	0
?GetMouseCursorTexData@ImFontAtlas@@QEAA_NHPEAUImVec2@@0QEAU2@1@Z ENDP ; ImFontAtlas::GetMouseCursorTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
this$ = 288
rect$ = 296
out_uv_min$ = 304
out_uv_max$ = 312
?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z PROC ; ImFontAtlas::CalcCustomRectUV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2229
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2230
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+48], 0
	jle	SHORT $LN3@CalcCustom
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+52], 0
	jg	SHORT $LN4@CalcCustom
$LN3@CalcCustom:
	mov	eax, DWORD PTR ?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DM@CMBJAGBP@?$AAT?$AAe?$AAx?$AAW?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@CalcCustom:
; Line 2231
	mov	rcx, QWORD PTR rect$[rbp]
	call	?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ; ImFontAtlasCustomRect::IsPacked
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@CalcCustom
	mov	eax, DWORD PTR ?__LINE__Var@?0??CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@DEJIAPCP@?$AAr?$AAe?$AAc?$AAt?$AA?9?$AA?$DO?$AAI?$AAs?$AAP?$AAa?$AAc?$AAk?$AAe?$AAd?$AA?$CI@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@CalcCustom:
; Line 2232
	mov	rax, QWORD PTR rect$[rbp]
	movzx	eax, WORD PTR [rax+6]
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rbp]
	mulss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR rect$[rbp]
	movzx	eax, WORD PTR [rax+4]
	cvtsi2ss xmm1, eax
	mov	rax, QWORD PTR this$[rbp]
	mulss	xmm1, DWORD PTR [rax+56]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_uv_min$[rbp]
	mov	QWORD PTR [rcx], rax
; Line 2233
	mov	rax, QWORD PTR rect$[rbp]
	movzx	eax, WORD PTR [rax+6]
	mov	rcx, QWORD PTR rect$[rbp]
	movzx	ecx, WORD PTR [rcx+2]
	add	eax, ecx
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR this$[rbp]
	mulss	xmm0, DWORD PTR [rax+60]
	mov	rax, QWORD PTR rect$[rbp]
	movzx	eax, WORD PTR [rax+4]
	mov	rcx, QWORD PTR rect$[rbp]
	movzx	ecx, WORD PTR [rcx]
	add	eax, ecx
	cvtsi2ss xmm1, eax
	mov	rax, QWORD PTR this$[rbp]
	mulss	xmm1, DWORD PTR [rax+56]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_uv_max$[rbp]
	mov	QWORD PTR [rcx], rax
; Line 2234
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?CalcCustomRectUV@ImFontAtlas@@QEBAXPEBUImFontAtlasCustomRect@@PEAUImVec2@@1@Z ENDP ; ImFontAtlas::CalcCustomRectUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z
_TEXT	SEGMENT
tv74 = 192
this$ = 240
index$ = 248
?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z PROC ; ImFontAtlas::GetCustomRectByIndex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2662
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR index$[rbp], 0
	jge	SHORT $LN3@GetCustomR
	mov	r8d, 2662				; 00000a66H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BG@HMJJDGFN@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@GetCustomR:
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR tv74[rbp], rax
	mov	edx, DWORD PTR index$[rbp]
	mov	rcx, QWORD PTR tv74[rbp]
	call	??A?$ImVector@UImFontAtlasCustomRect@@@@QEAAAEAUImFontAtlasCustomRect@@H@Z ; ImVector<ImFontAtlasCustomRect>::operator[]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?GetCustomRectByIndex@ImFontAtlas@@QEAAPEAUImFontAtlasCustomRect@@H@Z ENDP ; ImFontAtlas::GetCustomRectByIndex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z
_TEXT	SEGMENT
r$ = 8
tv91 = 248
__$ArrayPad$ = 256
this$ = 304
font$ = 312
id$ = 320
width$ = 328
height$ = 336
advance_x$ = 344
offset$ = 352
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z PROC ; ImFontAtlas::AddCustomRectFontGlyph, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2210
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	WORD PTR [rsp+24], r8w
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2214
	cmp	QWORD PTR font$[rbp], 0
	jne	SHORT $LN3@AddCustomR
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
	add	eax, 4
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BE@PBFICKNN@?$AAf?$AAo?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@AddCustomR:
; Line 2215
	cmp	DWORD PTR width$[rbp], 0
	jle	SHORT $LN4@AddCustomR
	cmp	DWORD PTR width$[rbp], 65535		; 0000ffffH
	jle	SHORT $LN5@AddCustomR
$LN4@AddCustomR:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
	add	eax, 5
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@AddCustomR:
; Line 2216
	cmp	DWORD PTR height$[rbp], 0
	jle	SHORT $LN6@AddCustomR
	cmp	DWORD PTR height$[rbp], 65535		; 0000ffffH
	jle	SHORT $LN7@AddCustomR
$LN6@AddCustomR:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@AddCustomR:
; Line 2217
	lea	rcx, QWORD PTR r$[rbp]
	call	??0ImFontAtlasCustomRect@@QEAA@XZ	; ImFontAtlasCustomRect::ImFontAtlasCustomRect
; Line 2218
	movzx	eax, WORD PTR width$[rbp]
	mov	WORD PTR r$[rbp], ax
; Line 2219
	movzx	eax, WORD PTR height$[rbp]
	mov	WORD PTR r$[rbp+2], ax
; Line 2220
	movzx	eax, WORD PTR id$[rbp]
	mov	DWORD PTR r$[rbp+8], eax
; Line 2221
	movss	xmm0, DWORD PTR advance_x$[rbp]
	movss	DWORD PTR r$[rbp+12], xmm0
; Line 2222
	mov	rax, QWORD PTR offset$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR r$[rbp+16], rax
; Line 2223
	mov	rax, QWORD PTR font$[rbp]
	mov	QWORD PTR r$[rbp+24], rax
; Line 2224
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR tv91[rbp], rax
	lea	rdx, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR tv91[rbp]
	call	?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ; ImVector<ImFontAtlasCustomRect>::push_back
; Line 2225
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+88]
	dec	eax
; Line 2226
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?AddCustomRectFontGlyph@ImFontAtlas@@QEAAHPEAUImFont@@GHHMAEBUImVec2@@@Z ENDP ; ImFontAtlas::AddCustomRectFontGlyph
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z
_TEXT	SEGMENT
r$ = 8
tv83 = 248
__$ArrayPad$ = 256
this$ = 304
width$ = 312
height$ = 320
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z PROC	; ImFontAtlas::AddCustomRectRegular, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2199
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2200
	cmp	DWORD PTR width$[rbp], 0
	jle	SHORT $LN3@AddCustomR
	cmp	DWORD PTR width$[rbp], 65535		; 0000ffffH
	jle	SHORT $LN4@AddCustomR
$LN3@AddCustomR:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DK@GHLOFHKF@?$AAw?$AAi?$AAd?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAw?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@AddCustomR:
; Line 2201
	cmp	DWORD PTR height$[rbp], 0
	jle	SHORT $LN5@AddCustomR
	cmp	DWORD PTR height$[rbp], 65535		; 0000ffffH
	jle	SHORT $LN6@AddCustomR
$LN5@AddCustomR:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@CAIIJEKF@?$AAh?$AAe?$AAi?$AAg?$AAh?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAh@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@AddCustomR:
; Line 2202
	lea	rcx, QWORD PTR r$[rbp]
	call	??0ImFontAtlasCustomRect@@QEAA@XZ	; ImFontAtlasCustomRect::ImFontAtlasCustomRect
; Line 2203
	movzx	eax, WORD PTR width$[rbp]
	mov	WORD PTR r$[rbp], ax
; Line 2204
	movzx	eax, WORD PTR height$[rbp]
	mov	WORD PTR r$[rbp+2], ax
; Line 2205
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR tv83[rbp], rax
	lea	rdx, QWORD PTR r$[rbp]
	mov	rcx, QWORD PTR tv83[rbp]
	call	?push_back@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXAEBUImFontAtlasCustomRect@@@Z ; ImVector<ImFontAtlasCustomRect>::push_back
; Line 2206
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+88]
	dec	eax
; Line 2207
	mov	edi, eax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?AddCustomRectRegular@ImFontAtlas@@QEAAHHH@Z ENDP	; ImFontAtlas::AddCustomRectRegular
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesVietnamese, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3044
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3057
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ@4QBGB
	add	rcx, rax
	mov	rax, rcx
; Line 3058
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetGlyphRangesVietnamese@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesVietnamese
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesThai, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3032
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3040
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ@4QBGB
	add	rcx, rax
	mov	rax, rcx
; Line 3041
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetGlyphRangesThai@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesThai
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesCyrillic, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3019
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3028
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ@4QBGB
	add	rcx, rax
	mov	rax, rcx
; Line 3029
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetGlyphRangesCyrillic@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesCyrillic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ PROC ; ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2861
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2920
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@GetGlyphRa
; Line 2922
	lea	rax, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	lea	rcx, OFFSET FLAT:?base_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 2923
	lea	rax, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	add	rax, 24
	mov	r9, rax
	mov	r8d, 2500				; 000009c4H
	lea	rdx, OFFSET FLAT:?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4QBFB
	mov	ecx, 19968				; 00004e00H
	call	?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z ; UnpackAccumulativeOffsetsIntoRanges
$LN2@GetGlyphRa:
; Line 2925
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	add	rcx, rax
	mov	rax, rcx
; Line 2926
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?GetGlyphRangesChineseSimplifiedCommon@ImFontAtlas@@QEAAPEBGXZ ENDP ; ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesChineseFull, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2831
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2843
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ@4QBGB
	add	rcx, rax
	mov	rax, rcx
; Line 2844
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetGlyphRangesChineseFull@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesChineseFull
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesJapanese, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2929
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3010
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@GetGlyphRa
; Line 3012
	lea	rax, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	lea	rcx, OFFSET FLAT:?base_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 20
	rep movsb
; Line 3013
	lea	rax, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	add	rax, 20
	mov	r9, rax
	mov	r8d, 2999				; 00000bb7H
	lea	rdx, OFFSET FLAT:?accumulative_offsets_from_0x4E00@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4QBFB
	mov	ecx, 19968				; 00004e00H
	call	?UnpackAccumulativeOffsetsIntoRanges@@YAXHPEBFHPEAG@Z ; UnpackAccumulativeOffsetsIntoRanges
$LN2@GetGlyphRa:
; Line 3015
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?full_ranges@?1??GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ@4PAGA
	add	rcx, rax
	mov	rax, rcx
; Line 3016
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?GetGlyphRangesJapanese@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesJapanese
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesKorean, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2818
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2827
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ@4QBGB
	add	rcx, rax
	mov	rax, rcx
; Line 2828
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetGlyphRangesKorean@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesKorean
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ
_TEXT	SEGMENT
this$ = 224
?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ PROC	; ImFontAtlas::GetGlyphRangesDefault, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2808
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2814
	mov	eax, 2
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:?ranges@?1??GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ@4QBGB
	add	rcx, rax
	mov	rax, rcx
; Line 2815
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ ENDP	; ImFontAtlas::GetGlyphRangesDefault
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
_TEXT	SEGMENT
pixels$4 = 8
src$5 = 40
dst$6 = 72
n$7 = 100
tv91 = 308
__$ArrayPad$ = 312
this$ = 352
out_pixels$ = 360
out_width$ = 368
out_height$ = 376
out_bytes_per_pixel$ = 384
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z PROC ; ImFontAtlas::GetTexDataAsRGBA32, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2048
$LN11:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 376				; 00000178H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+408]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2051
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	$LN5@GetTexData
; Line 2053
	mov	QWORD PTR pixels$4[rbp], 0
; Line 2054
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, QWORD PTR pixels$4[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ; ImFontAtlas::GetTexDataAsAlpha8
; Line 2055
	cmp	QWORD PTR pixels$4[rbp], 0
	je	$LN6@GetTexData
; Line 2057
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR this$[rbp]
	movsxd	rcx, DWORD PTR [rcx+52]
	imul	rax, rcx
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+40], rax
; Line 2058
	mov	rax, QWORD PTR pixels$4[rbp]
	mov	QWORD PTR src$5[rbp], rax
; Line 2059
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR dst$6[rbp], rax
; Line 2060
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+48]
	imul	eax, DWORD PTR [rcx+52]
	mov	DWORD PTR n$7[rbp], eax
	jmp	SHORT $LN4@GetTexData
$LN2@GetTexData:
	mov	eax, DWORD PTR n$7[rbp]
	dec	eax
	mov	DWORD PTR n$7[rbp], eax
$LN4@GetTexData:
	cmp	DWORD PTR n$7[rbp], 0
	jle	SHORT $LN3@GetTexData
; Line 2061
	mov	rax, QWORD PTR src$5[rbp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv91[rbp], eax
	mov	rax, QWORD PTR src$5[rbp]
	inc	rax
	mov	QWORD PTR src$5[rbp], rax
	mov	eax, DWORD PTR tv91[rbp]
	shl	eax, 24
	or	eax, 16711680				; 00ff0000H
	or	eax, 65280				; 0000ff00H
	or	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR dst$6[rbp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR dst$6[rbp]
	add	rax, 4
	mov	QWORD PTR dst$6[rbp], rax
	jmp	SHORT $LN2@GetTexData
$LN3@GetTexData:
$LN6@GetTexData:
$LN5@GetTexData:
; Line 2065
	mov	rax, QWORD PTR out_pixels$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax], rcx
; Line 2066
	cmp	QWORD PTR out_width$[rbp], 0
	je	SHORT $LN7@GetTexData
	mov	rax, QWORD PTR out_width$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax], ecx
$LN7@GetTexData:
; Line 2067
	cmp	QWORD PTR out_height$[rbp], 0
	je	SHORT $LN8@GetTexData
	mov	rax, QWORD PTR out_height$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax], ecx
$LN8@GetTexData:
; Line 2068
	cmp	QWORD PTR out_bytes_per_pixel$[rbp], 0
	je	SHORT $LN9@GetTexData
	mov	rax, QWORD PTR out_bytes_per_pixel$[rbp]
	mov	DWORD PTR [rax], 4
$LN9@GetTexData:
; Line 2069
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?GetTexDataAsRGBA32@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ENDP ; ImFontAtlas::GetTexDataAsRGBA32
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z
_TEXT	SEGMENT
this$ = 224
out_pixels$ = 232
out_width$ = 240
out_height$ = 248
out_bytes_per_pixel$ = 256
?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z PROC ; ImFontAtlas::GetTexDataAsAlpha8, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2036
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2038
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN2@GetTexData
; Line 2039
	mov	rcx, QWORD PTR this$[rbp]
	call	?Build@ImFontAtlas@@QEAA_NXZ		; ImFontAtlas::Build
$LN2@GetTexData:
; Line 2041
	mov	rax, QWORD PTR out_pixels$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax], rcx
; Line 2042
	cmp	QWORD PTR out_width$[rbp], 0
	je	SHORT $LN3@GetTexData
	mov	rax, QWORD PTR out_width$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax], ecx
$LN3@GetTexData:
; Line 2043
	cmp	QWORD PTR out_height$[rbp], 0
	je	SHORT $LN4@GetTexData
	mov	rax, QWORD PTR out_height$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+52]
	mov	DWORD PTR [rax], ecx
$LN4@GetTexData:
; Line 2044
	cmp	QWORD PTR out_bytes_per_pixel$[rbp], 0
	je	SHORT $LN5@GetTexData
	mov	rax, QWORD PTR out_bytes_per_pixel$[rbp]
	mov	DWORD PTR [rax], 1
$LN5@GetTexData:
; Line 2045
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?GetTexDataAsAlpha8@ImFontAtlas@@QEAAXPEAPEAEPEAH11@Z ENDP ; ImFontAtlas::GetTexDataAsAlpha8
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Build@ImFontAtlas@@QEAA_NXZ
_TEXT	SEGMENT
builder_io$ = 8
tv85 = 216
this$ = 256
?Build@ImFontAtlas@@QEAA_NXZ PROC			; ImFontAtlas::Build, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2258
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2259
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN5@Build
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN6@Build
$LN5@Build:
	mov	eax, DWORD PTR ?__LINE__Var@?0??Build@ImFontAtlas@@QEAA_NXZ@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@Build:
; Line 2262
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+104], 0
	jne	SHORT $LN2@Build
; Line 2263
	xor	edx, edx
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFontDefault
$LN2@Build:
; Line 2270
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+1144]
	mov	QWORD PTR builder_io$[rbp], rax
; Line 2271
	cmp	QWORD PTR builder_io$[rbp], 0
	jne	SHORT $LN3@Build
; Line 2276
	call	?ImFontAtlasGetBuilderForStbTruetype@@YAPEBUImFontBuilderIO@@XZ ; ImFontAtlasGetBuilderForStbTruetype
	mov	QWORD PTR builder_io$[rbp], rax
$LN3@Build:
; Line 2283
	mov	rax, QWORD PTR builder_io$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv85[rbp], rax
	mov	rcx, QWORD PTR this$[rbp]
	call	QWORD PTR tv85[rbp]
; Line 2284
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?Build@ImFontAtlas@@QEAA_NXZ ENDP			; ImFontAtlas::Build
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Clear@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Clear@ImFontAtlas@@QEAAXXZ PROC			; ImFontAtlas::Clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2029
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2030
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearInputData@ImFontAtlas@@QEAAXXZ	; ImFontAtlas::ClearInputData
; Line 2031
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearTexData@ImFontAtlas@@QEAAXXZ	; ImFontAtlas::ClearTexData
; Line 2032
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearFonts@ImFontAtlas@@QEAAXXZ	; ImFontAtlas::ClearFonts
; Line 2033
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Clear@ImFontAtlas@@QEAAXXZ ENDP			; ImFontAtlas::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearFonts@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearFonts@ImFontAtlas@@QEAAXXZ PROC			; ImFontAtlas::ClearFonts, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2022
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2023
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN3@ClearFonts
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN4@ClearFonts
$LN3@ClearFonts:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ClearFonts@ImFontAtlas@@QEAAXXZ@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@ClearFonts:
; Line 2024
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	?clear_delete@?$ImVector@PEAUImFont@@@@QEAAXXZ ; ImVector<ImFont *>::clear_delete
; Line 2025
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+25], 0
; Line 2026
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearFonts@ImFontAtlas@@QEAAXXZ ENDP			; ImFontAtlas::ClearFonts
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearTexData@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?ClearTexData@ImFontAtlas@@QEAAXXZ PROC			; ImFontAtlas::ClearTexData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2009
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2010
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN5@ClearTexDa
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN6@ClearTexDa
$LN5@ClearTexDa:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ClearTexData@ImFontAtlas@@QEAAXXZ@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@ClearTexDa:
; Line 2011
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN2@ClearTexDa
; Line 2012
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+32]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN2@ClearTexDa:
; Line 2013
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN3@ClearTexDa
; Line 2014
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+40]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@ClearTexDa:
; Line 2015
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+32], 0
; Line 2016
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+40], 0
; Line 2017
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+26], 0
; Line 2019
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?ClearTexData@ImFontAtlas@@QEAAXXZ ENDP			; ImFontAtlas::ClearTexData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearInputData@ImFontAtlas@@QEAAXXZ
_TEXT	SEGMENT
i$1 = 4
i$2 = 36
tv182 = 248
tv175 = 248
tv160 = 248
tv150 = 248
tv139 = 248
tv131 = 248
tv90 = 248
tv82 = 248
this$ = 288
?ClearInputData@ImFontAtlas@@QEAAXXZ PROC		; ImFontAtlas::ClearInputData, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1986
$LN13:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1987
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN11@ClearInput
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN12@ClearInput
$LN11@ClearInput:
	mov	eax, DWORD PTR ?__LINE__Var@?0??ClearInputData@ImFontAtlas@@QEAAXXZ@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@ClearInput:
; Line 1988
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@ClearInput
$LN2@ClearInput:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@ClearInput:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+104]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@ClearInput
; Line 1989
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv82[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv82[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@ClearInput
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv90[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv90[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	movzx	eax, BYTE PTR [rax+12]
	test	eax, eax
	je	SHORT $LN8@ClearInput
; Line 1991
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv131[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv131[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	mov	rcx, QWORD PTR [rax]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 1992
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv139[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv139[rbp]
	call	??A?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@H@Z ; ImVector<ImFontConfig>::operator[]
	mov	QWORD PTR [rax], 0
$LN8@ClearInput:
; Line 1993
	jmp	$LN2@ClearInput
$LN3@ClearInput:
; Line 1996
	mov	DWORD PTR i$2[rbp], 0
	jmp	SHORT $LN7@ClearInput
$LN5@ClearInput:
	mov	eax, DWORD PTR i$2[rbp]
	inc	eax
	mov	DWORD PTR i$2[rbp], eax
$LN7@ClearInput:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+72]
	cmp	DWORD PTR i$2[rbp], eax
	jge	$LN6@ClearInput
; Line 1997
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv150[rbp], rax
	mov	edx, DWORD PTR i$2[rbp]
	mov	rcx, QWORD PTR tv150[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+112]
	cmp	QWORD PTR [rax+72], rcx
	jb	$LN9@ClearInput
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv160[rbp], rax
	mov	edx, DWORD PTR i$2[rbp]
	mov	rcx, QWORD PTR tv160[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	movsxd	rcx, DWORD PTR [rcx+104]
	imul	rcx, rcx, 136				; 00000088H
	mov	rdx, QWORD PTR this$[rbp]
	add	rcx, QWORD PTR [rdx+112]
	cmp	QWORD PTR [rax+72], rcx
	jae	SHORT $LN9@ClearInput
; Line 1999
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv175[rbp], rax
	mov	edx, DWORD PTR i$2[rbp]
	mov	rcx, QWORD PTR tv175[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rax+72], 0
; Line 2000
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv182[rbp], rax
	mov	edx, DWORD PTR i$2[rbp]
	mov	rcx, QWORD PTR tv182[rbp]
	call	??A?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
	mov	rax, QWORD PTR [rax]
	xor	ecx, ecx
	mov	WORD PTR [rax+80], cx
$LN9@ClearInput:
; Line 2001
	jmp	$LN5@ClearInput
$LN6@ClearInput:
; Line 2002
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	?clear@?$ImVector@UImFontConfig@@@@QEAAXXZ ; ImVector<ImFontConfig>::clear
; Line 2003
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	?clear@?$ImVector@UImFontAtlasCustomRect@@@@QEAAXXZ ; ImVector<ImFontAtlasCustomRect>::clear
; Line 2004
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+1160], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+1156], -1
; Line 2005
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+25], 0
; Line 2006
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?ClearInputData@ImFontAtlas@@QEAAXXZ ENDP		; ImFontAtlas::ClearInputData
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
compressed_ttf_size$ = 4
compressed_ttf$ = 40
font$ = 72
tv89 = 280
tv90 = 288
this$ = 336
compressed_ttf_data_base85$ = 344
size_pixels$ = 352
font_cfg$ = 360
glyph_ranges$ = 368
?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2189
$LN4:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2190
	mov	rax, QWORD PTR compressed_ttf_data_base85$[rbp]
	mov	QWORD PTR tv89[rbp], rax
	mov	QWORD PTR tv90[rbp], -1
$LL3@AddFontFro:
	inc	QWORD PTR tv90[rbp]
	mov	rax, QWORD PTR tv89[rbp]
	mov	rcx, QWORD PTR tv90[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL3@AddFontFro
	mov	rax, QWORD PTR tv90[rbp]
	add	eax, 4
	cdq
	mov	ecx, 5
	idiv	ecx
	shl	eax, 2
	mov	DWORD PTR compressed_ttf_size$[rbp], eax
; Line 2191
	movsxd	rax, DWORD PTR compressed_ttf_size$[rbp]
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR compressed_ttf$[rbp], rax
; Line 2192
	mov	rdx, QWORD PTR compressed_ttf$[rbp]
	mov	rcx, QWORD PTR compressed_ttf_data_base85$[rbp]
	call	?Decode85@@YAXPEBEPEAE@Z		; Decode85
; Line 2193
	mov	rax, QWORD PTR glyph_ranges$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR font_cfg$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR size_pixels$[rbp]
	mov	r8d, DWORD PTR compressed_ttf_size$[rbp]
	mov	rdx, QWORD PTR compressed_ttf$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedTTF
	mov	QWORD PTR font$[rbp], rax
; Line 2194
	mov	rcx, QWORD PTR compressed_ttf$[rbp]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
; Line 2195
	mov	rax, QWORD PTR font$[rbp]
; Line 2196
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
buf_decompressed_size$ = 4
buf_decompressed_data$ = 40
font_cfg$ = 80
$T4 = 632
$T5 = 672
$T6 = 848
tv76 = 1000
__$ArrayPad$ = 1008
this$ = 1056
compressed_ttf_data$ = 1064
compressed_ttf_size$ = 1072
size_pixels$ = 1080
font_cfg_template$ = 1088
glyph_ranges$ = 1096
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromMemoryCompressedTTF, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2177
$LN6:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1072				; 00000430H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 160				; 000000a0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1112]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2178
	mov	rcx, QWORD PTR compressed_ttf_data$[rbp]
	call	?stb_decompress_length@@YAIPEBE@Z	; stb_decompress_length
	mov	DWORD PTR buf_decompressed_size$[rbp], eax
; Line 2179
	mov	eax, DWORD PTR buf_decompressed_size$[rbp]
	mov	ecx, eax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR buf_decompressed_data$[rbp], rax
; Line 2180
	mov	r8d, DWORD PTR compressed_ttf_size$[rbp]
	mov	rdx, QWORD PTR compressed_ttf_data$[rbp]
	mov	rcx, QWORD PTR buf_decompressed_data$[rbp]
	call	?stb_decompress@@YAIPEAEPEBEI@Z		; stb_decompress
; Line 2182
	cmp	QWORD PTR font_cfg_template$[rbp], 0
	je	SHORT $LN3@AddFontFro
	lea	rax, QWORD PTR $T5[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR font_cfg_template$[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR tv76[rbp], rax
	jmp	SHORT $LN4@AddFontFro
$LN3@AddFontFro:
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImFontConfig@@QEAA@XZ		; ImFontConfig::ImFontConfig
	mov	QWORD PTR tv76[rbp], rax
$LN4@AddFontFro:
	mov	rax, QWORD PTR tv76[rbp]
	mov	QWORD PTR $T4[rbp], rax
	lea	rax, QWORD PTR font_cfg$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T4[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
; Line 2183
	cmp	QWORD PTR font_cfg$[rbp], 0
	je	SHORT $LN5@AddFontFro
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@AddFontFro:
; Line 2184
	mov	BYTE PTR font_cfg$[rbp+12], 1
; Line 2185
	mov	rax, QWORD PTR glyph_ranges$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR font_cfg$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR size_pixels$[rbp]
	mov	r8d, DWORD PTR buf_decompressed_size$[rbp]
	mov	rdx, QWORD PTR buf_decompressed_data$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryTTF
; Line 2186
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1024]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddFontFromMemoryCompressedTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBXHMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromMemoryCompressedTTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
font_cfg$ = 16
$T4 = 568
$T5 = 608
$T6 = 784
tv86 = 932
tv77 = 936
__$ArrayPad$ = 944
this$ = 992
ttf_data$ = 1000
ttf_size$ = 1008
size_pixels$ = 1016
font_cfg_template$ = 1024
glyph_ranges$ = 1032
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromMemoryTTF, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2164
$LN11:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 992				; 000003e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 144				; 00000090H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1032]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2165
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN4@AddFontFro
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN5@AddFontFro
$LN4@AddFontFro:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@AddFontFro:
; Line 2166
	cmp	QWORD PTR font_cfg_template$[rbp], 0
	je	SHORT $LN6@AddFontFro
	lea	rax, QWORD PTR $T5[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR font_cfg_template$[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR tv77[rbp], rax
	jmp	SHORT $LN7@AddFontFro
$LN6@AddFontFro:
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImFontConfig@@QEAA@XZ		; ImFontConfig::ImFontConfig
	mov	QWORD PTR tv77[rbp], rax
$LN7@AddFontFro:
	mov	rax, QWORD PTR tv77[rbp]
	mov	QWORD PTR $T4[rbp], rax
	lea	rax, QWORD PTR font_cfg$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T4[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
; Line 2167
	cmp	QWORD PTR font_cfg$[rbp], 0
	je	SHORT $LN8@AddFontFro
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CO@ODFMNMML@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?4?$AAF?$AAo?$AAn?$AAt?$AAD?$AAa@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN8@AddFontFro:
; Line 2168
	mov	rax, QWORD PTR ttf_data$[rbp]
	mov	QWORD PTR font_cfg$[rbp], rax
; Line 2169
	mov	eax, DWORD PTR ttf_size$[rbp]
	mov	DWORD PTR font_cfg$[rbp+8], eax
; Line 2170
	movss	xmm0, DWORD PTR size_pixels$[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN9@AddFontFro
	movss	xmm0, DWORD PTR size_pixels$[rbp]
	movss	DWORD PTR tv86[rbp], xmm0
	jmp	SHORT $LN10@AddFontFro
$LN9@AddFontFro:
	movss	xmm0, DWORD PTR font_cfg$[rbp+20]
	movss	DWORD PTR tv86[rbp], xmm0
$LN10@AddFontFro:
	movss	xmm0, DWORD PTR tv86[rbp]
	movss	DWORD PTR font_cfg$[rbp+20], xmm0
; Line 2171
	cmp	QWORD PTR glyph_ranges$[rbp], 0
	je	SHORT $LN2@AddFontFro
; Line 2172
	mov	rax, QWORD PTR glyph_ranges$[rbp]
	mov	QWORD PTR font_cfg$[rbp+56], rax
$LN2@AddFontFro:
; Line 2173
	lea	rdx, QWORD PTR font_cfg$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ; ImFontAtlas::AddFont
; Line 2174
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+960]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromMemoryTTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z
_TEXT	SEGMENT
data_size$ = 8
data$ = 40
font_cfg$ = 80
p$5 = 248
$T6 = 664
$T7 = 704
$T8 = 880
tv157 = 1032
tv89 = 1032
tv158 = 1040
__$ArrayPad$ = 1048
this$ = 1088
filename$ = 1096
size_pixels$ = 1104
font_cfg_template$ = 1112
glyph_ranges$ = 1120
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z PROC ; ImFontAtlas::AddFontFromFileTTF, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2142
$LN14:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1104				; 00000450H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 168				; 000000a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2143
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN8@AddFontFro
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN9@AddFontFro
$LN8@AddFontFro:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@AddFontFro:
; Line 2144
	mov	QWORD PTR data_size$[rbp], 0
; Line 2145
	xor	r9d, r9d
	lea	r8, QWORD PTR data_size$[rbp]
	lea	rdx, OFFSET FLAT:??_C@_02JDPG@rb@
	mov	rcx, QWORD PTR filename$[rbp]
	call	?ImFileLoadToMemory@@YAPEAXPEBD0PEA_KH@Z ; ImFileLoadToMemory
	mov	QWORD PTR data$[rbp], rax
; Line 2146
	cmp	QWORD PTR data$[rbp], 0
	jne	SHORT $LN5@AddFontFro
; Line 2148
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@AddFontFro
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z@4JA
	add	eax, 6
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1EG@KCPDJPKE@?$AA?$CI?$AA0?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAo?$AAu?$AAl?$AAd?$AA?5?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@AddFontFro:
; Line 2149
	xor	eax, eax
	jmp	$LN1@AddFontFro
$LN5@AddFontFro:
; Line 2151
	cmp	QWORD PTR font_cfg_template$[rbp], 0
	je	SHORT $LN11@AddFontFro
	lea	rax, QWORD PTR $T7[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR font_cfg_template$[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
	lea	rax, QWORD PTR $T7[rbp]
	mov	QWORD PTR tv89[rbp], rax
	jmp	SHORT $LN12@AddFontFro
$LN11@AddFontFro:
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImFontConfig@@QEAA@XZ		; ImFontConfig::ImFontConfig
	mov	QWORD PTR tv89[rbp], rax
$LN12@AddFontFro:
	mov	rax, QWORD PTR tv89[rbp]
	mov	QWORD PTR $T6[rbp], rax
	lea	rax, QWORD PTR font_cfg$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T6[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
; Line 2152
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR font_cfg$[rbp+rax+86]
	test	eax, eax
	jne	$LN6@AddFontFro
; Line 2156
	mov	rax, QWORD PTR filename$[rbp]
	mov	QWORD PTR tv157[rbp], rax
	mov	QWORD PTR tv158[rbp], -1
$LL13@AddFontFro:
	inc	QWORD PTR tv158[rbp]
	mov	rax, QWORD PTR tv157[rbp]
	mov	rcx, QWORD PTR tv158[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL13@AddFontFro
	mov	rax, QWORD PTR tv158[rbp]
	mov	rcx, QWORD PTR filename$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$5[rbp], rax
	jmp	SHORT $LN4@AddFontFro
$LN2@AddFontFro:
	mov	rax, QWORD PTR p$5[rbp]
	dec	rax
	mov	QWORD PTR p$5[rbp], rax
$LN4@AddFontFro:
	mov	rax, QWORD PTR filename$[rbp]
	cmp	QWORD PTR p$5[rbp], rax
	jbe	SHORT $LN3@AddFontFro
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR p$5[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN3@AddFontFro
	mov	eax, 1
	imul	rax, rax, -1
	mov	rcx, QWORD PTR p$5[rbp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN3@AddFontFro
	jmp	SHORT $LN2@AddFontFro
$LN3@AddFontFro:
; Line 2157
	cvtss2sd xmm0, DWORD PTR size_pixels$[rbp]
	movsd	QWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR p$5[rbp]
	lea	r8, OFFSET FLAT:??_C@_0L@EPCGLJHG@?$CFs?0?5?$CF?40fpx@
	mov	edx, 40					; 00000028H
	lea	rcx, QWORD PTR font_cfg$[rbp+86]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
$LN6@AddFontFro:
; Line 2159
	mov	rax, QWORD PTR glyph_ranges$[rbp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR font_cfg$[rbp]
	mov	QWORD PTR [rsp+32], rax
	movss	xmm3, DWORD PTR size_pixels$[rbp]
	mov	r8d, DWORD PTR data_size$[rbp]
	mov	rdx, QWORD PTR data$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddFontFromMemoryTTF@ImFontAtlas@@QEAAPEAUImFont@@PEAXHMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryTTF
$LN1@AddFontFro:
; Line 2160
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1056]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddFontFromFileTTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ENDP ; ImFontAtlas::AddFontFromFileTTF
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
_TEXT	SEGMENT
font_cfg$ = 16
ttf_compressed_base85$ = 184
glyph_ranges$ = 216
font$ = 248
$T4 = 664
$T5 = 704
$T6 = 880
tv90 = 1032
tv68 = 1032
__$ArrayPad$ = 1040
this$ = 1088
font_cfg_template$ = 1096
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z PROC ; ImFontAtlas::AddFontDefault, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2121
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 1104				; 00000450H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 168				; 000000a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1144]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2122
	cmp	QWORD PTR font_cfg_template$[rbp], 0
	je	SHORT $LN6@AddFontDef
	lea	rax, QWORD PTR $T5[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR font_cfg_template$[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR tv68[rbp], rax
	jmp	SHORT $LN7@AddFontDef
$LN6@AddFontDef:
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImFontConfig@@QEAA@XZ		; ImFontConfig::ImFontConfig
	mov	QWORD PTR tv68[rbp], rax
$LN7@AddFontDef:
	mov	rax, QWORD PTR tv68[rbp]
	mov	QWORD PTR $T4[rbp], rax
	lea	rax, QWORD PTR font_cfg$[rbp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T4[rbp]
	mov	ecx, 136				; 00000088H
	rep movsb
; Line 2123
	cmp	QWORD PTR font_cfg_template$[rbp], 0
	jne	SHORT $LN2@AddFontDef
; Line 2125
	mov	DWORD PTR font_cfg$[rbp+28], 1
	mov	eax, DWORD PTR font_cfg$[rbp+28]
	mov	DWORD PTR font_cfg$[rbp+24], eax
; Line 2126
	mov	BYTE PTR font_cfg$[rbp+32], 1
$LN2@AddFontDef:
; Line 2128
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR font_cfg$[rbp+20]
	jb	SHORT $LN3@AddFontDef
; Line 2129
	movss	xmm0, DWORD PTR __real@41500000
	movss	DWORD PTR font_cfg$[rbp+20], xmm0
$LN3@AddFontDef:
; Line 2130
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR font_cfg$[rbp+rax+86]
	test	eax, eax
	jne	SHORT $LN4@AddFontDef
; Line 2131
	cvttss2si eax, DWORD PTR font_cfg$[rbp+20]
	mov	r9d, eax
	lea	r8, OFFSET FLAT:??_C@_0BG@CONABPA@ProggyClean?4ttf?0?5?$CFdpx@
	mov	edx, 40					; 00000028H
	lea	rcx, QWORD PTR font_cfg$[rbp+86]
	call	?ImFormatString@@YAHPEAD_KPEBDZZ	; ImFormatString
$LN4@AddFontDef:
; Line 2132
	mov	eax, 133				; 00000085H
	mov	WORD PTR font_cfg$[rbp+84], ax
; Line 2133
	movss	xmm0, DWORD PTR font_cfg$[rbp+20]
	divss	xmm0, DWORD PTR __real@41500000
	cvttss2si eax, xmm0
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR __real@3f800000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR font_cfg$[rbp+48], xmm0
; Line 2135
	call	?GetDefaultCompressedFontDataTTFBase85@@YAPEBDXZ ; GetDefaultCompressedFontDataTTFBase85
	mov	QWORD PTR ttf_compressed_base85$[rbp], rax
; Line 2136
	cmp	QWORD PTR font_cfg$[rbp+56], 0
	je	SHORT $LN8@AddFontDef
	mov	rax, QWORD PTR font_cfg$[rbp+56]
	mov	QWORD PTR tv90[rbp], rax
	jmp	SHORT $LN9@AddFontDef
$LN8@AddFontDef:
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetGlyphRangesDefault@ImFontAtlas@@QEAAPEBGXZ ; ImFontAtlas::GetGlyphRangesDefault
	mov	QWORD PTR tv90[rbp], rax
$LN9@AddFontDef:
	mov	rax, QWORD PTR tv90[rbp]
	mov	QWORD PTR glyph_ranges$[rbp], rax
; Line 2137
	mov	rax, QWORD PTR glyph_ranges$[rbp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR font_cfg$[rbp]
	movss	xmm2, DWORD PTR font_cfg$[rbp+20]
	mov	rdx, QWORD PTR ttf_compressed_base85$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddFontFromMemoryCompressedBase85TTF@ImFontAtlas@@QEAAPEAUImFont@@PEBDMPEBUImFontConfig@@PEBG@Z ; ImFontAtlas::AddFontFromMemoryCompressedBase85TTF
	mov	QWORD PTR font$[rbp], rax
; Line 2138
	mov	rax, QWORD PTR font$[rbp]
; Line 2139
	mov	rdi, rax
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1056]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddFontDefault@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ENDP ; ImFontAtlas::AddFontDefault
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z
_TEXT	SEGMENT
new_font_cfg$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
tv160 = 408
tv144 = 408
tv142 = 416
this$ = 464
font_cfg$ = 472
?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z PROC ; ImFontAtlas::AddFont, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 2072
$LN18:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 464				; 000001d0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 2073
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN8@AddFont
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN9@AddFont
$LN8@AddFont:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@AddFont:
; Line 2074
	mov	rax, QWORD PTR font_cfg$[rbp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@AddFont
	mov	rax, QWORD PTR font_cfg$[rbp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN11@AddFont
$LN10@AddFont:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GM@FAHJAOLI@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAF?$AAo?$AAn?$AAt?$AAD@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@AddFont:
; Line 2075
	mov	rax, QWORD PTR font_cfg$[rbp]
	movss	xmm0, DWORD PTR [rax+20]
	comiss	xmm0, DWORD PTR __real@00000000
	ja	SHORT $LN12@AddFont
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
	add	eax, 3
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@LEOIHPJH@?$AAf?$AAo?$AAn?$AAt?$AA_?$AAc?$AAf?$AAg?$AA?9?$AA?$DO?$AAS?$AAi?$AAz?$AAe?$AAP@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@AddFont:
; Line 2078
	mov	rax, QWORD PTR font_cfg$[rbp]
	movzx	eax, BYTE PTR [rax+72]
	test	eax, eax
	jne	$LN2@AddFont
; Line 2079
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	QWORD PTR tv144[rbp], rax
	mov	ecx, 112				; 00000070H
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR $T4[rbp], rax
	lea	rax, QWORD PTR $T6[rbp]
	mov	QWORD PTR $T5[rbp], rax
	mov	r8, QWORD PTR $T4[rbp]
	mov	rax, QWORD PTR $T5[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 112				; 00000070H
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T3[rbp], rax
	cmp	QWORD PTR $T3[rbp], 0
	je	SHORT $LN13@AddFont
	mov	rcx, QWORD PTR $T3[rbp]
	call	??0ImFont@@QEAA@XZ			; ImFont::ImFont
	mov	QWORD PTR tv142[rbp], rax
	jmp	SHORT $LN14@AddFont
$LN13@AddFont:
	mov	QWORD PTR tv142[rbp], 0
$LN14@AddFont:
	mov	rax, QWORD PTR tv142[rbp]
	mov	QWORD PTR $T2[rbp], rax
	mov	rax, QWORD PTR $T2[rbp]
	mov	QWORD PTR $T1[rbp], rax
	lea	rdx, QWORD PTR $T1[rbp]
	mov	rcx, QWORD PTR tv144[rbp]
	call	?push_back@?$ImVector@PEAUImFont@@@@QEAAXAEBQEAUImFont@@@Z ; ImVector<ImFont *>::push_back
	jmp	SHORT $LN3@AddFont
$LN2@AddFont:
; Line 2081
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	?empty@?$ImVector@PEAUImFont@@@@QEBA_NXZ ; ImVector<ImFont *>::empty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@AddFont
	lea	rax, OFFSET FLAT:??_C@_0CI@EDBCHFCN@Cannot?5use?5MergeMode?5for?5the?5fi@
	test	rax, rax
	jne	SHORT $LN3@AddFont
$LN15@AddFont:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4JA
	add	eax, 9
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1HI@KOOOLAEJ@?$AA?$CB?$AAF?$AAo?$AAn?$AAt?$AAs?$AA?4?$AAe?$AAm?$AAp?$AAt?$AAy?$AA?$CI?$AA?$CJ?$AA?5@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@AddFont:
; Line 2083
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv160[rbp], rax
	mov	rdx, QWORD PTR font_cfg$[rbp]
	mov	rcx, QWORD PTR tv160[rbp]
	call	?push_back@?$ImVector@UImFontConfig@@@@QEAAXAEBUImFontConfig@@@Z ; ImVector<ImFontConfig>::push_back
; Line 2084
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	?back@?$ImVector@UImFontConfig@@@@QEAAAEAUImFontConfig@@XZ ; ImVector<ImFontConfig>::back
	mov	QWORD PTR new_font_cfg$[rbp], rax
; Line 2085
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	cmp	QWORD PTR [rax+128], 0
	jne	SHORT $LN4@AddFont
; Line 2086
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	?back@?$ImVector@PEAUImFont@@@@QEAAAEAPEAUImFont@@XZ ; ImVector<ImFont *>::back
	mov	rcx, QWORD PTR new_font_cfg$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rcx+128], rax
$LN4@AddFont:
; Line 2087
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	movzx	eax, BYTE PTR [rax+12]
	test	eax, eax
	jne	SHORT $LN5@AddFont
; Line 2089
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	rcx, QWORD PTR new_font_cfg$[rbp]
	mov	QWORD PTR [rcx], rax
; Line 2090
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	mov	BYTE PTR [rax+12], 1
; Line 2091
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR new_font_cfg$[rbp]
	mov	rdx, QWORD PTR font_cfg$[rbp]
	mov	rdi, QWORD PTR [rcx]
	mov	rsi, QWORD PTR [rdx]
	mov	rcx, rax
	rep movsb
$LN5@AddFont:
; Line 2094
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	mov	rax, QWORD PTR [rax+128]
	movzx	eax, WORD PTR [rax+84]
	cmp	eax, 65535				; 0000ffffH
	jne	SHORT $LN6@AddFont
; Line 2095
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	mov	rax, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR font_cfg$[rbp]
	movzx	ecx, WORD PTR [rcx+84]
	mov	WORD PTR [rax+84], cx
$LN6@AddFont:
; Line 2098
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+25], 0
; Line 2099
	mov	rcx, QWORD PTR this$[rbp]
	call	?ClearTexData@ImFontAtlas@@QEAAXXZ	; ImFontAtlas::ClearTexData
; Line 2100
	mov	rax, QWORD PTR new_font_cfg$[rbp]
	mov	rax, QWORD PTR [rax+128]
; Line 2101
	lea	rsp, QWORD PTR [rbp+432]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z ENDP ; ImFontAtlas::AddFont
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
new_font_cfg$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
tv160 = 408
tv144 = 408
tv142 = 416
this$ = 464
font_cfg$ = 472
?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA PROC ; `ImFontAtlas::AddFont'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR $T4[rbp]
	mov	rax, QWORD PTR $T5[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T3[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??AddFont@ImFontAtlas@@QEAAPEAUImFont@@PEBUImFontConfig@@@Z@4HA ENDP ; `ImFontAtlas::AddFont'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImFontAtlas@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1ImFontAtlas@@QEAA@XZ PROC				; ImFontAtlas::~ImFontAtlas, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1980
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1981
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, BYTE PTR [rax+24]
	test	eax, eax
	jne	SHORT $LN3@ImFontAtla
	lea	rax, OFFSET FLAT:??_C@_0EN@DLIEKEGM@Cannot?5modify?5a?5locked?5ImFontAt@
	test	rax, rax
	jne	SHORT $LN4@ImFontAtla
$LN3@ImFontAtla:
	mov	eax, DWORD PTR ?__LINE__Var@?0???1ImFontAtlas@@QEAA@XZ@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LE@PGHOGCJ@?$AA?$CB?$AAL?$AAo?$AAc?$AAk?$AAe?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CC?$AAC?$AAa?$AAn@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@ImFontAtla:
; Line 1982
	mov	rcx, QWORD PTR this$[rbp]
	call	?Clear@ImFontAtlas@@QEAAXXZ		; ImFontAtlas::Clear
; Line 1983
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	??1?$ImVector@UImFontConfig@@@@QEAA@XZ	; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	??1?$ImVector@PEAUImFont@@@@QEAA@XZ	; ImVector<ImFont *>::~ImVector<ImFont *>
	npad	1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1ImFontAtlas@@QEAA@XZ ENDP				; ImFontAtlas::~ImFontAtlas
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImFontAtlas@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImFontAtlas@@QEAA@XZ PROC				; ImFontAtlas::ImFontAtlas, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1973
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 56					; 00000038H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 64					; 00000040H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	??0?$ImVector@PEAUImFont@@@@QEAA@XZ	; ImVector<ImFont *>::ImVector<ImFont *>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	??0?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::ImVector<ImFontAtlasCustomRect>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	??0?$ImVector@UImFontConfig@@@@QEAA@XZ	; ImVector<ImFontConfig>::ImVector<ImFontConfig>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	lea	r9, OFFSET FLAT:??0ImVec4@@QEAA@XZ	; ImVec4::ImVec4
	mov	r8d, 64					; 00000040H
	mov	edx, 16
	mov	rcx, rax
	call	??_H@YAXPEAX_K1P6APEAX0@Z@Z
; Line 1974
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 1168				; 00000490H
	rep stosb
; Line 1975
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+20], 1
; Line 1976
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+1160], -1
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+1156], -1
; Line 1977
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImFontAtlas@@QEAA@XZ ENDP				; ImFontAtlas::ImFontAtlas
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 72					; 00000048H
	call	??1?$ImVector@PEAUImFont@@@@QEAA@XZ	; ImVector<ImFont *>::~ImVector<ImFont *>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 88					; 00000058H
	call	??1?$ImVector@UImFontAtlasCustomRect@@@@QEAA@XZ ; ImVector<ImFontAtlasCustomRect>::~ImVector<ImFontAtlasCustomRect>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA PROC		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 104				; 00000068H
	call	??1?$ImVector@UImFontConfig@@@@QEAA@XZ	; ImVector<ImFontConfig>::~ImVector<ImFontConfig>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0???0ImFontAtlas@@QEAA@XZ@4HA ENDP		; `ImFontAtlas::ImFontAtlas'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ
_TEXT	SEGMENT
tv67 = 192
this$ = 240
?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ PROC		; ImFontAtlasCustomRect::IsPacked, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2578
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, WORD PTR [rax+4]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN3@IsPacked
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN4@IsPacked
$LN3@IsPacked:
	mov	DWORD PTR tv67[rbp], 0
$LN4@IsPacked:
	movzx	eax, BYTE PTR tv67[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?IsPacked@ImFontAtlasCustomRect@@QEBA_NXZ ENDP		; ImFontAtlasCustomRect::IsPacked
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImFontAtlasCustomRect@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 196
this$ = 256
??0ImFontAtlasCustomRect@@QEAA@XZ PROC			; ImFontAtlasCustomRect::ImFontAtlasCustomRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2577
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+2], ax
	xor	eax, eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx], ax
	mov	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+6], ax
	mov	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+4], ax
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+24], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
??0ImFontAtlasCustomRect@@QEAA@XZ ENDP			; ImFontAtlasCustomRect::ImFontAtlasCustomRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z
_TEXT	SEGMENT
max_codepoint$ = 4
n$1 = 36
$T2 = 260
$T3 = 292
$T4 = 324
this$ = 384
out_ranges$ = 392
?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z PROC ; ImFontGlyphRangesBuilder::BuildRanges, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3085
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3086
	mov	DWORD PTR max_codepoint$[rbp], 65535	; 0000ffffH
; Line 3087
	mov	DWORD PTR n$1[rbp], 0
	jmp	SHORT $LN4@BuildRange
$LN2@BuildRange:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@BuildRange:
	cmp	DWORD PTR n$1[rbp], 65535		; 0000ffffH
	jg	$LN3@BuildRange
; Line 3088
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z ; ImFontGlyphRangesBuilder::GetBit
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@BuildRange
; Line 3090
	movzx	eax, WORD PTR n$1[rbp]
	mov	WORD PTR $T2[rbp], ax
	lea	rdx, QWORD PTR $T2[rbp]
	mov	rcx, QWORD PTR out_ranges$[rbp]
	call	?push_back@?$ImVector@G@@QEAAXAEBG@Z	; ImVector<unsigned short>::push_back
$LN5@BuildRange:
; Line 3091
	cmp	DWORD PTR n$1[rbp], 65535		; 0000ffffH
	jge	SHORT $LN6@BuildRange
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	cdqe
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z ; ImFontGlyphRangesBuilder::GetBit
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN6@BuildRange
; Line 3092
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
	jmp	SHORT $LN5@BuildRange
$LN6@BuildRange:
; Line 3093
	movzx	eax, WORD PTR n$1[rbp]
	mov	WORD PTR $T3[rbp], ax
	lea	rdx, QWORD PTR $T3[rbp]
	mov	rcx, QWORD PTR out_ranges$[rbp]
	call	?push_back@?$ImVector@G@@QEAAXAEBG@Z	; ImVector<unsigned short>::push_back
$LN7@BuildRange:
; Line 3094
	jmp	$LN2@BuildRange
$LN3@BuildRange:
; Line 3095
	xor	eax, eax
	mov	WORD PTR $T4[rbp], ax
	lea	rdx, QWORD PTR $T4[rbp]
	mov	rcx, QWORD PTR out_ranges$[rbp]
	call	?push_back@?$ImVector@G@@QEAAXAEBG@Z	; ImVector<unsigned short>::push_back
; Line 3096
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?BuildRanges@ImFontGlyphRangesBuilder@@QEAAXPEAU?$ImVector@G@@@Z ENDP ; ImFontGlyphRangesBuilder::BuildRanges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z
_TEXT	SEGMENT
c$1 = 4
this$ = 256
ranges$ = 264
?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z PROC	; ImFontGlyphRangesBuilder::AddRanges, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3078
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 3079
	jmp	SHORT $LN4@AddRanges
$LN2@AddRanges:
	mov	rax, QWORD PTR ranges$[rbp]
	add	rax, 4
	mov	QWORD PTR ranges$[rbp], rax
$LN4@AddRanges:
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ranges$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@AddRanges
; Line 3080
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ranges$[rbp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR c$1[rbp], ax
	jmp	SHORT $LN7@AddRanges
$LN5@AddRanges:
	movzx	eax, WORD PTR c$1[rbp]
	inc	ax
	mov	WORD PTR c$1[rbp], ax
$LN7@AddRanges:
	movzx	eax, WORD PTR c$1[rbp]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR ranges$[rbp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jg	SHORT $LN6@AddRanges
; Line 3081
	movzx	edx, WORD PTR c$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z ; ImFontGlyphRangesBuilder::AddChar
	jmp	SHORT $LN5@AddRanges
$LN6@AddRanges:
	jmp	SHORT $LN2@AddRanges
$LN3@AddRanges:
; Line 3082
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddRanges@ImFontGlyphRangesBuilder@@QEAAXPEBG@Z ENDP	; ImFontGlyphRangesBuilder::AddRanges
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z
_TEXT	SEGMENT
c$4 = 4
c_len$5 = 36
tv65 = 244
tv68 = 248
__$ArrayPad$ = 256
this$ = 304
text$ = 312
text_end$ = 320
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z PROC	; ImFontGlyphRangesBuilder::AddText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 3065
$LN10:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 22
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+344]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
$LN2@AddText:
; Line 3066
	cmp	QWORD PTR text_end$[rbp], 0
	je	SHORT $LN8@AddText
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR text$[rbp], rax
	jae	SHORT $LN6@AddText
	mov	DWORD PTR tv65[rbp], 1
	jmp	SHORT $LN7@AddText
$LN6@AddText:
	mov	DWORD PTR tv65[rbp], 0
$LN7@AddText:
	mov	eax, DWORD PTR tv65[rbp]
	mov	DWORD PTR tv68[rbp], eax
	jmp	SHORT $LN9@AddText
$LN8@AddText:
	mov	rax, QWORD PTR text$[rbp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv68[rbp], eax
$LN9@AddText:
	cmp	DWORD PTR tv68[rbp], 0
	je	SHORT $LN3@AddText
; Line 3068
	mov	DWORD PTR c$4[rbp], 0
; Line 3069
	mov	r8, QWORD PTR text_end$[rbp]
	mov	rdx, QWORD PTR text$[rbp]
	lea	rcx, QWORD PTR c$4[rbp]
	call	?ImTextCharFromUtf8@@YAHPEAIPEBD1@Z	; ImTextCharFromUtf8
	mov	DWORD PTR c_len$5[rbp], eax
; Line 3070
	movsxd	rax, DWORD PTR c_len$5[rbp]
	mov	rcx, QWORD PTR text$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text$[rbp], rax
; Line 3071
	cmp	DWORD PTR c_len$5[rbp], 0
	jne	SHORT $LN4@AddText
; Line 3072
	jmp	SHORT $LN3@AddText
$LN4@AddText:
; Line 3073
	movzx	edx, WORD PTR c$4[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z ; ImFontGlyphRangesBuilder::AddChar
; Line 3074
	jmp	$LN2@AddText
$LN3@AddText:
; Line 3075
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?AddText@ImFontGlyphRangesBuilder@@QEAAXPEBD0@Z ENDP	; ImFontGlyphRangesBuilder::AddText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z
_TEXT	SEGMENT
this$ = 224
c$ = 232
?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z PROC	; ImFontGlyphRangesBuilder::AddChar, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2562
$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	movzx	eax, WORD PTR c$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z ; ImFontGlyphRangesBuilder::SetBit
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddChar@ImFontGlyphRangesBuilder@@QEAAXG@Z ENDP	; ImFontGlyphRangesBuilder::AddChar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z
_TEXT	SEGMENT
off$ = 4
mask$ = 36
tv82 = 244
tv73 = 248
tv74 = 256
this$ = 304
n$ = 312
?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z PROC	; ImFontGlyphRangesBuilder::SetBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2561
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR n$[rbp]
	shr	rax, 5
	mov	DWORD PTR off$[rbp], eax
	mov	rax, QWORD PTR n$[rbp]
	and	rax, 31
	mov	ecx, 1
	mov	DWORD PTR tv82[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv82[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv73[rbp], rax
	mov	edx, DWORD PTR off$[rbp]
	mov	rcx, QWORD PTR tv73[rbp]
	call	??A?$ImVector@I@@QEAAAEAIH@Z		; ImVector<unsigned int>::operator[]
	mov	QWORD PTR tv74[rbp], rax
	mov	rax, QWORD PTR tv74[rbp]
	mov	ecx, DWORD PTR mask$[rbp]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	rcx, QWORD PTR tv74[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?SetBit@ImFontGlyphRangesBuilder@@QEAAX_K@Z ENDP	; ImFontGlyphRangesBuilder::SetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z
_TEXT	SEGMENT
off$ = 4
mask$ = 36
tv84 = 244
tv73 = 248
tv76 = 256
this$ = 304
n$ = 312
?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z PROC	; ImFontGlyphRangesBuilder::GetBit, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2560
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR n$[rbp]
	shr	rax, 5
	mov	DWORD PTR off$[rbp], eax
	mov	rax, QWORD PTR n$[rbp]
	and	rax, 31
	mov	ecx, 1
	mov	DWORD PTR tv84[rbp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv84[rbp]
	shl	eax, cl
	mov	DWORD PTR mask$[rbp], eax
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv73[rbp], rax
	mov	edx, DWORD PTR off$[rbp]
	mov	rcx, QWORD PTR tv73[rbp]
	call	??A?$ImVector@I@@QEBAAEBIH@Z		; ImVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR mask$[rbp]
	mov	eax, DWORD PTR [rax]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN3@GetBit
	mov	DWORD PTR tv76[rbp], 1
	jmp	SHORT $LN4@GetBit
$LN3@GetBit:
	mov	DWORD PTR tv76[rbp], 0
$LN4@GetBit:
	movzx	eax, BYTE PTR tv76[rbp]
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?GetBit@ImFontGlyphRangesBuilder@@QEBA_N_K@Z ENDP	; ImFontGlyphRangesBuilder::GetBit
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@I@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@I@@QEAAXH@Z PROC			; ImVector<unsigned int>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 2
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@I@@QEAAXH@Z ENDP			; ImVector<unsigned int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@I@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@I@@QEAAXH@Z PROC			; ImVector<unsigned int>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@I@@QEBAHH@Z	; ImVector<unsigned int>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@I@@QEAAXH@Z		; ImVector<unsigned int>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@I@@QEAAXH@Z ENDP			; ImVector<unsigned int>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@I@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@I@@QEBAHH@Z PROC		; ImVector<unsigned int>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@I@@QEBAHH@Z ENDP		; ImVector<unsigned int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?end@?$ImVector@I@@QEBAPEBIXZ
_TEXT	SEGMENT
this$ = 224
?end@?$ImVector@I@@QEBAPEBIXZ PROC			; ImVector<unsigned int>::end, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1700
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?end@?$ImVector@I@@QEBAPEBIXZ ENDP			; ImVector<unsigned int>::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?begin@?$ImVector@I@@QEBAPEBIXZ
_TEXT	SEGMENT
this$ = 224
?begin@?$ImVector@I@@QEBAPEBIXZ PROC			; ImVector<unsigned int>::begin, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1698
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?begin@?$ImVector@I@@QEBAPEBIXZ ENDP			; ImVector<unsigned int>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@I@@QEBAAEBIH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@I@@QEBAAEBIH@Z PROC			; ImVector<unsigned int>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1695
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1695				; 0000069fH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@I@@QEBAAEBIH@Z ENDP			; ImVector<unsigned int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@I@@QEAAAEAIH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@I@@QEAAAEAIH@Z PROC			; ImVector<unsigned int>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*4]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@I@@QEAAAEAIH@Z ENDP			; ImVector<unsigned int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@I@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@I@@QEBA_NXZ PROC			; ImVector<unsigned int>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@I@@QEBA_NXZ ENDP			; ImVector<unsigned int>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@I@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@I@@QEAAXXZ PROC			; ImVector<unsigned int>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@I@@QEAAXXZ ENDP			; ImVector<unsigned int>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@I@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@I@@QEAA@XZ PROC				; ImVector<unsigned int>::~ImVector<unsigned int>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@I@@QEAA@XZ ENDP				; ImVector<unsigned int>::~ImVector<unsigned int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImFontConfig@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImFontConfig@@QEAA@XZ PROC				; ImFontConfig::ImFontConfig, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1910
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 36					; 00000024H
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 44					; 0000002cH
	mov	rcx, rax
	call	??0ImVec2@@QEAA@XZ			; ImVec2::ImVec2
; Line 1911
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 136				; 00000088H
	rep stosb
; Line 1912
	mov	rax, QWORD PTR this$[rbp]
	mov	BYTE PTR [rax+12], 1
; Line 1913
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+24], 3
; Line 1914
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+28], 1
; Line 1915
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@7f7fffff
	movss	DWORD PTR [rax+68], xmm0
; Line 1916
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+80], xmm0
; Line 1917
	mov	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR this$[rbp]
	mov	WORD PTR [rcx+84], ax
; Line 1918
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImFontConfig@@QEAA@XZ ENDP				; ImFontConfig::ImFontConfig
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
i$1 = 4
cmd_list$2 = 40
cmd_i$3 = 68
cmd$4 = 104
$T5 = 324
tv134 = 356
tv80 = 360
this$ = 400
fb_scale$ = 408
?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z PROC	; ImDrawData::ScaleClipRects, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1840
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 416				; 000001a0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1841
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@ScaleClipR
$LN2@ScaleClipR:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@ScaleClipR:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@ScaleClipR
; Line 1843
	movsxd	rax, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR cmd_list$2[rbp], rax
; Line 1844
	mov	DWORD PTR cmd_i$3[rbp], 0
	jmp	SHORT $LN7@ScaleClipR
$LN5@ScaleClipR:
	mov	eax, DWORD PTR cmd_i$3[rbp]
	inc	eax
	mov	DWORD PTR cmd_i$3[rbp], eax
$LN7@ScaleClipR:
	mov	rax, QWORD PTR cmd_list$2[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR cmd_i$3[rbp], eax
	jge	$LN6@ScaleClipR
; Line 1846
	mov	rax, QWORD PTR cmd_list$2[rbp]
	mov	QWORD PTR tv80[rbp], rax
	mov	edx, DWORD PTR cmd_i$3[rbp]
	mov	rcx, QWORD PTR tv80[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	mov	QWORD PTR cmd$4[rbp], rax
; Line 1847
	mov	rax, QWORD PTR cmd$4[rbp]
	mov	rcx, QWORD PTR fb_scale$[rbp]
	movss	xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR cmd$4[rbp]
	mov	rcx, QWORD PTR fb_scale$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR cmd$4[rbp]
	mov	rcx, QWORD PTR fb_scale$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR cmd$4[rbp]
	mov	rcx, QWORD PTR fb_scale$[rbp]
	movss	xmm3, DWORD PTR [rax]
	mulss	xmm3, DWORD PTR [rcx]
	movss	DWORD PTR tv134[rbp], xmm3
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv134[rbp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	rdi, QWORD PTR cmd$4[rbp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1848
	jmp	$LN5@ScaleClipR
$LN6@ScaleClipR:
; Line 1849
	jmp	$LN2@ScaleClipR
$LN3@ScaleClipR:
; Line 1850
	lea	rsp, QWORD PTR [rbp+368]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?ScaleClipRects@ImDrawData@@QEAAXAEBUImVec2@@@Z ENDP	; ImDrawData::ScaleClipRects
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?DeIndexAllBuffers@ImDrawData@@QEAAXXZ
_TEXT	SEGMENT
new_vtx_buffer$ = 8
i$4 = 52
cmd_list$5 = 88
j$6 = 116
$T7 = 344
tv148 = 376
tv143 = 376
tv136 = 376
tv132 = 384
__$ArrayPad$ = 392
this$ = 432
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ PROC		; ImDrawData::DeIndexAllBuffers, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1819
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 432				; 000001b0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1820
	lea	rcx, QWORD PTR new_vtx_buffer$[rbp]
	call	??0?$ImVector@UImDrawVert@@@@QEAA@XZ	; ImVector<ImDrawVert>::ImVector<ImDrawVert>
	npad	1
; Line 1821
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+12], 0
; Line 1822
	mov	DWORD PTR i$4[rbp], 0
	jmp	SHORT $LN4@DeIndexAll
$LN2@DeIndexAll:
	mov	eax, DWORD PTR i$4[rbp]
	inc	eax
	mov	DWORD PTR i$4[rbp], eax
$LN4@DeIndexAll:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR i$4[rbp], eax
	jge	$LN3@DeIndexAll
; Line 1824
	movsxd	rax, DWORD PTR i$4[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR cmd_list$5[rbp], rax
; Line 1825
	mov	rax, QWORD PTR cmd_list$5[rbp]
	add	rax, 16
	mov	rcx, rax
	call	?empty@?$ImVector@G@@QEBA_NXZ		; ImVector<unsigned short>::empty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@DeIndexAll
; Line 1826
	jmp	SHORT $LN2@DeIndexAll
$LN8@DeIndexAll:
; Line 1827
	mov	rax, QWORD PTR cmd_list$5[rbp]
	mov	edx, DWORD PTR [rax+16]
	lea	rcx, QWORD PTR new_vtx_buffer$[rbp]
	call	?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize
; Line 1828
	mov	DWORD PTR j$6[rbp], 0
	jmp	SHORT $LN7@DeIndexAll
$LN5@DeIndexAll:
	mov	eax, DWORD PTR j$6[rbp]
	inc	eax
	mov	DWORD PTR j$6[rbp], eax
$LN7@DeIndexAll:
	mov	rax, QWORD PTR cmd_list$5[rbp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR j$6[rbp], eax
	jge	SHORT $LN6@DeIndexAll
; Line 1829
	mov	rax, QWORD PTR cmd_list$5[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv136[rbp], rax
	mov	rax, QWORD PTR cmd_list$5[rbp]
	add	rax, 16
	mov	QWORD PTR tv132[rbp], rax
	mov	edx, DWORD PTR j$6[rbp]
	mov	rcx, QWORD PTR tv132[rbp]
	call	??A?$ImVector@G@@QEAAAEAGH@Z		; ImVector<unsigned short>::operator[]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	mov	rcx, QWORD PTR tv136[rbp]
	call	??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ; ImVector<ImDrawVert>::operator[]
	lea	rcx, QWORD PTR $T7[rbp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 20
	rep movsb
	mov	edx, DWORD PTR j$6[rbp]
	lea	rcx, QWORD PTR new_vtx_buffer$[rbp]
	call	??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ; ImVector<ImDrawVert>::operator[]
	lea	rcx, QWORD PTR $T7[rbp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 20
	rep movsb
	jmp	$LN5@DeIndexAll
$LN6@DeIndexAll:
; Line 1830
	mov	rax, QWORD PTR cmd_list$5[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv143[rbp], rax
	lea	rdx, QWORD PTR new_vtx_buffer$[rbp]
	mov	rcx, QWORD PTR tv143[rbp]
	call	?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z ; ImVector<ImDrawVert>::swap
; Line 1831
	mov	rax, QWORD PTR cmd_list$5[rbp]
	add	rax, 16
	mov	QWORD PTR tv148[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv148[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 1832
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR cmd_list$5[rbp]
	add	eax, DWORD PTR [rcx+32]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+12], eax
; Line 1833
	jmp	$LN2@DeIndexAll
$LN3@DeIndexAll:
; Line 1834
	lea	rcx, QWORD PTR new_vtx_buffer$[rbp]
	call	??1?$ImVector@UImDrawVert@@@@QEAA@XZ	; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?DeIndexAllBuffers@ImDrawData@@QEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+400]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?DeIndexAllBuffers@ImDrawData@@QEAAXXZ ENDP		; ImDrawData::DeIndexAllBuffers
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
new_vtx_buffer$ = 8
i$4 = 52
cmd_list$5 = 88
j$6 = 116
$T7 = 344
tv148 = 376
tv143 = 376
tv136 = 376
tv132 = 384
__$ArrayPad$ = 392
this$ = 432
?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA PROC ; `ImDrawData::DeIndexAllBuffers'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	lea	rcx, QWORD PTR new_vtx_buffer$[rbp]
	call	??1?$ImVector@UImDrawVert@@@@QEAA@XZ	; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??DeIndexAllBuffers@ImDrawData@@QEAAXXZ@4HA ENDP ; `ImDrawData::DeIndexAllBuffers'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
_TEXT	SEGMENT
i$1 = 4
a$2 = 36
$T3 = 260
tv137 = 280
tv78 = 280
tv69 = 280
tv95 = 288
this$ = 336
center$ = 344
radius$ = 352
a_min$ = 360
a_max$ = 368
num_segments$ = 376
?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z PROC	; ImDrawList::_PathArcToN, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1146
$LN7:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 344				; 00000158H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1147
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	SHORT $LN5@PathArcToN
; Line 1149
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1150
	jmp	$LN1@PathArcToN
$LN5@PathArcToN:
; Line 1155
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv78[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+120]
	mov	ecx, DWORD PTR num_segments$[rbp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	edx, eax
	mov	rcx, QWORD PTR tv78[rbp]
	call	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::reserve
; Line 1156
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@PathArcToN
$LN2@PathArcToN:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@PathArcToN:
	mov	eax, DWORD PTR num_segments$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jg	$LN3@PathArcToN
; Line 1158
	cvtsi2ss xmm0, DWORD PTR i$1[rbp]
	cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
	divss	xmm0, xmm1
	movss	xmm1, DWORD PTR a_max$[rbp]
	subss	xmm1, DWORD PTR a_min$[rbp]
	mulss	xmm0, xmm1
	movss	xmm1, DWORD PTR a_min$[rbp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR a$2[rbp], xmm0
; Line 1159
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv137[rbp], rax
	movss	xmm0, DWORD PTR a$2[rbp]
	call	sinf
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv95[rbp], xmm0
	movss	xmm0, DWORD PTR a$2[rbp]
	call	cosf
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv95[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR tv137[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1160
	jmp	$LN2@PathArcToN
$LN3@PathArcToN:
$LN1@PathArcToN:
; Line 1161
	lea	rsp, QWORD PTR [rbp+312]
	pop	rdi
	pop	rbp
	ret	0
?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ENDP	; ImDrawList::_PathArcToN
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z
_TEXT	SEGMENT
sample_range$ = 4
a_next_step$ = 36
samples$ = 68
extra_max_sample$ = 100
overstep$6 = 132
out_ptr$ = 168
sample_index$ = 196
a$7 = 228
s$8 = 264
a$9 = 292
s$10 = 328
normalized_max_sample$11 = 356
s$12 = 392
tv72 = 596
tv132 = 600
tv69 = 600
__$ArrayPad$ = 608
this$ = 656
center$ = 664
radius$ = 672
a_min_sample$ = 680
a_max_sample$ = 688
a_step$ = 696
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z PROC ; ImDrawList::_PathArcToFastEx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1054
$LN23:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 664				; 00000298H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 110				; 0000006eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+696]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1055
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	SHORT $LN8@PathArcToF
; Line 1057
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1058
	jmp	$LN1@PathArcToF
$LN8@PathArcToF:
; Line 1062
	cmp	DWORD PTR a_step$[rbp], 0
	jg	SHORT $LN9@PathArcToF
; Line 1063
	movss	xmm1, DWORD PTR radius$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
	mov	DWORD PTR tv72[rbp], eax
	mov	eax, 48					; 00000030H
	cdq
	mov	ecx, DWORD PTR tv72[rbp]
	idiv	ecx
	mov	DWORD PTR a_step$[rbp], eax
$LN9@PathArcToF:
; Line 1066
	mov	r8d, 12
	mov	edx, 1
	mov	ecx, DWORD PTR a_step$[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR a_step$[rbp], eax
; Line 1068
	mov	eax, DWORD PTR a_min_sample$[rbp]
	mov	ecx, DWORD PTR a_max_sample$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	?ImAbs@@YAHH@Z				; ImAbs
	mov	DWORD PTR sample_range$[rbp], eax
; Line 1069
	mov	eax, DWORD PTR a_step$[rbp]
	mov	DWORD PTR a_next_step$[rbp], eax
; Line 1071
	mov	eax, DWORD PTR sample_range$[rbp]
	inc	eax
	mov	DWORD PTR samples$[rbp], eax
; Line 1072
	mov	BYTE PTR extra_max_sample$[rbp], 0
; Line 1073
	cmp	DWORD PTR a_step$[rbp], 1
	jle	SHORT $LN10@PathArcToF
; Line 1075
	mov	eax, DWORD PTR sample_range$[rbp]
	cdq
	idiv	DWORD PTR a_step$[rbp]
	inc	eax
	mov	DWORD PTR samples$[rbp], eax
; Line 1076
	mov	eax, DWORD PTR sample_range$[rbp]
	cdq
	idiv	DWORD PTR a_step$[rbp]
	mov	eax, edx
	mov	DWORD PTR overstep$6[rbp], eax
; Line 1078
	cmp	DWORD PTR overstep$6[rbp], 0
	jle	SHORT $LN11@PathArcToF
; Line 1080
	mov	BYTE PTR extra_max_sample$[rbp], 1
; Line 1081
	mov	eax, DWORD PTR samples$[rbp]
	inc	eax
	mov	DWORD PTR samples$[rbp], eax
; Line 1085
	cmp	DWORD PTR sample_range$[rbp], 0
	jle	SHORT $LN12@PathArcToF
; Line 1086
	mov	eax, DWORD PTR overstep$6[rbp]
	mov	ecx, DWORD PTR a_step$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR a_step$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a_step$[rbp], eax
$LN12@PathArcToF:
$LN11@PathArcToF:
$LN10@PathArcToF:
; Line 1090
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv132[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+120]
	add	eax, DWORD PTR samples$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv132[rbp]
	call	?resize@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::resize
; Line 1091
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR samples$[rbp]
	mov	eax, DWORD PTR [rax+120]
	sub	eax, ecx
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+128]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR out_ptr$[rbp], rax
; Line 1093
	mov	eax, DWORD PTR a_min_sample$[rbp]
	mov	DWORD PTR sample_index$[rbp], eax
; Line 1094
	cmp	DWORD PTR sample_index$[rbp], 0
	jl	SHORT $LN14@PathArcToF
	cmp	DWORD PTR sample_index$[rbp], 48	; 00000030H
	jl	SHORT $LN13@PathArcToF
$LN14@PathArcToF:
; Line 1096
	mov	eax, DWORD PTR sample_index$[rbp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR sample_index$[rbp], eax
; Line 1097
	cmp	DWORD PTR sample_index$[rbp], 0
	jge	SHORT $LN15@PathArcToF
; Line 1098
	mov	eax, DWORD PTR sample_index$[rbp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR sample_index$[rbp], eax
$LN15@PathArcToF:
$LN13@PathArcToF:
; Line 1101
	mov	eax, DWORD PTR a_min_sample$[rbp]
	cmp	DWORD PTR a_max_sample$[rbp], eax
	jl	$LN16@PathArcToF
; Line 1103
	mov	eax, DWORD PTR a_min_sample$[rbp]
	mov	DWORD PTR a$7[rbp], eax
	jmp	SHORT $LN4@PathArcToF
$LN2@PathArcToF:
	mov	eax, DWORD PTR a_step$[rbp]
	mov	ecx, DWORD PTR a$7[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$7[rbp], eax
	mov	eax, DWORD PTR a_step$[rbp]
	mov	ecx, DWORD PTR sample_index$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR sample_index$[rbp], eax
	mov	eax, DWORD PTR a_next_step$[rbp]
	mov	DWORD PTR a_step$[rbp], eax
$LN4@PathArcToF:
	mov	eax, DWORD PTR a_max_sample$[rbp]
	cmp	DWORD PTR a$7[rbp], eax
	jg	$LN3@PathArcToF
; Line 1106
	cmp	DWORD PTR sample_index$[rbp], 48	; 00000030H
	jl	SHORT $LN18@PathArcToF
; Line 1107
	mov	eax, DWORD PTR sample_index$[rbp]
	sub	eax, 48					; 00000030H
	mov	DWORD PTR sample_index$[rbp], eax
$LN18@PathArcToF:
; Line 1109
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movsxd	rcx, DWORD PTR sample_index$[rbp]
	mov	rax, QWORD PTR [rax+rcx*8+48]
	mov	QWORD PTR s$8[rbp], rax
; Line 1110
	movss	xmm0, DWORD PTR s$8[rbp]
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR out_ptr$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 1111
	movss	xmm0, DWORD PTR s$8[rbp+4]
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR out_ptr$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 1112
	mov	rax, QWORD PTR out_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax
; Line 1113
	jmp	$LN2@PathArcToF
$LN3@PathArcToF:
; Line 1114
	jmp	$LN17@PathArcToF
$LN16@PathArcToF:
; Line 1117
	mov	eax, DWORD PTR a_min_sample$[rbp]
	mov	DWORD PTR a$9[rbp], eax
	jmp	SHORT $LN7@PathArcToF
$LN5@PathArcToF:
	mov	eax, DWORD PTR a_step$[rbp]
	mov	ecx, DWORD PTR a$9[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$9[rbp], eax
	mov	eax, DWORD PTR a_step$[rbp]
	mov	ecx, DWORD PTR sample_index$[rbp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR sample_index$[rbp], eax
	mov	eax, DWORD PTR a_next_step$[rbp]
	mov	DWORD PTR a_step$[rbp], eax
$LN7@PathArcToF:
	mov	eax, DWORD PTR a_max_sample$[rbp]
	cmp	DWORD PTR a$9[rbp], eax
	jl	$LN6@PathArcToF
; Line 1120
	cmp	DWORD PTR sample_index$[rbp], 0
	jge	SHORT $LN19@PathArcToF
; Line 1121
	mov	eax, DWORD PTR sample_index$[rbp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR sample_index$[rbp], eax
$LN19@PathArcToF:
; Line 1123
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movsxd	rcx, DWORD PTR sample_index$[rbp]
	mov	rax, QWORD PTR [rax+rcx*8+48]
	mov	QWORD PTR s$10[rbp], rax
; Line 1124
	movss	xmm0, DWORD PTR s$10[rbp]
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR out_ptr$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 1125
	movss	xmm0, DWORD PTR s$10[rbp+4]
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR out_ptr$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 1126
	mov	rax, QWORD PTR out_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax
; Line 1127
	jmp	$LN5@PathArcToF
$LN6@PathArcToF:
$LN17@PathArcToF:
; Line 1130
	movzx	eax, BYTE PTR extra_max_sample$[rbp]
	test	eax, eax
	je	$LN20@PathArcToF
; Line 1132
	mov	eax, DWORD PTR a_max_sample$[rbp]
	cdq
	mov	ecx, 48					; 00000030H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR normalized_max_sample$11[rbp], eax
; Line 1133
	cmp	DWORD PTR normalized_max_sample$11[rbp], 0
	jge	SHORT $LN21@PathArcToF
; Line 1134
	mov	eax, DWORD PTR normalized_max_sample$11[rbp]
	add	eax, 48					; 00000030H
	mov	DWORD PTR normalized_max_sample$11[rbp], eax
$LN21@PathArcToF:
; Line 1136
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movsxd	rcx, DWORD PTR normalized_max_sample$11[rbp]
	mov	rax, QWORD PTR [rax+rcx*8+48]
	mov	QWORD PTR s$12[rbp], rax
; Line 1137
	movss	xmm0, DWORD PTR s$12[rbp]
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR out_ptr$[rbp]
	movss	DWORD PTR [rax], xmm0
; Line 1138
	movss	xmm0, DWORD PTR s$12[rbp+4]
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	rax, QWORD PTR out_ptr$[rbp]
	movss	DWORD PTR [rax+4], xmm0
; Line 1139
	mov	rax, QWORD PTR out_ptr$[rbp]
	add	rax, 8
	mov	QWORD PTR out_ptr$[rbp], rax
$LN20@PathArcToF:
$LN1@PathArcToF:
; Line 1143
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+632]
	pop	rdi
	pop	rbp
	ret	0
?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ENDP ; ImDrawList::_PathArcToFastEx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z
_TEXT	SEGMENT
radius_idx$ = 4
this$ = 256
radius$ = 264
?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z PROC	; ImDrawList::_CalcCircleAutoSegmentCount, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 568
$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 570
	movss	xmm0, DWORD PTR radius$[rbp]
	addss	xmm0, DWORD PTR __real@3f7fffef
	cvttss2si eax, xmm0
	mov	DWORD PTR radius_idx$[rbp], eax
; Line 571
	cmp	DWORD PTR radius_idx$[rbp], 64		; 00000040H
	jge	SHORT $LN2@CalcCircle
; Line 572
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movsxd	rcx, DWORD PTR radius_idx$[rbp]
	movzx	eax, BYTE PTR [rax+rcx+436]
	jmp	SHORT $LN1@CalcCircle
	jmp	SHORT $LN3@CalcCircle
$LN2@CalcCircle:
; Line 574
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movss	xmm0, DWORD PTR [rax+24]
	movss	xmm1, DWORD PTR radius$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	divss	xmm0, DWORD PTR radius$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	acosf
	movss	xmm1, DWORD PTR __real@40490fdb
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	call	ceilf
	cvttss2si eax, xmm0
	inc	eax
	cdq
	sub	eax, edx
	sar	eax, 1
	shl	eax, 1
	mov	r8d, 512				; 00000200H
	mov	edx, 4
	mov	ecx, eax
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
$LN3@CalcCircle:
$LN1@CalcCircle:
; Line 575
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ENDP	; ImDrawList::_CalcCircleAutoSegmentCount
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
this$ = 256
?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_OnChangedVtxOffset, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 553
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 555
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 0
; Line 556
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 558
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN2@OnChangedV
; Line 560
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
; Line 561
	jmp	SHORT $LN1@OnChangedV
$LN2@OnChangedV:
; Line 563
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN4@OnChangedV
	mov	eax, DWORD PTR ?__LINE__Var@?0??_OnChangedVtxOffset@ImDrawList@@QEAAXXZ@4JA
	add	eax, 10
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@OnChangedV:
; Line 564
	mov	rax, QWORD PTR curr_cmd$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+160]
	mov	DWORD PTR [rax+24], ecx
$LN1@OnChangedV:
; Line 565
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_OnChangedVtxOffset
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_OnChangedTextureID@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
prev_cmd$ = 40
this$ = 288
?_OnChangedTextureID@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_OnChangedTextureID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 531
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 533
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 534
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN2@OnChangedT
	mov	rax, QWORD PTR curr_cmd$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+152]
	cmp	QWORD PTR [rax+16], rcx
	je	SHORT $LN2@OnChangedT
; Line 536
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
; Line 537
	jmp	$LN1@OnChangedT
$LN2@OnChangedT:
; Line 539
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN5@OnChangedT
	mov	eax, DWORD PTR ?__LINE__Var@?0??_OnChangedTextureID@ImDrawList@@QEAAXXZ@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@OnChangedT:
; Line 542
	mov	rax, QWORD PTR curr_cmd$[rbp]
	sub	rax, 56					; 00000038H
	mov	QWORD PTR prev_cmd$[rbp], rax
; Line 543
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN3@OnChangedT
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 1
	jle	SHORT $LN3@OnChangedT
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 136				; 00000088H
	mov	r8d, 28
	mov	rdx, QWORD PTR prev_cmd$[rbp]
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN3@OnChangedT
	mov	rax, QWORD PTR prev_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN3@OnChangedT
; Line 545
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
; Line 546
	jmp	SHORT $LN1@OnChangedT
$LN3@OnChangedT:
; Line 549
	mov	rax, QWORD PTR curr_cmd$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+152]
	mov	QWORD PTR [rax+16], rcx
$LN1@OnChangedT:
; Line 550
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?_OnChangedTextureID@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_OnChangedTextureID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_OnChangedClipRect@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
prev_cmd$ = 40
this$ = 288
?_OnChangedClipRect@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_OnChangedClipRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 509
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 288				; 00000120H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 511
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 512
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN2@OnChangedC
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 136				; 00000088H
	mov	rcx, QWORD PTR curr_cmd$[rbp]
	mov	r8d, 16
	mov	rdx, rax
	call	memcmp
	test	eax, eax
	je	SHORT $LN2@OnChangedC
; Line 514
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
; Line 515
	jmp	$LN1@OnChangedC
$LN2@OnChangedC:
; Line 517
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN5@OnChangedC
	mov	eax, DWORD PTR ?__LINE__Var@?0??_OnChangedClipRect@ImDrawList@@QEAAXXZ@4JA
	add	eax, 8
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@OnChangedC:
; Line 520
	mov	rax, QWORD PTR curr_cmd$[rbp]
	sub	rax, 56					; 00000038H
	mov	QWORD PTR prev_cmd$[rbp], rax
; Line 521
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN3@OnChangedC
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 1
	jle	SHORT $LN3@OnChangedC
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 136				; 00000088H
	mov	r8d, 28
	mov	rdx, QWORD PTR prev_cmd$[rbp]
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	jne	SHORT $LN3@OnChangedC
	mov	rax, QWORD PTR prev_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN3@OnChangedC
; Line 523
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
; Line 524
	jmp	SHORT $LN1@OnChangedC
$LN3@OnChangedC:
; Line 527
	mov	rax, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR curr_cmd$[rbp]
	lea	rsi, QWORD PTR [rax+136]
	mov	ecx, 16
	rep movsb
$LN1@OnChangedC:
; Line 528
	lea	rsp, QWORD PTR [rbp+256]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?_OnChangedClipRect@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_OnChangedClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
prev_cmd$ = 40
this$ = 288
?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_TryMergeDrawCmds, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 496
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 296				; 00000128H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 497
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 498
	mov	rax, QWORD PTR curr_cmd$[rbp]
	sub	rax, 56					; 00000038H
	mov	QWORD PTR prev_cmd$[rbp], rax
; Line 499
	mov	r8d, 28
	mov	rdx, QWORD PTR prev_cmd$[rbp]
	mov	rcx, QWORD PTR curr_cmd$[rbp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN2@TryMergeDr
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN2@TryMergeDr
	mov	rax, QWORD PTR prev_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN2@TryMergeDr
; Line 501
	mov	rax, QWORD PTR prev_cmd$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR curr_cmd$[rbp]
	add	eax, DWORD PTR [rcx+32]
	mov	rcx, QWORD PTR prev_cmd$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 502
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
$LN2@TryMergeDr:
; Line 504
	lea	rsp, QWORD PTR [rbp+264]
	pop	rdi
	pop	rbp
	ret	0
?_TryMergeDrawCmds@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_TryMergeDrawCmds
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
curr_cmd$ = 8
this$ = 256
?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_PopUnusedDrawCmd, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 466
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 467
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN2@PopUnusedD
; Line 468
	jmp	SHORT $LN1@PopUnusedD
$LN2@PopUnusedD:
; Line 469
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 470
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN3@PopUnusedD
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN3@PopUnusedD
; Line 471
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
$LN3@PopUnusedD:
$LN1@PopUnusedD:
; Line 472
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_PopUnusedDrawCmd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ClearFreeMemory@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?_ClearFreeMemory@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_ClearFreeMemory, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 427
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 428
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ	; ImVector<ImDrawCmd>::clear
; Line 429
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	?clear@?$ImVector@G@@QEAAXXZ		; ImVector<unsigned short>::clear
; Line 430
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ ; ImVector<ImDrawVert>::clear
; Line 431
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+48], 0
; Line 432
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 0
; Line 433
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+72], 0
; Line 434
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+80], 0
; Line 435
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	?clear@?$ImVector@UImVec4@@@@QEAAXXZ	; ImVector<ImVec4>::clear
; Line 436
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	?clear@?$ImVector@PEAX@@QEAAXXZ		; ImVector<void *>::clear
; Line 437
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	rcx, rax
	call	?clear@?$ImVector@UImVec2@@@@QEAAXXZ	; ImVector<ImVec2>::clear
; Line 438
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 168				; 000000a8H
	mov	rcx, rax
	call	?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ ; ImDrawListSplitter::ClearFreeMemory
; Line 439
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?_ClearFreeMemory@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_ClearFreeMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_ResetForNewFrame@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 200
tv145 = 264
tv136 = 264
tv131 = 264
tv94 = 264
tv78 = 264
tv73 = 264
tv68 = 264
this$ = 304
?_ResetForNewFrame@ImDrawList@@QEAAXXZ PROC		; ImDrawList::_ResetForNewFrame, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 403
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 410
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv68[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv68[rbp]
	call	?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize
; Line 411
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv73[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv73[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 412
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv78[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv78[rbp]
	call	?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize
; Line 413
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR [rcx+48], eax
; Line 414
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 136				; 00000088H
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
; Line 415
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+52], 0
; Line 416
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+72], 0
; Line 417
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+80], 0
; Line 418
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR tv94[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv94[rbp]
	call	?resize@?$ImVector@UImVec4@@@@QEAAXH@Z	; ImVector<ImVec4>::resize
; Line 419
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv131[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv131[rbp]
	call	?resize@?$ImVector@PEAX@@QEAAXH@Z	; ImVector<void *>::resize
; Line 420
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv136[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv136[rbp]
	call	?resize@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::resize
; Line 421
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 168				; 000000a8H
	mov	rcx, rax
	call	?Clear@ImDrawListSplitter@@QEAAXXZ	; ImDrawListSplitter::Clear
; Line 422
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv145[rbp], rax
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImDrawCmd@@QEAA@XZ			; ImDrawCmd::ImDrawCmd
	mov	rdx, rax
	mov	rcx, QWORD PTR tv145[rbp]
	call	?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ; ImVector<ImDrawCmd>::push_back
; Line 423
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+192], xmm0
; Line 424
	lea	rsp, QWORD PTR [rbp+280]
	pop	rdi
	pop	rbp
	ret	0
?_ResetForNewFrame@ImDrawList@@QEAAXXZ ENDP		; ImDrawList::_ResetForNewFrame
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimWriteIdx@ImDrawList@@QEAAXG@Z
_TEXT	SEGMENT
this$ = 224
idx$ = 232
?PrimWriteIdx@ImDrawList@@QEAAXG@Z PROC			; ImDrawList::PrimWriteIdx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2467
$LN3:
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	movzx	ecx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PrimWriteIdx@ImDrawList@@QEAAXG@Z ENDP			; ImDrawList::PrimWriteIdx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
uv$ = 240
col$ = 248
?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z PROC	; ImDrawList::PrimWriteVtx, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2466
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR pos$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR uv$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rcx+8], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	mov	ecx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rax+16], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ENDP	; ImDrawList::PrimWriteVtx
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z
_TEXT	SEGMENT
idx$ = 4
this$ = 256
a$ = 264
b$ = 272
c$ = 280
d$ = 288
uv_a$ = 296
uv_b$ = 304
uv_c$ = 312
uv_d$ = 320
col$ = 328
?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z PROC ; ImDrawList::PrimQuadUV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 694
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 695
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, WORD PTR [rax+52]
	mov	WORD PTR idx$[rbp], ax
; Line 696
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax+rcx], dx
	movzx	eax, WORD PTR idx$[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 697
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax+rcx], dx
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 698
	mov	rax, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	rax, QWORD PTR uv_a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx+8], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 699
	mov	rax, QWORD PTR b$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	rax, QWORD PTR uv_b$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx+8], rax
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 700
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	rax, QWORD PTR uv_c$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx+8], rax
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 701
	mov	rax, QWORD PTR d$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	rax, QWORD PTR uv_d$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx+8], rax
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 702
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 703
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 4
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
; Line 704
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 705
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z ENDP ; ImDrawList::PrimQuadUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
_TEXT	SEGMENT
b$ = 8
d$ = 40
uv_b$ = 72
uv_d$ = 104
idx$ = 132
__$ArrayPad$ = 344
this$ = 384
a$ = 392
c$ = 400
uv_a$ = 408
uv_c$ = 416
col$ = 424
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z PROC	; ImDrawList::PrimRectUV, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 679
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 392				; 00000188H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 42					; 0000002aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+424]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 680
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR c$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR b$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR c$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR d$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR uv_a$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR uv_c$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR uv_b$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR uv_c$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR uv_a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR uv_d$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 681
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, WORD PTR [rax+52]
	mov	WORD PTR idx$[rbp], ax
; Line 682
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax+rcx], dx
	movzx	eax, WORD PTR idx$[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 683
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax+rcx], dx
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 684
	mov	rax, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	rax, QWORD PTR uv_a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx+8], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 685
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR b$[rbp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv_b$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 686
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	rax, QWORD PTR uv_c$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx+8], rax
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 687
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR d$[rbp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv_d$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 688
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 689
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 4
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
; Line 690
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 691
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+360]
	pop	rdi
	pop	rbp
	ret	0
?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ENDP	; ImDrawList::PrimRectUV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z
_TEXT	SEGMENT
b$ = 8
d$ = 40
uv$ = 72
idx$ = 100
__$ArrayPad$ = 312
this$ = 352
a$ = 360
c$ = 368
col$ = 376
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z PROC	; ImDrawList::PrimRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 664
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 665
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR c$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR b$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR c$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR d$[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR uv$[rbp], rax
; Line 666
	mov	rax, QWORD PTR this$[rbp]
	movzx	eax, WORD PTR [rax+52]
	mov	WORD PTR idx$[rbp], ax
; Line 667
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax+rcx], dx
	movzx	eax, WORD PTR idx$[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 668
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx$[rbp]
	mov	WORD PTR [rax+rcx], dx
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	movzx	eax, WORD PTR idx$[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 669
	mov	rax, QWORD PTR a$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 670
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR b$[rbp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 671
	mov	rax, QWORD PTR c$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 672
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR d$[rbp]
	mov	QWORD PTR [rcx+rax], rdx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 673
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 674
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 4
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
; Line 675
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 676
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ENDP	; ImDrawList::PrimRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimUnreserve@ImDrawList@@QEAAXHH@Z
_TEXT	SEGMENT
draw_cmd$ = 8
tv91 = 216
tv83 = 216
this$ = 256
idx_count$ = 264
vtx_count$ = 272
?PrimUnreserve@ImDrawList@@QEAAXHH@Z PROC		; ImDrawList::PrimUnreserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 653
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 656
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR draw_cmd$[rbp], rax
; Line 657
	mov	rax, QWORD PTR draw_cmd$[rbp]
	mov	ecx, DWORD PTR idx_count$[rbp]
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	mov	rcx, QWORD PTR draw_cmd$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 658
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv83[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR vtx_count$[rbp]
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv83[rbp]
	call	?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::shrink
; Line 659
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv91[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR idx_count$[rbp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv91[rbp]
	call	?shrink@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::shrink
; Line 660
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?PrimUnreserve@ImDrawList@@QEAAXHH@Z ENDP		; ImDrawList::PrimUnreserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PrimReserve@ImDrawList@@QEAAXHH@Z
_TEXT	SEGMENT
draw_cmd$ = 8
vtx_buffer_old_size$ = 36
idx_buffer_old_size$ = 68
tv141 = 280
tv95 = 280
this$ = 320
idx_count$ = 328
vtx_count$ = 336
?PrimReserve@ImDrawList@@QEAAXHH@Z PROC			; ImDrawList::PrimReserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 627
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 630
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN2@PrimReserv
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, DWORD PTR vtx_count$[rbp]
	cmp	eax, 65536				; 00010000H
	jb	SHORT $LN2@PrimReserv
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN2@PrimReserv
; Line 635
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+32]
	mov	DWORD PTR [rax+160], ecx
; Line 636
	mov	rcx, QWORD PTR this$[rbp]
	call	?_OnChangedVtxOffset@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedVtxOffset
$LN2@PrimReserv:
; Line 639
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR draw_cmd$[rbp], rax
; Line 640
	mov	rax, QWORD PTR draw_cmd$[rbp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, DWORD PTR idx_count$[rbp]
	mov	rcx, QWORD PTR draw_cmd$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 642
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR vtx_buffer_old_size$[rbp], eax
; Line 643
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR tv95[rbp], rax
	mov	eax, DWORD PTR vtx_count$[rbp]
	mov	ecx, DWORD PTR vtx_buffer_old_size$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv95[rbp]
	call	?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize
; Line 644
	movsxd	rax, DWORD PTR vtx_buffer_old_size$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+40]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 646
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR idx_buffer_old_size$[rbp], eax
; Line 647
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	QWORD PTR tv141[rbp], rax
	mov	eax, DWORD PTR idx_count$[rbp]
	mov	ecx, DWORD PTR idx_buffer_old_size$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR tv141[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 648
	movsxd	rax, DWORD PTR idx_buffer_old_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 649
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?PrimReserve@ImDrawList@@QEAAXHH@Z ENDP			; ImDrawList::PrimReserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?CloneOutput@ImDrawList@@QEBAPEAU1@XZ
_TEXT	SEGMENT
dst$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
tv82 = 376
this$ = 416
?CloneOutput@ImDrawList@@QEBAPEAU1@XZ PROC		; ImDrawList::CloneOutput, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 442
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 443
	mov	ecx, 200				; 000000c8H
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR $T3[rbp], rax
	lea	rax, QWORD PTR $T5[rbp]
	mov	QWORD PTR $T4[rbp], rax
	mov	r8, QWORD PTR $T3[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 200				; 000000c8H
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T2[rbp], rax
	cmp	QWORD PTR $T2[rbp], 0
	je	SHORT $LN3@CloneOutpu
	mov	rax, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR $T2[rbp]
	call	??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z ; ImDrawList::ImDrawList
	mov	QWORD PTR tv82[rbp], rax
	jmp	SHORT $LN4@CloneOutpu
$LN3@CloneOutpu:
	mov	QWORD PTR tv82[rbp], 0
$LN4@CloneOutpu:
	mov	rax, QWORD PTR tv82[rbp]
	mov	QWORD PTR $T1[rbp], rax
	mov	rax, QWORD PTR $T1[rbp]
	mov	QWORD PTR dst$[rbp], rax
; Line 444
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR dst$[rbp]
	mov	rdx, rax
	call	??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z ; ImVector<ImDrawCmd>::operator=
; Line 445
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, QWORD PTR dst$[rbp]
	add	rcx, 16
	mov	rdx, rax
	call	??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z	; ImVector<unsigned short>::operator=
; Line 446
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, QWORD PTR dst$[rbp]
	add	rcx, 32					; 00000020H
	mov	rdx, rax
	call	??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z ; ImVector<ImDrawVert>::operator=
; Line 447
	mov	rax, QWORD PTR dst$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax+48], ecx
; Line 448
	mov	rax, QWORD PTR dst$[rbp]
; Line 449
	lea	rsp, QWORD PTR [rbp+392]
	pop	rdi
	pop	rbp
	ret	0
?CloneOutput@ImDrawList@@QEBAPEAU1@XZ ENDP		; ImDrawList::CloneOutput
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
dst$ = 8
$T1 = 232
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 356
tv82 = 376
this$ = 416
?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA PROC ; `ImDrawList::CloneOutput'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR $T3[rbp]
	mov	rax, QWORD PTR $T4[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T2[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??CloneOutput@ImDrawList@@QEBAPEAU1@XZ@4HA ENDP ; `ImDrawList::CloneOutput'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddDrawCmd@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
draw_cmd$ = 8
tv85 = 264
__$ArrayPad$ = 272
this$ = 320
?AddDrawCmd@ImDrawList@@QEAAXXZ PROC			; ImDrawList::AddDrawCmd, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 452
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 320				; 00000140H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 453
	lea	rcx, QWORD PTR draw_cmd$[rbp]
	call	??0ImDrawCmd@@QEAA@XZ			; ImDrawCmd::ImDrawCmd
; Line 454
	lea	rax, QWORD PTR draw_cmd$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+136]
	mov	ecx, 16
	rep movsb
; Line 455
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+152]
	mov	QWORD PTR draw_cmd$[rbp+16], rax
; Line 456
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+160]
	mov	DWORD PTR draw_cmd$[rbp+24], eax
; Line 457
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR draw_cmd$[rbp+28], eax
; Line 459
	movss	xmm0, DWORD PTR draw_cmd$[rbp+8]
	comiss	xmm0, DWORD PTR draw_cmd$[rbp]
	jb	SHORT $LN3@AddDrawCmd
	movss	xmm0, DWORD PTR draw_cmd$[rbp+12]
	comiss	xmm0, DWORD PTR draw_cmd$[rbp+4]
	jae	SHORT $LN4@AddDrawCmd
$LN3@AddDrawCmd:
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddDrawCmd@ImDrawList@@QEAAXXZ@4JA
	add	eax, 7
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1LC@MAEAJCLC@?$AAd?$AAr?$AAa?$AAw?$AA_?$AAc?$AAm?$AAd?$AA?4?$AAC?$AAl?$AAi?$AAp?$AAR?$AAe@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@AddDrawCmd:
; Line 460
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR tv85[rbp], rax
	lea	rdx, QWORD PTR draw_cmd$[rbp]
	mov	rcx, QWORD PTR tv85[rbp]
	call	?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ; ImVector<ImDrawCmd>::push_back
; Line 461
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddDrawCmd@ImDrawList@@QEAAXXZ$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+288]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddDrawCmd@ImDrawList@@QEAAXXZ ENDP			; ImDrawList::AddDrawCmd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z
_TEXT	SEGMENT
curr_cmd$ = 8
this$ = 256
callback$ = 264
callback_data$ = 272
?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z PROC ; ImDrawList::AddCallback, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 475
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 476
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 477
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN4@AddCallbac
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddCallback@ImDrawList@@QEAAXP6AXPEBU2@PEBUImDrawCmd@@@ZPEAX@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DI@FGNNAPCK@?$AAc?$AAu?$AAr?$AAr?$AA_?$AAc?$AAm?$AAd?$AA?9?$AA?$DO?$AAU?$AAs?$AAe?$AAr?$AAC@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@AddCallbac:
; Line 478
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN2@AddCallbac
; Line 480
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
; Line 481
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
$LN2@AddCallbac:
; Line 483
	mov	rax, QWORD PTR curr_cmd$[rbp]
	mov	rcx, QWORD PTR callback$[rbp]
	mov	QWORD PTR [rax+40], rcx
; Line 484
	mov	rax, QWORD PTR curr_cmd$[rbp]
	mov	rcx, QWORD PTR callback_data$[rbp]
	mov	QWORD PTR [rax+48], rcx
; Line 486
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
; Line 487
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddCallback@ImDrawList@@QEAAXP6AXPEBU1@PEBUImDrawCmd@@@ZPEAX@Z ENDP ; ImDrawList::AddCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z
_TEXT	SEGMENT
rounding_tl$1 = 4
rounding_tr$2 = 36
rounding_br$3 = 68
rounding_bl$4 = 100
$T5 = 324
$T6 = 356
$T7 = 388
$T8 = 420
$T9 = 452
$T10 = 484
tv162 = 500
tv159 = 500
tv156 = 500
tv153 = 500
tv91 = 500
tv76 = 500
this$ = 544
a$ = 552
b$ = 560
rounding$ = 568
flags$ = 576
?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z PROC	; ImDrawList::PathRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1352
$LN18:
	movss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 568				; 00000238H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1353
	mov	ecx, DWORD PTR flags$[rbp]
	call	?FixRectCornerFlags@@YAHH@Z		; FixRectCornerFlags
	mov	DWORD PTR flags$[rbp], eax
; Line 1354
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 48					; 00000030H
	cmp	eax, 48					; 00000030H
	je	SHORT $LN6@PathRect
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 192				; 000000c0H
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN6@PathRect
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv76[rbp], xmm0
	jmp	SHORT $LN7@PathRect
$LN6@PathRect:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv76[rbp], xmm0
$LN7@PathRect:
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	call	fabsf
	mulss	xmm0, DWORD PTR tv76[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR rounding$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR rounding$[rbp], xmm0
; Line 1355
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 80					; 00000050H
	cmp	eax, 80					; 00000050H
	je	SHORT $LN8@PathRect
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 160				; 000000a0H
	cmp	eax, 160				; 000000a0H
	je	SHORT $LN8@PathRect
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv91[rbp], xmm0
	jmp	SHORT $LN9@PathRect
$LN8@PathRect:
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv91[rbp], xmm0
$LN9@PathRect:
	mov	rax, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	call	fabsf
	mulss	xmm0, DWORD PTR tv91[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR rounding$[rbp]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR rounding$[rbp], xmm0
; Line 1357
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR rounding$[rbp]
	jae	SHORT $LN4@PathRect
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 496				; 000001f0H
	cmp	eax, 256				; 00000100H
	jne	$LN2@PathRect
$LN4@PathRect:
; Line 1359
	mov	rdx, QWORD PTR a$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1360
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1361
	mov	rdx, QWORD PTR b$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1362
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1363
	jmp	$LN3@PathRect
$LN2@PathRect:
; Line 1366
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN10@PathRect
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR tv153[rbp], xmm0
	jmp	SHORT $LN11@PathRect
$LN10@PathRect:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv153[rbp], xmm0
$LN11@PathRect:
	movss	xmm0, DWORD PTR tv153[rbp]
	movss	DWORD PTR rounding_tl$1[rbp], xmm0
; Line 1367
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN12@PathRect
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR tv156[rbp], xmm0
	jmp	SHORT $LN13@PathRect
$LN12@PathRect:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv156[rbp], xmm0
$LN13@PathRect:
	movss	xmm0, DWORD PTR tv156[rbp]
	movss	DWORD PTR rounding_tr$2[rbp], xmm0
; Line 1368
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN14@PathRect
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR tv159[rbp], xmm0
	jmp	SHORT $LN15@PathRect
$LN14@PathRect:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv159[rbp], xmm0
$LN15@PathRect:
	movss	xmm0, DWORD PTR tv159[rbp]
	movss	DWORD PTR rounding_br$3[rbp], xmm0
; Line 1369
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN16@PathRect
	movss	xmm0, DWORD PTR rounding$[rbp]
	movss	DWORD PTR tv162[rbp], xmm0
	jmp	SHORT $LN17@PathRect
$LN16@PathRect:
	xorps	xmm0, xmm0
	movss	DWORD PTR tv162[rbp], xmm0
$LN17@PathRect:
	movss	xmm0, DWORD PTR tv162[rbp]
	movss	DWORD PTR rounding_bl$4[rbp], xmm0
; Line 1370
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR rounding_tl$1[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR rounding_tl$1[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 6
	movss	xmm2, DWORD PTR rounding_tl$1[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 1371
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR rounding_tr$2[rbp]
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR rounding_tr$2[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 12
	mov	r9d, 9
	movss	xmm2, DWORD PTR rounding_tr$2[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 1372
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR rounding_br$3[rbp]
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm1, DWORD PTR [rax]
	subss	xmm1, DWORD PTR rounding_br$3[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	movss	xmm2, DWORD PTR rounding_br$3[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
; Line 1373
	mov	rax, QWORD PTR b$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR rounding_bl$4[rbp]
	mov	rax, QWORD PTR a$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, DWORD PTR rounding_bl$4[rbp]
	movaps	xmm2, xmm0
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	DWORD PTR [rsp+32], 6
	mov	r9d, 3
	movss	xmm2, DWORD PTR rounding_bl$4[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
$LN3@PathRect:
; Line 1375
	lea	rsp, QWORD PTR [rbp+520]
	pop	rdi
	pop	rbp
	ret	0
?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ENDP	; ImDrawList::PathRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z
_TEXT	SEGMENT
p1$ = 8
t_step$4 = 36
i_step$5 = 68
$T6 = 292
tv133 = 312
__$ArrayPad$ = 320
this$ = 368
p2$ = 376
p3$ = 384
num_segments$ = 392
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z PROC ; ImDrawList::PathBezierQuadraticCurveTo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1303
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 424				; 000001a8H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+456]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1304
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	rcx, rax
	call	?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ; ImVector<ImVec2>::back
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p1$[rbp], rax
; Line 1305
	cmp	DWORD PTR num_segments$[rbp], 0
	jne	SHORT $LN5@PathBezier
; Line 1307
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 120				; 00000078H
	mov	DWORD PTR [rsp+64], 0
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rsp+48], xmm0
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm3, DWORD PTR [rax]
	movss	xmm2, DWORD PTR p1$[rbp+4]
	movss	xmm1, DWORD PTR p1$[rbp]
	call	?PathBezierQuadraticCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMH@Z ; PathBezierQuadraticCurveToCasteljau
; Line 1308
	jmp	$LN6@PathBezier
$LN5@PathBezier:
; Line 1311
	cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR t_step$4[rbp], xmm0
; Line 1312
	mov	DWORD PTR i_step$5[rbp], 1
	jmp	SHORT $LN4@PathBezier
$LN2@PathBezier:
	mov	eax, DWORD PTR i_step$5[rbp]
	inc	eax
	mov	DWORD PTR i_step$5[rbp], eax
$LN4@PathBezier:
	mov	eax, DWORD PTR num_segments$[rbp]
	cmp	DWORD PTR i_step$5[rbp], eax
	jg	SHORT $LN3@PathBezier
; Line 1313
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv133[rbp], rax
	cvtsi2ss xmm0, DWORD PTR i_step$5[rbp]
	movss	xmm1, DWORD PTR t_step$4[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR p3$[rbp]
	mov	r8, QWORD PTR p2$[rbp]
	lea	rdx, QWORD PTR p1$[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	?ImBezierQuadraticCalc@@YA?AUImVec2@@AEBU1@00M@Z ; ImBezierQuadraticCalc
	mov	rdx, rax
	mov	rcx, QWORD PTR tv133[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
	jmp	SHORT $LN2@PathBezier
$LN3@PathBezier:
$LN6@PathBezier:
; Line 1315
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z ENDP ; ImDrawList::PathBezierQuadraticCurveTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z
_TEXT	SEGMENT
p1$ = 8
t_step$4 = 36
i_step$5 = 68
$T6 = 292
tv138 = 312
__$ArrayPad$ = 320
this$ = 368
p2$ = 376
p3$ = 384
p4$ = 392
num_segments$ = 400
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z PROC ; ImDrawList::PathBezierCubicCurveTo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1288
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 440				; 000001b8H
	lea	rbp, QWORD PTR [rsp+96]
	lea	rdi, QWORD PTR [rsp+96]
	mov	ecx, 38					; 00000026H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+472]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1289
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	rcx, rax
	call	?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ; ImVector<ImVec2>::back
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p1$[rbp], rax
; Line 1290
	cmp	DWORD PTR num_segments$[rbp], 0
	jne	$LN5@PathBezier
; Line 1292
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 120				; 00000078H
	mov	DWORD PTR [rsp+80], 0
	movss	xmm0, DWORD PTR [rax+20]
	movss	DWORD PTR [rsp+72], xmm0
	mov	rax, QWORD PTR p4$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rsp+64], xmm0
	mov	rax, QWORD PTR p4$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rsp+48], xmm0
	mov	rax, QWORD PTR p3$[rbp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR p2$[rbp]
	movss	xmm3, DWORD PTR [rax]
	movss	xmm2, DWORD PTR p1$[rbp+4]
	movss	xmm1, DWORD PTR p1$[rbp]
	call	?PathBezierCubicCurveToCasteljau@@YAXPEAU?$ImVector@UImVec2@@@@MMMMMMMMMH@Z ; PathBezierCubicCurveToCasteljau
; Line 1293
	jmp	$LN6@PathBezier
$LN5@PathBezier:
; Line 1296
	cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR t_step$4[rbp], xmm0
; Line 1297
	mov	DWORD PTR i_step$5[rbp], 1
	jmp	SHORT $LN4@PathBezier
$LN2@PathBezier:
	mov	eax, DWORD PTR i_step$5[rbp]
	inc	eax
	mov	DWORD PTR i_step$5[rbp], eax
$LN4@PathBezier:
	mov	eax, DWORD PTR num_segments$[rbp]
	cmp	DWORD PTR i_step$5[rbp], eax
	jg	SHORT $LN3@PathBezier
; Line 1298
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv138[rbp], rax
	cvtsi2ss xmm0, DWORD PTR i_step$5[rbp]
	movss	xmm1, DWORD PTR t_step$4[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR [rsp+40], xmm0
	mov	rax, QWORD PTR p4$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p3$[rbp]
	mov	r8, QWORD PTR p2$[rbp]
	lea	rdx, QWORD PTR p1$[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	?ImBezierCubicCalc@@YA?AUImVec2@@AEBU1@000M@Z ; ImBezierCubicCalc
	mov	rdx, rax
	mov	rcx, QWORD PTR tv138[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
	jmp	SHORT $LN2@PathBezier
$LN3@PathBezier:
$LN6@PathBezier:
; Line 1300
	lea	rcx, QWORD PTR [rbp-96]
	lea	rdx, OFFSET FLAT:?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+344]
	pop	rdi
	pop	rbp
	ret	0
?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z ENDP ; ImDrawList::PathBezierCubicCurveTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z
_TEXT	SEGMENT
tv73 = 192
tv69 = 192
this$ = 240
center$ = 248
radius$ = 256
a_min_of_12$ = 264
a_max_of_12$ = 272
?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z PROC	; ImDrawList::PathArcToFast, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1165
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1166
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	SHORT $LN2@PathArcToF
; Line 1168
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1169
	jmp	SHORT $LN1@PathArcToF
$LN2@PathArcToF:
; Line 1171
	imul	eax, DWORD PTR a_max_of_12$[rbp], 48	; 00000030H
	cdq
	mov	ecx, 12
	idiv	ecx
	mov	DWORD PTR tv73[rbp], eax
	imul	ecx, DWORD PTR a_min_of_12$[rbp], 48	; 00000030H
	mov	eax, ecx
	cdq
	mov	ecx, 12
	idiv	ecx
	mov	DWORD PTR [rsp+40], 0
	mov	ecx, DWORD PTR tv73[rbp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx
$LN1@PathArcToF:
; Line 1172
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ENDP	; ImDrawList::PathArcToFast
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z
_TEXT	SEGMENT
a_is_reverse$1 = 4
a_min_sample_f$2 = 36
a_max_sample_f$3 = 68
a_min_sample$4 = 100
a_max_sample$5 = 132
a_mid_samples$6 = 164
a_min_segment_angle$7 = 196
a_max_segment_angle$8 = 228
a_emit_start$9 = 260
a_emit_end$10 = 292
arc_length$11 = 324
circle_segment_count$12 = 356
arc_segment_count$13 = 388
$T14 = 612
$T15 = 644
tv236 = 660
tv160 = 660
tv157 = 660
tv146 = 660
tv135 = 660
tv94 = 660
tv81 = 660
tv226 = 664
tv198 = 664
tv177 = 664
tv69 = 664
tv216 = 672
tv188 = 672
tv168 = 672
tv172 = 676
this$ = 720
center$ = 728
radius$ = 736
a_min$ = 744
a_max$ = 752
num_segments$ = 760
?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z PROC	; ImDrawList::PathArcTo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1175
$LN28:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 744				; 000002e8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1176
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	SHORT $LN2@PathArcTo
; Line 1178
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv69[rbp], rax
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR tv69[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
; Line 1179
	jmp	$LN1@PathArcTo
$LN2@PathArcTo:
; Line 1182
	cmp	DWORD PTR num_segments$[rbp], 0
	jle	SHORT $LN3@PathArcTo
; Line 1184
	mov	eax, DWORD PTR num_segments$[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR a_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR a_min$[rbp]
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::_PathArcToN
; Line 1185
	jmp	$LN1@PathArcTo
$LN3@PathArcTo:
; Line 1189
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movss	xmm0, DWORD PTR [rax+432]
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	$LN4@PathArcTo
; Line 1191
	movss	xmm0, DWORD PTR a_min$[rbp]
	comiss	xmm0, DWORD PTR a_max$[rbp]
	jbe	SHORT $LN10@PathArcTo
	mov	BYTE PTR tv81[rbp], 1
	jmp	SHORT $LN11@PathArcTo
$LN10@PathArcTo:
	mov	BYTE PTR tv81[rbp], 0
$LN11@PathArcTo:
	movzx	eax, BYTE PTR tv81[rbp]
	mov	BYTE PTR a_is_reverse$1[rbp], al
; Line 1195
	movss	xmm0, DWORD PTR __real@42400000
	mulss	xmm0, DWORD PTR a_min$[rbp]
	divss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR a_min_sample_f$2[rbp], xmm0
; Line 1196
	movss	xmm0, DWORD PTR __real@42400000
	mulss	xmm0, DWORD PTR a_max$[rbp]
	divss	xmm0, DWORD PTR __real@40c90fdb
	movss	DWORD PTR a_max_sample_f$3[rbp], xmm0
; Line 1198
	movzx	eax, BYTE PTR a_is_reverse$1[rbp]
	test	eax, eax
	je	SHORT $LN12@PathArcTo
	movss	xmm0, DWORD PTR a_min_sample_f$2[rbp]
	call	?ImFloorSigned@@YAMM@Z			; ImFloorSigned
	cvttss2si eax, xmm0
	mov	DWORD PTR tv94[rbp], eax
	jmp	SHORT $LN13@PathArcTo
$LN12@PathArcTo:
	movss	xmm0, DWORD PTR a_min_sample_f$2[rbp]
	call	ceilf
	cvttss2si eax, xmm0
	mov	DWORD PTR tv94[rbp], eax
$LN13@PathArcTo:
	mov	eax, DWORD PTR tv94[rbp]
	mov	DWORD PTR a_min_sample$4[rbp], eax
; Line 1199
	movzx	eax, BYTE PTR a_is_reverse$1[rbp]
	test	eax, eax
	je	SHORT $LN14@PathArcTo
	movss	xmm0, DWORD PTR a_max_sample_f$3[rbp]
	call	ceilf
	cvttss2si eax, xmm0
	mov	DWORD PTR tv135[rbp], eax
	jmp	SHORT $LN15@PathArcTo
$LN14@PathArcTo:
	movss	xmm0, DWORD PTR a_max_sample_f$3[rbp]
	call	?ImFloorSigned@@YAMM@Z			; ImFloorSigned
	cvttss2si eax, xmm0
	mov	DWORD PTR tv135[rbp], eax
$LN15@PathArcTo:
	mov	eax, DWORD PTR tv135[rbp]
	mov	DWORD PTR a_max_sample$5[rbp], eax
; Line 1200
	movzx	eax, BYTE PTR a_is_reverse$1[rbp]
	test	eax, eax
	je	SHORT $LN16@PathArcTo
	mov	eax, DWORD PTR a_max_sample$5[rbp]
	mov	ecx, DWORD PTR a_min_sample$4[rbp]
	sub	ecx, eax
	mov	eax, ecx
	xor	edx, edx
	mov	ecx, eax
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR tv146[rbp], eax
	jmp	SHORT $LN17@PathArcTo
$LN16@PathArcTo:
	mov	eax, DWORD PTR a_min_sample$4[rbp]
	mov	ecx, DWORD PTR a_max_sample$5[rbp]
	sub	ecx, eax
	mov	eax, ecx
	xor	edx, edx
	mov	ecx, eax
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR tv146[rbp], eax
$LN17@PathArcTo:
	mov	eax, DWORD PTR tv146[rbp]
	mov	DWORD PTR a_mid_samples$6[rbp], eax
; Line 1202
	cvtsi2ss xmm0, DWORD PTR a_min_sample$4[rbp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@42400000
	movss	DWORD PTR a_min_segment_angle$7[rbp], xmm0
; Line 1203
	cvtsi2ss xmm0, DWORD PTR a_max_sample$5[rbp]
	mulss	xmm0, DWORD PTR __real@40490fdb
	mulss	xmm0, DWORD PTR __real@40000000
	divss	xmm0, DWORD PTR __real@42400000
	movss	DWORD PTR a_max_segment_angle$8[rbp], xmm0
; Line 1204
	movss	xmm0, DWORD PTR a_min_segment_angle$7[rbp]
	subss	xmm0, DWORD PTR a_min$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN27@PathArcTo
	je	SHORT $LN18@PathArcTo
$LN27@PathArcTo:
	mov	BYTE PTR tv157[rbp], 1
	jmp	SHORT $LN19@PathArcTo
$LN18@PathArcTo:
	mov	BYTE PTR tv157[rbp], 0
$LN19@PathArcTo:
	movzx	eax, BYTE PTR tv157[rbp]
	mov	BYTE PTR a_emit_start$9[rbp], al
; Line 1205
	movss	xmm0, DWORD PTR a_max$[rbp]
	subss	xmm0, DWORD PTR a_max_segment_angle$8[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN26@PathArcTo
	je	SHORT $LN20@PathArcTo
$LN26@PathArcTo:
	mov	BYTE PTR tv160[rbp], 1
	jmp	SHORT $LN21@PathArcTo
$LN20@PathArcTo:
	mov	BYTE PTR tv160[rbp], 0
$LN21@PathArcTo:
	movzx	eax, BYTE PTR tv160[rbp]
	mov	BYTE PTR a_emit_end$10[rbp], al
; Line 1207
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv177[rbp], rax
	movzx	eax, BYTE PTR a_emit_start$9[rbp]
	test	eax, eax
	je	SHORT $LN22@PathArcTo
	mov	DWORD PTR tv168[rbp], 1
	jmp	SHORT $LN23@PathArcTo
$LN22@PathArcTo:
	mov	DWORD PTR tv168[rbp], 0
$LN23@PathArcTo:
	movzx	eax, BYTE PTR a_emit_end$10[rbp]
	test	eax, eax
	je	SHORT $LN24@PathArcTo
	mov	DWORD PTR tv172[rbp], 1
	jmp	SHORT $LN25@PathArcTo
$LN24@PathArcTo:
	mov	DWORD PTR tv172[rbp], 0
$LN25@PathArcTo:
	mov	eax, DWORD PTR a_mid_samples$6[rbp]
	mov	ecx, DWORD PTR tv168[rbp]
	lea	eax, DWORD PTR [rax+rcx+1]
	add	eax, DWORD PTR tv172[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+120]
	mov	edx, eax
	mov	rcx, QWORD PTR tv177[rbp]
	call	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::reserve
; Line 1208
	movzx	eax, BYTE PTR a_emit_start$9[rbp]
	test	eax, eax
	je	$LN6@PathArcTo
; Line 1209
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv198[rbp], rax
	movss	xmm0, DWORD PTR a_min$[rbp]
	call	sinf
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv188[rbp], xmm0
	movss	xmm0, DWORD PTR a_min$[rbp]
	call	cosf
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv188[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR tv198[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
$LN6@PathArcTo:
; Line 1210
	cmp	DWORD PTR a_mid_samples$6[rbp], 0
	jle	SHORT $LN7@PathArcTo
; Line 1211
	mov	DWORD PTR [rsp+40], 0
	mov	eax, DWORD PTR a_max_sample$5[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR a_min_sample$4[rbp]
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_PathArcToFastEx@ImDrawList@@QEAAXAEBUImVec2@@MHHH@Z ; ImDrawList::_PathArcToFastEx
$LN7@PathArcTo:
; Line 1212
	movzx	eax, BYTE PTR a_emit_end$10[rbp]
	test	eax, eax
	je	$LN8@PathArcTo
; Line 1213
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv226[rbp], rax
	movss	xmm0, DWORD PTR a_max$[rbp]
	call	sinf
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR tv216[rbp], xmm0
	movss	xmm0, DWORD PTR a_max$[rbp]
	call	cosf
	mulss	xmm0, DWORD PTR radius$[rbp]
	mov	rax, QWORD PTR center$[rbp]
	movss	xmm1, DWORD PTR [rax]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	xmm1, DWORD PTR tv216[rbp]
	movaps	xmm2, xmm1
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rdx, rax
	mov	rcx, QWORD PTR tv226[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
$LN8@PathArcTo:
; Line 1214
	jmp	$LN5@PathArcTo
$LN4@PathArcTo:
; Line 1217
	movss	xmm0, DWORD PTR a_max$[rbp]
	subss	xmm0, DWORD PTR a_min$[rbp]
	call	?ImAbs@@YAMM@Z				; ImAbs
	movss	DWORD PTR arc_length$11[rbp], xmm0
; Line 1218
	movss	xmm1, DWORD PTR radius$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
	mov	DWORD PTR circle_segment_count$12[rbp], eax
; Line 1219
	movss	xmm0, DWORD PTR __real@40c90fdb
	divss	xmm0, DWORD PTR arc_length$11[rbp]
	cvttss2si eax, xmm0
	mov	DWORD PTR tv236[rbp], eax
	cvtsi2ss xmm0, DWORD PTR circle_segment_count$12[rbp]
	mulss	xmm0, DWORD PTR arc_length$11[rbp]
	divss	xmm0, DWORD PTR __real@40c90fdb
	call	ceilf
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR tv236[rbp]
	mov	edx, ecx
	mov	ecx, eax
	call	??$ImMax@H@@YAHHH@Z			; ImMax<int>
	mov	DWORD PTR arc_segment_count$13[rbp], eax
; Line 1220
	mov	eax, DWORD PTR arc_segment_count$13[rbp]
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR a_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR a_min$[rbp]
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_PathArcToN@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::_PathArcToN
$LN5@PathArcTo:
$LN1@PathArcTo:
; Line 1222
	lea	rsp, QWORD PTR [rbp+696]
	pop	rdi
	pop	rbp
	ret	0
?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ENDP	; ImDrawList::PathArcTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathStroke@ImDrawList@@QEAAXIHM@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
flags$ = 240
thickness$ = 248
?PathStroke@ImDrawList@@QEAAXIHM@Z PROC			; ImDrawList::PathStroke, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2436
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	movss	xmm0, DWORD PTR thickness$[rbp]
	movss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR col$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	mov	r8d, DWORD PTR [rax+120]
	mov	rax, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ; ImDrawList::AddPolyline
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+120], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PathStroke@ImDrawList@@QEAAXIHM@Z ENDP			; ImDrawList::PathStroke
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathFillConvex@ImDrawList@@QEAAXI@Z
_TEXT	SEGMENT
this$ = 224
col$ = 232
?PathFillConvex@ImDrawList@@QEAAXI@Z PROC		; ImDrawList::PathFillConvex, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2435
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	r9d, DWORD PTR col$[rbp]
	mov	rax, QWORD PTR this$[rbp]
	mov	r8d, DWORD PTR [rax+120]
	mov	rax, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ; ImDrawList::AddConvexPolyFilled
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+120], 0
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?PathFillConvex@ImDrawList@@QEAAXI@Z ENDP		; ImDrawList::PathFillConvex
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
tv68 = 192
this$ = 240
pos$ = 248
?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z PROC	; ImDrawList::PathLineTo, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2433
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	QWORD PTR tv68[rbp], rax
	mov	rdx, QWORD PTR pos$[rbp]
	mov	rcx, QWORD PTR tv68[rbp]
	call	?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ; ImVector<ImVec2>::push_back
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ENDP	; ImDrawList::PathLineTo
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z
_TEXT	SEGMENT
push_texture_id$ = 4
vert_start_idx$ = 36
vert_end_idx$ = 68
tv81 = 276
this$ = 320
user_texture_id$ = 328
p_min$ = 336
p_max$ = 344
uv_min$ = 352
uv_max$ = 360
col$ = 368
rounding$ = 376
flags$ = 384
?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z PROC ; ImDrawList::AddImageRounded, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1642
$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+64]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1643
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddImageRo
; Line 1644
	jmp	$LN1@AddImageRo
$LN2@AddImageRo:
; Line 1646
	mov	ecx, DWORD PTR flags$[rbp]
	call	?FixRectCornerFlags@@YAHH@Z		; FixRectCornerFlags
	mov	DWORD PTR flags$[rbp], eax
; Line 1647
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR rounding$[rbp]
	jae	SHORT $LN4@AddImageRo
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 496				; 000001f0H
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN3@AddImageRo
$LN4@AddImageRo:
; Line 1649
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR uv_max$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR uv_min$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_max$[rbp]
	mov	r8, QWORD PTR p_min$[rbp]
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ; ImDrawList::AddImage
; Line 1650
	jmp	$LN1@AddImageRo
$LN3@AddImageRo:
; Line 1653
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+152]
	cmp	QWORD PTR user_texture_id$[rbp], rax
	je	SHORT $LN8@AddImageRo
	mov	BYTE PTR tv81[rbp], 1
	jmp	SHORT $LN9@AddImageRo
$LN8@AddImageRo:
	mov	BYTE PTR tv81[rbp], 0
$LN9@AddImageRo:
	movzx	eax, BYTE PTR tv81[rbp]
	mov	BYTE PTR push_texture_id$[rbp], al
; Line 1654
	movzx	eax, BYTE PTR push_texture_id$[rbp]
	test	eax, eax
	je	SHORT $LN5@AddImageRo
; Line 1655
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PushTextureID@ImDrawList@@QEAAXPEAX@Z	; ImDrawList::PushTextureID
$LN5@AddImageRo:
; Line 1657
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR vert_start_idx$[rbp], eax
; Line 1658
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR rounding$[rbp]
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect
; Line 1659
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
; Line 1660
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR vert_end_idx$[rbp], eax
; Line 1661
	mov	BYTE PTR [rsp+56], 1
	mov	rax, QWORD PTR uv_max$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR uv_min$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p_max$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p_min$[rbp]
	mov	r8d, DWORD PTR vert_end_idx$[rbp]
	mov	edx, DWORD PTR vert_start_idx$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?ShadeVertsLinearUV@ImGui@@YAXPEAUImDrawList@@HHAEBUImVec2@@111_N@Z ; ImGui::ShadeVertsLinearUV
; Line 1663
	movzx	eax, BYTE PTR push_texture_id$[rbp]
	test	eax, eax
	je	SHORT $LN6@AddImageRo
; Line 1664
	mov	rcx, QWORD PTR this$[rbp]
	call	?PopTextureID@ImDrawList@@QEAAXXZ	; ImDrawList::PopTextureID
$LN6@AddImageRo:
$LN1@AddImageRo:
; Line 1665
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?AddImageRounded@ImDrawList@@QEAAXPEAXAEBUImVec2@@111IMH@Z ENDP ; ImDrawList::AddImageRounded
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z
_TEXT	SEGMENT
push_texture_id$ = 4
tv69 = 212
this$ = 256
user_texture_id$ = 264
p1$ = 272
p2$ = 280
p3$ = 288
p4$ = 296
uv1$ = 304
uv2$ = 312
uv3$ = 320
uv4$ = 328
col$ = 336
?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z PROC ; ImDrawList::AddImageQuad, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1626
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 312				; 00000138H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1627
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddImageQu
; Line 1628
	jmp	$LN1@AddImageQu
$LN2@AddImageQu:
; Line 1630
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+152]
	cmp	QWORD PTR user_texture_id$[rbp], rax
	je	SHORT $LN6@AddImageQu
	mov	BYTE PTR tv69[rbp], 1
	jmp	SHORT $LN7@AddImageQu
$LN6@AddImageQu:
	mov	BYTE PTR tv69[rbp], 0
$LN7@AddImageQu:
	movzx	eax, BYTE PTR tv69[rbp]
	mov	BYTE PTR push_texture_id$[rbp], al
; Line 1631
	movzx	eax, BYTE PTR push_texture_id$[rbp]
	test	eax, eax
	je	SHORT $LN3@AddImageQu
; Line 1632
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PushTextureID@ImDrawList@@QEAAXPEAX@Z	; ImDrawList::PushTextureID
$LN3@AddImageQu:
; Line 1634
	mov	r8d, 4
	mov	edx, 6
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 1635
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+72], eax
	mov	rax, QWORD PTR uv4$[rbp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR uv3$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR uv2$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR uv1$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR p4$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR p3$[rbp]
	mov	r8, QWORD PTR p2$[rbp]
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimQuadUV@ImDrawList@@QEAAXAEBUImVec2@@0000000I@Z ; ImDrawList::PrimQuadUV
; Line 1637
	movzx	eax, BYTE PTR push_texture_id$[rbp]
	test	eax, eax
	je	SHORT $LN4@AddImageQu
; Line 1638
	mov	rcx, QWORD PTR this$[rbp]
	call	?PopTextureID@ImDrawList@@QEAAXXZ	; ImDrawList::PopTextureID
$LN4@AddImageQu:
$LN1@AddImageQu:
; Line 1639
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddImageQuad@ImDrawList@@QEAAXPEAXAEBUImVec2@@1111111I@Z ENDP ; ImDrawList::AddImageQuad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z
_TEXT	SEGMENT
push_texture_id$ = 4
tv69 = 212
this$ = 256
user_texture_id$ = 264
p_min$ = 272
p_max$ = 280
uv_min$ = 288
uv_max$ = 296
col$ = 304
?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z PROC	; ImDrawList::AddImage, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1610
$LN8:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1611
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddImage
; Line 1612
	jmp	$LN1@AddImage
$LN2@AddImage:
; Line 1614
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+152]
	cmp	QWORD PTR user_texture_id$[rbp], rax
	je	SHORT $LN6@AddImage
	mov	BYTE PTR tv69[rbp], 1
	jmp	SHORT $LN7@AddImage
$LN6@AddImage:
	mov	BYTE PTR tv69[rbp], 0
$LN7@AddImage:
	movzx	eax, BYTE PTR tv69[rbp]
	mov	BYTE PTR push_texture_id$[rbp], al
; Line 1615
	movzx	eax, BYTE PTR push_texture_id$[rbp]
	test	eax, eax
	je	SHORT $LN3@AddImage
; Line 1616
	mov	rdx, QWORD PTR user_texture_id$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PushTextureID@ImDrawList@@QEAAXPEAX@Z	; ImDrawList::PushTextureID
$LN3@AddImage:
; Line 1618
	mov	r8d, 4
	mov	edx, 6
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 1619
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR uv_max$[rbp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR uv_min$[rbp]
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimRectUV@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ; ImDrawList::PrimRectUV
; Line 1621
	movzx	eax, BYTE PTR push_texture_id$[rbp]
	test	eax, eax
	je	SHORT $LN4@AddImage
; Line 1622
	mov	rcx, QWORD PTR this$[rbp]
	call	?PopTextureID@ImDrawList@@QEAAXXZ	; ImDrawList::PopTextureID
$LN4@AddImage:
$LN1@AddImage:
; Line 1623
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddImage@ImDrawList@@QEAAXPEAXAEBUImVec2@@111I@Z ENDP	; ImDrawList::AddImage
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
col$ = 256
thickness$ = 264
num_segments$ = 272
?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z PROC ; ImDrawList::AddBezierQuadratic, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1566
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1567
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddBezierQ
; Line 1568
	jmp	SHORT $LN1@AddBezierQ
$LN2@AddBezierQ:
; Line 1570
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1571
	mov	r9d, DWORD PTR num_segments$[rbp]
	mov	r8, QWORD PTR p3$[rbp]
	mov	rdx, QWORD PTR p2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathBezierQuadraticCurveTo@ImDrawList@@QEAAXAEBUImVec2@@0H@Z ; ImDrawList::PathBezierQuadraticCurveTo
; Line 1572
	movss	xmm3, DWORD PTR thickness$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddBezierQ:
; Line 1573
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddBezierQuadratic@ImDrawList@@QEAAXAEBUImVec2@@00IMH@Z ENDP ; ImDrawList::AddBezierQuadratic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
p4$ = 256
col$ = 264
thickness$ = 272
num_segments$ = 280
?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z PROC ; ImDrawList::AddBezierCubic, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1555
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1556
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddBezierC
; Line 1557
	jmp	SHORT $LN1@AddBezierC
$LN2@AddBezierC:
; Line 1559
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1560
	mov	eax, DWORD PTR num_segments$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR p4$[rbp]
	mov	r8, QWORD PTR p3$[rbp]
	mov	rdx, QWORD PTR p2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathBezierCubicCurveTo@ImDrawList@@QEAAXAEBUImVec2@@00H@Z ; ImDrawList::PathBezierCubicCurveTo
; Line 1561
	movss	xmm3, DWORD PTR thickness$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddBezierC:
; Line 1562
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddBezierCubic@ImDrawList@@QEAAXAEBUImVec2@@000IMH@Z ENDP ; ImDrawList::AddBezierCubic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z
_TEXT	SEGMENT
uv$ = 8
AA_SIZE$5 = 36
col_trans$6 = 68
idx_count$7 = 100
vtx_count$8 = 132
vtx_inner_idx$9 = 164
vtx_outer_idx$10 = 196
i$11 = 228
temp_normals$12 = 264
i0$13 = 292
i1$14 = 324
p0$15 = 360
p1$16 = 392
dx$17 = 420
dy$18 = 452
d2$19 = 484
inv_len$20 = 516
i0$21 = 548
i1$22 = 580
n0$23 = 616
n1$24 = 648
dm_x$25 = 676
dm_y$26 = 708
d2$27 = 740
inv_len2$28 = 772
idx_count$29 = 804
vtx_count$30 = 836
i$31 = 868
i$32 = 900
__$AllocaPad$$ = 936
tv178 = 1332
tv144 = 1332
tv394 = 1336
tv137 = 1344
__$ArrayPad$ = 1352
this$ = 1392
points$ = 1400
points_count$ = 1408
col$ = 1416
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z PROC ; ImDrawList::AddConvexPolyFilled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 973
$LN25:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 1400				; 00000578H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 246				; 000000f6H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1432]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	mov	QWORD PTR __$AllocaPad$$[rbp], 0
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 974
	cmp	DWORD PTR points_count$[rbp], 3
	jge	SHORT $LN17@AddConvexP
; Line 975
	jmp	$LN1@AddConvexP
$LN17@AddConvexP:
; Line 977
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR uv$[rbp], rax
; Line 979
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 4
	test	eax, eax
	je	$LN18@AddConvexP
; Line 982
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+192]
	movss	DWORD PTR AA_SIZE$5[rbp], xmm0
; Line 983
	mov	eax, DWORD PTR col$[rbp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR col_trans$6[rbp], eax
; Line 984
	mov	eax, DWORD PTR points_count$[rbp]
	sub	eax, 2
	imul	eax, eax, 3
	imul	ecx, DWORD PTR points_count$[rbp], 6
	add	eax, ecx
	mov	DWORD PTR idx_count$7[rbp], eax
; Line 985
	mov	eax, DWORD PTR points_count$[rbp]
	shl	eax, 1
	mov	DWORD PTR vtx_count$8[rbp], eax
; Line 986
	mov	r8d, DWORD PTR vtx_count$8[rbp]
	mov	edx, DWORD PTR idx_count$7[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 989
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR vtx_inner_idx$9[rbp], eax
; Line 990
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	inc	eax
	mov	DWORD PTR vtx_outer_idx$10[rbp], eax
; Line 991
	mov	DWORD PTR i$11[rbp], 2
	jmp	SHORT $LN4@AddConvexP
$LN2@AddConvexP:
	mov	eax, DWORD PTR i$11[rbp]
	inc	eax
	mov	DWORD PTR i$11[rbp], eax
$LN4@AddConvexP:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i$11[rbp], eax
	jge	$LN3@AddConvexP
; Line 993
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR vtx_inner_idx$9[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, DWORD PTR vtx_inner_idx$9[rbp]
	mov	ecx, DWORD PTR i$11[rbp]
	lea	eax, DWORD PTR [rax+rcx*2-2]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR vtx_inner_idx$9[rbp]
	mov	ecx, DWORD PTR i$11[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 994
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 6
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 995
	jmp	$LN2@AddConvexP
$LN3@AddConvexP:
; Line 998
	movsxd	rax, DWORD PTR points_count$[rbp]
	shl	rax, 3
	add	rax, 36					; 00000024H
	mov	QWORD PTR tv394[rbp], rax
	mov	rax, QWORD PTR tv394[rbp]
	add	rax, 15
	cmp	rax, QWORD PTR tv394[rbp]
	ja	SHORT $LN24@AddConvexP
	mov	rax, 1152921504606846960		; 0ffffffffffffff0H
$LN24@AddConvexP:
	and	rax, -16
	call	__chkstk
	sub	rsp, rax
	lea	rax, QWORD PTR [rsp+32]
	mov	QWORD PTR tv137[rbp], rax
	lea	r8, QWORD PTR __$AllocaPad$$[rbp]
	mov	rdx, QWORD PTR tv394[rbp]
	mov	rcx, QWORD PTR tv137[rbp]
	call	_RTC_AllocaHelper
	add	QWORD PTR tv137[rbp], 32		; 00000020H
	mov	rax, QWORD PTR tv137[rbp]
	mov	QWORD PTR temp_normals$12[rbp], rax
; Line 999
	mov	eax, DWORD PTR points_count$[rbp]
	dec	eax
	mov	DWORD PTR i0$13[rbp], eax
	mov	DWORD PTR i1$14[rbp], 0
	jmp	SHORT $LN7@AddConvexP
$LN5@AddConvexP:
	mov	eax, DWORD PTR i1$14[rbp]
	mov	DWORD PTR tv144[rbp], eax
	mov	eax, DWORD PTR i1$14[rbp]
	inc	eax
	mov	DWORD PTR i1$14[rbp], eax
	mov	eax, DWORD PTR tv144[rbp]
	mov	DWORD PTR i0$13[rbp], eax
$LN7@AddConvexP:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i1$14[rbp], eax
	jge	$LN6@AddConvexP
; Line 1001
	movsxd	rax, DWORD PTR i0$13[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p0$15[rbp], rax
; Line 1002
	movsxd	rax, DWORD PTR i1$14[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p1$16[rbp], rax
; Line 1003
	mov	rax, QWORD PTR p1$16[rbp]
	mov	rcx, QWORD PTR p0$15[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR dx$17[rbp], xmm0
; Line 1004
	mov	rax, QWORD PTR p1$16[rbp]
	mov	rcx, QWORD PTR p0$15[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR dy$18[rbp], xmm0
; Line 1005
	movss	xmm0, DWORD PTR dx$17[rbp]
	mulss	xmm0, DWORD PTR dx$17[rbp]
	movss	xmm1, DWORD PTR dy$18[rbp]
	mulss	xmm1, DWORD PTR dy$18[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR d2$19[rbp], xmm0
	movss	xmm0, DWORD PTR d2$19[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN20@AddConvexP
	movss	xmm0, DWORD PTR d2$19[rbp]
	call	?ImRsqrt@@YAMM@Z			; ImRsqrt
	movss	DWORD PTR inv_len$20[rbp], xmm0
	movss	xmm0, DWORD PTR dx$17[rbp]
	mulss	xmm0, DWORD PTR inv_len$20[rbp]
	movss	DWORD PTR dx$17[rbp], xmm0
	movss	xmm0, DWORD PTR dy$18[rbp]
	mulss	xmm0, DWORD PTR inv_len$20[rbp]
	movss	DWORD PTR dy$18[rbp], xmm0
$LN20@AddConvexP:
; Line 1006
	movsxd	rax, DWORD PTR i0$13[rbp]
	mov	rcx, QWORD PTR temp_normals$12[rbp]
	movss	xmm0, DWORD PTR dy$18[rbp]
	movss	DWORD PTR [rcx+rax*8], xmm0
; Line 1007
	movss	xmm0, DWORD PTR dx$17[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movsxd	rax, DWORD PTR i0$13[rbp]
	mov	rcx, QWORD PTR temp_normals$12[rbp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
; Line 1008
	jmp	$LN5@AddConvexP
$LN6@AddConvexP:
; Line 1010
	mov	eax, DWORD PTR points_count$[rbp]
	dec	eax
	mov	DWORD PTR i0$21[rbp], eax
	mov	DWORD PTR i1$22[rbp], 0
	jmp	SHORT $LN10@AddConvexP
$LN8@AddConvexP:
	mov	eax, DWORD PTR i1$22[rbp]
	mov	DWORD PTR tv178[rbp], eax
	mov	eax, DWORD PTR i1$22[rbp]
	inc	eax
	mov	DWORD PTR i1$22[rbp], eax
	mov	eax, DWORD PTR tv178[rbp]
	mov	DWORD PTR i0$21[rbp], eax
$LN10@AddConvexP:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i1$22[rbp], eax
	jge	$LN9@AddConvexP
; Line 1013
	movsxd	rax, DWORD PTR i0$21[rbp]
	mov	rcx, QWORD PTR temp_normals$12[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR n0$23[rbp], rax
; Line 1014
	movsxd	rax, DWORD PTR i1$22[rbp]
	mov	rcx, QWORD PTR temp_normals$12[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR n1$24[rbp], rax
; Line 1015
	mov	rax, QWORD PTR n0$23[rbp]
	mov	rcx, QWORD PTR n1$24[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR dm_x$25[rbp], xmm0
; Line 1016
	mov	rax, QWORD PTR n0$23[rbp]
	mov	rcx, QWORD PTR n1$24[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR dm_y$26[rbp], xmm0
; Line 1017
	movss	xmm0, DWORD PTR dm_x$25[rbp]
	mulss	xmm0, DWORD PTR dm_x$25[rbp]
	movss	xmm1, DWORD PTR dm_y$26[rbp]
	mulss	xmm1, DWORD PTR dm_y$26[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR d2$27[rbp], xmm0
	movss	xmm0, DWORD PTR d2$27[rbp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN21@AddConvexP
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR d2$27[rbp]
	movss	DWORD PTR inv_len2$28[rbp], xmm0
	movss	xmm0, DWORD PTR inv_len2$28[rbp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN22@AddConvexP
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR inv_len2$28[rbp], xmm0
$LN22@AddConvexP:
	movss	xmm0, DWORD PTR dm_x$25[rbp]
	mulss	xmm0, DWORD PTR inv_len2$28[rbp]
	movss	DWORD PTR dm_x$25[rbp], xmm0
	movss	xmm0, DWORD PTR dm_y$26[rbp]
	mulss	xmm0, DWORD PTR inv_len2$28[rbp]
	movss	DWORD PTR dm_y$26[rbp], xmm0
$LN21@AddConvexP:
; Line 1018
	movss	xmm0, DWORD PTR AA_SIZE$5[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR dm_x$25[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dm_x$25[rbp], xmm0
; Line 1019
	movss	xmm0, DWORD PTR AA_SIZE$5[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR dm_y$26[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dm_y$26[rbp], xmm0
; Line 1022
	movsxd	rax, DWORD PTR i1$22[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	subss	xmm0, DWORD PTR dm_x$25[rbp]
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax], xmm0
	movsxd	rax, DWORD PTR i1$22[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	subss	xmm0, DWORD PTR dm_y$26[rbp]
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 1023
	movsxd	rax, DWORD PTR i1$22[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	addss	xmm0, DWORD PTR dm_x$25[rbp]
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax], xmm0
	movsxd	rax, DWORD PTR i1$22[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	addss	xmm0, DWORD PTR dm_y$26[rbp]
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col_trans$6[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 1024
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 1027
	mov	eax, DWORD PTR vtx_inner_idx$9[rbp]
	mov	ecx, DWORD PTR i1$22[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR vtx_inner_idx$9[rbp]
	mov	ecx, DWORD PTR i0$21[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR vtx_outer_idx$10[rbp]
	mov	ecx, DWORD PTR i0$21[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 1028
	mov	eax, DWORD PTR vtx_outer_idx$10[rbp]
	mov	ecx, DWORD PTR i0$21[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR vtx_outer_idx$10[rbp]
	mov	ecx, DWORD PTR i1$22[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR vtx_inner_idx$9[rbp]
	mov	ecx, DWORD PTR i1$22[rbp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 1029
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 1030
	jmp	$LN8@AddConvexP
$LN9@AddConvexP:
; Line 1031
	movzx	eax, WORD PTR vtx_count$8[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+52]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
; Line 1032
	jmp	$LN19@AddConvexP
$LN18@AddConvexP:
; Line 1036
	mov	eax, DWORD PTR points_count$[rbp]
	sub	eax, 2
	imul	eax, eax, 3
	mov	DWORD PTR idx_count$29[rbp], eax
; Line 1037
	mov	eax, DWORD PTR points_count$[rbp]
	mov	DWORD PTR vtx_count$30[rbp], eax
; Line 1038
	mov	r8d, DWORD PTR vtx_count$30[rbp]
	mov	edx, DWORD PTR idx_count$29[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 1039
	mov	DWORD PTR i$31[rbp], 0
	jmp	SHORT $LN13@AddConvexP
$LN11@AddConvexP:
	mov	eax, DWORD PTR i$31[rbp]
	inc	eax
	mov	DWORD PTR i$31[rbp], eax
$LN13@AddConvexP:
	mov	eax, DWORD PTR vtx_count$30[rbp]
	cmp	DWORD PTR i$31[rbp], eax
	jge	$LN12@AddConvexP
; Line 1041
	movsxd	rax, DWORD PTR i$31[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 1042
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 1043
	jmp	$LN11@AddConvexP
$LN12@AddConvexP:
; Line 1044
	mov	DWORD PTR i$32[rbp], 2
	jmp	SHORT $LN16@AddConvexP
$LN14@AddConvexP:
	mov	eax, DWORD PTR i$32[rbp]
	inc	eax
	mov	DWORD PTR i$32[rbp], eax
$LN16@AddConvexP:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i$32[rbp], eax
	jge	$LN15@AddConvexP
; Line 1046
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	rdx, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rdx+52]
	mov	WORD PTR [rax+rcx], dx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	ecx, DWORD PTR i$32[rbp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, DWORD PTR i$32[rbp]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 1047
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 6
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 1048
	jmp	$LN14@AddConvexP
$LN15@AddConvexP:
; Line 1049
	movzx	eax, WORD PTR vtx_count$30[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+52]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
$LN19@AddConvexP:
$LN1@AddConvexP:
; Line 1051
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z$rtcFrameData
	mov	r8, QWORD PTR __$AllocaPad$$[rbp]
	call	_RTC_CheckStackVars2
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+1368]
	pop	rdi
	pop	rbp
	ret	0
?AddConvexPolyFilled@ImDrawList@@QEAAXPEBUImVec2@@HI@Z ENDP ; ImDrawList::AddConvexPolyFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z
_TEXT	SEGMENT
closed$ = 4
opaque_uv$ = 40
count$ = 68
thick_line$ = 100
AA_SIZE$8 = 132
col_trans$9 = 164
integer_thickness$10 = 196
fractional_thickness$11 = 228
use_texture$12 = 260
idx_count$13 = 292
vtx_count$14 = 324
temp_normals$15 = 360
temp_points$16 = 392
i1$17 = 420
i2$18 = 452
dx$19 = 484
dy$20 = 516
d2$21 = 548
inv_len$22 = 580
half_draw_size$23 = 612
idx1$24 = 644
i1$25 = 676
i2$26 = 708
idx2$27 = 740
dm_x$28 = 772
dm_y$29 = 804
d2$30 = 836
inv_len2$31 = 868
out_vtx$32 = 904
tex_uvs$33 = 936
tex_uv0$34 = 984
tex_uv1$35 = 1016
i$36 = 1044
i$37 = 1076
half_inner_thickness$38 = 1108
points_last$39 = 1140
idx1$40 = 1172
i1$41 = 1204
i2$42 = 1236
idx2$43 = 1268
dm_x$44 = 1300
dm_y$45 = 1332
d2$46 = 1364
inv_len2$47 = 1396
dm_out_x$48 = 1428
dm_out_y$49 = 1460
dm_in_x$50 = 1492
dm_in_y$51 = 1524
out_vtx$52 = 1560
i$53 = 1588
idx_count$54 = 1620
vtx_count$55 = 1652
i1$56 = 1684
i2$57 = 1716
p1$58 = 1752
p2$59 = 1784
dx$60 = 1812
dy$61 = 1844
d2$62 = 1876
inv_len$63 = 1908
__$AllocaPad$$ = 1944
$T64 = 3124
$T65 = 3156
$T66 = 3188
$T67 = 3220
$T68 = 3252
$T69 = 3284
$T70 = 3316
$T71 = 3348
$T72 = 3380
$T73 = 3412
$T74 = 3444
$T75 = 3476
$T76 = 3508
$T77 = 3540
$T78 = 3572
$T79 = 3604
$T80 = 3636
$T81 = 3668
$T82 = 3700
$T83 = 3732
$T84 = 3764
$T85 = 3796
$T86 = 3828
$T87 = 3860
tv1083 = 3876
tv802 = 3876
tv797 = 3876
tv347 = 3876
tv339 = 3876
tv222 = 3876
tv167 = 3876
tv154 = 3876
tv145 = 3876
tv136 = 3876
tv95 = 3876
tv77 = 3876
tv74 = 3876
tv67 = 3876
tv1270 = 3880
tv345 = 3880
tv142 = 3880
tv133 = 3880
tv149 = 3888
__$ArrayPad$ = 3896
this$ = 3936
points$ = 3944
points_count$ = 3952
col$ = 3960
flags$ = 3968
thickness$ = 3976
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z PROC	; ImDrawList::AddPolyline, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 717
$LN78:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 3936				; 00000f60H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 688				; 000002b0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+3976]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	mov	QWORD PTR __$AllocaPad$$[rbp], 0
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 718
	cmp	DWORD PTR points_count$[rbp], 2
	jge	SHORT $LN23@AddPolylin
; Line 719
	jmp	$LN1@AddPolylin
$LN23@AddPolylin:
; Line 721
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN43@AddPolylin
	mov	BYTE PTR tv67[rbp], 1
	jmp	SHORT $LN44@AddPolylin
$LN43@AddPolylin:
	mov	BYTE PTR tv67[rbp], 0
$LN44@AddPolylin:
	movzx	eax, BYTE PTR tv67[rbp]
	mov	BYTE PTR closed$[rbp], al
; Line 722
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR opaque_uv$[rbp], rax
; Line 723
	movzx	eax, BYTE PTR closed$[rbp]
	test	eax, eax
	je	SHORT $LN45@AddPolylin
	mov	eax, DWORD PTR points_count$[rbp]
	mov	DWORD PTR tv74[rbp], eax
	jmp	SHORT $LN46@AddPolylin
$LN45@AddPolylin:
	mov	eax, DWORD PTR points_count$[rbp]
	dec	eax
	mov	DWORD PTR tv74[rbp], eax
$LN46@AddPolylin:
	mov	eax, DWORD PTR tv74[rbp]
	mov	DWORD PTR count$[rbp], eax
; Line 724
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR thickness$[rbp]
	comiss	xmm0, DWORD PTR [rax+192]
	jbe	SHORT $LN47@AddPolylin
	mov	BYTE PTR tv77[rbp], 1
	jmp	SHORT $LN48@AddPolylin
$LN47@AddPolylin:
	mov	BYTE PTR tv77[rbp], 0
$LN48@AddPolylin:
	movzx	eax, BYTE PTR tv77[rbp]
	mov	BYTE PTR thick_line$[rbp], al
; Line 726
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	$LN24@AddPolylin
; Line 729
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR [rax+192]
	movss	DWORD PTR AA_SIZE$8[rbp], xmm0
; Line 730
	mov	eax, DWORD PTR col$[rbp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR col_trans$9[rbp], eax
; Line 733
	movss	xmm1, DWORD PTR __real@3f800000
	movss	xmm0, DWORD PTR thickness$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR thickness$[rbp], xmm0
; Line 734
	cvttss2si eax, DWORD PTR thickness$[rbp]
	mov	DWORD PTR integer_thickness$10[rbp], eax
; Line 735
	cvtsi2ss xmm0, DWORD PTR integer_thickness$10[rbp]
	movss	xmm1, DWORD PTR thickness$[rbp]
	subss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR fractional_thickness$11[rbp], xmm0
; Line 740
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN49@AddPolylin
	cmp	DWORD PTR integer_thickness$10[rbp], 63	; 0000003fH
	jge	SHORT $LN49@AddPolylin
	movss	xmm0, DWORD PTR __real@3727c5ac
	comiss	xmm0, DWORD PTR fractional_thickness$11[rbp]
	jb	SHORT $LN49@AddPolylin
	movss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	ucomiss	xmm0, DWORD PTR __real@3f800000
	jp	SHORT $LN49@AddPolylin
	jne	SHORT $LN49@AddPolylin
	mov	BYTE PTR tv95[rbp], 1
	jmp	SHORT $LN50@AddPolylin
$LN49@AddPolylin:
	mov	BYTE PTR tv95[rbp], 0
$LN50@AddPolylin:
	movzx	eax, BYTE PTR tv95[rbp]
	mov	BYTE PTR use_texture$12[rbp], al
; Line 745
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	je	SHORT $LN53@AddPolylin
	imul	eax, DWORD PTR count$[rbp], 6
	mov	DWORD PTR tv136[rbp], eax
	jmp	SHORT $LN54@AddPolylin
$LN53@AddPolylin:
	movzx	eax, BYTE PTR thick_line$[rbp]
	test	eax, eax
	je	SHORT $LN51@AddPolylin
	imul	eax, DWORD PTR count$[rbp], 18
	mov	DWORD PTR tv133[rbp], eax
	jmp	SHORT $LN52@AddPolylin
$LN51@AddPolylin:
	imul	eax, DWORD PTR count$[rbp], 12
	mov	DWORD PTR tv133[rbp], eax
$LN52@AddPolylin:
	mov	eax, DWORD PTR tv133[rbp]
	mov	DWORD PTR tv136[rbp], eax
$LN54@AddPolylin:
	mov	eax, DWORD PTR tv136[rbp]
	mov	DWORD PTR idx_count$13[rbp], eax
; Line 746
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	je	SHORT $LN57@AddPolylin
	mov	eax, DWORD PTR points_count$[rbp]
	add	eax, eax
	mov	DWORD PTR tv145[rbp], eax
	jmp	SHORT $LN58@AddPolylin
$LN57@AddPolylin:
	movzx	eax, BYTE PTR thick_line$[rbp]
	test	eax, eax
	je	SHORT $LN55@AddPolylin
	mov	eax, DWORD PTR points_count$[rbp]
	shl	eax, 2
	mov	DWORD PTR tv142[rbp], eax
	jmp	SHORT $LN56@AddPolylin
$LN55@AddPolylin:
	imul	eax, DWORD PTR points_count$[rbp], 3
	mov	DWORD PTR tv142[rbp], eax
$LN56@AddPolylin:
	mov	eax, DWORD PTR tv142[rbp]
	mov	DWORD PTR tv145[rbp], eax
$LN58@AddPolylin:
	mov	eax, DWORD PTR tv145[rbp]
	mov	DWORD PTR vtx_count$14[rbp], eax
; Line 747
	mov	r8d, DWORD PTR vtx_count$14[rbp]
	mov	edx, DWORD PTR idx_count$13[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 751
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	jne	SHORT $LN59@AddPolylin
	movzx	eax, BYTE PTR thick_line$[rbp]
	test	eax, eax
	je	SHORT $LN59@AddPolylin
	mov	DWORD PTR tv154[rbp], 5
	jmp	SHORT $LN60@AddPolylin
$LN59@AddPolylin:
	mov	DWORD PTR tv154[rbp], 3
$LN60@AddPolylin:
	mov	eax, DWORD PTR points_count$[rbp]
	imul	eax, DWORD PTR tv154[rbp]
	cdqe
	shl	rax, 3
	add	rax, 36					; 00000024H
	mov	QWORD PTR tv1270[rbp], rax
	mov	rax, QWORD PTR tv1270[rbp]
	add	rax, 15
	cmp	rax, QWORD PTR tv1270[rbp]
	ja	SHORT $LN77@AddPolylin
	mov	rax, 1152921504606846960		; 0ffffffffffffff0H
$LN77@AddPolylin:
	and	rax, -16
	call	__chkstk
	sub	rsp, rax
	lea	rax, QWORD PTR [rsp+32]
	mov	QWORD PTR tv149[rbp], rax
	lea	r8, QWORD PTR __$AllocaPad$$[rbp]
	mov	rdx, QWORD PTR tv1270[rbp]
	mov	rcx, QWORD PTR tv149[rbp]
	call	_RTC_AllocaHelper
	add	QWORD PTR tv149[rbp], 32		; 00000020H
	mov	rax, QWORD PTR tv149[rbp]
	mov	QWORD PTR temp_normals$15[rbp], rax
; Line 752
	movsxd	rax, DWORD PTR points_count$[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR temp_points$16[rbp], rax
; Line 755
	mov	DWORD PTR i1$17[rbp], 0
	jmp	SHORT $LN4@AddPolylin
$LN2@AddPolylin:
	mov	eax, DWORD PTR i1$17[rbp]
	inc	eax
	mov	DWORD PTR i1$17[rbp], eax
$LN4@AddPolylin:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i1$17[rbp], eax
	jge	$LN3@AddPolylin
; Line 757
	mov	eax, DWORD PTR i1$17[rbp]
	inc	eax
	cmp	eax, DWORD PTR points_count$[rbp]
	jne	SHORT $LN61@AddPolylin
	mov	DWORD PTR tv167[rbp], 0
	jmp	SHORT $LN62@AddPolylin
$LN61@AddPolylin:
	mov	eax, DWORD PTR i1$17[rbp]
	inc	eax
	mov	DWORD PTR tv167[rbp], eax
$LN62@AddPolylin:
	mov	eax, DWORD PTR tv167[rbp]
	mov	DWORD PTR i2$18[rbp], eax
; Line 758
	movsxd	rax, DWORD PTR i2$18[rbp]
	movsxd	rcx, DWORD PTR i1$17[rbp]
	mov	rdx, QWORD PTR points$[rbp]
	mov	r8, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8]
	subss	xmm0, DWORD PTR [r8+rcx*8]
	movss	DWORD PTR dx$19[rbp], xmm0
; Line 759
	movsxd	rax, DWORD PTR i2$18[rbp]
	movsxd	rcx, DWORD PTR i1$17[rbp]
	mov	rdx, QWORD PTR points$[rbp]
	mov	r8, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	subss	xmm0, DWORD PTR [r8+rcx*8+4]
	movss	DWORD PTR dy$20[rbp], xmm0
; Line 760
	movss	xmm0, DWORD PTR dx$19[rbp]
	mulss	xmm0, DWORD PTR dx$19[rbp]
	movss	xmm1, DWORD PTR dy$20[rbp]
	mulss	xmm1, DWORD PTR dy$20[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR d2$21[rbp], xmm0
	movss	xmm0, DWORD PTR d2$21[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN26@AddPolylin
	movss	xmm0, DWORD PTR d2$21[rbp]
	call	?ImRsqrt@@YAMM@Z			; ImRsqrt
	movss	DWORD PTR inv_len$22[rbp], xmm0
	movss	xmm0, DWORD PTR dx$19[rbp]
	mulss	xmm0, DWORD PTR inv_len$22[rbp]
	movss	DWORD PTR dx$19[rbp], xmm0
	movss	xmm0, DWORD PTR dy$20[rbp]
	mulss	xmm0, DWORD PTR inv_len$22[rbp]
	movss	DWORD PTR dy$20[rbp], xmm0
$LN26@AddPolylin:
; Line 761
	movsxd	rax, DWORD PTR i1$17[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	movss	xmm0, DWORD PTR dy$20[rbp]
	movss	DWORD PTR [rcx+rax*8], xmm0
; Line 762
	movss	xmm0, DWORD PTR dx$19[rbp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movsxd	rax, DWORD PTR i1$17[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	movss	DWORD PTR [rcx+rax*8+4], xmm0
; Line 763
	jmp	$LN2@AddPolylin
$LN3@AddPolylin:
; Line 764
	movzx	eax, BYTE PTR closed$[rbp]
	test	eax, eax
	jne	SHORT $LN27@AddPolylin
; Line 765
	mov	eax, DWORD PTR points_count$[rbp]
	sub	eax, 2
	cdqe
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, DWORD PTR points_count$[rbp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_normals$15[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
$LN27@AddPolylin:
; Line 768
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	jne	SHORT $LN30@AddPolylin
	movzx	eax, BYTE PTR thick_line$[rbp]
	test	eax, eax
	jne	$LN28@AddPolylin
$LN30@AddPolylin:
; Line 778
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	je	SHORT $LN63@AddPolylin
	movss	xmm0, DWORD PTR thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	addss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR tv222[rbp], xmm0
	jmp	SHORT $LN64@AddPolylin
$LN63@AddPolylin:
	movss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	movss	DWORD PTR tv222[rbp], xmm0
$LN64@AddPolylin:
	movss	xmm0, DWORD PTR tv222[rbp]
	movss	DWORD PTR half_draw_size$23[rbp], xmm0
; Line 781
	movzx	eax, BYTE PTR closed$[rbp]
	test	eax, eax
	jne	$LN31@AddPolylin
; Line 783
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm2, DWORD PTR half_draw_size$23[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T64[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR points$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T65[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 784
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm2, DWORD PTR half_draw_size$23[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T66[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR points$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T67[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 785
	mov	eax, DWORD PTR points_count$[rbp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	movss	xmm2, DWORD PTR half_draw_size$23[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T68[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, DWORD PTR points_count$[rbp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR points$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T69[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR points_count$[rbp]
	lea	ecx, DWORD PTR [rcx+rcx-2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 786
	mov	eax, DWORD PTR points_count$[rbp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	movss	xmm2, DWORD PTR half_draw_size$23[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T70[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, DWORD PTR points_count$[rbp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR points$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T71[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR points_count$[rbp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
$LN31@AddPolylin:
; Line 792
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR idx1$24[rbp], eax
; Line 793
	mov	DWORD PTR i1$25[rbp], 0
	jmp	SHORT $LN7@AddPolylin
$LN5@AddPolylin:
	mov	eax, DWORD PTR i1$25[rbp]
	inc	eax
	mov	DWORD PTR i1$25[rbp], eax
$LN7@AddPolylin:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i1$25[rbp], eax
	jge	$LN6@AddPolylin
; Line 795
	mov	eax, DWORD PTR i1$25[rbp]
	inc	eax
	cmp	eax, DWORD PTR points_count$[rbp]
	jne	SHORT $LN65@AddPolylin
	mov	DWORD PTR tv339[rbp], 0
	jmp	SHORT $LN66@AddPolylin
$LN65@AddPolylin:
	mov	eax, DWORD PTR i1$25[rbp]
	inc	eax
	mov	DWORD PTR tv339[rbp], eax
$LN66@AddPolylin:
	mov	eax, DWORD PTR tv339[rbp]
	mov	DWORD PTR i2$26[rbp], eax
; Line 796
	mov	eax, DWORD PTR i1$25[rbp]
	inc	eax
	cmp	eax, DWORD PTR points_count$[rbp]
	jne	SHORT $LN69@AddPolylin
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR tv347[rbp], eax
	jmp	SHORT $LN70@AddPolylin
$LN69@AddPolylin:
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	je	SHORT $LN67@AddPolylin
	mov	DWORD PTR tv345[rbp], 2
	jmp	SHORT $LN68@AddPolylin
$LN67@AddPolylin:
	mov	DWORD PTR tv345[rbp], 3
$LN68@AddPolylin:
	mov	eax, DWORD PTR tv345[rbp]
	mov	ecx, DWORD PTR idx1$24[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv347[rbp], eax
$LN70@AddPolylin:
	mov	eax, DWORD PTR tv347[rbp]
	mov	DWORD PTR idx2$27[rbp], eax
; Line 799
	movsxd	rax, DWORD PTR i1$25[rbp]
	movsxd	rcx, DWORD PTR i2$26[rbp]
	mov	rdx, QWORD PTR temp_normals$15[rbp]
	mov	r8, QWORD PTR temp_normals$15[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8]
	addss	xmm0, DWORD PTR [r8+rcx*8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR dm_x$28[rbp], xmm0
; Line 800
	movsxd	rax, DWORD PTR i1$25[rbp]
	movsxd	rcx, DWORD PTR i2$26[rbp]
	mov	rdx, QWORD PTR temp_normals$15[rbp]
	mov	r8, QWORD PTR temp_normals$15[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	addss	xmm0, DWORD PTR [r8+rcx*8+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR dm_y$29[rbp], xmm0
; Line 801
	movss	xmm0, DWORD PTR dm_x$28[rbp]
	mulss	xmm0, DWORD PTR dm_x$28[rbp]
	movss	xmm1, DWORD PTR dm_y$29[rbp]
	mulss	xmm1, DWORD PTR dm_y$29[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR d2$30[rbp], xmm0
	movss	xmm0, DWORD PTR d2$30[rbp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN32@AddPolylin
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR d2$30[rbp]
	movss	DWORD PTR inv_len2$31[rbp], xmm0
	movss	xmm0, DWORD PTR inv_len2$31[rbp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN33@AddPolylin
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR inv_len2$31[rbp], xmm0
$LN33@AddPolylin:
	movss	xmm0, DWORD PTR dm_x$28[rbp]
	mulss	xmm0, DWORD PTR inv_len2$31[rbp]
	movss	DWORD PTR dm_x$28[rbp], xmm0
	movss	xmm0, DWORD PTR dm_y$29[rbp]
	mulss	xmm0, DWORD PTR inv_len2$31[rbp]
	movss	DWORD PTR dm_y$29[rbp], xmm0
$LN32@AddPolylin:
; Line 802
	movss	xmm0, DWORD PTR dm_x$28[rbp]
	mulss	xmm0, DWORD PTR half_draw_size$23[rbp]
	movss	DWORD PTR dm_x$28[rbp], xmm0
; Line 803
	movss	xmm0, DWORD PTR dm_y$29[rbp]
	mulss	xmm0, DWORD PTR half_draw_size$23[rbp]
	movss	DWORD PTR dm_y$29[rbp], xmm0
; Line 806
	mov	eax, DWORD PTR i2$26[rbp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR out_vtx$32[rbp], rax
; Line 807
	movsxd	rax, DWORD PTR i2$26[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	addss	xmm0, DWORD PTR dm_x$28[rbp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out_vtx$32[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 808
	movsxd	rax, DWORD PTR i2$26[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	addss	xmm0, DWORD PTR dm_y$29[rbp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out_vtx$32[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 809
	movsxd	rax, DWORD PTR i2$26[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	subss	xmm0, DWORD PTR dm_x$28[rbp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_vtx$32[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 810
	movsxd	rax, DWORD PTR i2$26[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	subss	xmm0, DWORD PTR dm_y$29[rbp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_vtx$32[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 812
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	je	$LN34@AddPolylin
; Line 815
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx2$27[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx1$24[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, DWORD PTR idx1$24[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 816
	mov	eax, DWORD PTR idx2$27[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$24[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, 2
	imul	rax, rax, 5
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx2$27[rbp]
	mov	WORD PTR [rax+rcx], dx
; Line 817
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 818
	jmp	$LN35@AddPolylin
$LN34@AddPolylin:
; Line 822
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx2$27[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx1$24[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, DWORD PTR idx1$24[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 823
	mov	eax, DWORD PTR idx1$24[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx2$27[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, 2
	imul	rax, rax, 5
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx2$27[rbp]
	mov	WORD PTR [rax+rcx], dx
; Line 824
	mov	eax, DWORD PTR idx2$27[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$24[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx1$24[rbp]
	mov	WORD PTR [rax+rcx], dx
; Line 825
	mov	eax, 2
	imul	rax, rax, 9
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx1$24[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, 2
	imul	rax, rax, 10
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx2$27[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, DWORD PTR idx2$27[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 826
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 24
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
$LN35@AddPolylin:
; Line 829
	mov	eax, DWORD PTR idx2$27[rbp]
	mov	DWORD PTR idx1$24[rbp], eax
; Line 830
	jmp	$LN5@AddPolylin
$LN6@AddPolylin:
; Line 833
	movzx	eax, BYTE PTR use_texture$12[rbp]
	test	eax, eax
	je	$LN36@AddPolylin
; Line 836
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movsxd	rcx, DWORD PTR integer_thickness$10[rbp]
	imul	rcx, rcx, 16
	mov	rax, QWORD PTR [rax+504]
	lea	rdx, QWORD PTR tex_uvs$33[rbp]
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rax+rcx]
	mov	ecx, 16
	rep movsb
; Line 845
	movss	xmm2, DWORD PTR tex_uvs$33[rbp+4]
	movss	xmm1, DWORD PTR tex_uvs$33[rbp]
	lea	rcx, QWORD PTR tex_uv0$34[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 846
	movss	xmm2, DWORD PTR tex_uvs$33[rbp+12]
	movss	xmm1, DWORD PTR tex_uvs$33[rbp+8]
	lea	rcx, QWORD PTR tex_uv1$35[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
; Line 847
	mov	DWORD PTR i$36[rbp], 0
	jmp	SHORT $LN10@AddPolylin
$LN8@AddPolylin:
	mov	eax, DWORD PTR i$36[rbp]
	inc	eax
	mov	DWORD PTR i$36[rbp], eax
$LN10@AddPolylin:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i$36[rbp], eax
	jge	$LN9@AddPolylin
; Line 849
	mov	eax, DWORD PTR i$36[rbp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR tex_uv0$34[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 850
	mov	eax, DWORD PTR i$36[rbp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR tex_uv1$35[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 851
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 852
	jmp	$LN8@AddPolylin
$LN9@AddPolylin:
; Line 853
	jmp	$LN37@AddPolylin
$LN36@AddPolylin:
; Line 857
	mov	DWORD PTR i$37[rbp], 0
	jmp	SHORT $LN13@AddPolylin
$LN11@AddPolylin:
	mov	eax, DWORD PTR i$37[rbp]
	inc	eax
	mov	DWORD PTR i$37[rbp], eax
$LN13@AddPolylin:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i$37[rbp], eax
	jge	$LN12@AddPolylin
; Line 859
	movsxd	rax, DWORD PTR i$37[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 860
	mov	eax, DWORD PTR i$37[rbp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col_trans$9[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 861
	mov	eax, DWORD PTR i$37[rbp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col_trans$9[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 862
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 60					; 0000003cH
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 863
	jmp	$LN11@AddPolylin
$LN12@AddPolylin:
$LN37@AddPolylin:
; Line 865
	jmp	$LN29@AddPolylin
$LN28@AddPolylin:
; Line 869
	movss	xmm0, DWORD PTR thickness$[rbp]
	subss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR half_inner_thickness$38[rbp], xmm0
; Line 872
	movzx	eax, BYTE PTR closed$[rbp]
	test	eax, eax
	jne	$LN38@AddPolylin
; Line 874
	mov	eax, DWORD PTR points_count$[rbp]
	dec	eax
	mov	DWORD PTR points_last$39[rbp], eax
; Line 875
	movss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	addss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	add	rcx, rax
	mov	rax, rcx
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T72[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR points$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T73[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 876
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm2, DWORD PTR half_inner_thickness$38[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T74[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR points$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T75[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 877
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	add	rcx, rax
	mov	rax, rcx
	movss	xmm2, DWORD PTR half_inner_thickness$38[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T76[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR points$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T77[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 878
	movss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	addss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	add	rcx, rax
	mov	rax, rcx
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T78[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR points$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T79[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx], rax
; Line 879
	movss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	addss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	movsxd	rax, DWORD PTR points_last$39[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T80[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	movsxd	rcx, DWORD PTR points_last$39[rbp]
	mov	rdx, QWORD PTR points$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T81[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR points_last$39[rbp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 880
	movsxd	rax, DWORD PTR points_last$39[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	movss	xmm2, DWORD PTR half_inner_thickness$38[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T82[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	movsxd	rcx, DWORD PTR points_last$39[rbp]
	mov	rdx, QWORD PTR points$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T83[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR points_last$39[rbp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 881
	movsxd	rax, DWORD PTR points_last$39[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	movss	xmm2, DWORD PTR half_inner_thickness$38[rbp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T84[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	movsxd	rcx, DWORD PTR points_last$39[rbp]
	mov	rdx, QWORD PTR points$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T85[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR points_last$39[rbp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
; Line 882
	movss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	addss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	movsxd	rax, DWORD PTR points_last$39[rbp]
	mov	rcx, QWORD PTR temp_normals$15[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	movaps	xmm2, xmm0
	mov	rdx, rax
	lea	rcx, QWORD PTR $T86[rbp]
	call	??D@YA?AUImVec2@@AEBU0@M@Z		; operator*
	movsxd	rcx, DWORD PTR points_last$39[rbp]
	mov	rdx, QWORD PTR points$[rbp]
	lea	rcx, QWORD PTR [rdx+rcx*8]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T87[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR points_last$39[rbp]
	lea	ecx, DWORD PTR [rcx*4+3]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR temp_points$16[rbp]
	mov	QWORD PTR [rdx+rcx*8], rax
$LN38@AddPolylin:
; Line 888
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR idx1$40[rbp], eax
; Line 889
	mov	DWORD PTR i1$41[rbp], 0
	jmp	SHORT $LN16@AddPolylin
$LN14@AddPolylin:
	mov	eax, DWORD PTR i1$41[rbp]
	inc	eax
	mov	DWORD PTR i1$41[rbp], eax
$LN16@AddPolylin:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i1$41[rbp], eax
	jge	$LN15@AddPolylin
; Line 891
	mov	eax, DWORD PTR i1$41[rbp]
	inc	eax
	cmp	eax, DWORD PTR points_count$[rbp]
	jne	SHORT $LN71@AddPolylin
	mov	DWORD PTR tv797[rbp], 0
	jmp	SHORT $LN72@AddPolylin
$LN71@AddPolylin:
	mov	eax, DWORD PTR i1$41[rbp]
	inc	eax
	mov	DWORD PTR tv797[rbp], eax
$LN72@AddPolylin:
	mov	eax, DWORD PTR tv797[rbp]
	mov	DWORD PTR i2$42[rbp], eax
; Line 892
	mov	eax, DWORD PTR i1$41[rbp]
	inc	eax
	cmp	eax, DWORD PTR points_count$[rbp]
	jne	SHORT $LN73@AddPolylin
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	mov	DWORD PTR tv802[rbp], eax
	jmp	SHORT $LN74@AddPolylin
$LN73@AddPolylin:
	mov	eax, DWORD PTR idx1$40[rbp]
	add	eax, 4
	mov	DWORD PTR tv802[rbp], eax
$LN74@AddPolylin:
	mov	eax, DWORD PTR tv802[rbp]
	mov	DWORD PTR idx2$43[rbp], eax
; Line 895
	movsxd	rax, DWORD PTR i1$41[rbp]
	movsxd	rcx, DWORD PTR i2$42[rbp]
	mov	rdx, QWORD PTR temp_normals$15[rbp]
	mov	rdi, QWORD PTR temp_normals$15[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8]
	addss	xmm0, DWORD PTR [rdi+rcx*8]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR dm_x$44[rbp], xmm0
; Line 896
	movsxd	rax, DWORD PTR i1$41[rbp]
	movsxd	rcx, DWORD PTR i2$42[rbp]
	mov	rdx, QWORD PTR temp_normals$15[rbp]
	mov	rdi, QWORD PTR temp_normals$15[rbp]
	movss	xmm0, DWORD PTR [rdx+rax*8+4]
	addss	xmm0, DWORD PTR [rdi+rcx*8+4]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR dm_y$45[rbp], xmm0
; Line 897
	movss	xmm0, DWORD PTR dm_x$44[rbp]
	mulss	xmm0, DWORD PTR dm_x$44[rbp]
	movss	xmm1, DWORD PTR dm_y$45[rbp]
	mulss	xmm1, DWORD PTR dm_y$45[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR d2$46[rbp], xmm0
	movss	xmm0, DWORD PTR d2$46[rbp]
	comiss	xmm0, DWORD PTR __real@358637bd
	jbe	SHORT $LN39@AddPolylin
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR d2$46[rbp]
	movss	DWORD PTR inv_len2$47[rbp], xmm0
	movss	xmm0, DWORD PTR inv_len2$47[rbp]
	comiss	xmm0, DWORD PTR __real@42c80000
	jbe	SHORT $LN40@AddPolylin
	movss	xmm0, DWORD PTR __real@42c80000
	movss	DWORD PTR inv_len2$47[rbp], xmm0
$LN40@AddPolylin:
	movss	xmm0, DWORD PTR dm_x$44[rbp]
	mulss	xmm0, DWORD PTR inv_len2$47[rbp]
	movss	DWORD PTR dm_x$44[rbp], xmm0
	movss	xmm0, DWORD PTR dm_y$45[rbp]
	mulss	xmm0, DWORD PTR inv_len2$47[rbp]
	movss	DWORD PTR dm_y$45[rbp], xmm0
$LN39@AddPolylin:
; Line 898
	movss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	addss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	movss	xmm1, DWORD PTR dm_x$44[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dm_out_x$48[rbp], xmm0
; Line 899
	movss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	addss	xmm0, DWORD PTR AA_SIZE$8[rbp]
	movss	xmm1, DWORD PTR dm_y$45[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dm_out_y$49[rbp], xmm0
; Line 900
	movss	xmm0, DWORD PTR dm_x$44[rbp]
	mulss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	movss	DWORD PTR dm_in_x$50[rbp], xmm0
; Line 901
	movss	xmm0, DWORD PTR dm_y$45[rbp]
	mulss	xmm0, DWORD PTR half_inner_thickness$38[rbp]
	movss	DWORD PTR dm_in_y$51[rbp], xmm0
; Line 904
	mov	eax, DWORD PTR i2$42[rbp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR out_vtx$52[rbp], rax
; Line 905
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	addss	xmm0, DWORD PTR dm_out_x$48[rbp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 906
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	addss	xmm0, DWORD PTR dm_out_y$49[rbp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 907
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	addss	xmm0, DWORD PTR dm_in_x$50[rbp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 908
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	addss	xmm0, DWORD PTR dm_in_y$51[rbp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 909
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	subss	xmm0, DWORD PTR dm_in_x$50[rbp]
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 910
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	subss	xmm0, DWORD PTR dm_in_y$51[rbp]
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 911
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8]
	subss	xmm0, DWORD PTR dm_out_x$48[rbp]
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 912
	movsxd	rax, DWORD PTR i2$42[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	movss	xmm0, DWORD PTR [rcx+rax*8+4]
	subss	xmm0, DWORD PTR dm_out_y$49[rbp]
	mov	eax, 8
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out_vtx$52[rbp]
	movss	DWORD PTR [rcx+rax+4], xmm0
; Line 915
	mov	eax, DWORD PTR idx2$43[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$40[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$40[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 916
	mov	eax, DWORD PTR idx1$40[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx2$43[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx2$43[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 917
	mov	eax, DWORD PTR idx2$43[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$40[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx1$40[rbp]
	mov	WORD PTR [rax+rcx], dx
; Line 918
	mov	eax, 2
	imul	rax, rax, 9
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx1$40[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, 2
	imul	rax, rax, 10
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	movzx	edx, WORD PTR idx2$43[rbp]
	mov	WORD PTR [rax+rcx], dx
	mov	eax, DWORD PTR idx2$43[rbp]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 919
	mov	eax, DWORD PTR idx2$43[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$40[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx1$40[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 920
	mov	eax, DWORD PTR idx1$40[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx2$43[rbp]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	eax, DWORD PTR idx2$43[rbp]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 921
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 36					; 00000024H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 923
	mov	eax, DWORD PTR idx2$43[rbp]
	mov	DWORD PTR idx1$40[rbp], eax
; Line 924
	jmp	$LN14@AddPolylin
$LN15@AddPolylin:
; Line 927
	mov	DWORD PTR i$53[rbp], 0
	jmp	SHORT $LN19@AddPolylin
$LN17@AddPolylin:
	mov	eax, DWORD PTR i$53[rbp]
	inc	eax
	mov	DWORD PTR i$53[rbp], eax
$LN19@AddPolylin:
	mov	eax, DWORD PTR points_count$[rbp]
	cmp	DWORD PTR i$53[rbp], eax
	jge	$LN18@AddPolylin
; Line 929
	mov	eax, DWORD PTR i$53[rbp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col_trans$9[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 930
	mov	eax, DWORD PTR i$53[rbp]
	lea	eax, DWORD PTR [rax*4+1]
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 931
	mov	eax, DWORD PTR i$53[rbp]
	lea	eax, DWORD PTR [rax*4+2]
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 932
	mov	eax, DWORD PTR i$53[rbp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR temp_points$16[rbp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 20
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+72]
	mov	QWORD PTR [rdx+rcx], rax
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col_trans$9[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 933
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 934
	jmp	$LN17@AddPolylin
$LN18@AddPolylin:
$LN29@AddPolylin:
; Line 936
	movzx	eax, WORD PTR vtx_count$14[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+52]
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
; Line 937
	jmp	$LN25@AddPolylin
$LN24@AddPolylin:
; Line 941
	imul	eax, DWORD PTR count$[rbp], 6
	mov	DWORD PTR idx_count$54[rbp], eax
; Line 942
	mov	eax, DWORD PTR count$[rbp]
	shl	eax, 2
	mov	DWORD PTR vtx_count$55[rbp], eax
; Line 943
	mov	r8d, DWORD PTR vtx_count$55[rbp]
	mov	edx, DWORD PTR idx_count$54[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 945
	mov	DWORD PTR i1$56[rbp], 0
	jmp	SHORT $LN22@AddPolylin
$LN20@AddPolylin:
	mov	eax, DWORD PTR i1$56[rbp]
	inc	eax
	mov	DWORD PTR i1$56[rbp], eax
$LN22@AddPolylin:
	mov	eax, DWORD PTR count$[rbp]
	cmp	DWORD PTR i1$56[rbp], eax
	jge	$LN21@AddPolylin
; Line 947
	mov	eax, DWORD PTR i1$56[rbp]
	inc	eax
	cmp	eax, DWORD PTR points_count$[rbp]
	jne	SHORT $LN75@AddPolylin
	mov	DWORD PTR tv1083[rbp], 0
	jmp	SHORT $LN76@AddPolylin
$LN75@AddPolylin:
	mov	eax, DWORD PTR i1$56[rbp]
	inc	eax
	mov	DWORD PTR tv1083[rbp], eax
$LN76@AddPolylin:
	mov	eax, DWORD PTR tv1083[rbp]
	mov	DWORD PTR i2$57[rbp], eax
; Line 948
	movsxd	rax, DWORD PTR i1$56[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p1$58[rbp], rax
; Line 949
	movsxd	rax, DWORD PTR i2$57[rbp]
	mov	rcx, QWORD PTR points$[rbp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p2$59[rbp], rax
; Line 951
	mov	rax, QWORD PTR p2$59[rbp]
	mov	rcx, QWORD PTR p1$58[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR dx$60[rbp], xmm0
; Line 952
	mov	rax, QWORD PTR p2$59[rbp]
	mov	rcx, QWORD PTR p1$58[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR dy$61[rbp], xmm0
; Line 953
	movss	xmm0, DWORD PTR dx$60[rbp]
	mulss	xmm0, DWORD PTR dx$60[rbp]
	movss	xmm1, DWORD PTR dy$61[rbp]
	mulss	xmm1, DWORD PTR dy$61[rbp]
	addss	xmm0, xmm1
	movss	DWORD PTR d2$62[rbp], xmm0
	movss	xmm0, DWORD PTR d2$62[rbp]
	comiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN41@AddPolylin
	movss	xmm0, DWORD PTR d2$62[rbp]
	call	?ImRsqrt@@YAMM@Z			; ImRsqrt
	movss	DWORD PTR inv_len$63[rbp], xmm0
	movss	xmm0, DWORD PTR dx$60[rbp]
	mulss	xmm0, DWORD PTR inv_len$63[rbp]
	movss	DWORD PTR dx$60[rbp], xmm0
	movss	xmm0, DWORD PTR dy$61[rbp]
	mulss	xmm0, DWORD PTR inv_len$63[rbp]
	movss	DWORD PTR dy$61[rbp], xmm0
$LN41@AddPolylin:
; Line 954
	movss	xmm0, DWORD PTR thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR dx$60[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dx$60[rbp], xmm0
; Line 955
	movss	xmm0, DWORD PTR thickness$[rbp]
	mulss	xmm0, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR dy$61[rbp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR dy$61[rbp], xmm0
; Line 957
	mov	rax, QWORD PTR p1$58[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR dy$61[rbp]
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	rax, QWORD PTR p1$58[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR dx$60[rbp]
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 958
	mov	rax, QWORD PTR p2$59[rbp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR dy$61[rbp]
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	rax, QWORD PTR p2$59[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR dx$60[rbp]
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 959
	mov	rax, QWORD PTR p2$59[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR dy$61[rbp]
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	rax, QWORD PTR p2$59[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR dx$60[rbp]
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 2
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 960
	mov	rax, QWORD PTR p1$58[rbp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR dy$61[rbp]
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax], xmm0
	mov	rax, QWORD PTR p1$58[rbp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR dx$60[rbp]
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	movss	DWORD PTR [rcx+rax+4], xmm0
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	rdx, QWORD PTR opaque_uv$[rbp]
	mov	QWORD PTR [rcx+rax+8], rdx
	mov	eax, 20
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	edx, DWORD PTR col$[rbp]
	mov	DWORD PTR [rcx+rax+16], edx
; Line 961
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+72]
	add	rax, 80					; 00000050H
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+72], rax
; Line 963
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	rdx, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rdx+52]
	mov	WORD PTR [rax+rcx], dx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	inc	eax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 964
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	rdx, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rdx+52]
	mov	WORD PTR [rax+rcx], dx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 2
	mov	ecx, 2
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 3
	mov	ecx, 2
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+80]
	mov	WORD PTR [rcx+rdx], ax
; Line 965
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+80]
	add	rax, 12
	mov	rcx, QWORD PTR this$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 966
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 4
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx+52], eax
; Line 967
	jmp	$LN20@AddPolylin
$LN21@AddPolylin:
$LN25@AddPolylin:
$LN1@AddPolylin:
; Line 969
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z$rtcFrameData
	mov	r8, QWORD PTR __$AllocaPad$$[rbp]
	call	_RTC_CheckStackVars2
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+3904]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddPolyline@ImDrawList@@QEAAXPEBUImVec2@@HIHM@Z ENDP	; ImDrawList::AddPolyline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z
_TEXT	SEGMENT
clip_rect$ = 8
tv141 = 228
tv167 = 232
tv168 = 240
__$ArrayPad$ = 248
this$ = 288
font$ = 296
font_size$ = 304
pos$ = 312
col$ = 320
text_begin$ = 328
text_end$ = 336
wrap_width$ = 344
cpu_fine_clip_rect$ = 352
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z PROC ; ImDrawList::AddText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1576
$LN13:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 336				; 00000150H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rdi, QWORD PTR [rsp+80]
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+376]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1577
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddText
; Line 1578
	jmp	$LN1@AddText
$LN2@AddText:
; Line 1580
	cmp	QWORD PTR text_end$[rbp], 0
	jne	SHORT $LN3@AddText
; Line 1581
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR tv167[rbp], rax
	mov	QWORD PTR tv168[rbp], -1
$LL12@AddText:
	inc	QWORD PTR tv168[rbp]
	mov	rax, QWORD PTR tv167[rbp]
	mov	rcx, QWORD PTR tv168[rbp]
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL12@AddText
	mov	rax, QWORD PTR tv168[rbp]
	mov	rcx, QWORD PTR text_begin$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR text_end$[rbp], rax
$LN3@AddText:
; Line 1582
	mov	rax, QWORD PTR text_end$[rbp]
	cmp	QWORD PTR text_begin$[rbp], rax
	jne	SHORT $LN4@AddText
; Line 1583
	jmp	$LN1@AddText
$LN4@AddText:
; Line 1586
	cmp	QWORD PTR font$[rbp], 0
	jne	SHORT $LN5@AddText
; Line 1587
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR font$[rbp], rax
$LN5@AddText:
; Line 1588
	movss	xmm0, DWORD PTR font_size$[rbp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN6@AddText
	jne	SHORT $LN6@AddText
; Line 1589
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	movss	xmm0, DWORD PTR [rax+16]
	movss	DWORD PTR font_size$[rbp], xmm0
$LN6@AddText:
; Line 1591
	mov	rax, QWORD PTR font$[rbp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+152]
	cmp	QWORD PTR [rax+8], rcx
	je	SHORT $LN9@AddText
	mov	eax, DWORD PTR ?__LINE__Var@?0??AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z@4JA
	add	eax, 15
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1GI@CIGOLMNM@?$AAf?$AAo?$AAn?$AAt?$AA?9?$AA?$DO?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAe?$AAr@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@AddText:
; Line 1593
	lea	rax, QWORD PTR clip_rect$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+136]
	mov	ecx, 16
	rep movsb
; Line 1594
	cmp	QWORD PTR cpu_fine_clip_rect$[rbp], 0
	je	SHORT $LN7@AddText
; Line 1596
	mov	rax, QWORD PTR cpu_fine_clip_rect$[rbp]
	movss	xmm1, DWORD PTR [rax]
	movss	xmm0, DWORD PTR clip_rect$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR clip_rect$[rbp], xmm0
; Line 1597
	mov	rax, QWORD PTR cpu_fine_clip_rect$[rbp]
	movss	xmm1, DWORD PTR [rax+4]
	movss	xmm0, DWORD PTR clip_rect$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR clip_rect$[rbp+4], xmm0
; Line 1598
	mov	rax, QWORD PTR cpu_fine_clip_rect$[rbp]
	movss	xmm1, DWORD PTR [rax+8]
	movss	xmm0, DWORD PTR clip_rect$[rbp+8]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR clip_rect$[rbp+8], xmm0
; Line 1599
	mov	rax, QWORD PTR cpu_fine_clip_rect$[rbp]
	movss	xmm1, DWORD PTR [rax+12]
	movss	xmm0, DWORD PTR clip_rect$[rbp+12]
	call	??$ImMin@M@@YAMMM@Z			; ImMin<float>
	movss	DWORD PTR clip_rect$[rbp+12], xmm0
$LN7@AddText:
; Line 1601
	cmp	QWORD PTR cpu_fine_clip_rect$[rbp], 0
	je	SHORT $LN10@AddText
	mov	BYTE PTR tv141[rbp], 1
	jmp	SHORT $LN11@AddText
$LN10@AddText:
	mov	BYTE PTR tv141[rbp], 0
$LN11@AddText:
	movzx	eax, BYTE PTR tv141[rbp]
	mov	BYTE PTR [rsp+72], al
	movss	xmm0, DWORD PTR wrap_width$[rbp]
	movss	DWORD PTR [rsp+64], xmm0
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR clip_rect$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR pos$[rbp]
	mov	r9, QWORD PTR [rax]
	movss	xmm2, DWORD PTR font_size$[rbp]
	mov	rdx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR font$[rbp]
	call	?RenderText@ImFont@@QEBAXPEAUImDrawList@@MUImVec2@@IAEBUImVec4@@PEBD3M_N@Z ; ImFont::RenderText
$LN1@AddText:
; Line 1602
	lea	rcx, QWORD PTR [rbp-80]
	lea	rdx, OFFSET FLAT:?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+256]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ENDP ; ImDrawList::AddText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z
_TEXT	SEGMENT
this$ = 224
pos$ = 232
col$ = 240
text_begin$ = 248
text_end$ = 256
?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z PROC	; ImDrawList::AddText, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1605
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+80]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1606
	mov	QWORD PTR [rsp+64], 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	mov	rax, QWORD PTR text_end$[rbp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR text_begin$[rbp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR col$[rbp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR pos$[rbp]
	xorps	xmm2, xmm2
	xor	edx, edx
	mov	rcx, QWORD PTR this$[rbp]
	call	?AddText@ImDrawList@@QEAAXPEBUImFont@@MAEBUImVec2@@IPEBD2MPEBUImVec4@@@Z ; ImDrawList::AddText
; Line 1607
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddText@ImDrawList@@QEAAXAEBUImVec2@@IPEBD1@Z ENDP	; ImDrawList::AddText
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
_TEXT	SEGMENT
a_max$ = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z PROC	; ImDrawList::AddNgonFilled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1543
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1544
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	je	SHORT $LN3@AddNgonFil
	cmp	DWORD PTR num_segments$[rbp], 2
	jg	SHORT $LN2@AddNgonFil
$LN3@AddNgonFil:
; Line 1545
	jmp	SHORT $LN1@AddNgonFil
$LN2@AddNgonFil:
; Line 1548
	cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@40c90fdb
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
	divss	xmm0, xmm1
	movss	DWORD PTR a_max$[rbp], xmm0
; Line 1549
	mov	eax, DWORD PTR num_segments$[rbp]
	dec	eax
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR a_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
; Line 1550
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
$LN1@AddNgonFil:
; Line 1551
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddNgonFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ENDP	; ImDrawList::AddNgonFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
_TEXT	SEGMENT
a_max$ = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
thickness$ = 296
?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z PROC	; ImDrawList::AddNgon, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1531
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1532
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	je	SHORT $LN3@AddNgon
	cmp	DWORD PTR num_segments$[rbp], 2
	jg	SHORT $LN2@AddNgon
$LN3@AddNgon:
; Line 1533
	jmp	$LN1@AddNgon
$LN2@AddNgon:
; Line 1536
	cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@40c90fdb
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
	divss	xmm0, xmm1
	movss	DWORD PTR a_max$[rbp], xmm0
; Line 1537
	mov	eax, DWORD PTR num_segments$[rbp]
	dec	eax
	movss	xmm0, DWORD PTR radius$[rbp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	DWORD PTR [rsp+40], eax
	movss	xmm1, DWORD PTR a_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm1
	xorps	xmm3, xmm3
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
; Line 1538
	movss	xmm3, DWORD PTR thickness$[rbp]
	mov	r8d, 1
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddNgon:
; Line 1539
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddNgon@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ENDP	; ImDrawList::AddNgon
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z
_TEXT	SEGMENT
a_max$ = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z PROC ; ImDrawList::AddCircleFilled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1504
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1505
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	je	SHORT $LN3@AddCircleF
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	SHORT $LN2@AddCircleF
$LN3@AddCircleF:
; Line 1506
	jmp	$LN1@AddCircleF
$LN2@AddCircleF:
; Line 1509
	cmp	DWORD PTR num_segments$[rbp], 0
	jg	SHORT $LN4@AddCircleF
; Line 1512
	movss	xmm1, DWORD PTR radius$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
	mov	DWORD PTR num_segments$[rbp], eax
; Line 1513
	jmp	SHORT $LN5@AddCircleF
$LN4@AddCircleF:
; Line 1517
	mov	r8d, 512				; 00000200H
	mov	edx, 3
	mov	ecx, DWORD PTR num_segments$[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR num_segments$[rbp], eax
$LN5@AddCircleF:
; Line 1521
	cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@40c90fdb
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
	divss	xmm0, xmm1
	movss	DWORD PTR a_max$[rbp], xmm0
; Line 1522
	cmp	DWORD PTR num_segments$[rbp], 12
	jne	SHORT $LN6@AddCircleF
; Line 1523
	mov	DWORD PTR [rsp+32], 11
	xor	r9d, r9d
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
	jmp	SHORT $LN7@AddCircleF
$LN6@AddCircleF:
; Line 1525
	mov	eax, DWORD PTR num_segments$[rbp]
	dec	eax
	mov	DWORD PTR [rsp+40], eax
	movss	xmm0, DWORD PTR a_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR radius$[rbp]
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN7@AddCircleF:
; Line 1526
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
$LN1@AddCircleF:
; Line 1527
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddCircleFilled@ImDrawList@@QEAAXAEBUImVec2@@MIH@Z ENDP ; ImDrawList::AddCircleFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z
_TEXT	SEGMENT
a_max$ = 4
this$ = 256
center$ = 264
radius$ = 272
col$ = 280
num_segments$ = 288
thickness$ = 296
?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z PROC	; ImDrawList::AddCircle, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1478
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 280				; 00000118H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1479
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	je	SHORT $LN3@AddCircle
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR radius$[rbp]
	jb	SHORT $LN2@AddCircle
$LN3@AddCircle:
; Line 1480
	jmp	$LN1@AddCircle
$LN2@AddCircle:
; Line 1483
	cmp	DWORD PTR num_segments$[rbp], 0
	jg	SHORT $LN4@AddCircle
; Line 1486
	movss	xmm1, DWORD PTR radius$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_CalcCircleAutoSegmentCount@ImDrawList@@QEBAHM@Z ; ImDrawList::_CalcCircleAutoSegmentCount
	mov	DWORD PTR num_segments$[rbp], eax
; Line 1487
	jmp	SHORT $LN5@AddCircle
$LN4@AddCircle:
; Line 1491
	mov	r8d, 512				; 00000200H
	mov	edx, 3
	mov	ecx, DWORD PTR num_segments$[rbp]
	call	??$ImClamp@H@@YAHHHH@Z			; ImClamp<int>
	mov	DWORD PTR num_segments$[rbp], eax
$LN5@AddCircle:
; Line 1495
	cvtsi2ss xmm0, DWORD PTR num_segments$[rbp]
	subss	xmm0, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@40c90fdb
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR num_segments$[rbp]
	divss	xmm0, xmm1
	movss	DWORD PTR a_max$[rbp], xmm0
; Line 1496
	cmp	DWORD PTR num_segments$[rbp], 12
	jne	SHORT $LN6@AddCircle
; Line 1497
	movss	xmm0, DWORD PTR radius$[rbp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	DWORD PTR [rsp+32], 11
	xor	r9d, r9d
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcToFast@ImDrawList@@QEAAXAEBUImVec2@@MHH@Z ; ImDrawList::PathArcToFast
	jmp	SHORT $LN7@AddCircle
$LN6@AddCircle:
; Line 1499
	mov	eax, DWORD PTR num_segments$[rbp]
	dec	eax
	movss	xmm0, DWORD PTR radius$[rbp]
	subss	xmm0, DWORD PTR __real@3f000000
	mov	DWORD PTR [rsp+40], eax
	movss	xmm1, DWORD PTR a_max$[rbp]
	movss	DWORD PTR [rsp+32], xmm1
	xorps	xmm3, xmm3
	movaps	xmm2, xmm0
	mov	rdx, QWORD PTR center$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathArcTo@ImDrawList@@QEAAXAEBUImVec2@@MMMH@Z ; ImDrawList::PathArcTo
$LN7@AddCircle:
; Line 1500
	movss	xmm3, DWORD PTR thickness$[rbp]
	mov	r8d, 1
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddCircle:
; Line 1501
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?AddCircle@ImDrawList@@QEAAXAEBUImVec2@@MIHM@Z ENDP	; ImDrawList::AddCircle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
col$ = 256
?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z PROC ; ImDrawList::AddTriangleFilled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1467
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1468
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddTriangl
; Line 1469
	jmp	SHORT $LN1@AddTriangl
$LN2@AddTriangl:
; Line 1471
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1472
	mov	rdx, QWORD PTR p2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1473
	mov	rdx, QWORD PTR p3$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1474
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
$LN1@AddTriangl:
; Line 1475
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddTriangleFilled@ImDrawList@@QEAAXAEBUImVec2@@00I@Z ENDP ; ImDrawList::AddTriangleFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
col$ = 256
thickness$ = 264
?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z PROC	; ImDrawList::AddTriangle, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1456
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1457
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddTriangl
; Line 1458
	jmp	SHORT $LN1@AddTriangl
$LN2@AddTriangl:
; Line 1460
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1461
	mov	rdx, QWORD PTR p2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1462
	mov	rdx, QWORD PTR p3$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1463
	movss	xmm3, DWORD PTR thickness$[rbp]
	mov	r8d, 1
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddTriangl:
; Line 1464
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddTriangle@ImDrawList@@QEAAXAEBUImVec2@@00IM@Z ENDP	; ImDrawList::AddTriangle
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
p4$ = 256
col$ = 264
?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z PROC	; ImDrawList::AddQuadFilled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1444
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1445
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddQuadFil
; Line 1446
	jmp	SHORT $LN1@AddQuadFil
$LN2@AddQuadFil:
; Line 1448
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1449
	mov	rdx, QWORD PTR p2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1450
	mov	rdx, QWORD PTR p3$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1451
	mov	rdx, QWORD PTR p4$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1452
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
$LN1@AddQuadFil:
; Line 1453
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddQuadFilled@ImDrawList@@QEAAXAEBUImVec2@@000I@Z ENDP	; ImDrawList::AddQuadFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z
_TEXT	SEGMENT
this$ = 224
p1$ = 232
p2$ = 240
p3$ = 248
p4$ = 256
col$ = 264
thickness$ = 272
?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z PROC	; ImDrawList::AddQuad, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1432
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1433
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddQuad
; Line 1434
	jmp	SHORT $LN1@AddQuad
$LN2@AddQuad:
; Line 1436
	mov	rdx, QWORD PTR p1$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1437
	mov	rdx, QWORD PTR p2$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1438
	mov	rdx, QWORD PTR p3$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1439
	mov	rdx, QWORD PTR p4$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1440
	movss	xmm3, DWORD PTR thickness$[rbp]
	mov	r8d, 1
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddQuad:
; Line 1441
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddQuad@ImDrawList@@QEAAXAEBUImVec2@@000IM@Z ENDP	; ImDrawList::AddQuad
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z
_TEXT	SEGMENT
uv$ = 8
$T4 = 228
$T5 = 260
__$ArrayPad$ = 280
this$ = 320
p_min$ = 328
p_max$ = 336
col_upr_left$ = 344
col_upr_right$ = 352
col_bot_right$ = 360
col_bot_left$ = 368
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z PROC ; ImDrawList::AddRectFilledMultiColor, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1417
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rdi, QWORD PTR [rsp+32]
	mov	ecx, 26
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+360]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1418
	mov	eax, DWORD PTR col_upr_right$[rbp]
	mov	ecx, DWORD PTR col_upr_left$[rbp]
	or	ecx, eax
	mov	eax, ecx
	or	eax, DWORD PTR col_bot_right$[rbp]
	or	eax, DWORD PTR col_bot_left$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddRectFil
; Line 1419
	jmp	$LN1@AddRectFil
$LN2@AddRectFil:
; Line 1421
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR uv$[rbp], rax
; Line 1422
	mov	r8d, 4
	mov	edx, 6
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 1423
	mov	rax, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rax+52]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	inc	eax
	movzx	edx, ax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 2
	movzx	edx, ax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
; Line 1424
	mov	rax, QWORD PTR this$[rbp]
	movzx	edx, WORD PTR [rax+52]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 2
	movzx	edx, ax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+52]
	add	eax, 3
	movzx	edx, ax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteIdx@ImDrawList@@QEAAXG@Z	; ImDrawList::PrimWriteIdx
; Line 1425
	mov	r9d, DWORD PTR col_upr_left$[rbp]
	lea	r8, QWORD PTR uv$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx
; Line 1426
	mov	rax, QWORD PTR p_min$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR p_max$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9d, DWORD PTR col_upr_right$[rbp]
	lea	r8, QWORD PTR uv$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx
; Line 1427
	mov	r9d, DWORD PTR col_bot_right$[rbp]
	lea	r8, QWORD PTR uv$[rbp]
	mov	rdx, QWORD PTR p_max$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx
; Line 1428
	mov	rax, QWORD PTR p_max$[rbp]
	movss	xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR p_min$[rbp]
	movss	xmm1, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r9d, DWORD PTR col_bot_left$[rbp]
	lea	r8, QWORD PTR uv$[rbp]
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimWriteVtx@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimWriteVtx
$LN1@AddRectFil:
; Line 1429
	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?AddRectFilledMultiColor@ImDrawList@@QEAAXAEBUImVec2@@0IIII@Z ENDP ; ImDrawList::AddRectFilledMultiColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z
_TEXT	SEGMENT
this$ = 224
p_min$ = 232
p_max$ = 240
col$ = 248
rounding$ = 256
flags$ = 264
?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z PROC	; ImDrawList::AddRectFilled, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1400
$LN7:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1401
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddRectFil
; Line 1402
	jmp	$LN1@AddRectFil
$LN2@AddRectFil:
; Line 1403
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR rounding$[rbp]
	jae	SHORT $LN5@AddRectFil
	mov	eax, DWORD PTR flags$[rbp]
	and	eax, 496				; 000001f0H
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN3@AddRectFil
$LN5@AddRectFil:
; Line 1405
	mov	r8d, 4
	mov	edx, 6
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimReserve@ImDrawList@@QEAAXHH@Z	; ImDrawList::PrimReserve
; Line 1406
	mov	r9d, DWORD PTR col$[rbp]
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PrimRect@ImDrawList@@QEAAXAEBUImVec2@@0I@Z ; ImDrawList::PrimRect
; Line 1407
	jmp	SHORT $LN4@AddRectFil
$LN3@AddRectFil:
; Line 1410
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR rounding$[rbp]
	mov	r8, QWORD PTR p_max$[rbp]
	mov	rdx, QWORD PTR p_min$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect
; Line 1411
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathFillConvex@ImDrawList@@QEAAXI@Z	; ImDrawList::PathFillConvex
$LN4@AddRectFil:
$LN1@AddRectFil:
; Line 1413
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?AddRectFilled@ImDrawList@@QEAAXAEBUImVec2@@0IMH@Z ENDP	; ImDrawList::AddRectFilled
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
$T5 = 324
$T6 = 356
$T7 = 388
$T8 = 420
tv150 = 440
tv93 = 440
tv148 = 448
tv91 = 448
this$ = 496
p_min$ = 504
p_max$ = 512
col$ = 520
rounding$ = 528
flags$ = 536
thickness$ = 544
?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z PROC	; ImDrawList::AddRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1389
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 520				; 00000208H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1390
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddRect
; Line 1391
	jmp	$LN1@AddRect
$LN2@AddRect:
; Line 1392
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	$LN3@AddRect
; Line 1393
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR p_max$[rbp]
	lea	rcx, QWORD PTR $T2[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv93[rbp], rax
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR p_min$[rbp]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv91[rbp], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR rounding$[rbp]
	mov	r8, QWORD PTR tv93[rbp]
	mov	rdx, QWORD PTR tv91[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect
	jmp	$LN4@AddRect
$LN3@AddRect:
; Line 1395
	movss	xmm2, DWORD PTR __real@3efae148
	movss	xmm1, DWORD PTR __real@3efae148
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR p_max$[rbp]
	lea	rcx, QWORD PTR $T6[rbp]
	call	??G@YA?AUImVec2@@AEBU0@0@Z		; operator-
	mov	QWORD PTR tv150[rbp], rax
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR p_min$[rbp]
	lea	rcx, QWORD PTR $T8[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	QWORD PTR tv148[rbp], rax
	mov	eax, DWORD PTR flags$[rbp]
	mov	DWORD PTR [rsp+32], eax
	movss	xmm3, DWORD PTR rounding$[rbp]
	mov	r8, QWORD PTR tv150[rbp]
	mov	rdx, QWORD PTR tv148[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathRect@ImDrawList@@QEAAXAEBUImVec2@@0MH@Z ; ImDrawList::PathRect
$LN4@AddRect:
; Line 1396
	movss	xmm3, DWORD PTR thickness$[rbp]
	mov	r8d, 1
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddRect:
; Line 1397
	lea	rsp, QWORD PTR [rbp+472]
	pop	rdi
	pop	rbp
	ret	0
?AddRect@ImDrawList@@QEAAXAEBUImVec2@@0IMHM@Z ENDP	; ImDrawList::AddRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 260
$T4 = 292
this$ = 352
p1$ = 360
p2$ = 368
col$ = 376
thickness$ = 384
?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z PROC	; ImDrawList::AddLine, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1378
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1379
	mov	eax, DWORD PTR col$[rbp]
	and	eax, -16777216				; ff000000H
	test	eax, eax
	jne	SHORT $LN2@AddLine
; Line 1380
	jmp	$LN1@AddLine
$LN2@AddLine:
; Line 1381
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR p1$[rbp]
	lea	rcx, QWORD PTR $T2[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1382
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	r8, rax
	mov	rdx, QWORD PTR p2$[rbp]
	lea	rcx, QWORD PTR $T4[rbp]
	call	??H@YA?AUImVec2@@AEBU0@0@Z		; operator+
	mov	rdx, rax
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathLineTo@ImDrawList@@QEAAXAEBUImVec2@@@Z ; ImDrawList::PathLineTo
; Line 1383
	movss	xmm3, DWORD PTR thickness$[rbp]
	xor	r8d, r8d
	mov	edx, DWORD PTR col$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PathStroke@ImDrawList@@QEAAXIHM@Z	; ImDrawList::PathStroke
$LN1@AddLine:
; Line 1384
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?AddLine@ImDrawList@@QEAAXAEBUImVec2@@0IM@Z ENDP	; ImDrawList::AddLine
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PopTextureID@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
tv80 = 192
this$ = 240
?PopTextureID@ImDrawList@@QEAAXXZ PROC			; ImDrawList::PopTextureID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 617
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 618
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	?pop_back@?$ImVector@PEAX@@QEAAXXZ	; ImVector<void *>::pop_back
; Line 619
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+104], 0
	jne	SHORT $LN3@PopTexture
	mov	QWORD PTR tv80[rbp], 0
	jmp	SHORT $LN4@PopTexture
$LN3@PopTexture:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+104]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR tv80[rbp], rax
$LN4@PopTexture:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR tv80[rbp]
	mov	QWORD PTR [rax+152], rcx
; Line 620
	mov	rcx, QWORD PTR this$[rbp]
	call	?_OnChangedTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedTextureID
; Line 621
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?PopTextureID@ImDrawList@@QEAAXXZ ENDP			; ImDrawList::PopTextureID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushTextureID@ImDrawList@@QEAAXPEAX@Z
_TEXT	SEGMENT
tv68 = 192
this$ = 240
texture_id$ = 248
?PushTextureID@ImDrawList@@QEAAXPEAX@Z PROC		; ImDrawList::PushTextureID, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 610
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 611
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	QWORD PTR tv68[rbp], rax
	lea	rdx, QWORD PTR texture_id$[rbp]
	mov	rcx, QWORD PTR tv68[rbp]
	call	?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z ; ImVector<void *>::push_back
; Line 612
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR texture_id$[rbp]
	mov	QWORD PTR [rax+152], rcx
; Line 613
	mov	rcx, QWORD PTR this$[rbp]
	call	?_OnChangedTextureID@ImDrawList@@QEAAXXZ ; ImDrawList::_OnChangedTextureID
; Line 614
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?PushTextureID@ImDrawList@@QEAAXPEAX@Z ENDP		; ImDrawList::PushTextureID
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PopClipRect@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 200
tv82 = 216
this$ = 256
?PopClipRect@ImDrawList@@QEAAXXZ PROC			; ImDrawList::PopClipRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 603
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 604
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ	; ImVector<ImVec4>::pop_back
; Line 605
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+88], 0
	jne	SHORT $LN3@PopClipRec
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	add	rax, 28
	mov	QWORD PTR tv82[rbp], rax
	jmp	SHORT $LN4@PopClipRec
$LN3@PopClipRec:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+88]
	dec	eax
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+96]
	mov	QWORD PTR tv82[rbp], rax
$LN4@PopClipRec:
	mov	rax, QWORD PTR tv82[rbp]
	mov	QWORD PTR $T1[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	lea	rdi, QWORD PTR [rax+136]
	mov	rsi, QWORD PTR $T1[rbp]
	mov	ecx, 16
	rep movsb
; Line 606
	mov	rcx, QWORD PTR this$[rbp]
	call	?_OnChangedClipRect@ImDrawList@@QEAAXXZ	; ImDrawList::_OnChangedClipRect
; Line 607
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?PopClipRect@ImDrawList@@QEAAXXZ ENDP			; ImDrawList::PopClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushClipRectFullScreen@ImDrawList@@QEAAXXZ
_TEXT	SEGMENT
$T1 = 196
$T2 = 228
$T3 = 264
$T4 = 296
this$ = 352
?PushClipRectFullScreen@ImDrawList@@QEAAXXZ PROC	; ImDrawList::PushClipRectFullScreen, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 598
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 360				; 00000168H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 599
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	movss	xmm2, DWORD PTR [rax+40]
	movss	xmm1, DWORD PTR [rcx+36]
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T4[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+56]
	movss	xmm2, DWORD PTR [rax+32]
	movss	xmm1, DWORD PTR [rcx+28]
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec2@@QEAA@MM@Z			; ImVec2::ImVec2
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR $T3[rbp], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR $T4[rbp]
	mov	rdx, QWORD PTR $T3[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z ; ImDrawList::PushClipRect
; Line 600
	lea	rsp, QWORD PTR [rbp+328]
	pop	rdi
	pop	rbp
	ret	0
?PushClipRectFullScreen@ImDrawList@@QEAAXXZ ENDP	; ImDrawList::PushClipRectFullScreen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z
_TEXT	SEGMENT
cr$ = 8
current$5 = 56
tv88 = 280
__$ArrayPad$ = 288
this$ = 336
cr_min$ = 344
cr_max$ = 352
intersect_with_current_clip_rect$ = 360
?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z PROC	; ImDrawList::PushClipRect, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 579
$LN8:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 352				; 00000160H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rdi, QWORD PTR [rsp+48]
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+392]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 580
	movss	xmm0, DWORD PTR cr_max$[rbp+4]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR cr_max$[rbp]
	movss	xmm2, DWORD PTR cr_min$[rbp+4]
	movss	xmm1, DWORD PTR cr_min$[rbp]
	lea	rcx, QWORD PTR cr$[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
; Line 581
	movzx	eax, BYTE PTR intersect_with_current_clip_rect$[rbp]
	test	eax, eax
	je	SHORT $LN2@PushClipRe
; Line 583
	lea	rax, QWORD PTR current$5[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+136]
	mov	ecx, 16
	rep movsb
; Line 584
	movss	xmm0, DWORD PTR current$5[rbp]
	comiss	xmm0, DWORD PTR cr$[rbp]
	jbe	SHORT $LN3@PushClipRe
	movss	xmm0, DWORD PTR current$5[rbp]
	movss	DWORD PTR cr$[rbp], xmm0
$LN3@PushClipRe:
; Line 585
	movss	xmm0, DWORD PTR current$5[rbp+4]
	comiss	xmm0, DWORD PTR cr$[rbp+4]
	jbe	SHORT $LN4@PushClipRe
	movss	xmm0, DWORD PTR current$5[rbp+4]
	movss	DWORD PTR cr$[rbp+4], xmm0
$LN4@PushClipRe:
; Line 586
	movss	xmm0, DWORD PTR cr$[rbp+8]
	comiss	xmm0, DWORD PTR current$5[rbp+8]
	jbe	SHORT $LN5@PushClipRe
	movss	xmm0, DWORD PTR current$5[rbp+8]
	movss	DWORD PTR cr$[rbp+8], xmm0
$LN5@PushClipRe:
; Line 587
	movss	xmm0, DWORD PTR cr$[rbp+12]
	comiss	xmm0, DWORD PTR current$5[rbp+12]
	jbe	SHORT $LN6@PushClipRe
	movss	xmm0, DWORD PTR current$5[rbp+12]
	movss	DWORD PTR cr$[rbp+12], xmm0
$LN6@PushClipRe:
$LN2@PushClipRe:
; Line 589
	movss	xmm1, DWORD PTR cr$[rbp+8]
	movss	xmm0, DWORD PTR cr$[rbp]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR cr$[rbp+8], xmm0
; Line 590
	movss	xmm1, DWORD PTR cr$[rbp+12]
	movss	xmm0, DWORD PTR cr$[rbp+4]
	call	??$ImMax@M@@YAMMM@Z			; ImMax<float>
	movss	DWORD PTR cr$[rbp+12], xmm0
; Line 592
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR tv88[rbp], rax
	lea	rdx, QWORD PTR cr$[rbp]
	mov	rcx, QWORD PTR tv88[rbp]
	call	?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z ; ImVector<ImVec4>::push_back
; Line 593
	mov	rax, QWORD PTR this$[rbp]
	lea	rcx, QWORD PTR cr$[rbp]
	lea	rdi, QWORD PTR [rax+136]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 594
	mov	rcx, QWORD PTR this$[rbp]
	call	?_OnChangedClipRect@ImDrawList@@QEAAXXZ	; ImDrawList::_OnChangedClipRect
; Line 595
	lea	rcx, QWORD PTR [rbp-48]
	lea	rdx, OFFSET FLAT:?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+304]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?PushClipRect@ImDrawList@@QEAAXUImVec2@@0_N@Z ENDP	; ImDrawList::PushClipRect
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z
_TEXT	SEGMENT
this$ = 224
shared_data$ = 232
??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z PROC	; ImDrawList::ImDrawList, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2387
$LN10:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@UImDrawCmd@@@@QEAA@XZ	; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	??0?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::ImVector<unsigned short>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 32					; 00000020H
	mov	rcx, rax
	call	??0?$ImVector@UImDrawVert@@@@QEAA@XZ	; ImVector<ImDrawVert>::ImVector<ImDrawVert>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 88					; 00000058H
	mov	rcx, rax
	call	??0?$ImVector@UImVec4@@@@QEAA@XZ	; ImVector<ImVec4>::ImVector<ImVec4>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 104				; 00000068H
	mov	rcx, rax
	call	??0?$ImVector@PEAX@@QEAA@XZ		; ImVector<void *>::ImVector<void *>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 120				; 00000078H
	mov	rcx, rax
	call	??0?$ImVector@UImVec2@@@@QEAA@XZ	; ImVector<ImVec2>::ImVector<ImVec2>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 136				; 00000088H
	mov	rcx, rax
	call	??0ImDrawCmdHeader@@QEAA@XZ
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 168				; 000000a8H
	mov	rcx, rax
	call	??0ImDrawListSplitter@@QEAA@XZ		; ImDrawListSplitter::ImDrawListSplitter
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 200				; 000000c8H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR shared_data$[rbp]
	mov	QWORD PTR [rax+56], rcx
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z ENDP	; ImDrawList::ImDrawList
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
shared_data$ = 232
?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$ImVector@UImDrawCmd@@@@QEAA@XZ	; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
shared_data$ = 232
?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 16
	call	??1?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::~ImVector<unsigned short>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$1@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$1
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
shared_data$ = 232
?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$2
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 32					; 00000020H
	call	??1?$ImVector@UImDrawVert@@@@QEAA@XZ	; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$2@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$2
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
shared_data$ = 232
?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$3
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 88					; 00000058H
	call	??1?$ImVector@UImVec4@@@@QEAA@XZ	; ImVector<ImVec4>::~ImVector<ImVec4>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$3@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$3
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
shared_data$ = 232
?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$4
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 104				; 00000068H
	call	??1?$ImVector@PEAX@@QEAA@XZ		; ImVector<void *>::~ImVector<void *>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$4@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$4
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
shared_data$ = 232
?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA PROC ; `ImDrawList::ImDrawList'::`1'::dtor$5
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	add	rcx, 120				; 00000078H
	call	??1?$ImVector@UImVec2@@@@QEAA@XZ	; ImVector<ImVec2>::~ImVector<ImVec2>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$5@?0???0ImDrawList@@QEAA@PEBUImDrawListSharedData@@@Z@4HA ENDP ; `ImDrawList::ImDrawList'::`1'::dtor$5
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z PROC ; ImVector<ImVec2>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImVec2@@@@QEAAXAEBUImVec2@@@Z ENDP ; ImVector<ImVec2>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImVec2@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImVec2@@@@QEAAXH@Z PROC		; ImVector<ImVec2>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ; ImVector<ImVec2>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImVec2@@@@QEAAXH@Z	; ImVector<ImVec2>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImVec2@@@@QEAAXH@Z ENDP		; ImVector<ImVec2>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z PROC	; ImVector<ImVec2>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImVec2@@@@QEBAHH@Z ENDP	; ImVector<ImVec2>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ PROC	; ImVector<ImVec2>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImVec2@@@@QEAAAEAUImVec2@@XZ ENDP	; ImVector<ImVec2>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImVec2@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImVec2@@@@QEAAXXZ PROC		; ImVector<ImVec2>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImVec2@@@@QEAAXXZ ENDP		; ImVector<ImVec2>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImVec2@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImVec2@@@@QEAA@XZ PROC			; ImVector<ImVec2>::~ImVector<ImVec2>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImVec2@@@@QEAA@XZ ENDP			; ImVector<ImVec2>::~ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImVec2@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImVec2@@@@QEAA@XZ PROC			; ImVector<ImVec2>::ImVector<ImVec2>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImVec2@@@@QEAA@XZ ENDP			; ImVector<ImVec2>::ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pop_back@?$ImVector@PEAX@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@PEAX@@QEAAXXZ PROC			; ImVector<void *>::pop_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1715
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@pop_back
	mov	r8d, 1715				; 000006b3H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@pop_back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pop_back@?$ImVector@PEAX@@QEAAXXZ ENDP			; ImVector<void *>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z PROC		; ImVector<void *>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z ; ImVector<void *>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@PEAX@@QEAAXH@Z	; ImVector<void *>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@PEAX@@QEAAXAEBQEAX@Z ENDP		; ImVector<void *>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@PEAX@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@PEAX@@QEAAXH@Z PROC			; ImVector<void *>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 3
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 3
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@PEAX@@QEAAXH@Z ENDP			; ImVector<void *>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@PEAX@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@PEAX@@QEAAXH@Z PROC			; ImVector<void *>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z ; ImVector<void *>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@PEAX@@QEAAXH@Z	; ImVector<void *>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@PEAX@@QEAAXH@Z ENDP			; ImVector<void *>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z PROC		; ImVector<void *>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@PEAX@@QEBAHH@Z ENDP		; ImVector<void *>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@PEAX@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@PEAX@@QEAAXXZ PROC			; ImVector<void *>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@PEAX@@QEAAXXZ ENDP			; ImVector<void *>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@PEAX@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@PEAX@@QEAA@XZ PROC			; ImVector<void *>::~ImVector<void *>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@PEAX@@QEAA@XZ ENDP			; ImVector<void *>::~ImVector<void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@PEAX@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@PEAX@@QEAA@XZ PROC			; ImVector<void *>::ImVector<void *>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@PEAX@@QEAA@XZ ENDP			; ImVector<void *>::ImVector<void *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ PROC		; ImVector<ImVec4>::pop_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1715
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@pop_back
	mov	r8d, 1715				; 000006b3H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@pop_back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pop_back@?$ImVector@UImVec4@@@@QEAAXXZ ENDP		; ImVector<ImVec4>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z PROC ; ImVector<ImVec4>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z ; ImVector<ImVec4>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z	; ImVector<ImVec4>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImVec4@@@@QEAAXAEBUImVec4@@@Z ENDP ; ImVector<ImVec4>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z PROC		; ImVector<ImVec4>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 16
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z ENDP		; ImVector<ImVec4>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImVec4@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImVec4@@@@QEAAXH@Z PROC		; ImVector<ImVec4>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z ; ImVector<ImVec4>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImVec4@@@@QEAAXH@Z	; ImVector<ImVec4>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImVec4@@@@QEAAXH@Z ENDP		; ImVector<ImVec4>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z PROC	; ImVector<ImVec4>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImVec4@@@@QEBAHH@Z ENDP	; ImVector<ImVec4>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImVec4@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImVec4@@@@QEAAXXZ PROC		; ImVector<ImVec4>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImVec4@@@@QEAAXXZ ENDP		; ImVector<ImVec4>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImVec4@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImVec4@@@@QEAA@XZ PROC			; ImVector<ImVec4>::~ImVector<ImVec4>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImVec4@@@@QEAA@XZ ENDP			; ImVector<ImVec4>::~ImVector<ImVec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImVec4@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImVec4@@@@QEAA@XZ PROC			; ImVector<ImVec4>::ImVector<ImVec4>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImVec4@@@@QEAA@XZ ENDP			; ImVector<ImVec4>::ImVector<ImVec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z PROC	; ImVector<ImDrawVert>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 20
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z ENDP	; ImVector<ImDrawVert>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z PROC		; ImVector<ImDrawVert>::shrink, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1710
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN3@shrink
	mov	r8d, 1710				; 000006aeH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@shrink:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?shrink@?$ImVector@UImDrawVert@@@@QEAAXH@Z ENDP		; ImVector<ImDrawVert>::shrink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z PROC		; ImVector<ImDrawVert>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z ; ImVector<ImDrawVert>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ENDP		; ImVector<ImDrawVert>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z PROC	; ImVector<ImDrawVert>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImDrawVert@@@@QEBAHH@Z ENDP	; ImVector<ImDrawVert>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z
_TEXT	SEGMENT
rhs_size$ = 4
rhs_cap$ = 36
rhs_data$ = 72
this$ = 320
rhs$ = 328
?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z PROC	; ImVector<ImDrawVert>::swap, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1705
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 328				; 00000148H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR rhs$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR rhs_size$[rbp], eax
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR rhs_size$[rbp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR rhs$[rbp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR rhs_cap$[rbp], eax
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR rhs_cap$[rbp]
	mov	DWORD PTR [rax+4], ecx
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR rhs_data$[rbp], rax
	mov	rax, QWORD PTR rhs$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR rhs_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	lea	rsp, QWORD PTR [rbp+296]
	pop	rdi
	pop	rbp
	ret	0
?swap@?$ImVector@UImDrawVert@@@@QEAAXAEAU1@@Z ENDP	; ImVector<ImDrawVert>::swap
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z PROC ; ImVector<ImDrawVert>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImDrawVert@@@@QEAAAEAUImDrawVert@@H@Z ENDP ; ImVector<ImDrawVert>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ PROC		; ImVector<ImDrawVert>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ ENDP		; ImVector<ImDrawVert>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImDrawVert@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImDrawVert@@@@QEAA@XZ PROC		; ImVector<ImDrawVert>::~ImVector<ImDrawVert>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImDrawVert@@@@QEAA@XZ ENDP		; ImVector<ImDrawVert>::~ImVector<ImDrawVert>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
src$ = 232
??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z PROC	; ImVector<ImDrawVert>::operator=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1682
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?clear@?$ImVector@UImDrawVert@@@@QEAAXXZ ; ImVector<ImDrawVert>::clear
	mov	rax, QWORD PTR src$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	?resize@?$ImVector@UImDrawVert@@@@QEAAXH@Z ; ImVector<ImDrawVert>::resize
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR src$[rbp]
	mov	rdi, QWORD PTR [rcx+8]
	mov	rsi, QWORD PTR [rdx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??4?$ImVector@UImDrawVert@@@@QEAAAEAU0@AEBU0@@Z ENDP	; ImVector<ImDrawVert>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImDrawVert@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawVert@@@@QEAA@XZ PROC		; ImVector<ImDrawVert>::ImVector<ImDrawVert>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImDrawVert@@@@QEAA@XZ ENDP		; ImVector<ImDrawVert>::ImVector<ImDrawVert>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
_TEXT	SEGMENT
curr_cmd$ = 8
tv186 = 216
this$ = 256
draw_list$ = 264
idx$ = 272
?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z PROC ; ImDrawListSplitter::SetCurrentChannel, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1790
$LN13:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1791
	cmp	DWORD PTR idx$[rbp], 0
	jl	SHORT $LN9@SetCurrent
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR idx$[rbp], eax
	jl	SHORT $LN10@SetCurrent
$LN9@SetCurrent:
	mov	eax, DWORD PTR ?__LINE__Var@?0??SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
	inc	eax
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DC@ILGGLBID@?$AAi?$AAd?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAd?$AAx@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@SetCurrent:
; Line 1792
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR idx$[rbp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@SetCurrent
; Line 1793
	jmp	$LN1@SetCurrent
$LN2@SetCurrent:
; Line 1796
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR draw_list$[rbp]
	mov	ecx, 16
	rep movsb
; Line 1797
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR draw_list$[rbp]
	lea	rdi, QWORD PTR [rcx+rax+16]
	lea	rsi, QWORD PTR [rdx+16]
	mov	ecx, 16
	rep movsb
; Line 1798
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR idx$[rbp]
	mov	DWORD PTR [rax], ecx
; Line 1799
	movsxd	rax, DWORD PTR idx$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdi, QWORD PTR draw_list$[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 1800
	movsxd	rax, DWORD PTR idx$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rdx, QWORD PTR draw_list$[rbp]
	lea	rdi, QWORD PTR [rdx+16]
	lea	rsi, QWORD PTR [rcx+rax+16]
	mov	ecx, 16
	rep movsb
; Line 1801
	mov	rax, QWORD PTR draw_list$[rbp]
	movsxd	rax, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	rcx, QWORD PTR draw_list$[rbp]
	mov	QWORD PTR [rcx+80], rax
; Line 1804
	mov	rax, QWORD PTR draw_list$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN11@SetCurrent
	mov	QWORD PTR tv186[rbp], 0
	jmp	SHORT $LN12@SetCurrent
$LN11@SetCurrent:
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR draw_list$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR tv186[rbp], rax
$LN12@SetCurrent:
	mov	rax, QWORD PTR tv186[rbp]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 1805
	cmp	QWORD PTR curr_cmd$[rbp], 0
	jne	SHORT $LN3@SetCurrent
; Line 1806
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
	jmp	SHORT $LN4@SetCurrent
$LN3@SetCurrent:
; Line 1807
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN5@SetCurrent
; Line 1808
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rdi, QWORD PTR curr_cmd$[rbp]
	lea	rsi, QWORD PTR [rax+136]
	mov	ecx, 28
	rep movsb
	jmp	SHORT $LN6@SetCurrent
$LN5@SetCurrent:
; Line 1809
	mov	rax, QWORD PTR draw_list$[rbp]
	add	rax, 136				; 00000088H
	mov	r8d, 28
	mov	rdx, rax
	mov	rcx, QWORD PTR curr_cmd$[rbp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN7@SetCurrent
; Line 1810
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
$LN7@SetCurrent:
$LN6@SetCurrent:
$LN4@SetCurrent:
$LN1@SetCurrent:
; Line 1811
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ENDP ; ImDrawListSplitter::SetCurrentChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z
_TEXT	SEGMENT
new_cmd_buffer_count$ = 4
new_idx_buffer_count$ = 36
last_cmd$ = 72
idx_offset$ = 100
i$1 = 132
ch$2 = 168
next_cmd$3 = 200
cmd_n$4 = 228
cmd_write$ = 264
idx_write$ = 296
i$5 = 324
ch$6 = 360
sz$7 = 388
sz$8 = 420
curr_cmd$ = 456
tv83 = 660
tv242 = 664
tv213 = 664
tv205 = 664
tv169 = 664
tv144 = 664
tv92 = 664
tv78 = 664
this$ = 704
draw_list$ = 712
?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z PROC	; ImDrawListSplitter::Merge, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1719
$LN28:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 704				; 000002c0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1721
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 1
	jg	SHORT $LN11@Merge
; Line 1722
	jmp	$LN1@Merge
$LN11@Merge:
; Line 1724
	xor	r8d, r8d
	mov	rdx, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?SetCurrentChannel@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ; ImDrawListSplitter::SetCurrentChannel
; Line 1725
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?_PopUnusedDrawCmd@ImDrawList@@QEAAXXZ	; ImDrawList::_PopUnusedDrawCmd
; Line 1728
	mov	DWORD PTR new_cmd_buffer_count$[rbp], 0
; Line 1729
	mov	DWORD PTR new_idx_buffer_count$[rbp], 0
; Line 1730
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN24@Merge
	mov	rax, QWORD PTR draw_list$[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN24@Merge
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rcx, rax
	call	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
	mov	QWORD PTR tv78[rbp], rax
	jmp	SHORT $LN25@Merge
$LN24@Merge:
	mov	QWORD PTR tv78[rbp], 0
$LN25@Merge:
	mov	rax, QWORD PTR tv78[rbp]
	mov	QWORD PTR last_cmd$[rbp], rax
; Line 1731
	cmp	QWORD PTR last_cmd$[rbp], 0
	je	SHORT $LN26@Merge
	mov	rax, QWORD PTR last_cmd$[rbp]
	mov	eax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR last_cmd$[rbp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR tv83[rbp], eax
	jmp	SHORT $LN27@Merge
$LN26@Merge:
	mov	DWORD PTR tv83[rbp], 0
$LN27@Merge:
	mov	eax, DWORD PTR tv83[rbp]
	mov	DWORD PTR idx_offset$[rbp], eax
; Line 1732
	mov	DWORD PTR i$1[rbp], 1
	jmp	SHORT $LN4@Merge
$LN2@Merge:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@Merge:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@Merge
; Line 1734
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv92[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv92[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR ch$2[rbp], rax
; Line 1737
	mov	rax, QWORD PTR ch$2[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN12@Merge
	mov	rax, QWORD PTR ch$2[rbp]
	mov	rcx, rax
	call	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN12@Merge
; Line 1738
	mov	rax, QWORD PTR ch$2[rbp]
	mov	rcx, rax
	call	?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ; ImVector<ImDrawCmd>::pop_back
$LN12@Merge:
; Line 1740
	mov	rax, QWORD PTR ch$2[rbp]
	cmp	DWORD PTR [rax], 0
	jle	$LN13@Merge
	cmp	QWORD PTR last_cmd$[rbp], 0
	je	$LN13@Merge
; Line 1742
	mov	rax, QWORD PTR ch$2[rbp]
	mov	QWORD PTR tv144[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv144[rbp]
	call	??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ; ImVector<ImDrawCmd>::operator[]
	mov	QWORD PTR next_cmd$3[rbp], rax
; Line 1743
	mov	r8d, 28
	mov	rdx, QWORD PTR next_cmd$3[rbp]
	mov	rcx, QWORD PTR last_cmd$[rbp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN14@Merge
	mov	rax, QWORD PTR last_cmd$[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN14@Merge
	mov	rax, QWORD PTR next_cmd$3[rbp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN14@Merge
; Line 1746
	mov	rax, QWORD PTR last_cmd$[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	rcx, QWORD PTR next_cmd$3[rbp]
	add	eax, DWORD PTR [rcx+32]
	mov	rcx, QWORD PTR last_cmd$[rbp]
	mov	DWORD PTR [rcx+32], eax
; Line 1747
	mov	rax, QWORD PTR next_cmd$3[rbp]
	mov	eax, DWORD PTR [rax+32]
	mov	ecx, DWORD PTR idx_offset$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR idx_offset$[rbp], eax
; Line 1748
	mov	rax, QWORD PTR ch$2[rbp]
	mov	QWORD PTR tv169[rbp], rax
	mov	rax, QWORD PTR ch$2[rbp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR tv169[rbp]
	call	?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z ; ImVector<ImDrawCmd>::erase
$LN14@Merge:
$LN13@Merge:
; Line 1751
	mov	rax, QWORD PTR ch$2[rbp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN15@Merge
; Line 1752
	mov	rax, QWORD PTR ch$2[rbp]
	mov	rcx, rax
	call	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
	mov	QWORD PTR last_cmd$[rbp], rax
$LN15@Merge:
; Line 1753
	mov	rax, QWORD PTR ch$2[rbp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR new_cmd_buffer_count$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR new_cmd_buffer_count$[rbp], eax
; Line 1754
	mov	rax, QWORD PTR ch$2[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR new_idx_buffer_count$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR new_idx_buffer_count$[rbp], eax
; Line 1755
	mov	DWORD PTR cmd_n$4[rbp], 0
	jmp	SHORT $LN7@Merge
$LN5@Merge:
	mov	eax, DWORD PTR cmd_n$4[rbp]
	inc	eax
	mov	DWORD PTR cmd_n$4[rbp], eax
$LN7@Merge:
	mov	rax, QWORD PTR ch$2[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR cmd_n$4[rbp], eax
	jge	SHORT $LN6@Merge
; Line 1757
	movsxd	rax, DWORD PTR cmd_n$4[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR ch$2[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	edx, DWORD PTR idx_offset$[rbp]
	mov	DWORD PTR [rcx+rax+28], edx
; Line 1758
	movsxd	rax, DWORD PTR cmd_n$4[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR ch$2[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rcx+rax+32]
	mov	ecx, DWORD PTR idx_offset$[rbp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR idx_offset$[rbp], eax
; Line 1759
	jmp	SHORT $LN5@Merge
$LN6@Merge:
; Line 1760
	jmp	$LN2@Merge
$LN3@Merge:
; Line 1761
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	QWORD PTR tv205[rbp], rax
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR new_cmd_buffer_count$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv205[rbp]
	call	?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize
; Line 1762
	mov	rax, QWORD PTR draw_list$[rbp]
	add	rax, 16
	mov	QWORD PTR tv213[rbp], rax
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, DWORD PTR new_idx_buffer_count$[rbp]
	mov	edx, eax
	mov	rcx, QWORD PTR tv213[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
; Line 1765
	mov	rax, QWORD PTR draw_list$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR new_cmd_buffer_count$[rbp]
	imul	rcx, rcx, 56				; 00000038H
	sub	rax, rcx
	mov	QWORD PTR cmd_write$[rbp], rax
; Line 1766
	mov	rax, QWORD PTR draw_list$[rbp]
	movsxd	rax, DWORD PTR [rax+16]
	mov	rcx, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR [rcx+24]
	lea	rax, QWORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR new_idx_buffer_count$[rbp]
	shl	rcx, 1
	sub	rax, rcx
	mov	QWORD PTR idx_write$[rbp], rax
; Line 1767
	mov	DWORD PTR i$5[rbp], 1
	jmp	SHORT $LN10@Merge
$LN8@Merge:
	mov	eax, DWORD PTR i$5[rbp]
	inc	eax
	mov	DWORD PTR i$5[rbp], eax
$LN10@Merge:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR i$5[rbp], eax
	jge	$LN9@Merge
; Line 1769
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv242[rbp], rax
	mov	edx, DWORD PTR i$5[rbp]
	mov	rcx, QWORD PTR tv242[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR ch$6[rbp], rax
; Line 1770
	mov	rax, QWORD PTR ch$6[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR sz$7[rbp], eax
	cmp	DWORD PTR sz$7[rbp], 0
	je	SHORT $LN16@Merge
	movsxd	rax, DWORD PTR sz$7[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR ch$6[rbp]
	mov	rdi, QWORD PTR cmd_write$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	movsxd	rax, DWORD PTR sz$7[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR cmd_write$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cmd_write$[rbp], rax
$LN16@Merge:
; Line 1771
	mov	rax, QWORD PTR ch$6[rbp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR sz$8[rbp], eax
	cmp	DWORD PTR sz$8[rbp], 0
	je	SHORT $LN17@Merge
	movsxd	rax, DWORD PTR sz$8[rbp]
	shl	rax, 1
	mov	rcx, QWORD PTR ch$6[rbp]
	mov	rdi, QWORD PTR idx_write$[rbp]
	mov	rsi, QWORD PTR [rcx+24]
	mov	rcx, rax
	rep movsb
	movsxd	rax, DWORD PTR sz$8[rbp]
	mov	rcx, QWORD PTR idx_write$[rbp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR idx_write$[rbp], rax
$LN17@Merge:
; Line 1772
	jmp	$LN8@Merge
$LN9@Merge:
; Line 1773
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rcx, QWORD PTR idx_write$[rbp]
	mov	QWORD PTR [rax+80], rcx
; Line 1776
	mov	rax, QWORD PTR draw_list$[rbp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN19@Merge
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rcx, rax
	call	?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ; ImVector<ImDrawCmd>::back
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN18@Merge
$LN19@Merge:
; Line 1777
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
$LN18@Merge:
; Line 1780
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR draw_list$[rbp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR curr_cmd$[rbp], rax
; Line 1781
	mov	rax, QWORD PTR curr_cmd$[rbp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN20@Merge
; Line 1782
	mov	rax, QWORD PTR draw_list$[rbp]
	mov	rdi, QWORD PTR curr_cmd$[rbp]
	lea	rsi, QWORD PTR [rax+136]
	mov	ecx, 28
	rep movsb
	jmp	SHORT $LN21@Merge
$LN20@Merge:
; Line 1783
	mov	rax, QWORD PTR draw_list$[rbp]
	add	rax, 136				; 00000088H
	mov	r8d, 28
	mov	rdx, rax
	mov	rcx, QWORD PTR curr_cmd$[rbp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN22@Merge
; Line 1784
	mov	rcx, QWORD PTR draw_list$[rbp]
	call	?AddDrawCmd@ImDrawList@@QEAAXXZ		; ImDrawList::AddDrawCmd
$LN22@Merge:
$LN21@Merge:
; Line 1786
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 1
$LN1@Merge:
; Line 1787
	lea	rsp, QWORD PTR [rbp+672]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?Merge@ImDrawListSplitter@@QEAAXPEAUImDrawList@@@Z ENDP	; ImDrawListSplitter::Merge
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z
_TEXT	SEGMENT
old_channels_count$ = 4
i$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
tv173 = 408
tv162 = 408
tv141 = 408
tv129 = 408
tv86 = 408
tv81 = 408
tv178 = 416
tv167 = 416
tv151 = 416
this$ = 464
draw_list$ = 472
channels_count$ = 480
?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z PROC ; ImDrawListSplitter::Split, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1689
$LN14:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 472				; 000001d8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1691
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN9@Split
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 1
	jg	SHORT $LN9@Split
	lea	rax, OFFSET FLAT:??_C@_0GA@FGMHMEOI@Nested?5channel?5splitting?5is?5not@
	test	rax, rax
	jne	SHORT $LN10@Split
$LN9@Split:
	mov	eax, DWORD PTR ?__LINE__Var@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4JA
	add	eax, 2
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:??_C@_1GK@JMLKBNFK@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BAE@LAENHIMB@?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@Split:
; Line 1692
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR old_channels_count$[rbp], eax
; Line 1693
	mov	eax, DWORD PTR channels_count$[rbp]
	cmp	DWORD PTR old_channels_count$[rbp], eax
	jge	SHORT $LN5@Split
; Line 1695
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv81[rbp], rax
	mov	edx, DWORD PTR channels_count$[rbp]
	mov	rcx, QWORD PTR tv81[rbp]
	call	?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::reserve
; Line 1696
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv86[rbp], rax
	mov	edx, DWORD PTR channels_count$[rbp]
	mov	rcx, QWORD PTR tv86[rbp]
	call	?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::resize
$LN5@Split:
; Line 1698
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR channels_count$[rbp]
	mov	DWORD PTR [rax+4], ecx
; Line 1703
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv129[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv129[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
; Line 1704
	mov	DWORD PTR i$1[rbp], 1
	jmp	SHORT $LN4@Split
$LN2@Split:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@Split:
	mov	eax, DWORD PTR channels_count$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@Split
; Line 1706
	mov	eax, DWORD PTR old_channels_count$[rbp]
	cmp	DWORD PTR i$1[rbp], eax
	jl	$LN6@Split
; Line 1708
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv141[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv141[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR $T4[rbp], rax
	lea	rax, QWORD PTR $T6[rbp]
	mov	QWORD PTR $T5[rbp], rax
	mov	r8, QWORD PTR $T4[rbp]
	mov	rax, QWORD PTR $T5[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	ecx, 32					; 00000020H
	call	??2@YAPEAX_KUImNewWrapper@@PEAX@Z	; operator new
	mov	QWORD PTR $T3[rbp], rax
	cmp	QWORD PTR $T3[rbp], 0
	je	SHORT $LN11@Split
	mov	rdi, QWORD PTR $T3[rbp]
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
	mov	rcx, QWORD PTR $T3[rbp]
	call	??0ImDrawChannel@@QEAA@XZ
	mov	QWORD PTR tv151[rbp], rax
	jmp	SHORT $LN12@Split
$LN11@Split:
	mov	QWORD PTR tv151[rbp], 0
$LN12@Split:
	mov	rax, QWORD PTR tv151[rbp]
	mov	QWORD PTR $T2[rbp], rax
; Line 1709
	jmp	SHORT $LN7@Split
$LN6@Split:
; Line 1712
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv162[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv162[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	QWORD PTR tv167[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv167[rbp]
	call	?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize
; Line 1713
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv173[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv173[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	add	rax, 16
	mov	QWORD PTR tv178[rbp], rax
	xor	edx, edx
	mov	rcx, QWORD PTR tv178[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
$LN7@Split:
; Line 1715
	jmp	$LN2@Split
$LN3@Split:
; Line 1716
	lea	rsp, QWORD PTR [rbp+440]
	pop	rdi
	pop	rbp
	ret	0
?Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z ENDP ; ImDrawListSplitter::Split
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
old_channels_count$ = 4
i$1 = 36
$T2 = 264
$T3 = 296
$T4 = 328
$T5 = 360
$T6 = 388
tv173 = 408
tv162 = 408
tv141 = 408
tv129 = 408
tv86 = 408
tv81 = 408
tv178 = 416
tv167 = 416
tv151 = 416
this$ = 464
draw_list$ = 472
channels_count$ = 480
?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA PROC ; `ImDrawListSplitter::Split'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	r8, QWORD PTR $T4[rbp]
	mov	rax, QWORD PTR $T5[rbp]
	movzx	edx, BYTE PTR [rax]
	mov	rcx, QWORD PTR $T3[rbp]
	call	??3@YAXPEAXUImNewWrapper@@0@Z		; operator delete
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0??Split@ImDrawListSplitter@@QEAAXPEAUImDrawList@@H@Z@4HA ENDP ; `ImDrawListSplitter::Split'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ
_TEXT	SEGMENT
i$1 = 4
tv93 = 216
tv85 = 216
tv79 = 216
this$ = 256
?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ PROC	; ImDrawListSplitter::ClearFreeMemory, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 1675
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 1676
	mov	DWORD PTR i$1[rbp], 0
	jmp	SHORT $LN4@ClearFreeM
$LN2@ClearFreeM:
	mov	eax, DWORD PTR i$1[rbp]
	inc	eax
	mov	DWORD PTR i$1[rbp], eax
$LN4@ClearFreeM:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$1[rbp], eax
	jge	$LN3@ClearFreeM
; Line 1678
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rbp], eax
	jne	SHORT $LN5@ClearFreeM
; Line 1679
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv79[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv79[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
$LN5@ClearFreeM:
; Line 1680
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv85[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv85[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	mov	rcx, rax
	call	?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ	; ImVector<ImDrawCmd>::clear
; Line 1681
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	QWORD PTR tv93[rbp], rax
	mov	edx, DWORD PTR i$1[rbp]
	mov	rcx, QWORD PTR tv93[rbp]
	call	??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ; ImVector<ImDrawChannel>::operator[]
	add	rax, 16
	mov	rcx, rax
	call	?clear@?$ImVector@G@@QEAAXXZ		; ImVector<unsigned short>::clear
; Line 1682
	jmp	$LN2@ClearFreeM
$LN3@ClearFreeM:
; Line 1683
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
; Line 1684
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 1
; Line 1685
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ ; ImVector<ImDrawChannel>::clear
; Line 1686
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?ClearFreeMemory@ImDrawListSplitter@@QEAAXXZ ENDP	; ImDrawListSplitter::ClearFreeMemory
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?Clear@ImDrawListSplitter@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?Clear@ImDrawListSplitter@@QEAAXXZ PROC			; ImDrawListSplitter::Clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2318
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 1
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?Clear@ImDrawListSplitter@@QEAAXXZ ENDP			; ImDrawListSplitter::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawListSplitter@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawListSplitter@@QEAA@XZ PROC			; ImDrawListSplitter::ImDrawListSplitter, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2316
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 8
	mov	rcx, rax
	call	??0?$ImVector@UImDrawChannel@@@@QEAA@XZ	; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 24
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawListSplitter@@QEAA@XZ ENDP			; ImDrawListSplitter::ImDrawListSplitter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z PROC	; ImVector<ImDrawChannel>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ENDP	; ImVector<ImDrawChannel>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z PROC	; ImVector<ImDrawChannel>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ; ImVector<ImDrawChannel>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ; ImVector<ImDrawChannel>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImDrawChannel@@@@QEAAXH@Z ENDP	; ImVector<ImDrawChannel>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z PROC ; ImVector<ImDrawChannel>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImDrawChannel@@@@QEBAHH@Z ENDP ; ImVector<ImDrawChannel>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z PROC ; ImVector<ImDrawChannel>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImDrawChannel@@@@QEAAAEAUImDrawChannel@@H@Z ENDP ; ImVector<ImDrawChannel>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ PROC	; ImVector<ImDrawChannel>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImDrawChannel@@@@QEAAXXZ ENDP	; ImVector<ImDrawChannel>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImDrawChannel@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawChannel@@@@QEAA@XZ PROC		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImDrawChannel@@@@QEAA@XZ ENDP		; ImVector<ImDrawChannel>::ImVector<ImDrawChannel>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawChannel@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawChannel@@QEAA@XZ PROC				; ImDrawChannel::ImDrawChannel, COMDAT
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0?$ImVector@UImDrawCmd@@@@QEAA@XZ	; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	add	rax, 16
	mov	rcx, rax
	call	??0?$ImVector@G@@QEAA@XZ		; ImVector<unsigned short>::ImVector<unsigned short>
	npad	1
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawChannel@@QEAA@XZ ENDP				; ImDrawChannel::ImDrawChannel
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT text$x
text$x	SEGMENT
this$ = 224
?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA PROC		; `ImDrawChannel::ImDrawChannel'::`1'::dtor$0
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rdi
	sub	rsp, 40					; 00000028H
	lea	rbp, QWORD PTR [rdx+32]
	mov	rcx, QWORD PTR this$[rbp]
	call	??1?$ImVector@UImDrawCmd@@@@QEAA@XZ	; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rbp
	ret	0
?dtor$0@?0???0ImDrawChannel@@QEAA@XZ@4HA ENDP		; `ImDrawChannel::ImDrawChannel'::`1'::dtor$0
text$x	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z
_TEXT	SEGMENT
off$ = 8
tv95 = 216
this$ = 256
it$ = 264
?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z PROC ; ImVector<ImDrawCmd>::erase, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1717
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN3@erase
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	cmp	QWORD PTR it$[rbp], rax
	jb	SHORT $LN4@erase
$LN3@erase:
	mov	r8d, 1717				; 000006b5H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1DO@NPHOAPAC@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@erase:
	mov	rax, QWORD PTR this$[rbp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR it$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	cdq
	mov	ecx, 56					; 00000038H
	idiv	rcx
	mov	QWORD PTR off$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	sub	rax, QWORD PTR off$[rbp]
	dec	rax
	imul	rax, rax, 56				; 00000038H
	imul	rcx, QWORD PTR off$[rbp], 56		; 00000038H
	mov	rdx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+56]
	imul	rdx, QWORD PTR off$[rbp], 56		; 00000038H
	mov	r8, QWORD PTR this$[rbp]
	add	rdx, QWORD PTR [r8+8]
	mov	QWORD PTR tv95[rbp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv95[rbp]
	mov	rcx, rax
	call	memmove
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	imul	rax, QWORD PTR off$[rbp], 56		; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?erase@?$ImVector@UImDrawCmd@@@@QEAAPEAUImDrawCmd@@PEBU2@@Z ENDP ; ImVector<ImDrawCmd>::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ PROC		; ImVector<ImDrawCmd>::pop_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1715
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@pop_back
	mov	r8d, 1715				; 000006b3H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@pop_back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?pop_back@?$ImVector@UImDrawCmd@@@@QEAAXXZ ENDP		; ImVector<ImDrawCmd>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z PROC ; ImVector<ImDrawCmd>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ; ImVector<ImDrawCmd>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR v$[rbp]
	mov	ecx, 56					; 00000038H
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?push_back@?$ImVector@UImDrawCmd@@@@QEAAXAEBUImDrawCmd@@@Z ENDP ; ImVector<ImDrawCmd>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z PROC		; ImVector<ImDrawCmd>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ENDP		; ImVector<ImDrawCmd>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z PROC		; ImVector<ImDrawCmd>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ; ImVector<ImDrawCmd>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ENDP		; ImVector<ImDrawCmd>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z PROC	; ImVector<ImDrawCmd>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@UImDrawCmd@@@@QEBAHH@Z ENDP	; ImVector<ImDrawCmd>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ
_TEXT	SEGMENT
this$ = 224
?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ PROC ; ImVector<ImDrawCmd>::back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1703
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jg	SHORT $LN3@back
	mov	r8d, 1703				; 000006a7H
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@back:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	dec	eax
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?back@?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@XZ ENDP ; ImVector<ImDrawCmd>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z PROC	; ImVector<ImDrawCmd>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	add	rax, QWORD PTR [rcx+8]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@UImDrawCmd@@@@QEAAAEAUImDrawCmd@@H@Z ENDP	; ImVector<ImDrawCmd>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ PROC		; ImVector<ImDrawCmd>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ ENDP		; ImVector<ImDrawCmd>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@UImDrawCmd@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@UImDrawCmd@@@@QEAA@XZ PROC		; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@UImDrawCmd@@@@QEAA@XZ ENDP		; ImVector<ImDrawCmd>::~ImVector<ImDrawCmd>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
src$ = 232
??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z PROC	; ImVector<ImDrawCmd>::operator=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1682
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?clear@?$ImVector@UImDrawCmd@@@@QEAAXXZ	; ImVector<ImDrawCmd>::clear
	mov	rax, QWORD PTR src$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	?resize@?$ImVector@UImDrawCmd@@@@QEAAXH@Z ; ImVector<ImDrawCmd>::resize
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR src$[rbp]
	mov	rdi, QWORD PTR [rcx+8]
	mov	rsi, QWORD PTR [rdx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??4?$ImVector@UImDrawCmd@@@@QEAAAEAU0@AEBU0@@Z ENDP	; ImVector<ImDrawCmd>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@UImDrawCmd@@@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@UImDrawCmd@@@@QEAA@XZ PROC		; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@UImDrawCmd@@@@QEAA@XZ ENDP		; ImVector<ImDrawCmd>::ImVector<ImDrawCmd>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawCmdHeader@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawCmdHeader@@QEAA@XZ PROC			; ImDrawCmdHeader::ImDrawCmdHeader, COMDAT
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0ImVec4@@QEAA@XZ			; ImVec4::ImVec4
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawCmdHeader@@QEAA@XZ ENDP			; ImDrawCmdHeader::ImDrawCmdHeader
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0ImDrawCmd@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0ImDrawCmd@@QEAA@XZ PROC				; ImDrawCmd::ImDrawCmd, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 2263
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, rax
	call	??0ImVec4@@QEAA@XZ			; ImVec4::ImVec4
	mov	rdi, QWORD PTR this$[rbp]
	xor	eax, eax
	mov	ecx, 56					; 00000038H
	rep stosb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0ImDrawCmd@@QEAA@XZ ENDP				; ImDrawCmd::ImDrawCmd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?push_back@?$ImVector@G@@QEAAXAEBG@Z
_TEXT	SEGMENT
this$ = 224
v$ = 232
?push_back@?$ImVector@G@@QEAAXAEBG@Z PROC		; ImVector<unsigned short>::push_back, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1714
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR [rcx+4]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN2@push_back
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@G@@QEBAHH@Z	; ImVector<unsigned short>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::reserve
$LN2@push_back:
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	movzx	edx, WORD PTR [rdx]
	mov	WORD PTR [rcx+rax*2], dx
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR this$[rbp]
	mov	DWORD PTR [rcx], eax
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?push_back@?$ImVector@G@@QEAAXAEBG@Z ENDP		; ImVector<unsigned short>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?reserve@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
new_data$ = 8
this$ = 256
new_capacity$ = 264
?reserve@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::reserve, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1711
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 256				; 00000100H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jg	SHORT $LN2@reserve
	jmp	SHORT $LN1@reserve
$LN2@reserve:
	movsxd	rax, DWORD PTR new_capacity$[rbp]
	shl	rax, 1
	mov	rcx, rax
	call	?MemAlloc@ImGui@@YAPEAX_K@Z		; ImGui::MemAlloc
	mov	QWORD PTR new_data$[rbp], rax
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@reserve
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdi, QWORD PTR new_data$[rbp]
	mov	rsi, QWORD PTR [rcx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
$LN3@reserve:
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR new_data$[rbp]
	mov	QWORD PTR [rax+8], rcx
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR [rax+4], ecx
$LN1@reserve:
	lea	rsp, QWORD PTR [rbp+224]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?reserve@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?shrink@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?shrink@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::shrink, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1710
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN3@shrink
	mov	r8d, 1710				; 000006aeH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CC@BPLGCGDC@?$AAn?$AAe?$AAw?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAS?$AAi?$AAz@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@shrink:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?shrink@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::shrink
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@G@@QEAAXHAEBG@Z
_TEXT	SEGMENT
n$1 = 4
this$ = 256
new_size$ = 264
v$ = 272
?resize@?$ImVector@G@@QEAAXHAEBG@Z PROC			; ImVector<unsigned short>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1709
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN5@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@G@@QEBAHH@Z	; ImVector<unsigned short>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::reserve
$LN5@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN6@resize
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR n$1[rbp], eax
	jmp	SHORT $LN4@resize
$LN2@resize:
	mov	eax, DWORD PTR n$1[rbp]
	inc	eax
	mov	DWORD PTR n$1[rbp], eax
$LN4@resize:
	mov	eax, DWORD PTR new_size$[rbp]
	cmp	DWORD PTR n$1[rbp], eax
	jge	SHORT $LN3@resize
	movsxd	rax, DWORD PTR n$1[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR v$[rbp]
	movzx	edx, WORD PTR [rdx]
	mov	WORD PTR [rcx+rax*2], dx
	jmp	SHORT $LN2@resize
$LN3@resize:
$LN6@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@G@@QEAAXHAEBG@Z ENDP			; ImVector<unsigned short>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?resize@?$ImVector@G@@QEAAXH@Z
_TEXT	SEGMENT
this$ = 224
new_size$ = 232
?resize@?$ImVector@G@@QEAAXH@Z PROC			; ImVector<unsigned short>::resize, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1708
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR new_size$[rbp], eax
	jle	SHORT $LN2@resize
	mov	edx, DWORD PTR new_size$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	call	?_grow_capacity@?$ImVector@G@@QEBAHH@Z	; ImVector<unsigned short>::_grow_capacity
	mov	edx, eax
	mov	rcx, QWORD PTR this$[rbp]
	call	?reserve@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::reserve
$LN2@resize:
	mov	rax, QWORD PTR this$[rbp]
	mov	ecx, DWORD PTR new_size$[rbp]
	mov	DWORD PTR [rax], ecx
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?resize@?$ImVector@G@@QEAAXH@Z ENDP			; ImVector<unsigned short>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?_grow_capacity@?$ImVector@G@@QEBAHH@Z
_TEXT	SEGMENT
new_capacity$ = 4
tv72 = 212
tv70 = 212
this$ = 256
sz$ = 264
?_grow_capacity@?$ImVector@G@@QEBAHH@Z PROC		; ImVector<unsigned short>::_grow_capacity, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1707
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 264				; 00000108H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN3@grow_capac
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax+4]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	rcx, QWORD PTR this$[rbp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv70[rbp], eax
	jmp	SHORT $LN4@grow_capac
$LN3@grow_capac:
	mov	DWORD PTR tv70[rbp], 8
$LN4@grow_capac:
	mov	eax, DWORD PTR tv70[rbp]
	mov	DWORD PTR new_capacity$[rbp], eax
	mov	eax, DWORD PTR sz$[rbp]
	cmp	DWORD PTR new_capacity$[rbp], eax
	jle	SHORT $LN5@grow_capac
	mov	eax, DWORD PTR new_capacity$[rbp]
	mov	DWORD PTR tv72[rbp], eax
	jmp	SHORT $LN6@grow_capac
$LN5@grow_capac:
	mov	eax, DWORD PTR sz$[rbp]
	mov	DWORD PTR tv72[rbp], eax
$LN6@grow_capac:
	mov	eax, DWORD PTR tv72[rbp]
	lea	rsp, QWORD PTR [rbp+232]
	pop	rdi
	pop	rbp
	ret	0
?_grow_capacity@?$ImVector@G@@QEBAHH@Z ENDP		; ImVector<unsigned short>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??A?$ImVector@G@@QEAAAEAGH@Z
_TEXT	SEGMENT
this$ = 224
i$ = 232
??A?$ImVector@G@@QEAAAEAGH@Z PROC			; ImVector<unsigned short>::operator[], COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1694
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	cmp	DWORD PTR i$[rbp], 0
	jl	SHORT $LN3@operator
	mov	rax, QWORD PTR this$[rbp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rbp], eax
	jl	SHORT $LN4@operator
$LN3@operator:
	mov	r8d, 1694				; 0000069eH
	lea	rdx, OFFSET FLAT:??_C@_1FM@JNPAKPFE@?$AAC?$AA?3?$AA?2?$AAd?$AAe?$AAv?$AA?2?$AAR?$AAa?$AAi?$AAs?$AAi?$AAn?$AA?2?$AAR@
	lea	rcx, OFFSET FLAT:??_C@_1CG@GPMNJCJ@?$AAi?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS@
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@operator:
	movsxd	rax, DWORD PTR i$[rbp]
	mov	rcx, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*2]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??A?$ImVector@G@@QEAAAEAGH@Z ENDP			; ImVector<unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?empty@?$ImVector@G@@QEBA_NXZ
_TEXT	SEGMENT
tv66 = 192
this$ = 240
?empty@?$ImVector@G@@QEBA_NXZ PROC			; ImVector<unsigned short>::empty, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1689
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@empty
	mov	DWORD PTR tv66[rbp], 1
	jmp	SHORT $LN4@empty
$LN3@empty:
	mov	DWORD PTR tv66[rbp], 0
$LN4@empty:
	movzx	eax, BYTE PTR tv66[rbp]
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
?empty@?$ImVector@G@@QEBA_NXZ ENDP			; ImVector<unsigned short>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?clear@?$ImVector@G@@QEAAXXZ
_TEXT	SEGMENT
this$ = 224
?clear@?$ImVector@G@@QEAAXXZ PROC			; ImVector<unsigned short>::clear, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1685
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@clear
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
$LN2@clear:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
?clear@?$ImVector@G@@QEAAXXZ ENDP			; ImVector<unsigned short>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1?$ImVector@G@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??1?$ImVector@G@@QEAA@XZ PROC				; ImVector<unsigned short>::~ImVector<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1683
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@ImVector
	mov	rax, QWORD PTR this$[rbp]
	mov	rcx, QWORD PTR [rax+8]
	call	?MemFree@ImGui@@YAXPEAX@Z		; ImGui::MemFree
	npad	1
$LN2@ImVector:
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??1?$ImVector@G@@QEAA@XZ ENDP				; ImVector<unsigned short>::~ImVector<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z
_TEXT	SEGMENT
this$ = 224
src$ = 232
??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z PROC		; ImVector<unsigned short>::operator=, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1682
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 224				; 000000e0H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rcx, QWORD PTR this$[rbp]
	call	?clear@?$ImVector@G@@QEAAXXZ		; ImVector<unsigned short>::clear
	mov	rax, QWORD PTR src$[rbp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR this$[rbp]
	call	?resize@?$ImVector@G@@QEAAXH@Z		; ImVector<unsigned short>::resize
	mov	rax, QWORD PTR this$[rbp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 1
	mov	rcx, QWORD PTR this$[rbp]
	mov	rdx, QWORD PTR src$[rbp]
	mov	rdi, QWORD PTR [rcx+8]
	mov	rsi, QWORD PTR [rdx+8]
	mov	rcx, rax
	rep movsb
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+192]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
??4?$ImVector@G@@QEAAAEAU0@AEBU0@@Z ENDP		; ImVector<unsigned short>::operator=
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0?$ImVector@G@@QEAA@XZ
_TEXT	SEGMENT
this$ = 224
??0?$ImVector@G@@QEAA@XZ PROC				; ImVector<unsigned short>::ImVector<unsigned short>, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1680
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax+4], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	DWORD PTR [rax], 0
	mov	rax, QWORD PTR this$[rbp]
	mov	QWORD PTR [rax+8], 0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??0?$ImVector@G@@QEAA@XZ ENDP				; ImVector<unsigned short>::ImVector<unsigned short>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??3@YAXPEAXUImNewWrapper@@0@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
__formal$ = 240
??3@YAXPEAXUImNewWrapper@@0@Z PROC			; operator delete, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1648
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??3@YAXPEAXUImNewWrapper@@0@Z ENDP			; operator delete
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??2@YAPEAX_KUImNewWrapper@@PEAX@Z
_TEXT	SEGMENT
__formal$ = 224
__formal$ = 232
ptr$ = 240
??2@YAPEAX_KUImNewWrapper@@PEAX@Z PROC			; operator new, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 1647
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 232				; 000000e8H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR ptr$[rbp]
	lea	rsp, QWORD PTR [rbp+200]
	pop	rdi
	pop	rbp
	ret	0
??2@YAPEAX_KUImNewWrapper@@PEAX@Z ENDP			; operator new
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
colors$ = 40
$T1 = 1028
$T2 = 1076
$T3 = 1124
$T4 = 1172
$T5 = 1220
$T6 = 1268
$T7 = 1316
$T8 = 1364
$T9 = 1412
$T10 = 1460
$T11 = 1508
$T12 = 1556
$T13 = 1604
$T14 = 1652
$T15 = 1700
$T16 = 1748
$T17 = 1796
$T18 = 1844
$T19 = 1892
$T20 = 1940
$T21 = 1988
$T22 = 2036
$T23 = 2084
$T24 = 2132
$T25 = 2180
$T26 = 2228
$T27 = 2276
$T28 = 2324
$T29 = 2372
$T30 = 2420
$T31 = 2468
$T32 = 2516
$T33 = 2564
$T34 = 2612
$T35 = 2660
$T36 = 2708
$T37 = 2756
$T38 = 2804
$T39 = 2852
$T40 = 2900
$T41 = 2948
$T42 = 2996
$T43 = 3044
$T44 = 3092
$T45 = 3140
$T46 = 3188
$T47 = 3236
$T48 = 3284
$T49 = 3332
$T50 = 3380
$T51 = 3428
tv1011 = 3464
tv911 = 3464
tv66 = 3464
dst$ = 3504
?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::StyleColorsClassic, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 251
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 3520				; 00000dc0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 252
	cmp	QWORD PTR dst$[rbp], 0
	je	SHORT $LN3@StyleColor
	mov	rax, QWORD PTR dst$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@StyleColor
$LN3@StyleColor:
	call	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ	; ImGui::GetStyle
	mov	QWORD PTR tv66[rbp], rax
$LN4@StyleColor:
	mov	rax, QWORD PTR tv66[rbp]
	mov	QWORD PTR style$[rbp], rax
; Line 253
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 196				; 000000c4H
	mov	QWORD PTR colors$[rbp], rax
; Line 255
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f666666
	movss	xmm2, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 256
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f19999a
	movss	xmm2, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 257
	movss	xmm0, DWORD PTR __real@3f59999a
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 258
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 259
	movss	xmm0, DWORD PTR __real@3f6b851f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e0f5c29
	movss	xmm2, DWORD PTR __real@3de147ae
	movss	xmm1, DWORD PTR __real@3de147ae
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 260
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 261
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 262
	movss	xmm0, DWORD PTR __real@3ec7ae14
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3edc28f6
	movss	xmm2, DWORD PTR __real@3edc28f6
	movss	xmm1, DWORD PTR __real@3edc28f6
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 263
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f30a3d7
	movss	xmm2, DWORD PTR __real@3ef0a3d7
	movss	xmm1, DWORD PTR __real@3ef0a3d7
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 264
	movss	xmm0, DWORD PTR __real@3f30a3d7
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f23d70a
	movss	xmm2, DWORD PTR __real@3ed1eb85
	movss	xmm1, DWORD PTR __real@3ed70a3d
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 265
	movss	xmm0, DWORD PTR __real@3f547ae1
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f0a3d71
	movss	xmm2, DWORD PTR __real@3e8a3d71
	movss	xmm1, DWORD PTR __real@3e8a3d71
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 266
	movss	xmm0, DWORD PTR __real@3f5eb852
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f2147ae
	movss	xmm2, DWORD PTR __real@3ea3d70a
	movss	xmm1, DWORD PTR __real@3ea3d70a
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 267
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 268
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f0ccccd
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 269
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e800000
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 270
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 271
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 272
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ec7ae14
	movss	xmm1, DWORD PTR __real@3ed1eb85
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 273
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f666666
	movss	xmm2, DWORD PTR __real@3f666666
	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 274
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 275
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ec7ae14
	movss	xmm1, DWORD PTR __real@3ed1eb85
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 276
	movss	xmm0, DWORD PTR __real@3f1eb852
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f1c28f6
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 277
	movss	xmm0, DWORD PTR __real@3f4a3d71
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f35c28f
	movss	xmm2, DWORD PTR __real@3ef5c28f
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 278
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3f0a3d71
	movss	xmm1, DWORD PTR __real@3eeb851f
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 279
	movss	xmm0, DWORD PTR __real@3ee66666
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f666666
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3ecccccd
	lea	rcx, QWORD PTR $T25[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 280
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f666666
	movss	xmm2, DWORD PTR __real@3ee66666
	movss	xmm1, DWORD PTR __real@3ee66666
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 281
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f5eb852
	movss	xmm2, DWORD PTR __real@3f07ae14
	movss	xmm1, DWORD PTR __real@3f07ae14
	lea	rcx, QWORD PTR $T27[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 282
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T28[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 283
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T29[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 284
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f666666
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f333333
	lea	rcx, QWORD PTR $T30[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 285
	movss	xmm0, DWORD PTR __real@3dcccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T31[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 286
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f51eb85
	movss	xmm1, DWORD PTR __real@3f47ae14
	lea	rcx, QWORD PTR $T32[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 287
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f51eb85
	movss	xmm1, DWORD PTR __real@3f47ae14
	lea	rcx, QWORD PTR $T33[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 288
	mov	eax, 16
	imul	rax, rax, 11
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f4ccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T34[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 289
	mov	eax, 16
	imul	rax, rax, 25
	mov	ecx, 16
	imul	rcx, rcx, 34				; 00000022H
	mov	rdx, QWORD PTR colors$[rbp]
	mov	rdi, QWORD PTR colors$[rbp]
	mov	QWORD PTR tv911[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv911[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 290
	mov	eax, 16
	imul	rax, rax, 11
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f19999a
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T35[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 291
	mov	eax, 16
	imul	rax, rax, 10
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f4ccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T36[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 36				; 00000024H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 292
	mov	eax, 16
	imul	rax, rax, 10
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3ecccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T37[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 37				; 00000025H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 293
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T38[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 38				; 00000026H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 294
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T39[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 39				; 00000027H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 295
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T40[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 296
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T41[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 41				; 00000029H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 297
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ec28f5c
	movss	xmm2, DWORD PTR __real@3e8a3d71
	movss	xmm1, DWORD PTR __real@3e8a3d71
	lea	rcx, QWORD PTR $T42[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 42				; 0000002aH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 298
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ee66666
	movss	xmm2, DWORD PTR __real@3e9eb852
	movss	xmm1, DWORD PTR __real@3e9eb852
	lea	rcx, QWORD PTR $T43[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 43				; 0000002bH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 299
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e8f5c29
	movss	xmm2, DWORD PTR __real@3e851eb8
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T44[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 44				; 0000002cH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 300
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T45[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 45				; 0000002dH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 301
	movss	xmm0, DWORD PTR __real@3d8f5c29
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T46[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 46				; 0000002eH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 302
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T47[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 47				; 0000002fH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 303
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T48[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 304
	mov	eax, 16
	imul	rax, rax, 25
	mov	ecx, 16
	imul	rcx, rcx, 49				; 00000031H
	mov	rdx, QWORD PTR colors$[rbp]
	mov	rdi, QWORD PTR colors$[rbp]
	mov	QWORD PTR tv1011[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv1011[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 305
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T49[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 50				; 00000032H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 306
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3f4ccccd
	lea	rcx, QWORD PTR $T50[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 51				; 00000033H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 307
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T51[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 52				; 00000034H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 308
	lea	rsp, QWORD PTR [rbp+3472]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?StyleColorsClassic@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::StyleColorsClassic
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
colors$ = 40
$T1 = 1028
$T2 = 1076
$T3 = 1124
$T4 = 1172
$T5 = 1220
$T6 = 1268
$T7 = 1316
$T8 = 1364
$T9 = 1412
$T10 = 1460
$T11 = 1508
$T12 = 1556
$T13 = 1604
$T14 = 1652
$T15 = 1700
$T16 = 1748
$T17 = 1796
$T18 = 1844
$T19 = 1892
$T20 = 1940
$T21 = 1988
$T22 = 2036
$T23 = 2084
$T24 = 2132
$T25 = 2180
$T26 = 2228
$T27 = 2276
$T28 = 2324
$T29 = 2372
$T30 = 2420
$T31 = 2468
$T32 = 2516
$T33 = 2564
$T34 = 2612
$T35 = 2660
$T36 = 2708
$T37 = 2756
$T38 = 2804
$T39 = 2852
$T40 = 2900
$T41 = 2948
$T42 = 2996
$T43 = 3044
$T44 = 3092
$T45 = 3140
$T46 = 3188
$T47 = 3236
$T48 = 3284
$T49 = 3332
$T50 = 3380
$T51 = 3428
tv1011 = 3464
tv879 = 3464
tv66 = 3464
dst$ = 3504
?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::StyleColorsLight, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 312
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 3520				; 00000dc0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 313
	cmp	QWORD PTR dst$[rbp], 0
	je	SHORT $LN3@StyleColor
	mov	rax, QWORD PTR dst$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@StyleColor
$LN3@StyleColor:
	call	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ	; ImGui::GetStyle
	mov	QWORD PTR tv66[rbp], rax
$LN4@StyleColor:
	mov	rax, QWORD PTR tv66[rbp]
	mov	QWORD PTR style$[rbp], rax
; Line 314
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 196				; 000000c4H
	mov	QWORD PTR colors$[rbp], rax
; Line 316
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 317
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f19999a
	movss	xmm2, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR __real@3f19999a
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 318
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f70a3d7
	movss	xmm2, DWORD PTR __real@3f70a3d7
	movss	xmm1, DWORD PTR __real@3f70a3d7
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 319
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 320
	movss	xmm0, DWORD PTR __real@3f7ae148
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 321
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 322
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 323
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 324
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 325
	movss	xmm0, DWORD PTR __real@3f2b851f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 326
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f75c28f
	movss	xmm2, DWORD PTR __real@3f75c28f
	movss	xmm1, DWORD PTR __real@3f75c28f
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 327
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f51eb85
	movss	xmm2, DWORD PTR __real@3f51eb85
	movss	xmm1, DWORD PTR __real@3f51eb85
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 328
	movss	xmm0, DWORD PTR __real@3f028f5c
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 329
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f5c28f6
	movss	xmm2, DWORD PTR __real@3f5c28f6
	movss	xmm1, DWORD PTR __real@3f5c28f6
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 330
	movss	xmm0, DWORD PTR __real@3f07ae14
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f7ae148
	movss	xmm1, DWORD PTR __real@3f7ae148
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 331
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f30a3d7
	movss	xmm2, DWORD PTR __real@3f30a3d7
	movss	xmm1, DWORD PTR __real@3f30a3d7
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 332
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3efae148
	movss	xmm2, DWORD PTR __real@3efae148
	movss	xmm1, DWORD PTR __real@3efae148
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 333
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3efae148
	movss	xmm2, DWORD PTR __real@3efae148
	movss	xmm1, DWORD PTR __real@3efae148
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 334
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 335
	movss	xmm0, DWORD PTR __real@3f47ae14
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 336
	movss	xmm0, DWORD PTR __real@3f19999a
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3f0a3d71
	movss	xmm1, DWORD PTR __real@3eeb851f
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 337
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 338
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 339
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f07ae14
	movss	xmm1, DWORD PTR __real@3d75c28f
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 340
	movss	xmm0, DWORD PTR __real@3e9eb852
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T25[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 341
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 342
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T27[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 343
	movss	xmm0, DWORD PTR __real@3f1eb852
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ec7ae14
	movss	xmm2, DWORD PTR __real@3ec7ae14
	movss	xmm1, DWORD PTR __real@3ec7ae14
	lea	rcx, QWORD PTR $T28[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 344
	movss	xmm0, DWORD PTR __real@3f47ae14
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ee147ae
	movss	xmm1, DWORD PTR __real@3e0f5c29
	lea	rcx, QWORD PTR $T29[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 345
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3ee147ae
	movss	xmm1, DWORD PTR __real@3e0f5c29
	lea	rcx, QWORD PTR $T30[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 346
	movss	xmm0, DWORD PTR __real@3e2e147b
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3eb33333
	movss	xmm2, DWORD PTR __real@3eb33333
	movss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR $T31[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 347
	movss	xmm0, DWORD PTR __real@3f2b851f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T32[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 348
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T33[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 349
	mov	eax, 16
	imul	rax, rax, 11
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f666666
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T34[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 350
	mov	eax, 16
	imul	rax, rax, 25
	mov	ecx, 16
	imul	rcx, rcx, 34				; 00000022H
	mov	rdx, QWORD PTR colors$[rbp]
	mov	rdi, QWORD PTR colors$[rbp]
	mov	QWORD PTR tv879[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv879[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 351
	mov	eax, 16
	imul	rax, rax, 11
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f19999a
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T35[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 352
	mov	eax, 16
	imul	rax, rax, 10
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f4ccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T36[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 36				; 00000024H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 353
	mov	eax, 16
	imul	rax, rax, 10
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3ecccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T37[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 37				; 00000025H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 354
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ec7ae14
	movss	xmm2, DWORD PTR __real@3ec7ae14
	movss	xmm1, DWORD PTR __real@3ec7ae14
	lea	rcx, QWORD PTR $T38[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 38				; 00000026H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 355
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3eb33333
	movss	xmm2, DWORD PTR __real@3edc28f6
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T39[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 39				; 00000027H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 356
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T40[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 357
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3ee66666
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T41[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 41				; 00000029H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 358
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f5eb852
	movss	xmm1, DWORD PTR __real@3f47ae14
	lea	rcx, QWORD PTR $T42[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 42				; 0000002aH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 359
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f23d70a
	movss	xmm2, DWORD PTR __real@3f11eb85
	movss	xmm1, DWORD PTR __real@3f11eb85
	lea	rcx, QWORD PTR $T43[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 43				; 0000002bH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 360
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f3d70a4
	movss	xmm2, DWORD PTR __real@3f2e147b
	movss	xmm1, DWORD PTR __real@3f2e147b
	lea	rcx, QWORD PTR $T44[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 44				; 0000002cH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 361
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T45[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 45				; 0000002dH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 362
	movss	xmm0, DWORD PTR __real@3db851ec
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e99999a
	movss	xmm2, DWORD PTR __real@3e99999a
	movss	xmm1, DWORD PTR __real@3e99999a
	lea	rcx, QWORD PTR $T46[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 46				; 0000002eH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 363
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T47[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 47				; 0000002fH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 364
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T48[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 365
	mov	eax, 16
	imul	rax, rax, 25
	mov	ecx, 16
	imul	rcx, rcx, 49				; 00000031H
	mov	rdx, QWORD PTR colors$[rbp]
	mov	rdi, QWORD PTR colors$[rbp]
	mov	QWORD PTR tv1011[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv1011[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 366
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f333333
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f333333
	lea	rcx, QWORD PTR $T49[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 50				; 00000032H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 367
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T50[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 51				; 00000033H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 368
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR $T51[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 52				; 00000034H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 369
	lea	rsp, QWORD PTR [rbp+3472]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?StyleColorsLight@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::StyleColorsLight
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z
_TEXT	SEGMENT
style$ = 8
colors$ = 40
$T1 = 1028
$T2 = 1076
$T3 = 1124
$T4 = 1172
$T5 = 1220
$T6 = 1268
$T7 = 1316
$T8 = 1364
$T9 = 1412
$T10 = 1460
$T11 = 1508
$T12 = 1556
$T13 = 1604
$T14 = 1652
$T15 = 1700
$T16 = 1748
$T17 = 1796
$T18 = 1844
$T19 = 1892
$T20 = 1940
$T21 = 1988
$T22 = 2036
$T23 = 2084
$T24 = 2132
$T25 = 2180
$T26 = 2228
$T27 = 2276
$T28 = 2324
$T29 = 2372
$T30 = 2420
$T31 = 2468
$T32 = 2516
$T33 = 2564
$T34 = 2612
$T35 = 2660
$T36 = 2708
$T37 = 2756
$T38 = 2804
$T39 = 2852
$T40 = 2900
$T41 = 2948
$T42 = 2996
$T43 = 3044
$T44 = 3092
$T45 = 3140
$T46 = 3188
$T47 = 3236
$T48 = 3284
$T49 = 3332
$T50 = 3380
$T51 = 3428
tv912 = 3464
tv834 = 3464
tv66 = 3464
dst$ = 3504
?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z PROC	; ImGui::StyleColorsDark, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui_draw.cpp
; Line 191
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 3520				; 00000dc0H
	lea	rbp, QWORD PTR [rsp+48]
	lea	rcx, OFFSET FLAT:__3FF631A4_imgui_draw@cpp
	call	__CheckForDebuggerJustMyCode
; Line 192
	cmp	QWORD PTR dst$[rbp], 0
	je	SHORT $LN3@StyleColor
	mov	rax, QWORD PTR dst$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	jmp	SHORT $LN4@StyleColor
$LN3@StyleColor:
	call	?GetStyle@ImGui@@YAAEAUImGuiStyle@@XZ	; ImGui::GetStyle
	mov	QWORD PTR tv66[rbp], rax
$LN4@StyleColor:
	mov	rax, QWORD PTR tv66[rbp]
	mov	QWORD PTR style$[rbp], rax
; Line 193
	mov	rax, QWORD PTR style$[rbp]
	add	rax, 196				; 000000c4H
	mov	QWORD PTR colors$[rbp], rax
; Line 195
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T1[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 196
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3f000000
	movss	xmm1, DWORD PTR __real@3f000000
	lea	rcx, QWORD PTR $T2[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 197
	movss	xmm0, DWORD PTR __real@3f70a3d7
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3d75c28f
	movss	xmm2, DWORD PTR __real@3d75c28f
	movss	xmm1, DWORD PTR __real@3d75c28f
	lea	rcx, QWORD PTR $T3[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 198
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T4[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 199
	movss	xmm0, DWORD PTR __real@3f70a3d7
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3da3d70a
	movss	xmm2, DWORD PTR __real@3da3d70a
	movss	xmm1, DWORD PTR __real@3da3d70a
	lea	rcx, QWORD PTR $T5[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 200
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f000000
	movss	xmm2, DWORD PTR __real@3edc28f6
	movss	xmm1, DWORD PTR __real@3edc28f6
	lea	rcx, QWORD PTR $T6[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 201
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T7[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 202
	movss	xmm0, DWORD PTR __real@3f0a3d71
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ef5c28f
	movss	xmm2, DWORD PTR __real@3e947ae1
	movss	xmm1, DWORD PTR __real@3e23d70a
	lea	rcx, QWORD PTR $T8[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 203
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T9[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 204
	movss	xmm0, DWORD PTR __real@3f2b851f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T10[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 9
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 205
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3d23d70a
	movss	xmm2, DWORD PTR __real@3d23d70a
	movss	xmm1, DWORD PTR __real@3d23d70a
	lea	rcx, QWORD PTR $T11[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 10
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 206
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ef5c28f
	movss	xmm2, DWORD PTR __real@3e947ae1
	movss	xmm1, DWORD PTR __real@3e23d70a
	lea	rcx, QWORD PTR $T12[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 11
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 207
	movss	xmm0, DWORD PTR __real@3f028f5c
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T13[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 208
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e0f5c29
	movss	xmm2, DWORD PTR __real@3e0f5c29
	movss	xmm1, DWORD PTR __real@3e0f5c29
	lea	rcx, QWORD PTR $T14[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 13
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 209
	movss	xmm0, DWORD PTR __real@3f07ae14
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ca3d70a
	movss	xmm2, DWORD PTR __real@3ca3d70a
	movss	xmm1, DWORD PTR __real@3ca3d70a
	lea	rcx, QWORD PTR $T15[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 210
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e9eb852
	movss	xmm2, DWORD PTR __real@3e9eb852
	movss	xmm1, DWORD PTR __real@3e9eb852
	lea	rcx, QWORD PTR $T16[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 15
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 211
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3ed1eb85
	movss	xmm2, DWORD PTR __real@3ed1eb85
	movss	xmm1, DWORD PTR __real@3ed1eb85
	lea	rcx, QWORD PTR $T17[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 212
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f028f5c
	movss	xmm2, DWORD PTR __real@3f028f5c
	movss	xmm1, DWORD PTR __real@3f028f5c
	lea	rcx, QWORD PTR $T18[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 17
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 213
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T19[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 18
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 214
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f6147ae
	movss	xmm2, DWORD PTR __real@3f051eb8
	movss	xmm1, DWORD PTR __real@3e75c28f
	lea	rcx, QWORD PTR $T20[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 19
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 215
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T21[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 216
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T22[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 21
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 217
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T23[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 22
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 218
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f07ae14
	movss	xmm1, DWORD PTR __real@3d75c28f
	lea	rcx, QWORD PTR $T24[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 23
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 219
	movss	xmm0, DWORD PTR __real@3e9eb852
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T25[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 220
	movss	xmm0, DWORD PTR __real@3f4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T26[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 25
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 221
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T27[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 222
	mov	eax, 16
	imul	rax, rax, 5
	mov	ecx, 16
	imul	rcx, rcx, 27
	mov	rdx, QWORD PTR colors$[rbp]
	mov	rdi, QWORD PTR colors$[rbp]
	mov	QWORD PTR tv834[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv834[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 223
	movss	xmm0, DWORD PTR __real@3f47ae14
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f400000
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T28[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 224
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f400000
	movss	xmm2, DWORD PTR __real@3ecccccd
	movss	xmm1, DWORD PTR __real@3dcccccd
	lea	rcx, QWORD PTR $T29[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 29
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 225
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T30[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 30
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 226
	movss	xmm0, DWORD PTR __real@3f2b851f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T31[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 31
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 227
	movss	xmm0, DWORD PTR __real@3f733333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T32[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 228
	mov	eax, 16
	imul	rax, rax, 11
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f4ccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T33[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 229
	mov	eax, 16
	imul	rax, rax, 25
	mov	ecx, 16
	imul	rcx, rcx, 34				; 00000022H
	mov	rdx, QWORD PTR colors$[rbp]
	mov	rdi, QWORD PTR colors$[rbp]
	mov	QWORD PTR tv912[rbp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv912[rbp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 16
	rep movsb
; Line 230
	mov	eax, 16
	imul	rax, rax, 11
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 26
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f19999a
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T34[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 231
	mov	eax, 16
	imul	rax, rax, 10
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 33				; 00000021H
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3f4ccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T35[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 36				; 00000024H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 232
	mov	eax, 16
	imul	rax, rax, 10
	mov	rcx, QWORD PTR colors$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 16
	imul	rcx, rcx, 35				; 00000023H
	mov	rdx, QWORD PTR colors$[rbp]
	add	rdx, rcx
	mov	rcx, rdx
	movss	xmm3, DWORD PTR __real@3ecccccd
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T36[rbp]
	call	?ImLerp@@YA?AUImVec4@@AEBU1@0M@Z	; ImLerp
	mov	ecx, 16
	imul	rcx, rcx, 37				; 00000025H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 233
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f1c28f6
	movss	xmm2, DWORD PTR __real@3f1c28f6
	movss	xmm1, DWORD PTR __real@3f1c28f6
	lea	rcx, QWORD PTR $T37[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 38				; 00000026H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 234
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3eb33333
	movss	xmm2, DWORD PTR __real@3edc28f6
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T38[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 39				; 00000027H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 235
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f333333
	movss	xmm1, DWORD PTR __real@3f666666
	lea	rcx, QWORD PTR $T39[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 236
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f19999a
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T40[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 41				; 00000029H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 237
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e4ccccd
	movss	xmm2, DWORD PTR __real@3e428f5c
	movss	xmm1, DWORD PTR __real@3e428f5c
	lea	rcx, QWORD PTR $T41[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 42				; 0000002aH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 238
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3eb33333
	movss	xmm2, DWORD PTR __real@3e9eb852
	movss	xmm1, DWORD PTR __real@3e9eb852
	lea	rcx, QWORD PTR $T42[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 43				; 0000002bH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 239
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3e800000
	movss	xmm2, DWORD PTR __real@3e6b851f
	movss	xmm1, DWORD PTR __real@3e6b851f
	lea	rcx, QWORD PTR $T43[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 44				; 0000002cH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 240
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T44[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 45				; 0000002dH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 241
	movss	xmm0, DWORD PTR __real@3d75c28f
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T45[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 46				; 0000002eH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 242
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T46[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 47				; 0000002fH
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 243
	movss	xmm0, DWORD PTR __real@3f666666
	movss	DWORD PTR [rsp+32], xmm0
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T47[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 244
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f7ae148
	movss	xmm2, DWORD PTR __real@3f170a3d
	movss	xmm1, DWORD PTR __real@3e851eb8
	lea	rcx, QWORD PTR $T48[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 49				; 00000031H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 245
	movss	xmm0, DWORD PTR __real@3f333333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR __real@3f800000
	lea	rcx, QWORD PTR $T49[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 50				; 00000032H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 246
	movss	xmm0, DWORD PTR __real@3e4ccccd
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3f4ccccd
	lea	rcx, QWORD PTR $T50[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 51				; 00000033H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 247
	movss	xmm0, DWORD PTR __real@3eb33333
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f4ccccd
	movss	xmm2, DWORD PTR __real@3f4ccccd
	movss	xmm1, DWORD PTR __real@3f4ccccd
	lea	rcx, QWORD PTR $T51[rbp]
	call	??0ImVec4@@QEAA@MMMM@Z			; ImVec4::ImVec4
	mov	ecx, 16
	imul	rcx, rcx, 52				; 00000034H
	mov	rdx, QWORD PTR colors$[rbp]
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 248
	lea	rsp, QWORD PTR [rbp+3472]
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?StyleColorsDark@ImGui@@YAXPEAUImGuiStyle@@@Z ENDP	; ImGui::StyleColorsDark
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec4@@QEAA@MMMM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
_z$ = 104
_w$ = 112
??0ImVec4@@QEAA@MMMM@Z PROC				; ImVec4::ImVec4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 261
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _z$[rbp]
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _w$[rbp]
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec4@@QEAA@MMMM@Z ENDP				; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec4@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec4@@QEAA@XZ PROC					; ImVec4::ImVec4, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 260
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+12], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+8], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec4@@QEAA@XZ ENDP					; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec2@@QEAA@MM@Z
_TEXT	SEGMENT
this$ = 80
_x$ = 88
_y$ = 96
??0ImVec2@@QEAA@MM@Z PROC				; ImVec2::ImVec2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 248
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _x$[rbp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	movss	xmm0, DWORD PTR _y$[rbp]
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec2@@QEAA@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /ZI
;	COMDAT ??0ImVec2@@QEAA@XZ
_TEXT	SEGMENT
this$ = 80
??0ImVec2@@QEAA@XZ PROC					; ImVec2::ImVec2, COMDAT
; File C:\dev\Raisin\Raisin\src\Raisin\imgui\imgui.h
; Line 247
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+32]
	lea	rcx, OFFSET FLAT:__21D911DF_imgui@h
	call	__CheckForDebuggerJustMyCode
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+4], xmm0
	mov	rax, QWORD PTR this$[rbp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR this$[rbp]
	lea	rsp, QWORD PTR [rbp+64]
	pop	rbp
	ret	0
??0ImVec2@@QEAA@XZ ENDP					; ImVec2::ImVec2
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_H@YAXPEAX_K1P6APEAX0@Z@Z
_TEXT	SEGMENT
tv72 = 192
tv66 = 192
tv67 = 200
__t$ = 240
__s$ = 248
__n$ = 256
__f$ = 264
??_H@YAXPEAX_K1P6APEAX0@Z@Z PROC			; `vector constructor iterator', COMDAT
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rdi
	sub	rsp, 248				; 000000f8H
	lea	rbp, QWORD PTR [rsp+32]
$LN2@vector:
	mov	rax, QWORD PTR __n$[rbp]
	mov	QWORD PTR tv66[rbp], rax
	mov	rax, QWORD PTR __n$[rbp]
	dec	rax
	mov	QWORD PTR __n$[rbp], rax
	cmp	QWORD PTR tv66[rbp], 0
	jbe	SHORT $LN5@vector
	mov	DWORD PTR tv67[rbp], 1
	jmp	SHORT $LN6@vector
$LN5@vector:
	mov	DWORD PTR tv67[rbp], 0
$LN6@vector:
	cmp	DWORD PTR tv67[rbp], 0
	je	SHORT $LN3@vector
	mov	rax, QWORD PTR __f$[rbp]
	mov	QWORD PTR tv72[rbp], rax
	mov	rcx, QWORD PTR __t$[rbp]
	call	QWORD PTR tv72[rbp]
	mov	rax, QWORD PTR __s$[rbp]
	mov	rcx, QWORD PTR __t$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR __t$[rbp], rax
	jmp	SHORT $LN2@vector
$LN3@vector:
	lea	rsp, QWORD PTR [rbp+216]
	pop	rdi
	pop	rbp
	ret	0
??_H@YAXPEAX_K1P6APEAX0@Z@Z ENDP			; `vector constructor iterator'
_TEXT	ENDS
END
